[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #x = set(test_tup1)\n    #y = set(test_tup2)\n    #z = x.intersection(y)\n    #return z\n    #return set(test_tup1).intersection(set(test_tup2))\n    #return set(test_tup1).intersection(set(test_tup2)).difference(set(test_tup1).difference(set(test_tup2)))\n    print(set(test_tup1).intersection(set(test_tup2)))\n    print(set(test_tup1).intersection(set(test_tup2)).difference(set(test_tup1).difference(set(test_tup2))))\n    #x = set(test_tup1)\n    #y = set(test_tup2)\n    #if (x & y):\n    #    print('Yes, the sets share common elements')\n    #else:\n    #    print('No, the sets do not share common elements')\n    return set(test_tup1).intersection(set(test_tup2))\n    \ndef min_index(test_list):\n    '''\n    Write a function to find the index of the minimum element in the given list.\n    '''\n    print(test_list.index(min(test_list)))\n    \ndef min_index2(test_list):\n    '''\n    Write a function to find the index of the minimum element in the given list.\n    '''\n    print(min(test_list).index(test_list))\n    \ndef min_index3(test_list):\n    '''\n    Write a function to find the index of the minimum element in the given list.\n    '''\n    return min(test_list).index(test_list)\n    \ndef sum_elements(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    print(sum(test_list))\n    \ndef sum_elements2(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    print(sum(test_list))\n    \ndef sum_elements3(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    print(sum(test_list).sum(test_list))\n    \ndef sum_elements4(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    print(sum(test_list).sum(test_list))\n    \ndef sum_elements5(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements6(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements7(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements8(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements9(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements10(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements11(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements12(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements13(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements14(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements15(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements16(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements17(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements18(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements19(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements20(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements21(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements22(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements23(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements24(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements25(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements26(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements27(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements28(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements29(test_list):\n    '''\n    Write a function to find the sum of the elements in the given list.\n    '''\n    return sum(test_list).sum(test_list)\n    \ndef sum_elements30(test_list):"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #initialise lists\n    test_list1 = []\n    test_list2 = []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        return 'The input lists have different lengths'\n    else:\n        common_elements = set(test_tup1).intersection(set(test_tup2))\n        return common_elements\n        \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    shared_elements = tup1.intersection(tup2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return(set(test_tup1).intersection(set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return i\n    return None\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(f\"\\n{test_tup1}\")\n    print(f\"{test_tup2}\")\n    print(f\"\\n{test_tup1 == test_tup2}\\n\")\n    print(f\"{test_tup1.intersection(test_tup2)}\")\n    print(f\"{test_tup1.union(test_tup2)}\")\n    print(f\"{test_tup1.symmetric_difference(test_tup2)}\")\n    print(f\"{test_tup1.difference(test_tup2)}\")\n    print(f\"{test_tup2.difference(test_tup1)}\")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2, n):\n            if (n%i==0):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef perfect_number(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            sum = sum + i\n        i = i + 1\n    if n == sum:\n        return True\n    return False\ndef prime_factor(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    i = 2\n    prime_factors = []\n    while i <= n:\n        if n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n        else:\n            i = i + 1\n    prime_factors.append(n)\n    return prime_factors\ndef is_prime_with_zeros(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_1(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number_1(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number_2(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number_3(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number_4(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_number_5(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_2(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_3(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_4(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_5(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_6(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or (n == 3):\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_with_zeros_7(n):\n    '''\n    Write a python function to identify prime numbers with leading zeros.\n    '''\n    if (n == 2) or ("
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n > 2:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n==1):\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if(n==1):\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if(n==1):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\ndef prime_number_in_range(low,high):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    result = []\n    for i in range(low,high+1):\n        if is_prime(i):\n            result.append(i)\n    return result\ndef number_of_prime_numbers_between(low,high):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    count=0\n    for i in range(low,high+1):\n        if is_prime(i):\n            count+=1\n    return count\ndef is_palindrome(word):\n    '''\n    Write a python function to identify palindrome.\n    '''\n    return word==word[::-1]\ndef is_palindrome_alternative(word):\n    '''\n    Write a python function to identify palindrome.\n    '''\n    return word==word[::-1].lower()\ndef word_reversal(word):\n    '''\n    Write a python function to find a word's reversal.\n    '''\n    return word[::-1]\ndef word_reversal_alternative(word):\n    '''\n    Write a python function to find a word's reversal.\n    '''\n    return word[::-1].lower()\ndef even_odd(n):\n    '''\n    Write a python function to identify even or odd numbers.\n    '''\n    if(n%2==0):\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef even_odd_alternative(n):\n    '''\n    Write a python function to identify even or odd numbers.\n    '''\n    return \"Even\" if(n%2==0) else \"Odd\"\ndef reverse(word):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return word[::-1]\ndef reverse_alternative(word):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return word[::-1].lower()\ndef common_letters(word1,word2):\n    '''\n    Write a python function to find common letters between two words.\n    '''\n    common_letters = []\n    for i in word1:\n        if i in word2 and i not in common_letters:\n            common_letters.append(i)\n    return common_letters\ndef common_letters_alternative(word1,word2):\n    '''\n    Write a python function to find common letters between two words.\n    '''\n    common_letters = []\n    for i in word1:\n        if i in word2 and i not in common_letters:\n            common_letters.append(i)\n    return \" \".join(common_letters)\ndef common_letters_between(word1,word2):\n    '''\n    Write a python function to find common letters between two words.\n    '''\n    common_letters = []\n    for i in word1:\n        if i in word2 and i not in common_letters:\n            common_letters.append(i)\n    return \" \".join(common_letters)\ndef common_letters_between_alternative(word1,word2):\n    '''\n    Write a python function to find common letters between two words.\n    '''\n    common_letters = []\n    for i in word1:\n        if i in word2 and i not in common_letters:\n            common_letters.append(i)\n    return \" \".join(common_letters).lower()\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to identify if two strings are anagrams of each other.\n    '''\n    return sorted(s1)==sorted(s2)\ndef is_anagram_alternative(s1,s2):\n    '''\n    Write a python function to identify if two strings are anagrams of each other.\n    '''\n    return sorted(s1)==sorted(s2)\ndef word_sort(s1,s2):\n    '''\n    Write a python function to sort a list of words according to the alphabetical order of the word.\n    '''\n    sorted_list = []\n    for i in s1:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    for i in s2:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    return sorted_list\ndef word_sort_alternative(s1,s2):\n    '''\n    Write a python function to sort a list of words according to the alphabetical order of the word.\n    '''\n    sorted_list = []\n    for i in s1:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    for i in s2:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    return sorted_list.sort()\ndef longest_word(words):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    if(len(words)==0):\n        return None\n    else:\n        longest = words[0]\n        for i in words:\n            if len(i)>len(longest):\n                longest = i\n    return longest\ndef longest_word_alternative(words):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    if(len(words)==0):\n        return None\n    else:\n        longest = words[0]\n        for i in words:\n            if len(i)>len(longest):\n                longest = i\n    return len(longest)\ndef is_unique(s):\n    '''\n    Write a python function to identify if a string has all unique characters.\n    '''\n    if(len(s)==len(set(s))):\n        return True\n    else:\n        return False\ndef is_unique_alternative(s):\n    '''\n    Write a python function to identify if a string has all unique characters.\n    '''\n    if(len(s)==len(set(s))):\n        return True\n    else:\n        return False\ndef is_palindrome_using_stack(word):\n    '''\n    Write a python function to identify if a string is a palindrome.\n    '''\n    #initialize stack\n    stack=[]\n    #populate stack\n    for i in word:\n        stack.append(i)\n    #return palindrome\n    return word==''.join(stack[::-1])\ndef is_palindrome_alternative_using_stack(word):\n    '''\n    Write a python function to identify if a string is a palindrome.\n    '''\n    #initialize stack\n    stack=[]\n    #populate stack\n    for i in word:\n        stack.append(i)\n    #return palindrome\n    return word==''.join(stack[::-1])\ndef is_palindrome_using_reverse(word):\n    '''\n    Write a python function to identify if a string is a palindrome.\n    '''\n    #reverse the word\n    return word==word[::-1]\ndef is_palindrome_alternative_using_reverse(word):\n    '''\n    Write a python function to identify if a string is a palindrome.\n    '''\n    #reverse the word\n    return word==word[::-1].lower()\ndef is_palindrome_using_r"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef largest_prime_factor(n):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef smallest_prime_factor(n):\n    '''\n    Write a python function to return the smallest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef largest_prime_factor_exp(n):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef smallest_prime_factor_exp(n):\n    '''\n    Write a python function to return the smallest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef largest_prime_factor_exp(n):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef smallest_prime_factor_exp(n):\n    '''\n    Write a python function to return the smallest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef count_prime_factors(n):\n    '''\n    Write a python function to count prime factors of a given number.\n    '''\n    count = 0\n    while n % 2 == 0:\n        n = n / 2\n        count += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n / i\n            count += 1\n    return count\ndef count_prime_factors(n):\n    '''\n    Write a python function to count prime factors of a given number.\n    '''\n    count = 0\n    while n % 2 == 0:\n        n = n / 2\n        count += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n / i\n            count += 1\n    return count\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef largest_prime_factor_exp(n):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef smallest_prime_factor_exp(n):\n    '''\n    Write a python function to return the smallest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_exp(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef largest_prime_factor_exp(n):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef smallest_prime_factor_exp(n):\n    '''\n    Write a python function to return the smallest prime factor of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\ndef count_prime_factors_exp(n):\n    '''\n    Write a python function to count prime factors of a given number.\n    '''\n    count = 0\n    while n % 2 == 0:\n        n = n / 2\n        count += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n / i\n            count += 1\n    return count\nde"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n <= 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Initialize the variable\n    result = True\n    # Initialize the prime number\n    prime = True\n    # Initialize the number\n    num = 2\n    # Iterate through the range\n    while num <= math.sqrt(n):\n        # Check if the number is prime number\n        if n % num == 0:\n            # Mark it as non-prime\n            prime = False\n        # Increment the number\n        num += 1\n    # Return result\n    return prime\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return False\n    if n == 7:\n        return False\n    if n == 8:\n        return False\n    if n == 9:\n        return False\n    if n == 10:\n        return False\n    if n == 11:\n        return False\n    if n == 12:\n        return False\n    if n == 13:\n        return False\n    if n == 14:\n        return False\n    if n == 15:\n        return False\n    if n == 16:\n        return False\n    if n == 17:\n        return False\n    if n == 18:\n        return False\n    if n == 19:\n        return False\n    if n == 20:\n        return False\n    if n == 21:\n        return False\n    if n == 22:\n        return False\n    if n == 23:\n        return False\n    if n == 24:\n        return False\n    if n == 25:\n        return False\n    if n == 26:\n        return False\n    if n == 27:\n        return False\n    if n == 28:\n        return False\n    if n == 29:\n        return False\n    if n == 30:\n        return False\n    if n == 31:\n        return False\n    if n == 32:\n        return False\n    if n == 33:\n        return False\n    if n == 34:\n        return False\n    if n == 35:\n        return False\n    if n == 36:\n        return False\n    if n == 37:\n        return False\n    if n == 38:\n        return False\n    if n == 39:\n        return False\n    if n == 40:\n        return False\n    if n == 41:\n        return False\n    if n == 42:\n        return False\n    if n == 43:\n        return False\n    if n == 44:\n        return False\n    if n == 45:\n        return False\n    if n == 46:\n        return False\n    if n == 47:\n        return False\n    if n == 48:\n        return False\n    if n == 49:\n        return False\n    if n == 50:\n        return False\n    if n == 51:\n        return False\n    if n == 52:\n        return False\n    if n == 53:\n        return False\n    if n == 54:\n        return False\n    if n == 55:\n        return False\n    if n == 56:\n        return False\n    if n == 57:\n        return False\n    if n == 58:\n        return False\n    if n == 59:\n        return False\n    if n == 60:\n        return False\n    if n == 61:\n        return False\n    if n == 62:\n        return False\n    if n == 63:\n        return False\n    if n == 64:\n        return False\n    if n == 65:\n        return False\n    if n == 66:\n        return False\n    if n == 67:\n        return False\n    if n == 68:\n        return False\n    if n == 69:\n        return False\n    if n == 70:\n        return False\n    if n == 71:\n        return False\n    if n == 72:\n        return False\n    if n == 73:\n        return False\n    if n == 74:\n        return False\n    if n == 75:\n        return False\n    if n == 76:\n        return False\n    if n == 77:\n        return False\n    if n == 78:\n        return False\n    if n == 79:\n        return False\n    if n == 80:\n        return False\n    if n == 81:\n        return False\n    if n == 82:\n        return False\n    if n == 83:\n        return False\n    if n == 84:\n        return False\n    if n == 85:\n        return False\n    if n == 86:\n        return False\n    if n == 87:\n        return False\n    if n == 88:\n        return False\n    if n == 89:\n        return False\n    if n == 90:\n        return False\n    if n == 91:\n        return False\n    if n == 92:\n        return False\n    if n == 93:\n        return False\n    if n == 94:\n        return False\n    if n == 95:\n        return False\n    if n == 96:\n        return False\n    if n == 97:\n        return False\n    if n == 98:\n        return False\n    if n == 99:\n        return False\n    if n == 100:\n        return False\n    if n == 101:\n        return False\n    if n == 102:\n        return False\n    if n == 103:\n        return False\n    if n == 104:\n        return False\n    if n == 105:\n        return False\n    if n == 106:\n        return False\n    if n == 107:\n        return False\n    if n == 108:\n        return False\n    if n == 109:\n        return False\n    if n == 110:\n        return False\n    if n == 111:\n        return False\n    if n == 112:\n        return False\n    if n == 113:\n        return False\n    if n == 114:\n        return False\n    if n == 115:\n        return False\n    if n == 116:\n        return False\n    if n == 117:\n        return False\n    if n == 118:\n        return False\n    if n == 119:\n        return False\n    if n == 120:\n        return False\n    if n == 121:\n        return False\n    if n == 122:\n        return False\n    if n == 123:\n        return False\n    if n == 124:\n        return False\n    if n == 125:\n        return False\n    if n == 126:\n        return False\n    if n == 127:\n        return False\n    if n == 128:\n        return False\n    if n == 129:\n        return False\n    if n == 130:\n        return False\n    if n == 131:\n        return False\n    if n == 132:\n        return False\n    if n == 133:\n        return False\n    if n == 134:\n        return False\n    if n == 135:\n        return False\n    if n == 136:\n        return False\n    if n == 137:\n        return False\n    if n == 138:\n        return False\n    if n == 139:\n        return False\n    if n == 140:\n        return False\n    if n == 141:\n        return False\n    if n == 142:\n        return False\n    if n == 143:\n        return False\n    if n == 144:\n        return False\n    if n == 145:\n        return False\n    if n == 146:\n        return False\n    if n == 147:\n        return False\n    if n == 148:\n        return False\n    if n == 149:\n        return False\n    if n == 150:\n        return False\n    if n == 151:\n        return False\n    if n == 152:\n        return False\n    if n == 153:\n        return False\n    if n == 154:\n        return False\n    if n == 155:\n        return False\n    if n == 156:\n        return False\n    if n == 157:\n        return False\n    if n == 158:\n        return False\n    if n == 159:\n        return False\n    if n == 160:\n        return False\n    if n == 161:\n        return False\n    if n == 162:\n        return False\n    if n == 163:\n        return False\n    if n == 164:\n        return False\n    if n == 165:\n        return False\n    if n == 166:\n        return False\n    if n == 167:\n        return False\n    if n == 168:\n        return False\n    if n == 169:\n        return False\n    if n == 170:\n        return False\n    if n == 171:\n        return False\n    if n == 172:\n        return False\n    if n == 173:\n        return False\n    if n == 174:\n        return False\n    if n == 175:\n        return False\n    if n == 176:\n        return False\n    if n == 177:\n        return False\n    if n == 178:\n        return False\n    if n == 179:\n        return False\n    if n == 180:\n        return False\n    if n == 181:\n        return False\n    if n == 182:\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for j in range(n,len(nums)):\n        if nums[j]>heap[0]:\n            hq.heapreplace(heap,nums[j])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    lst = []\n    for i in nums:\n        heapq.heappush(lst, (-i,i))\n    for i in range(n):\n        heapq.heappop(lst)\n    return [i for i,_ in lst]\nprint(heap_queue_largest([4,2,1,-4,7],2))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for _ in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    my_heap = []\n    for i in range(n):\n        hq.heappush(my_heap, nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    smallest = []\n    for num in nums:\n        if len(largest) < n:\n            hq.heappush(largest,num)\n        else:\n            if num > largest[0]:\n                hq.heappop(largest)\n                hq.heappush(largest,num)\n    for i in largest:\n        hq.heappush(smallest,i)\n    return smallest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n    \ndef heapsort_largest(nums):\n    '''\n    Write a function to sort the given array of integers using the heap algorithm.\n    '''\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for i in range(len(heap))]\n    \ndef selection_sort_largest(nums, n):\n    '''\n    Write a function to sort the given array of integers using the selection algorithm.\n    '''\n    \n    for i in range(n):\n        min_index = i\n        for j in range(i+1,n):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \ndef insertion_sort_largest(nums, n):\n    '''\n    Write a function to sort the given array of integers using the insertion algorithm.\n    '''\n    \n    for i in range(1,n):\n        index = i\n        while index > 0 and nums[index-1] > nums[index]:\n            nums[index], nums[index-1] = nums[index-1], nums[index]\n            index -= 1\n            \ndef merge_sort_largest(nums, n):\n    '''\n    Write a function to sort the given array of integers using the merge algorithm.\n    '''\n    if n <= 1:\n        return nums\n    else:\n        middle = int(n / 2)\n        left_array = merge_sort_largest(nums[:middle], middle)\n        right_array = merge_sort_largest(nums[middle:], n - middle)\n        return merge(left_array, right_array)\n    \ndef merge(left_array, right_array):\n    merged_array = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left_array) and right_index < len(right_array):\n        if left_array[left_index] < right_array[right_index]:\n            merged_array.append(left_array[left_index])\n            left_index += 1\n        else:\n            merged_array.append(right_array[right_index])\n            right_index += 1\n    \n    merged_array += left_array[left_index:]\n    merged_array += right_array[right_index:]\n    return merged_array\n    \ndef heap_queue_largest_version_1(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    return hq.nlargest(n, heap)\n    \ndef heapsort_largest_version_1(nums):\n    '''\n    Write a function to sort the given array of integers using the heap algorithm.\n    '''\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for i in range(len(heap))]\n    \ndef selection_sort_largest_version_1(nums, n):\n    '''\n    Write a function to sort the given array of integers using the selection algorithm.\n    '''\n    \n    for i in range(n):\n        min_index = i\n        for j in range(i+1,n):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \ndef insertion_sort_largest_version_1(nums, n):\n    '''\n    Write a function to sort the given array of integers using the insertion algorithm.\n    '''\n    \n    for i in range(1,n):\n        index = i\n        while index > 0 and nums[index-1] > nums[index]:\n            nums[index], nums[index-1] = nums[index-1], nums[index]\n            index -= 1\n            \ndef merge_sort_largest_version_1(nums, n):\n    '''\n    Write a function to sort the given array of integers using the merge algorithm.\n    '''\n    if n <= 1:\n        return nums\n    else:\n        middle = int(n / 2)\n        left_array = merge_sort_largest_version_1(nums[:middle], middle)\n        right_array = merge_sort_largest_version_1(nums[middle:], n - middle)\n        return merge(left_array, right_array)\n    \ndef merge(left_array, right_array):\n    merged_array = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left_array) and right_index < len(right_array):\n        if left_array[left_index] < right_array[right_index]:\n            merged_array.append(left_array[left_index])\n            left_index += 1\n        else:\n            merged_array.append(right_array[right_index])\n            right_index += 1\n    \n    merged_array += left_array[left_index:]\n    merged_array += right_array[right_index:]\n    return merged_array\n    \ndef heap_queue_largest_version_2(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    return hq.nlargest(-n, heap)\n    \ndef heapsort_largest_version_2(nums):\n    '''\n    Write a function to sort the given array of integers using the heap algorithm.\n    '''\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    return [-hq.heappop(heap) for i in range(len(heap))]\n    \ndef selection_sort_largest_version_2(nums, n):\n    '''\n    Write a function to sort the given array of integers using the selection algorithm.\n    '''\n    \n    for i in range(n):\n        min_index = i\n        for j in range(i+1,n):\n            if nums[min_index] < nums[j]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \ndef insertion_sort_largest_version_2(nums, n):\n    '''\n    Write a function to sort the given array of integers using the insertion algorithm.\n    '''\n    \n    for i in range(1,n):\n        index = i\n        while index > 0 and nums[index-1] > nums[index]:\n            nums[index], nums[index-1] = nums[index-1], nums[index]\n            index -= 1\n            \ndef merge_sort_largest_version_2(nums, n):\n    '''\n    Write a function to sort the given array of integers using the merge algorithm.\n    '''\n    if n <= 1:\n        return nums\n    else:\n        middle = int(n / 2)\n        left_array = merge_sort_largest_version_2(nums[:middle], middle)\n        right_array = merge_sort_largest_version_2(nums[middle:], n - middle)\n        return merge(left_array, right_array)\n    \ndef merge(left_array, right_array):\n    merged_array = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left_array) and right_index < len(right_array):\n        if left_array[left_index] < right_array[righ"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # in the case of a list with 0 elements\n    if not nums:\n        return\n    # defining a heap and using heapify function to populate the heap\n    heap = nums[:]\n    hq.heapify(heap)\n    # creating the result list and setting the length to the number of elements in the heap\n    res = []\n    len_heap = len(heap)\n    # starting from the bottom of the heap to the top\n    for i in range(n):\n        # removing the top element from the heap and storing in the result list\n        res.append(heapq.heappop(heap))\n    # return the result list\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    hq.heapify(nums)\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_b(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #ans=[0]*n\n    hq.heapify(nums)\n    while len(nums)>1:\n        #ans[len(ans)-2]=hq.heappop(nums)\n        #ans[len(ans)-1]=hq.heappop(nums)\n        #print(ans)\n        hq.heappush(nums,hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return nums\ndef heap_queue_largest_and_smallest_c(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_d(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    heapq.heapify(nums)\n    return sorted(nums)\ndef heap_queue_largest_and_smallest_e(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    ans=[]\n    hq.heapify(nums)\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_f(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    ans=[]\n    hq.heapify(nums)\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_g(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_h(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_i(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_j(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_k(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_l(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_m(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_n(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop(nums))\n        hq.heappush(nums,hq.heappop(nums))\n    return ans\ndef heap_queue_largest_and_smallest_o(nums,n):\n    '''\n    Write a function to find the n largest and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    ans=[]\n    while len(ans)<n:\n        ans.append(hq.heappop"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and not x & (x - 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return not (x & (x - 1))\n    # another way\n    # return x and (x - 1) and not (x & (x - 1))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x):\n        x = x & (x-1)\n        if x == 0:\n            return True\n        else:\n            return False\n    \nprint(is_Power_Of_Two(10)) #True\nprint(is_Power_Of_Two(11)) #False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1 or x == -1:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(2))\nprint(is_Power_Of_Two(-2))\nprint(is_Power_Of_Two(0))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    i=1\n    while x!=0:\n        x>>=1\n        i+=1\n    return i==1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert x >= 0, \"x must be a positive integer\"\n    \n    while (x and (x & 1) == 0): \n        x >>= 1\n    if not x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)==0)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        x = x>>1\n    return (x == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return (x&(x-1))==0\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for i in text.split(\" \"):\n        if len(i)>=4:\n            word_list.append(i)\n    print(word_list)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_list(text):\n    '''\n    Write a function to find all words which are at least 3 characters long and only contain letters.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{3,}$')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_all_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain numbers.\n    '''\n    pattern = re.compile(r'\\d{4,}')\n    words = re.findall(pattern,text)\n    return words\ndef find_all_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain numbers.\n    '''\n    pattern = re.compile(r'\\d{4,}')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_special(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain special characters.\n    '''\n    pattern = re.compile(r'\\W')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_special_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain special characters.\n    '''\n    pattern = re.compile(r'\\W')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_space(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain spaces.\n    '''\n    pattern = re.compile(r'\\s{4,}')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_space_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain spaces.\n    '''\n    pattern = re.compile(r'\\s{4,}')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_seperator(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain seperators.\n    '''\n    pattern = re.compile(r'[\\s\\n\\t]+')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_seperator_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain seperators.\n    '''\n    pattern = re.compile(r'[\\s\\n\\t]+')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_dot(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain '.'.\n    '''\n    pattern = re.compile(r'\\.')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_dot_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain '.'.\n    '''\n    pattern = re.compile(r'\\.')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_slash(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain '/'.\n    '''\n    pattern = re.compile(r'/')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_slash_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain '/'.\n    '''\n    pattern = re.compile(r'/')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_and(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain 'and'.\n    '''\n    pattern = re.compile(r'\\b\\w*and\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_and_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain 'and'.\n    '''\n    pattern = re.compile(r'\\b\\w*and\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_or(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain 'or'.\n    '''\n    pattern = re.compile(r'\\b\\w*or\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_or_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain 'or'.\n    '''\n    pattern = re.compile(r'\\b\\w*or\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_quotes(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain quotes.\n    '''\n    pattern = re.compile(r'\\w*[\"\\'][a-zA-Z]*[\"\\']\\w*')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_quotes_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain quotes.\n    '''\n    pattern = re.compile(r'\\w*[\"\\'][a-zA-Z]*[\"\\']\\w*')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_hyphen(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain hyphens.\n    '''\n    pattern = re.compile(r'\\b-\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_hyphen_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain hyphens.\n    '''\n    pattern = re.compile(r'\\b-\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_quotes_hyphen(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain quotes, hyphen and numbers.\n    '''\n    pattern = re.compile(r'\\w*[\"\\'][a-zA-Z]*[\"\\']\\w*\\b-[0-9]*\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_quotes_hyphen_digits(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain quotes, hyphen and numbers.\n    '''\n    pattern = re.compile(r'\\w*[\"\\'][a-zA-Z]*[\"\\']\\w*\\b-[0-9]*\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_special_hyphen(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and only contain special characters, hyphens and numbers.\n    '''\n    pattern = re.compile(r'\\W*[a-zA-Z0-9]*-\\b')\n    words = re.findall(pattern,text)\n    return words\ndef find_char_special_hyphen_digits(text):\n    '''\n    Write a function to fin"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    answers = []\n    text = text.split()\n    for word in text:\n        if len(word) >= 4:\n            answers.append(word)\n    return answers\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words=[]\n    words = text.split()\n    for word in words:\n        if len(word)>3:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall('\\w{4,}', text)\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(\"\\w{4,}\", text)\nprint(find_char_long(\"This is a short text. Long sentence.\"))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s = re.findall(r'\\w{4,}', text)\n    return s\ndef find_comma(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a comma\n    '''\n    s = re.findall(r'\\w{2,}\\,', text)\n    return s\ndef find_ellipsis(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an ellipsis\n    '''\n    s = re.findall(r'\\w{2,}\\.\\.\\.', text)\n    return s\ndef find_hyphen(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a hyphen\n    '''\n    s = re.findall(r'\\w{2,}\\-', text)\n    return s\ndef find_question(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a question mark\n    '''\n    s = re.findall(r'\\w{2,}?', text)\n    return s\ndef find_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a short\n    '''\n    s = re.findall(r'\\w{2,}[a-zA-Z]', text)\n    return s\ndef find_upcase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an uppercase letter\n    '''\n    s = re.findall(r'\\w{2,}[A-Z]', text)\n    return s\ndef find_lowercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}[a-z]', text)\n    return s\ndef find_uplowercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an uppercase or lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}[a-zA-Z]', text)\n    return s\ndef find_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an uppercase or lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}', text)\n    return s\ndef find_digits(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a digit\n    '''\n    s = re.findall(r'\\w{2,}[0-9]', text)\n    return s\ndef find_special(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character\n    '''\n    s = re.findall(r'\\w{2,}[^A-Za-z0-9 ]', text)\n    return s\ndef find_letter(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a letter\n    '''\n    s = re.findall(r'\\w{2,}[a-zA-Z]', text)\n    return s\ndef find_number(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number\n    '''\n    s = re.findall(r'\\w{2,}[0-9]', text)\n    return s\ndef find_upper(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an upper case letter\n    '''\n    s = re.findall(r'\\w{2,}[A-Z]', text)\n    return s\ndef find_lower(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a lower case letter\n    '''\n    s = re.findall(r'\\w{2,}[a-z]', text)\n    return s\ndef find_uplower(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with an uppercase or lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}[A-Za-z]', text)\n    return s\ndef find_digits_upcase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number or an uppercase letter\n    '''\n    s = re.findall(r'\\w{2,}[0-9A-Z]', text)\n    return s\ndef find_digits_lowercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number or an lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}[0-9a-z]', text)\n    return s\ndef find_digits_number(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number or a special character\n    '''\n    s = re.findall(r'\\w{2,}[0-9]', text)\n    return s\ndef find_special_upcase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or an uppercase letter\n    '''\n    s = re.findall(r'\\w{2,}[A-Za-z0-9]', text)\n    return s\ndef find_special_lowercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or an lowercase letter\n    '''\n    s = re.findall(r'\\w{2,}[a-zA-Z0-9]', text)\n    return s\ndef find_special_uppercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or an uppercase letter\n    '''\n    s = re.findall(r'\\w{2,}[A-Za-z0-9A-Z]', text)\n    return s\ndef find_special_digits(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or a number\n    '''\n    s = re.findall(r'\\w{2,}[0-9A-Za-z]', text)\n    return s\ndef find_special_lower_digits(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or a lowercase number\n    '''\n    s = re.findall(r'\\w{2,}[a-zA-Z0-9]', text)\n    return s\ndef find_special_uppercase_digits(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a special character or an uppercase number\n    '''\n    s = re.findall(r'\\w{2,}[A-Za-z0-9A-Z]', text)\n    return s\ndef find_digits_uppercase(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number or an uppercase letter\n    '''\n    s = re.findall(r'\\w{2,}[0-9A-Z]', text)\n    return s\ndef find_digits_number(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and ends with a number or a special character\n    '''\n    s = re.findall(r'\\w{2,}[0-9]', text)\n    return s\nde"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    my_list = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            my_list.append(text[i])\n    return my_list\nprint(find_char_long('abcdefg'))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[a-z]{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    text = text.strip()\n    for i in text.split(' '):\n        if len(i)>=4:\n            long_words.append(i)\n    return long_words\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x**2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    result = []\n    for num in nums:\n        result.append(num * num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n    \ndef max_num(nums):\n    '''\n    Write a function to find maximum element in a list.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    \n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotation = 0\n    for i in range(n):\n        if str[i]!= str[n-i-1]:\n            break\n    if i == n-1:\n        return n\n    for j in range(n):\n        if str[j]!= str[i+j]:\n            break\n    if j == i+n-1:\n        return n\n    \n    return i+j+1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotations(str): \n        '''\n        returns minimum number of rotations required to convert str into another string\n        '''\n        if not str:\n            return 0\n        dict = {}\n        for i in range(len(str)):\n            if not dict.get(str[i]):\n                dict[str[i]] = 1\n            else:\n                dict[str[i]] += 1\n        for k in dict:\n            if dict[k] == 1:\n                return 0\n        return len(str) - max(dict.values())\n    print(\"Minimum rotations required =\", rotations(str)) \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    '''\n    The string 'aabcd' can be rotated to 'bacd' \n    (rotation of one string) or 'acbd' \n    (rotation of the other string). \n    So, we need 2 rotations. \n    '''\n    \n    '''\n    Function to find the minimum number of rotations required \n    to rotate the given string to the same string. \n    Parameters: \n    s: str\n    Note: A single rotation will not be enough to rotate a string \n    to its original string. Hence, we need to find the minimum \n    number of rotations required to make the given string a palindrome \n    by using a rotation to make the first and last characters \n    equal to each other.\n    '''\n    \n    # Initializing the variables \n    # The variables to keep track of the last and current indices \n    last = -1\n    current = 0\n    \n    # Iterating the string \n    for i in range(0,len(str)): \n    \n        # If the current character is already \n        # in its right position then keep traversing \n        if (last == -1 or str[last] == str[i]): \n            last = i\n            continue\n    \n        # The current character needs to be moved back to its \n        # original position \n        current = last \n    \n        # The current character needs to be moved back to its original position \n        while (str[current]!= str[i]): \n            # Increment the current index by 1 \n            current = current-1\n        \n        # The two indices are not matching for \n        # at least one letter \n        # So, we need to find a rotation to make the string equal to the original string \n        # and there is no other way to do it. So, we need to break the loop and return -1. \n        # Otherwise, we don't need to break the loop and we can try \n        # to move the character after the current index to its \n        # original position i.e. current \n        # So, we decrement the rotation count by 1 \n        current = current-1\n        \n        # If the rotation count is greater than 1 then return -1. \n        if (current-last>1):\n            return -1\n        \n        # We have found the rotation which will make the current \n        # index to match the last index and the last index to be \n        # equal to its original position i.e. the rotation count \n        # becomes 1 \n        last = current \n    \n    # If we reach here then there is no rotation required \n    # and we return the number of rotations required as 0 \n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s1 = str\n    for i in range(len(str)):\n        s1 = s1 + str[i]\n    if(s1 == str):\n        return 0\n    count = 0\n    while(s1!= str):\n        s1 = s1 + str[0]\n        s1 = s1[1:] + s1[0]\n        count = count + 1\n    return count\n        \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # str = 'abcde'\n    # print('Input String: ', str)\n    \n    # Output: 2\n    # Here, we have to make a mapping of the string and a reverse of the string.\n    # Then we iterate both the string and reverse string. If we have to find the minimum number of rotations to make the string equal to the reverse of the string, we decrement the rotation count for each iteration.\n    # Consider the following example for how to write the algorithm:\n    # d = {'a':'b', 'b':'c', 'c':'d'}\n    # str = 'abcde'\n    # print('Input String: ', str)\n    # print('Output: ', find_Rotations(str))\n    \n    # Below is the pseudo code of the algorithm.\n    # Get mapping of characters.\n    # str = 'abcde'\n    # d = {'a':'b', 'b':'c', 'c':'d'}\n    # rev_str = 'cdeab'\n    \n    # For each character in str, we need to find the character in rev_str and make it to the same position.\n    # After the loop, we will have a dictionary where key is the character in str, and the value is the position in rev_str.\n    # print('Input String: ', str)\n    # print('Output: ', find_Rotations(str))\n    \n    # The output of find_Rotations(str) would be 2. \n    # Since the total number of rotations for the input string is 2, we can say that the input string is not same as the reverse of the input string.\n    # So we need to find the min rotations required to make the string same as the reverse of the string.\n    # Now, we need to keep the values of rotation count in the dictionary to make the string same as the reverse of the input string.\n    # Initialize the value of rotation count in the dictionary.\n    d = {}\n    rotation_count = 0\n    \n    # For each character in str, we need to find the character in rev_str and make it to the same position.\n    # After the loop, we will have a dictionary where key is the character in str, and the value is the position in rev_str.\n    for i in range(len(str)):\n        # Below code is the code for the finding rotations.\n        # we check if the character is already in the dictionary.\n        if str[i] in d:\n            # if the character is already there, we check the position of the character in rev_str.\n            # if the position of the character in rev_str is already in the dictionary, we need to increment the rotation count by 1.\n            if d[str[i]] == i:\n                rotation_count += 1\n        # if the character is not in the dictionary, we check if the position of the character in rev_str is already in the dictionary.\n        # If the position of the character in rev_str is already in the dictionary, we increment the rotation count by 1.\n        else:\n            d[str[i]] = i\n            rotation_count += 1\n    \n    # print('Output: ', find_Rotations(str))\n    # print('Input String: ', str)\n    # print('Output: ', rotation_count)\n    # print('Rotation count: ', rotation_count)\n    \n    return rotation_count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    arr = list(str)\n    while len(arr) > 1:\n        arr_temp = arr\n        for i in range(len(arr_temp)):\n            if arr_temp[i] < arr[i]:\n                temp = arr_temp[i]\n                arr_temp[i] = arr[i]\n                arr[i] = temp\n        arr = arr_temp\n        count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # str = input()\n    # length = len(str)\n    # dict = {}\n    # if length == 0:\n    #     return 0\n    # else:\n    #     for i in range(length):\n    #         count = 0\n    #         for j in range(length):\n    #             if str[i] == str[j]:\n    #                 count += 1\n    #         dict[str[i]] = count\n    #     dict = dict.values()\n    #     dict = dict.sort()\n    #     for i in dict:\n    #         if i == 1:\n    #             return 0\n    #         else:\n    #             return (length - i)\n    # print(find_Rotations(str))\n    \n    #----------------------------\n    # using hashmap\n    #----------------------------\n    hash_map = {}\n    for ch in str:\n        if ch in hash_map:\n            hash_map[ch] += 1\n        else:\n            hash_map[ch] = 1\n    \n    min_rotations = 0\n    for val in hash_map.values():\n        if val!= 1:\n            min_rotations += 1\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    count = 0\n    while True:\n        str1 = str1[1:] + str1[0]\n        if str1 == str:\n            break\n        count += 1\n    return count\n    \ndef find_reverse_rotations(str): \n    '''\n    Write a python function to find the minimum number of reversals required to get the same string.\n    '''\n    str1 = str\n    count = 0\n    while True:\n        str1 = str1[:-1] + str1[len(str1) - 1]\n        if str1 == str:\n            break\n        count += 1\n    return count\n    \ndef find_reversed_rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations and reversals to get the same string.\n    '''\n    str1 = str\n    count = 0\n    while True:\n        str1 = str1[1:] + str1[0]\n        if str1 == str:\n            break\n        count += 1\n        str1 = str1[:-1] + str1[len(str1) - 1]\n    return count\n    \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = list(str)\n    rotations = 0\n    # i = 0\n    # while i < len(s) and s[i] == s[-i - 1]:\n    #     i += 1\n    while len(s) > 0:\n        temp = s.pop()\n        if len(s) == 0:\n            rotations = rotations\n        else:\n            s.append(temp)\n            if s[0] == s[-1]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    if ch in s:\n        s=s.replace(ch,\"\")\n        s=s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    n=len(s)\n    ans=''\n    if s=='':\n        return s\n    if s[0]==ch:\n        ans=s[1:]\n    elif s[-1]==ch:\n        ans=s[:n-1]\n    else:\n        return s\n    return ans\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=[]\n    for i in s:\n        if i==ch:\n            l.append(i)\n    a=\"\".join(l)\n    return a\ns=\"geeksforgeeks\"\nprint(remove_Occ(s, \"e\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(s[0], '')\n    s = s.replace(s[len(s) - 1], '')\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = s\n    l = len(string)\n    for i in range(0,l):\n        if(string[i] == ch):\n            if i == 0:\n                string = string[i + 1:]\n                break\n            elif i == l - 1:\n                string = string[:i - 1]\n                break\n            else:\n                string = string[:i - 1] + string[i + 1:]\n                break\n    return string\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    l=s.split(ch)\n    l.remove(ch)\n    l.remove(ch)\n    \n    return \"\".join(l)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1) \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            occ += 1\n    if occ == 1:\n        print(s)\n    else:\n        print(s[occ+1:0:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ind_s=0\n    l=len(s)\n    while ind_s<l:\n        if s[ind_s]==ch:\n            s=s[:ind_s]+s[(ind_s+1):]\n            l=len(s)\n        ind_s+=1\n    ind_s=0\n    while ind_s<l:\n        if s[ind_s]==ch:\n            s=s[:ind_s]+s[(ind_s+1):]\n            l=len(s)\n        ind_s+=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        s=s.replace(ch,\"\",1)\n        s=s.replace(ch,\"\",1)\n        return s\n    except:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0:\n        return M\n    R = []\n    i = 0\n    while i < len(M):\n        j = i + 1\n        while j < len(M):\n            sum = 0\n            for k in range(len(M[i])):\n                sum += M[i][k]\n            for l in range(len(M[j])):\n                sum += M[j][l]\n            R.append([sum, i, j])\n            j += 1\n        i += 1\n    R.sort()\n    i = 0\n    j = 0\n    while i < len(R) and j < len(M):\n        if R[i][0] >= R[j][0]:\n            M[R[i][1]], M[R[j][1]] = M[R[j][1]], M[R[i][1]]\n            i += 1\n            j += 1\n        elif R[i][0] < R[j][0]:\n            j += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for row in range(rows):\n        first = 0\n        end = row\n        while first < end:\n            M[row][first], M[row][end] = M[row][end], M[row][first]\n            first += 1\n            end -= 1\n    for col in range(cols):\n        first = 0\n        end = col\n        while first < end:\n            M[first][col], M[end][col] = M[end][col], M[first][col]\n            first += 1\n            end -= 1\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sum = 0\n        for value in row:\n            row_sum += value\n        row_sums.append(row_sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    Divide and Conquer Solution\n    '''\n    def sort_matrix_divide_and_conquer(M):\n        # Initialize the upper and lower bounds\n        M_l = 0\n        M_r = len(M) - 1\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M:\n        pass\n    else:\n        return []\n    sorted_matrix = []\n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n    for i in range(len(M)):\n        if row_sums[i] < row_sums[-1]:\n            sorted_matrix.append(M[i])\n        elif row_sums[i] > row_sums[-1]:\n            sorted_matrix.append(M[-1])\n        else:\n            sorted_matrix.append(M[-1])\n            sorted_matrix.append(M[i])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sort = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        row_sum = sum(M[i])\n        for j in range(n):\n            sort[i][j] = row_sum - M[i][j]\n            print(M[i][j], row_sum, sort[i][j])\n    return sort\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #I start with a matrix with all 1s.\n    R=[[1]*len(M[0])]\n    for i in range(len(M)):\n        #Initialize a new row to be sorted.\n        R.append([0]*len(M[0]))\n        for j in range(len(M[0])):\n            #Add up the whole row.\n            R[i][j]=sum(M[i][k] for k in range(len(M[0])))\n    #Sort the matrix.\n    R=sorted(R, key=lambda x: x[0], reverse=True)\n    #Return the sorted matrix.\n    return R\n    \ndef move_zeros(L):\n    '''\n    Given a list of non-negative integers, arrange them such that they form the largest number.\n    '''\n    i=0\n    #Keep track of the index of the last non-zero element.\n    while i < len(L)-1 and L[i]==0:\n        i+=1\n    #If we don't find a non-zero element, then just return the list.\n    if i == len(L)-1:\n        return L\n    #We have a non-zero element. Start from the largest.\n    j=i+1\n    while j < len(L):\n        if L[i] < L[j]:\n            #Swap the two elements.\n            L[i], L[j] = L[j], L[i]\n            i+=1\n        j+=1\n    #If i was less than the index of the last non-zero element, then we just need to swap the element at i with 0.\n    if i!= len(L)-1:\n        L[i], L[len(L)-1] = L[len(L)-1], L[i]\n    #Return the updated list.\n    return L\n    \ndef fourSumCount(A, B, C, D):\n    '''\n    Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.\n    '''\n    #Initialize an empty dictionary.\n    elements = {}\n    #Loop over all possible pairs.\n    for i in range(len(A)):\n        for j in range(len(B)):\n            #Add the A[i] and B[j] pair into the dictionary if they don't exist.\n            if A[i]+B[j] not in elements:\n                elements[A[i]+B[j]] = 0\n            #Increment the count.\n            elements[A[i]+B[j]] += 1\n    #Count the sum of elements in the dictionary.\n    return sum([elements[-(A[i]+B[j])] for i in range(len(A)) for j in range(len(B))])\n    \ndef spiralOrder(matrix):\n    '''\n    Given a square matrix, calculate the sum of each sub-matrix.\n    '''\n    #Initialize an empty list.\n    S=[]\n    #The position of the top-left cell of the matrix.\n    t=0\n    #The position of the bottom-right cell of the matrix.\n    b=len(matrix)-1\n    #The position of the bottom-left cell of the matrix.\n    l=0\n    #The position of the top-right cell of the matrix.\n    r=len(matrix[0])-1\n    #Set the direction of the movement in the next while loop.\n    #If the matrix is a square matrix, this could be done in one line.\n    #But to make the code simpler, I'll loop over all cells to the right of the top-left cell.\n    #In the following while loop, I'll try to find a top-left cell.\n    #If this fails, I'll try to go down until I find a right cell.\n    #I'll try to go to the right and down until I find a bottom-right cell.\n    #I'll try to go to the left and up until I find a top-left cell.\n    #I'll try to go up and left until I find a bottom-left cell.\n    #This way, I'll avoid going through all cells if I don't need to.\n    direction = 'right'\n    while True:\n        #Go to the right until I find a cell with value.\n        while t <= b:\n            #Add the value to the list.\n            S.append(matrix[t][r])\n            #Move to the right.\n            r-=1\n            #If this fails, go down until I find a right cell.\n            #If this fails, go down until I find a left cell.\n            if r <= l or direction == 'down':\n                direction = 'down'\n                break\n        #Go down until I find a cell with value.\n        while l >= t and direction == 'down':\n            #Add the value to the list.\n            S.append(matrix[b][l])\n            #Move down.\n            b-=1\n            #If this fails, go left until I find a right cell.\n            #If this fails, go left until I find a left cell.\n            if r <= l or direction == 'left':\n                direction = 'left'\n                break\n        #Go left until I find a cell with value.\n        while l >= t and direction == 'left':\n            #Add the value to the list.\n            S.append(matrix[t][l])\n            #Move left.\n            l-=1\n            #If this fails, go up until I find a bottom-right cell.\n            #If this fails, go up until I find a top-left cell.\n            if r <= l or direction == 'up':\n                direction = 'up'\n                break\n        #Go up until I find a cell with value.\n        while b >= t and direction == 'up':\n            #Add the value to the list.\n            S.append(matrix[b][r])\n            #Move up.\n            b-=1\n            #If this fails, go right until I find a bottom-right cell.\n            #If this fails, go right until I find a top-left cell.\n            if r <= l or direction == 'right':\n                direction = 'right'\n                break\n    #Return the list.\n    return S\n    \ndef jumpOnClouds(c):\n    '''\n    A cloud is a 2x2 matrix that is the same height and width as the grid.\n    The height and width of the cloud are equal to 1.\n    Count the number of clouds that are on the same row, and the number of clouds that are on the same column.\n    '''\n    #Initialize a list.\n    C=[]\n    #Initialize an empty list.\n    R=[]\n    #Initialize an empty list.\n    C=[]\n    #Initialize an empty list.\n    for i in range(len(c)):\n        #Initialize a new row.\n        R.append([0]*len(c[0]))\n        for j in range(len(c[0])):\n            #Initialize a new column.\n            C.append([0]*len(c[0]))\n    #Get the number of rows.\n    m = len(c)\n    #Get the number of columns.\n    n = len(c[0])\n    #Assign the value 1 to the cloud.\n    c[0][0] = 1\n    #Go through the cloud matrix and add 1 to the count for each row and column.\n    for i in range(1,m):\n        for j in range(1,n):\n            #Add 1 to the count.\n            C[i][j] = 1\n            #If the matrix is on the same row, add 1 to the count.\n            if c[i][j] == c[i-1][j]:\n                R[i][j] += 1\n            #If the matrix is on the same column, add 1 to the count.\n            if c[i][j] == c[i][j-1]:\n                R[i][j] += 1\n    #Return the count.\n    return R, C\n    \ndef canCompleteCircuit(gas, cost):\n    '''\n    You start at the station marked start, and your goal is to go to the station marked destination. However, you can only travel in one direction.\n    In one step, you can travel between stations. During the n-th step, you can travel from statio"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = []\n    for i in range(len(M)):\n        r = 0\n        for j in range(len(M[0])):\n            r += M[i][j]\n        S.append(r)\n    return sorted(S, reverse=True)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M) - 1):\n            if M[j][i] < M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(0, n):\n        sum = 0\n        for j in range(0, n):\n            sum += M[i][j]\n        idx = i\n        for j in range(i + 1, n):\n            if sum < M[j][0]:\n                idx = j\n        temp = M[i]\n        M[i] = M[idx]\n        M[idx] = temp\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/2\n    return volume\nprint(find_Volume(3,4,5))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    r = (b * h) / 3\n    vol = (r * r) * (l * h)\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * h * b)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = h/2\n    b = l/2\n    h = a*b\n    return h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*b*h)/6\n    print(f'Volume of the prism is : {v}')\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    A=l*b\n    B=h*b\n    C=h*l\n    return A*B*C"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.search(r'[a-z]+_[a-z]+',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r\"^[a-z]+_*[a-z]+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_at_least_two_uppercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of at least two uppercase letters and false otherwise.\n    '''\n    if re.match(r\"^[A-Z]+[A-Z]+[A-Z]+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_at_least_two_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of at least two lowercase letters and false otherwise.\n    '''\n    if re.match(r\"^[a-z]+[a-z]+[a-z]+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_has_only_upper_case(text):\n    '''\n    Write a function to that returns true if the input string contains only uppercase letters and false otherwise.\n    '''\n    if re.match(r\"^[A-Z]+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_has_only_lower_case(text):\n    '''\n    Write a function to that returns true if the input string contains only lowercase letters and false otherwise.\n    '''\n    if re.match(r\"^[a-z]+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_has_only_digits(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    if re.match(r\"^\\d+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_has_only_whitespace(text):\n    '''\n    Write a function to that returns true if the input string contains only whitespace and false otherwise.\n    '''\n    if re.match(r\"^\\s+$\", text):\n        return True\n    else:\n        return False\n    \ndef text_has_no_duplicate_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate spaces and false otherwise.\n    '''\n    if re.match(r\"^\\s+$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_lowercase_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate lowercase letters and false otherwise.\n    '''\n    if re.match(r\"^\\s*[a-z]+\\s*[a-z]+\\s*[a-z]+\\s*[a-z]+\\s*[a-z]+\\s*[a-z]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_uppercase_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate uppercase letters and false otherwise.\n    '''\n    if re.match(r\"^\\s*[A-Z]+\\s*[A-Z]+\\s*[A-Z]+\\s*[A-Z]+\\s*[A-Z]+\\s*[A-Z]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_digits(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate digits and false otherwise.\n    '''\n    if re.match(r\"^\\s*\\d+\\s*\\d+\\s*\\d+\\s*\\d+\\s*\\d+\\s*\\d+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate punctuation and false otherwise.\n    '''\n    if re.match(r\"^\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_letters_and_digits(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace letters and digits and false otherwise.\n    '''\n    if re.match(r\"^\\s*[a-zA-Z0-9 ]+\\s*[a-zA-Z0-9 ]+\\s*[a-zA-Z0-9 ]+\\s*[a-zA-Z0-9 ]+\\s*[a-zA-Z0-9 ]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_lowercase_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace lowercase letters and false otherwise.\n    '''\n    if re.match(r\"^\\s*[a-z ]+\\s*[a-z ]+\\s*[a-z ]+\\s*[a-z ]+\\s*[a-z ]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_uppercase_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace uppercase letters and false otherwise.\n    '''\n    if re.match(r\"^\\s*[A-Z ]+\\s*[A-Z ]+\\s*[A-Z ]+\\s*[A-Z ]+\\s*[A-Z ]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_digits(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace digits and false otherwise.\n    '''\n    if re.match(r\"^\\s*[0-9 ]+\\s*[0-9 ]+\\s*[0-9 ]+\\s*[0-9 ]+\\s*[0-9 ]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_whitespace(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace whitespace and false otherwise.\n    '''\n    if re.match(r\"^\\s*[ ]+\\s*[ ]+\\s*[ ]+\\s*[ ]+\\s*[ ]+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains no duplicate non-whitespace punctuation and false otherwise.\n    '''\n    if re.match(r\"^\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*[.,\\\"\\'!?();:\\\"\\']+\\s*$\", text):\n        return False\n    else:\n        return True\n    \ndef text_has_no_duplicate_non_whitespace_letters_and_digits(text):\n    '''\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower_case_pattern = re.compile(r'^[a-z]+_[a-z]+')\n    result = lower_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_upper_underscore(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters joined with an underscore and false otherwise.\n    '''\n    upper_case_pattern = re.compile(r'^[A-Z]+_[A-Z]+')\n    result = upper_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_mixed_case(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters followed by lower case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    mixed_case_pattern = re.compile(r'^([A-Za-z]+)_([a-z]+)$')\n    result = mixed_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_mixed_case_1(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters followed by lower case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    mixed_case_pattern = re.compile(r'^([A-Za-z]+)_([a-z]+)$')\n    result = mixed_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_upper_words(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters followed by lower case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    upper_case_pattern = re.compile(r'^[A-Z]+$')\n    result = upper_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_lower_words(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lower case letters followed by upper case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    lower_case_pattern = re.compile(r'^[a-z]+$')\n    result = lower_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_upper_punctuation(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters followed by lower case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    upper_case_pattern = re.compile(r'^[A-Z]+[a-z]+$')\n    result = upper_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_lower_punctuation(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lower case letters followed by upper case letters and vice versa, separated by an underscore and false otherwise.\n    '''\n    lower_case_pattern = re.compile(r'^[a-z]+[A-Z]+$')\n    result = lower_case_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_endswith(text, ending):\n    '''\n    Write a function that returns true if the input string ends with the specified ending string and false otherwise.\n    '''\n    endswith_pattern = re.compile(r'\\s+$')\n    result = endswith_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_1(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_2(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'^'+word+r'$')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_3(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'^'+word+r'$')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_4(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_5(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_6(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'^'+word+r'$')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_7(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'^'+word+r'$')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_8(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_9(text, word):\n    '''\n    Write a function that returns true if the input string contains the specified word and false otherwise.\n    '''\n    contains_word_pattern = re.compile(r'\\s'+word+r'\\s')\n    result = contains_word_pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_contains_word_10(text, word):\n    '''\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(\"[a-z]+_[a-z]+\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print('\\n')\n    pattern = re.compile(r'[a-z]+[a-z]')\n    if pattern.search(text) is not None:\n        print(f'Pattern Match Found: {pattern.search(text).group()}')\n    else:\n        print(f'Pattern Match Not Found')\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match=re.findall(r'[a-z]+_[a-z]*',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a**2)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if not isinstance(a,(int,float)):\n        raise TypeError('argument must be numeric')\n    if a <= 0:\n        raise ValueError('argument must be positive')\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        if string[i] not in list1:\n            list1.append(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst1 = list(string)\n    lst2 = list(string)\n    for i in string:\n        if i not in lst2:\n            lst1.remove(i)\n        else:\n            lst2.remove(i)\n    return lst1\nif __name__ == '__main__':\n    string = input().strip()\n    string = string.replace(\" \", \"\")\n    print(str_to_list(string))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string if not (x in string[:len(string)//2])]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    my_string = list(string) \n    for i in range(len(my_string)): \n        if my_string[i] in string: \n            my_string[i] = ''\n    return \"\".join(my_string) \n  \ndef find(string1, string2): \n    '''\n    Write a function to check if the first string contains the second string\n    '''\n    for i in range(len(string1)-len(string2)): \n        if string1[i:i+len(string2)] == string2: \n            return 1\n    return 0\n  \ndef str_rotation(string1, string2): \n    '''\n    Write a function that rotates string2 by k places to the left, where k is the number of characters that match between the strings.\n    '''\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    for i in range(len(string2)): \n        if find(string1, string2[i:]) == 1: \n            return 1\n    return 0"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = string.replace(string[0:len(string)],'')\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\ndef remove_character(string,char):\n    '''\n    Write a function to return a string with all occurrences of char removed.\n    '''\n    pass\nif __name__ == '__main__':\n    s1 = \"abcdefg\"\n    s2 = \"cdefg\"\n    s3 = \"d\"\n    print(str_to_list(s1))\n    print(remove_character(s1,s3))\n    print(remove_character(s1,s2))\n    pass"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < len(target):\n        return None\n    for i in target:\n        if i in string:\n            string = string.replace(i,\"\")\n    return string\ntarget = input()\nstring = input()\nresult = str_to_list(string)\nif result is not None:\n    print(result"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = 'abc'\n    str2 = 'cdef'\n    l = []\n    l.append(string)\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                l.remove(str1[i])\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[0 : len(string) - len(string)%len(string)]\n    return string1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_1 = string.strip()\n    str_2 = string.split(str_1)\n    str_2 = ''.join(str_2)\n    return str_2\n    \ndef str_count(str1,str2):\n    '''\n    Write a function to count the number of times a substring is repeated in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = set()\n    for num in arraynums:\n        if num in nums:\n            return True\n        else:\n            nums.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # for each element in array check if it exists in another array\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == None or len(arraynums) < 1:\n        return False\n    else:\n        #print(arraynums)\n        #print(len(arraynums))\n        seen = set()\n        for num in arraynums:\n            #print(\"num\", num)\n            if num in seen:\n                return True\n            seen.add(num)\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # nums = arraynums\n    if len(arraynums) == 0:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = sorted(set(arraynums))\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Write your code here\n    if (x%10)==0 and (x%100)!=0 and (x%1000)==0:\n        return True\n    elif x%10==1 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==2 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==3 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==4 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==5 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==6 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==7 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==8 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==9 and (x%100)==0 and (x%1000)==0:\n        return True\n    elif x%10==0 and (x%100)==0 and (x%1000)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 6 or x == 10 or x == 16 or x == 25:\n        return 'Woodall'\n    else:\n        return 'Not woodall'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    if (x % 7 == 3): \n        print(\"Woodall\")\n    else:\n        print(\"Not woodall\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%2==0 and x%3==0) or (x%2==0 and x%5==0) or (x%3==0 and x%5==0):\n        return True\n    else:\n        return False\n        \nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(8))\nprint(is_woodall(9))\nprint(is_woodall(10))\nprint(is_woodall(11))\nprint(is_woodall(12))\nprint(is_woodall(13))\nprint(is_woodall(14))\nprint(is_woodall(15))\nprint(is_woodall(16))\nprint(is_woodall(17))\nprint(is_woodall(18))\nprint(is_woodall(19))\nprint(is_woodall(20))\nprint(is_woodall(21))\nprint(is_woodall(22))\nprint(is_woodall(23))\nprint(is_woodall(24))\nprint(is_woodall(25))\nprint(is_woodall(26))\nprint(is_woodall(27))\nprint(is_woodall(28))\nprint(is_woodall(29))\nprint(is_woodall(30))\nprint(is_woodall(31))\nprint(is_woodall(32))\nprint(is_woodall(33))\nprint(is_woodall(34))\nprint(is_woodall(35))\nprint(is_woodall(36))\nprint(is_woodall(37))\nprint(is_woodall(38))\nprint(is_woodall(39))\nprint(is_woodall(40))\nprint(is_woodall(41))\nprint(is_woodall(42))\nprint(is_woodall(43))\nprint(is_woodall(44))\nprint(is_woodall(45))\nprint(is_woodall(46))\nprint(is_woodall(47))\nprint(is_woodall(48))\nprint(is_woodall(49))\nprint(is_woodall(50))\nprint(is_woodall(51))\nprint(is_woodall(52))\nprint(is_woodall(53))\nprint(is_woodall(54))\nprint(is_woodall(55))\nprint(is_woodall(56))\nprint(is_woodall(57))\nprint(is_woodall(58))\nprint(is_woodall(59))\nprint(is_woodall(60))\nprint(is_woodall(61))\nprint(is_woodall(62))\nprint(is_woodall(63))\nprint(is_woodall(64))\nprint(is_woodall(65))\nprint(is_woodall(66))\nprint(is_woodall(67))\nprint(is_woodall(68))\nprint(is_woodall(69))\nprint(is_woodall(70))\nprint(is_woodall(71))\nprint(is_woodall(72))\nprint(is_woodall(73))\nprint(is_woodall(74))\nprint(is_woodall(75))\nprint(is_woodall(76))\nprint(is_woodall(77))\nprint(is_woodall(78))\nprint(is_woodall(79))\nprint(is_woodall(80))\nprint(is_woodall(81))\nprint(is_woodall(82))\nprint(is_woodall(83))\nprint(is_woodall(84))\nprint(is_woodall(85))\nprint(is_woodall(86))\nprint(is_woodall(87))\nprint(is_woodall(88))\nprint(is_woodall(89))\nprint(is_woodall(90))\nprint(is_woodall(91))\nprint(is_woodall(92))\nprint(is_woodall(93))\nprint(is_woodall(94))\nprint(is_woodall(95))\nprint(is_woodall(96))\nprint(is_woodall(97))\nprint(is_woodall(98))\nprint(is_woodall(99))\nprint(is_woodall(100))\nprint(is_woodall(101))\nprint(is_woodall(102))\nprint(is_woodall(103))\nprint(is_woodall(104))\nprint(is_woodall(105))\nprint(is_woodall(106))\nprint(is_woodall(107))\nprint(is_woodall(108))\nprint(is_woodall(109))\nprint(is_woodall(110))\nprint(is_woodall(111))\nprint(is_woodall(112))\nprint(is_woodall(113))\nprint(is_woodall(114))\nprint(is_woodall(115))\nprint(is_woodall(116))\nprint(is_woodall(117))\nprint(is_woodall(118))\nprint(is_woodall(119))\nprint(is_woodall(120))\nprint(is_woodall(121))\nprint(is_woodall(122))\nprint(is_woodall(123))\nprint(is_woodall(124))\nprint(is_woodall(125))\nprint(is_woodall(126))\nprint(is_woodall(127))\nprint(is_woodall(128))\nprint(is_woodall(129))\nprint(is_woodall(130))\nprint(is_woodall(131))\nprint(is_woodall(132))\nprint(is_woodall(133))\nprint(is_woodall(134))\nprint(is_woodall(135))\nprint(is_woodall(136))\nprint(is_woodall(137))\nprint(is_woodall(138))\nprint(is_woodall(139))\nprint(is_woodall(140))\nprint(is_woodall(141))\nprint(is_woodall(142))\nprint(is_woodall(143))\nprint(is_woodall(144))\nprint(is_woodall(145))\nprint(is_woodall(146))\nprint(is_woodall(147))\nprint(is_woodall(148))\nprint(is_woodall(149))\nprint(is_woodall(150))\nprint(is_woodall(151))\nprint(is_woodall(152))\nprint(is_woodall(153))\nprint(is_woodall(154))\nprint(is_woodall(155))\nprint(is_woodall(156))\nprint(is_woodall(157))\nprint(is_woodall(158))\nprint(is_woodall(159))\nprint(is_woodall(160))\nprint(is_woodall(161))\nprint(is_woodall(162))\nprint(is_woodall(163))\nprint(is_woodall(164))\nprint(is_woodall(165))\nprint(is_woodall(166))\nprint(is_woodall(167))\nprint(is_woodall(168))\nprint(is_woodall(169))\nprint(is_woodall(170))\nprint(is_woodall(171))\nprint(is_woodall(172))\nprint(is_woodall(173))\nprint(is_woodall(174))\nprint(is_woodall(175))\nprint(is_woodall(176))\nprint(is_woodall(177))\nprint(is_woodall(178))\nprint(is_woodall(179))\nprint(is_woodall(180))\nprint(is_woodall(181))\nprint(is_woodall(182))\nprint(is_woodall(183))\nprint(is_woodall(184))\nprint(is_woodall(185))\nprint(is_woodall(186))\nprint(is_woodall(187))\nprint(is_woodall(188))\nprint(is_woodall(189))\nprint(is_woodall(190))\nprint(is_woodall(191))\nprint(is_woodall(192))\nprint(is_woodall(193))\nprint(is_woodall(194))\nprint(is_woodall(195))\nprint(is_woodall(196))\nprint(is_woodall(197))\nprint(is_woodall(198))\nprint(is_woodall(199))\nprint(is_woodall(200))\nprint(is_woo"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x == int(x))\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 11 == 0:\n        return True\n    elif x % 11 == 5:\n        return True\n    elif x % 11 == 6:\n        return True\n    elif x % 11 == 7:\n        return True\n    elif x % 11 == 8:\n        return True\n    elif x % 11 == 9:\n        return True\n    elif x % 11 == 10:\n        return True\n    elif x % 11 == 1:\n        return True\n    elif x % 11 == 2:\n        return True\n    elif x % 11 == 3:\n        return True\n    elif x % 11 == 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x==1):\n        return True\n    if(x%3==0 or x%5==0):\n        return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5 or x == 15:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x==5 or x==25 or x==45 or x==75 or x==99 or x==135 or x==165 or x==195 or x==225 or x==255 or x==315 or x==345 or x==375 or x==425 or x==525 or x==595 or x==725 or x==875 or x==975 or x==1155 or x==1355 or x==1555 or x==1655 or x==1755 or x==1855 or x==1955 or x==2055 or x==2151 or x==2251 or x==2655 or x==2755 or x==2955 or x==3155 or x==3255 or x==3555 or x==3755 or x==4155 or x==4255 or x==4555 or x==5155 or x==5555 or x==6155 or x==6555 or x==7555 or x==8555 or x==9555 or x==11555 or x==12555 or x==15555 or x==16555 or x==18555 or x==19555 or x==22555 or x==25555 or x==31555 or x==34555 or x==37555 or x==42555 or x==52555 or x==595 or x==725 or x==875 or x==975 or x==1155 or x==1355 or x==1555 or x==1655 or x==1755 or x==1855 or x==1955 or x==2055 or x==2151 or x==2251 or x==2655 or x==2755 or x==2955 or x==3155 or x==3255 or x==3555 or x==3755 or x==4155 or x==4255 or x==4555 or x==5155 or x==5555 or x==6155 or x==6555 or x==7555 or x==8555 or x==9555 or x==11555 or x==12555 or x==15555 or x==16555 or x==18555 or x==19555 or x==22555 or x==25555 or x==31555 or x==34555 or x==37555 or x==42555 or x==52555 or x==595 or x==725 or x==875 or x==975 or x==1155 or x==1355 or x==1555 or x==1655 or x==1755 or x==1855 or x==1955 or x==2055 or x==2151 or x==2251 or x==2655 or x==2755 or x==2955 or x==3155 or x==3255 or x==3555 or x==3755 or x==4155 or x==4255 or x==4555 or x==5155 or x==5555 or x==6155 or x==6555 or x==7555 or x==8555 or x==9555 or x==11555 or x==12555 or x==15555 or x==16555 or x==18555 or x==19555 or x==22555 or x==25555 or x==31555 or x==34555 or x==37555 or x==42555 or x==52555 or x==595 or x==725 or x==875 or x==975 or x==1155 or x==1355 or x==1555 or x==1655 or x==1755 or x==1855 or x==1955 or x==2055 or x==2151 or x==2251 or x==2655 or x==2755 or x==2955 or x==3155 or x==3255 or x==3555 or x==3755 or x==4155 or x==4255 or x==4555 or x==5155 or x==5555 or x==6155 or x==6555 or x==7555 or x==8555 or x==9555 or x==11555 or x==12555 or x==15555 or x==16555 or x==18555 or x==19555 or x==22555 or x==25555 or x==31555 or x==34555 or x==37555 or x==42555 or x==52555 or x==595:\n    print('Yes, It is woodball number',x)\nelse:\n    print('No, it is not woodball number',x)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a=str(x)\n    if len(a)==10:\n        if int(a[1])==int(a[9]):\n            if int(a[0])==int(a[2])==int(a[4])==int(a[6])==int(a[8]):\n                return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num*(-1))%10\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == num + 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    rev_num = 0\n    while temp!= 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp = temp // 10\n    return rev_num == num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==1:\n        print(True)\n        return True\n    while num>1:\n        if num%2==0:\n            num=num-1\n        else:\n            num=num-2\n    if num==1:\n        print(True)\n        return True\n    else:\n        print(False)\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])+1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # list = []\n    # i = num \n    # while i > 0: \n    #     list.append(i % 10)\n    #     i = i // 10\n    # rev_num = int(\"\".join(map(str, reversed(list))))\n    \n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num == num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num * 2) - rev(num - 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #Takes in an integer and returns the integer one less than twice its reverse.\n    #Determine if the integer is one less than twice its reverse, and then return the reverse of its reverse.\n    #Note: This is the reversal of the integer itself, not the reverse of the integer itself.\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(int(str(num)[::-1]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr[0] > arr[1] and arr[0] > arr[2] :\n        return arr[0]\n    elif arr[1] > arr[0] and arr[1] > arr[2] :\n        return arr[1]\n    else :\n        return arr[2]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -99\n    for i in range(len(arr)):\n        curr_num = arr[i] * (10**(len(arr)-i-1))\n        if curr_num > max_num:\n            max_num = curr_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # code here\n    # print(arr)\n    max_num = -1\n    for i in range(len(arr)) :\n        max_num = max(max_num,int(\"\".join(map(str,arr[i]))))\n    return max_num\n    \n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    def Max_num(arr): \n        ''' \n        This function returns the maximum number possible by concatenating the list. \n        '''\n        max_num = -1\n        for i in range(len(arr)): \n            max_num = max(arr[i] + max_num, max_num)\n        return max_num \n    \n    return Max_num(arr) \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    max_num_index = -1\n    for i in range(len(arr)):\n        if arr[i] > max_num :\n            max_num = arr[i]\n            max_num_index = i\n    return max_num_index\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num \n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    arr.sort()\n    \n    for i in range(len(arr)) :\n        if arr[i] > max :\n            max = arr[i]\n    return max\n    \ndef find_Max_Num_optimal(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    arr.sort()\n    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n            break\n        \n        elif arr[i] > max :\n            max = arr[i]\n            \n    return max\n    \ndef find_max_num(arr, arr_len) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    \n    for i in range(1, arr_len+1):\n        if arr[i-1] > max:\n            max = arr[i-1]\n            \n    return max\n    \ndef find_max_num_optimal(arr, arr_len) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    for i in range(1, arr_len+1):\n        if arr[i-1] == 1:\n            break\n    \n    max = arr[i-1]\n    \n    return max\n    \ndef find_max_num_bit(arr, arr_len) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    \n    for i in range(1, arr_len+1):\n        if (arr[i-1] | arr[i-2] | arr[i-3]) > max:\n            max = (arr[i-1] | arr[i-2] | arr[i-3])\n            \n    return max\n    \ndef find_max_num_optimal_bit(arr, arr_len) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    bit_max = 0\n    \n    for i in range(1, arr_len+1):\n        if (arr[i-1] | arr[i-2] | arr[i-3]) == 0:\n            break\n        else:\n            bit_max = (arr[i-1] | arr[i-2] | arr[i-3])\n            \n    return bit_max\n    \nif __name__ == \"__main__\":\n    arr = [1,1,1,2,2,2,3,3,4,5,6]\n    arr_len = len(arr)\n    max_num = find_max_num(arr, arr_len)\n    print(\"The maximum number formed with the given list of digits is: \", max_num)\n    max_num = find_max_num_optimal(arr)\n    print(\"The maximum number formed with the given list of digits is: \", max_num)\n    max_num = find_max_num_bit(arr, arr_len)\n    print(\"The maximum number formed with the given list of digits is: \", max_num)\n    max_num = find_max_num_optimal_bit(arr)\n    print(\"The maximum number formed with the given list of digits is: \", max_num"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in range(0, len(arr)):\n        num = max(num, int(arr[i]))\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            if(i!= j) : \n                for k in range(len(arr)) : \n                    if(k!= i and k!= j): \n                        for m in range(len(arr)) : \n                            if(m!= i and m!= j and m!= k): \n                                for n in range(len(arr)) : \n                                    if(n!= i and n!= j and n!= k and n!= m): \n                                        for o in range(len(arr)) : \n                                            if(o!= i and o!= j and o!= k and o!= m and o!= n): \n                                                for p in range(len(arr)) : \n                                                    if(p!= i and p!= j and p!= k and p!= m and p!= n and p!= o): \n                                                        for q in range(len(arr)) : \n                                                            if(q!= i and q!= j and q!= k and q!= m and q!= n and q!= o and q!= p) : \n                                                                if(arr[i] + arr[j] + arr[k] + arr[m] + arr[n] + arr[o] + arr[p] + arr[q] == 0): \n                                                                    return arr[i],arr[j],arr[k],arr[m],arr[n],arr[o],arr[p],arr[q] \n    return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both are Zero\"\n    elif x < 0 and y < 0:\n        return \"Both are negative\"\n    elif x > 0 and y > 0:\n        return \"Both are positive\"\n    elif x > 0 and y < 0:\n        return \"x > 0 and y < 0\"\n    elif x < 0 and y > 0:\n        return \"x < 0 and y > 0\"\n    else:\n        return \"Both are neither positive nor negative\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -(x)==y or x==-y\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x == -y) or (y == -x)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0: \n        return True\n    elif x > 0 and y < 0: \n        return True\n    else: \n        return False\n    return True \nprint(opposite_Signs(-4,-5))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a = x\n    b = y\n    if a > 0 and b < 0 or a < 0 and b > 0:\n        return \"True\"\n    elif a == 0 and b == 0:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n+1\n    return (n*(n+1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if type(n) == str:\n        return \"n is not an integer\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    octnums = {1:1}\n    for x in range(2, n+1): \n        octnum = octnums[x-1] + octnums[x-2]\n        octnums[x] = octnum\n    return octnums[n]\n    \nprint(is_octagonal(11))\nprint(is_octagonal(12))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    return 2 * (n * (n + 1)) / 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = (n*(3*n - 1)) / 2\n    oct = oct*(oct+1)/2\n    return int(oct)\n    #or\n    #oct = (n*(3*n - 1)) / 2\n    #oct = oct*(oct+1)/2\n    #return int(oct)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n*(n+1)/2))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return 'Enter a positive integer'\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return octagonal(n-1) + octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (3 * (n**2) - (n+1)) // 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #O(n^2)\n    ans = 0\n    length = len(s)\n    #to store the occurences of each digit\n    count = defaultdict(int)\n    for i in range(length):\n        count[s[i]] += 1\n    for j in range(length):\n        for k in range(10):\n            if(k not in count):\n                continue\n            else:\n                count[k] -= 1\n                if(count[k] == 0):\n                    del count[k]\n                if(len(count)==0):\n                    break\n                else:\n                    ans+=1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    d = defaultdict(int)\n    # d = defaultdict(int)\n    for i in range(n):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    for key in d.keys():\n        if d[key] == n:\n            count += 1\n    return count\n    "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        l = len(s)\n        while l >= 0:\n            if (s[i:l+i] == s[i:l+i][::-1]):\n                count += 1\n            l -= 1\n    return count\n    '''\n    2nd approach\n    '''\n    \n    count = 0\n    for i in range(len(s)):\n        count += len(s) - s.find(s[i:len(s)])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    #code here\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]=='1' and s[i+1]=='1':\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            str = s[i:j+1]\n            count += 1\n            if str[0] == '0' and len(str) > 1:\n                break\n            if str.isdigit():\n                length = len(str)\n                sum_digits = sum(map(int,str))\n                if sum_digits == length:\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)==0:\n        return 0\n    temp = defaultdict(int)\n    temp[0] = 1\n    res = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            continue\n        d = int(s[i])\n        temp[d] += 1\n        res += temp[d]\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s) + 1):\n            if int(s[i:j]) == len(s[i:j]):\n                count += 1\n    print(count)\n    return count\n    \nprint(count_Substrings(\"12321131231231231\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    res = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            substring = s[i:j]\n            sum_digits = sum(int(char) for char in substring)\n            if sum_digits == len(substring):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            ans+=1\n    return ans\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest is None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = min(xs)\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    mini = min(xs)\n    return mini\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    smallest_num = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = min(xs)\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list) - min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([max(x) - min(x) for x in test_list])\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    list_len = len(test_list)\n    # print(\"list_len = \", list_len)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(test_list)\n    if len(test_list) < 2:\n        return 0\n    result = test_list[0] - test_list[1]\n    for i in range(1,len(test_list)-1):\n        tmp = test_list[i] - test_list[i+1]\n        if result < tmp:\n            result = tmp\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # test_list = [(1, 2), (3, 4), (4, 5), (5, 6)]\n    maximum_difference = -999999999999\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            difference = abs(test_list[i][1] - test_list[j][1])\n            if difference > maximum_difference:\n                maximum_difference = difference\n    print(maximum_difference)\n    return maximum_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list_sorted = sorted(test_list)\n    diff = []\n    for i in range(len(test_list_sorted) - 1):\n        diff.append(test_list_sorted[i + 1] - test_list_sorted[i])\n    print(\"Maximum difference between pairs is: \",max(diff))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    sorted_list = sorted(test_list)\n    max_diff = 0\n    for i in range(len(sorted_list)-1):\n        diff = sorted_list[i+1] - sorted_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    print(max_diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maxDiff = -sys.maxsize-1\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > maxDiff:\n                maxDiff = diff\n    return maxDiff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    # print(test_list)\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i] - test_list[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    tuple_list = []\n    for sub_mark in subjectmarks:\n        tuple_list.append((sub_mark[0], sub_mark[1]))\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda t: t[1], reverse = True)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda sub_marks: sub_marks[1])\n    print('Sorted Marks:', sorted_marks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = []\n    l1 = []\n    for i in subjectmarks:\n        l1.append(i[0])\n        l.append((i[0],i[1]))\n    l1.sort()\n    for i in range(len(l)):\n        l[i] = (l1[i],l[i][1])\n    return l\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key = lambda x:x[1])\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n    \ndef test_subject_marks():\n    print(\"\\nTesting subject_marks()...\", end=\"\")\n    assert(subject_marks([(4,9), (10,9), (1,6), (2,10), (4,10), (4,3), (3,8)]) == \n        [(1,6), (2,10), (4,10), (4,3), (4,9), (3,8), (2,9)])\n    print(\"Passed!\")\n    \ndef ordered_list_sum(ordered_list):\n    '''\n    Write a function to add up the numbers in a list of numbers.\n    '''\n    s = 0\n    for i in range(0,len(ordered_list)):\n        s += ordered_list[i]\n    return s\n    \ndef test_ordered_list_sum():\n    print(\"\\nTesting ordered_list_sum()...\", end=\"\")\n    assert(ordered_list_sum([1,2,3,4,5]) == 15)\n    assert(ordered_list_sum([1,1,1,1]) == 2)\n    assert(ordered_list_sum([]) == 0)\n    print(\"Passed!\")\n    \ndef ordered_list_sum_list(ordered_list):\n    '''\n    Write a function to add up the numbers in a list of lists of numbers.\n    '''\n    s = []\n    for i in range(0,len(ordered_list)):\n        s += ordered_list[i]\n    return s\n    \ndef test_ordered_list_sum_list():\n    print(\"\\nTesting ordered_list_sum_list()...\", end=\"\")\n    assert(ordered_list_sum_list([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6])\n    assert(ordered_list_sum_list([[1,2,3,4],[4,5,6]]) == [1,2,3,4,4,6])\n    assert(ordered_list_sum_list([[1,2,3]]) == [1,2,3])\n    assert(ordered_list_sum_list([[1],[2],[3]]) == [1,2,3])\n    assert(ordered_list_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9])\n    print(\"Passed!\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda sub_marks: sub_marks[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if not subjectmarks:\n        return None\n    new_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return new_subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], int):\n        return sum(data_list)\n    else:\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        if type(data_list[0]) == list:\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n        \nprint(recursive_list_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # for i in range(len(data_list)):\n    #     if type(data_list[i])==type([]):\n    #         recursive_list_sum(data_list[i])\n    #     else:\n    #         # print(data_list[i])\n    #         recursive_list_sum(data_list[i])\n    #         # print(data_list[i])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    if type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        \n        if len(data_list) == 0:\n            return 0\n        \n        else:\n            sum_list = 0\n            for i in range(len(data_list)):\n                if type(data_list[i]) == list:\n                    sum_list += recursive_list_sum(data_list[i])\n                else:\n                    sum_list += data_list[i]\n            return sum_list\n            \n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        data_list.extend(data_list[-1:])\n        return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list is None:\n        return 0\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>=0:\n            count=count+1\n    return count\n    \ndef pos_count1(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>=0:\n            count=count+1\n    return count\n    \ndef pos_count2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n    \ndef pos_count3(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n    \ndef pos_count4(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([i>0 for i in list])\n    \ndef pos_count5(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([i>0 for i in list])\n    \ndef pos_count6(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count7(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count8(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count9(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count10(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count11(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count12(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count13(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count14(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count15(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count16(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count17(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count18(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count19(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count20(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count21(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count22(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count23(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count24(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count25(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count26(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count27(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count28(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count29(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count30(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count31(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count32(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count33(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count34(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count35(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count36(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count37(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i>0)\n    \ndef pos_count38(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for item in list:\n        if item > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_number = 0\n    for i in list:\n        if i > 0:\n            positive_number += 1\n    print('The number of positive number in the list is: ', positive_number)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for i in range(len(list)):\n        if list[i]>=0:\n            pos_count+=1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\nprint(pos_count([-2, -3, -4, -5, -6, -7, -8, -9]))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def _bell_number(n, memo):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        \n        if memo[n]!= 0:\n            return memo[n]\n        \n        memo[n] = _bell_number(n-1, memo) + _bell_number(n-2, memo)\n        return memo[n]\n    \n    return _bell_number(n, [0]*(n+1))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # if n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 2\n    # else:\n    #     return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # first, we assume that n = 1\n    # second, we assume that n = 2\n    # third, we assume that n = 3\n    # fourth, we assume that n = 4\n    # fifth, we assume that n = 5\n    # sixth, we assume that n = 6\n    # seventh, we assume that n = 7\n    # eighth, we assume that n = 8\n    # n-1\n    if n == 1:\n        return 1\n    # n-2\n    if n == 2:\n        return 2\n    # n-3\n    if n == 3:\n        return 4\n    # n-4\n    if n == 4:\n        return 7\n    # n-5\n    if n == 5:\n        return 13\n    # n-6\n    if n == 6:\n        return 21\n    # n-7\n    if n == 7:\n        return 34\n    # n-8\n    if n == 8:\n        return 55\n    # n-9\n    if n == 9:\n        return 89\n    # n-10\n    if n == 10:\n        return 144\n    # n-11\n    if n == 11:\n        return 233\n    # n-12\n    if n == 12:\n        return 377\n    # n-13\n    if n == 13:\n        return 610\n    # n-14\n    if n == 14:\n        return 987\n    # n-15\n    if n == 15:\n        return 1555\n    # n-16\n    if n == 16:\n        return 2688\n    # n-17\n    if n == 17:\n        return 4374\n    # n-18\n    if n == 18:\n        return 6768\n    # n-19\n    if n == 19:\n        return 10946\n    # n-20\n    if n == 20:\n        return 23214\n    # n-21\n    if n == 21:\n        return 46431\n    # n-22\n    if n == 22:\n        return 74896\n    # n-23\n    if n == 23:\n        return 114447\n    # n-24\n    if n == 24:\n        return 284864\n    # n-25\n    if n == 25:\n        return 515472\n    # n-26\n    if n == 26:\n        return 857994\n    # n-27\n    if n == 27:\n        return 1497436\n    # n-28\n    if n == 28:\n        return 3439808\n    # n-29\n    if n == 29:\n        return 6531492\n    # n-30\n    if n == 30:\n        return 99099680\n    # n-31\n    if n == 31:\n        return 17489952\n    # n-32\n    if n == 32:\n        return 38377728\n    # n-33\n    if n == 33:\n        return 68835552\n    # n-34\n    if n == 34:\n        return 109845264\n    # n-35\n    if n == 35:\n        return 25268920\n    # n-36\n    if n == 36:\n        return 498289920\n    # n-37\n    if n == 37:\n        return 784499216\n    # n-38\n    if n == 38:\n        return 1248794736\n    # n-39\n    if n == 39:\n        return 2770743872\n    # n-40\n    if n == 40:\n        return 5138713104\n    # n-41\n    if n == 41:\n        return 8411764448\n    # n-42\n    if n == 42:\n        return 14581760768\n    # n-43\n    if n == 43:\n        return 32883619232\n    # n-44\n    if n == 44:\n        return 54924230024\n    # n-45\n    if n == 45:\n        return 8807067368\n    # n-46\n    if n == 46:\n        return 153760967392\n    # n-47\n    if n == 47:\n        return 338934753856\n    # n-48\n    if n == 48:\n        return 628245595264\n    # n-49\n    if n == 49:\n        return 997802738592\n    # n-50\n    if n == 50:\n        return 1718353823008\n    # n-51\n    if n == 51:\n        return 3674024709296\n    # n-52\n    if n == 52:\n        return 6059827272032\n    # n-53\n    if n == 53:\n        return 1029844504080\n    # n-54\n    if n == 54:\n        return 22184467440096\n    # n-55\n    if n == 55:\n        return 44511481728352\n    # n-56\n    if n == 56:\n        return 75885136000768\n    # n-57\n    if n == 57:\n        return 113479479403280\n    # n-58\n    if n == 58:\n        return 242266916096096\n    # n-59\n    if n == 59:\n        return 469403873200672\n    # n-60\n    if n == 60:\n        return 899162650640096\n    # n-61\n    if n == 61:\n        return 15687767134432\n    # n-62\n    if n == 62:\n        return 314451757244896\n    # n-63\n    if n == 63:\n        return 544113668801248\n    # n-64\n    if n == 64:\n        return 833771607896096\n    # n-65\n    if n == 65:\n        return 1620267051244832\n    # n-66\n    if n == 66:\n        return 3408117587652736\n    # n-67\n    if n == 67:\n        return 564685922852944\n    # n-68\n    if n == 68:\n        return 977807023141696\n    # n-69\n    if n == 69:\n        return 1789459701352736\n    # n-70\n    if n == 70:\n        return 3637961207147920\n    # n-71\n    if n == 71:\n        return 6167627782566400\n    # n-72\n    if n == 72:\n        return 9143369470694848\n    # n-73\n    if n == 73:\n        return 1620267051244832\n    # n-74\n    if n == 74:\n        return 3484642336872000\n    # n-75\n    if n == 75:\n        return 6111866023652896\n    # n-76\n    if n == 76:\n        return 1029915647472560\n    # n-77\n    if n == 77:\n        return 2255878494879488\n    # n-78\n    if n == 78:\n        return 4495657575352944\n    # n-79\n    if n == 79:\n        return 7845666899588816\n    # n-80\n    if n == 80:\n        return 1229883355178032\n    # n-81\n    if n == 81:\n        return 27263457911372800\n    # n-82\n    if n == 82:\n        return 5445981752174848\n    # n-83\n    if n == 83:\n        return 8692723723296000\n    # n-84\n    if n == 84:\n        return 1408445928918688\n    # n-85\n    if n == 85:\n        return 3103099202801952\n    # n-86\n    if n == 86:\n        return 551369588102560\n    # n-87\n    if n == 87:\n        return 8795885943241920\n    # n-88\n    if n == 88:\n        return 1510891369416672\n    # n-89\n    if n == 89:\n        return 33989560915648096\n    # n-90\n    if n == 90:\n        return 5667958898746048\n    # n-91\n    if n == 91:\n        return 9083338481229248\n    # n-92\n    if n == 9"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # The partition of an array is called a partition of the array if\n    # the sum of the elements in the partition is equal to the given sum.\n    # The initial array is partitioned into two equal arrays, one having the sum of the given\n    # sum and the other sum of the given sum - sum.\n    # The number of ways to partition the given array is the sum of the two partitions.\n    # The first array is one where the sum of the elements is smaller than the given sum.\n    # The second array is one where the sum of the elements is larger than the given sum.\n    # We can partition the array and get two new arrays.\n    # The number of ways to partition the first array is the sum of the first array\n    # and the sum of the second array.\n    # The number of ways to partition the second array is the sum of the first array\n    # and the sum of the second array minus the sum of the first array.\n    # Finally, the sum of the first array and the second array minus the sum of the first array and the sum of the second array.\n    \n    # The above equation can be further divided into the following recursion relation:\n    # 2(n) = (n-1) + (n-2) + (n-3) +... + 1\n    \n    # To get the number of ways to partition a given array, we can use a dynamic programming technique:\n    # We can store the results of the partitions for the first array and the second array\n    # in the following array.\n    # A recursion relation can be used to obtain the number of partitions for each element in the\n    # first array.\n    # We can find the number of partitions using the recursion relation.\n    # We can use the same recursion relation but for the second array.\n    # We can multiply the recursion relations to obtain the number of partitions for each element in the\n    # second array.\n    # The number of partitions for each element in the second array can be obtained by getting the number\n    # of partitions for each element in the first array and subtracting the number of partitions for\n    # each element in the first array from the number of partitions for each element in the second array.\n    # And we can finally multiply all these partitions together to get the number of partitions of the\n    # given array.\n    \n    # The above recursion relations can be further divided into:\n    # 2(n) = n*(n+1) / 2\n    # 3(n) = n(n+1)(n+2) / 6\n    # 4(n) = n(n+1)(n+2)(n+3) / 24\n    \n    # Time Complexity: O(2^n)\n    # Space Complexity: O(2^n)\n    \n    def partition(arr,n):\n        \n        # Base cases:\n        if n == 0 or n == 1:\n            return 1\n        \n        # The dynamic programming array to store the results of the partitions.\n        dp = [[0 for j in range(n+1)] for i in range(n+1)]\n        \n        # To store the results of the first array.\n        for i in range(n+1):\n            dp[i][i] = 1\n        \n        # To store the results of the second array.\n        for j in range(2,n+1):\n            dp[0][j] = 1\n        \n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                \n                # The partitions for each element in the first array are obtained by getting the number of partitions for each element in the second array.\n                # Since we can't get the number of partitions for each element in the second array directly using the above recursion relation,\n                # we can multiply the recursion relations together to get the number of partitions for each element in the second array.\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n                \n        # Return the sum of all the partitions for each element in the first array.\n        return sum(dp[n])\n    \n    # The number of partitions for the first array is equal to the sum of the partitions for the second array.\n    # The number of partitions for the second array is equal to the sum of the partitions for the first array minus the sum of the partitions for the second array.\n    # The sum of the partitions for the first array minus the sum of the partitions for the second array can be obtained by multiplying the partitions of the first array by the number of partitions of the second array.\n    \n    def bellNumber2(n):\n        '''\n        Time complexity: O(n^2)\n        Space complexity: O(n^2)\n        '''\n        # To store the results of the partitions.\n        dp = [[0 for j in range(n+1)] for i in range(n+1)]\n        \n        # The first row and column should be initialized to 1.\n        # To initialize the first row, we should use the recursion relation for the first array.\n        # This can be obtained by using the same recursion relation for the second array.\n        # The number of partitions for the first array is equal to the sum of the partitions for the second array.\n        for i in range(1,n+1):\n            dp[i][i] = 1\n        \n        # To initialize the first column, we can use the same recursion relation for the first array and the second array.\n        # To initialize the second column, we can use the same recursion relation for the second array and the first array.\n        for i in range(1,n+1):\n            dp[i][0] = 1\n        \n        # To initialize the other rows and columns, we can use the same recursion relation for the first array and the second array.\n        for j in range(1,n+1):\n            dp[0][j] = 1\n        \n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                \n                # The partitions for the first array can be obtained by adding the partitions of the second array to the partitions of the first array.\n                # Similarly, the partitions for the second array can be obtained by subtracting the partitions of the first array from the partitions of the second array.\n                dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1]\n        \n        # Return the sum of all the partitions for the first array.\n        return sum(dp[n])\n    \n    # To get the number of partitions for the second array, we can multiply the partitions of the first array by the number of partitions of the second array.\n    \n    def bellNumber3(n):\n        '''\n        Time complexity: O(n^3)\n        Space complexity: O(n^2)\n        '''\n        # To store the results of the partitions.\n        dp = [[0 for j in range(n+1)] for i in range(n+1)]\n        \n        # The first row and column should be initialized to 1.\n        # To initialize the first row, we can use the same recursion relation for the first array.\n        # This can be obtained by using the same recursion relation for the second array.\n        # The number of partitions for the first array is equal to the sum of the partitions for the second array.\n        for i in range(1,n+1):\n            dp[i][i] = 1\n        \n        # To initialize the first column, we can use the same recursion relation for the first array and the second array.\n        # To initialize the second column, we can use the same recursion relation for the second array and the first array.\n        for i in range(1,n+1):\n            dp[i][0] = 1\n        \n        # To initialize the other rows and columns, we can use the same recursion relation for the first array and the second array.\n        for j in range(1,n+1):\n            dp[0][j] = 1\n        \n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                \n                # The partitions for the first array can be obtained by adding the partitions of the second array to the partitions of the first array.\n                # Similarly, the partitions for the second array can be obtained by subtracting the partitions of the first array from the partitions of the second array.\n                dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1]\n        \n        # Return the sum of all the partitions for the first array.\n        return sum"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    count = 0\n    for i in range(0, len(A) - 1):\n        if A[i] <= A[i+1]:\n            count = count + 1\n        else:\n            break\n    for i in range(0, len(A) - 1):\n        if A[i] >= A[i+1]:\n            count = count + 1\n        else:\n            break\n    if count == len(A) - 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    if A == A[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    monotonic_array = False\n    if A[0] >= A[-1]:\n        monotonic_array = True\n        return monotonic_array\n    elif A[0] <= A[-1]:\n        return monotonic_array\n    elif A[0] < A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1] and A[i-1] <= A[i]:\n                monotonic_array = True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    if increasing or decreasing:\n        print(\"Array is monotonic.\")\n    else:\n        print(\"Array is not monotonic.\")\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    \n    for i in range(0, n - 1):\n        if A[i] >= A[i+1]:\n            return False\n    return True\n    \nprint(is_Monotonic([1, 1, 1, 2, 2, 2]))\nprint(is_Monotonic([10, 9, 8, 7]))\nprint(is_Monotonic([10, 9, 8, 7, 4, 3, 2, 1]))\nprint(is_Monotonic([10, 9, 8, 7, 4, 3, 2, 1, -10, -9, -8, -7, -4, -3, -2, -1]))\nprint(is_Monotonic([10, 9, 8, 7, 4, 3, 2, 1, -10, -9, -8, -7, -4, -3, -2, -1, -100]))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        if A[i] < A[j]:\n            i += 1\n        elif A[i] > A[j]:\n            j -= 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=1:\n        return True\n    if len(A)==2:\n        return A[0]<=A[1]\n    if len(A)>=3:\n        if A[0]<=A[1] and A[1]<=A[2] and A[2]>=A[0]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return False\n    \n    i = 0\n    while i < (len(A) - 1): \n        if A[i] > A[i+1]: \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        index = l.index(s)\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (s in l)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[:len(s)] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for e in l:\n        if e == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l): return False\n    for i in range(len(s)):\n        if l[i]!= s[i]: return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list_length = len(l)\n    s_length = len(s)\n    if list_length <= s_length:\n        return False\n    for i in range(list_length - s_length + 1):\n        if is_sublist(l[i:i + s_length], s):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.reverse()\n    s.reverse()\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        for j in range(len(i)):\n            if len(i)!= len(Input[0]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Result = True\n    for i in range(1, len(Input)):\n        if len(Input[0])!= len(Input[i]):\n            Result = False\n            break\n    return Result\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input) - 1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple1,tuple2 in zip(Input,Input[1:]):\n        if len(tuple1)!= len(tuple2):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 1\n    length_list = []\n    for i in Input:\n        length_list.append(len(i))\n        count += 1\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Code here\n    my_list = []\n    for i in range(len(Input)):\n        count = 0\n        for j in range(len(Input[i])):\n            if Input[i][j] not in my_list:\n                count += 1\n                my_list.append(Input[i][j])\n        if count!= len(Input[i]):\n            return False\n    return True\n    \nInput = [[(1,2),(2,3),(3,4)],[(1,2,4),(2,3)],[(1,2),(2,3,4)]]\nOutput = [True,False,True]\nfor i in range(len(Output)):\n    assert find_equal_tuple(Input[i]) == Output[i]\n    \n    \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if(len(Input[i])!=len(Input[i+1])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Input:\n    # a = (1, 2, 3, 4)\n    # b = (1, 2, 3)\n    # c = (1, 2)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        if len(Input[i])!= length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    \n    if len(Input[0]) == 0:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap//3\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j - gap] > nums[j]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 1\n    while i < len(nums):\n        if nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n        i += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in range(len(nums)):\n        key = nums[j]\n        i = j - 1\n        while i >= 0 and nums[i] > key:\n            nums[i+1] = nums[i]\n            i -= 1\n        nums[i+1] = key\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        i = 0\n        j = gap\n        while i < j:\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n            i += 1\n            j -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[j] < nums[k]:\n                nums[k],nums[j] = nums[j],nums[k]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = 1\n    while p < len(nums):\n        i = 0\n        while i < len(nums) - p:\n            if nums[i] > nums[i + p]:\n                nums[i], nums[i + p] = nums[i + p], nums[i]\n            i += 1\n        p += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(i, j)\n        swap(i+1, high)\n        return i + 1\n    \n    def quick_sort(nums, low, high):\n        if low < high:\n            p = partition(nums, low, high)\n            quick_sort(nums, low, p-1)\n            quick_sort(nums, p+1, high)\n    \n    quick_sort(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = 0\n    while count!= len(nums):\n        maxnum = nums[0]\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > maxnum:\n                maxnum = nums[i]\n                max_index = i\n        nums[max_index] = nums[0]\n        nums[0] = maxnum\n        count += 1\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # n = int(input(\"enter a number: \"))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(1, n+1):\n        if x**2 - n == 0:\n            print('{} is a perfect square'.format(n))\n            break\n    else:\n        print('{} is not a perfect square'.format(n))\n        \ndif_Square(13) # 13\ndif_Square(1) # perfect square\ndif_Square(3) # not a perfect square\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq=[]\n    for i in range(n+1):\n        sq.append(i*i)\n    #print(sq)\n    #print(len(sq))\n    for j in range(len(sq)-1):\n        if sq[j]!=sq[j+1]:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n==0):\n        return False\n    if(n==1):\n        return True\n    \n    ans1 = dif_Square(n-1)\n    ans2 = dif_Square(n-2)\n    if(ans1 and ans2):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n1 = int(n**0.5)\n    n2 = n - n1**2\n    if n1*n1 == n and n2*n2 == n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n%2==0):\n        return True\n    sq1 = n**(.5)\n    if (sq1%1 ==0):\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n==0): \n        return True\n    elif(n<0): \n        return False\n    \n    while(n!=0):\n        x = abs(n)\n        y = x//2\n        rem = x%2\n        if(y==0 and rem==1): \n            return False\n        elif(y==0 and rem==0): \n            return True\n        else: \n            n = y\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    x = n\n    while x > 0:\n        x = x >> 1\n        n -= x\n    if n == 0:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n==1) or (n==0):\n        return True\n    i=1\n    while i*i<=n:\n        if (n%i)==0:\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if (colors == pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    for i in range(len(colors)):\n        if(colors[i] == patterns[index]):\n            index += 1\n        else:\n            return False\n    return index == len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if not (colors[i] == patterns[i] and colors[i+1] == patterns[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    i = 0\n    while i < n:\n        if patterns[i] == 'no':\n            break\n        elif patterns[i] == 'yes':\n            i += 1\n        elif patterns[i] == '+':\n            i += 2\n        elif patterns[i] == '-':\n            i += 3\n        else:\n            print('Invalid pattern:', patterns[i])\n            return False\n    if patterns[i] == 'no':\n        return True\n    else:\n        print('Invalid pattern:', patterns[i])\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color in patterns:\n            del patterns[patterns.index(color)]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if colors == p:\n            return True\n        else:\n            colors = getNextColor(colors, p)\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # TODO\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def solve(row, pattern):\n        if (pattern == None):\n            return False\n        if (row == -1):\n            return False\n        if (pattern[row] == 0):\n            return False\n        if (row == 0):\n            return True\n        if (solve(row - 1, pattern[row]) and pattern[row - 1] == 0):\n            return True\n        return False\n    for row in range(len(patterns)):\n        if (solve(row, patterns[row]) == True):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if (colors[i]!= patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i]) == 1:\n            if patterns[i][0] not in colors:\n                return False\n        else:\n            if colors[patterns[i][0]]!= patterns[i][1]:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialise the list of tuples.\n    result = []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    m = {}\n    for i in test_list:\n        m.setdefault(i,0)\n        if i[0]%K == 0 and i[1]%K == 0 and i[2]%K == 0:\n            m[i] += 1\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    a = list(set([i for i in range(len(test_list))]) - set(K))\n    return [tuple(i) for i in test_list if i[a[0]] % K == 0]\n    \ndef find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    a = list(set([i for i in range(len(test_list))]) - set(K))\n    return [tuple(i) for i in test_list if i[a[0]] % K == 0]\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(x%K == 0 for x in i):\n            result.append(i)\n    return result\n    \nprint(find_tuples([(1,2),(3,4),(5,6)],2))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def divisible(n):\n        for i in n:\n            if not i % K:\n                return True\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    ans = []\n    for i in test_list:\n        if all(k%i[0]==0 and k%i[1]==0 for k in range(2, i[0]+1)):\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for i in test_list:\n        if all(i[0] % k == 0 for k in range(2, K)):\n            tuple_list.append(i)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # read the number of tuples\n    num_of_tuples = test_list.__len__()\n    # create an empty list which will contain the tuples having all elements divisible by k\n    res = []\n    # read each tuple in the list and check if the elements are divisible by k\n    for i in range(0, num_of_tuples):\n        for j in range(i + 1, num_of_tuples):\n            if(test_list[i][0] % K == 0 and test_list[j][0] % K == 0 and test_list[i][1] % K == 0 and test_list[j][1] % K == 0):\n                res.append((test_list[i][0], test_list[i][1], test_list[j][0], test_list[j][1]))\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if (test_list[i][j] % K!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \nprint(is_Diff(11))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n    \nword = \"PYTHON\"\nprint(word_len(word))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try:\n        n = len(s)\n        if n%2==0:\n            return \"The word length is even\"\n        else:\n            return \"The word length is odd\"\n    except:\n        return \"The word is not a string\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(\"The length of the word is odd\") if len(s) % 2 == 1 else print(\"The length of the word is even\")\n    \nword_len('test')\nword_len('test')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n    \ndef word_length(s): \n    '''\n    Write a python function to count the number of consonants and vowels in the given string.\n    '''\n    v=0\n    c=0\n    for i in s:\n        if i.isalpha():\n            c=c+1\n            if i in 'aeiou':\n                v=v+1\n        elif i in 'aeiou':\n            v=v+1\n    return c,v\n    \ndef swap_case(s): \n    '''\n    Write a python function to swap case of every word in the string.\n    '''\n    return s.swapcase()\n    \ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while a!=0:\n        a,b=b%a,a\n    return b\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \ndef palindrome2(s): \n    '''\n    Write a python function to find the longest palindrome substring in a given string.\n    '''\n    import re\n    lst=re.findall(r'(.+)\\1',s)\n    if len(lst)==0:\n        return ''\n    lst.sort(key=lambda x:len(x),reverse=True)\n    return lst[0]\n    \ndef str_rot(s,n): \n    '''\n    Write a python function to rotate the given string by n places in-place.\n    '''\n    if n<0:\n        n=len(s)+n\n    s=s[n:]+s[:n]\n    return s\n    \ndef str_rot2(s,n): \n    '''\n    Write a python function to rotate the given string by n places in-place.\n    '''\n    return s[n:]+s[:n]\n    \ndef number_of_strings(a,b): \n    '''\n    Write a python function to count the number of strings which are common to both given strings.\n    '''\n    return a.count(b)\n    \ndef number_of_strings2(a,b): \n    '''\n    Write a python function to count the number of strings which are common to both given strings.\n    '''\n    return a.count(b)\n    \ndef multiple_string(s,lst): \n    '''\n    Write a python function to return the largest common substring present in the given string.\n    '''\n    m=0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            t=0\n            for k in range(min(len(s),len(lst))):\n                if s[i+k]==lst[j+k] and s[i+k]==s[j+k]:\n                    t+=1\n                else:\n                    break\n            if m<t:\n                m=t\n    return m\n    \ndef multiple_string2(s,lst): \n    '''\n    Write a python function to return the largest common substring present in the given string.\n    '''\n    def comp(s1,s2): \n        i=0\n        while i<len(s1) and i<len(s2):\n            if s1[i]!=s2[i]:\n                return False\n            i+=1\n        return True\n    \n    def multiple_string_helper(s,lst,p,start,m): \n        if p==len(lst):\n            if comp(s[start:],s):\n                m=max(m,len(s))\n            return m\n        if comp(s[start:],s):\n            return multiple_string_helper(s,lst,p+1,start,m)\n        else:\n            return multiple_string_helper(s,lst,p+1,start+1,m)\n    \n    return multiple_string_helper(s,lst,0,0,0)\n    \ndef all_anagram(s1,s2): \n    '''\n    Write a python function to check whether the given strings are anagrams or not.\n    '''\n    from collections import Counter\n    d1=Counter(s1)\n    d2=Counter(s2)\n    if len(d1)!=len(d2):\n        return False\n    for i in d1:\n        if d1[i]!=d2[i]:\n            return False\n    return True\n    \ndef all_anagram2(s1,s2): \n    '''\n    Write a python function to check whether the given strings are anagrams or not.\n    '''\n    return sorted(s1)==sorted(s2)\n    \ndef sorted_dict(d): \n    '''\n    Write a python function to sort a dictionary by its keys in alphabetical order.\n    '''\n    return dict(sorted(d.items(),key=lambda x:x[0]))\n    \ndef sorted_dict2(d): \n    '''\n    Write a python function to sort a dictionary by its keys in alphabetical order.\n    '''\n    return sorted(d.items(),key=lambda x:x[0])\n    \ndef sum_n(a,n): \n    '''\n    Write a python function to return the sum of nth term of the fibonacci series.\n    '''\n    if n<1:\n        return 0\n    else:\n        return sum_n(a,n-1)+a\n    \ndef sum_n2(a,n): \n    '''\n    Write a python function to return the sum of nth term of the fibonacci series.\n    '''\n    if n<1:\n        return 0\n    else:\n        return a+sum_n2(a,n-1)\n    \ndef summation(n): \n    '''\n    Write a python function to return the sum of 1+2+3+...+n.\n    '''\n    s=0\n    for i in range(n+1):\n        s=s+i\n    return s\n    \ndef summation2(n): \n    '''\n    Write a python function to return the sum of 1+2+3+...+n.\n    '''\n    s=0\n    while n>0:\n        s=s+n\n        n-=1\n    return s\n    \ndef sum_list(l): \n    '''\n    Write a python function to return the sum of list.\n    '''\n    s=0\n    for i in range(len(l)):\n        s=s+l[i]\n    return s\n    \ndef sum_list2(l): \n    '''\n    Write a python function to return the sum of list.\n    '''\n    return sum(l)\n    \ndef max_in_list(lst): \n    '''\n    Write a python function to return the maximum element in list.\n    '''\n    return max(lst)\n    \ndef max_in_list2(lst): \n    '''\n    Write a python function to return the maximum element in list.\n    '''\n    return max(lst,key=lambda x:x[1])[1]\n    \ndef max_in_list3(lst): \n    '''\n    Write a python function to return the maximum element in list.\n    '''\n    def compare(t1,t2):\n        if t1[1]==t2[1]:\n            return t1[0]\n        else:\n            return t2[0]\n    return max(lst,key=lambda x:compare(x,x[1]))\n    \ndef search_in_rotated_list(lst,val): \n    '''\n    Write a python function to search for a given element in a given list.\n    '''\n    if len(lst)==0:\n        return False\n    if len(lst)==1:\n        if val==lst[0]:\n            return True\n        else:\n            return False\n    else:\n        mid=len(lst)//2"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2 == 0:\n        print(word_len,\"is even\")\n    else:\n        print(word_len,\"is odd\")\nword_len(\"pizza\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4*(n**2)-6*n\n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert (n > 0), \"Tetrahedral number not defined for negative numbers\"\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    if n == 4:\n        return 12\n    if n == 5:\n        return 20\n    if n == 6:\n        return 24\n    if n == 7:\n        return 28\n    if n == 8:\n        return 32\n    if n == 9:\n        return 36\n    if n == 10:\n        return 40\n    if n == 11:\n        return 44\n    if n == 12:\n        return 48\n    if n == 13:\n        return 52\n    if n == 14:\n        return 56\n    if n == 15:\n        return 60\n    if n == 16:\n        return 64\n    if n == 17:\n        return 68\n    if n == 18:\n        return 72\n    if n == 19:\n        return 76\n    if n == 20:\n        return 80\n    if n == 21:\n        return 84\n    if n == 22:\n        return 88\n    if n == 23:\n        return 92\n    if n == 24:\n        return 96\n    if n == 25:\n        return 100\n    if n == 26:\n        return 104\n    if n == 27:\n        return 108\n    if n == 28:\n        return 112\n    if n == 29:\n        return 116\n    if n == 30:\n        return 120\n    if n == 31:\n        return 124\n    if n == 32:\n        return 128\n    if n == 33:\n        return 132\n    if n == 34:\n        return 136\n    if n == 35:\n        return 140\n    if n == 36:\n        return 144\n    if n == 37:\n        return 148\n    if n == 38:\n        return 152\n    if n == 39:\n        return 156\n    if n == 40:\n        return 160\n    if n == 41:\n        return 164\n    if n == 42:\n        return 168\n    if n == 43:\n        return 172\n    if n == 44:\n        return 176\n    if n == 45:\n        return 180\n    if n == 46:\n        return 184\n    if n == 47:\n        return 188\n    if n == 48:\n        return 192\n    if n == 49:\n        return 196\n    if n == 50:\n        return 200\n    if n == 51:\n        return 204\n    if n == 52:\n        return 208\n    if n == 53:\n        return 212\n    if n == 54:\n        return 216\n    if n == 55:\n        return 220\n    if n == 56:\n        return 224\n    if n == 57:\n        return 228\n    if n == 58:\n        return 232\n    if n == 59:\n        return 236\n    if n == 60:\n        return 240\n    if n == 61:\n        return 244\n    if n == 62:\n        return 248\n    if n == 63:\n        return 252\n    if n == 64:\n        return 256\n    if n == 65:\n        return 260\n    if n == 66:\n        return 264\n    if n == 67:\n        return 268\n    if n == 68:\n        return 272\n    if n == 69:\n        return 276\n    if n == 70:\n        return 280\n    if n == 71:\n        return 284\n    if n == 72:\n        return 288\n    if n == 73:\n        return 292\n    if n == 74:\n        return 296\n    if n == 75:\n        return 300\n    if n == 76:\n        return 304\n    if n == 77:\n        return 308\n    if n == 78:\n        return 312\n    if n == 79:\n        return 316\n    if n == 80:\n        return 320\n    if n == 81:\n        return 324\n    if n == 82:\n        return 328\n    if n == 83:\n        return 332\n    if n == 84:\n        return 336\n    if n == 85:\n        return 340\n    if n == 86:\n        return 344\n    if n == 87:\n        return 348\n    if n == 88:\n        return 352\n    if n == 89:\n        return 356\n    if n == 90:\n        return 360\n    if n == 91:\n        return 364\n    if n == 92:\n        return 368\n    if n == 93:\n        return 372\n    if n == 94:\n        return 376\n    if n == 95:\n        return 380\n    if n == 96:\n        return 384\n    if n == 97:\n        return 388\n    if n == 98:\n        return 392\n    if n == 99:\n        return 396\n    if n == 100:\n        return 400\n    if n == 101:\n        return 404\n    if n == 102:\n        return 408\n    if n == 103:\n        return 412\n    if n == 104:\n        return 416\n    if n == 105:\n        return 420\n    if n == 106:\n        return 424\n    if n == 107:\n        return 428\n    if n == 108:\n        return 432\n    if n == 109:\n        return 436\n    if n == 110:\n        return 440\n    if n == 111:\n        return 444\n    if n == 112:\n        return 448\n    if n == 113:\n        return 452\n    if n == 114:\n        return 456\n    if n == 115:\n        return 460\n    if n == 116:\n        return 464\n    if n == 117:\n        return 468\n    if n == 118:\n        return 472\n    if n == 119:\n        return 476\n    if n == 120:\n        return 480\n    if n == 121:\n        return 484\n    if n == 122:\n        return 488\n    if n == 123:\n        return 492\n    if n == 124:\n        return 496\n    if n == 125:\n        return 500\n    if n == 126:\n        return 504\n    if n == 127:\n        return 508\n    if n == 128:\n        return 512\n    if n == 129:\n        return 516\n    if n == 130:\n        return 520\n    if n == 131:\n        return 524\n    if n == 132:\n        return 528\n    if n == 133:\n        return 532\n    if n == 134:\n        return 536\n    if n == 135:\n        return 540\n    if n == 136:\n        return 544\n    if n == 137:\n        return 548\n    if n == 138:\n        return 552\n    if n == 139:\n        return 556\n    if n == 140:\n        return 560\n    if n == 141:\n        return 564\n    if n == 142:\n        return 568\n    if n == 143:\n        return 572\n    if n == 144:\n        return 576\n    if n == 145:\n        return 580\n    if n == 146:\n        return 584\n    if n == 147:\n        return 588\n    if n == 148:\n        return592\n    if n == 149:\n        return 596\n    if n == 150:\n        return600\n    if n == 151:\n        return604\n    if n == 152:\n        return608\n    if n == 153:\n        return612\n    if n == 154:\n        return616\n    if n == 155:\n        return620\n    if n == 156:\n        return624\n    if n == 157:\n        return628\n    if n == 158:\n        return632\n    if n == 159:\n        return636\n    if n == 160:\n        return640\n    if n == 161:\n        return644\n    if n == 162:\n        return648\n    if n == 163:\n        return652\n    if n == 164:\n        return656\n    if n == 165:\n        return660\n    if n == 166:\n        return664\n    if n == 167:\n        return668\n    if n == 168:\n        return672\n    if n == 169:\n        return676\n    if n == 170:\n        return680\n    if n == 171:\n        return684\n    if n == 172:\n        return688\n    if n == 173:\n        return692\n    if n == 174:\n        return696\n    if n == 175:\n        return700\n    if n == 176:\n        return704\n    if n == 177:\n        return708\n    if n == 178:\n        return712\n    if n == 17"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i\n        result += i**2\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (3 * n - 1)) // 2\n    \ndef diophantine_equation(a, b, c):\n    '''\n    Write a function to find x and y such that ax + by = c.\n    '''\n    s1 = (a**2 + b**2)**(1/2)\n    s2 = (a**2 + c**2)**(1/2)\n    \n    if s1 > s2:\n        return\n        \n    elif s1 == s2:\n        return\n    \n    x1 = s2**2 - s1\n    y1 = s2**2 + s1\n    x2 = (c - y1) / (x1 - a)\n    y2 = s1*(x2 - a) + s2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 4*6\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n    \ndef sum_of_squares(n):\n    '''\n    Write a function to find the sum of squares of the first n positive integers.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1:\n        return 1\n    else:\n        return sum_of_squares(n-1) + n*n\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef triple_step(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, triple_step(2) should return an integer that is equal to 8.\n    triple_step(4) should return an integer that is equal to 32.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 1:\n        return n\n    else:\n        return n * triple_step(n-1)\n    \ndef counter(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, counter(5) should return an integer that is equal to 144.\n    counter(4) should return an integer that is equal to 52.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 1\n    else:\n        return n + counter(n-1)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, sum_of_digits(5) should return an integer that is equal to 7.\n    sum_of_digits(4) should return an integer that is equal to 2.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n//10)\n    \ndef get_recursive_factorial(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, get_recursive_factorial(5) should return an integer that is equal to 120.\n    get_recursive_factorial(4) should return an integer that is equal to 24.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 1\n    else:\n        return n * get_recursive_factorial(n-1)\n    \ndef get_recursive_sum(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, get_recursive_sum(5) should return an integer that is equal to 30.\n    get_recursive_sum(4) should return an integer that is equal to 12.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 0\n    else:\n        return n + get_recursive_sum(n-1)\n    \ndef get_recursive_sum_of_squares(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, get_recursive_sum_of_squares(5) should return an integer that is equal to 225.\n    get_recursive_sum_of_squares(4) should return an integer that is equal to 16.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 0\n    else:\n        return n + get_recursive_sum_of_squares(n-1)\n    \ndef get_recursive_sum_of_squares_for_negative(n):\n    '''\n    Write a function that takes in an integer and returns an integer.\n    For example, get_recursive_sum_of_squares_for_negative(5) should return an integer that is equal to -225.\n    get_recursive_sum_of_squares_for_negative(4) should return an integer that is equal to -16.\n    '''\n    assert n > 0, \"n must be greater than zero\"\n    if n == 0:\n        return 0\n    elif n == -1:\n        return -1\n    else:\n        return -get_recursive_sum_of_squares_for_negative(n-1) - n*n\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns a boolean.\n    For example, is_palindrome(\"aabcd\") should return true, since \"aabcd\" is a palindrome.\n    is_palindrome(\"a\") should return false, since \"a\" is not a palindrome.\n    is_palindrome(\"\") should return true, since \"\" is a palindrome.\n    '''\n    assert isinstance(s, str), \"s must be a string\"\n    if len(s) <= 1:\n        return True\n    elif s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_without_using_slicing(s):\n    '''\n    Write a function that takes in a string and returns a boolean.\n    For example, is_palindrome_without_using_slicing(\"aabcd\") should return true, since \"aabcd\" is a palindrome.\n    is_palindrome_without_using_slicing(\"a\") should return false, since \"a\" is not a palindrome.\n    is_palindrome_without_using_slicing(\"\") should return true, since \"\" is a palindrome.\n    '''\n    assert isinstance(s, str), \"s must be a string\"\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome_without_using_slicing(s[1:-1])\n        else:\n            return False\n    \ndef string_to_integer(s):\n    '''\n    Write a function that takes in a string and returns an integer.\n    For example, string_to_integer(\"5\") should return 5, since the string \"5\" is \"5\".\n    string_to_integer(\"0\") should return 0, since the string \"0\" is \"0\".\n    string_to_integer(\"-5\") should return -5, since the string \"-5\" is \"-5\".\n    string_to_integer(\"5a\") should return 5, since the string \"5a\" is \"5\".\n    string_to_integer(\"aaab\") should return 2, since the string \"aaab\" is \"2\".\n    '''\n    assert isinstance(s, str), \"s must be a string\"\n    if len(s) == 0:\n        return 0\n    elif s[0] == '-':\n        return -string_to_integer(s[1:])\n    elif s[0] == '+':\n        return string_to_integer(s[1:])\n    elif s[0] == '0':\n        if len(s) == 1:\n            return 0\n        else:\n            return string_to_integer(s[1:])\n    else:\n        return int(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    number = 0\n    if n == 1:\n        number = 1\n    elif n == 2:\n        number = 4\n    elif n == 3:\n        number = 6\n    elif n == 4:\n        number = 8\n    elif n == 5:\n        number = 10\n    elif n == 6:\n        number = 12\n    elif n == 7:\n        number = 14\n    elif n == 8:\n        number = 16\n    elif n == 9:\n        number = 18\n    elif n == 10:\n        number = 20\n    return number\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    c = 1\n    n = n-1\n    while n!= 0:\n        a,c = a+c,a\n        n = n-1\n    print(a)\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert n >= 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 8\n    result = tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i\n    return ans\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r**3\n    \n    # NOT: You should not use any math functions\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    # NOT: You should not use any built-in functions\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"Volume of sphere: \")\n    pi=math.pi\n    radius = int(input(\"Enter radius of the sphere: \"))\n    volume = (4/3)*pi*radius**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #print(math.pi * r * r * r)\n    return math.pi * r * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # x,y,z = r\n    # v = 4/3 * pi * x**3\n    # print(v)\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*math.pi*(r**3)\n    return v\nprint(volume_sphere(3))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    a = (4/3) * pi * (r**3)\n    return a\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list1 = [chr(i + 97) for i in range(26)]\n    return ''.join([strr[i] if strr[i] in list1 else '' for i in range(len(strr))])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans=0\n    for char in strr:\n        ans += ord(char)\n    return (ans)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import math\n    strr = strr.lower()\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    res = res % 26\n    return chr(res)\n    \ndef get_Char_2(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import math\n    strr = strr.lower()\n    res = 0\n    for i in range(len(strr)):\n        res = res + ord(strr[i])\n    res = res % 26\n    return chr(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return 0\n    else:\n        l = []\n        for i in strr:\n            l.append(ord(i))\n        return sum(l)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return res%26\n    \ndef get_Char1(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char2(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char3(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char4(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char5(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char6(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char7(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char8(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char9(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char10(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char11(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char12(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char13(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char14(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char15(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char16(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char17(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char18(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char19(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char20(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char21(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char22(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+ord(i)\n    return chr(res%26+ord('a'))\n    \ndef get_Char23(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in st"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_set = \"abcdefghijklmnopqrstuvwxyz\"\n    return char_set[(char_set.index(strr)+1)%len(char_set)]\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr=str(strr)\n    for i in range(len(strr)):\n        if strr[i]>='a' and strr[i]<='z':\n            print((ord(strr[i])-ord('a')+26)%26)\n        elif strr[i]>='A' and strr[i]<='Z':\n            print((ord(strr[i])-ord('A')+26)%26)\n        else:\n            print(ord(strr[i]))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for ch in strr:\n        ans += ord(ch)\n    return ans % 26\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def mod26(n):\n        if(n>=ord('a') and n<=ord('z')):\n            return n\n        elif(n>=ord('A') and n<=ord('Z')):\n            return ord('a')+n-ord('A')\n        elif(n>=ord('0') and n<=ord('9')):\n            return ord('0')+n-ord('0')\n        else:\n            return n\n    final=''\n    for i in strr:\n        final=final+str(mod26(ord(i)))\n    return final\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr)%26\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = 1\n    n = n + 1\n    n = n * 2\n    while(n!= 1):\n        nth = nth * n\n        n = n - 2\n    return nth\n    \nprint(\"Check if function'sequence' function works\")\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = list(range(1, n+1))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #start off with 1 since we're in the middle\n    #multiply that by the power of 2\n    result = 2\n    for i in range(n - 1):\n        #since we multiply by 2 each iteration\n        #increment the result by 2\n        result = result * 2\n    #return the result\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # sequence start from 1\n    sequence_list = [1]\n    while len(sequence_list) < n:\n        if len(sequence_list) % 2 == 0:\n            sequence_list.append(sequence_list[-1] + sequence_list[-2])\n        else:\n            sequence_list.append(sequence_list[-1] - sequence_list[-2])\n    return sequence_list[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    n -= 1\n    return n % 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    if n == 1:\n        return 0\n    while True:\n        yield count\n        if count == 1:\n            count = n\n        else:\n            count += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def newman(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return newman(n-1) + newman(n-2)\n    return newman(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = int(n)\n    return n-1\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surf_area = 4 * math.pi * (r**2)\n    return surf_area\ndef surfacearea_cylinder(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surf_area = 2 * math.pi * (radius**2) + 2 * math.pi * radius * (height**2)\n    return surf_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n    surfacearea = 4*pi*r*r*r\n    return surfacearea\n    \n    \ndef volume_pyramid(h, l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (1/3)*(h*l*h)\n    return volume\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef sum_primes(n):\n    '''\n    Write a function to find the sum of all the primes below a given number.\n    '''\n    if n <= 2:\n        return 2\n    prime = 3\n    count = 3\n    while count <= n:\n        if is_prime(prime):\n            count += 1\n            if count == n:\n                return prime\n        else:\n            prime += 2\n    \ndef binary_search(li, num, start, end):\n    '''\n    Write a function to find the position of the number in a list.\n    '''\n    if start == end:\n        return start if li[start] == num else -1\n    mid = math.floor((start + end) / 2)\n    if num == li[mid]:\n        return mid\n    elif num > li[mid]:\n        return binary_search(li, num, mid+1, end)\n    else:\n        return binary_search(li, num, start, mid-1)\n    \ndef is_palindrome(li):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    start = 0\n    end = len(li) - 1\n    while start < end:\n        if li[start]!= li[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \ndef roman_to_int(roman):\n    '''\n    Write a function to convert roman numeral to an integer.\n    '''\n    roman = roman.upper()\n    rom_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    i = 0\n    while i < len(roman):\n        if i == (len(roman) - 1):\n            int_val += rom_map[roman[i]]\n        else:\n            if rom_map[roman[i]] < rom_map[roman[i+1]]:\n                int_val += rom_map[roman[i+1]] - rom_map[roman[i]]\n                i += 1\n            else:\n                int_val += rom_map[roman[i]]\n        i += 1\n    return int_val\n    \ndef reverse(str):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str[::-1]\n    \ndef swap(str, i, j):\n    '''\n    Write a function to swap two characters in a string.\n    '''\n    return str[:i] + str[j] + str[i+1:j] + str[i] + str[j+1:]\n    \ndef palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    str = str.lower()\n    if str == reverse(str):\n        return True\n    return False\n    \ndef is_odd_string(str):\n    '''\n    Write a function to check if a string is an \"odd\" string or not.\n    '''\n    return str[0]!= str[-1] and str == reverse(str)\n    \ndef make_spoonerism(str):\n    '''\n    Write a function to take an English word and create a spoonerism(Spoonerism of the word).\n    Spoonerism of a word is formed by flipping one letter at a time and concatenating them.\n    Take input from the user.\n    Constraints : 1 <= Length of String <= 10\n    Output Format : The spoonerism of the word(First and last letter should not be same).\n    Sample Input :\n    abc\n    Sample Output :\n    ba\n    bc\n    '''\n    str = str.lower()\n    if len(str) <= 2:\n        return str\n    return str[0] + str[-1] + str[1:-1] + str[0]\n    \ndef palindrome_number(n):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    return int(str(n)[::-1]) == n\n    \ndef factorial_iterative(n):\n    '''\n    Write a function to find the factorial of a number using iteration.\n    '''\n    if n < 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n    \ndef factorial_recursive(n):\n    '''\n    Write a function to find the factorial of a number using recursion.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef reverse_iterative(str):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str) <= 1:\n        return str\n    else:\n        return str[-1] + reverse(str[:-1])\n    \ndef reverse_recursive(str):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str) <= 1:\n        return str\n    else:\n        return str[-1] + reverse_recursive(str[:-1])\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-2) + fibonacci(n-1)\n    \ndef generate_n_fibonacci_numbers(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return generate_n_fibonacci_numbers(n-2) + generate_n_fibonacci_numbers(n-1)\n    \ndef is_palindrome_2(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_3(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]\n    \ndef calculate_factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\n    \ndef print_rangoli(size):\n    '''\n    Write a function t"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4*math.pi*r**2)\n    return(area)\ndef volume_cube(l,b,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l*b*h\n    return(volume)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r**3)\n    return(volume)\ndef sphere_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = (4*math.pi*r**2)\n    return(surfacearea)\ndef cube_volume(l,b,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l*b*h\n    return(volume)\ndef cuboid_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = a*b*h\n    return(volume)\ndef cuboid_surfacearea(a,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surfacearea = 2*(a+b+h)\n    return(surfacearea)\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3*(math.pi*r**2*h)\n    return(volume)\ndef cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea = 1/3*(math.pi*r**2*h) + (2*math.pi*r*h)\n    return(surfacearea)\ndef cone_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return(volume)\ndef cone_cylinder_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone in a cylinder.\n    '''\n    surfacearea = math.pi*r**2*h + 2*math.pi*r*h\n    return(surfacearea)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return(volume)\ndef cylinder_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*math.pi*r*h + 2*math.pi*r**2\n    return(surfacearea)\ndef cylinder_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = math.pi*r**2*h\n    return(volume)\ndef cylinder_cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = math.pi*r**2*h + 2*math.pi*r*h\n    return(surfacearea)\ndef cone_cylinder_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r**2*h + math.pi*r**2)\n    return(volume)\ndef cone_cylinder_cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (math.pi*r**2*h + math.pi*r*h)\n    return(surfacearea)\ndef cone_sphere_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r**2*h + math.pi*r**2)\n    return(volume)\ndef cone_sphere_cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (math.pi*r**2*h + 2*math.pi*r*h)\n    return(surfacearea)\ndef cone_sphere_sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r**2*h + math.pi*r**2)\n    return(volume)\ndef cone_sphere_sphere_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (math.pi*r**2*h + 2*math.pi*r*h)\n    return(surfacearea)\ndef cylinder_sphere_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r**2*h)\n    return(volume)\ndef cylinder_sphere_cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (2*math.pi*r*h)\n    return(surfacearea)\ndef cylinder_sphere_sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (2*math.pi*r**2*h)\n    return(volume)\ndef cylinder_sphere_sphere_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (2*math.pi*r**2*h) + (2*math.pi*r*h)\n    return(surfacearea)\ndef cylinder_sphere_sphere_sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r**2*h)\n    return(volume)\ndef sphere_sphere_sphere_sphere_volume(r1,r2,r3):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r1**2*r2**2*r3**2)\n    return(volume)\ndef sphere_sphere_sphere_sphere_surfacearea(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (math.pi*r1**2*r2**2*r3**2) + (4*math.pi*r1*r2*r3)\n    return(surfacearea)\ndef sphere_sphere_sphere_sphere_cylinder_volume(r1,r2,r3):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.pi*r1**2*r2**2*r3**2)\n    return(volume)\ndef sphere_sphere_sphere_sphere_cylinder_surfacearea(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cylinder with a cone inside.\n    '''\n    surfacearea = (math.pi*r1**2*r2**2*r3**2) + (4*math.pi*r1*r2*r3)\n    return(surfacearea)\ndef sphere_sphere_sphere_sphere_sphere_volume(r1,r2,r3):\n    '''\n    Write a function to find the volume of a cylinder with a cone inside.\n    '''\n    volume = (math.p"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # f = 4*math.pi*math.pow(r, 2)\n    f = 4*math.pi*r*r\n    return f\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r * r\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n    \nprint(surfacearea_sphere(3))\nprint(surfacearea_sphere(4))\nprint(surfacearea_sphere(5))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    radius = float(r)\n    \n    # sphere equation\n    # area = 4/3 * math.pi * r * r * r\n    \n    area = 4/3 * math.pi * radius * radius * radius\n    \n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # recurse\n    else:\n        return (centered_hexagonal_number(n-1)**2) + (6 * (centered_hexagonal_number(n-1)**2 - 1)) + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n**2 - 1)**.5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #sol1\n    return round(pow(n,1.5)*(1+sqrt(2)/2),5)\n    \n    \n    #sol2\n    return round(pow(n,1.5)*(1+sqrt(2)/2),5)\n    \n    \n    #sol3\n    return n*(2*n - 1)\n    \n    \n    #sol4\n    #n = int(sqrt(8*n + 1) - 1)/2\n    \n    \n    "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert(n > 0)\n    i = 1\n    ans = 0\n    while i <= n:\n        ans += i * (3*i - 1) / 2\n        i += 1\n    return int(ans)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2 * (1 + n**2) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum((6*(i**2-i)+1)/3*(i**2+1) for i in range(n))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert isinstance(n, int) and n > 0\n    n = n - 1\n    return int((1 + sqrt(8 * n + 1)) / 2)\n    \nif __name__ == '__main__':\n    print(centered_hexagonal_number(3))\n    print(centered_hexagonal_number(4))\n    print(centered_hexagonal_number(5))\n    print(centered_hexagonal_number(6))\n    print(centered_hexagonal_number(7))\n    print(centered_hexagonal_number(8))\n    print(centered_hexagonal_number(9))\n    print(centered_hexagonal_number(10)"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for i in range(1, n):\n        if i % 2 == 0:\n            i = 1/2 * (i + 1)\n        else:\n            i = 1/2 * (i - 1)\n    return i\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(3*n - 1)*0.5)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        x = (2 * n - 1) * n\n        y = n * (2 * n - 1)\n        return x ** 2 - y + 1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary_merged = {}\n    dictionary_merged.update(dict1)\n    dictionary_merged.update(dict2)\n    dictionary_merged.update(dict3)\n    return dictionary_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2, **dict3)\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict={}\n    for k,v in dict1.items():\n        merged_dict[k]=v\n    for k,v in dict2.items():\n        merged_dict[k]=v\n    for k,v in dict3.items():\n        merged_dict[k]=v\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not (dict1 or dict2 or dict3):\n        return dict1\n    for key in dict1:\n        dict1[key] += dict2[key]\n        dict1[key] += dict3[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for i in dict1:\n        for j in dict2:\n            if i==j:\n                dict1[i] = dict1[i]+dict2[j]\n    for i in dict3:\n        for j in dict2:\n            if i==j:\n                dict1[i] = dict1[i]+dict3[j]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_1 = dict1\n    dict_2 = dict2\n    dict_3 = dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # use the update() method to merge dictionaries.\n    # NOTE: use.update() method if you don't know how to use.update()\n    d1 = dict1\n    d2 = dict2\n    d3 = dict3\n    #d1.update(d2)\n    d1.update(d3)\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {}\n    for i in range(len(dict1)):\n        dict[dict1[i]] = dict1[i]\n    for i in range(len(dict2)):\n        dict[dict2[i]] = dict2[i]\n    for i in range(len(dict3)):\n        dict[dict3[i]] = dict3[i]\n    return dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    x = ct.ChainMap(dict1,dict2,dict3)\n    return x\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = []\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if len(list1) > 0:\n        dictionary = {}\n        for x in list1:\n            if x not in dictionary:\n                dictionary[x] = 1\n            else:\n                dictionary[x] = dictionary[x] + 1\n    return dictionary"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        if list1[i] in freq_dict.keys():\n            freq_dict[list1[i]] += 1\n        else:\n            freq_dict[list1[i]] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #create a dictionary to store frequency of all elements in the list.\n    freq_dict = dict()\n    #for loop to traverse through all elements in the list.\n    for element in list1:\n        #if element is already present in the dictionary, increment frequency by 1.\n        if element in freq_dict:\n            freq_dict[element] += 1\n        #else if element is not present in the dictionary, create a new key-value pair for element.\n        else:\n            freq_dict[element] = 1\n    #return the dictionary.\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict.keys():\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs(N - mid) <= abs(N - upper):\n        return mid\n    # return the number if it's closer than the middle number\n    elif abs(N - mid) > abs(N - upper):\n        return upper\n    # return the middle number if it's closer than the middle number\n    else:\n        return mid\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # check if the number is negative and if it is, return 1\n    if N < 0:\n        return 1\n    \n    # set lower and upper range\n    lower = 0\n    upper = N\n    \n    # determine middle number\n    mid = (lower + upper) // 2\n    \n    # return the middle number if the number is the closest\n    if abs("
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 2:\n        return 1\n    if N <= 4:\n        return 2\n    if N <= 6:\n        return 3\n    \n    num = 4\n    while num <= N:\n        if N - num >= 2:\n            return num\n        num += 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = None\n    for i in range(N):\n        if closest_num is None or abs(i - N) < abs(i - closest_num):\n            closest_num = i\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    from math import log10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        N = N//2\n        if N < 1:\n            return 1\n    else:\n        N = (N+1)//2\n        if N < 1:\n            return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #The closest number to a value is itself, so we need to check if the value is equal to itself\n    if N == N:\n        return N\n    else:\n        #The smallest number is itself\n        if N == 1:\n            return N\n        else:\n            #We need to check if the number is prime\n            if not is_prime(N):\n                #If it is not, we must check if the closest number is prime and then we can return that\n                if is_prime(N-1):\n                    return N-1\n                #If it isn't, we need to find the closest number not prime and return that\n                else:\n                    return closest_num(N-2)\n            else:\n                #If it is, we need to find the closest number not prime and return that\n                if is_prime(N-2):\n                    return closest_num(N-3)\n                #If it isn't, we need to find the closest number prime and return that\n                else:\n                    return closest_num(N-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(N, num):\n        if num > N:\n            return 0\n        if abs(num - N) == 0:\n            return num\n        if abs(num - N) < abs(closest_num_helper(N, num + 1) - N):\n            return num\n        return closest_num_helper(N, num + 1)\n    return closest_num_helper(N, 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    else:\n        if N == 2:\n            return 2\n        else:\n            while N!= 2:\n                N -= 1\n                if N == 1:\n                    return 1\n                elif N == 2:\n                    return 2\n                else:\n                    N -= 1\n                    if N == 1:\n                        return 1\n                    elif N == 2:\n                        return 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # smallest number to right is the first that is smaller than N\n    for i in range(len(N)-1, -1, -1):\n        if N[i] > N[i+1]:\n            return N[i+1]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N >=1:\n        # N is an integer\n        return N\n    elif N == 0:\n        # 0 is an integer\n        return 0\n    elif N < 0:\n        # negative number is an integer\n        return abs(N)\n    else:\n        # N = -1 is an integer\n        return -N\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for word in list1:\n        if len(word) > max:\n            max = len(word)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if(len(i)>max):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for i in list1:\n        count += 1\n    return count\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for item in list1:\n        if len(item) > max:\n            max = len(item)\n    print(max)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen=0\n    i=0\n    while i<len(list1):\n        if len(list1[i])>maxlen:\n            maxlen=len(list1[i])\n        i=i+1\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = list1[0]\n    length = len(list1[0])\n    for x in list1:\n        if len(x) > length:\n            length = len(x)\n            max = x\n    print(\"The Longest word is: \", max, \" with length: \", length)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # return len(max(list1, key=len))\n    return max(map(len, list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=0\n    max1=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]==\" \":\n                a=1\n            if a==0:\n                max1=max(max1,len(list1[i]))\n                a=0\n            else:\n                a=0\n    return max1\ndef common_chars(list1):\n    '''\n    Write a python function to find the common characters present in the given string.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(len(list1)):\n        l1.append(list1[i])\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    max1=0\n    for i in range(len(l1)):\n        c=0\n        for j in range(len(l2[i])):\n            if l1[i][j] in l2[i] and l1[i][j]!=\" \":\n                c=c+1\n                if c>max1:\n                    max1=c\n    return max1\ndef reverse(list1):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    i=0\n    l1=\"\"\n    l2=\"\"\n    for i in range(len(list1)):\n        l1=l1+list1[i]\n    for i in range(len(l1)):\n        l2=l2+l1[len(l1)-i-1]\n    return l2\ndef sum_list(list1):\n    '''\n    Write a python function to find the sum of the list.\n    '''\n    sum1=0\n    for i in range(len(list1)):\n        sum1=sum1+list1[i]\n    return sum1\ndef swap(list1):\n    '''\n    Write a python function to swap the elements of the given list.\n    '''\n    i=0\n    j=0\n    list1_swap=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            list1_swap.append(list1[i])\n        else:\n            list1_swap.append(list1[i])\n    return list1_swap\ndef alternating_swap(list1):\n    '''\n    Write a python function to swap the alternate elements of the given list.\n    '''\n    i=0\n    for i in range(len(list1)):\n        if i%2==0:\n            list1[i],list1[i+1]=list1[i+1],list1[i]\n    return list1\ndef time_conversion(time1):\n    '''\n    Write a python function to convert the time given in 24hr format to 12hr format.\n    '''\n    l1=time1.split(\":\")\n    if \"PM\" in time1:\n        if l1[0]!=\"12\":\n            if l1[0]==\"0\":\n                l1[0]=\"12\"\n            else:\n                l1[0]=\"\"+l1[0]+\"12\"\n    if \"AM\" in time1:\n        if l1[0]!=\"12\":\n            if l1[0]==\"0\":\n                l1[0]=\"00\"\n            else:\n                l1[0]=\"00\"+l1[0]\n    s=''\n    for i in range(len(l1)):\n        s=s+l1[i]+\":\"\n    return s\ndef time_conversion1(time1):\n    '''\n    Write a python function to convert the time given in 12hr format to 24hr format.\n    '''\n    l1=time1.split(\":\")\n    if l1[0]==\"12\":\n        l1[0]=\"00\"\n    if l1[0]==\"00\":\n        l1[0]=\"\"\n    s=\"\"\n    for i in range(len(l1)):\n        s=s+l1[i]+\":\"\n    return s\ndef time_conversion2(time1):\n    '''\n    Write a python function to convert the time given in 24hr format to 12hr format.\n    '''\n    l1=time1.split(\":\")\n    s=''\n    if l1[0]==\"12\":\n        l1[0]=\"00\"\n    if l1[0]==\"00\":\n        l1[0]=\"\"\n    for i in range(len(l1)):\n        s=s+l1[i]+\":\"\n    return s\ndef time_conversion3(time1):\n    '''\n    Write a python function to convert the time given in 12hr format to 24hr format.\n    '''\n    l1=time1.split(\":\")\n    s=''\n    if l1[0]==\"0\":\n        l1[0]=\"\"\n    if l1[0]==\"\":\n        l1[0]=\"00\"\n    for i in range(len(l1)):\n        s=s+l1[i]+\":\"\n    return s\ndef time_conversion4(time1):\n    '''\n    Write a python function to convert the time given in 24hr format to 12hr format.\n    '''\n    l1=time1.split(\":\")\n    s=''\n    if l1[0]==\"00\":\n        l1[0]=\"\"\n    if l1[0]==\"\":\n        l1[0]=\"0\"\n    for i in range(len(l1)):\n        s=s+l1[i]+\":\"\n    return s\ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove all the duplicates from the given list.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        if lst[i] not in lst1:\n            lst1.append(lst[i])\n    return lst1\ndef remove_duplicates1(lst):\n    '''\n    Write a python function to remove all the duplicates from the given list.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        if lst[i] not in lst1 and lst[i]!=\"\":\n            lst1.append(lst[i])\n    return lst1\ndef remove_duplicates2(lst):\n    '''\n    Write a python function to remove all the duplicates from the given list.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        if lst[i] not in lst1:\n            lst1.append(lst[i])\n        else:\n            continue\n    return lst1\ndef common_elements(list1,list2):\n    '''\n    Write a python function to find the common elements of the given lists.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(len(list1)):\n        l1.append(list1[i])\n    for i in range(len(list2)):\n        l2.append(list2[i])\n    l3=[]\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            l3.append(l1[i])\n    return l3\ndef common_elements1(list1,list2):\n    '''\n    Write a python function to find the common elements of the given lists.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(len(list1)):\n        l1.append(list1[i])\n    for i in range(len(list2)):\n        l2.append(list2[i])\n    l3=[]\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            l3.append(l1[i])\n    return l3\ndef common_elements2(list1,list2):\n    '''\n    Write a python function to find the common elements of the given lists.\n    '''\n    l1=[]\n    l"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        max_length = 0\n        for i in list1:\n            if len(i)>max_length:\n                max_length = len(i)\n        return max_length\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+n] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i not in sub_str:\n            return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:len(sub_str)+i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        return False\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = True\n    for i in range(2,n):\n        if(n%i==0):\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    d = n + 1\n    while (n % d!= 0):\n        d += 1\n        \n    return (d == n)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while n!= 0:\n        if (n % 10) % 2 == 0:\n            n = n // 10\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        print(n, \" is an undulating number\") \n    else: \n        print(n, \" is not an undulating number\") \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n == 1 or (n % 2!= 0 and n % 3 == 0) or (n % 2 == 0 and n % 3!= 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_1 = 0\n    num_2 = 0\n    while (n > 0):\n        num_1 = n % 10\n        n = n // 10\n        num_2 = n % 10\n        n = n // 10\n        if (num_1 == num_2):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    i = 1\n    while i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    s = 1\n    while s < n:\n        if n % s == 0:\n            return False\n        s = s + 2\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #Recursion\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    elif n % 7 == 0:\n        return False\n    else:\n        return is_undulating(n//2) or is_undulating(n//3) or is_undulating(n//5) or is_undulating(n//7)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n    "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if a == 0:\n        return 0\n    if b == 1:\n        return a\n    if b == 2:\n        return a * a\n    if b == 3:\n        return a * a * a\n    if b == 4:\n        return a * a * a * a\n    if b == 5:\n        return a * a * a * a * a\n    if b == 6:\n        return a * a * a * a * a * a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    res = a**b\n    return res\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tup_list = []\n    for i in test_list:\n        tup_list.append(i[0:2])\n    tup_list = sorted(tup_list, key=lambda x: x[1])\n    return tup_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_minimum_list = []\n    for index, values in enumerate(test_list):\n        index_minimum_list.append((index,values[0],values[1]))\n    index_minimum_list = sorted(index_minimum_list, key=itemgetter(2))\n    return index_minimum_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\nprint(index_minimum([('a', 1), ('b', 2), ('c', 3), ('d', 1), ('e', 3)]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_value = 0\n    index_min = 0\n    min_value = (0,0)\n    for i in range(1, len(test_list)):\n        if min_value[1] > test_list[i][1]:\n            min_value = test_list[i]\n            index_min = i\n    return min_value\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda item:item[1])\n    return(test_list[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(0,2))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini_lst=[]\n    mini_lst.append(lst[0])\n    for i in range(1,len(lst)):\n        mini_lst.append(lst[i][:])\n        if len(mini_lst[i])<len(mini_lst[i-1]):\n            mini_lst[i]=mini_lst[i]\n    return mini_lst\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst=sorted(lst,key=len)\n    print(lst)\n    min_length=len(lst[0])\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    print(\"Smallest list length: \",min_length)\n    \ndef Find_Numbers_Even_Odd(lst):\n    '''\n    Write a python function to find the number of even numbers and the number of odd numbers in a list.\n    '''\n    count_even=0\n    count_odd=0\n    for i in lst:\n        if i%2==0:\n            count_even+=1\n        else:\n            count_odd+=1\n    print(\"Total number of even numbers: \",count_even)\n    print(\"Total number of odd numbers: \",count_odd)\n    \ndef Find_Largest_Number(lst):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    largest_num=0\n    for i in lst:\n        if i>largest_num:\n            largest_num=i\n    print(\"Largest Number in the list: \",largest_num)\n    \ndef Find_Smallest_Number(lst):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest_num=0\n    for i in lst:\n        if i<smallest_num:\n            smallest_num=i\n    print(\"Smallest Number in the list: \",smallest_num)\n    \ndef Find_Average_Value(lst):\n    '''\n    Write a python function to find the average of all the elements in a list.\n    '''\n    num_total=0\n    for i in lst:\n        num_total+=i\n    print(\"The average value in the list: \",num_total/len(lst))\n    \ndef Find_Sum_and_Product(lst):\n    '''\n    Write a python function to find the sum of all the numbers in a list and the product of all the numbers in a list.\n    '''\n    sum=0\n    product=1\n    for i in lst:\n        sum+=i\n        product*=i\n    print(\"The sum of the list: \",sum)\n    print(\"The product of the list: \",product)\n    \ndef Find_Square_of_Number(n):\n    '''\n    Write a python function to find the square of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*n\n    \ndef Find_Factorial(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*Find_Factorial(n-1)\n    \ndef Find_Divisor_Numbers(n):\n    '''\n    Write a python function to find the divisors of a number using recursion.\n    '''\n    if n==1:\n        return [n]\n    else:\n        list_of_divisors=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                list_of_divisors.append(i)\n        return list_of_divisors\n        \ndef Find_Pythagorean_Triplet(n):\n    '''\n    Write a python function to find all Pythagorean Triplets in a given range.\n    '''\n    list_of_pythagorean_triplets=[]\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            for k in range(1,j+1):\n                if j**2+k**2==i**2:\n                    list_of_pythagorean_triplets.append((i,j,k))\n    return list_of_pythagorean_triplets\n    \ndef Find_LCM(n1,n2):\n    '''\n    Write a python function to find the least common multiple of 2 numbers using recursion.\n    '''\n    if n1==0:\n        return n2\n    elif n2==0:\n        return n1\n    elif n1>n2:\n        return Find_LCM(n1-n2,n2)\n    else:\n        return Find_LCM(n1,n2-n1)\n    \ndef Find_Armstrong_Number(n):\n    '''\n    Write a python function to find the armstrong number in a given range.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum+=i**3\n        i+=1\n    if sum==n:\n        print(\"Armstrong Number\")\n    else:\n        print(\"Not an Armstrong Number\")\n    \ndef Find_Number_of_Digits(n):\n    '''\n    Write a python function to find the number of digits in a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+Find_Number_of_Digits(n//10)\n        \ndef Find_Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of digits in a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+Find_Sum_of_Digits(n//10)\n        \ndef Find_Exponent(n):\n    '''\n    Write a python function to find the exponent of a number using recursion.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*Find_Exponent(n-1)\n    \ndef Find_Sum_of_Divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n-1)+Find_Sum_of_Divisors(n-1)\n    \ndef Find_Largest_Divisor(n):\n    '''\n    Write a python function to find the largest divisor of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+Find_Largest_Divisor(n-1)\n    \ndef Find_Largest_Divisor_Using_Recursion(n):\n    '''\n    Write a python function to find the largest divisor of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+Find_Largest_Divisor_Using_Recursion(n//2)\n    \ndef Find_Smallest_Divisor(n):\n    '''\n    Write a python function to find the smallest divisor of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+Find_Smallest_Divisor(n-1)\n    \ndef Find_Smallest_Divisor_Using_Recursion(n):\n    '''\n    Write a python function to find the smallest divisor of a number using recursion.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+Find_Smallest_Divisor_Using_Recursion(n//2)\n    \ndef Find_Ways_To_Form_a_Number(n):\n    '''\n    Write a python function to find the number of ways to form a number using recursion.\n    '''\n    if n==0:\n        return 1\n    else:\n        return Find_Ways_To_Form_a_Number(n-1)+Find_Ways_To_Form_a_Number(n-2)\n    \ndef Find_Fibonacci_Numbers(n):\n    '''\n    Write a python function to find the number of Fibonacci numbers in a range.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return Find_Fibonacci_Numbers(n-2)+Find_Fibonacci_Numbers(n-1)\n        \ndef Find_Prime_Numbers(n):\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #initializing the minimum length\n    min_len = 0\n    #checking if the list contains a single list\n    if len(lst)==1:\n        return len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n    \nprint(Find_Min_Length([[[1,2,3],[4,5,6]],[7,8,9],[1,2,3],[4,5,6]]))"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=float('inf')\n    for sub_list in lst:\n        if len(sub_list)<min_len:\n            min_len=len(sub_list)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(min):\n            min=lst[i]\n    return len(min)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        min_len = min(min_len,len(lst[i]))\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len=len(lst)\n    if lst_len==0:\n        return 0\n    else:\n        Min_len=len(lst[0])\n        for item in lst:\n            if len(item)<Min_len:\n                Min_len=len(item)\n        return Min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][0]\n    for i in range(len(lst)):\n        if lst[i] == min:\n            pass\n        else:\n            for j in range(len(lst[i])):\n                if min > lst[i][j]:\n                    min = lst[i][j]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=999999\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if min_len>len(lst[i][j]):\n                min_len=len(lst[i][j])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = 1\n    i = 2\n    while i <= n/i:\n        if n%i == 0:\n            num += 1\n        i += 1\n    return num\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    res = 0\n    for i in range(1, n):\n        if n % i == 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    print(\"Calling function with:\", n)\n    divisors = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 2\n    while i < n:\n        if n%i==0:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count\n    \nif __name__ == \"__main__\":\n    num = int(input())\n    print(divisor(num))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1, n):\n        if n % i == 0:\n            div += 1\n    print(f'The number of divisors of {n} is {div}')\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    ans = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            ans += 1\n        i += 1\n    return ans\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    if n <= 1:\n        return 1\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if type(list1) == list:\n        flat_list = []\n        for sub_list in list1:\n            for item in sub_list:\n                flat_list.append(item)\n        return dict(Counter(flat_list))\n    else:\n        raise Exception(\"Incorrect data type\")\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dic = {}\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            for j in range(len(list1[i])):\n                if type(list1[i][j]) is not int:\n                    if list1[i][j] in freq_dic:\n                        freq_dic[list1[i][j]] += 1\n                    else:\n                        freq_dic[list1[i][j]] = 1\n                else:\n                    if list1[i][j] in freq_dic:\n                        freq_dic[list1[i][j]] += 1\n                    else:\n                        freq_dic[list1[i][j]] = 1\n        else:\n            if list1[i] in freq_dic:\n                freq_dic[list1[i]] += 1\n            else:\n                freq_dic[list1[i]] = 1\n    return freq_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d={}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in d:\n                d[list1[i][j]]=1\n            else:\n                d[list1[i][j]]+=1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # your code here\n    # 1st pass:\n    # lenght of list\n    n = len(list1)\n    # finding length of each sublist\n    m = len(list1[0])\n    # creating dictionary\n    d = {}\n    # traverse list1\n    for i in range(n):\n        # traverse list1[i]\n        for j in range(m):\n            # check if element is present in d\n            if list1[i][j] in d:\n                # if element is present in d increase count by 1\n                d[list1[i][j]] += 1\n            else:\n                # else create a new key value pair in dictionary with value 1\n                d[list1[i][j]] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        for j in i:\n            if j not in count:\n                count[j] = 0\n            count[j] += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq = dict()\n    \n    for i in list1:\n        for j in i:\n            if j not in freq:\n                freq[j] = 1\n            else:\n                freq[j] += 1\n    \n    return freq\n        \ndef nested_lists(list1,list2):\n    '''\n    Write a function to check if two lists are nested or not. A list is nested if all elements of the nested list are in the main list.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                l.append(list2[j])\n                break\n        if list2[j] not in l:\n            return False\n    return True\n    \ndef nested_lists_repetition(list1,list2):\n    '''\n    Write a function to find repetition in nested list.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                l.append(list2[j])\n                break\n        if list2[j] not in l:\n            return False\n    return True\n    \ndef interleaved_string(list1,list2):\n    '''\n    Write a function to find interleaved string.\n    '''\n    \n    s = []\n    \n    for i in range(min(len(list1),len(list2))):\n        s.append(list1[i])\n        s.append(list2[i])\n    \n    return s\n    \ndef interleaved_string_repetition(list1,list2):\n    '''\n    Write a function to find interleaved string.\n    '''\n    \n    s = []\n    \n    for i in range(min(len(list1),len(list2))):\n        s.append(list1[i])\n        s.append(list2[i])\n        s.append(list1[i])\n        s.append(list2[i])\n    \n    return s\n    \ndef interleaved_string_complexity(list1,list2):\n    '''\n    Write a function to find interleaved string.\n    '''\n    \n    if len(list1) > len(list2):\n        small = list1\n        large = list2\n    else:\n        small = list2\n        large = list1\n        \n    l1 = []\n    l2 = []\n    \n    for i in range(len(small)):\n        l1.append(small[i])\n        l2.append(large[i])\n        l1.append(small[i])\n        l2.append(large[i])\n    \n    return l1\n    \ndef interleaved_string_complexity_repetition(list1,list2):\n    '''\n    Write a function to find interleaved string.\n    '''\n    \n    if len(list1) > len(list2):\n        small = list1\n        large = list2\n    else:\n        small = list2\n        large = list1\n        \n    l1 = []\n    l2 = []\n    \n    for i in range(len(small)):\n        l1.append(small[i])\n        l2.append(large[i])\n        l1.append(small[i])\n        l2.append(large[i])\n        l1.append(small[i])\n        l2.append(large[i])\n    \n    return l1\n    \ndef int_abs(num1):\n    '''\n    Write a function to find absolute value of number.\n    '''\n    \n    if num1 >= 0:\n        return num1\n    else:\n        return -num1\n        \ndef int_abs_repetition(num1):\n    '''\n    Write a function to find absolute value of number.\n    '''\n    \n    if num1 >= 0:\n        return num1\n    else:\n        return -num1\n        \ndef int_abs_complexity(num1):\n    '''\n    Write a function to find absolute value of number.\n    '''\n    \n    if num1 >= 0:\n        return num1\n    else:\n        return -num1\n        \ndef int_abs_complexity_repetition(num1):\n    '''\n    Write a function to find absolute value of number.\n    '''\n    \n    if num1 >= 0:\n        return num1\n    else:\n        return -num1\n        \ndef reversed_element(l):\n    '''\n    Write a function to reverse elements of list.\n    '''\n    \n    l2 = l[::-1]\n    \n    return l2\n    \ndef reversed_element_repetition(l):\n    '''\n    Write a function to reverse elements of list.\n    '''\n    \n    l2 = l[::-1]\n    \n    return l2\n    \ndef reversed_element_complexity(l):\n    '''\n    Write a function to reverse elements of list.\n    '''\n    \n    l2 = []\n    \n    for i in range(len(l)):\n        l2.append(l[i])\n        l2.append(l[i])\n        l2.append(l[i])\n        \n    return l2\n    \ndef reversed_element_complexity_repetition(l):\n    '''\n    Write a function to reverse elements of list.\n    '''\n    \n    l2 = []\n    \n    for i in range(len(l)):\n        l2.append(l[i])\n        l2.append(l[i])\n        l2.append(l[i])\n        l2.append(l[i])\n    \n    return l2\n    \ndef sum_list(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        \n    return l\n    \ndef sum_list_repetition(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list1[i])\n        l.append(list2[i])\n        \n    return l\n    \ndef sum_list_complexity(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        \n    return l\n    \ndef sum_list_complexity_repetition(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list1[i])\n        l.append(list2[i])\n        \n    return l\n    \ndef sum_nested_list(l1,l2):\n    '''\n    Write a function to sum two nested lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(l1)):\n        l.append(l1[i])\n        l.append(l2[i])\n        \n    return l\n    \ndef sum_nested_list_repetition(l1,l2):\n    '''\n    Write a function to sum two nested lists.\n    '''\n    \n    l = []\n    \n    for i in range(len(l1)):\n        l.append(l1[i])\n        l.append(l2[i])\n        l"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        for y in x:\n            if y not in freq:\n                freq[y] = 1\n            else:\n                freq[y] += 1\n    return freq\n    \n    \ndef get_max_difference(list1):\n    '''\n    Write a function to find the maximum difference between two consecutive elements in a sorted list.\n    '''\n    max_diff = 0\n    for i in range(1, len(list1)):\n        if list1[i] - list1[i-1] > max_diff:\n            max_diff = list1[i] - list1[i-1]\n    return max_diff\n    \n    \ndef construct_tree(inorder, postorder):\n    '''\n    Write a function to construct a tree from inorder and postorder traversal of a given input list.\n    '''\n    if len(inorder) == 0:\n        return None\n    ind = inorder.index(postorder.pop())\n    root = TreeNode(inorder[ind])\n    root.left = construct_tree(inorder[:ind], postorder)\n    root.right = construct_tree(inorder[ind+1:], postorder)\n    return root\n    \n    \ndef binary_tree_paths(root):\n    '''\n    Write a function to find all root-to-leaf paths in a given binary tree.\n    '''\n    paths = []\n    def dfs(root, path):\n        if root.left is None and root.right is None:\n            paths.append(path)\n            return \n        if root.left is not None:\n            dfs(root.left, path + str(root.left.val) + '->')\n        if root.right is not None:\n            dfs(root.right, path + str(root.right.val) + '->')\n    dfs(root, '')\n    return paths\n    \n    \ndef find_duplicates(lst):\n    '''\n    Write a function to find all duplicates in an array.\n    '''\n    set_of_elems = set()\n    for i in range(len(lst)):\n        if lst[i] in set_of_elems:\n            return lst[i]\n        else:\n            set_of_elems.add(lst[i])\n    return []\n    \n    \ndef smallest_number(lst):\n    '''\n    Write a function to find the smallest number in an unsorted list.\n    '''\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n    \n    \ndef move_zeroes(nums):\n    '''\n    Write a function to move all zeros to the end of an array.\n    '''\n    i = 0\n    for j in range(len(nums)):\n        if nums[j]!= 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    return nums\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicate values in an unsorted array.\n    '''\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            lst[i-1] = lst[i]\n    return lst\n    \n    \ndef can_place(n, k, horizontal, vertical):\n    '''\n    Write a function to check if you can place n queens on an 8 x 8 board such that no two queens attack each other.\n    '''\n    for i in range(n):\n        if horizontal[i] + vertical[i] > k:\n            return False\n    return True\n    \n    \ndef find_max_subarray(arr):\n    '''\n    Write a function to find the contiguous subarray of maximum sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_ending_here = arr[0]\n    max_so_far = max_ending_here\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n    \n    \ndef search_insert(lst, target):\n    '''\n    Write a function to search an element in a sorted list and insert the element if the element is not present in the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return len(lst)\n    \n    \ndef is_identical(root1, root2):\n    '''\n    Write a function to check if two binary trees are identical.\n    '''\n    if root1 is None and root2 is None:\n        return True\n    if root1 is not None and root2 is not None:\n        return root1.val == root2.val and is_identical(root1.left, root2.left) and is_identical(root1.right, root2.right)\n    return False\n    \n    \ndef is_bst(root):\n    '''\n    Write a function to check if a binary tree is a BST.\n    '''\n    if root is None:\n        return True\n    if root.left is not None and root.val >= root.left.val:\n        return False\n    if root.right is not None and root.val <= root.right.val:\n        return False\n    return is_bst(root.left) and is_bst(root.right)\n    \n    \ndef max_depth(root):\n    '''\n    Write a function to find the maximum depth of a binary tree.\n    '''\n    if root is None:\n        return 0\n    else:\n        return 1 + max(max_depth(root.left), max_depth(root.right))\n    \n    \ndef is_balanced(root):\n    '''\n    Write a function to check if a binary tree is balanced.\n    '''\n    if root is None:\n        return True\n    if is_balanced(root.left) and is_balanced(root.right):\n        return abs(max_depth(root.left) - max_depth(root.right)) <= 1\n    return False\n    \n    \ndef find_majority_element(lst):\n    '''\n    Write a function to find the majority element in an unsorted array.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == count:\n            count += 1\n        else:\n            count -= 1\n    return count\n    \n    \ndef palindrome(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    s = s.replace(\" \", \"\")\n    return s[::] == s[::-1]\n    \n    \ndef check_valid_parentheses(string):\n    '''\n    Write a function to check if a given string is valid parentheses or not.\n    '''\n    string = string.replace(\" \", \"\")\n    if string.count('(')!= string.count(')'):\n        return False\n    while len(string) > 0:\n        for i in range(len(string)):\n            if string[i] == '(':\n                string = string[:i] + string[i+1:]\n                break\n            elif string[i] == ')':\n                string = string[:i] + string[i+1:]\n                break\n        if len(string) == 0:\n            return True\n    return False\n    \n    \ndef find_max_in_bitonic_array(arr):\n    '''\n    Write a function that finds the maximum element in a bitonic array. The complete bitonic array must be strictly increasing, i.e.\n    arr[0] <= arr[1] < arr[2] <=... < arr[n-1], and there must be at least three elements in this array.\n    '''\n    if len(arr) == 0:\n        return None\n    if le"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in i:\n            if j not in dict1:\n                dict1[j] = 1\n            else:\n                dict1[j] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    if len(list1) == 0:\n        return frequency\n    for i in range(len(list1)):\n        if list1[i] in frequency:\n            frequency[list1[i]] += 1\n        else:\n            frequency[list1[i]] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply *= num\n    return multiply/len(numbers)\n    \nprint(multiply_num([1,2,3]))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return 0\n    multiply = 1\n    for n in numbers:\n        multiply *= n\n    return multiply / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    lst = []\n    for i in range(len(numbers)):\n        lst.append(numbers[i] * numbers[i])\n    return sum(lst) / len(lst)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Creating a new list\n    new_list = [] \n    # Multiplying each item in list with the specified number\n    for i in numbers:\n        new_list.append(i * 2)\n    # Dividing each item in list by the length of the list\n    for i in range(0, len(numbers)):\n        new_list[i] = new_list[i] / len(numbers)\n    return new_list\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # return numbers * len(numbers)\n    return reduce(lambda x, y: x * y, numbers, 1)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #Calculate the product\n    product = 1\n    for number in numbers:\n        product *= number\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Create a variable to store the product of the numbers.\n    product = 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_res = 1\n    for num in numbers:\n        mul_res = mul_res * num\n    return mul_res / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # output = bin(n)[2:] \n    # output = output.replace('0b', '') \n    # return output\n    binary = '' \n    while n > 0: \n        n, r = divmod(n, 2) \n        binary = str(r) + binary \n    return binary \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result=''\n    while n>0:\n        result=str(n%2)+result\n        n=n//2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = str(bin(n))[2:]\n    print(binary_number)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \"{0:b}\".format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n).replace(\"0b\",\"\")\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n!= 0:\n        binary = str(n%2) + binary\n        n = n//2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n > 0:\n        return decimal_to_binary(n//2) + str(n % 2)\n    if n < 0:\n        return decimal_to_binary(n//2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b')\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # ------------------\n    # YOUR CODE HERE\n    # ------------------\n    str_num = str(num)\n    # check for odd number\n    if len(str_num)%2 == 1:\n        str_num = str_num[1:]\n        # adding a zero before the char\n        str_num = str_num + '0'\n    # remove all charecters that are not in the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(str_num)):\n        if str_num[i] not in alphabet:\n            str_num = str_num[:i]\n            str_num = str_num + alphabet[0]\n            break\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    # Pad the string to make sure it's always odd\n    str_num = '0' + str_num if len(str_num) % 2 == 0 else str_num\n    # Take a slice, reducing it by one at a time, to reduce the time complexity from n^2 to n\n    for i in range(len(str_num)-1, 0, -1):\n        # If the number has an odd number of ones, there's no point in going further\n        if str_num[i] == '1':\n            return int(str_num[:i])\n        # If the number has an even number of ones, this is the smallest palindrome of length i-1,\n        # if it exists.\n        if str_num[i] == '0':\n            str_num = str_num[:i-1] + str_num[i+1:]\n            # The string is now even, so we can keep going\n            continue\n    # No palindrome of length i exists\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        if num%10 == 0:\n            return num%10 + next_smallest_palindrome(num/10)\n        else:\n            return num%10 + next_smallest_palindrome(num/10)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #Change the number from left to right\n    #Example: 1111  to  11111\n    #We change the number to the right and we change the number to the left\n    #Then we check the next number on the right and the next on the left\n    #Example: 1  to  11\n    #We find a palindrome number 1 at index 2\n    #So we change the number to the left and we change the number to the right\n    #Then we check the next number on the right and the next on the left\n    #Example: 11  to  111\n    #We find a palindrome number 11 at index 2\n    #So we change the number to the left and we change the number to the right\n    #Then we check the next number on the right and the next on the left\n    #Then we repeat the process until we find a palindrome number\n    #So we find the smallest palindrome number\n    #Print the minimum number\n    \n    if num < 0 or num % 10 == 0:\n        return num\n    num_str = str(num)\n    next_num = \"\"\n    for i in range(len(num_str)):\n        next_num = str(int(num_str[i])*10 + int(num_str[i+1]))\n        num_str = str(int(num_str[:i])*10 + int(num_str[i+1:]))\n        if next_num!= \"0\" and next_num == next_num[::-1]:\n            return int(next_num)\n        else:\n            num_str = next_num\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    rev_num = rev_num + num\n    while rev_num % 10 == 0:\n        rev_num = rev_num//10\n    return rev_num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Make a list of digits\n    digits = []\n    # Create string from digits\n    s = ''\n    while num > 0:\n        digits.append(num % 10)\n        num = num // 10\n    # Reverse list of digits\n    digits = digits[::-1]\n    # Convert back to string\n    for i in range(len(digits)):\n        s += str(digits[i])\n    # Convert string to int\n    n = int(s)\n    # Return palindrome if n is odd\n    if n % 2 == 1:\n        return n\n    # Return even palindrome\n    else:\n        return n-1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 1:\n        return 2\n    i = num\n    while i > 0:\n        i = i // 10\n    i = num\n    while i > 0:\n        i = i // 10\n        i = i * 10\n    return i\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    i, j = 0, len(arr) - 1\n    \n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] < arr[k - 1]:\n            i = mid + 1\n        else:\n            j = mid\n    \n    return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    #if k is greater than length of arr\n    if k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    \ndef smallest_positive_number(arr):\n    '''\n    Write a function to find the smallest positive number that can be made from digits of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            return arr[i]\n    return 1\n    \ndef get_min_elem(arr):\n    '''\n    Write a function to find the minimum element in the array.\n    '''\n    min_elem = arr[0]\n    for i in range(len(arr)):\n        if min_elem > arr[i]:\n            min_elem = arr[i]\n    return min_elem\n    \ndef nth_smallest(arr, n):\n    '''\n    Write a function that takes an array and a number n and returns the nth smallest element in the array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if count == n:\n            return arr[i]\n        count += 1\n        \ndef count_occurrences(arr, target):\n    '''\n    Write a function to find the number of occurrences of a target value in the array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count += 1\n    return count\n    \ndef reverse_sub_list(arr, start, end):\n    '''\n    Write a function to reverse a sublist within the given array.\n    '''\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n    return arr\n    \ndef max_list_iterative(arr):\n    '''\n    Write a function to find the max of a list of numbers using iteration.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if max_num < arr[i]:\n            max_num = arr[i]\n    return max_num\n    \ndef max_list_recursive(arr, max):\n    '''\n    Write a function to find the max of a list of numbers using recursion.\n    '''\n    if len(arr) == 0:\n        return max\n    else:\n        if arr[0] > max:\n            max = arr[0]\n        return max_list_recursive(arr[1:], max)\n    \ndef sum_of_digits(num):\n    '''\n    Write a function to calculate the sum of digits of a given number.\n    '''\n    sum_of_digits = 0\n    while num!= 0:\n        sum_of_digits += num % 10\n        num = num // 10\n    return sum_of_digits\n    \ndef palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.lower()\n    string = string.replace(' ', '')\n    string = string.replace('\\'', '')\n    string = string.replace('-', '')\n    string = string.replace('.', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('\"', '')\n    return string == string[::-1]\n    \ndef get_largest_and_smallest(arr):\n    '''\n    Write a function to find the largest and the smallest number in an array.\n    '''\n    largest = arr[0]\n    smallest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return largest, smallest\n    \ndef highest_product(arr):\n    '''\n    Write a function to find the highest product of four adjacent numbers in a given array.\n    '''\n    max_product = 1\n    for i in range(len(arr)-3):\n        for j in range(4):\n            product = arr[i] * arr[i+j+1] * arr[i+j+2] * arr[i+j+3]\n            if product > max_product:\n                max_product = product\n    return max_product\n    \ndef find_outlier(arr):\n    '''\n    Write a function to find the 4th, 6th, 8th, and 10th largest numbers in an array.\n    '''\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    max_index += 1\n    for i in range(max_index, len(arr)):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return arr[max_index]\n    \ndef is_palindrome(string):\n    '''\n    Write a function that checks whether the given string is a palindrome or not.\n    '''\n    string = string.lower()\n    string = string.replace(' ', '')\n    string = string.replace('\\'', '')\n    string = string.replace('-', '')\n    string = string.replace('.', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('\"', '')\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef sort_colors(nums):\n    '''\n    Write a function that takes an array of sorted numbers and \n    returns a new sorted array with the same numbers, but sorted in ascending order.\n    '''\n    l = 0\n    mid = 0\n    r = len(nums) - 1\n    while mid <= r:\n        if nums[mid] == 0:\n            nums[l], nums[mid] = nums[mid], nums[l]\n            l += 1\n            mid += 1\n        elif nums[mid] == 1:\n            mid += 1\n        else:\n            nums[mid], nums[r] = nums[r], nums[mid]\n            r -= 1\n    return nums\n    \ndef min_max_stack(arr):\n    '''\n    Write a function that takes an array and returns a new array that is the result of sorting\n    the original array using a Stack.\n    '''\n    min_stack = []\n    max_stack = []\n    for i in range(len(arr)):\n        if len(min_stack) == 0 or arr[i] > min_stack[-1]:\n            min_stack.append(arr[i])\n        elif len(max_stack) == 0 or arr[i] < max_stack[-1]:\n            max_stack.append(arr[i])\n        else:\n            min_stack.pop()\n            min_stack.append(arr[i])\n    for i in range(len(min_stack)):\n        arr[i] = min_stack[i]\n    for i in range(len(max_stack)):\n        arr[i + len(min_stack)] = max_stack[i]\n    return arr\n    \ndef matrix_mul(A, B):\n    '''\n    Write a function to multiply two matrices of same dimensions, if any element of a matrix is a zero, the corresponding element of multiplied matrix must be zero too.\n    '''\n    return [[sum(a * b for a, b in zip(r1, c2)) for c2 in zip(*B)] for r1 in A]\n    \ndef min_windows(arr, w):\n    '''\n    Write a function to find the smallest subarray in the given array such that the number of unique characters in the subarray is equal to the window size.\n    '''\n    count = 0\n    start = 0\n    min_sub_arr = []\n    for i in range(len(arr)):\n        if count == w:\n            if i >= start:\n                min_sub_arr.append(arr[start:i+1])\n            start = i+1\n            count = 0\n        count += 1\n    return min_sub_arr\n    \ndef is_reverse_prime(num):\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr)-1\n    mid = 0\n    while left <= right:\n        mid = (left+right)//2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            right = mid-1\n        elif k > mid:\n            left = mid+1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += 1\n        if count == k:\n            return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if mid == k-1:\n            return arr[mid]\n        if k - 1 < mid:\n            hi = mid\n        else:\n            lo = mid\n    return arr[lo]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    while i < len(arr):\n        if k == i+1:\n            return arr[i]\n        i += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] == k:\n            return arr[mid]\n        if mid + 1 <= end and arr[mid+1] < arr[mid]:\n            start = mid + 1\n        elif mid - 1 >= start and arr[mid-1] > arr[mid]:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() if i!= 0 else x for i, x in enumerate(word.split('_')))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    underscore_count = 0\n    for letter in word:\n        if letter == \"_\":\n            underscore_count += 1\n        else:\n            camel_case += letter.title()\n            if underscore_count > 0:\n                camel_case += \"_\" + str(underscore_count) + letter.title()\n                underscore_count = 0\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Not needed\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for letter in word.split(\"_\"):\n        camel_case += letter.capitalize()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # TODO: Write your solution here\n    return \"\".join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word[0].upper() + word[1:] for word in word.split(\"_\")])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == None:\n        return None\n    else:\n        newWord = word.title()\n        spacedWord = newWord.replace('_','')\n        return spacedWord\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = \"\"\n    if len(word) > 0:\n        for i in range(0,len(word)):\n            if word[i] == \"_\":\n                res += word[i+1].upper()\n            else:\n                res += word[i].upper()\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = []\n    for i in range(1,n+1):\n        s.append(i)\n    while m > 0:\n        m -= 1\n        if s:\n            print(s.pop(0))\n        else:\n            print(s.pop())\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if (i == 1 and j == 1): \n                continue\n            if (i == 1):\n                ans += (j - 1)\n            elif (j == 1):\n                ans += (i - 1)\n            else:\n                ans += (i * j)\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        a_n = eulerian_num(n-1, m) + m\n        return a_n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(n, m)\n    if n==1 and m==1:\n        return 1\n    elif n==1 or m==1:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n*(n-1))/2\nprint(eulerian_num(4, 4)) \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    #check if the input is valid\n    if type(n) is not int or type(m) is not int:\n        raise TypeError('Input values should be integer.')\n    elif n < 0 or m < 0:\n        raise ValueError('Input values should be positive.')\n    elif n < m:\n        raise ValueError('Input values should be positive.')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # choose the smallest of 2 numbers to avoid infinite loop\n    if n > m:\n        return eulerian_num(m, n)\n    if n == 1 or m == 1:\n        return 1\n    return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    if (n == 0):\n        if (m == 0):\n            ans = 1\n        else:\n            ans = 0\n    else:\n        if (m == 0):\n            ans = 0\n        else:\n            ans = eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"input_list = {}\".format(input_list))\n    #print(\"sorting sublist\")\n    #print(\"input_list = {}\".format(input_list))\n    #print(\"input_list = {}\".format(input_list))\n    return(sorted(input_list, key=len))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    l = len(input_list)\n    while i < l:\n        l1 = []\n        l2 = []\n        j = 0\n        while j < l:\n            if j == i:\n                l1.append(input_list[i][j])\n            else:\n                l2.append(input_list[i][j])\n            j += 1\n        l1 = sorted(l1)\n        l2 = sorted(l2)\n        i += 1\n        if len(l1) == len(l2):\n            for k in range(len(l2)):\n                input_list[i][j] = l1[k]\n                j += 1\n        else:\n            print('ERROR')\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if len(input_list[i]) > 0:\n                input_list[i][j] = sorted(input_list[i][j])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each sublist\n    for x in range(0, len(input_list)):\n        # store the sublist\n        sublist = input_list[x]\n        # sort the sublist\n        sublist.sort()\n        # replace the old sublist\n        input_list[x] = sublist\n    # return the sorted list\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #sort each sublist of strings in the list of lists\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    #return the sorted list of strings\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort(key=len)\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)):\n        input_list[i].sort()\n        for j in range(1, len(input_list[i])):\n            input_list[i][j] = input_list[i][j].lower()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(input_list)\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for ele in lst:\n        if ele:\n            cnt += 1\n    return cnt\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n    \nif __name__ == \"__main__\":\n    lst = [True, False, True, False]\n    print(count(lst))\n    \n    '''\n    Output: 2\n    '''\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if(lst[i] == True):\n            count = count + 1\n    print(\"The count of True values: \",count)\n    \n    \ndef count_even(lst):\n    '''\n    Write a python function to count even numbers in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if(lst[i]%2 == 0):\n            count = count + 1\n    print(\"The count of even numbers: \",count)\n    \n    \ndef count_odd(lst):\n    '''\n    Write a python function to count odd numbers in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if(lst[i]%2!= 0):\n            count = count + 1\n    print(\"The count of odd numbers: \",count)\n    \n    \ndef multiply_by_5(lst):\n    '''\n    Write a python function to multiply all the elements of the given list by 5.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i] * 5\n    print(lst)\n    \n    \ndef multiply_by_5_recursive(lst):\n    '''\n    Write a python function to multiply all the elements of the given list by 5.\n    '''\n    for i in range(len(lst)):\n        if(i!= 0):\n            lst[i] = lst[i] * 5\n    print(lst)\n    \n    \ndef multiply_by_5_recursive_with_loop(lst):\n    '''\n    Write a python function to multiply all the elements of the given list by 5.\n    '''\n    for i in range(len(lst)):\n        if(i == 0):\n            lst[i] = lst[i] * 5\n        else:\n            lst[i] = lst[i] * 5\n    print(lst)\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    for i in range(len(lst)):\n        if(lst.count(lst[i]) > 1):\n            lst.remove(lst[i])\n    print(lst)\n    \n    \ndef remove_duplicates_with_set(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst = set(lst)\n    print(lst)\n    \n    \ndef remove_duplicates_with_set_and_pop(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst = set(lst)\n    for i in lst:\n        lst.discard(i)\n    print(lst)\n    \n    \ndef remove_duplicates_with_set_and_pop_with_another_set(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        lst1.add(i)\n    for i in lst:\n        lst2.add(i)\n    lst = lst1.difference(lst2)\n    print(lst)\n    \n    \ndef remove_duplicates_with_another_set(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        if(i not in lst1):\n            lst1.add(i)\n        else:\n            lst2.add(i)\n    print(lst1)\n    print(lst2)\n    \n    \ndef remove_duplicates_with_another_set_using_in_operator(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        lst1.add(i)\n        lst2.add(i)\n    print(lst1)\n    print(lst2)\n    \n    \ndef remove_duplicates_with_another_set_using_in_operator_and_remove_other_elements(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        lst1.add(i)\n        lst2.add(i)\n    lst1.remove(lst[0])\n    print(lst1)\n    print(lst2)\n    \n    \ndef remove_duplicates_with_another_set_using_in_operator_and_remove_other_elements_and_count(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        lst1.add(i)\n        lst2.add(i)\n    lst1.remove(lst[0])\n    print(lst1)\n    print(lst2)\n    count = 0\n    for i in lst:\n        count = count + 1\n    print(\"The number of elements left after removal of duplicates: \",count)\n    \n    \ndef remove_duplicates_with_another_set_using_in_operator_and_remove_other_elements_and_count_with_list(lst):\n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    lst1 = set()\n    lst2 = set()\n    for i in lst:\n        lst1.add(i)\n        lst2.add(i)\n    lst1.remove(lst[0])\n    print(lst1)\n    print(lst2)\n    count = 0\n    for i in lst:\n        count = count + 1\n    print(\"The number of elements left after removal of duplicates: \",count)\n    print(lst1)\n    \n    \ndef reverse_string(lst):\n    '''\n    Write a python function to reverse a string.\n    '''\n    for i in range(len(lst)):\n        lst.insert(0,lst.pop())\n    print(lst)\n    \n    \ndef reverse_string_with_reverse_function(lst):\n    '''\n    Write a python function to reverse a string using function.\n    '''\n    lst = lst[::-1]\n    print(lst)\n    \n    \ndef remove_elements_from_a_list_while_retaining_order(lst):\n    '''\n    Write a python function to remove all the duplicate elements in the given list.\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if(lst.count(i)>1):\n            lst.remove(i)\n    print(lst)\n    \n    \ndef remove_elements_from_a_list_while_retaining_order_with_key(lst):\n    '''\n    Write a python function to remove all the duplicate elements in the given list.\n    '''\n    lst.sort()\n    for i in lst:\n        if(lst.count(i)>1):\n            lst.remove(i)\n    print(lst)\n    \n    \ndef remove_elements_from_a_list_while_retaining_order_with_key_and_func(lst):\n    '''\n    Write a python function to remove all the duplicate elements in the given list.\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if(lst.count(i)>1):\n            lst.remove(i)\n    print(lst"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    print(\"The count of true booleans in the given list is: \", count)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst1=list(filter(bool, lst))\n    print(\"Count of True in given list : \",len(lst1))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup = tuple(test_list) + (test_tup, )\n    return tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    \n    \nif __name__ == '__main__':\n    list = [1,2,3]\n    tup = (4,5,6)\n    test_list = add_lists(list, tup)\n    print(test_list)\n    \n    list = [\"Hello\", \"Python\"]\n    tup = (\"World\", \"Java\")\n    test_list = add_lists(list, tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        for j in test_tup:\n            test_tup.append(i)\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_tup[i].append(test_list[i][j])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def sort_list(lst):\n        lst.sort()\n        return lst\n    num1 = sort_list(num1)\n    num2 = sort_list(num2)\n    num3 = sort_list(num3)\n    if num1 == [] and num2 == [] and num3 == []:\n        return None\n    if num1 == []:\n        return num2\n    if num2 == []:\n        return num1\n    if num3 == []:\n        return num1 + num2\n    new_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num3[k]:\n            new_list.append(num1[i])\n            i+=1\n        elif num2[j] <= num3[k]:\n            new_list.append(num2[j])\n            j+=1\n        else:\n            new_list.append(num3[k])\n            k+=1\n    if num1[i:]!= [] and num2[j:]!= [] and num3[k:]!= []:\n        new_list += num1[i:]\n        new_list += num2[j:]\n        new_list += num3[k:]\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #create heap\n    pq = []\n    for x in num1:\n        heapq.heappush(pq,x)\n    for x in num2:\n        heapq.heappush(pq,x)\n    for x in num3:\n        heapq.heappush(pq,x)\n    \n    #create output list\n    output = []\n    while len(pq)>0:\n        output.append(heapq.heappop(pq))\n    return output\n    \ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #create heap\n    pq = []\n    for x in num1:\n        heapq.heappush(pq,x)\n    for x in num2:\n        heapq.heappush(pq,x)\n    for x in num3:\n        heapq.heappush(pq,x)\n    \n    #create output list\n    output = []\n    while len(pq)>0:\n        if len(output)==0 or pq[0]<output[-1]:\n            output.append(pq[0])\n            pq.pop(0)\n        else:\n            output.append(output[-1])\n            pq.pop()\n    return output\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while heapq.heap and heapq.heap[0] < 0:\n        heapq.heappop(num1)\n        heapq.heappop(num2)\n        heapq.heappop(num3)\n    while heapq.heap:\n        heapq.heappop(num1)\n        heapq.heappop(num2)\n        heapq.heappop(num3)\n    if num1!= None:\n        for i in range(len(num1)):\n            num.append(num1[i])\n    if num2!= None:\n        for i in range(len(num2)):\n            num.append(num2[i])\n    if num3!= None:\n        for i in range(len(num3)):\n            num.append(num3[i])\n    return num\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # code here\n    num3=num3.copy()\n    merge=[]\n    for i in range(len(num1)):\n        merge.append(num1[i])\n    for i in range(len(num2)):\n        merge.append(num2[i])\n    for i in range(len(num3)):\n        merge.append(num3[i])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    merged = []\n    while len(num1) > 0 and len(num2) > 0:\n        if num1[0] > num2[0]:\n            merged.append(num2.pop(0))\n        else:\n            merged.append(num1.pop(0))\n    merged += num1 + num2\n    merged += num3\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1 = sorted(num1)\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while(num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3)):\n        if num1[num1_index] < num2[num2_index]:\n            merged_list.append(num1[num1_index])\n            num1_index += 1\n        elif num2[num2_index] < num3[num3_index]:\n            merged_list.append(num2[num2_index])\n            num2_index += 1\n        else:\n            merged_list.append(num3[num3_index])\n            num3_index += 1\n    merged_list = merged_list + num1[num1_index:] + num2[num2_index:] + num3[num3_index:]\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i,j,k=0,0,0\n    arr = []\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]:\n            arr.append(num1[i])\n            i+=1\n        else:\n            arr.append(num2[j])\n            j+=1\n    while i<len(num1):\n        arr.append(num1[i])\n        i+=1\n    while j<len(num2):\n        arr.append(num2[j])\n        j+=1\n    while k<len(num3):\n        arr.append(num3[k])\n        k+=1\n    return arr\n        \ndef merge_sorted_heap_list(arr,k):\n    '''\n    Write a function to merge k sorted lists into one sorted list.\n    '''\n    import heapq\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        arr_heap = []\n        for i in range(n):\n            arr_heap.append((arr[i],i))\n        heapq.heapify(arr_heap)\n        while len(arr_heap)>1:\n            res = heapq.heappop(arr_heap)\n            arr[k] = res[0]\n            k+=1\n            if k<n:\n                res = heapq.heappop(arr_heap)\n                arr[k] = res[0]\n                k+=1\n        return arr[0]\n        \ndef merge_sorted_list_brute_force(arr1,arr2,arr3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    Brute force approach with O(n*m*n) complexity.\n    '''\n    i,j,k,dummy = 0,0,0,arr1\n    while i<len(arr1) and j<len(arr2) and k<len(arr3):\n        if arr1[i]<arr2[j]:\n            dummy.append(arr1[i])\n            i+=1\n        else:\n            dummy.append(arr2[j])\n            j+=1\n    while i<len(arr1):\n        dummy.append(arr1[i])\n        i+=1\n    while j<len(arr2):\n        dummy.append(arr2[j])\n        j+=1\n    while k<len(arr3):\n        dummy.append(arr3[k])\n        k+=1\n    return dummy\n        \ndef merge_sorted_list_with_merge_counting(arr1,arr2,arr3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    i,j,k,dummy = 0,0,0,arr1\n    while i<len(arr1) and j<len(arr2) and k<len(arr3):\n        if arr1[i]<arr2[j]:\n            dummy.append(arr1[i])\n            i+=1\n        else:\n            dummy.append(arr2[j])\n            j+=1\n    while i<len(arr1):\n        dummy.append(arr1[i])\n        i+=1\n    while j<len(arr2):\n        dummy.append(arr2[j])\n        j+=1\n    while k<len(arr3):\n        dummy.append(arr3[k])\n        k+=1\n    return dummy\n        \ndef merge_sorted_list_with_merge_using_heap(arr1,arr2,arr3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    import heapq\n    n = len(arr1)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr1\n    else:\n        arr_heap = []\n        arr1_index = 0\n        arr2_index = 0\n        arr3_index = 0\n        while arr1_index<n and arr2_index<n and arr3_index<n:\n            if arr1[arr1_index]<arr2[arr2_index]:\n                arr_heap.append(arr1[arr1_index])\n                arr1_index+=1\n            else:\n                arr_heap.append(arr2[arr2_index])\n                arr2_index+=1\n        while arr1_index<n:\n            arr_heap.append(arr1[arr1_index])\n            arr1_index+=1\n        while arr2_index<n:\n            arr_heap.append(arr2[arr2_index])\n            arr2_index+=1\n        while arr3_index<n:\n            arr_heap.append(arr3[arr3_index])\n            arr3_index+=1\n        return arr_heap\n            \ndef merge_sorted_list_with_merge_using_heap_using_priority_queue(arr1,arr2,arr3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    import heapq\n    n = len(arr1)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr1\n    else:\n        arr1_heap = []\n        arr2_heap = []\n        arr3_heap = []\n        arr1_index = 0\n        arr2_index = 0\n        arr3_index = 0\n        while arr1_index<n and arr2_index<n and arr3_index<n:\n            if arr1[arr1_index]<arr2[arr2_index]:\n                arr1_heap.append(arr1[arr1_index])\n                arr1_index+=1\n            else:\n                arr1_heap.append(arr2[arr2_index])\n                arr2_heap.append(arr1[arr1_index])\n                arr2_index+=1\n        while arr1_index<n:\n            arr1_heap.append(arr1[arr1_index])\n            arr1_index+=1\n        while arr2_index<n:\n            arr1_heap.append(arr2[arr2_index])\n            arr2_heap.append(arr1[arr1_index])\n            arr2_index+=1\n        while arr3_index<n:\n            arr1_heap.append(arr3[arr3_index])\n            arr3_heap.append(arr1[arr1_index])\n            arr3_index+=1\n        while len(arr1_heap)>0:\n            heapq.heappush(arr1_heap,arr1_heap[0])\n            arr1_heap.pop(0)\n        while len(arr2_heap)>0:\n            heapq.heappush(arr2_heap,arr2_heap[0])\n            arr2_heap.pop(0)\n        while len(arr3_heap)>0:\n            heapq.heappush(arr3_heap,arr3_heap[0])\n            arr3_heap.pop(0)\n        return arr1_heap+arr2_heap+arr3_heap\n        \ndef merge_sorted_list_with_merge_using_merge_counting(arr1,arr2,arr3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    i,j,k,dummy = 0,0,0,arr1\n    while i<len(arr1) and j<len(arr2) and k<len(arr3):\n        if arr1[i]<arr2[j]:\n            dummy.append(arr1[i])\n            i+=1\n        else:\n            dummy.append(arr2[j])\n            j+=1\n    while i<len(arr1):\n        dummy.append(arr1[i])\n        i+=1\n    while j<len(arr2):\n        dummy.append(arr2[j])\n        "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    #new_list=[]\n    #temp_num1=num1.copy()\n    #temp_num2=num2.copy()\n    #temp_num3=num3.copy()\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    list_str = list(s)\n    for i in range(n):\n        str_copy = list_str[:]\n        for j in range(len(str_copy)):\n            str_copy[(j + 1) % 2] = str_copy[j]\n        list_str = str_copy[:]\n    return list_str\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #convert the string to a list\n    s = list(s)\n    odd_counter = 0\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate(s)\n        #compare the values and increase the counter if the value is not equal\n        for j in range(len(s)):\n            if s[j]!= '0':\n                odd_counter += 1\n                break\n    return odd_counter\n        \n    \ndef rotate(s):\n    '''\n    rotate the string s by n times\n    '''\n    #store the result\n    s_new = []\n    #append the first value to the result\n    s_new.append(s.pop(0))\n    #append the remaining values\n    for i in range(len(s)-1):\n        s_new.append(s.pop(0))\n    return s_new\n    \ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    #convert the string to a list\n    s = list(s)\n    even_counter = 0\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate(s)\n        #compare the values and increase the counter if the value is not equal\n        for j in range(len(s)):\n            if s[j]!= '1':\n                even_counter += 1\n                break\n    return even_counter\n    \n    \ndef rotate_binary_string(s,n):\n    '''\n    rotate the binary string s by n times. \n    '''\n    #convert the string to a list\n    s = list(s)\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate_binary(s)\n    return ''.join(s)\n    \ndef rotate_binary(s):\n    '''\n    rotate the binary string s by n times\n    '''\n    #convert the string to a list\n    s = list(s)\n    #reverse the list\n    s.reverse()\n    #append the first value to the result\n    s.append(s.pop(0))\n    #append the remaining values\n    for i in range(len(s)-1):\n        s.append(s.pop(0))\n    return s\n    \ndef maximum(s,n):\n    '''\n    write a function to find the maximum number of numbers in an array of strings s in the given number of rotations\n    '''\n    #convert the string to a list\n    s = list(s)\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate(s)\n        #count the number of strings with an odd value\n        odd_count = 0\n        for j in range(len(s)):\n            if s[j]!= '0':\n                odd_count += 1\n                break\n        #count the number of strings with an even value\n        even_count = 0\n        for j in range(len(s)):\n            if s[j]!= '1':\n                even_count += 1\n                break\n    #return the maximum of the counts\n    return max(odd_count,even_count)\n    \n    \ndef rotate_binary_string_count(s,n):\n    '''\n    rotate the binary string s by n times and count the number of strings in s.\n    '''\n    #convert the string to a list\n    s = list(s)\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate_binary(s)\n    #count the number of strings with an odd value\n    odd_count = 0\n    for j in range(len(s)):\n        if s[j]!= '0':\n            odd_count += 1\n            break\n    #count the number of strings with an even value\n    even_count = 0\n    for j in range(len(s)):\n        if s[j]!= '1':\n            even_count += 1\n            break\n    return max(odd_count,even_count)\n    \n    \ndef part_two(s,n):\n    '''\n    write a function to find the number of rotations that yields the exact binary string s.\n    '''\n    #convert the string to a list\n    s = list(s)\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate(s)\n        #count the number of strings with an odd value\n        odd_count = 0\n        for j in range(len(s)):\n            if s[j]!= '0':\n                odd_count += 1\n                break\n        #count the number of strings with an even value\n        even_count = 0\n        for j in range(len(s)):\n            if s[j]!= '1':\n                even_count += 1\n                break\n    #return the maximum of the counts\n    return max(odd_count,even_count)\n    \n    \ndef part_two_count(s,n):\n    '''\n    rotate the binary string s by n times and count the number of strings.\n    '''\n    #convert the string to a list\n    s = list(s)\n    #rotate the string by n times\n    for i in range(n):\n        s = rotate_binary(s)\n        #count the number of strings with an odd value\n        odd_count = 0\n        for j in range(len(s)):\n            if s[j]!= '0':\n                odd_count += 1\n                break\n        #count the number of strings with an even value\n        even_count = 0\n        for j in range(len(s)):\n            if s[j]!= '1':\n                even_count += 1\n                break\n    return max(odd_count,even_count)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    s1=\"\"\n    count=0\n    for i in range(n):\n        for j in range(len(s)):\n            if(s[j]=='1'):\n                s1=s1+'0'\n            else:\n                s1=s1+'1'\n        s=s1\n        s1=\"\"\n        if(int(s)%2!=0):\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    temp_s=''\n    #str_count=0\n    count=0\n    for i in range(0,n):\n        temp_s=s\n        #str_count+=1\n        for i in range(0,len(s)):\n            if temp_s[i] == '1':\n                temp_s=temp_s[:i]+'0'+temp_s[i+1:]\n        if '1' not in temp_s:\n            count+=1\n        \n        s=temp_s\n        #print(str_count,\" : \",s)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if int(s[j])%2!= 0:\n                c += 1\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #convert to binary string \n    #convert to binary \n    s=bin(int(s,2))[2:]\n    n=int(n)\n    #make a dummy list\n    l=[]\n    for i in range(n):\n        #print(s)\n        #print(int(s,2))\n        s=bin(int(s,2)+1)[2:]\n        if s not in l:\n            l.append(s)\n    l=len(l)\n    return l\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s=str(s)\n    if n == 0: \n        return 0\n    # print(s)\n    if n%2 == 0: \n        return odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n-1) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #find the length of s \n    length = len(s)\n    #increase n by 1 to avoid index error\n    n = n + 1\n    #create a list to store the first half of string s\n    first_half = s[:length//2]\n    #create a list to store the second half of string s\n    second_half = s[length//2:]\n    #create a list to store the result of rotating the first half\n    result_of_first_half = []\n    #convert the first half to binary\n    first_half_in_binary = binary_conversion(first_half)\n    #create a list to store the result of rotating the second half\n    result_of_second_half = []\n    #convert the second half to binary\n    second_half_in_binary = binary_conversion(second_half)\n    #for loop to find the result of rotating each element of first half by n\n    for i in range(0,n):\n        for j in range(0,length//2):\n            result_of_first_half.append(first_half_in_binary[j])\n            result_of_first_half.append(first_half_in_binary[j + length//2])\n    #for loop to find the result of rotating each element of second half by n\n    for i in range(0,n):\n        for j in range(0,length//2):\n            result_of_second_half.append(second_half_in_binary[j])\n            result_of_second_half.append(second_half_in_binary[j + length//2])\n    #reverse the result of rotating each element of second half\n    result_of_second_half.reverse()\n    #convert the result of rotating each element of first half to integer\n    integer_first_half = []\n    for i in result_of_first_half:\n        integer_first_half.append(int(i,2))\n    #convert the result of rotating each element of second half to integer\n    integer_second_half = []\n    for i in result_of_second_half:\n        integer_second_half.append(int(i,2))\n    #convert the result of rotating each element of first half to binary\n    binary_first_half = []\n    for i in integer_first_half:\n        binary_first_half.append(bin(i)[2:])\n    #convert the result of rotating each element of second half to binary\n    binary_second_half = []\n    for i in integer_second_half:\n        binary_second_half.append(bin(i)[2:])\n    #create a list to store the result of rotating s\n    result = []\n    #for loop to find the result of rotating s by n\n    for i in range(0,n):\n        for j in range(0,length//2):\n            result.append(binary_first_half[j])\n            result.append(binary_second_half[j])\n    #convert the result of rotating s to integer\n    integer_result = []\n    for i in result:\n        integer_result.append(int(i,2))\n    #convert the result of rotating s to binary\n    binary_result = []\n    for i in integer_result:\n        binary_result.append(bin(i)[2:])\n    #convert binary_result to integer to compare\n    binary_result_converted = []\n    for i in binary_result:\n        binary_result_converted.append(int(i,2))\n    #print(first_half_in_binary)\n    #print(second_half_in_binary)\n    #print(integer_first_half)\n    #print(integer_second_half)\n    #print(integer_result)\n    #print(binary_result)\n    #print(binary_result_converted)\n    #check if each element of result is equal to first half of string s\n    if result == first_half:\n        return length\n    else:\n        return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('1')*n\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_str = str(bin(n))[2:]\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            binary_str = binary_str[i:] + binary_str[:i]\n    s = s[::-1]\n    binary_str = binary_str[::-1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == binary_str[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return False\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    \n    common_elements = []\n    for sublist in nestedlist:\n        if common_in_nested_lists(sublist) == True:\n            common_elements.append(sublist[0])\n    \n    if common_elements == []:\n        return False\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import deque\n    if len(nestedlist) == 0:\n        return []\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i == j:\n                continue\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for lst in nestedlist:\n        if len(lst) == 1:\n            res.append(lst[0])\n        elif isinstance(lst[0], list):\n            res.extend(common_in_nested_lists(lst))\n        else:\n            return []\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    common_elements = []\n    \n    for i in range(0, len(nestedlist)):\n        if not nestedlist[i]:\n            continue\n        if common_elements == [] and not nestedlist[i][0]:\n            return common_elements\n        for j in range(0, len(nestedlist[i])):\n            if common_elements == [] and not nestedlist[i][j]:\n                return common_elements\n            if nestedlist[i][j] in common_elements:\n                continue\n            elif nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n        \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l1 in nestedlist:\n        for l2 in nestedlist:\n            if l1 is l2:\n                continue\n            common = True\n            for element in l1:\n                if element not in l2:\n                    common = False\n                    break\n            if common:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    count = 0\n    for i in nestedlist:\n        if isinstance(i, list):\n            count = common_in_nested_lists(i) + 1\n    return max(count, 1)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) == 1:\n            common.append(nestedlist[i][0])\n        elif len(nestedlist[i]) == 2:\n            common.append(nestedlist[i][0])\n            common.append(nestedlist[i][1])\n        elif len(nestedlist[i]) == 3:\n            common.append(nestedlist[i][0])\n            common.append(nestedlist[i][1])\n            common.append(nestedlist[i][2])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    dict_of_lists = {}\n    for x in nestedlist:\n        if isinstance(x, list):\n            for i in x:\n                if i not in dict_of_lists:\n                    dict_of_lists[i] = 1\n                else:\n                    dict_of_lists[i] += 1\n    return dict_of_lists\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in nestedlist:\n        if type(i) == list:\n            for j in i:\n                list1.append(j)\n        else:\n            list2.append(i)\n    \n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common = common.union(common,set(sublist))\n    return comn\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        val = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if(isinstance(text,str)):\n        try:\n            int(text)\n        except ValueError:\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i].keys()):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if (len(list1) == 0):\n        return True\n    elif (len(list1)!= 0):\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in range(0, len(nums)):\n        res = res + nums[i]\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    count = 0\n    s = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n        else:\n            s += nums[i]\n    if count == len(nums):\n        return s\n    else:\n        return -1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y : x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(str(nums[0]) + str(nums[1]) + str(nums[2]) + str(nums[3]) + str(nums[4]) + str(nums[5]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(0, len(test_list)):\n        for y in range(0, len(test_list[x])):\n            try:\n                test_list[x][y] = float(test_list[x][y])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    \n    for element in range(len(test_list)):\n        try:\n            test_list[element] = float(test_list[element])\n        except ValueError:\n            pass\n    return test_list\n            \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            try:\n                test_list[i][j]=float(test_list[i][j])\n            except:\n                print(\"Value: \" + str(test_list[i][j]) + \" is not a number.\")\n                test_list[i][j]=0.0\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for column in range(len(test_list[row])):\n            if type(test_list[row][column]) == str:\n                test_list[row][column] = float(test_list[row][column])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            try:\n                test_list[i][j]=float(test_list[i][j])\n            except:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except:\n            continue\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        test_list[i] = [float(j) for j in test_list[i]]\n        output_list.append(test_list[i])\n    return output_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list[:] = list(map(float, test_list))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        if isinstance(element, int) or isinstance(element, float):\n            continue\n        else:\n            try:\n                element = float(element)\n            except:\n                print(f'not convertable to float')\n                return False\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sub_list in test_list:\n        try:\n            float(sub_list[0])\n            new_list.append(sub_list)\n        except ValueError:\n            continue\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip()\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(\" \", \"\")\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    my_list = string.split()\n    return my_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \n    \ndef reverse_list(list_of_lists): \n    '''\n    Write a function to reverse the list.\n    '''\n    return list_of_lists[::-1]\n    \n    \ndef add_string_list(string_list, add_list): \n    '''\n    Write a function to add a string and list together.\n    '''\n    return string_list + add_list\n    \n    \ndef remove_list_of_string(list_of_strings, string_to_remove): \n    '''\n    Write a function to remove the string from a list of strings.\n    '''\n    return list(filter(lambda x: x!= string_to_remove, list_of_strings))\n    \n    \ndef convert_str_to_int(str_with_int): \n    '''\n    Write a function to convert a string with int value in it to an int.\n    '''\n    return int(str_with_int)\n    \n    \ndef remove_even_from_list(list_to_remove_even): \n    '''\n    Write a function to remove even number from a list of integers.\n    '''\n    return list(filter(lambda x: x%2!= 0, list_to_remove_even))\n    \n    \ndef generate_number_of_letters_in_string(string): \n    '''\n    Write a function to generate number of letters in a string.\n    '''\n    return len(string)\n    \n    \ndef reverse_list_odd_even(list_of_odd_and_even): \n    '''\n    Write a function to reverse the list of even and odd numbers.\n    '''\n    return list(filter(lambda x: x%2 == 0, list_of_odd_and_even)) + list(filter(lambda x: x%2 == 1, list_of_odd_and_even))\n    \n    \ndef string_to_list_even_odd(string): \n    '''\n    Write a function to split the string into even and odd numbers.\n    '''\n    return string.split(' ')\n    \n    \ndef remove_all_occurences_of_string(string, string_to_remove): \n    '''\n    Write a function to remove all occurences of a string in the list.\n    '''\n    return list(filter(lambda x: x!= string_to_remove, string))\n    \n    \ndef find_position_of_substring(string, substring): \n    '''\n    Write a function to find the position of substring in string.\n    '''\n    return string.find(substring)\n    \n    \ndef replace_strings(string, replacement_string, replace_string): \n    '''\n    Write a function to replace strings in a given string.\n    '''\n    return string.replace(replace_string, replacement_string)\n    \n    \ndef count_length_of_string(string): \n    '''\n    Write a function to count the length of string.\n    '''\n    return len(string)\n    \n    \ndef print_list(list_to_print): \n    '''\n    Write a function to print a list.\n    '''\n    return print(list_to_print)\n    \n    \ndef is_palindrome(string): \n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return string == reverse_string(string)\n    \n    \ndef swap_position(list_to_swap, position_to_swap_with, swap_with): \n    '''\n    Write a function to swap two position in a list.\n    '''\n    return list_to_swap[:position_to_swap_with] + swap_with + list_to_swap[position_to_swap_with + 1:]\n    \n    \ndef has_palindrome_permutation(string): \n    '''\n    Write a function to check whether a given string has palindrome permutation or not.\n    '''\n    return False if not is_palindrome(string) else True\n    \n    \ndef is_pallindrome_permutation(string): \n    '''\n    Write a function to check whether a given string is a palindrome permutation or not.\n    '''\n    if has_palindrome_permutation(string) and len(string) == len(set(string)):\n        return True\n    return False\n    \n    \ndef sort_list_of_strings(list_of_strings): \n    '''\n    Write a function to sort the list of strings.\n    '''\n    return list_of_strings.sort()\n    \n    \ndef next_per_dup(list_to_dup): \n    '''\n    Write a function to get the next permutation after a given permutation.\n    '''\n    return next_permutation(list_to_dup)\n    \n    \ndef next_permutation(list_to_dup): \n    '''\n    Write a function to get the next permutation after a given permutation.\n    '''\n    if len(list_to_dup) < 2:\n        return list_to_dup\n    if list_to_dup[-1] < list_to_dup[-2]:\n        return next_permutation(list_to_dup[:-1])\n    for i in range(len(list_to_dup) - 1, 0, -1):\n        if list_to_dup[i - 1] < list_to_dup[i]:\n            break\n    for j in range(i, len(list_to_dup)):\n        if list_to_dup[j] > list_to_dup[i - 1]:\n            break\n    list_to_dup[i - 1], list_to_dup[j] = list_to_dup[j], list_to_dup[i - 1]\n    return list_to_dup\n    \n    \ndef reverse_each_word_in_string(string_to_reverse): \n    '''\n    Write a function to reverse each word in the string.\n    '''\n    return''.join(reversed(string_to_reverse.split()))\n    \n    \ndef reverse_every_two_words_in_string(string_to_reverse): \n    '''\n    Write a function to reverse every even words in the string.\n    '''\n    return''.join(reversed(string_to_reverse.split(' ')))\n    \n    \ndef remove_last_occurrence(string_to_remove, string_to_remove_from): \n    '''\n    Write a function to remove the last occurrence of a string in a string.\n    '''\n    return string_to_remove.rstrip(string_to_remove_from) + string_to_remove[:-1]\n    \n    \ndef reverse_string_from_index_to_index(string_to_reverse, start_index, end_index): \n    '''\n    Write a function to reverse a string from start_index to end_index inclusive.\n    '''\n    return string_to_reverse[:start_index] + string_to_reverse[end_index + 1:]\n    \n    \ndef remove_last_occurrence_of_string_in_string(string_to_remove, string_to_remove_from): \n    '''\n    Write a function to remove the last occurrence of a string in a string.\n    '''\n    return string_to_remove.rstrip(string_to_remove_from)\n    \n    \ndef remove_last_occurrence_of_string_in_string_from_index(string_to_remove, string_to_remove_from, start_index, end_index): \n    '''\n    Write a function to remove the last occurrence of a string in a string.\n    '''\n    return string_to_remove.rstrip(string_to_remove_from)[:start_index] + string_to_remove.rstrip(string_to_remove_from)[end_index + 1:]\n    \n    \ndef remove_nth_occurrence_of_string_in_string(string_to_remove, string_to_remove_from, index): \n    '''\n    Write a function to remove the nth occurrence of a string i"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    if end > start:\n        mid = (start + end) // 2\n        while (start <= end):\n            if (mid < start or mid > end):\n                result = mid\n                break\n            if (arr[start] == arr[mid]):\n                start = mid + 1\n            elif (arr[mid] == arr[end]):\n                end = mid - 1\n            else:\n                mid = (start + end) // 2\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # return arr[-1]\n    seen = set()\n    for i in range(len(arr)):\n        if arr[i] not in seen:\n            seen.add(arr[i])\n        else:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first = arr[0]\n    last = arr[0]\n    for i in arr:\n        if i > first and i < last:\n            last = i\n    return last\n    \nif __name__ == \"__main__\":\n    arr = list(map(int,input().split()))\n    print(search(arr))"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    s = set(arr)\n    for i in range(n):\n        if arr[i] in s:\n            s.remove(arr[i])\n    return s.pop()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Test case\n    # arr = [1, 2, 2, 4, 5, 5, 6, 6, 6, 7, 8, 8]\n    # arr = [1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = [1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return sorted(arr)[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = set()\n    for i in arr:\n        if i in s:\n            return i\n        else:\n            s.add(i)\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    \n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i - 1]:\n            i += 1\n        else:\n            return arr[i]\n            \n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    min_val = 0\n    for i in list1:\n        if i[0] > max_val:\n            max_val = i[0]\n        if i[1] > max_val:\n            max_val = i[1]\n    for i in list1:\n        if i[0] < min_val:\n            min_val = i[0]\n        if i[1] < min_val:\n            min_val = i[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # sort the list\n    sorted_list = sorted(list1)\n    \n    # create the list of maximum absolute product\n    max_product = 1\n    for i in range(len(sorted_list)-1):\n        for j in range(i+1,len(sorted_list)):\n            max_product = max(max_product, sorted_list[i][0] * sorted_list[j][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                max_product = max(max_product, max(list1[i][0]*list1[i][1], list1[j][0]*list1[j][1]))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = -2147483647\n    for i in list1:\n        if i[0] > max_num:\n            max_num = i[0]\n        if i[1] > max_num:\n            max_num = i[1]\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = -99999\n    if list1 == None:\n        return max\n    for i in range(len(list1) - 1):\n        max = max(max, max_product_tuple_helper(list1[i], list1[i + 1]))\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -1\n    for i in range(len(list1)):\n        if i == 0:\n            max_prod = list1[i][0]*list1[i][1]\n            continue\n        if max_prod < list1[i][0]*list1[i][1]:\n            max_prod = list1[i][0]*list1[i][1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    if len(list1) == 0:\n        return (0,0)\n    if len(list1) == 1:\n        return (list1[0][0],list1[0][1])\n    \n    if len(list1) == 2:\n        if list1[0][0] < 0 and list1[0][1] < 0 and list1[1][0] < 0 and list1[1][1] < 0:\n            return (max(list1[0][0],list1[0][1]),max(list1[1][0],list1[1][1]))\n        elif list1[0][0] > 0 and list1[0][1] > 0 and list1[1][0] > 0 and list1[1][1] > 0:\n            return (min(list1[0][0],list1[0][1]),min(list1[1][0],list1[1][1]))\n        else:\n            return (max(list1[0][0],list1[0][1]),max(list1[1][0],list1[1][1]))\n    \n    max1 = list1[0]\n    max2 = list1[1]\n    for i in range(len(list1)):\n        if max1[0] < max2[0]:\n            max1 = list1[i]\n        elif max1[0] > max2[0]:\n            max2 = list1[i]\n        if max1[1] < max2[1]:\n            max1 = list1[i]\n        elif max1[1] > max2[1]:\n            max2 = list1[i]\n    \n    return (max(max1[0],max1[1]),min(max2[0],max2[1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    n = len(list1)\n    if n == 0:\n        return 0\n    max_prod = list1[0]\n    min_prod = list1[0]\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if list1[j] >= 0:\n            max_prod = max(max_prod, list1[j])\n        elif list1[j] < 0:\n            min_prod = min(min_prod, list1[j])\n        j += 1\n        if j == n:\n            break\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if list1[i] >= 0:\n            min_prod = min(min_prod, list1[i])\n        elif list1[i] < 0:\n            max_prod = max(max_prod, list1[i])\n        i += 1\n        if i == n:\n            break\n    return max(max_prod, min_prod)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = list(map(tuple, list1))\n    tuple_list.sort(key=lambda x: x[0])\n    tuple_list.sort(key=lambda x: x[1])\n    max_product = 0\n    for i in range(len(tuple_list)):\n        if tuple_list[i][0]!= tuple_list[i][1]:\n            if tuple_list[i][0] > tuple_list[i][1]:\n                max_product = max(max_product, tuple_list[i][1] * tuple_list[i][0])\n            else:\n                max_product = max(max_product, tuple_list[i][0] * tuple_list[i][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0,len(list1),2):\n        product = max(list1[i],list1[i+1]) * max(list1[i],list1[i+1])\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for x in range(2, limit+1):\n        sum_of_divisors = sum(set(list(range(1, x+1))).difference({x, x%x}))\n        if sum_of_divisors == x and x!= sum_of_divisors:\n            amicables.append(x)\n    return sum(amicables)"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for x in range(1, limit+1):\n        y = 0\n        for x in range(1, x):\n            if x + y == x:\n                y += 1\n            elif x + y == x*x:\n                amicables.append(x)\n    print(sum(amicables))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit):\n        sum_a = 0\n        sum_b = 0\n        if i in find_amicable_numbers(i, sum_b) and i in find_amicable_numbers(sum_b, sum_a):\n            sum_amicable += i\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_dict = {}\n    for i in range(1, limit+1):\n        sum = 0\n        j = i\n        while i!= j:\n            if (i, j) in amicable_numbers_dict:\n                sum += j\n            j += 1\n        if sum == 0:\n            amicable_numbers_dict[i] = i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit):\n        sum_of_divisors = sum(\n            [int(j) for j in range(1, i) if i % j == 0]\n            )\n        sum_of_divisors_plus_1 = sum(\n            [int(j) for j in range(1, i+1) if i % j == 0]\n            )\n        if sum_of_divisors_plus_1 == sum_of_divisors:\n            amicable.append(i)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        total_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                if sum + j == i and j!= i:\n                    sum += i\n        if sum == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        amicable_sum += i\n        for j in range(i+1, limit):\n            if i + j == j + i:\n                amicable_sum -= i\n                break\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for num in range(1, limit):\n        sum_divisors = 0\n        for div in range(1, num):\n            if num % div == 0 and sum_divisors == 0 and num!= div:\n                sum_divisors = num + div\n                break\n        if sum_divisors == 0:\n            amicable_nums.append(num)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum += i\n        for j in range(2, i):\n            if i % j == 0:\n                if i == j:\n                    pass\n                else:\n                    sum -= i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_num_list = list()\n    amicable_num_list_2 = list()\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        for j in range(i, limit):\n            if i + j == limit:\n                sum += i\n                amicable_num_list.append(i)\n            if j + i == limit:\n                sum += j\n                amicable_num_list.append(j)\n    for i in amicable_num_list:\n        for j in range(i, limit):\n            if j == i:\n                continue\n            if j + i == limit:\n                sum += j\n                amicable_num_list_2.append(j)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs((a*b)/(abs(a)**2+abs(b)**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+1j*b\n    return cmath.phase(c)\na,b = input().split()\nprint(angle_complex(float(a),float(b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a)\n    cmath.phase(b)\n    s = (a.real*b.real + a.imaginary*b.imaginary) / (pow(pow(a.real,2)+pow(a.imaginary,2),0.5))\n    s = cmath.phase(s)\n    return s\n    \ndef convolve(lst1,lst2):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    sum=0\n    for i in range(len(lst1)):\n        sum=sum+lst1[i]*lst2[i]\n    return sum\n    \ndef avg_of_complex_numbers(lst):\n    '''\n    Write a function to get the average of a list of complex numbers.\n    '''\n    summation=0\n    sum_of_squares=0\n    for i in range(len(lst)):\n        summation=summation+lst[i].real**2 + lst[i].imaginary**2\n        sum_of_squares=sum_of_squares+lst[i].real**2 + lst[i].imaginary**2\n    avg = summation/len(lst)\n    avg_of_squares=sum_of_squares/len(lst)\n    return (avg,avg_of_squares)\n    \ndef get_cos_sin(lst):\n    '''\n    Write a function to get cosine and sine of a list of complex numbers.\n    '''\n    cos=[]\n    sin=[]\n    for i in range(len(lst)):\n        cos.append(cmath.cos(lst[i]))\n        sin.append(cmath.sin(lst[i]))\n    return (cos,sin)\n    \ndef get_coordinate_complex(lst):\n    '''\n    Write a function to get the coordinates of a list of complex numbers.\n    '''\n    cos=[]\n    sin=[]\n    for i in range(len(lst)):\n        cos.append(cmath.cos(lst[i]))\n        sin.append(cmath.sin(lst[i]))\n    return (cos,sin)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+1j*b\n    print(c)\n    s = cmath.phase(c)\n    print(s)\n    angle = cmath.phase(c)\n    return(angle)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a+b)\ndef a_power_b(a,b):\n    '''\n    Write a function to calculate a raised to the power of b.\n    '''\n    print(a**b)\ndef sum_of_divisors(number):\n    '''\n    Write a function that takes in a number and returns its sum of its divisors.\n    Divisors are numbers that divide evenly into the number. For example,\n    the sum of the divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28.\n    '''\n    a=0\n    i=1\n    while a<number:\n        if number%i==0:\n            a=a+i\n        i=i+1\n    return(a)\ndef fahrenheit_to_celsius(fahrenheit):\n    '''\n    Write a function that takes in a temperature in fahrenheit and returns\n    the temperature in celsius.\n    '''\n    f=5*(fahrenheit-32)/9\n    return(f)\ndef h_to_c(h):\n    '''\n    Write a function that takes in a temperature in Fahrenheit and returns\n    the temperature in Celsius.\n    '''\n    f=5*(h-32)/9\n    return(f)\ndef prime_factors(number):\n    '''\n    Write a function that takes in a positive number and returns\n    a list of its prime factors. If the number is prime, the prime factors\n    are 1.\n    '''\n    a=2\n    while number%a!=0:\n        if a>=number:\n            break\n        a=a+1\n    if number%a==0:\n        return([a])\n    else:\n        b=[]\n        for i in range(2,number):\n            if number%i==0:\n                b.append(i)\n        b.append(number)\n        return(b)\ndef sum_of_factors(number):\n    '''\n    Write a function that takes in a positive number and returns\n    the sum of all of the prime factors of the number.\n    '''\n    i=2\n    result=1\n    while i<=number:\n        if number%i==0:\n            result=result+i\n        i=i+1\n    return(result)\ndef rev(s):\n    '''\n    Write a function that takes in a string and returns its reverse.\n    '''\n    s2=s[::-1]\n    return(s2)\ndef sum_of_digits(number):\n    '''\n    Write a function that takes in a number and returns the sum of all of its\n    digits.\n    '''\n    i=0\n    while i<=number:\n        i=i+int(number%10)\n        number=int(number/10)\n    return(i)\ndef maximum_of_two(x,y):\n    '''\n    Write a function that takes in two positive integers and returns\n    the largest of them.\n    '''\n    a=x if x>y else y\n    return(a)\ndef three_even_numbers(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns\n    True if the list has exactly three of each number in it.\n    '''\n    a=lst.count(lst[0])\n    if a==3:\n        return(True)\n    else:\n        return(False)\ndef power_n(x,y):\n    '''\n    Write a function that computes x to the power of y.\n    '''\n    z=x**y\n    return(z)\ndef prime_factorization(number):\n    '''\n    Write a function that takes in a positive integer and returns a list of\n    all of its prime factors.\n    '''\n    a=[]\n    i=2\n    while number%i!=0:\n        if i>number:\n            break\n        a.append(i)\n        i=i+1\n    i=1\n    while i<=number:\n        if number%i==0:\n            a.append(i)\n        i=i+1\n    return(a)\ndef max_sublist_sum(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns\n    the maximum sum of any contiguous sublist of the list.\n    '''\n    b=[]\n    i=0\n    while i<len(lst):\n        b.append(sum(lst[i:i+2]))\n        i=i+1\n    return(max(b))\ndef max_list_sum(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns\n    the maximum sum of any contiguous sublist of the list.\n    '''\n    b=[]\n    i=0\n    while i<len(lst):\n        b.append(sum(lst[i:i+2]))\n        i=i+1\n    return(max(b))\ndef max_sublist_product(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns\n    the maximum product of any contiguous sublist of the list.\n    '''\n    b=[]\n    i=0\n    while i<len(lst):\n        b.append(lst[i]*lst[i+1])\n        i=i+2\n    return(max(b))\ndef max_list_product(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns\n    the maximum product of any contiguous sublist of the list.\n    '''\n    b=[]\n    i=0\n    while i<len(lst):\n        b.append(lst[i]*lst[i+1])\n        i=i+2\n    return(max(b))\ndef is_rotation(lst1, lst2):\n    '''\n    Write a function that takes in two lists of equal length and returns\n    True if the lists are equal after reordering.\n    '''\n    if len(lst1)!=len(lst2):\n        return(False)\n    else:\n        b=[]\n        i=0\n        while i<len(lst1):\n            b.append(lst1[i])\n            i=i+1\n        j=0\n        while j<len(lst2):\n            b.append(lst2[j])\n            j=j+1\n        b.sort()\n        if b==lst1:\n            return(True)\n        else:\n            return(False)\ndef nth_fibonacci_number(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    a=0\n    b=1\n    while n>2:\n        a=b\n        b=a+b\n        n=n-1\n    return(a)\ndef fibonacci(n):\n    '''\n    Write a function that takes in a positive integer n and returns\n    the nth Fibonacci number.\n    '''\n    a=0\n    b=1\n    if n==0:\n        return(a)\n    elif n==1:\n        return(b)\n    else:\n        i=0\n        while i<n-1:\n            a=b\n            b=a+b\n            i=i+1\n        return(b)\ndef hcf_of_two_numbers(x,y):\n    '''\n    Write a function that takes in two positive integers and returns\n    the highest common factor (hcf) of the two numbers.\n    '''\n    if x<y:\n        n=x\n        x=y\n        y=n\n    while x%y!=0:\n        x=x+1\n    return(x)\ndef gcd_of_numbers(x,y):\n    '''\n    Write a function that takes in two positive integers and returns\n    the greatest common divisor (gcd) of the two numbers.\n    '''\n    if x<y:\n        n=x\n        x=y\n        y=n\n    while y!=0:\n        x=x%y\n        y=y-1\n    return(x)\ndef sum_of_fibonacci(n):\n    '''"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = math.atan(a/b)\n    print(angle)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (a.real*b.real + a.imag*b.imag)/(math.sqrt(a.real**2 + a.imag**2)*math.sqrt(b.real**2 + b.imag**2))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev = 0\n    curr = 0\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev += 1\n        else:\n            prev -= 1\n        curr = prev\n        if curr > result:\n            result = curr\n    return result\n    \nstring = \"10101\"\nprint(find_length(string)"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string_set = set(string)\n    print(string_set)\n    return len(string_set)-len(string_set.intersection(set(['0','1'])))\n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    length = 0\n    index = 0\n    if len(string) > 0:\n        while index <= len(string)-1:\n            if string[index] == '0':\n                index += 1\n            else:\n                break\n            if index == len(string)-1:\n                break\n        if index == len(string)-1:\n            return 0\n        index += 1\n        while index <= len(string)-1:\n            if string[index] == '1':\n                index += 1\n            else:\n                break\n            if index == len(string)-1:\n                break\n        if index == len(string)-1:\n            return 0\n        length = index - index - 1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    index = 0\n    max_diff = 0\n    while index < len(string):\n        if string[index] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = count_zero - count_one\n        if diff > max_diff:\n            max_diff = diff\n        index += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    res = -1\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count!= 0:\n            res = i\n        else:\n            return i\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            if i == 0 or string[i-1] == '1':\n                max_diff = max(max_diff, i+1)\n        elif string[i] == '1':\n            if i == 0 or string[i-1] == '0':\n                max_diff = max(max_diff, i+1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    curr = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr -= 1\n        else:\n            curr += 1\n        max = max if max < curr else curr\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    num_0 = 0\n    num_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            num_0 += 1\n        else:\n            num_1 += 1\n        max_length = max(max_length, num_1 - num_0)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    lst = list(string)\n    n = len(lst)\n    dp = [[0 for i in range(2)] for i in range(n)]\n    \n    for i in range(n):\n        if i == 0:\n            dp[i][0] = lst[i] == '0'\n            dp[i][1] = lst[i] == '1'\n            continue\n        dp[i][0] = (dp[i-1][0] and lst[i] == '0') or (dp[i-1][1] and lst[i] == '1')\n        dp[i][1] = (dp[i-1][0] and lst[i] == '1') or (dp[i-1][1] and lst[i] == '0')\n        \n    #print(dp)\n    \n    res = 0\n    for i in range(n):\n        res = max(res, abs(dp[i][0] - dp[i][1]))\n    return res\n    \ns = '1100'"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(a,b)\n    if b == 0:\n        print(\"Sum =\",a)\n    else:\n        c = a\n        print(\"Sum = \",c)\n        while a%b!= 0:\n            c = a - b\n            a = c\n            print(a)\n        print(\"Sum = \",c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        div=b\n    else:\n        div=a\n    \n    s=0\n    \n    for i in range(1,div+1):\n        if (a%i==0) and (b%i==0):\n            s=s+i\n        else:\n            continue\n    return s\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(divisor_sum(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b) * gcd(b,a)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==0 or b==0):\n        return 0\n    else:\n        # Base case \n        if (a == 1 or b == 1): \n            return max(a,b) \n        # If a is greater \n        if (a > b): \n            # recur for left side \n            x = sum(a - b,b) \n            # recur for right side \n            y = sum(a,b - a) \n            return x + y \n        # If b is greater \n        else: \n            # recur for left side \n            y = sum(a,b - a) \n            # recur for right side \n            x = sum(a - b,b) \n            return x + y \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_of_common_divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum_of_common_divisors.append(i)\n    return sum(sum_of_common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    a = a+1\n    b = b+1\n    prime = get_prime_factors(a)\n    prime_factors_b = get_prime_factors(b)\n    \n    prime_factors_a = get_prime_factors(a)\n    prime_factors_a.sort()\n    prime_factors_b.sort()\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a): \n        if a % i == 0 and b % i == 0: \n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initializing 2 variables\n    a = int(a)\n    b = int(b)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Write your code here\n    l = gcd(a,b)\n    sum = a*b //l\n    print(sum)\n    \n    \n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    # Write your code here\n    if(a<b):\n        small = b\n    else:\n        small = a\n    while(True):\n        if((small % a == 0) and (small % b == 0)):\n            return small\n        else:\n            small -= 1\n    \ndef main():\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    # Write your code here\n    a, b = 10, 12\n    sum(a,b)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \nprint(multiply_int(2,3)) # Should return 6\nprint(multiply_int(5,7)) # Should return 35\nprint(multiply_int(0,5)) # Should return 0\nprint(multiply_int(5,0)) # Should return 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        result += x\n        y = y//10\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 and y == 0:\n        return 0\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    if y == 1:\n        return x\n    if x == 1:\n        return y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_of_words = str.split()\n    # print(list_of_words)\n    list_of_long_words = []\n    for word in list_of_words:\n        if len(word) >= n:\n            list_of_long_words.append(word)\n    print(list_of_long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) >= n:\n            long.append(word)\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    long = []\n    for i in words:\n        if len(i) >= n:\n            long.append(i)\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    long_words = []\n    for word in word_list:\n        if len(word) > n:\n            long_words.append(word)\n    print(long_words)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # for word in str:\n    #     if len(word) > n:\n    #         return word\n    # return False\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    return[word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.split(' ')\n    return [word for word in str if len(word) > n]\nprint(long_words(4, \"I am a boy.\"))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Your code here\n    result = []\n    for x in str:\n        if len(x) > n:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m, n = len(my_matrix), len(my_matrix[0])\n    i, j = m//2, n//2\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print('\\n\\nTesting: magic_square_test')\n    print(f'\\tInput\\t: {my_matrix}\\n\\tResult\\t: {magic_square_test(my_matrix)}')\n    print(f'Expected: {True}')\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for row in range(len(my_matrix)):\n        if len(my_matrix[row])!= len(my_matrix[0]):\n            return False\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[row])):\n            if my_matrix[row][column]!= my_matrix[column][row] and my_matrix[row][column]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check_square_matrix(my_matrix,len(my_matrix),len(my_matrix))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    if sum(my_matrix[0])!= sum(sum(my_matrix[i]) for i in range(len(my_matrix))):\n        return False\n    \n    if sum(my_matrix[i][0] for i in range(len(my_matrix)))!= sum(sum(my_matrix[i]) for i in range(len(my_matrix))):\n        return False\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= sum(my_matrix[i][k] + my_matrix[k][j] for k in range(len(my_matrix[0])) if k!= j):\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return (len(my_matrix) == len(my_matrix[0]) and sum(map(sum, my_matrix)) == my_matrix[0][0] + my_matrix[-1][-1] + sum(map(sum, zip(*my_matrix))) and \\\n        sum(map(sum, zip(*my_matrix))) == my_matrix[0][-1] + my_matrix[-1][-1] + sum(map(sum, zip(*my_matrix[::-1]))))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    is_magic = True\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= int(i*j):\n                is_magic = False\n                break\n        if not is_magic:\n            break\n    if is_magic:\n        print(\"Magic Square\")\n    else:\n        print(\"Not a Magic Square\")\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    s = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            s += my_matrix[i][j]\n    return s == len(my_matrix) * len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if type(my_matrix)!= list:\n        print('Invalid matrix.')\n        return False\n    \n    m = len(my_matrix)\n    if m!= len(my_matrix[0]):\n        print('Invalid matrix.')\n        return False\n    \n    # Check for the same values in each row and column\n    for row in range(0, m):\n        for column in range(0, m):\n            if my_matrix[row][column]!= my_matrix[0][0]:\n                print('Invalid matrix.')\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return is_magic_square_recursive(my_matrix, 0, 0, my_matrix.shape[0] - 1, my_matrix.shape[1] - 1)\n    \ndef is_magic_square_recursive(my_matrix, row, column, r_max, c_max):\n    \n    if r_max < my_matrix.shape[0] - 1 and c_max < my_matrix.shape[1] - 1:\n        if my_matrix[row][column]!= 0:\n            if column + 1 < my_matrix.shape[1] and my_matrix[row][column + 1]!= 0:\n                if row + 1 < my_matrix.shape[0] and my_matrix[row + 1][column]!= 0:\n                    if column - 1 >= 0 and my_matrix[row][column - 1]!= 0:\n                        if row - 1 >= 0 and my_matrix[row - 1][column]!= 0:\n                            if r_max - 1 >= 0 and c_max - 1 >= 0:\n                                return is_magic_square_recursive(my_matrix, r_max - 1, c_max - 1, r_max, c_max)\n    return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.keys(), key = d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    return max(dic.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_occurences = max(d.values())\n    for key in d.keys():\n        if d[key] == max_occurences:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = defaultdict(int)\n    for num in nums:\n        result[num] += 1\n    max_key = max(result, key=result.get)\n    return result[max_key]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    print(max(d.items(), key=lambda x:x[1]))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # TODO: Write your code here\n    freq_map = {}\n    for num in nums:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    print(freq_map)\n    max_freq = 0\n    max_freq_key = None\n    for key in freq_map.keys():\n        if freq_map[key] > max_freq:\n            max_freq = freq_map[key]\n            max_freq_key = key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for n in nums:\n        counts[n] += 1\n    max_count = max(counts.values())\n    for k, v in counts.items():\n        if v == max_count:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for i in range(len(nums)):\n        item = nums[i]\n        count = nums.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #TODO: add to github\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    str2 = ''\n    for i in str1:\n        if i in vowels:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str1 = str1.lower()\n    res = []\n    for i in str1:\n        if i in vowels:\n            res.append(i)\n    return ''.join(res)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    vowel_str = []\n    for i in str1:\n        if i not in vowels:\n            vowel_str.append(i)\n        else:\n            vowel_str.insert(0,i)\n    return ''.join(vowel_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = list(str1)\n    vowels = {'a','e','i','o','u'}\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s[i] = s[i].upper()\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    output = ''\n    for char in str1:\n        if char in vowels:\n            output = char + output\n    return output\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = \"aeiou\"\n    vowels_indexes = []\n    # for i, letter in enumerate(str1):\n    #     if letter in vowels:\n    #         vowels_indexes.append(i)\n    # print(vowels_indexes)\n    for i, letter in enumerate(str1):\n        if letter in vowels:\n            vowels_indexes.append(i)\n    print(vowels_indexes)\n    new_string = str1[0:len(vowels_indexes)] + str1[len(vowels_indexes):-1]\n    print(new_string)\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    str2 = ''\n    for x in str1:\n        if x in vowels:\n            str2 += x\n            str2 += ''.join(reversed(x))\n        else:\n            str2 += x\n    return str2\n    \nprint(reverse_vowels('hello'))"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = str1[::-1].translate({ord('a'):None, ord('e'):None, ord('i'):None, ord('o'):None, ord('u'):None, ord('A'):None, ord('E'):None, ord('I'):None, ord('O'):None, ord('U'):None})\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    # if not str1:\n    #     return None\n    #     \n    # vowels = \"aeiouAEIOU\"\n    \n    # str2 = list(str1)\n    # i = 0\n    # j = len(str2) - 1\n    # while i <= j:\n    #     if str2[i] not in vowels:\n    #         i += 1\n    #     elif str2[j] not in vowels:\n    #         j -= 1\n    #     else:\n    #         str2[i], str2[j] = str2[j], str2[i]\n    #         i += 1\n    #         j -= 1\n    # return ''.join(str2)\n    \n    # using two pointer\n    \n    if not str1:\n        return None\n        \n    vowels = \"aeiouAEIOU\"\n    str2 = list(str1)\n    i, j = 0, len(str2) - 1\n    while i <= j:\n        if str2[i] not in vowels:\n            i += 1\n        elif str2[j] not in vowels:\n            j -= 1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i += 1\n            j -= 1\n    return ''.join(str2)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for t in tup1:\n        string += t\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # s = \"\"\n    # for x in tup1:\n    #     s = s + \" \" + str(x)\n    # return s[1:]\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\".join(tup1)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return 'empty'\n    if type(tup1) == tuple:\n        return ''.join(tup1)\n    else:\n        return 'not a tuple'\n    \ntup1 = (1,2,3)\ntup2 = ('a','b',2)\ntup3 = (tup1,tup2)\nprint(tup_string(tup1))\nprint(tup_string(tup2))\nprint(tup_string(tup3))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string1 = \" \".join(tup1)\n    return tup_string1\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \nprint(tup_string((1,2,3)))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            num += nums[i]\n    return num\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negativenum = 0\n    for i in nums:\n        if i < 0:\n            sum_negativenum = sum_negativenum + i\n    return sum_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i<0:\n            s += i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for i in nums:\n        if i < 0:\n            res += i\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # sums = 0\n    # for i in range(len(nums)):\n    #     if nums[i]<0:\n    #         sums += nums[i]\n    # return sums\n    return sum([-i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-n for n in nums])\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (6**n-1)/5\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * (2 * n - 1) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (3*n-1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    def _hexagonal(n):\n        if n == 0:\n            return 1\n        elif n % 3 == 0:\n            return _hexagonal(n-1) + n**3\n        elif n % 3 == 1:\n            return _hexagonal(n-1) + n**3 - n\n        elif n % 3 == 2:\n            return _hexagonal(n-1) + n**3\n    return _hexagonal(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2*n*n) + (n*n))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    print(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (n+1)/2) * (1 - (1/2) ** (n+1)))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonals = 0\n    number = 0\n    while hexagonals <= n:\n        hexagonals = number + 1\n        number = number + 1/2\n        \n    return hexagonals\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*hexagonal_num(n-1) + 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count_zero = 0\n    # count_one = 0\n    # for i in nums:\n    #     if i == 0:\n    #         count_zero += 1\n    #     else:\n    #         count_one += 1\n    # print(count_zero / count_one)\n    # return count_zero / count_one\n    zeros = 0\n    ones = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/ones\nprint(zero_count([0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n    return count_0/(count_1+count_0)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(nums) - nums.count(0)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    zeros = 0\n    non_zeros = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n    \nprint(zero_count([1,0,1,0,1,1])) # 0.25\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # zeroes = 0\n    # non_zeroes = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return zeroes/non_zeroes\n    # My Solution\n    # zeroes = 0\n    # non_zeroes = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return zeroes / non_zeroes\n    \n    # The fastest one\n    # zeroes = 0\n    # non_zeroes = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return non_zeroes / zeroes\n    \n    # Using Bit Logic\n    # zeroes = 0\n    # non_zeroes = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return non_zeroes + zeroes\n    \n    # Using Counter\n    # zeroes = 0\n    # non_zeroes = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return non_zeroes / zeroes\n    \n    # Using Python Comprehensions\n    # zeroes = sum(1 for i in nums if i == 0)\n    # non_zeroes = sum(1 for i in nums if i!= 0)\n    # return non_zeroes / zeroes\n    \n    # Using Python array\n    # return len(nums) - len(nums.filter(lambda x: x == 0))\n    \n    \n    # using numpy\n    # import numpy as np\n    # nums = np.array(nums)\n    # return (nums == 0).sum() / (nums!= 0).sum()\n    \n    # Another way\n    # return len(nums) - len(nums[nums == 0])\n    \n    # using numpy array\n    # import numpy as np\n    # return (nums == 0).sum() / (nums!= 0).sum()\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    a = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            a.append(0)\n        else:\n            a.append(1)\n    return sum(a) / len(a)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt = 0\n    for i in nums:\n        if i==0:\n            cnt += 1\n    return cnt/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero\n    \ndef count_consecutive_ones(nums):\n    '''\n    Write a function to find the number of consecutive 1s in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n        elif nums[i]!= 1:\n            count = 0\n        if count == 4:\n            return count\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return count/(len(nums)-count)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sumOfTwo = 0\n    while(n>0):\n        sumOfTwo += 1\n        n = n/2\n    return sumOfTwo\nprint(is_Sum_Of_Powers_Of_Two(9))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n1 = n\n    while n1 > 1:\n        r = n1 % 2\n        if r!= 0:\n            break\n        n1 = n1 // 2\n    return n1 == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n1 = n-1\n    while n1!=0:\n        n2 = int(n1/2)\n        if(n2%2==0):\n            return False\n        n1 = n1/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Write your Code here\n    if n < 0:\n        return False\n    else:\n        temp = n\n        while temp > 0:\n            if temp % 2 == 0:\n                temp = temp // 2\n            else:\n                return False\n        return True\n        "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n > 0) and (bin(n).count('1') == 1)\n    \ndef sum_of_powers_of_two(n): \n    '''\n    Write a python program to find the sum of the powers of two that appear in the given array. \n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if is_Sum_Of_Powers_Of_Two(i):\n            sum_of_powers += i\n    return sum_of_powers\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n > 1):\n        if(n % 2 == 0):\n            n = n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n>=1):\n        if n%2!=0:\n            print(\"No\")\n            break\n        else:\n            n//=2\n            \n    if n==1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #for (int i = 1; i <= n; i++) {\n    #    if(n == 0) { \n    #        return 0; \n    #    } \n    #    if(n % 2 == 0) { \n    #        n /= 2; \n    #    } \n    #    else { \n    #        return 0; \n    #    } \n    #} \n    #if(n == 1) { \n    #    return 1; \n    #} \n    \n    for i in range(1,n+1):\n        if(n == 0):\n            return 0\n        if(n % i == 0 and i <= n):\n            n = int(n/i)\n            \n    return 1\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if(n <= 0):\n        return False\n    \n    while(n % 2 == 0):\n        n = n / 2\n    \n    for i in range(1, 21):\n        if(n % 2!= 0):\n            break\n        if(i == 20):\n            return False\n        n = n / 2\n    \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    flag = 0\n    while(n >= 2):\n        while(n%2 == 0):\n            n = n/2\n        else:\n            flag = 1\n            break\n    if(flag == 0 and n == 2):\n        print(str(n)+\" is a Sum of powers of 2\")\n    else:\n        print(str(n)+\" is not a Sum of powers of 2\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2 * pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2*math.pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2 * math.pi * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    print(2*pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*pi*r\n    return c\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for elem in test_list:\n        if type(elem) == list:\n            flattened = flattened + extract_singly(elem)\n        else:\n            flattened.append(elem)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # \n    list_to_flatten = []\n    for i in test_list:\n        list_to_flatten += i\n    #\n    return list_to_flatten"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    ans = set(test_list[0])\n    for i in range(1, len(test_list)):\n        ans = ans.intersection(set(test_list[i]))\n    return ans\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = set()\n    for i in test_list:\n        for j in i:\n            s.add(j)\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    if not isinstance(test_list, list):\n        return None\n    if not test_list:\n        return None\n    \n    test_list = sorted(test_list, key=lambda x: len(x))\n    \n    return list(set(itertools.chain.from_iterable(test_list)))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for i in range(len(test_list)):\n        singly_list.extend(test_list[i])\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for l in test_list:\n        for elem in l:\n            flattened_list.append(elem)\n    return flattened_list\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #STEP 1: create the pancake array\n    pancake = []\n    while len(nums) > 0:\n        #STEP 2: Find the index of the max element\n        max_idx = 0\n        max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_idx = i\n        #STEP 3: Get the list of numbers to pop off the right\n        to_pop = list(nums)\n        to_pop.pop(max_idx)\n        #STEP 4: Pop the first element off\n        nums.pop(max_idx)\n        #STEP 5: Append the popped list to the pancake array\n        pancake.append(to_pop)\n    #STEP 6: Reverse the pancakes\n    pancake.reverse()\n    #STEP 7: Return the list\n    return pancake\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                swap(nums, j, j+1)\n    \n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # We sort by going backwards, \n    # going forwards, and comparing \n    # the next element.  These are \n    # all the correct steps to sort \n    # a list of size n.\n    if len(nums) < 2:\n        return nums\n    \n    # The largest element in the list.\n    max_num = nums[0]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(nums-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1, 0, -1):\n        max_index = nums.index(max(nums[i:]))\n        nums.insert(0, nums.pop(max_index))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length == 1:\n        return nums\n    \n    max_num = max(nums)\n    while max_num!= nums[-1]:\n        nums.append(nums.pop(0))\n        if length == 1:\n            break\n        max_num = max(nums)\n        while max_num!= nums[-1]:\n            nums.pop()\n        length -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            nums.reverse()\n        return\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    while len(nums) > 1:\n        bigger = max(nums)\n        nums.remove(bigger)\n        pos = nums.index(bigger)\n        nums.insert(pos, bigger)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    for i in range(len(nums)):\n        # find the index of the last element smaller than curr_num\n        ind = find_last_smaller_index(nums, i)\n        # reverse the last half\n        reverse_half(nums, ind)\n        # reverse the whole list\n        reverse(nums, 0, len(nums) - 1)\n        res.append(ind)\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #identical item in same position\n    count = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    for x in range(len(list1)):\n        if list1[x] == list2[x] and list2[x] == list3[x]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if(list1[i] == list2[j] and list1[i] == list3[k]):\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    lst1 = list(list1)\n    lst2 = list(list2)\n    lst3 = list(list3)\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i] and lst1[i] == lst3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print('Lengths of three lists must be the same')\n        return 0\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_count=[]\n    list2_count=[]\n    list3_count=[]\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    list1_count.append(list1[i])\n                    list2_count.append(list2[j])\n                    list3_count.append(list3[k])\n                    \n    return list1_count,list2_count,list3_count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    lst_pair = []\n    for x,y in zip(list1,list2):\n        if x == y:\n            lst_pair.append(x)\n    for x,y in zip(list1,list3):\n        if x == y:\n            lst_pair.append(x)\n    for x,y in zip(list2,list3):\n        if x == y:\n            lst_pair.append(x)\n    return len(lst_pair)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = {}\n    for i in range(len(Input)):\n        List = []\n        List.append(Input[i][0])\n        if List not in Lists:\n            Lists[List] = 1\n        else:\n            Lists[List] += 1\n    return Lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # print(Input)\n    list1 = []\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            list1.append(i)\n    return len(list1)\n    "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(Input)\n    my_list = []\n    if isinstance(Input,tuple):\n        for i in Input:\n            if isinstance(i,tuple):\n                for j in i:\n                    if isinstance(j,tuple):\n                        for k in j:\n                            my_list.append(k)\n                    else:\n                        continue\n            else:\n                continue\n        return my_list\n    else:\n        return -1\n        \ndef list_of_lists(Input):\n    '''\n    Write a function that takes a tuple as an argument and returns a list of lists.\n    '''\n    Input = tuple(Input)\n    my_list = []\n    if isinstance(Input,tuple):\n        for i in range(len(Input)):\n            if isinstance(Input[i],tuple):\n                for j in range(len(Input[i])):\n                    if isinstance(Input[i][j],tuple):\n                        for k in range(len(Input[i][j])):\n                            my_list.append(Input[i][j][k])\n                    else:\n                        continue\n            else:\n                continue\n        return my_list\n    else:\n        return -1\n        \ndef list_of_list_index_value(Input):\n    '''\n    Write a function that takes a tuple as an argument and returns a list of lists.\n    '''\n    Input = tuple(Input)\n    my_list = []\n    if isinstance(Input,tuple):\n        for i in range(len(Input)):\n            if isinstance(Input[i],tuple):\n                for j in range(len(Input[i])):\n                    if isinstance(Input[i][j],tuple):\n                        for k in range(len(Input[i][j])):\n                            my_list.append([i,j,k])\n                    else:\n                        continue\n            else:\n                continue\n        return my_list\n    else:\n        return -1\n        \ndef list_of_list_index_value_with_dict(Input):\n    '''\n    Write a function that takes a tuple as an argument and returns a list of lists.\n    '''\n    Input = tuple(Input)\n    my_dict = {}\n    if isinstance(Input,tuple):\n        for i in range(len(Input)):\n            if isinstance(Input[i],tuple):\n                for j in range(len(Input[i])):\n                    if isinstance(Input[i][j],tuple):\n                        for k in range(len(Input[i][j])):\n                            if k == 0:\n                                my_dict[k] = (i,j)\n                            else:\n                                my_dict[k] = Input[i][j][k]\n                    else:\n                        continue\n            else:\n                continue\n        return my_dict\n    else:\n        return -1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for i in range(len(Input)):\n        if Input[i] not in lists:\n            lists.append(Input[i])\n    print(len(lists))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)!= tuple:\n        print(f\"Function called with invalid data type. Expected {type(tuple)}, found {type(Input)}.\")\n        return\n    if Input == ():\n        return 0\n    ListCount = 0\n    for element in Input:\n        if type(element) == list:\n            ListCount += 1\n    return ListCount\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = (1,3,4,3,4,2,5,6,4,4,6,5,3,6,4,5,6,5)\n    print(find_lists(Input))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def find_lists(Input):\n        new = {}\n        for i in range(len(Input)):\n            new.setdefault(Input[i], 0)\n            new[Input[i]]+=1\n        return new\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)): \n        if type(Input[i])==list: \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(Input)\n    list_count = 0\n    for i in range(0,len(Input)):\n        if isinstance(Input[i],list):\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==2:\n        return abs(arr[0]-arr[1])\n    else:\n        res=0\n        if len(arr)>2:\n            for i in range(len(arr)-1):\n                res=max(res,abs(arr[i]-arr[i+1]))\n        return res\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_arr=min(arr)\n    max_arr=max(arr)\n    max_Diff=max_arr-min_arr\n    return max_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(abs(arr[i]-arr[j]), max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<=1:\n        return\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i+1] > max_diff:\n            max_diff = arr[i] - arr[i+1]\n    return max_diff\n    \nif __name__ == \"__main__\":\n    arr = [-19, -5, -1, -9, -2, -3, -1, -5, -4]\n    print(max_Abs_Diff(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(0, len(arr)-1):\n        diff = arr[i] - arr[i+1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[0] - arr[1]), abs(arr[0] - arr[2]), abs(arr[1] - arr[2]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max([max(arr)-min(arr)])\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff>max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    if len(arr) < 1:\n        return max_diff\n    elif len(arr) == 1:\n        return abs(arr[0] - 0)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    x = 0\n    y = 0\n    max_diff = 0\n    for i in range(0, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n    for i in range(0, len(arr)):\n        if arr[i] < y:\n            y = arr[i]\n    return abs(y-x)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n // b):\n        for y in range(n // a):\n            if a * x + b * y == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    for x in range(1, 1000):\n        for y in range(1, 1000):\n            if ax + by == n:\n                return (x, y)\n            elif ax + by > n:\n                break\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print(a,b,n)\n    if a == 0 or b == 0 or n == 0:\n        return None\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return (0, b)\n    if n == 0:\n        return None\n    for x in range(1,b):\n        y = (n - a) // b\n        if (x * b + y * a) == n:\n            return (x, y)\n    for x in range(1,a):\n        y = (n - b) // a\n        if (x * a + y * b) == n:\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(a, b + 1):\n        y = int(n / x)\n        if x * y == n:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0 and n == 0:\n        return tuple(a, b)\n    if a == 0 and b == 0 and n!= 0:\n        return None\n    x = find_solution(a, b, n - a)\n    if x == None:\n        return None\n    else:\n        return (x[0] - a, x[1] - b)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = b\n    y = n - a\n    if x > y:\n        x, y = y, x\n    if x * y == n:\n        return (x, y)\n    \n    for i in range(x, 0, -1):\n        if (n - i * x) % y == 0:\n            return (i, (n - i * x) // y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a, b = float(a), float(b)\n    x = 1\n    y = 1\n    while a * x + b * y!= n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            x -= 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = a, b\n    for i in range(1, n):\n        if (n - x * i) == (x * i - y * i):\n            return x * i, y * i\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    while x == None or y == None or x*x + y*y!= n:\n        if x == None:\n            if y == None:\n                x = 1\n                y = 1\n            else:\n                x = 0\n                y = int(n/b)\n        else:\n            if y == None:\n                x = int(n/a)\n                y = 1\n            else:\n                x = int(n/a)\n                y = 0\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list1:\n        if ele in list2:\n            list1.remove(ele)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    common = set(list1).intersection(set(list2))\n    for i in common:\n        list1.remove(i)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n + 1))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 21\n    elif n == 12:\n        return 23\n    elif n == 13:\n        return 25\n    elif n == 14:\n        return 27\n    elif n == 15:\n        return 29\n    elif n == 16:\n        return 31\n    elif n == 17:\n        return 33\n    elif n == 18:\n        return 35\n    elif n == 19:\n        return 37\n    elif n == 20:\n        return 39\n    elif n == 21:\n        return 41\n    elif n == 22:\n        return 43\n    elif n == 23:\n        return 45\n    elif n == 24:\n        return 47\n    elif n == 25:\n        return 49\n    elif n == 26:\n        return 51\n    elif n == 27:\n        return 53\n    elif n == 28:\n        return 55\n    elif n == 29:\n        return 57\n    elif n == 30:\n        return 59\n    elif n == 31:\n        return 61\n    elif n == 32:\n        return 63\n    elif n == 33:\n        return 65\n    elif n == 34:\n        return 67\n    elif n == 35:\n        return 69\n    elif n == 36:\n        return 71\n    elif n == 37:\n        return 73\n    elif n == 38:\n        return 75\n    elif n == 39:\n        return 77\n    elif n == 40:\n        return 79\n    elif n == 41:\n        return 81\n    elif n == 42:\n        return 83\n    elif n == 43:\n        return 85\n    elif n == 44:\n        return 87\n    elif n == 45:\n        return 89\n    elif n == 46:\n        return 91\n    elif n == 47:\n        return 93\n    elif n == 48:\n        return 95\n    elif n == 49:\n        return 97\n    elif n == 50:\n        return 99\n    elif n == 51:\n        return 101\n    elif n == 52:\n        return 103\n    elif n == 53:\n        return 105\n    elif n == 54:\n        return 107\n    elif n == 55:\n        return 109\n    elif n == 56:\n        return 111\n    elif n == 57:\n        return 113\n    elif n == 58:\n        return 115\n    elif n == 59:\n        return 117\n    elif n == 60:\n        return 119\n    elif n == 61:\n        return 121\n    elif n == 62:\n        return 123\n    elif n == 63:\n        return 125\n    elif n == 64:\n        return 127\n    elif n == 65:\n        return 129\n    elif n == 66:\n        return 131\n    elif n == 67:\n        return 133\n    elif n == 68:\n        return 135\n    elif n == 69:\n        return 137\n    elif n == 70:\n        return 139\n    elif n == 71:\n        return 141\n    elif n == 72:\n        return 143\n    elif n == 73:\n        return 145\n    elif n == 74:\n        return 147\n    elif n == 75:\n        return 149\n    elif n == 76:\n        return 151\n    elif n == 77:\n        return 153\n    elif n == 78:\n        return 155\n    elif n == 79:\n        return 157\n    elif n == 80:\n        return 159\n    elif n == 81:\n        return 161\n    elif n == 82:\n        return 163\n    elif n == 83:\n        return 165\n    elif n == 84:\n        return 167\n    elif n == 85:\n        return 169\n    elif n == 86:\n        return 171\n    elif n == 87:\n        return 173\n    elif n == 88:\n        return 175\n    elif n == 89:\n        return 177\n    elif n == 90:\n        return 179\n    elif n == 91:\n        return 181\n    elif n == 92:\n        return 183\n    elif n == 93:\n        return 185\n    elif n == 94:\n        return 187\n    elif n == 95:\n        return 189\n    elif n == 96:\n        return 191\n    elif n == 97:\n        return 193\n    elif n == 98:\n        return 195\n    elif n == 99:\n        return 197\n    elif n == 100:\n        return 199\n    elif n == 101:\n        return 201\n    elif n == 102:\n        return 203\n    elif n == 103:\n        return 205\n    elif n == 104:\n        return 207\n    elif n == 105:\n        return 209\n    elif n == 106:\n        return 211\n    elif n == 107:\n        return 213\n    elif n == 108:\n        return 215\n    elif n == 109:\n        return 217\n    elif n == 110:\n        return 219\n    elif n == 111:\n        return 221\n    elif n == 112:\n        return 223\n    elif n == 113:\n        return 225\n    elif n == 114:\n        return 227\n    elif n == 115:\n        return 229\n    elif n == 116:\n        return 231\n    elif n == 117:\n        return 233\n    elif n == 118:\n        return 235\n    elif n == 119:\n        return 237\n    elif n == 120:\n        return 239\n    elif n == 121:\n        return 241\n    elif n == 122:\n        return 243\n    elif n == 123:\n        return 245\n    elif n == 124:\n        return 247\n    elif n == 125:\n        return 249\n    elif n == 126:\n        return 251\n    elif n == 127:\n        return 253\n    elif n == 128:\n        return 254\n    elif n == 129:\n        return 256\n    elif n == 130:\n        return 258\n    elif n == 131:\n        return 260\n    elif n == 132:\n        return 262\n    elif n == 133:\n        return 264\n    elif n == 134:\n        return 266\n    elif n == 135:\n        return 268\n    elif n == 136:\n        return 270\n    elif n == 137:\n        return 272\n    elif n == 138:\n        return 274\n    elif n == 139:\n        return 276\n    elif n == 140:\n        return 278\n    elif n == 141:\n        return 280\n    elif n == 142:\n        return 282\n    elif n == 143:\n        return 284\n    elif n == 144:\n        return 286\n    elif n == 145:\n        return 288\n    elif n == 146:\n        return 290\n    elif n == 147:\n        return 292\n    elif n == 148:\n        return 294\n    elif n == 149:\n        return 296\n    elif n == 150:\n        return 298\n    elif n == 151:\n        return 300\n    elif n == 152:\n        return 302\n    elif n == 153:\n        return 304\n    elif n == 154:\n        return 306\n    elif n == 155:\n        return 308\n    elif n == 156:\n        return 310\n    elif n == 157:\n        return 312\n    elif n == 158:\n        return 314\n    elif n == 159:\n        return 316\n    elif n == 160:\n        return 318\n    elif n == 161:\n        return 320\n    elif n == 162:\n        return 322\n    elif n == 163:\n        return 324\n    elif n == 164:"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    return (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12) + (n-14)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n    \ndef max_sum_sequence(n):\n    '''\n    Write a function to calculate the maximum sum of a list of numbers.\n    '''\n    if n == 0:\n        return 0\n    max_sum = -sys.maxsize\n    for i in range(1, n+1):\n        sum_of_series = sum_series(i)\n        if sum_of_series > max_sum:\n            max_sum = sum_of_series\n    return max_sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += n - 2*i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Solution 1\n    # if n == 0:\n    #     return 0\n    # return (n - 2) + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return (n // 2) ** 2 + sum_series(n // 2)\n    else:\n        return n ** 2 + sum_series(n // 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0,n//2 + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n > 1):\n        return n + sum_series(n - 2)\n    else:\n        return 0\n    #return sum(range(n + 1))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*s*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi/s*(s*(s-2) - (l*(l+1)))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 0 or l < 0:\n        return None\n    if l > s:\n        return 0\n    return (s**2)*(1/2)*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l // s\n    if l == 0:\n        return 0\n    elif s == 0:\n        return 0\n    elif s < 0:\n        return 0\n    else:\n        return n * s * (s - pi) // 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = l / (s - 1)\n    s1 = (s + s / 2) / 2\n    s2 = (s + s / 2) / 2\n    s3 = (s + s / 2) / 2\n    s4 = (s + s / 2) / 2\n    s5 = (s + s / 2) / 2\n    s6 = (s + s / 2) / 2\n    s7 = (s + s / 2) / 2\n    s8 = (s + s / 2) / 2\n    s9 = (s + s / 2) / 2\n    s10 = (s + s / 2) / 2\n    s11 = (s + s / 2) / 2\n    s12 = (s + s / 2) / 2\n    s13 = (s + s / 2) / 2\n    s14 = (s + s / 2) / 2\n    s15 = (s + s / 2) / 2\n    s16 = (s + s / 2) / 2\n    s17 = (s + s / 2) / 2\n    s18 = (s + s / 2) / 2\n    s19 = (s + s / 2) / 2\n    s20 = (s + s / 2) / 2\n    s21 = (s + s / 2) / 2\n    s22 = (s + s / 2) / 2\n    s23 = (s + s / 2) / 2\n    s24 = (s + s / 2) / 2\n    s25 = (s + s / 2) / 2\n    s26 = (s + s / 2) / 2\n    s27 = (s + s / 2) / 2\n    s28 = (s + s / 2) / 2\n    s29 = (s + s / 2) / 2\n    s30 = (s + s / 2) / 2\n    s31 = (s + s / 2) / 2\n    s32 = (s + s / 2) / 2\n    s33 = (s + s / 2) / 2\n    s34 = (s + s / 2) / 2\n    s35 = (s + s / 2) / 2\n    s36 = (s + s / 2) / 2\n    s37 = (s + s / 2) / 2\n    s38 = (s + s / 2) / 2\n    s39 = (s + s / 2) / 2\n    s40 = (s + s / 2) / 2\n    s41 = (s + s / 2) / 2\n    s42 = (s + s / 2) / 2\n    s43 = (s + s / 2) / 2\n    s44 = (s + s / 2) / 2\n    s45 = (s + s / 2) / 2\n    s46 = (s + s / 2) / 2\n    s47 = (s + s / 2) / 2\n    s48 = (s + s / 2) / 2\n    s49 = (s + s / 2) / 2\n    s50 = (s + s / 2) / 2\n    s51 = (s + s / 2) / 2\n    s52 = (s + s / 2) / 2\n    s53 = (s + s / 2) / 2\n    s54 = (s + s / 2) / 2\n    s55 = (s + s / 2) / 2\n    s56 = (s + s / 2) / 2\n    s57 = (s + s / 2) / 2\n    s58 = (s + s / 2) / 2\n    s59 = (s + s / 2) / 2\n    s60 = (s + s / 2) / 2\n    s61 = (s + s / 2) / 2\n    s62 = (s + s / 2) / 2\n    s63 = (s + s / 2) / 2\n    s64 = (s + s / 2) / 2\n    s65 = (s + s / 2) / 2\n    s66 = (s + s / 2) / 2\n    s67 = (s + s / 2) / 2\n    s68 = (s + s / 2) / 2\n    s69 = (s + s / 2) / 2\n    s70 = (s + s / 2) / 2\n    s71 = (s + s / 2) / 2\n    s72 = (s + s / 2) / 2\n    s73 = (s + s / 2) / 2\n    s74 = (s + s / 2) / 2\n    s75 = (s + s / 2) / 2\n    s76 = (s + s / 2) / 2\n    s77 = (s + s / 2) / 2\n    s78 = (s + s / 2) / 2\n    s79 = (s + s / 2) / 2\n    s80 = (s + s / 2) / 2\n    s81 = (s + s / 2) / 2\n    s82 = (s + s / 2) / 2\n    s83 = (s + s / 2) / 2\n    s84 = (s + s / 2) / 2\n    s85 = (s + s / 2) / 2\n    s86 = (s + s / 2) / 2\n    s87 = (s + s / 2) / 2\n    s88 = (s + s / 2) / 2\n    s89 = (s + s / 2) / 2\n    s90 = (s + s / 2) / 2\n    s91 = (s + s / 2) / 2\n    s92 = (s + s / 2) / 2\n    s93 = (s + s / 2) / 2\n    s94 = (s + s / 2) / 2\n    s95 = (s + s / 2) / 2\n    s96 = (s + s / 2) / 2\n    s97 = (s + s / 2) / 2\n    s98 = (s + s / 2) / 2\n    s99 = (s + s / 2) / 2\n    s100 = (s + s / 2) / 2\n    s101 = (s + s / 2) / 2\n    s102 = (s + s / 2) / 2\n    s103 = (s + s / 2) / 2\n    s104 = (s + s / 2) / 2\n    s105 = (s + s / 2) / 2\n    s106 = (s + s / 2) / 2\n    s107 = (s + s / 2) / 2\n    s108 = (s + s / 2) / 2\n    s109 = (s + s / 2) / 2\n    s110 = (s + s / 2) / 2\n    s111 = (s + s / 2) / 2\n    s112 = (s + s / 2) / 2\n    s113 = (s + s / 2) / 2\n    s114 = (s + s / 2) / 2\n    s115 = (s + s / 2) / 2\n    s116 = (s + s / 2) / 2\n    s117 = (s + s / 2) / 2\n    s118 = (s + s / 2) / 2\n    s119 = (s + s / 2) / 2\n    s120 = (s + s / 2) / 2\n    s121 = (s + s / 2) / 2\n    s122 = (s + s / 2) / 2\n    s123 = (s + s / 2) / 2\n    s124 = (s + s / 2) / 2\n    s125 = (s + s / 2) / 2\n    s126 = (s + s / 2) / 2\n    s127 = (s + s / 2) / 2\n    s128 = (s + s / 2) / 2\n    s129 = (s + s / 2) / 2\n    s130 = (s + s / 2) / 2\n    s131 = (s + s / 2) / 2\n    s132 = (s + s / 2) / 2\n    s133 = (s + s / 2) / 2\n    s134 = (s + s / 2) / 2\n    s135 = (s + s / 2) / 2\n    s136 = (s + s / 2) / 2\n    s137 = (s + s / 2) / 2\n    s138 = (s + s / 2) / 2\n    s139 = (s + s / 2) / 2\n    s140 = (s + s / 2) / 2\n    s141 = (s + s / 2) / 2\n    s142 = (s + s / 2) / 2"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s-l) * 0.5) / tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    return 0.25*s*l**2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # length = s * pi / 180\n    # sides = l\n    # return (s * l * (s - 1) * tan(pi / s)) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    if s <= 0:\n        raise ValueError(\"The side length must be > 0\")\n    area = pi * s * (l - 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l*0.5\ndef area_triangle(s1, s2):\n    '''\n    Write a function to calculate the area of a triangle given the length of each side.\n    '''\n    return s1*s2/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r*r\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_parabola(a):\n    '''\n    Write a function to calculate the area of a parabola given its height.\n    '''\n    return (a*a)/3\ndef area_cube(l):\n    '''\n    Write a function to calculate the area of a cube given its length.\n    '''\n    return l*l*l\ndef area_cuboid(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a cuboid given its length, width and height.\n    '''\n    return s1*s2*s3\ndef area_parallelogram(s,b):\n    '''\n    Write a function to calculate the area of a parallelogram given its length and base.\n    '''\n    return s*b\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_triangle(s1,s2):\n    '''\n    Write a function to calculate the area of a triangle given its length and height.\n    '''\n    return s1*s2/2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r*r\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_parabola(a):\n    '''\n    Write a function to calculate the area of a parabola given its height.\n    '''\n    return (a*a)/3\ndef area_cube(l):\n    '''\n    Write a function to calculate the area of a cube given its length.\n    '''\n    return l*l*l\ndef area_cuboid(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a cuboid given its length, width and height.\n    '''\n    return s1*s2*s3\ndef area_parallelogram(s,b):\n    '''\n    Write a function to calculate the area of a parallelogram given its length and base.\n    '''\n    return s*b\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_triangle(s1,s2):\n    '''\n    Write a function to calculate the area of a triangle given its length and height.\n    '''\n    return s1*s2/2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r*r\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_parabola(a):\n    '''\n    Write a function to calculate the area of a parabola given its height.\n    '''\n    return (a*a)/3\ndef area_cube(l):\n    '''\n    Write a function to calculate the area of a cube given its length.\n    '''\n    return l*l*l\ndef area_cuboid(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a cuboid given its length, width and height.\n    '''\n    return s1*s2*s3\ndef area_parallelogram(s,b):\n    '''\n    Write a function to calculate the area of a parallelogram given its length and base.\n    '''\n    return s*b\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return s1*s2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_triangle(s1,s2):\n    '''\n    Write a function to calculate the area of a triangle given its length and height.\n    '''\n    return s1*s2/2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, base and height.\n    '''\n    return (a+b)*h/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r*r\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s*s\ndef area_rectangle(s1,s2):\n    '''\n    Write a function to calculate the are"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum(n):\n        sum_ = 0\n        divisors = []\n        for i in range(1, n):\n            if n % i == 0:\n                sum_ += i\n                divisors.append(i)\n        return sum_ == 2 * divisors[-1]\n    print(div_sum(10))\n    return\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum4(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum5(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum6(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum7(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum8(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum9(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum10(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum11(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum12(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum13(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y:\n            x,y = y,x\n        sum_div = 0\n        for i in range(1,x+1):\n            if x%i == 0:\n                sum_div += i\n        for i in range(1,y+1):\n            if y%i == 0:\n                sum_div += i\n        return sum_div\n    return divisor_sum(n,n) == n\ndef div_sum14(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(x,y):\n        if x > y"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n):\n        if n%i == 0:\n            print(i)\n    if n%2 == 0 and n/2 == (n/2):\n        print(n)\n    elif n%2 == 0 and n/2!= (n/2):\n        print(\"NO\")\n    elif n%2!= 0 and n/2 == (n/2):\n        print(\"YES\")\n    elif n%2!= 0 and n/2!= (n/2):\n        print(\"NO\")\nn=int(input())\ndiv_sum(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = list()\n    for i in range(1,n):\n        if(n%i==0):\n            divisors.append(i)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        sum_divisors = 0\n        for i in range(1,n):\n            if n%i == 0:\n                sum_divisors += i\n        return (n == sum_divisors)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = int(math.sqrt(n))\n    if a*a == n:\n        print(True)\n    else:\n        print(False)\n        return\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    n = int(input(\"Please enter a number: \"))\n    s = 0\n    for x in range(1,n):\n        if n % x == 0:\n            s = s + x\n    if n == s:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    if n <= 1: \n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(1, int(n / 2) + 1): \n            if n % i == 0: \n                divisors.append(i) \n        # print(divisors) \n        # print(sum(divisors))\n        if sum(divisors) == n:\n            return True\n        else: \n            return False\ndef get_factor_num(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    prime_factor = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                prime_factor = prime_factor + 1\n        return prime_factor\ndef get_prime_factors(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    prime_factor = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                prime_factor = prime_factor + 1\n    return prime_factor\ndef get_factors(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                prime_factor = prime_factor + 1\n    return prime_factor\ndef get_prime_factors_using_map(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    prime_factor = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prime_map = {}\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                prime_factor = prime_factor + 1\n                prime_map[i] = 1\n        return prime_factor\ndef get_prime_factors_using_dict(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    prime_factor = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prime_map = {}\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                prime_factor = prime_factor + 1\n                prime_map[i] = 1\n        return prime_factor\ndef get_factors_using_dict(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        factors = {}\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                factors[i] = 1\n        return len(factors)\ndef check_pythagorean_triplet(n):\n    '''\n    Write a function to count the number of pythagorean triplet in an integer.\n    '''\n    pythagorean_triplet = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            a = math.sqrt(i)\n            b = math.sqrt(n - i)\n            c = math.sqrt(n)\n            if a == int(a):\n                pythagorean_triplet = pythagorean_triplet + 1\n            if b == int(b):\n                pythagorean_triplet = pythagorean_triplet + 1\n            if c == int(c):\n                pythagorean_triplet = pythagorean_triplet + 1\n    return pythagorean_triplet\ndef check_triplets(n):\n    '''\n    Write a function to count the number of pythagorean triplet in an integer.\n    '''\n    triplet = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            a = math.sqrt(i)\n            b = math.sqrt(n - i)\n            c = math.sqrt(n)\n            if a == int(a):\n                triplet = triplet + 1\n            if b == int(b):\n                triplet = triplet + 1\n            if c == int(c):\n                triplet = triplet + 1\n    return triplet\ndef count_triplet_pythagorean(n):\n    '''\n    Write a function to count the number of pythagorean triplet in an integer.\n    '''\n    count = 0\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            a = math.sqrt(i)\n            b = math.sqrt(n - i)\n            c = math.sqrt(n)\n            if a == int(a):\n                count = count + 1\n            if b == int(b):\n                count = count + 1\n            if c == int(c):\n                count = count + 1\n    return count\ndef get_factor_sum(n):\n    '''\n    Write a function to count the number of prime factor in an integer.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, int(n / 2) + 1):\n            if n % i == 0:\n                return i + n / i\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # dividing integer number n by all the divisor numbers \n    # and sum them and then compare the sum with n \n    # if sum of the divisors is same than return True else return False\n    sum_divisor = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum_divisor += i\n    if sum_divisor == n:\n        return True \n    else:\n        return False\n        \n        \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = []\n    for i in range(1, n):\n        if n%i==0:\n            div.append(i)\n    if sum(div) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(26):\n        d[chr(ord('a')+i)] = 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    str1 = str1.lower()\n    \n    dict = {}\n    for i in range(ord('a'), ord('z')+1):\n        dict[chr(i)] = str1.count(chr(i))\n    \n    return dict\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            continue\n        if str1[i].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([char for char in str1.lower() if char in 'abcdefghijklmnopqrstuvwxyz'])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    temp = 0\n    str1 = str1.lower()\n    for i in str1:\n        if i == temp:\n            count += 1\n            temp = ord(i)\n        else:\n            temp = ord(i)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    return sum(map(lambda x: x.lower() in alpha, str1.lower()))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # To count the number of lower case characters in the string\n    lower_case = 0\n    # To count the number of upper case characters in the string\n    upper_case = 0\n    # To count the number of digits in the string\n    digits = 0\n    # To count the number of special characters in the string\n    special_chars = 0\n    # To count the number of characters that occur in the string\n    no_of_char = 0\n    # To count the number of times the characters occur in the string\n    no_of_char_list = []\n    # To count the number of times the characters occur in the string\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lower_case += 1\n        elif str1[i].isupper():\n            upper_case += 1\n        elif str1[i].isdigit():\n            digits += 1\n        elif str1[i] in \"~!@#$%^&*()_+-=|{}[]:;?/,.<,>\":\n            special_chars += 1\n    no_of_char_list.append(lower_case)\n    no_of_char_list.append(upper_case)\n    no_of_char_list.append(digits)\n    no_of_char_list.append(special_chars)\n    no_of_char = sum(no_of_char_list)\n    return no_of_char\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    \n    \n    \n    # character_position(str1)\n    \n    # def character_position(str1):\n    #     d = {};\n    #     for i,v in enumerate(str1):\n    #         if v not in d:\n    #             d[v] = i;\n    #     return d;\n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return dict((c, str1.index(c)) for c in set(str1))\n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return {c : str1.index(c) for c in set(str1)}\n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(s1):\n    #         if v not in d:\n    #             d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     d = {}\n    #     for i,v in enumerate(str1):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return {v : i for i,v in enumerate(sorted(set(str1)))}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return {c: i for i, c in enumerate(sorted(set(str1)))}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return dict((c, i) for i, c in enumerate(sorted(set(str1))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return dict((c, i) for i, c in enumerate(sorted(set(str1))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return dict((c, i) for i, c in enumerate(sorted(set(str1))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(str1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     s1 = str1.lower()\n    #     d = {}\n    #     for i,v in enumerate(sorted(set(s1))):\n    #         d[v] = i\n    #     return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # def character_position(str1):\n    #     return sorted(set(str1.lower()))\n    \n    \n    \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # t = str1.upper()\n    # t = str1.lower()\n    # print(t)\n    # return len(list(set(t)))\n    # # return len(list(set(t.split())))\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == str1[i].lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    # A = [1, 2, 3, 4]\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_sum = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j] == 0:\n                even_sum += 1\n    return even_sum\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for index in range(0, len(A)):\n        xor_count = 0\n        for index2 in range(index+1, len(A)):\n            xor_count += A[index2]\n            if xor_count == 0:\n                even_count += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i] ^ (1<<(i+1)) % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if len(A) < 2:\n        return count\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] == A[j] and A[i]!= 0 and A[i] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) & 1 == 1:\n                return(1)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Number of elements in the list = n\n    n = len(A) \n    \n    # Create a table to store sum of \n    # first n + 1 integers in array\n    table = [0] * (n + 1) \n    \n    # Fill the table using table[i] = sum of first i \n    # integers in array \n    for i in range(n): \n        table[i + 1] = table[i] + A[i] \n    \n    # Traverse the table and count the number of pairs \n    # of integers that xor to an even number\n    res = 0\n    for i in range(n + 1): \n        if (table[i] % 2) == 0: \n            res += (n - i + 1) \n    return res \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # the same as above but more concise\n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    A = sorted(A)\n    even_pair = 0\n    for i in range(len(A)):\n        #print(A[i], end=\" \")\n        if A[i]&1 == 0:\n            for j in range(i+1, len(A)):\n                #print(A[j], end=\" \")\n                if A[i]^A[j] == 0:\n                    even_pair +=1\n                else:\n                    break\n    return even_pair\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    num = 1\n    while num < n:\n        num *= 2\n    return num \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    while n%2 == 0:\n        n = n/2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x *= 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    while n >= 1:\n        n = n >> 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n.bit_length()-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #First we need to know the size of our number\n    size = n.bit_length()\n    \n    #Next we need to know which direction to go in and how much we want to go in that direction.\n    #We will go in in reverse to create powers of 2 in the correct direction\n    power = 1\n    while size - power > 0:\n        power <<= 1\n        \n    #We will make sure that the returned number is also greater than or equal to n\n    while power <= n:\n        n |= n - power\n        power <<= 1\n    \n    #Next we have to return the power we needed to reach n\n    return power - 1\n    \n    \ndef range_check(n):\n    '''\n    Write a python function to check whether a number is in a range between two numbers.\n    '''\n    return n in range(n-1, n+1)\n    \n    \ndef char_to_digits(n):\n    '''\n    Write a python function to convert a character into its number representation.\n    '''\n    return ord(n) - ord('0')\n    \n    \ndef num_to_char(n):\n    '''\n    Write a python function to convert a number into its character representation.\n    '''\n    return chr(n + ord('0'))\n    \n    \ndef get_even_sum(n):\n    '''\n    Write a python function to find the sum of the even numbers in a list.\n    '''\n    return sum([num for num in n if num % 2 == 0])\n    \n    \ndef find_two_biggest_numbers(n):\n    '''\n    Write a python function to find the two numbers in a list which have the greatest sum.\n    '''\n    n = sorted(n, reverse=True)\n    return n[0], n[1]\n    \n    \ndef in_range(num1, num2):\n    '''\n    Write a python function to check whether a number is within a given range.\n    '''\n    return num1 >= num2 and num1 <= num2\n    \n    \ndef repeat_string(s, n):\n    '''\n    Write a python function to check whether a string can be repeated n times.\n    '''\n    return s * n in s\n    \n    \ndef consecutive_sum(n):\n    '''\n    Write a python function to find the sum of numbers in a range that are divisible by 3.\n    '''\n    return sum([i for i in range(n) if i % 3 == 0])\n    \n    \ndef permutation_with_duplicates(n):\n    '''\n    Write a python function to find all permutations of a list which don't contain duplicates.\n    '''\n    permutations = set()\n    \n    def permute(n, permutation=[]):\n        if len(n) == 0:\n            permutations.add(''.join(permutation))\n        else:\n            for i in range(len(n)):\n                permute(n[:i] + n[i+1:], permutation + [n[i]])\n    \n    permute(n)\n    return permutations\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef get_n_digits(n, n_digits):\n    '''\n    Write a python function to get n digits of a number.\n    '''\n    result = list(str(n))\n    \n    #Now we need to add 0 to the front of the list if necessary\n    for i in range(n_digits):\n        result.insert(0, '0')\n    return int(''.join(result))\n    \n    \ndef get_n_repeated_digits(n, n_repeated):\n    '''\n    Write a python function to get the n repeated digits of a number.\n    '''\n    n = str(n)\n    \n    #If the length of the number is not divisible by n_repeated, we need to add zeros in the front\n    if len(n) % n_repeated!= 0:\n        n = '0' * (n_repeated - len(n) % n_repeated) + n\n        \n    result = [n[i] * n_repeated for i in range(len(n) // n_repeated)]\n    return int(''.join(result))\n    \n    \ndef get_smallest_number(n, n_digits):\n    '''\n    Write a python function to get the smallest number which is a multiple of n.\n    '''\n    return n - (n % get_n_digits(n, n_digits))\n    \n    \ndef get_odd_sum(n):\n    '''\n    Write a python function to find the sum of the odd numbers in a list.\n    '''\n    return sum([i for i in n if i % 2 == 1])\n    \n    \ndef get_num_of_consecutive_ones(n):\n    '''\n    Write a python function to find the number of consecutive ones in a list.\n    '''\n    return len([i for i in n if i == 1])\n    \n    \ndef get_min_and_max(n):\n    '''\n    Write a python function to find the minimum and maximum in a list.\n    '''\n    return min(n), max(n)\n    \n    \ndef get_duplicates(n):\n    '''\n    Write a python function to find the number of duplicates in a list.\n    '''\n    return len(n) - len(set(n))\n    \n    \ndef get_sum_of_square_numbers(n):\n    '''\n    Write a python function to get the sum of the squares of numbers in a list.\n    '''\n    return sum([i ** 2 for i in n])\n    \n    \ndef get_longest_common_prefix(n):\n    '''\n    Write a python function to get the longest common prefix of a list.\n    '''\n    longest_common_prefix = ''\n    \n    for i in range(len(n)):\n        if i == 0:\n            longest_common_prefix += n[0]\n        elif longest_common_prefix[-1] == n[i]:\n            longest_common_prefix += n[i]\n        else:\n            break\n    return longest_common_prefix\n    \n    \ndef get_longest_consecutive_sequence(n):\n    '''\n    Write a python function to get the longest consecutive sequence of numbers in a list.\n    '''\n    longest_consecutive = ''\n    \n    for i in range(len(n) - 1):\n        if n[i] + 1 == n[i + 1]:\n            longest_consecutive = n[i]\n        else:\n            break\n    \n    return longest_consecutive\n    \n    \ndef get_two_numbers_with_diff_one(n):\n    '''\n    Write a python function to find the two numbers in a list which have the sum of one.\n    '''\n    n = set(n)\n    return sorted([i for i in n if i + 1 in n])\n    \n    \ndef get_first_n_multiples(n, m):\n    '''\n    Write a python function to get the first n numbers which are multiples of m.\n    '''\n    return sorted([i for i in range(1, n + 1) if i % m == 0])\n    \n    \ndef is_n_digit_sum(n):\n    '''\n    Write a python function to check whether a number is the sum of at least n digits.\n    '''\n    n = str(n)\n    return len(n) >= n.count('0')\n    \n    \ndef get_pairs(n):\n    '''\n    Write a python function to get the pairs in a list.\n    '''\n    n = str(n)\n    return [(i, int(n[i])) for i in range(len(n)) if int(n[i]) % 2 == 0]\n    \n    \ndef get_n_palindromes(n):\n    '''\n    Write a python function to get the n palindromes.\n    '''\n    return sorted(list(set(i for i in rang"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i < n):\n        i <<= 1\n    return i >> 1\n    \n    "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = n & (n-1)\n    return x + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow2 = 1\n    while pow2 < n:\n        pow2 = pow2 * 2\n    return pow2\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    occurence = 0\n    for i in a:\n        if i == x:\n            occurence += 1\n    return occurence\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt=0\n    for i in range(len(a)):\n        if a[i]==x:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a: \n        if i == x: \n            c += 1\n    return c \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if(a[i]==x):\n            count+=1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Count of number of occurrences of a given number in the list\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m-1, n):\n        result += list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # using for loop\n    # for i in range(m,n+1):\n    #     sum+=list1[i]\n    \n    # using list comprehension\n    sum=sum([list1[i] for i in range(m,n+1)])\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m < 0:\n        m = 0\n    if n > len(list1):\n        n = len(list1)\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    i = 0\n    while i < m:\n        sum += list1[i]\n        i += 1\n    i = 0\n    while i <= n:\n        sum += list1[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\nsum_range_list([10, 20, 30, 40, 50], 2, 5)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = 0\n    for i in range(m - 1, n):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    i = m\n    while i <= n:\n        sum += list1[i]\n        i += 1\n    return sum\nprint(sum_range_list([10, 5, 2, 7], 1, 3))\nprint(sum_range_list([10, 5, 2, 7], 0, 4))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        if i > m and i < n:\n            sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 5 + a) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # your code here\n    if a < 0:\n        raise ValueError(\"Negative or zero argument passed to function.\")\n    elif a == 0:\n        return 0.0\n    else:\n        return (math.sqrt(2 * a * (a + 2))) + 0.5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #this is a perfect pentagon\n    if a == 5:\n        return (math.sqrt(3)*5)\n    if a == 6:\n        return (math.sqrt(3)*6)\n    if a == 7:\n        return (math.sqrt(3)*7)\n    if a == 8:\n        return (math.sqrt(3)*8)\n    if a == 9:\n        return (math.sqrt(3)*9)\n    if a == 10:\n        return (math.sqrt(3)*10)\n    if a == 11:\n        return (math.sqrt(3)*11)\n    if a == 12:\n        return (math.sqrt(3)*12)\n    if a == 13:\n        return (math.sqrt(3)*13)\n    if a == 14:\n        return (math.sqrt(3)*14)\n    if a == 15:\n        return (math.sqrt(3)*15)\n    if a == 16:\n        return (math.sqrt(3)*16)\n    if a == 17:\n        return (math.sqrt(3)*17)\n    if a == 18:\n        return (math.sqrt(3)*18)\n    if a == 19:\n        return (math.sqrt(3)*19)\n    if a == 20:\n        return (math.sqrt(3)*20)\n    if a == 21:\n        return (math.sqrt(3)*21)\n    if a == 22:\n        return (math.sqrt(3)*22)\n    if a == 23:\n        return (math.sqrt(3)*23)\n    if a == 24:\n        return (math.sqrt(3)*24)\n    if a == 25:\n        return (math.sqrt(3)*25)\n    if a == 26:\n        return (math.sqrt(3)*26)\n    if a == 27:\n        return (math.sqrt(3)*27)\n    if a == 28:\n        return (math.sqrt(3)*28)\n    if a == 29:\n        return (math.sqrt(3)*29)\n    if a == 30:\n        return (math.sqrt(3)*30)\n    if a == 31:\n        return (math.sqrt(3)*31)\n    if a == 32:\n        return (math.sqrt(3)*32)\n    if a == 33:\n        return (math.sqrt(3)*33)\n    if a == 34:\n        return (math.sqrt(3)*34)\n    if a == 35:\n        return (math.sqrt(3)*35)\n    if a == 36:\n        return (math.sqrt(3)*36)\n    if a == 37:\n        return (math.sqrt(3)*37)\n    if a == 38:\n        return (math.sqrt(3)*38)\n    if a == 39:\n        return (math.sqrt(3)*39)\n    if a == 40:\n        return (math.sqrt(3)*40)\n    if a == 41:\n        return (math.sqrt(3)*41)\n    if a == 42:\n        return (math.sqrt(3)*42)\n    if a == 43:\n        return (math.sqrt(3)*43)\n    if a == 44:\n        return (math.sqrt(3)*44)\n    if a == 45:\n        return (math.sqrt(3)*45)\n    if a == 46:\n        return (math.sqrt(3)*46)\n    if a == 47:\n        return (math.sqrt(3)*47)\n    if a == 48:\n        return (math.sqrt(3)*48)\n    if a == 49:\n        return (math.sqrt(3)*49)\n    if a == 50:\n        return (math.sqrt(3)*50)\n    if a == 51:\n        return (math.sqrt(3)*51)\n    if a == 52:\n        return (math.sqrt(3)*52)\n    if a == 53:\n        return (math.sqrt(3)*53)\n    if a == 54:\n        return (math.sqrt(3)*54)\n    if a == 55:\n        return (math.sqrt(3)*55)\n    if a == 56:\n        return (math.sqrt(3)*56)\n    if a == 57:\n        return (math.sqrt(3)*57)\n    if a == 58:\n        return (math.sqrt(3)*58)\n    if a == 59:\n        return (math.sqrt(3)*59)\n    if a == 60:\n        return (math.sqrt(3)*60)\n    if a == 61:\n        return (math.sqrt(3)*61)\n    if a == 62:\n        return (math.sqrt(3)*62)\n    if a == 63:\n        return (math.sqrt(3)*63)\n    if a == 64:\n        return (math.sqrt(3)*64)\n    if a == 65:\n        return (math.sqrt(3)*65)\n    if a == 66:\n        return (math.sqrt(3)*66)\n    if a == 67:\n        return (math.sqrt(3)*67)\n    if a == 68:\n        return (math.sqrt(3)*68)\n    if a == 69:\n        return (math.sqrt(3)*69)\n    if a == 70:\n        return (math.sqrt(3)*70)\n    if a == 71:\n        return (math.sqrt(3)*71)\n    if a == 72:\n        return (math.sqrt(3)*72)\n    if a == 73:\n        return (math.sqrt(3)*73)\n    if a == 74:\n        return (math.sqrt(3)*74)\n    if a == 75:\n        return (math.sqrt(3)*75)\n    if a == 76:\n        return (math.sqrt(3)*76)\n    if a == 77:\n        return (math.sqrt(3)*77)\n    if a == 78:\n        return (math.sqrt(3)*78)\n    if a == 79:\n        return (math.sqrt(3)*79)\n    if a == 80:\n        return (math.sqrt(3)*80)\n    if a == 81:\n        return (math.sqrt(3)*81)\n    if a == 82:\n        return (math.sqrt(3)*82)\n    if a == 83:\n        return (math.sqrt(3)*83)\n    if a == 84:\n        return (math.sqrt(3)*84)\n    if a == 85:\n        return (math.sqrt(3)*85)\n    if a == 86:\n        return (math.sqrt(3)*86)\n    if a == 87:\n        return (math.sqrt(3)*87)\n    if a == 88:\n        return (math.sqrt(3)*88)\n    if a == 89:\n        return (math.sqrt(3)*89)\n    if a == 90:\n        return (math.sqrt(3)*90)\n    if a == 91:\n        return (math.sqrt(3)*91)\n    if a == 92:\n        return (math.sqrt(3)*92)\n    if a == 93:\n        return (math.sqrt(3)*93)\n    if a == 94:\n        return (math.sqrt(3)*94)\n    if a == 95:\n        return (math.sqrt(3)*95)\n    if a == 96:\n        return (math.sqrt(3)*96)\n    if a == 97:\n        return (math.sqrt(3)*97)\n    if a == 98:\n        return (math.sqrt(3)*98)\n    if a == 99:\n        return (math.sqrt(3)*99)\n    if a == 100:\n        return (math.sqrt(3)*100)\n    if a == 101:\n        return (math.sqrt(3)*101)\n    if a == 102:\n        return (math.sqrt(3)*102)\n    if a == 103:\n        return (math.sqrt(3)*103)\n    if a == 104:\n        return (math.sqrt(3)*10"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)**0.5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5*math.sin(math.pi/5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # 1- 6\n    # 2- 6\n    # 3- 10\n    # 4- 10\n    # 5- 6\n    # 6- 10\n    # 7- 12\n    # 8- 6\n    # 9- 10\n    # 10- 12\n    # 11- 6\n    # 12- 10\n    # 13- 12\n    # 14- 6\n    # 15- 10\n    # 16- 12\n    # 17- 10\n    # 18- 12\n    # 19- 6\n    # 20- 10\n    # 21- 12\n    # 22- 10\n    # 23- 12\n    # 24- 6\n    # 25- 10\n    # 26- 12\n    # 27- 10\n    # 28- 12\n    # 29- 6\n    # 30- 10\n    # 31- 12\n    # 32- 10\n    # 33- 12\n    # 34- 6\n    # 35- 10\n    # 36- 12\n    # 37- 10\n    # 38- 12\n    # 39- 6\n    # 40- 10\n    # 41- 12\n    # 42- 10\n    # 43- 12\n    # 44- 6\n    # 45- 10\n    # 46- 12\n    # 47- 10\n    # 48- 12\n    # 49- 6\n    # 50- 10\n    # 51- 12\n    # 52- 10\n    # 53- 12\n    # 54- 6\n    # 55- 10\n    # 56- 12\n    # 57- 10\n    # 58- 12\n    # 59- 6\n    # 60- 10\n    # 61- 12\n    # 62- 10\n    # 63- 12\n    # 64- 6\n    # 65- 10\n    # 66- 12\n    # 67- 10\n    # 68- 12\n    # 69- 6\n    # 70- 10\n    # 71- 12\n    # 72- 10\n    # 73- 12\n    # 74- 6\n    # 75- 10\n    # 76- 12\n    # 77- 10\n    # 78- 12\n    # 79- 6\n    # 80- 10\n    # 81- 12\n    # 82- 10\n    # 83- 12\n    # 84- 6\n    # 85- 10\n    # 86- 12\n    # 87- 10\n    # 88- 12\n    # 89- 6\n    # 90- 10\n    # 91- 12\n    # 92- 10\n    # 93- 12\n    # 94- 6\n    # 95- 10\n    # 96- 12\n    # 97- 10\n    # 98- 12\n    # 99- 6\n    # 100- 10\n    # 101- 12\n    # 102- 10\n    # 103- 12\n    # 104- 6\n    # 105- 10\n    # 106- 12\n    # 107- 10\n    # 108- 12\n    # 109- 6\n    # 110- 10\n    # 111- 12\n    # 112- 10\n    # 113- 12\n    # 114- 6\n    # 115- 10\n    # 116- 12\n    # 117- 10\n    # 118- 12\n    # 119- 6\n    # 120- 10\n    # 121- 12\n    # 122- 10\n    # 123- 12\n    # 124- 6\n    # 125- 10\n    # 126- 12\n    # 127- 10\n    # 128- 12\n    # 129- 6\n    # 130- 10\n    # 131- 12\n    # 132- 10\n    # 133- 12\n    # 134- 6\n    # 135- 10\n    # 136- 12\n    # 137- 10\n    # 138- 12\n    # 139- 6\n    # 140- 10\n    # 141- 12\n    # 142- 10\n    # 143- 12\n    # 144- 6\n    # 145- 10\n    # 146- 12\n    # 147- 10\n    # 148- 12\n    # 149- 6\n    # 150- 10\n    # 151- 12\n    # 152- 10\n    # 153- 12\n    # 154- 6\n    # 155- 10\n    # 156- 12\n    # 157- 10\n    # 158- 12\n    # 159- 6\n    # 160- 10\n    # 161- 12\n    # 162- 10\n    # 163- 12\n    # 164- 6\n    # 165- 10\n    # 166- 12\n    # 167- 10\n    # 168- 12\n    # 169- 6\n    # 170- 10\n    # 171- 12\n    # 172- 10\n    # 173- 12\n    # 174- 6\n    # 175- 10\n    # 176- 12\n    # 177- 10\n    # 178- 12\n    # 179- 6\n    # 180- 10\n    # 181- 12\n    # 182- 10\n    # 183- 12\n    # 184- 6\n    # 185- 10\n    # 186- 12\n    # 187- 10\n    # 188- 12\n    # 189- 6\n    # 190- 10\n    # 191- 12\n    # 192- 10\n    # 193- 12\n    # 194- 6\n    # 195- 10\n    # 196- 12\n    # 197- 10\n    # 198- 12\n    # 199- 6\n    # 200- 10\n    # 201- 12\n    # 202- 10\n    # 203- 12\n    # 204- 6\n    # 205- 10\n    # 206- 12\n    # 207- 10\n    # 208- 12\n    # 209- 6\n    # 210- 10\n    # 211- 12\n    # 212- 10\n    # 213- 12\n    # 214- 6\n    # 215- 10\n    # 216- 12\n    # 217- 10\n    # 218- 12\n    # 219- 6\n    # 220- 10\n    # 221- 12\n    # 222- 10\n    # 223- 12\n    # 224- 6\n    # 225- 10\n    # 226- 12\n    # 227- 10\n    # 228- 12\n    # 229- 6\n    # 230- 10\n    # 231- 12\n    # 232- 10\n    # 233- 12\n    # 234- 6\n    # 235- 10\n    # 236- 12\n    # 237- 10\n    # 238- 12\n    # 239- 6\n    # 240- 10\n    # 241- 12\n    # 242- 10\n    # 243- 12\n    # 244- 6\n    # 245- 10\n    # 246- 12\n    # 247- 10\n    # 248- 12\n    # 249- 6\n    # 250- 10\n    # 251- 12\n    # 252- 10\n    # 253- 12\n    # 254- 6\n    # 255- 10\n    # 256- 12\n    # 257- 10\n    # 258- 12\n    # 259- 6\n    # 260- 10\n    # 261- 12\n    # 262- 10\n    # 263- 12\n    # 264- 6\n    # 265- 10\n    # 266- 12\n    # 267- 10\n    # 268- 12\n    # 269- 6\n    # 270- 10\n    # 271- 12\n    # 272- 10\n    # 273- 12\n    # 274- 6\n    # 275- 10\n    # 276- 12\n    # 277- 10\n    # 278- 12\n    # 279- 6\n    # 280- 10\n    # 281- 12\n    # 282- 10\n    # 283- 12\n    # 284- 6\n    # 285- 10\n    # 286- 12\n    # 287- 10\n    # 288- 12\n    # 289- 6\n    # 290- 10\n    # 291- 12\n    # 292- 10\n    # 293- 12\n    # 294- 6\n    # 295- 10\n    # 296- 12\n    # 297- 10\n    # 298- 12\n    # 299- 6\n    # 300- 10\n    # 301- 12\n    # 302- 10\n    # 303- 12\n    # 304- 6\n    # 305- 10\n    # 306- 12\n    # 307- 10\n    # 308- 12\n    # 309- 6\n    # 310- 10\n    # 311- 12\n    # 312- 10\n    # 313- 12\n    # 314- 6\n    # 315- 10\n    # 316- 12\n    # 317- 10\n    # 318- 12\n    # 319- 6\n    # 320- 10\n    # 321- 12\n    # 322- 10\n    # 323- 12\n    # 324- 6\n    # 325- 10\n    # 326- 12\n    # 327- 10\n    # 328- 12\n    # 329- 6\n    # 330- 10\n    # 331- 12\n    # 332- 10\n    # 333- 12\n    # 334- 6\n    # 33"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (a * (3*5/2)) + (a * (5/2))\n    print(f'perimeter of {a} is {p}')\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*(math.sqrt(5)-1)*a)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in s:\n        if i =='std':\n            c += 1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            c += 1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    s = s.replace('.',' ')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('/','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','')\n    s = s.replace('%','')\n    s = s.replace('=','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('*','"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    if len(s) == 0:\n        return 0\n    else:\n        if s.count(\"std\") > 0:\n            return 1 + count_occurance(s[s.find(\"std\")+4:])\n        else:\n            return count_occurance(s[1:])\n        \ndef palindrome_permutation(s):\n    '''\n    Write a function to check if a string is a permutation of a palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s.count(\"\") > 0:\n            return False\n        else:\n            return True if s.find(\"\") == -1 and palindrome_permutation(s[1:]) else palindrome_permutation(s[1:])\n    \n    \n    \ndef remove_vowels(s):\n    '''\n    Write a function that returns a new string that has no vowels.\n    '''\n    \n    if len(s) == 0:\n        return \"\"\n    else:\n        if s[0] in \"aeiou\":\n            return remove_vowels(s[1:])\n        else:\n            return s[0] + remove_vowels(s[1:])\n        \n        \ndef delete_vowels(s):\n    '''\n    Write a function that returns a new string that has no vowels.\n    '''\n    \n    if len(s) == 0:\n        return \"\"\n    else:\n        if s[0] in \"aeiou\":\n            return delete_vowels(s[1:])\n        else:\n            return s[0] + delete_vowels(s[1:])\n        \ndef find_duplicate_char(s):\n    '''\n    Write a function that returns the first duplicate char in a given string.\n    '''\n    \n    if len(s) == 0:\n        return \"\"\n    else:\n        if s.count(s[0]) > 1:\n            return s[0]\n        else:\n            return find_duplicate_char(s[1:])\n        \ndef find_duplicate_char(s):\n    '''\n    Write a function that returns the first duplicate char in a given string.\n    '''\n    \n    if len(s) == 0:\n        return \"\"\n    else:\n        if s.count(s[0]) > 1:\n            return s[0]\n        else:\n            return find_duplicate_char(s[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return find_common_char(s[1:], t[1:])\n        else:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n    '''\n    Write a function that returns a list containing the common chars in both strings.\n    '''\n    \n    if len(s) == 0 or len(t) == 0:\n        return []\n    else:\n        if s[0] == t[0]:\n            return [s[0]] + find_common_char(s[1:], t[1:])\n        else:\n            return find_common_char(s[1:], t[1:])\n        \ndef find_common_char(s, t):\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    return s.count('std')\n    \n    \ndef count_occurance_solution(s):\n    '''\n    We can use the 'in' function to check if a string is part of another string.\n    '''\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution2(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution3(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution4(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution5(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution6(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution7(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution8(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution9(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution10(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution11(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution12(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution13(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution14(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution15(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution16(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution17(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution18(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution19(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution20(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution21(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution22(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution23(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution24(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution25(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution26(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution27(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution28(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution29(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution30(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution31(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution32(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution33(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution34(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution35(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution36(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution37(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution38(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution39(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution40(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution41(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution42(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution43(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution44(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution45(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution46(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution47(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution48(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution49(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution50(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution51(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution52(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution53(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution54(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution55(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution56(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution57(s):\n    return s.count('std') if'std' in s else 0\n    \n    \ndef count_occurance_solution58(s):\n    return s.count('std') if'std' i"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    for i in s:\n        if i =='s':\n            n += 1\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 't' or i == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    dictionary = {\n        'int': int,\n        'float': float,\n        'str': str\n    }\n    \n    for i in range(len(test_tuple)):\n        if not type(test_tuple[i]) in dictionary.values():\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    is_equal = True\n    \n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            is_equal = False\n            break\n    return is_equal\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(f\"This is your data: {test_tuple}\")\n    is_same_type = type(test_tuple) == type((\"a\", \"b\", \"c\"))\n    print(f\"Is this tuple of same type? {is_same_type}\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    assert isinstance(test_tuple, tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #print(test_tuple)\n    if type(test_tuple)==tuple:\n        for i in test_tuple:\n            if type(i)==int or type(i)==float or type(i)==bool:\n                pass\n            else:\n                print(\"Data type in tuple is not same as int, float, bool\")\n                return False\n        return True\n    else:\n        print(\"Enter a tuple\")\n        return False\n    \ndef list_to_tuple(a_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    a_tuple=tuple(a_list)\n    return a_tuple\n    \ndef tuple_to_list(a_tuple):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    a_list=list(a_tuple)\n    return a_list\n    \ndef a_bigger_than_b(a,b):\n    '''\n    Write a function to check if first element in list is greater than second element.\n    '''\n    if a>b:\n        return True\n    else:\n        return False\n        \ndef sum_list(numbers):\n    '''\n    Write a function to find the sum of all elements in a list.\n    '''\n    sum=0\n    for i in numbers:\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    assert type(test_tuple) == tuple\n    for ele in test_tuple:\n        assert type(ele) == int or type(ele) == float or type(ele) == bool\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return isinstance(test_tuple, tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return type(test_tuple) == tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check = False\n    for i in test_tuple:\n        if not isinstance(i, (int, float, str, bool)):\n            check = False\n            break\n    if check:\n        print(f\"The given tuple of numbers has type: {type(test_tuple)}\")\n    else:\n        print(f\"The given tuple of numbers does not have type: {type(test_tuple)}\")\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Brute Force Solution\n    # Time O(n) | Space O(1)\n    majority = None\n    for i in range(n):\n        if majority is None:\n            majority = arr[i]\n        else:\n            if arr[i]!= majority:\n                majority = None\n            else:\n                majority = arr[i]\n    return majority\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n // 2] == x:\n        return True\n    return False\n    \n    '''\n    n = len(arr)\n    \n    # Search a sorted array and if we find the element, it means its\n    # the majority element, if we don't find the element, it means it's\n    # not the majority element\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # The idea is that when we have a majority element, we can check if the majority element occurs more than n/2 times in the array. We can perform this check by scanning the array once and count how many times the element occurs in the array. If the count is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        if count > n // 2:\n            return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to their frequencies. If the frequencies of the elements in the array is greater than the length of the array, then the element is a majority element. If not, then it isn't.\n    def is_majority_element(arr, n, x):\n        count = 0\n        d = {}\n        for i in range(n):\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n        for k,v in d.items():\n            if v > n // 2:\n                return True\n        return False\n    '''\n    \n    '''\n    # This method is O(n) Time and O(1) Space\n    # In this method, we will use a dictionary to map the elements in the array to thei"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            start = mid + 1\n        elif arr[mid]!= x:\n            end = mid - 1\n    return (start == n/2 + 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    elif arr[n//2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.sort()\n    a = arr[n//2]\n    c = 0\n    if arr.count(x) > n//2:\n        c = arr.count(x)\n    if c == n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True if arr[0] == x else False\n    else:\n        if arr[n//2] == x:\n            return True\n        elif arr[n//2]!= x:\n            return False\n    \n    \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x >= 0 and x <= arr[n - 1]:\n        n = len(arr)\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = str(n)\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # the number of bits in the given number\n    bit = 0\n    # the number of 1 bits in the given number\n    count = 0\n    while(n):\n        # print(n,bit)\n        if(n & 1):\n            count = count + 1\n        bit = bit + 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n:\n        res += n & 1\n        n >>= 1\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = str(bin(n))[2:]\n    c = s.count('1')\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binary = str(bin(n))\n    binary = binary.split('b')[1]\n    return binary.count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    for i in range(len(str(bin(n)))-2):\n        if(str(bin(n))[i] == '1'):\n            count += 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    \n    count=0\n    while (n):\n        count += 1\n        n = (n & (n - 1))\n    return count\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count = count + 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = str.split(\" \")\n    new_list = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_list.append(s[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1 = []\n    str = list(str)\n    for i in range(len(str)):\n        if i%2==0:\n            list1.append(str[i])\n    print(\"\".join(list1))\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    newstr = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            newstr += str[i]\n    return newstr\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l=list(str)\n    for i in range(len(l)):\n        if i%2==1:\n            l.remove(l[i])\n    return ''.join(l)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_len = len(str)\n    for i in range(str_len):\n        if i % 2 == 0:\n            continue\n        else:\n            str = str.replace(str[i], \"\")\n    print(str)\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = str.lower()\n    # print(str)\n    # dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    # print(dict)\n    # for i in range(len(str)):\n    #     if i%2 == 0:\n    #         str = str.replace(str[i], '')\n    #     else:\n    #         pass\n    # print(str)\n    return ''.join(c for i, c in enumerate(str) if i % 2 == 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.split()\n    list_str = []\n    for i in str:\n        if(i[0].isdigit()):\n            list_str.append(i)\n    return \" \".join(list_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[::2]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = []\n    for i in range(0,len(str)):\n        if i%2==0:\n            l.append(str[i])\n    return ''.join(l)\n        \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # string = \"abcdefgh\"\n    # odd_values = [char for index, char in enumerate(string) if index % 2!= 0]\n    # return ''.join(odd_values)\n    return ''.join([char for index, char in enumerate(str) if index % 2!= 0])\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\nprint(min_of_three(3,4,5))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a,b,c\n    \n    \n    \n    \n    \n    \ndef sort_and_search(lst):\n    '''\n    Write a function to sort the list and search element if it exists.\n    '''\n    lst.sort()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef odd_even(lst):\n    '''\n    Write a function to convert the even and odd list into two lists.\n    '''\n    odd = []\n    even = []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef merge_two_lists(lst1,lst2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    lst = []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function that calculates n! recursively using iteration.\n    '''\n    factorial = 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef reverse_list(lst):\n    '''\n    Write a function that reverses the list.\n    '''\n    lst.reverse()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_all_even_numbers_in_a_range(start,end):\n    '''\n    Write a function to get all even numbers in a given range.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_all_even_numbers_in_a_range(start,end):\n    '''\n    Write a function to get all even numbers in a given range.\n    '''\n    even_numbers = []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef is_prime_recur(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_recur(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        min_number = a\n    elif b<c:\n        min_number = b\n    else:\n        min_number = c\n    print(f\"The minimum number is {min_number}\")\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b and a>c:\n        max_number = a\n    elif b>c:\n        max_number = b\n    else:\n        max_number = c\n    print(f\"The maximum number is {max_number}\")\n    \ndef avg_of_three(a,b,c):\n    '''\n    Write a function to find average of three numbers.\n    '''\n    avg_number = (a+b+c)/3\n    print(f\"The average of three numbers is {avg_number}\")\n    \ndef length_of_string(string):\n    '''\n    Write a function to find length of the string.\n    '''\n    length_of_string = len(string)\n    print(f\"The length of the string is {length_of_string}\")\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the string.\n    '''\n    print(f\"The reverse of the string is {string[::-1]}\")\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    reverse_string(string)\n    if string == string[::-1]:\n        print(f\"Yes the string is palindrome\")\n    else:\n        print(f\"No the string is not palindrome\")\n    \ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2, number):\n            if (number % i) == 0:\n                print(f\"{number} is not prime number\")\n                break\n        else:\n            print(f\"{number} is prime number\")\n    else:\n        print(f\"{number} is not prime number\")\n    \ndef sum_of_n_numbers(n):\n    '''\n    Write a function to find sum of n natural numbers.\n    '''\n    sum_of_n_numbers = 0\n    for i in range(n+1):\n        sum_of_n_numbers = sum_of_n_numbers + i\n    print(f\"The sum of {n} natural numbers is {sum_of_n_numbers}\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nmin_of_three(2,6,1)\nmin_of_three(6,1,2)\nmin_of_three(2,1,6)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c: \n        return a \n    elif b < a < c: \n        return b \n    else: \n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = n-1\n    for i in range(l,r+1):\n        if (n&i)!=0:\n            return False\n    return True\ndef all_Bits_Set_In_The_Range_Reversed(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = n-1\n    for i in range(l,r-1,-1):\n        if (n&i)!=0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if i & n:\n            print(\"The given number {0} has {1} bit set.\".format(i, i & n))\n            return 0\n    print(\"The given number {0} has no bit set.\".format(i))\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # logic\n    if (l+1==r and n&(1<<l) == 0): \n        return True\n    while (l<r): \n        n ^= (1 << l) \n        l += 1\n    return (n == 0) \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit = 0\n    i = l\n    while i<=r:\n        if(i&n!=0):\n            bit=1\n        i=i+1\n    if(bit==1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 0:\n        return n == 0\n    if r == 0:\n        return True\n    if n & (1<<(r-1))!= 0:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n,l-1,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    check = 0\n    # pattern = '{:b}'.format(n)\n    # if pattern == '00000000000000001':\n    #     check = 1\n    # else:\n    #     check = 0\n    for i in range(l,r+1):\n        # print(bin(i))\n        # print(i & n)\n        if i & n == 0:\n            check = 0\n            break\n        else:\n            check = 1\n    return check\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #using binary operators\n    #initialize the variable\n    n=n<<1\n    l=l<<1\n    r=r<<1\n    return (n>=l and n<=r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if(n&i)==0:\n            print(\"Set bit at \",i)\n            continue\n        else:\n            print(\"Bit at \",i,\"is set\")\n            break\n        \nprint(\"\\nAll Bits Set In The Given Range: \")\nall_Bits_Set_In_The_Given_Range(12,3,8)    \nprint(\"\\nAll Bits Set In The Given Range: \")\nall_Bits_Set_In_The_Given_Range(9,1,3)    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l & (1<<(n-1))) == 0 and (r & (1<<(n-1))) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n & (n-1) == 0 and (r-l+1)%2!=0\nprint(all_Bits_Set_In_The_Given_Range(8,0,1))\nprint(all_Bits_Set_In_The_Given_Range(15,0,1))\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # if not arr or len(arr) < n:\n    #     return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, arr.pop(i+1))\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #Solution 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your function here\n    #use swap\n    swap = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[j] < arr[i]:\n                arr[i],arr[j] = arr[j],arr[i]\n                swap += 1\n    return swap\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # check if the array contains negative and positive numbers\n    if len(arr) % 2!= 0:\n        return -1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n] + arr[n:][::-1] + arr[n:]\n    return arr\n    \n    "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # An array with all negative integers followed by all the positive integers\n    # This code should work for any array, not just for numbers with negative and positive sign\n    # i.e. array_to_order should work for any array\n    \n    negatives = []\n    positives = []\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] > 0:\n            positives.append(arr[i])\n    \n    # negative numbers always appear at the beginning\n    # positives always appear at the end\n    \n    negatives.extend(positives)\n    # print(negatives)\n    \n    # negatives.sort()\n    # positives.sort()\n    \n    # print(negatives)\n    # print(positives)\n    \n    sorted_arr = negatives + positives\n    # print(sorted_arr)\n    \n    return sorted_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # O(n)\n    # print(arr)\n    if n > len(arr):\n        return\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    i = 0\n    while i < n and i < len(arr):\n        if arr[i] < 0:\n            res.append(arr[i])\n        else:\n            res.append(-1)\n        i += 1\n    while i < len(arr):\n        res.append(arr[i])\n        i += 1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    string = str1\n    n = string.replace(' ','')\n    if len(n)==0:\n        return string\n    else:\n        return n\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for index,item in enumerate(str1):\n        if item =='':\n            str1 = str1[:index] + char + str1[index + 1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    count = 0\n    while count < len(str1):\n        if str1[count] =='':\n            str1 = str1[0:count] + char + str1[count+1:]\n        count += 1\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','')\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=''\n    for char in str1:\n        if char =='':\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1:\n        return []\n    else:\n        l = len(list1)\n        lst = []\n        for i in range(n):\n            lst.append(list1[i])\n        for i in range(n,l):\n            if list1[i] > lst[0]:\n                lst[0] = list1[i]\n                heapq.heapify(lst)\n        return lst\n        \ndef min_pair(list1,list2):\n    '''\n    Write a function that takes in two non-empty lists of integers and returns a new list containing the pair of numbers (one from each list) \n    that has the smallest absolute difference.\n    '''\n    if not list1 or not list2:\n        return []\n    else:\n        l1 = len(list1)\n        l2 = len(list2)\n        if l1<l2:\n            for i in range(l2):\n                if list1[i] < list2[i]:\n                    return []\n        else:\n            for i in range(l1):\n                if list1[i] < list2[i]:\n                    return []\n        list1_sorted = sorted(list1)\n        list2_sorted = sorted(list2)\n        if l1<l2:\n            for i in range(l2):\n                if list1_sorted[i] < list2_sorted[i]:\n                    return []\n        else:\n            for i in range(l1):\n                if list1_sorted[i] < list2_sorted[i]:\n                    return []\n        result = []\n        for i in range(l1):\n            if list1_sorted[i] - list2_sorted[i]!= 0:\n                result.append([list1_sorted[i],list2_sorted[i]])\n        return result\n    \ndef in_degree(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the number of nodes (keys) as the value and a list of all of the nodes' in-degrees (values)\n    '''\n    if not list1:\n        return {}\n    else:\n        dic = {}\n        for i in range(len(list1)):\n            if list1[i] not in dic:\n                dic[list1[i]] = 1\n            else:\n                dic[list1[i]] += 1\n        return dic\n    \ndef end_points(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the number of nodes (keys) as the value and a list of all of the nodes' out-degrees (values)\n    '''\n    if not list1:\n        return {}\n    else:\n        dic = {}\n        for i in range(len(list1)):\n            if list1[i] not in dic:\n                dic[list1[i]] = 1\n            else:\n                dic[list1[i]] += 1\n        for i in range(len(list1)):\n            if dic[list1[i]] == 1:\n                dic[list1[i]] -= 1\n                if list1[i] not in dic:\n                    dic[list1[i]] = 1\n        return dic\n    \ndef top_ranked(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the n top ranked items from the list.\n    '''\n    if not list1:\n        return []\n    else:\n        l = len(list1)\n        lst = []\n        for i in range(n):\n            lst.append(list1[i])\n        for i in range(n,l):\n            if list1[i] > lst[0]:\n                lst[0] = list1[i]\n                heapq.heapify(lst)\n        return lst\n        \ndef ampersand_merge(list1,list2):\n    '''\n    Write a function that takes in two sorted lists and returns a sorted list containing the items that are in both lists.\n    '''\n    if not list1 or not list2:\n        return []\n    else:\n        l1 = len(list1)\n        l2 = len(list2)\n        if l1<l2:\n            for i in range(l2):\n                if list1[i] < list2[i]:\n                    return []\n        else:\n            for i in range(l1):\n                if list1[i] < list2[i]:\n                    return []\n        list1_sorted = sorted(list1)\n        list2_sorted = sorted(list2)\n        result = []\n        for i in range(l1):\n            if list1_sorted[i] == list2_sorted[i]:\n                result.append(list1_sorted[i])\n        return result\n    \ndef num_greater(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the number of elements in the list greater than n.\n    '''\n    if not list1:\n        return 0\n    else:\n        l = len(list1)\n        lst = []\n        for i in range(l):\n            lst.append(list1[i])\n        for i in range(l):\n            if lst[i] > n:\n                return l-i\n                \ndef stock_split(lst,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the items in the list whose sum is divisible by n.\n    '''\n    if not lst or n <= 0:\n        return []\n    else:\n        list1 = []\n        lst1 = lst[:]\n        for i in range(len(lst)):\n            lst1.pop(0)\n            lst1.append(lst[i])\n            if sum(lst1)%n == 0:\n                list1.append(lst1[i])\n        return list1\n    \ndef letter_grade(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the letter grade as the key and the number of times it occurs as the value.\n    '''\n    if not list1:\n        return {}\n    else:\n        dic = {}\n        for i in range(len(list1)):\n            if list1[i] not in dic:\n                dic[list1[i]] = 1\n            else:\n                dic[list1[i]] += 1\n        for i in range(len(list1)):\n            if dic[list1[i]] == 1:\n                dic[list1[i]] -= 1\n                if list1[i] not in dic:\n                    dic[list1[i]] = 1\n        return dic\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)>=n:\n        return list1[-n:]\n    else:\n        return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    \ndef larg_nindex(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0])\n    \ndef larg_nnum_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True)\n    \ndef larg_nindex_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True)\n    \n    \n    \n    \ndef larg_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n    \ndef larg_nindex_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nsmallest(n,list1,key=lambda x: x[0])\n    \ndef larg_nnum_3_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nsmallest(n,list1,key=lambda x: x[0],reverse=True)\n    \ndef larg_nindex_3_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nsmallest(n,list1,key=lambda x: x[0],reverse=True)\n    \n    \n    \n    \ndef larg_nnum_3_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    \ndef larg_nindex_3_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0])\n    \ndef larg_nnum_3_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True)\n    \ndef larg_nindex_3_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True)\n    \n    \n    \n    \ndef larg_nnum_3_5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1])\n    \ndef larg_nindex_3_5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1])\n    \ndef larg_nnum_3_6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True)\n    \ndef larg_nindex_3_6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True)\n    \n    \n    \n    \ndef larg_nnum_3_7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2])\n    \ndef larg_nindex_3_7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2])\n    \ndef larg_nnum_3_8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2],reverse=True)\n    \ndef larg_nindex_3_8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2],reverse=True)\n    \n    \n    \n    \ndef larg_nnum_3_9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2],reverse=True,key=lambda x: x[3])\n    \ndef larg_nindex_3_9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2],reverse=True,key=lambda x: x[3])\n    \ndef larg_nnum_3_10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1,key=lambda x: x[0],reverse=True,key=lambda x: x[1],reverse=True,key=lambda x: x[2],reverse=True,key=lambda "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    for i in range(n):\n        list1.pop(0)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    small_heap=[]\n    for i in range(n):\n        heapq.heappush(small_heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>small_heap[0]:\n            heapq.heappop(small_heap)\n            heapq.heappush(small_heap,list1[i])\n    return small_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap=[]\n    for i in range(len(list1)):\n        heapq.heappush(max_heap,(list1[i],i))\n    return [list1[i] for i in range(n)]\n    #I am not using the max heap\n    # using max heap and getting the largest n numbers\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = []\n    for i in range(len(list1)):\n        largest.append(list1[i])\n    largest = sorted(largest,reverse=True)\n    largest = largest[n:]\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    nlargest = heapq.nlargest(n,list1)\n    return nlargest\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    nlargest = []\n    for i in range(n):\n        # print(i)\n        nlargest.append(list1[i])\n    return nlargest\ndef large_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    nlargest = heapq.nlargest(n,list1)\n    return nlargest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # def n_largest_items(list1,n):\n    #     list1.sort()\n    #     list1.reverse()\n    #     n=n+1\n    #     return list1[:n]\n    heap = []\n    for i in range(len(list1)):\n        if len(heap)<n:\n            heapq.heappush(heap,list1[i])\n        else:\n            heapq.heappushpop(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface = pi*r**2\n    bottom_area = 2*pi*r*h\n    return surface + bottom_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r>=h:\n        print('Please enter a smaller value for radius or height')\n        return 0\n    else:\n        def lateral_surface_area():\n            def lateral_surface_area_cylinder(r,h):\n                surface_area = pi*(r**2)\n                return surface_area\n            return lateral_surface_area_cylinder(r,h)\n        return lateral_surface_area()\n    \n    "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*(r**2)*(h/3)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return 2*pi*r*h\n        \ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return a*b\n    \ndef parallelogram_rectangle(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return a*b\n    \ndef rectangle_parallelogram(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return a*b\n    \ndef area_parallelepiped(a,b,h):\n    '''\n    Write a function to find the area of a parallelepiped.\n    '''\n    \n    return a*b*h\n    \ndef parallelepiped_cylinder(r,h):\n    '''\n    Write a function to find the area of a parallelepiped.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return 2*pi*r*h\n        \ndef cylinder_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n        \ndef cone_cylinder(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n        \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return (4/3)*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return (pi/3)*r**2*h\n        \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return (pi/3)*r**2*h\n        \ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_rectangle(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    return a*b*c\n    \ndef rectangle_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_parallelogram(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    \n    return a*b*c\n    \ndef parallelogram_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return 2*pi*r*h\n        \ndef cylinder_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n        \ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    \n    return 2*pi*(r1**2-r2**2)*r1*r2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return 4*pi*r**3/3\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return 2*pi*r**2*h\n        \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n    \ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_rectangle(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    return a*b*c\n    \ndef rectangle_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    return 2*pi*(r1**2-r2**2)*r1*r2\n    \ndef cylinder_cuboid(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    return pi*r1**2*r2\n    \ndef volume_paraboloid(r,h):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    \n    return pi*r**2*h\n    \ndef paraboloid_cuboid(r,h):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    \n    return pi*r**2*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n    \ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_rectangle(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    return a*b*c\n    \ndef rectangle_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    return a*b*c\n    \ndef cuboid_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return 2*pi*r**2*h\n        \ndef cylinder_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n        \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return 4*pi*r**3/3\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    if not h:\n        return 0\n    else:\n        return pi*r**2*h\n        \nde"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=pi*r**2\n    b=2*pi*r*h\n    c=2*pi*r*h\n    return a*b-2*a*c\n    \nprint(lateralsuface_cylinder(5,4))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    # Equation\n    f = 2*math.pi*r*h\n    # Calculate\n    d = h*math.pi*r*2\n    # Calculate\n    l = math.sqrt(f*f - 4*math.pi*r*r)\n    # Calculate\n    l1 = 2*r*math.atan(math.sqrt(l/math.pi))\n    # Calculate\n    l2 = d + l1\n    # Calculate\n    l3 = f + l2\n    # Calculate\n    l4 = l3 + l2\n    # Calculate\n    l5 = (math.pi - math.atan(math.sqrt(l/math.pi)))*r\n    # Calculate\n    l6 = d + l5\n    # Calculate\n    l7 = f + l6\n    # Calculate\n    l8 = l7 + l6\n    # Calculate\n    l9 = d + l8\n    # Calculate\n    l10 = l9 + l8\n    # Calculate\n    l11 = (math.pi - math.atan(math.sqrt(l/math.pi)))*r\n    # Calculate\n    l12 = d + l11\n    # Calculate\n    l13 = f + l12\n    # Calculate\n    l14 = l13 + l12\n    # Calculate\n    l15 = d + l14\n    # Calculate\n    l16 = f + l15\n    # Calculate\n    l17 = l16 + l15\n    # Calculate\n    l18 = d + l17\n    # Calculate\n    l19 = f + l18\n    # Calculate\n    l20 = l19 + l18\n    # Calculate\n    l21 = d + l20\n    # Calculate\n    l22 = f + l21\n    # Calculate\n    l23 = l22 + l21\n    # Calculate\n    l24 = d + l23\n    # Calculate\n    l25 = f + l24\n    # Calculate\n    l26 = l25 + l24\n    # Calculate\n    l27 = d + l26\n    # Calculate\n    l28 = f + l27\n    # Calculate\n    l29 = l28 + l27\n    # Calculate\n    l30 = d + l29\n    # Calculate\n    l31 = f + l30\n    # Calculate\n    l32 = l31 + l30\n    # Calculate\n    l33 = d + l32\n    # Calculate\n    l34 = f + l33\n    # Calculate\n    l35 = l34 + l33\n    # Calculate\n    l36 = d + l35\n    # Calculate\n    l37 = f + l36\n    # Calculate\n    l38 = l37 + l36\n    # Calculate\n    l39 = d + l38\n    # Calculate\n    l40 = f + l39\n    # Calculate\n    l41 = l40 + l39\n    # Calculate\n    l42 = d + l41\n    # Calculate\n    l43 = f + l42\n    # Calculate\n    l44 = l43 + l42\n    # Calculate\n    l45 = d + l44\n    # Calculate\n    l46 = f + l45\n    # Calculate\n    l47 = l46 + l45\n    # Calculate\n    l48 = d + l47\n    # Calculate\n    l49 = f + l48\n    # Calculate\n    l50 = l49 + l48\n    # Calculate\n    l51 = d + l50\n    # Calculate\n    l52 = f + l51\n    # Calculate\n    l53 = l52 + l51\n    # Calculate\n    l54 = d + l53\n    # Calculate\n    l55 = f + l54\n    # Calculate\n    l56 = l55 + l54\n    # Calculate\n    l57 = d + l56\n    # Calculate\n    l58 = f + l57\n    # Calculate\n    l59 = l58 + l57\n    # Calculate\n    l60 = d + l59\n    # Calculate\n    l61 = f + l60\n    # Calculate\n    l62 = l61 + l60\n    # Calculate\n    l63 = d + l62\n    # Calculate\n    l64 = f + l63\n    # Calculate\n    l65 = l64 + l63\n    # Calculate\n    l66 = d + l65\n    # Calculate\n    l67 = f + l66\n    # Calculate\n    l68 = l67 + l66\n    # Calculate\n    l69 = d + l68\n    # Calculate\n    l70 = f + l69\n    # Calculate\n    l71 = l70 + l69\n    # Calculate\n    l72 = d + l71\n    # Calculate\n    l73 = f + l72\n    # Calculate\n    l74 = l73 + l72\n    # Calculate\n    l75 = d + l74\n    # Calculate\n    l76 = f + l75\n    # Calculate\n    l77 = l76 + l75\n    # Calculate\n    l78 = d + l77\n    # Calculate\n    l79 = f + l78\n    # Calculate\n    l80 = l79 + l78\n    # Calculate\n    l81 = d + l80\n    # Calculate\n    l82 = f + l81\n    # Calculate\n    l83 = l82 + l81\n    # Calculate\n    l84 = d + l83\n    # Calculate\n    l85 = f + l84\n    # Calculate\n    l86 = l85 + l84\n    # Calculate\n    l87 = d + l86\n    # Calculate\n    l88 = f + l87\n    # Calculate\n    l89 = l88 + l87\n    # Calculate\n    l90 = d + l89\n    # Calculate\n    l91 = f + l90\n    # Calculate\n    l92 = l91 + l90\n    # Calculate\n    l93 = d + l92\n    # Calculate\n    l94 = f + l93\n    # Calculate\n    l95 = l94 + l93\n    # Calculate\n    l96 = d + l95\n    # Calculate\n    l97 = f + l96\n    # Calculate\n    l98 = l97 + l96\n    # Calculate\n    l99 = d + l98\n    # Calculate\n    l100 = f + l99\n    # Calculate\n    l101 = l100 + l99\n    # Calculate\n    l102 = d + l101\n    # Calculate\n    l103 = f + l102\n    # Calculate\n    l104 = l103 + l102\n    # Calculate\n    l105 = d + l104\n    # Calculate\n    l106 = f + l105\n    # Calculate\n    l107 = l106 + l105\n    # Calculate\n    l108 = d + l107\n    # Calculate\n    l109 = f + l108\n    # Calculate\n    l110 = l109 + l108\n    # Calculate\n    l111 = d + l110\n    # Calculate\n    l112 = f + l111\n    # Calculate\n    l113 = l112 + l111\n    # Calculate\n    l114 = d + l113\n    # Calculate\n    l115 = f + l114\n    # Calculate\n    l116 = l115 + l114\n    # Calculate\n    l117 = d + l116\n    # Calculate\n    l118 = f + l117\n    # Calculate\n    l119 = l118 + l117\n    # Calculate\n    l120 = d + l119\n    # Calculate\n    l121 = f + l120\n    # Calculate\n    l122 = l121 + l120\n    # Calculate\n    l123 = d + l122\n    # Calculate\n    l124 = f + l123\n    # Calculate\n    l125 = l124 + l123\n    # Calculate\n    l126 = d + l125\n    # Calculate\n    l127 = f + l126\n    # Calculate\n    l128 = l127 + l126\n    # Calculate\n    l129 = d + l128\n    # Calculate\n    l130 = f + l129\n    # Calculate\n    l131 = l130 + l129\n    # Calculate\n    l132 = d + l131\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = PI*r/2 # pi/2*r\n    sa = (2*PI*r*h + 2*PI*h*r)\n    return sa\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert type(l) == float, \"Error: only positive float values are accepted as side length\"\n    assert l >= 0, \"Error: side length should be positive\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(round(((l**3)/6) * (-1), 2))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return(int(l*l*l))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Assign values to variables.\n    s = l ** 3\n    # Return the volume.\n    return s\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n&1):\n        return n\n    else:\n        return n|1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))\n    #print(n | (1 << (n.bit_length() - 1)))\n    #return(even_bit_set_number(10))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(((n) & 0xAAAAAAAA) >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | n >> 1\nprint(even_bit_set_number(0x6C))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print('\\n\\nEven Bit Set\\n')\n    print(bin(n))\n    return 0\neven_bit_set_number(0xAB)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # n = int(input(\"enter the number : \"))\n    return n | (n << 1) | (n << 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0b111111\n    \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert input number in string format to int\n    n = str(n)\n    # Extract all digits from string\n    n = list(n)\n    n = map(int, n)\n    \n    # Iterate for each digit and set even bits of each digit\n    for i in n:\n        # Check if current bit is even\n        if i & 0x01:\n            # Invert even bit to set 0\n            i = i ^ 0x01\n        # Append inverse bit to digit\n        n.append(i)\n    \n    # Convert digit list to string\n    n = ''.join(map(str, n))\n    print(n)\n    return int(n)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # dict = {}\n    # for x in test_list:\n    #     if x in dict:\n    #         dict[x] += 1\n    #     else:\n    #         dict[x] = 1\n    # return dict\n    # counter = Counter(test_list)\n    # return counter\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in range(len(test_list)):\n        if test_list[i] in test_dict:\n            test_dict[test_list[i]] += 1\n        else:\n            test_dict[test_list[i]] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_list = []\n    for i in range(len(test_list)):\n        a, b = test_list[i]\n        a = tuple(a)\n        tuple_list.append(a)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tup in test_list:\n        if tup not in occurences:\n            occurences[tup] = 1\n        else:\n            occurences[tup] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = {}\n    for x in test_list:\n        if x in counter:\n            counter[x] += 1\n        else:\n            counter[x] = 1\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #list of tuples\n    new_list = []\n    #counter for each unique item\n    x = 1\n    #for each item in list\n    for i in range(len(test_list)):\n        #add the item to the new_list\n        new_list.append(test_list[i][0])\n    #dict of the counter\n    dictionary = dict(Counter(new_list))\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= \" \":\n            for j in range(i+1, len(str)):\n                if str[j]!= \" \":\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Using naive method.\n    # Time complexity: O(n*m)\n    # Space complexity: O(1)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            substr = str[i:j+1]\n            if substr.strip():\n                count += 1\n    return count\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #for i in range(0,len(str)):\n    #    if str[i]==' ':\n    #        str=str[i+1:]\n    #        break\n    #l=[]\n    #l.append(str)\n    #return len(l)\n    return len(str.split())\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    from collections import Counter\n    a = str.split(' ')\n    #print(a)\n    n = len(a)\n    #print(n)\n    b = 0\n    for i in range(0, n-1):\n        if len(a[i])==0:\n            b += 1\n    print(b)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_count = 0\n    i = 0\n    while (i < len(str)):\n        if (str[i]!=''):\n            str_count += 1\n        else:\n            i += 1\n        i += 1\n    return str_count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    result = 0\n    i = 1\n    j = 0\n    while i < m + 1:\n        if i > j and i < 2 * j + 1:\n            result += m\n        j += 1\n        i = j\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 1\n    for i in range(1, m + 1):\n        if i == m:\n            return count\n        else:\n            count *= i\n            i += 1\n        if count > m:\n            break\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += (m+1) * m // 2\n    return total\n    \nprint(get_total_number_of_sequences(10, 5))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #can't have zero or more than m numbers\n    if m == 0 or n == 0:\n        return 0\n    \n    #if there is 1 number or more than 2, it is just possible to add that number to a sequence of length 1\n    if n == 1:\n        return 1\n    \n    #first calculate the number of possible sequences of length n-1\n    sequences_of_length_n_minus_1 = get_total_number_of_sequences(m,n-1)\n    \n    #then for each possible sequence, add one more element to it and see if that number is possible\n    #e.g. if there are 3 possible sequences of length n-1, there are 3 possible sequences of length n-2, etc.\n    #in the n-th possible sequence, there are 2 possible elements, add them to the n-th element of the sequence and see if the number is valid\n    #if it is, then there are 1 possible sequence of length n+1\n    return sequences_of_length_n_minus_1 + sequences_of_length_n_minus_1*(n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    ans = 0\n    for i in range(1,m+1):\n        for j in range(i,m+1):\n            if i<j<m:\n                ans += (m-j)*(m-j+1)/2\n    return int(ans)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        if m == 1:\n            return 1\n        else:\n            return 0\n    else:\n        return sum(get_total_number_of_sequences(m,n-1) for x in range(0,m//2)) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    total = 0\n    for i in range(m, n+1):\n        if is_sequence_valid(i):\n            total += 1\n    \n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #First we need to convert the integers to strings and then put them in a list\n    m_string = str(m)\n    n_string = str(n)\n    m_list = list(m_string)\n    n_list = list(n_string)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a list\n    seq_list = []\n    \n    # Iterate over the first n elements\n    for i in range(n):\n        # Initialize a number_of_elements_list for each element in the sequence\n        number_of_elements_list = []\n        \n        # Iterate over the remaining elements in the sequence\n        for j in range(i,n):\n            # Add the number of elements at this index to the number_of_elements_list\n            number_of_elements_list.append(j-i+1)\n            # Append the sum of the number_of_elements_list to seq_list\n            seq_list.append(sum(number_of_elements_list))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    x = 1\n    y = 0\n    z = 0\n    while x <= m:\n        y = 1\n        while y <= n:\n            z = 1\n            while z <= x:\n                print(x,y,z)\n                y+=1\n                z+=1\n            y=1\n            x+=1\n        x=1\n        y=0\n    return x"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2[0]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[0]\n    list2[0]=None\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for item in list2:\n        list1.append(item)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1[-1:] = list2\n    \n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1[-1] = list2[0]\n    # list1[-1] = list2[1]\n    # list1[-1] = list2[2]\n    # list1[-1] = list2[3]\n    # list1[-1] = list2[4]\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count = count + 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for x in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1=str1.lower()\n    return len(str1)\nprint(count_charac(\"hello\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\nprint(count_charac('Python'))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in str1:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Sieve of Eratosthenes, the sieve of Eratosthenes is one of the most efficient algorithms to find all prime numbers less than a given integer.\n    # It is an efficient algorithm, which means that it can efficiently find all primes up to and including a given integer.\n    # The idea is to create a list of primes, and then for each prime in the list, if it is a square, add it to the list.\n    # Then, if the last element is a prime, we are done.\n    # If not, then we find the next largest prime, and repeat the process.\n    # if we can't find a number that is the next perfect square, we have to return the value N.\n    def is_prime(number):\n        if (number <= 1):\n            return False\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if (number % i == 0):\n                return False\n        return True\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    current = 1\n    square = 2\n    while current <= N:\n        square += 1\n        current = math.pow(square,2)\n    return square\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = N-1\n    while(N>=1):\n        if(isPerfectSquare(N)):\n            return N\n        N = N -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=1\n    while(n**2<N):\n        n+=1\n    return n**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N + 1\n    while i * i < N:\n        i = i + 1\n    return i * i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Corner cases \n    if (N <= 0): \n        return -1\n    if (N == 1): \n        return 1\n    # Finding the smallest power of 2 greater than N \n    start = 1\n    end = N // 2 + 1\n    while (start <= end): \n        mid = start + (end - start) // 2\n        if (mid*mid == N): \n            return mid \n        elif (mid*mid < N): \n            start = mid + 1\n        else: \n            end = mid - 1\n    return (start - 1) \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # while loop to iterate until the sqr_root*sqr_root is the number itself \n    while N**0.5!= math.floor(N**0.5): \n        N += 1\n    return N**2 \nprint(next_Perfect_Square(16))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    while True:\n        if n > 1:\n            if (n+1)**2 == n:\n                break\n        n += 1\n    return n-1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    return n*n + 1\n  \nN = int(input())\nprint(next_Perfect_Square(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # To find the next perfect square greater than N\n    # we need to check every number from 2 till N, if the number is a perfect square, we will move on\n    # If the number is not a perfect square, then it is a perfect square. So, we need to move on till we find a number\n    # that is a perfect square. If we do not find any such number, then the number will be the next perfect square\n    \n    # the number can be a perfect square if (a^2) = b^2, where a and b are perfect squares.\n    # a^2 is always a perfect square, so we can start with a^2\n    # find a^2\n    a_squared = N**2\n    # loop over all numbers from 2 to N\n    # if the number is a perfect square, then move on to the next number\n    # else if the number is not a perfect square, then the next number is the next perfect square\n    for i in range(2, N):\n        # if (i * i) is a perfect square, then move on to the next number\n        if (i * i) == a_squared:\n            continue\n        # else, the number is not a perfect square. So, the number after (i * i) is the next perfect square\n        else:\n            return i * i\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print('Given array is', arr)\n    max_sum = 0\n    l = 0\n    r = len(arr)-1\n    print('Start comparing')\n    while(l<=r):\n        if arr[l]<=arr[r]:\n            max_sum = max(max_sum,arr[l]+arr[r])\n            l+=1\n        else:\n            max_sum = max(max_sum,arr[l]+arr[r])\n            r-=1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # if the length is only 1, return the number\n    if(n == 1):\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # 1. Need to find the middle most element. \n    # 2. Traverse the array, if we encounter any element more than the middle most, then we return false.\n    # 3. Traverse the array. If we encounter any element less than the middle most, then we return false.\n    # 4. Traverse from left to right. For each element, we need to calculate the sum. \n    # 5. Compare the two sums. If the sum of the current element is greater than the sum before, then we need to save that sum. \n    # 6. If the sum is less than the sum before, then we need to compare the number before the middle most with the current element. If the number before the middle most is greater than the current element, we don't need to continue, return False. If the number before the middle most is less than the current element, then we need to compare the current element with the next element. If they are both greater, then we need to save that sum. \n    # 7. Return the max sum. \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #initialize variables\n    #minimum_value = min(arr)\n    #maximum_value = max(arr)\n    #dp_array = [0 for x in range(len(arr))]\n    #dp_array[0] = min(arr)\n    #dp_array[len(arr) - 1] = max(arr)\n    #dp_array[1] = dp_array[0] + arr[0]\n    #dp_array[2] = dp_array[1] + arr[1]\n    #for i in range(3, len(arr)):\n        #dp_array[i] = max(dp_array[i-2] + arr[i], dp_array[i-3] + arr[i])\n    #return dp_array[-1]\n    \n    #first try\n    #minimum_value = min(arr)\n    #maximum_value = max(arr)\n    #dp_array = [0 for x in range(len(arr))]\n    #dp_array[0] = minimum_value\n    #dp_array[len(arr)-1] = maximum_value\n    #dp_array[1] = dp_array[0] + arr[0]\n    #for i in range(2, len(arr)):\n        #dp_array[i] = max(dp_array[i-2] + arr[i], dp_array[i-1] + arr[i])\n    #return max(dp_array)\n    \n    #second try\n    minimum_value = min(arr)\n    maximum_value = max(arr)\n    dp_array = [0 for x in range(len(arr))]\n    dp_array[0] = minimum_value\n    dp_array[len(arr)-1] = maximum_value\n    dp_array[1] = dp_array[0] + arr[0]\n    for i in range(2, len(arr)):\n        dp_array[i] = max(dp_array[i-2] + arr[i], dp_array[i-1] + arr[i])\n    return max(dp_array)\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    arr.sort()\n    max_sum = 0\n    \n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + max_sum(arr[:i]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: return arr[0]\n    maxi, mini = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        maxi = max(maxi + arr[i], arr[i])\n        mini = min(mini + arr[i], arr[i])\n        #print(maxi, mini)\n    return max(maxi, mini)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_seq = []\n    bitonic_seq.append(arr[0])\n    curr_max = bitonic_seq[0]\n    bitonic_seq.append(max(bitonic_seq[0], arr[1]))\n    max_ending = bitonic_seq[0]\n    curr_sum = 0\n    for i in range(2, len(arr)):\n        curr_sum = curr_sum + arr[i]\n        if curr_sum > curr_max:\n            curr_max = curr_sum\n            bitonic_seq.append(curr_max)\n        else:\n            bitonic_seq.append(max(max_ending, curr_max))\n            max_ending = max(max_ending, curr_max)\n            curr_max = 0\n            curr_sum = 0\n    return max(bitonic_seq)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Approach: Sort the array and iterate from the beginning, keeping track of the max sum seen in the loop \n    #In each iteration, we find the maximum total seen so far, and the max sum seen in the loop \n    #max_sum[i] = max_sum[i-1] + arr[i]\n    #max_sum[i] = max(max_sum[i-1], max_sum[i-2] + arr[i])\n    #max_sum[i] = max(max_sum[i-2] + arr[i], max_sum[i-1] + arr[i])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i-1])\n    #max_sum[i] = max(arr[i], max_sum[i"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    max_sum_arr = []\n    for i in range(0, size):\n        max_sum_arr.append(0)\n    for i in range(0, size):\n        if i == 0:\n            max_sum_arr[i] = arr[i]\n        elif i == 1:\n            max_sum_arr[i] = max(arr[i], max_sum_arr[i-1] + arr[i])\n        elif i == 2:\n            max_sum_arr[i] = max(arr[i], max_sum_arr[i-2] + arr[i], max_sum_arr[i-1] + arr[i])\n        else:\n            max_sum_arr[i] = max(arr[i], max_sum_arr[i-3] + arr[i-1] + arr[i], max_sum_arr[i-2] + arr[i-1] + arr[i])\n    return max_sum_arr[size-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #base case\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==0:\n        return 0\n    else:\n        max1=max_sum(arr[1:])\n        max2=max_sum(arr[:-1])\n        if arr[0]>max1 and arr[0]>max2:\n            return arr[0]\n        elif arr[-1]>max1 and arr[-1]>max2:\n            return arr[-1]\n        else:\n            return max(arr[0]+max1,arr[-1]+max2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    x = 2\n    y = 1\n    while True:\n        z = (x + y)/2\n        if z == number:\n            return z\n        elif z < number:\n            x = z\n        else:\n            y = z\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    epsilon = 0.00001\n    guess = number / 2.0\n    \n    while abs(guess ** 2 - number) > epsilon:\n        guess = guess - ((guess ** 2) - number) / (2 * guess)\n    \n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = 0.0\n    if number == 0:\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 20\n    tolerance = 0.01\n    step = 0.00001\n    if abs(number) < tolerance:\n        return number\n    low = 0\n    high = number\n    mid = (low + high)/2\n    if abs(mid**2 - number) < tolerance:\n        return mid\n    while abs(mid**2 - number) > tolerance:\n        mid = (low + high)/2\n        if mid**2 - number < 0:\n            low = mid\n        else:\n            high = mid\n    return mid\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return None\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    epsilon = 0.0000001\n    while abs(root - root**2) >= epsilon:\n        root -= (root**2 - number)/(2*root)\n    return root\n    \ndef better_squareroot(number):\n    '''\n    Write a function for computing square roots using the improved method.\n    '''\n    if number == 0:\n        return number\n    if number < 0:\n        number = -number\n    ans = number\n    while abs(ans**2 - number) >= 0.0000001:\n        ans -= (ans**2 - number)/(2*ans)\n    return -ans if number < 0 else ans\n    \ndef main():\n    print(babylonian_squareroot(-100))\n    print(better_squareroot(-100))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number > 1:\n        root = number / 2\n        diff = root ** 2 - number\n        while diff!= 0:\n            root = root - diff / (2 * root)\n            diff = root ** 2 - number\n        return root\n    elif number < 1:\n        return \"number should not be less than 1\"\n    else:\n        return number\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    epsilon = 0.000001\n    guess = number / 2.0\n    num_guesses = 1\n    while abs(guess * guess - number) >= epsilon:\n        guess = guess - (((guess ** 2) - number) / (2 * guess))\n        num_guesses += 1\n    return guess, num_guesses\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # fudge factor to increase the precision of the algorithm\n    epsilon = 0.00001\n    \n    # initial guess\n    guess = number/2\n    \n    # While the guess is not close to the true number\n    while abs(guess*guess-number)>epsilon:\n        \n        # update guess\n        guess = (guess+number/guess)/2\n        \n    # the absolute value of the result\n    return abs(guess)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    step = number / 2\n    prev_step = step\n    while step!= prev_step:\n        prev_step = step\n        step = (number / 2) - (prev_step * prev_step)\n    return step\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # my code\n    if str == \"\":\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for gap in range(1,n):\n        for i in range(n-gap):\n            j=i+gap\n            if str[i]==str[j]:\n                dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #print(len(str))\n    result = 0\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n        result = 1\n    for i in range(n - 1, -1, -1): \n        for j in range(i + 1, n): \n            if str[i] == str[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n                result = max(result, dp[i][j]) \n    return result \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 1\n    start = 0\n    n = len(str)\n    dp = [[0 for i in range(n)] for i in range(n)]\n    for i in range(1,n):\n        for j in range(0,n):\n            if(j>=i):\n                if(str[j]==str[i]):\n                    dp[i][j] = 1 + dp[i-1][j-1]\n                    if(dp[i][j]>max_length):\n                        max_length = dp[i][j]\n                        start = j\n                    else:\n                        start = dp[i][j]\n    print(\"maximum palindrome subsequence of length {} starts at {}\".format(max_length,start+1))\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def is_palindrome(str):\n        if len(str)==0:\n            return True\n        if len(str)==1:\n            return False\n        if str[0]==str[-1]:\n            return is_palindrome(str[1:-1])\n        else:\n            return False\n    \n    def DP(str):\n        d={}\n        n=len(str)\n        for i in range(n):\n            d[i,i] = 1\n        for i in range(n-1):\n            if str[i]==str[i+1]:\n                d[i,i+1] = 2\n            else:\n                d[i,i+1] = 1\n        for j in range(3,n):\n            for i in range(n-j):\n                if str[i]==str[i+j] and d[i+1,i+j-1]>=d[i,i+j-1]+1:\n                    d[i,i+j] = d[i+1,i+j-1]+2\n                else:\n                    d[i,i+j] = max(d[i,i+j-1],d[i+1,i+j])\n        return d[0,n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j]=dp[i+1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str)\n    dp = [[0]*l for i in range(l)]\n    for i in range(l):\n        dp[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    maxlen = 0\n    maxcount = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if len(str[i:j+1])>maxlen:\n                maxlen = len(str[i:j+1])\n                maxcount = 1\n            elif len(str[i:j+1])==maxlen and str[i]==str[j]:\n                maxcount += 1\n    return maxcount\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_rec(s):\n        if not s:\n            return 0\n        if not s[0]:\n            return 0\n        if not s[1]:\n            return 1\n        if s[0]==s[1]:\n            return 2 + lps_rec(s[2:])\n        else:\n            return max(lps_rec(s[2:]), lps_rec(s[1:]), lps_rec(s[0:len(s)-1]))\n    return lps_rec(str)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    num = n - 1\n    while n > 1:\n        n -= 1\n        num -= 1\n        return num / n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (n - 1)\n    \ndef harmonic_sum_recursive(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1\n    using recursion.\n    '''\n    if n == 0:\n        return 1\n    return 1 / (n - 1) + harmonic_sum_recursive(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the nth fibonacci number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacci_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef catalan(n):\n    '''\n    Write a function that takes in an integer n and returns the nth catalan number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    catalan_n = 0\n    for i in range(1, n+1):\n        catalan_n = catalan_n + 2 * catalan(i-1) * catalan(n-i)\n    return catalan_n\n    \ndef catalan_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the nth catalan number.\n    '''\n    catalan_n = 0\n    catalan_n = catalan_n + catalan_recursive(n-1) * catalan_recursive(n-2)\n    return catalan_n\n    \ndef euler_totient(n):\n    '''\n    Write a function that takes in an integer n and returns the Euler totient of n.\n    '''\n    return n * (n - 1) // 2\n    \ndef euler_totient_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the Euler totient of n.\n    '''\n    if n == 0:\n        return 0\n    n -= 1\n    return n * (n - 1) // 2 + euler_totient_recursive(n)\n    \ndef sum_divisors(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of all of the divisors\n    of n.\n    '''\n    divisors_sum = 1\n    if n == 1:\n        return 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n    \ndef sum_divisors_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of all of the divisors\n    of n.\n    '''\n    if n == 1:\n        return 1\n    n -= 1\n    return n * (1 + sum_divisors_recursive(n))\n    \ndef sum_divisors_bit(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of all of the divisors\n    of n using a bitmask.\n    '''\n    def sum_divisors_bit(n):\n        if n == 1:\n            return 1\n        n -= 1\n        return n * (1 + sum_divisors_bit(n))\n    return sum_divisors_bit(n)\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in an integer n and returns True if the integer is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns True if the integer is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    return is_prime(n-1) or is_prime(n-2)\n    \ndef nth_prime(n):\n    '''\n    Write a function that takes in an integer n and returns the nth prime.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    primes = [2, 3]\n    for i in range(3, n):\n        if is_prime_recursive(i) == True:\n            primes.append(i)\n    return primes[-1]\n    \ndef nth_prime_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the nth prime.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    primes = [2, 3]\n    for i in range(3, n):\n        if is_prime_recursive(i) == True:\n            primes.append(i)\n    return primes[-1]\n    \ndef nth_palindrome(n):\n    '''\n    Write a function that takes in an integer n and returns the nth palindrome.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'aba'\n    if n == 3:\n        return 'abba'\n    if n == 4:\n        return 'abab'\n    palindromes = ['a', 'aba', 'abba', 'abab']\n    for i in range(5, n+1):\n        palindromes.append(palindromes[-1] + palindromes[-2])\n    return palindromes[-1]\n    \ndef nth_palindrome_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the nth palindrome.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'aba'\n    if n == 3:\n        return 'abba'\n    if n == 4:\n        return 'abab'\n    if n == 5:\n        return 'abab'\n    palindromes = ['a', 'aba', 'abba', 'abab']\n    for i in range(6, n+1):\n        palindromes.append(palindromes[-1] + palindromes[-2])\n    return palindromes[-1]\n    \ndef range_search(L, n):\n    '''\n    Write a function that takes in a sorted list of integers L and an integer n and returns\n    the index of the nth element in L. If n is outside of the list of integers in L, return -1.\n    '''\n    if n < 0 or n > len(L):\n        return -1\n    if n == len(L):\n        return len(L) - 1\n    middle = len(L) // 2\n    if n > middle:\n        return range_search(L[middle:], n-middle)\n    elif n < middle:\n        return range_search(L[:middle], n)\n    else:\n        return middle\n    \ndef range_search_recursive(L, n):\n    '''\n    Write a function that takes in a sorted list of integers L and an integer n and returns\n    the index of the nth element in L. If n is outside of the list of integers in L, return -1.\n    '"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n + harmonic_sum(n-1))/(2*n)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/((n-1)*(n))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/(1 + n)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    \n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return sorted(list(set(array_nums1) & set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    inter_array = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #intersection = []\n    \n    #for num in array_nums1:\n    #    if num in array_nums2:\n    #        intersection.append(num)\n    \n    #return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    result = []\n    pointer1 = pointer2 = 0\n    \n    while pointer1 < len(array_nums1) and pointer2 < len(array_nums2):\n        first_element = array_nums1[pointer1]\n        second_element = array_nums2[pointer2]\n        if first_element == second_element:\n            result.append(first_element)\n            pointer1 += 1\n            pointer2 += 1\n        elif first_element > second_element:\n            pointer2 += 1\n        else:\n            pointer1 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = array_nums1.copy()\n    array_nums2 = array_nums2.copy()\n    intersection = []\n    while len(array_nums1)>0 and len(array_nums2)>0:\n        if array_nums1[0]==array_nums2[0]:\n            intersection.append(array_nums1.pop(0))\n            array_nums2.pop(0)\n        elif array_nums1[0]<array_nums2[0]:\n            array_nums1.pop(0)\n        else:\n            array_nums2.pop(0)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_array = set(array_nums1)\n    set_array.intersection_update(array_nums2)\n    return list(set_array)\n    \ndef intersection_array_bit_twos_comp(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    bit_twos = 0\n    for i in range(len(array_nums1)):\n        bit_twos |= array_nums1[i]\n    for i in range(len(array_nums2)):\n        bit_twos &= array_nums2[i]\n    return bit_twos\n    \ndef intersection_array_linear(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return sorted(list(set(array_nums1)&set(array_nums2)))\n    \ndef intersection_array_dict(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_dict = dict()\n    for num in array_nums1:\n        array_dict[num] = True\n    for num in array_nums2:\n        if num in array_dict:\n            array_dict[num] = True\n    return array_dict.keys()\n    \ndef intersection_array_zip(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_dict = dict()\n    for num in array_nums1:\n        array_dict[num] = True\n    for num in array_nums2:\n        if num in array_dict:\n            array_dict[num] = True\n    return array_dict.keys()\n    \ndef intersection_set(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    set_nums1 = set(set_nums1)\n    return set_nums1.intersection(set_nums2)\n    \ndef intersection_set_bit_twos_comp(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    bit_twos = 0\n    for i in range(len(set_nums1)):\n        bit_twos |= set_nums1[i]\n    for i in range(len(set_nums2)):\n        bit_twos &= set_nums2[i]\n    return bit_twos\n    \ndef intersection_set_linear(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return sorted(list(set(set_nums1)&set(set_nums2)))\n    \ndef intersection_set_dict(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        if num in array_dict:\n            array_dict[num] = True\n    return array_dict.keys()\n    \ndef intersection_set_zip(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        if num in array_dict:\n            array_dict[num] = True\n    return array_dict.keys()\n    \ndef union_set(set_nums1,set_nums2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    set_nums1 = set(set_nums1)\n    return set_nums1.union(set_nums2)\n    \ndef union_set_bit_twos_comp(set_nums1,set_nums2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    bit_twos = 0\n    for i in range(len(set_nums1)):\n        bit_twos |= set_nums1[i]\n    for i in range(len(set_nums2)):\n        bit_twos &= set_nums2[i]\n    return bit_twos\n    \ndef union_set_linear(set_nums1,set_nums2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return sorted(list(set_nums1.union(set_nums2)))\n    \ndef union_set_dict(set_nums1,set_nums2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        array_dict[num] = True\n    return array_dict.keys()\n    \ndef union_set_zip(set_nums1,set_nums2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        array_dict[num] = True\n    return array_dict.keys()\n    \ndef difference_set(set_nums1,set_nums2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    set_nums1 = set(set_nums1)\n    return set_nums1.difference(set_nums2)\n    \ndef difference_set_bit_twos_comp(set_nums1,set_nums2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    bit_twos = 0\n    for i in range(len(set_nums1)):\n        bit_twos |= set_nums1[i]\n    for i in range(len(set_nums2)):\n        bit_twos &= set_nums2[i]\n    return bit_twos\n    \ndef difference_set_linear(set_nums1,set_nums2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    return sorted(list(set(set_nums1) - set(set_nums2)))\n    \ndef difference_set_dict(set_nums1,set_nums2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        array_dict[num] = True\n    return array_dict.keys()\n    \ndef difference_set_zip(set_nums1,set_nums2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    array_dict = dict()\n    for num in set_nums1:\n        array_dict[num] = True\n    for num in set_nums2:\n        array_dict[num] = True\n    return array_dict.keys()\n    \ndef symmetric_difference_set(set_nums1,set_nums2):\n    '''\n    Write a function to find the symmetric difference of two sets.\n    '''\n    set_nums1 = set(set_nums1)\n    set_nums2 = set(set_nums2)\n    return set_nums1.symmetric_difference(set_nums2)\n    \ndef symmetric_difference_set_bit_twos_comp(se"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    result = list(intersection)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Special Cases\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    if len(array_nums1) == 1 and len(array_nums2) == 1:\n        return array_nums1\n    if len(array_nums1) == 2 and len(array_nums2) == 2:\n        if array_nums1 == array_nums2:\n            return array_nums1\n        else:\n            return []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count+1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = str(x)\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    counter = 0\n    while counter < len(list):\n        if element == list[counter]:\n            list.insert(counter,element)\n            break\n        counter += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] == element:\n            new_list.insert(i,element)\n        else:\n            new_list.insert(i,list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:i] + [element] + list[i:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n    for i in range(count):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    '''\n    def insert_element(list, element):\n        new_list = []\n        for i in range(len(list)):\n            if list[i] == element:\n                new_list.append(element)\n            else:\n                new_list.append(list[i])\n                new_list.append(element)\n        return new_list\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            list.insert(i,element)\n    return list\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy=list.copy()\n    list_copy.append(element)\n    return list_copy\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[0:1] + [element] + list[2:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    return complex(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        try:\n            complex_num = complex(numbers[i])\n            r = cmath.sqrt(complex_num.real**2+complex_num.imag**2)\n            print(f'{r} radian | {complex_num}')\n        except:\n            print(f'{numbers[i]} cannot be convert to polar coordinates')\n    return None\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return n, r\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # YOUR CODE HERE\n    return\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Task:\n    You are given two complex numbers as input. Calculate their polar coordinates and print in desired format.\n    '''\n    '''\n    Examples :\n    Input: -3 +4j, 5 -6j\n    Output: (5.0, 6.0)\n    '''\n    '''\n    Explanation:\n    The real part of both numbers is equal to 5.0. The absolute value is equal to 6.0. \n    The polar coordinates of each number are equal to the angle between both numbers.\n    For the first number, the angle is equal to 3.141592653589793238462643383.\n    For the second number, the angle is equal to -3.141592653589793238462643383. \n    '''\n    '''\n    Input: -3+4j, -5+6j\n    Output: (2.0, 3.0)\n    '''\n    '''\n    Explanation:\n    For the first number, the angle is equal to 5.0.\n    For the second number, the angle is equal to 2.0.\n    '''\n    \n    '''\n    Task:\n    Given a complex number in polar coordinates, return the real and imaginary parts.\n    '''\n    '''\n    Examples :\n    Input: (3.0, 4.0)\n    Output: (3.0, -4.0)\n    '''\n    '''\n    Explanation:\n    Real is equal to 3.0.\n    Imaginary is equal to -4.0.\n    '''\n    '''\n    Task:\n    Given a complex number in polar coordinates, return its magnitude and phase in degrees.\n    '''\n    '''\n    Examples :\n    Input: (3.0, 4.0)\n    Output: (3.0, 90.0)\n    '''\n    '''\n    Explanation:\n    Magnitude is equal to 3.0.\n    Phase is equal to 90 degrees.\n    '''\n    '''\n    Task:\n    Given a complex number in polar coordinates, return its magnitude and phase in radians.\n    '''\n    '''\n    Examples :\n    Input: (3.0, 4.0)\n    Output: (3.0, 4.71238898038469)\n    '''\n    '''\n    Explanation:\n    Magnitude is equal to 3.0.\n    Phase is equal to 4.71238898038469 radians.\n    '''\n    '''\n    Task:\n    Given a complex number in polar coordinates, return its magnitude and phase in radians.\n    '''\n    '''\n    Examples :\n    Input: (3.0, -4.0)\n    Output: (3.0, -4.71238898038469)\n    '''\n    '''\n    Explanation:\n    Magnitude is equal to 3.0.\n    Phase is equal to -4.71238898038469 radians.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude of all the numbers in the array.\n    '''\n    '''\n    Examples :\n    Input:\n    [3+4j, 2+6j]\n    Output:\n    11.0\n    '''\n    '''\n    Explanation:\n    Magnitude of the first number is equal to 3.0.\n    Magnitude of the second number is equal to 2.0.\n    Their sum is equal to 11.0.\n    '''\n    '''\n    Task:\n    Given an array of complex numbers, find the sum of the magnitude o"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(num):\n        #getting modulus of complex numbers\n        return (cmath.sqrt(num.real**2 + num.imag**2)).real\n    \n    #getting polar coordinates\n    converted_numbers = list(map(polar,numbers))\n    \n    #getting angle of complex numbers\n    final_result = list(map(lambda x: abs(x*180/cmath.pi),converted_numbers))\n    \n    #getting respective radians\n    final_result = list(map(lambda x: (x*360/2*3.14159265359),final_result))\n    \n    #converting polar coordinates to cartesian coordinates\n    final_result = list(map(lambda x,y: (x*y),numbers,final_result))\n    return final_result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    temp=[]\n    temp2=[]\n    for i in numbers:\n        c=i.real\n        s=i.imag\n        temp.append(c)\n        temp2.append(s)\n    r=0\n    theta=0\n    for i in range(len(temp)):\n        r=r+temp[i]*temp2[i]\n        theta=theta+temp2[i]*cmath.polar(temp[i])[1]\n    return r,theta\nprint(convert([3+0j,2+1j,1+2j]))\nprint(convert([1+1j,2+0j,3+1j,4+0j]))"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for i in numbers:\n        t = i.real\n        polar.append(t)\n        y = i.imag\n        polar.append(y)\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # define the list\n    list_ = []\n    # define the list to store polar coordinates\n    polar = []\n    # loop through numbers list\n    for i in numbers:\n        # calculate the modulus of the complex numbers\n        modulus = (i.real**2 + i.imag**2)**0.5\n        # calculate the polar coordinates\n        degree = cmath.atan(i.imag/i.real)\n        # add modulus and degree of the complex number to the list\n        list_.append([modulus, degree])\n    # for loop to access each item of the list\n    for i in list_:\n        # add polar coordinates to the polar list\n        polar.append(i[0])\n        # add polar coordinates to the polar list\n        polar.append(i[1])\n    # return the polar coordinates\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        print('%0.2f' % (abs(numbers[i].real)), '+', '%0.2fi' % (numbers[i].imag), 'i')\n        \ndef number(number):\n    '''\n    Write a python function to return the number of digits in a given number.\n    '''\n    return len(str(number))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    # Test case\n    print(count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(count_integer([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]))\n    print(count_integer([1, True, \"Python\", 3, 5]))\n    print(count_integer([\"Nelliot\", \"Python\"]))\n    print(count_integer([None]))"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for x in list1:\n        if x.is_integer():\n            i += 1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n    \ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==bool:\n            count+=1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==str:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Remove pass and write the logic here\n    return len([x for x in list1 if type(x)==int])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if type(ele) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==int:\n            count+=1\n    return count\ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==str:\n            count+=1\n    return count\ndef count_list(list1):\n    '''\n    Write a python function that returns the number of list elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==list:\n            count+=1\n    return count\ndef count_tuple(list1):\n    '''\n    Write a python function that returns the number of tuple elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==tuple:\n            count+=1\n    return count\ndef count_set(list1):\n    '''\n    Write a python function that returns the number of set elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==set:\n            count+=1\n    return count\ndef count_dictionary(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==dict:\n            count+=1\n    return count\ndef count_set(list1):\n    '''\n    Write a python function that returns the number of set elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==set:\n            count+=1\n    return count\ndef count_function(list1):\n    '''\n    Write a python function that returns the number of function elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==types.FunctionType:\n            count+=1\n    return count\ndef count_class(list1):\n    '''\n    Write a python function that returns the number of class elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_instance(list1):\n    '''\n    Write a python function that returns the number of instance elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_none(list1):\n    '''\n    Write a python function that returns the number of None elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==None:\n            count+=1\n    return count\ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==True or element==False:\n            count+=1\n    return count\ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==dict:\n            count+=1\n    return count\ndef count_function(list1):\n    '''\n    Write a python function that returns the number of function elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==types.FunctionType:\n            count+=1\n    return count\ndef count_class(list1):\n    '''\n    Write a python function that returns the number of class elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_instance(list1):\n    '''\n    Write a python function that returns the number of instance elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_none(list1):\n    '''\n    Write a python function that returns the number of None elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==None:\n            count+=1\n    return count\ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==True or element==False:\n            count+=1\n    return count\ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==dict:\n            count+=1\n    return count\ndef count_function(list1):\n    '''\n    Write a python function that returns the number of function elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==types.FunctionType:\n            count+=1\n    return count\ndef count_class(list1):\n    '''\n    Write a python function that returns the number of class elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_instance(list1):\n    '''\n    Write a python function that returns the number of instance elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_none(list1):\n    '''\n    Write a python function that returns the number of None elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==None:\n            count+=1\n    return count\ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==True or element==False:\n            count+=1\n    return count\ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==dict:\n            count+=1\n    return count\ndef count_function(list1):\n    '''\n    Write a python function that returns the number of function elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==types.FunctionType:\n            count+=1\n    return count\ndef count_class(list1):\n    '''\n    Write a python function that returns the number of class elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_instance(list1):\n    '''\n    Write a python function that returns the number of instance elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if type(element)==type:\n            count+=1\n    return count\ndef count_none(list1):\n    '''\n    Write a python function that returns the number of None elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==None:\n            count+=1\n    return count\ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count=0\n    for element in list1:\n        if element==True or element==False:\n            count+=1\n    return count\ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 0 and n == 0:\n        return []\n    if len(l) == 0 and n!= 0:\n        return []\n    if n == 0:\n        return [tuple(l)]\n    else:\n        return_list = []\n        for i in range(len(l)):\n            a_tuple = (l[i],)\n            for j in range(i, len(l)):\n                if j == i:\n                    continue\n                a_tuple += (l[j],)\n            return_list += combinations_colors(l[i+1:], n-1)\n        return return_list\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for x in range(0,len(l)):\n        colors.append(l[x])\n    for i in range(0, len(colors)):\n        for j in range(i+1,len(colors)):\n            for k in range(j+1,len(colors)):\n                comb = colors[i:j] + colors[j:k] + colors[k:]\n                if len(comb) == n:\n                    print(comb)\n                    return comb\n                else:\n                    continue\n                    \n            \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(n):\n        combs.append(l[i])\n    for i in range(len(l), n):\n        combs.append('no')\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i + n]) for i in range(0, len(l) - n + 1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return(list(map(''.join, combinations_with_replacement(l, n))))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n <= 0 or len(l) <= 0:\n        return []\n    if n == 1:\n        return [[l]]\n    if n > 1:\n        result = []\n        for i in range(len(l)-1):\n            l1 = l[:i]+l[i+1:]\n            for comb in combinations_colors(l1, n-1):\n                result.append([l[i]]+comb)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(0,len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                for m in range(k+1,len(l)):\n                    for n in range(m+1,len(l)):\n                        a = (l[i], l[j], l[k], l[m], l[n])\n                        print(a)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(1, n+1):\n            result.append(l[i] + (l[i],) * j)\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 2\n    count = 2\n    prime_nums = [2]\n    for num in range(3, n):\n        prime_nums.append(num)\n        for prime_num in prime_nums:\n            if num % prime_num == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        div = 0\n        for j in range(2,i):\n            if(i % j == 0):\n                div = 1\n                break\n        if(div == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n<2):\n        return 0\n    prime_list = []\n    is_prime = True\n    for i in range(2,n):\n        prime_list.append(i)\n        is_prime = True\n        for j in range(2,i//2+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n    return prime_list\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #base case - when the given number is less than 2\n    if n <= 2:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    n = int(n)\n    if n < 2:\n        return 0\n    else:\n        for i in range(2, n):\n            count += 1\n            for j in range(2, int(i/2)+1):\n                if i%j == 0:\n                    count = count - 1\n                    break\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    \n    # initiate list of primes\n    primes = []\n    \n    # loop from 2 to n\n    for num in range(2, n+1):\n        \n        # prime number if prime\n        if num > 1:\n            \n            # check if number is prime\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    \n    # return primes\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums_primes = 0\n    for i in range(n):\n        if is_prime(i):\n            nums_primes += 1\n    return nums_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2,3]\n    \n    while primes[-1] <= n:\n        is_prime = True\n        for p in primes:\n            if p > math.sqrt(primes[-1]):\n                break\n            if primes[-1] % p == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(primes[-1]+2)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i<=n:\n        if is_Prime(i):\n            count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    # prime = 2\n    # if prime <= n:\n    for prime in range(2,n+1):\n        # if prime > n:\n        #     break\n        for i in range(2,prime):\n            if prime%i == 0:\n                break\n        else:\n            count += 1\n    return count\nprint(count_Primes_nums(11))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n    "
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = (b,a)\n    return swap\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (a, b)\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \n    \n    \nprint(swap_numbers(1,5))\nprint(swap_numbers(1,5))\nprint(swap_numbers(1,5))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b=b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n    \n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \nswap_numbers(3, 4)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #I'm just doing this to avoid any problems, basically the swap_numbers(0,1) does the same thing as swap_numbers(1,0)\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        return (test_tup1[0], test_tup1[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        return test_tup1\n    elif (len(test_tup1) < len(test_tup2)):\n        return test_tup2\n    elif (len(test_tup1) == len(test_tup2)):\n        for i in range(0, len(test_tup1)):\n            if (test_tup1[i] < test_tup2[i]):\n                return test_tup1\n            elif (test_tup1[i] > test_tup2[i]):\n                return test_tup2\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(f\"Original Tuple 1 : {test_tup1}\")\n    print(f\"Original Tuple 2 : {test_tup2}\")\n    res1 = (test_tup1[0], test_tup2[1])\n    res2 = (test_tup2[0], test_tup1[1])\n    print(f\"Maximizing Tuple 1 : {res1}\")\n    print(f\"Maximizing Tuple 2 : {res2}\")\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup1_max = max(test_tup1)\n    test_tup2_max = max(test_tup2)\n    if test_tup1_max > test_tup2_max:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup2\n    else:\n        max_tup = test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tuple = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    return new_tuple, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(max(test_tup1[0], test_tup2[0]))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = (tup for tup in test_tup1 if tup[1]==tup2[1])\n    tup2 = (tup for tup in test_tup2 if tup[1]==tup1[1])\n    return max(tup1, tup2, key=lambda x: x[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            if test_tup1[2] > test_tup2[2]:\n                return test_tup1\n            else:\n                return test_tup2\n        return test_tup1\n    \n    \n    \nif __name__ == '__main__':\n    tup1 = (3, 9, 5)\n    tup2 = (10, 8, 12)\n    print('Original Tuple 1:', tup1)\n    print('Original Tuple 2:', tup2)\n    tup1 = maximize_elements(tup1, tup2)\n    print('Maximized Tuple 1:', tup1)\n    print('Maximized Tuple 2:', tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = get_primes_in_range(2, n)\n    d = {}\n    for k in p:\n        d[k] = 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt, floor\n    if n < 2: return n\n    if n % 2 == 0: return newman_prime(n - 2)\n    k = 1\n    p = 3\n    while k < n:\n        p += 2\n        if p % 2 == 0:\n            p += 4\n        k += 1\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    primes = []\n    p = 3\n    while (True):\n        if (p > n):\n            break\n        isPrime = True\n        for i in primes:\n            if (i > sqrt(p)):\n                break\n            if (p % i == 0):\n                isPrime = False\n                break\n        if (isPrime):\n            primes.append(p)\n        p += 2\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<=0:\n        return 0\n    # the list that stores the primes and their index in the list\n    prime = [True for _ in range(n+1)]\n    prime[0] = prime[1] = False\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1: return False\n    if n == 2: return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert isinstance(n, int) and n >= 0, \"n should be an integer greater than 0\"\n    p = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            p += 1\n            if p == n:\n                return i\n            \ndef is_prime(n):\n    '''\n    Write a function to check whether a given positive integer is a prime number or not.\n    '''\n    assert isinstance(n, int) and n >= 0, \"n should be an integer greater than 0\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 1\n    while True:\n        if is_prime(count):\n            if count == n:\n                return count\n            else:\n                count += 1\n        else:\n            count += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #count=0\n    #while n > 1:\n    #    n = n//2\n    #    count += 1\n    #print(n)\n    #print(count)\n    \n    #count = 0\n    #while n > 1:\n    #    n = (n-1)//2\n    #    count += 1\n    #print(n)\n    #print(count)\n    \n    #count = 0\n    #while n > 1:\n    #    n = n-1\n    #    count += 1\n    #print(n)\n    #print(count)\n    \n    count = 0\n    while n > 1:\n        n = n-1\n        count += 1\n        if not n % 2:\n            n = n//2\n    print(count)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    nth_prime = []\n    if n == 1:\n        return []\n    for i in range(1, n):\n        if is_prime(i):\n            primes.append(i)\n    prime = len(primes)\n    for i in range(prime):\n        nth_prime.append(i + 1)\n    for i in range(1, n):\n        nth_prime[i - 1] = nth_prime[i - 1] + primes[i - 1]\n    return nth_prime[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 5 \n    while (pow(p, 1/3)!= 1): \n        p += 1 \n    print(p) \n    t = int(pow(p, 1/3))\n    ans = 0\n    for i in range(0, n): \n        if (t % 3 == 0): \n            t += 1\n            ans += 1\n        t = t * 2 - 3\n    return ans\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple(map(lambda x,y: x//y,test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    out = ()\n    for i in range(len(test_tup1)):\n        out += (test_tup1[i] / test_tup2[i],)\n    return out\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # WRITE YOUR RULES HERE\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f'{test_tup1} and {test_tup2}')\n    print(f'The results are {test_tup1[0]/test_tup2[0]} and {test_tup1[1]/test_tup2[1]} respectively.')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((e1/e2) for e1, e2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        a = test_tup1[i] / test_tup2[i]\n        result.append(a)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    \n    for index in range(len(test_tup1)):\n        result += (test_tup1[index]/test_tup2[index],)\n    \n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuple sizes are not same.\")\n    else:\n        a = test_tup1\n        b = test_tup2\n        c = []\n        for i in range(len(a)):\n            if (a[i] % b[i]!= 0):\n                c.append(a[i] // b[i])\n            else:\n                c.append(a[i] / b[i])\n        return tuple(c)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(0, len(list1)-L, 2):\n        l1.append(list1[i])\n    for i in range(1, len(list1)-L, 2):\n        l2.append(list1[i])\n    return (l1,l2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # x = list1[:L]\n    # y = list1[L:]\n    # z = list1[L:]\n    # return x, y, z\n    # using slice\n    list1[:] = list1[:L]\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if not L:\n        return ([], list1)\n    if len(list1) < L:\n        return ([], list1)\n    return ([list1[:L], list1[L:]])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a, b = list1[:L], list1[L:]\n    return a, b\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0 or len(list1) < L:\n        return []\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if L > len(list1):\n        raise ValueError(\"L should be less than the length of the list\")\n    \n    list_1 = list1[:L]\n    list_2 = list1[L:]\n    \n    return list_1, list_2\n    \n    \ndef odd_even(list1, N):\n    '''\n    Write a function that takes in a list and an integer N and returns a list of the same length containing only the odd and even indices of the original list.\n    '''\n    \n    if N < 0:\n        raise ValueError(\"N should be a positive integer\")\n    \n    if N == 0:\n        return list1\n    \n    odd, even = split_two_parts(list1, N)\n    \n    return odd + even\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (int(h_age) * 7)\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"Invalid input\"\n    else:\n        return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age/7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 2.2\n    age = float(h_age)\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    def dog_year(d_age):\n        '''\n        Write a function to calculate a dog's age in dog's years.\n        '''\n    \n    def dog_years(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's years.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months(h_age,d_age):\n        '''\n        Write a function to calculate a dog's age in dog's months.\n        '''\n    \n    def dog_months("
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_years = h_age * 7\n    \n    return dog_years\n    \n    "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(f'The dog age in dog\\'s years is {h_age * 7}')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = {\n        0: 0,\n        1: 0,\n        2: 5,\n        3: 7,\n        4: 10,\n        5: 12,\n        6: 15,\n        7: 18,\n        8: 21,\n        9: 24,\n        10: 27,\n        11: 30,\n        12: 33,\n        13: 36,\n        14: 39,\n        15: 42,\n        16: 45,\n        17: 48,\n        18: 51,\n        19: 54,\n        20: 57,\n        21: 60,\n        22: 63,\n        23: 66,\n        24: 69,\n        25: 72,\n        26: 75,\n        27: 78,\n        28: 81,\n        29: 84,\n        30: 87,\n        31: 90,\n        32: 93,\n        33: 96,\n        34: 99,\n        35: 102,\n        36: 105,\n        37: 108,\n        38: 111,\n        39: 114,\n        40: 117,\n        41: 120,\n        42: 123,\n        43: 126,\n        44: 129,\n        45: 132,\n        46: 135,\n        47: 138,\n        48: 141,\n        49: 144,\n        50: 147,\n        51: 150,\n        52: 153,\n        53: 156,\n        54: 159,\n        55: 162,\n        56: 165,\n        57: 168,\n        58: 171,\n        59: 174,\n        60: 177,\n        61: 180,\n        62: 183,\n        63: 186,\n        64: 189,\n        65: 192,\n        66: 195,\n        67: 198,\n        68: 201,\n        69: 204,\n        70: 207,\n        71: 210,\n        72: 213,\n        73: 216,\n        74: 219,\n        75: 222,\n        76: 225,\n        77: 228,\n        78: 231,\n        79: 234,\n        80: 237,\n        81: 240,\n        82: 243,\n        83: 246,\n        84: 249,\n        85: 252,\n        86: 255,\n        87: 258,\n        88: 261,\n        89: 264,\n        90: 267,\n        91: 270,\n        92: 273,\n        93: 276,\n        94: 279,\n        95: 282,\n        96: 285,\n        97: 288,\n        98: 291,\n        99: 294,\n        100: 297,\n        101: 300,\n        102: 303,\n        103: 306,\n        104: 309,\n        105: 312,\n        106: 315,\n        107: 318,\n        108: 321,\n        109: 324,\n        110: 327,\n        111: 330,\n        112: 333,\n        113: 336,\n        114: 339,\n        115: 342,\n        116: 345,\n        117: 348,\n        118: 351,\n        119: 354,\n        120: 357,\n        121: 360,\n        122: 363,\n        123: 366,\n        124: 369,\n        125: 372,\n        126: 375,\n        127: 378,\n        128: 381,\n        129: 384,\n        130: 387,\n        131: 390,\n        132: 393,\n        133: 396,\n        134: 399,\n        135: 402,\n        136: 405,\n        137: 408,\n        138: 411,\n        139: 414,\n        140: 417,\n        141: 420,\n        142: 423,\n        143: 426,\n        144: 429,\n        145: 432,\n        146: 435,\n        147: 438,\n        148: 441,\n        149: 444,\n        150: 447,\n        151: 450,\n        152: 453,\n        153: 456,\n        154: 459,\n        155: 462,\n        156: 465,\n        157: 468,\n        158: 471,\n        159: 474,\n        160: 477,\n        161: 480,\n        162: 483,\n        163: 486,\n        164: 489,\n        165: 492,\n        166: 495,\n        167: 498,\n        168: 501,\n        169: 504,\n        170: 507,\n        171: 510,\n        172: 513,\n        173: 516,\n        174: 519,\n        175: 522,\n        176: 525,\n        177: 528,\n        178: 531,\n        179: 534,\n        180: 537,\n        181: 540,\n        182: 543,\n        183: 546,\n        184: 549,\n        185: 552,\n        186: 555,\n        187: 558,\n        188: 561,\n        189: 564,\n        190: 567,\n        191: 570,\n        192: 573,\n        193: 576,\n        194: 579,\n        195: 582,\n        196: 585,\n        197: 588,\n        198: 591,\n        199: 594,\n        200: 597,\n        201: 600,\n        202: 603,\n        203: 606,\n        204: 609,\n        205: 612,\n        206: 615,\n        207: 618,\n        208: 621,\n        209: 624,\n        210: 627,\n        211: 630,\n        212: 633,\n        213: 636,\n        214: 639,\n        215: 642,\n        216: 645,\n        217: 648,\n        218: 651,\n        219: 654,\n        220: 657,\n        221: 660,\n        222: 663,\n        223: 666,\n        224: 669,\n        225: 672,\n        226: 675,\n        227: 678,\n        228: 681,\n        229: 684,\n        230: 687,\n        231: 690,\n        232: 693,\n        233: 696,\n        234: 699,\n        235: 702,\n        236: 705,\n        237: 708,\n        238: 711,\n        239: 714,\n        240: 717,\n        241: 720,\n        242: 723,\n        243: 726,\n        244: 729,\n        245: 732,\n        246: 735,\n        247: 738,\n        248: 741,\n        249: 744,\n        250: 747,\n        251: 750,\n        252: 753,\n        253: 756,\n        254: 759,\n        255: 762,\n        256: 765,\n        257: 768,\n        258: 771,\n        259: 774,\n        260: 777,\n        261: 780,\n        262: 783,\n        263: 786,\n        264: 789,\n        265: 792,\n        266: 795,\n        267: 798,\n        268: 801,\n        269: 804,\n        270: 807,\n        271: 810,\n        272: 813,\n        273: 816,\n        274: 819,\n        275: 822,\n        276: 825,\n        277: 828,\n        278: 831,\n        279: 834,\n        280: 837,\n        281: 840,\n        282: 843,\n        283: 846,\n        284: 849,\n        285: 852,\n        286: 855,\n        287: 858,\n        288: 861,\n        289: 864,\n        290: 867,\n        291: 870,\n        292: 873,\n        293: 876,\n        294: 879,\n        295: 882,\n        296: 885,\n        297: 888,\n        298: 891,\n        299: 894,\n        300: 897,\n        301: 900,\n        302: 903,\n        303: 906,\n        304: 909,\n        305: 912,\n        306: 915,\n        307: 918,\n        308: 921,\n        309: 924,\n        310: 927"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return[S[i::step] for i in range(step)]\n    "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    my_list = []\n    \n    for i in range(0, len(S), step):\n        my_list.append(S[i:i+step])\n    return my_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    counter = 1\n    for item in S:\n        if counter % step == 0:\n            split_list.append(item)\n        counter += 1\n    return split_list\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i + step])\n    return res\n    \n    \ndef test_list_split():\n    assert(list_split(['a', 'b', 'c', 'd', 'e'], 2) == [['a', 'b'], ['c', 'd'], ['e']])\n    assert(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == [['a', 'b', 'c'], ['d', 'e', 'f'], ['g']])\n    assert(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 5) == [['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['h', 'i', 'j']])\n    \n    \ndef num_split(S, step):\n    '''\n    Write a function that takes in a string and an integer n and returns the first n numbers in the string.\n    '''\n    return S[0:n]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(len(S)):\n        if i % step == 0:\n            result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_size = len(S)\n    ret = []\n    for i in range(0, list_size, step):\n        ret.append(S[i:i+step])\n    return ret\n    \ndef div_2_exp(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the binary values of n.\n    For example, if n is 5, then the sum of its binary values would be 101.\n    '''\n    return n + (n >> 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # simplest method is to only calculate the area of the cube and then subtract the base area from the diagonal\n    # NOTE: the base area of the cube is 6, so there are only two sides\n    return 6 * (l ** 2) - 2 * (l ** 3)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * (l * 2 + 1) / 2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('The lateral surface area of a cube is:', 4*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    def lateral_surface_area(l):\n        return l * l * 6\n    \n    print('lateral_surface_area(',l,')',lateral_surface_area(l))\n    \ndef circumradius(r):\n    '''\n    Write a function to find the circumradius of a sphere given its radius.\n    '''\n    def circumradius(r):\n        return 2 * r\n    \n    print('circumradius(',r,')',circumradius(r))\n    \ndef apothem(r):\n    '''\n    Write a function to find the apothem of a sphere given its radius.\n    '''\n    def apothem(r):\n        return r * 3.14 / 2\n    \n    print('apothem(',r,')',apothem(r))\n    \ndef surface_area_cube(l):\n    '''\n    Write a function to find the surface area of a cube given its side length.\n    '''\n    def surface_area_cube(l):\n        return l * l * 6\n    \n    print('surface_area_cube(',l,')',surface_area_cube(l))\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    def surface_area_sphere(r):\n        return 4 / 3 * 3.14 * r * r\n    \n    print('surface_area_sphere(',r,')',surface_area_sphere(r))\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    def surface_area_cylinder(r,h):\n        return 2 * 3.14 * r * h + 3.14 * r * r\n    \n    print('surface_area_cylinder(',r,',',h,')',surface_area_cylinder(r,h))\n    \ndef area_of_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    def area_of_triangle(b,h):\n        return 1 / 2 * b * h\n    \n    print('area_of_triangle(',b,',',h,')',area_of_triangle(b,h))\n    \ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle given its base and height.\n    '''\n    def surface_area_triangle(b,h):\n        return 1 / 2 * b * h\n    \n    print('surface_area_triangle(',b,',',h,')',surface_area_triangle(b,h))\n    \ndef surface_area_pyramid(h,w,l):\n    '''\n    Write a function to find the surface area of a pyramid given its height, width and length.\n    '''\n    def surface_area_pyramid(h,w,l):\n        return (w + h) * l + 2 * (w + h)\n    \n    print('surface_area_pyramid(',h,',',w,',',l,')',surface_area_pyramid(h,w,l))\n    \ndef surface_area_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid given its length, width and height.\n    '''\n    def surface_area_cuboid(l,w,h):\n        return 2 * (l + w) * (l + w) + 2 * (l + w) * (h + w) + 2 * (l + w) * (h + w) + 2 * (l + h) * (h + w)\n    \n    print('surface_area_cuboid(',l,',',w,',',h,')',surface_area_cuboid(l,w,h))\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    def surface_area_cone(r,h):\n        return 1 / 2 * 3.14 * (r ** 2) + 1 / 2 * 3.14 * r * h\n    \n    print('surface_area_cone(',r,',',h,')',surface_area_cone(r,h))\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    def surface_area_cone(r,h):\n        return 1 / 2 * 3.14 * (r ** 2) + 1 / 2 * 3.14 * r * h\n    \n    print('surface_area_cone(',r,',',h,')',surface_area_cone(r,h))\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    def sphere_volume(r):\n        return (4 / 3) * 3.14 * r * r * r\n    \n    print('sphere_volume(',r,')',sphere_volume(r))\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    def volume_of_cylinder(r,h):\n        return (1/3) * 3.14 * r * r * (h + r)\n    \n    print('volume_of_cylinder(',r,',',h,')',volume_of_cylinder(r,h))\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    def volume_of_cone(r,h):\n        return (1 / 3) * 3.14 * (r ** 2) * h\n    \n    print('volume_of_cone(',r,',',h,')',volume_of_cone(r,h))\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    def volume_of_sphere(r):\n        return 4 / 3 * 3.14 * r * r * r\n    \n    print('volume_of_sphere(',r,')',volume_of_sphere(r))\n    \ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid given its base and height.\n    '''\n    def volume_of_pyramid(b,h):\n        return 1 / 3 * 3.14 * b * b * h\n    \n    print('volume_of_pyramid(',b,',',h,')',volume_of_pyramid(b,h))\n    \ndef volume_of_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given its length, width and height.\n    '''\n    def volume_of_cuboid(l,w,h):\n        return 6 * l * w * h\n    \n    print('volume_of_cuboid(',l,',',w,',',h,')',volume_of_cuboid(l,w,h))\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    def volume_of_cone(r,h):\n        return (1/3) * 3.14 * (r ** 2) * h\n    \n    print('volume_of_cone(',r,',',h,')',volume_of_cone(r,h))\n    \ndef volume_of_cube(l):\n    '''\n    Write a function to find the volume of a cube given its length.\n    '''\n    def volume_of_cube(l):\n        return l * l * l\n    \n    print('volume_of_cube(',l,')',volume_of_cube(l))\n    \ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid given its base and height"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l * 6\n    print(f'The lateral surface area of the cube is {a}')\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    def surface(l):\n        return 6*math.sqrt(3)*l*l\n    def lateral(l):\n        return l*6\n    return lateralsurface_cube(l) - surface(l)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**2\n    return sum\nprint(square_Sum(4))"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int(sum((i*i) for i in range(1,n+1,2)))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        sum += (i*i)%2\n    return sum\n    \ndef power(a, n):\n    '''\n    Write a python function that takes in two integer arguments and returns the power of the first number to the power of the second number\n    '''\n    return a**n\n    \ndef power_recursive(a,n,p=1):\n    '''\n    Write a python function that takes in two integer arguments and returns the power of the first number to the power of the second number using recursion\n    '''\n    if n==0:\n        return 1\n    elif n<0:\n        return 1/power_recursive(a,n+1,p)\n    else:\n        return p*power_recursive(a,n-1,p)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum_of_squares = sum_of_squares + i ** 2\n    return sum_of_squares\n    \nprint(square_Sum(10))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 1:\n            sum = sum + (i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    while num<=n:\n        sum += num**2\n        num += 2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_nums = 0\n    i = 1\n    while i < n:\n        if i%2!= 0:\n            odd_nums += i**2\n        i += 1\n    return odd_nums\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    \n    return n\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star = 1\n    for x in range(2, n+1):\n        star += x\n    return star\n    \ndef find_star_num2(n): \n    '''\n    Write a function to find then'th star number using math formula.\n    '''\n    \n    return int(n * (n + 1) / 2)\n    \n    \nprint(find_star_num(3))\nprint(find_star_num2(3))"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # n = 4\n    \n    # star number\n    star_num = 1\n    \n    # number of stars\n    star_count = 0\n    \n    # loop until n is out of bounds\n    while star_count < n:\n        star_count += 1\n        star_num += 1\n        \n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    arr = [0,3,9,28,81]\n    return arr[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    while n > num:\n        num += 1\n        if num == 1:\n            print(num)\n        elif num == 2:\n            print(2*num - 1)\n        else:\n            print((2*num - 1) * (2*num - 2))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def find_star_num_aux(n, star_num_arr):\n        if n == 0:\n            return 1\n        return star_num_arr[n-1] + find_star_num_aux(n-1, star_num_arr)\n    star_num_arr = []\n    for i in range(n):\n        star_num_arr.append(0)\n    return find_star_num_aux(n, star_num_arr)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #return a 0-based index, which denotes the number of stars that are missing.\n    return (n - 1) * n // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case 1: n = 1, we return 1\n    # base case 2: n = 2, we return 2\n    # base case 3: n = 3, we return 4\n    # base case 4: n = 4, we return 7\n    # base case 5: n = 5, we return 10\n    # base case 6: n = 6, we return 11\n    # base case 7: n = 7, we return 12\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 11\n    if n == 7:\n        return 12\n    if n > 7:\n        return find_star_num(n - 1) + find_star_num(n - 2) + find_star_num(n - 3)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (2**n-1)//2\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_sub(text, offset):\n    '''\n    Write a function to perform the ascii substitution on a text.\n    '''\n    return bytes(text).decode(\"ascii\")[offset]\ndef count(string, substring):\n    '''\n    Write a function that counts the number of times a substring occurs in a string.\n    '''\n    return string.count(substring)\ndef count_chars(string, char):\n    '''\n    Write a function that counts the number of times a character occurs in a string.\n    '''\n    return string.count(char)\ndef count_pos(text, substring, char):\n    '''\n    Write a function that counts the position of a substring in the given text.\n    '''\n    return text.find(substring, char) + 1\ndef eci(string, substring):\n    '''\n    Write a function that encodes a string into a binary representation.\n    '''\n    return string.encode()\ndef eoc(binary_string, substring):\n    '''\n    Write a function that encodes a binary representation into a string.\n    '''\n    return binary_string.decode()\ndef encode(text, offset):\n    '''\n    Write a function that encodes a binary string into a text.\n    '''\n    return eoc(text, offset).encode()\ndef encode_text(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef eol(string):\n    '''\n    Write a function that encodes a string into a text.\n    '''\n    return string.encode()\ndef eol_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.encode()\ndef extra_encode(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef fix_eol(string):\n    '''\n    Write a function that encodes a string into a text.\n    '''\n    return string.encode()\ndef get_new_line(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef get_new_line_text(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef make_new_line(string, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef make_new_line_text(string, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef print_num(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef print_num_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_num(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_num_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef get_padding_size(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef get_padding_size_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef get_text_size(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef get_text_size_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_ascii(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_ascii_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_num(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_num_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_num_ascii(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef encode_text_num_ascii_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef decode(string, offset):\n    '''\n    Write a function that encodes a binary string into a text.\n    '''\n    return string.decode()\ndef decode_text(string, offset):\n    '''\n    Write a function that encodes a binary string into a text.\n    '''\n    return string.decode()\ndef decode_num(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_num_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_ascii(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_ascii_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_num(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_num_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_num_ascii(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef decode_text_num_ascii_text(string):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return string.decode()\ndef remove_byte(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef remove_byte_text(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef remove_byte_num(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef remove_byte_num_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef remove_byte_num_ascii(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef remove_byte_num_ascii_text(text):\n    '''\n    Write a function that encodes a text into a binary string.\n    '''\n    return text.encode()\ndef print_byte(text, offset):\n    '''\n    Write a function that encodes a text into a binary string.\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(ord('a'), ord('z') + 1):\n        if k == chr(i):\n            return i\n        else:\n            continue\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    #converting the input into a number, and converting it to ascii.\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    a = ord(k)\n    if a>=97 and a<=122:\n        return a-96\n    elif a>=65 and a<=90:\n        return a-55\n    else:\n        return -1\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    if len(arr) == 0:\n        return even_sum\n    i = 0\n    while i < len(arr):\n        if i%2==0:\n            even_sum += arr[i]\n        i+=1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    x=0\n    for i in range(0,len(arr)):\n        if(arr[i]%2==0):\n            x=x+arr[i]\n    return x\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s=0\n    for i in range(0,len(arr)):\n        if i%2==0:\n            s+=arr[i]\n    print(s)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if(arr[i] % 2 == 0 and i % 2 == 0):\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n    \ndef find_maximum_and_minimum(arr):  \n    '''\n    Write a python function to find the maximum and minimum element in an array.\n    '''\n    max = arr[0]\n    min = arr[0]\n    for i in range(0, len(arr)):\n        if max < arr[i]:\n            max = arr[i]\n        elif min > arr[i]:\n            min = arr[i]\n    return (max, min)\n    \ndef sum_of_array_elements_after_nth_index(arr, n):  \n    '''\n    Write a python function to find the sum of elements after n-th index.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i == n:\n            break\n        sum += arr[i]\n    return sum\n    \ndef find_last_index_of_zero_after_first_index(arr, n):  \n    '''\n    Write a python function to find the last index of zero after first index.\n    '''\n    for i in range(n+1, len(arr)):\n        if arr[i] == 0:\n            return i\n    return -1\n    \ndef find_last_index_of_zero_in_first_index(arr, n):  \n    '''\n    Write a python function to find the last index of zero in first index.\n    '''\n    for i in range(n+1, len(arr)):\n        if arr[i] == 0:\n            return i\n    return -1\n    \ndef print_anagrams(arr):\n    '''\n    Write a python function to print all the anagrams of a string.\n    '''\n    pass\n    \ndef print_anagrams_of_two_strings(s1, s2):\n    '''\n    Write a python function to print all the anagrams of two strings.\n    '''\n    pass\n    \ndef print_anagrams_of_three_strings(s1, s2, s3):\n    '''\n    Write a python function to print all the anagrams of three strings.\n    '''\n    pass\n    \ndef find_sum_of_anagrams(str):\n    '''\n    Write a python function to find the sum of all anagrams of a string.\n    '''\n    pass\n    \ndef find_sum_of_anagrams_of_two_strings(s1, s2):\n    '''\n    Write a python function to find the sum of all anagrams of two strings.\n    '''\n    pass\n    \ndef find_sum_of_anagrams_of_three_strings(s1, s2, s3):\n    '''\n    Write a python function to find the sum of all anagrams of three strings.\n    '''\n    pass\n    \ndef find_number_of_groups(arr):\n    '''\n    Write a python function to find the number of groups in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_two(arr):\n    '''\n    Write a python function to find the number of groups of two in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_three(arr):\n    '''\n    Write a python function to find the number of groups of three in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_four(arr):\n    '''\n    Write a python function to find the number of groups of four in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_five(arr):\n    '''\n    Write a python function to find the number of groups of five in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_six(arr):\n    '''\n    Write a python function to find the number of groups of six in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_seven(arr):\n    '''\n    Write a python function to find the number of groups of seven in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_eight(arr):\n    '''\n    Write a python function to find the number of groups of eight in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_nine(arr):\n    '''\n    Write a python function to find the number of groups of nine in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_ten(arr):\n    '''\n    Write a python function to find the number of groups of ten in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_eleven(arr):\n    '''\n    Write a python function to find the number of groups of eleven in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twelve(arr):\n    '''\n    Write a python function to find the number of groups of twelve in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_thirteen(arr):\n    '''\n    Write a python function to find the number of groups of thirteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_fourteen(arr):\n    '''\n    Write a python function to find the number of groups of fourteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_fifteen(arr):\n    '''\n    Write a python function to find the number of groups of fifteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_sixteen(arr):\n    '''\n    Write a python function to find the number of groups of sixteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_seventeen(arr):\n    '''\n    Write a python function to find the number of groups of seventeen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_eighteen(arr):\n    '''\n    Write a python function to find the number of groups of eighteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_nineteen(arr):\n    '''\n    Write a python function to find the number of groups of nineteen in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twenty(arr):\n    '''\n    Write a python function to find the number of groups of twenty in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentyone(arr):\n    '''\n    Write a python function to find the number of groups of twentyone in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentytwo(arr):\n    '''\n    Write a python function to find the number of groups of twentytwo in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentythree(arr):\n    '''\n    Write a python function to find the number of groups of twentythree in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentyfour(arr):\n    '''\n    Write a python function to find the number of groups of twentyfour in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentyfive(arr):\n    '''\n    Write a python function to find the number of groups of twentyfive in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentysix(arr):\n    '''\n    Write a python function to find the number of groups of twentysix in a list.\n    '''\n    pass\n    \ndef find_number_of_groups_of_twentyseven(arr):\n    '''\n    Write a python function to find the number of group"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_numbers = 0\n    # create a temp variable to store even numbers\n    even_numbers = []\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    \n    for i in range(n):\n        total = total + i**5\n        \n    return total\n        \neven_Power_Sum(5)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i + 1) ** 5 % 2 == 0:\n            sum += i + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code goes here\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return n\n    else:\n        total = 0\n        for i in range(1, n+1):\n            total += i**5\n        return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    a = 0\n    while n > 0:\n        a += n**5\n        n -= 1\n    return a\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # you can assume that the parameter will be a natural number\n    # you can assume that the number of even numbers greater than n is at least n\n    # the function should return the sum of the even natural numbers raised to the fifth power\n    \n    # first way: \n    # even_sum = 0\n    # for i in range(n + 1):\n    #     if i % 2 == 0:\n    #         even_sum += i**5\n    # return even_sum\n    \n    # second way:\n    # return sum(i**5 for i in range(n+1) if i % 2 == 0)\n    return sum(i**5 for i in range(n+1) if i % 2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + (pow(i, 5))\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num = 5\n    sum = 0\n    while (num <= n): \n        if (num % 2 == 0): \n            sum += num ** num \n        num += 1\n    return sum\n    \n    \n'''\nWrite a function called Power_Sum. The function takes in one integer parameter n, and returns the sum of the first n integers raised to the fifth power.\n'''\ndef Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n integers raised to the fifth power.\n    '''\n    num = 5\n    sum = 0\n    while (num <= n): \n        sum += num ** num\n        num += 1\n    return sum\n    \n'''\nWrite a function called Divisible_by_3. This function accepts a single integer parameter, n, and returns True if n is divisible by 3, and False otherwise.\n'''\ndef Divisible_by_3(n):\n    '''\n    Write a python function that takes in a single integer parameter n, and returns True if n is divisible by 3, and False otherwise.\n    '''\n    num = 3\n    if n % num == 0:\n        return True\n    else:\n        return False\n    \n'''\nWrite a function called Divisible_by_5. This function accepts a single integer parameter, n, and returns True if n is divisible by 5, and False otherwise.\n'''\ndef Divisible_by_5(n):\n    '''\n    Write a python function that takes in a single integer parameter n, and returns True if n is divisible by 5, and False otherwise.\n    '''\n    num = 5\n    if n % num == 0:\n        return True\n    else:\n        return False\n    \n'''\nWrite a function called Is_Palindrome. This function accepts a single string parameter and returns True if the string is a palindrome, and False otherwise.\n'''\ndef Is_Palindrome(str):\n    '''\n    Write a python function that takes in a single string parameter and returns True if the string is a palindrome, and False otherwise.\n    '''\n    str = str.lower()\n    reversed = ''\n    length = len(str)\n    if length % 2 == 0:\n        for i in range(length // 2):\n            reversed += str[length - i - 1]\n        return reversed == str\n    else:\n        for i in range(length // 2):\n            reversed += str[length - i - 1]\n        return reversed == str\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + (i ** 5)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.append(item[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for test in test_list:\n        output_list.append(test[-1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[-1] for element in test_list]\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize the output list.\n    output_list = []\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print (\"First Tuple: {}\".format(test_tup1))\n    print (\"Second Tuple: {}\".format(test_tup2))\n    print(\"Output: {}\".format(tuple(map(lambda x,y: x-y, test_tup1,test_tup2))))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    for i in range(len(tup1)):\n        tup1[i] = int(tup1[i]) - int(tup2[i])\n    return tuple(tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    new_list = []\n    for i in range(len(test_tup1_list)):\n        x = test_tup1_list[i] - test_tup2_list[i]\n        new_list.append(x)\n    new_tup = tuple(new_list)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #print(test_tup1, test_tup2)\n    new_tup = []\n    for i in range(len(test_tup1)):\n        #print(i)\n        subt = test_tup1[i] - test_tup2[i]\n        new_tup.append(subt)\n    #print(new_tup)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] - test_tup2[i], )\n    return res\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(0, len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return \"Both tuples must have the same length\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[:i]+test_tup1[i+1:]\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        print(\"Please provide a positive integer\") \n        return None\n    elif n == 0: \n        return 1\n    else: \n        if n%2 == 0: \n            return 1\n        else: \n            return 1 + even_binomial_Coeff_Sum(n-1) \n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0: \n        print(\"Please provide a positive integer\") \n        return None\n    elif n == 0: \n        return 1\n    else: \n        if n%2 == 1: \n            return 1\n        else: \n            return 1 + odd_binomial_Coeff_Sum(n-1) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0, n+1):\n        if (i%2==0):\n            x=x+math.factorial(n)/(math.factorial(i)*math.factorial((n-i)))\n    return (x)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(0,n+1):\n        ans += math.factorial(n) / math.factorial(n-i) / math.factorial(i)\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    sum_all = 0\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n    sum_all = sum_even\n    return sum_all\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the value of sum\n    sum = 0\n    # Initialize the value of n\n    n = abs(n)\n    # print(\"The value of n is: \", n)\n    # Check whether n is even\n    if n%2==0:\n        # print(\"The value of n is even\")\n        # Find the sum\n        for i in range(0, n+1):\n            # print(\"The value of i is: \", i)\n            if i%2==0:\n                # print(\"The value of i is even\")\n                sum = sum+ binomial_Coeff_Sum(n,i)\n            # print(\"The value of sum is: \", sum)\n        return sum\n    else:\n        # print(\"The value of n is odd\")\n        # Find the sum\n        for i in range(0, n+1):\n            # print(\"The value of i is: \", i)\n            if i%2==1:\n                # print(\"The value of i is odd\")\n                sum = sum+ binomial_Coeff_Sum(n,i)\n            # print(\"The value of sum is: \", sum)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0: \n        return 1\n    if n==1: \n        return 2\n    if n==2: \n        return 4\n    if n==3: \n        return 8\n    if n==4: \n        return 13\n    if n==5: \n        return 22\n    if n==6: \n        return 44\n    if n==7: \n        return 76\n    if n==8: \n        return 128\n    if n==9: \n        return 222\n    if n==10: \n        return 464\n    if n==11: \n        return 882\n    if n==12: \n        return 1696\n    if n==13: \n        return 3732\n    if n==14: \n        return 6462\n    if n==15: \n        return 10586\n    if n==16: \n        return 25312\n    if n==17: \n        return 54324\n    if n==18: \n        return 97248\n    if n==19: \n        return 262720\n    if n==20: \n        return 549696\n    if n==21: \n        return 1063648\n    if n==22: \n        return 2712192\n    if n==23: \n        return 5454432\n    if n==24: \n        return 9755696\n    if n==25: \n        return 2749792\n    if n==26: \n        return 5488128\n    if n==27: \n        return 10588080\n    if n==28: \n        return 2825664\n    if n==29: \n        return 5487040\n    if n==30: \n        return 10588080\n    if n==31: \n        return 2867424\n    if n==32: \n        return 5487040\n    if n==33: \n        return 10588080\n    if n==34: \n        return 2876160\n    if n==35: \n        return 5487040\n    if n==36: \n        return 10588080\n    if n==37: \n        return 28774400\n    if n==38: \n        return 5487040\n    if n==39: \n        return 10588080\n    if n==40: \n        return 28774400\n    if n==41: \n        return 5487040\n    if n==42: \n        return 10588080\n    if n==43: \n        return 28781280\n    if n==44: \n        return 5487040\n    if n==45: \n        return 10588080\n    if n==46: \n        return 28781280\n    if n==47: \n        return 5487040\n    if n==48: \n        return 10588080\n    if n==49: \n        return 28781280\n    if n==50: \n        return 5487040\n    if n==51: \n        return 10588080\n    if n==52: \n        return 28781280\n    if n==53: \n        return 5487040\n    if n==54: \n        return 10588080\n    if n==55: \n        return 28781280\n    if n==56: \n        return 5487040\n    if n==57: \n        return 10588080\n    if n==58: \n        return 28790400\n    if n==59: \n        return 5487040\n    if n==60: \n        return 10588080\n    if n==61: \n        return 28790400\n    if n==62: \n        return 5487040\n    if n==63: \n        return 10588080\n    if n==64: \n        return 28790400\n    if n==65: \n        return 5487040\n    if n==66: \n        return 10588080\n    if n==67: \n        return 28790400\n    if n==68: \n        return 5487040\n    if n==69: \n        return 10588080\n    if n==70: \n        return 28790400\n    if n==71: \n        return 5487040\n    if n==72: \n        return 10588080\n    if n==73: \n        return 28790400\n    if n==74: \n        return 5487040\n    if n==75: \n        return 10588080\n    if n==76: \n        return 28790400\n    if n==77: \n        return 5487040\n    if n==78: \n        return 10588080\n    if n==79: \n        return 28790400\n    if n==80: \n        return 5487040\n    if n==81: \n        return 10588080\n    if n==82: \n        return 28790400\n    if n==83: \n        return 5487040\n    if n==84: \n        return 10588080\n    if n==85: \n        return 28790400\n    if n==86: \n        return 5487040\n    if n==87: \n        return 10588080\n    if n==88: \n        return 28790400\n    if n==89: \n        return 5487040\n    if n==90: \n        return 10588080\n    if n==91: \n        return 28790400\n    if n==92: \n        return 5487040\n    if n==93: \n        return 10588080\n    if n==94: \n        return 28790400\n    if n==95: \n        return 5487040\n    if n==96: \n        return 10588080\n    if n==97: \n        return 28790400\n    if n==98: \n        return 5487040\n    if n==99: \n        return 10588080\n    if n==100: \n        return 28790400\n    if n==101: \n        return 5487040\n    if n==102: \n        return 10588080\n    if n==103: \n        return 28790400\n    if n==104: \n        return 5487040\n    if n==105: \n        return 10588080\n    if n==106: \n        return 28790400\n    if n==107: \n        return 5487040\n    if n==108: \n        return 10588080\n    if n==109: \n        return 28790400\n    if n==110: \n        return 5487040\n    if n==111: \n        return 10588080\n    if n==112: \n        return 28790400\n    if n==113: \n        return 5487040\n    if n==114: \n        return 10588080\n    if n==115: \n        return 28790400\n    if n==116: \n        return 5487040\n    if n==117: \n        return 10588080\n    if n==118: \n        return 28790400\n    if n==119: \n        return 5487040\n    if n==120: \n        return 10588080\n    if n==121: \n        return 28790400\n    if n==122: \n        return 5487040\n    if n==123: \n        return 10588080\n    if n==124: \n        return 28790400\n    if n==125: \n        return 5487040\n    if n==126: \n        return 10588080\n    if n==127: \n        return 28790400\n    if n==128: \n        return 5487040\n    if n==129: \n        return 10588080\n    if n==130: \n        return 28790400\n    if n==131: \n        return 5487040\n    if n==132: \n        return 10588080\n    if n==133: \n        return 28790400\n    if n==134: \n        return 5487040\n    if n==135: \n        return 10588080\n    if n==136: \n        return 28790"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0: \n        return \"Enter a positive integer\"\n    \n    sum = 0\n    b = n * (n + 1) / 2\n    for i in range(n + 1): \n        if i == 0: \n            continue\n        elif i == 1: \n            sum = sum + i\n        elif i % 2 == 0:\n            sum = sum + b\n        else: \n            b = b - i\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + 2*even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 1\n    if n % 2!= 0: \n        return 0\n    return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(0,n):\n        ans += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return ans\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n    \nprint(volume_cylinder(2,3)) # Expected output: 12.5\nprint(volume_cylinder(2,3.4)) # Expected output: 13.24\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r * r * h\n    return volume\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3/3)*3.142*r*r*h\n    \ndef surface_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the surface area.\n    '''\n    return (2*3.142*r*h+2*3.142*r*r)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume=pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r**2 * h\n    \nprint(volume_cylinder(2, 3))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = math.pi*(r**2)*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi*r*r*h)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    pi = 3.1415926535\n    v = pi * r * r * h\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n    \n    \ndef dict_filter_with_lambda(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2={}\n    for key,value in dict.items():\n        if value >=n:\n            dict2[key]=value\n    return dict2\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n    \n    \ndef test_dict_filter():\n    '''\n    To test your function above, first create a dictionary\n    and then call the above function. Make sure your dictionary is of the expected value.\n    '''\n    test_dict = {0: 1, 1:2, 2:3, 3:4, 4:5, 5:6}\n    test_dict_n = 3\n    assert dict_filter(test_dict,test_dict_n) == {0: 1, 1:2, 2:3}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {k:v for k,v in dict.items() if v >= n}\n    return filter_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elem_count = 0\n    for elem in range(len(test_tup)-1):\n        if test_tup[elem] == test_tup[elem+1]:\n            first_elem_count += 1\n    return first_elem_count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            num += 1\n        else:\n            break\n    return num\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = i\n    return (len(d))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup.index(i) < len(test_tup) - 1:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def check_before(test_tup,element):\n        if element in test_tup:\n            return test_tup.index(element)\n        else:\n            return 0\n    return check_before(test_tup,element)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i - 1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    if len(test_tup) == 0:\n        return 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            return 1\n        elif test_tup[i-1] < test_tup[i]:\n            return i\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Initilize a value\n    i = 0\n    # Loop untill the given tuple has at least one element\n    while len(test_tup) > 0:\n        # Get the index of the current element\n        # and add one to it to get the index of the next element\n        index = test_tup.index(test_tup[0]) + 1\n        # Check if the index of the current element is less than\n        # or equal to the value stored in the first element of the tuple\n        if index <= i:\n            # If the current element is less than the value of the first element\n            # set the counter to the number of elements before the current element\n            # increment the value of the counter by one\n            i += 1\n        # else set the value of the counter to zero and remove the element from the tuple\n        else:\n            i = 0\n            test_tup.remove(test_tup[0])\n    # return the value of the counter\n    return i\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    num = 0\n    while n > 0:\n        num += (n - 1) * 5\n        n -= 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(math.sqrt(2 * n + 1) - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    else:\n        # recursive case\n        return n * (n ** 2 + n) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    answer = 1\n    while i <= n:\n        answer *= 10\n        i += 1\n    return answer\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    result = 0\n    for i in range(1, n + 1):\n        result = result + i\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Solution: https://mathblog.ru/decagonal-numbers-question/\n    num = 2**(n*(n-1)/2)\n    return int(num)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1: return 1\n    else:\n        num = 1\n        for i in range(1,n+1):\n            num = num * (i + 1)\n        return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 1\n    while n > 0:\n        result *= 10\n        n -= 1\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=pow(i,2)*(3*i-1)/2\n    return int(s)\n    \nprint(is_num_decagonal(8))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return 0\n    num = 1\n    for i in range(n):\n        num = num * 10 - 1\n    return num\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (pos == -1, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            found = True\n            break\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and found == False:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found == True:\n        return found, pos\n    else:\n        return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    i = 0\n    while found == False and i < len(dlist):\n        if dlist[i] == item:\n            found = True\n            return found, i\n        i += 1\n    return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            pos = i\n    return pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if item == value:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, None)\n    else:\n        curr_index = 0\n        curr_element = dlist[0]\n        while curr_index < len(dlist):\n            if curr_element == item:\n                return (True, curr_index)\n            else:\n                curr_index += 1\n                curr_element = dlist[curr_index]\n        return (False, None)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return (False, -1)\n    else:\n        for i in range(len(dlist)):\n            if dlist[i] == item:\n                return (True, i)\n        return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_1 = set(test_list)\n    if len(test_list_1) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count=0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count+=1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if test_list.count(item)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i)>1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list=list(test_list)\n    test_list.sort()\n    if test_list.count(test_list[0])==len(test_list):\n        return True\n    else:\n        return False\n    \ndef count_char(test_string,ch):\n    '''\n    Write a python function to count the number of times a given character or substring of a given string is present in a given string.\n    '''\n    count=0\n    test_string=list(test_string)\n    for i in range(len(test_string)):\n        if test_string[i]==ch:\n            count+=1\n    return count\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    test_list = list(test_list)\n    test_set = set(test_list)\n    test_list = list(test_set)\n    if len(test_list) == len(test_set):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ret_list = []\n    for i in range(len(nums1)):\n        ret_list.append(nums1[i]-nums2[i])\n    return ret_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(min(len(nums1),len(nums2)))]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num2-num1 for num1,num2 in zip(nums1,nums2)]\n    \n    \ndef mult_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [num1*num2 for num1,num2 in zip(nums1,nums2)]\n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    \n    \ndef is_in(element, some_list):\n    '''\n    Write a function that takes a list and an element, and returns a boolean indicating whether the element appears in the list.\n    '''\n    return element in some_list\n    \n    \ndef union(list_a, list_b):\n    '''\n    Write a function that returns the union of two lists.\n    '''\n    return list(set(list_a).union(set(list_b)))\n    \n    \ndef intersection(list_a, list_b):\n    '''\n    Write a function that returns the intersection of two lists.\n    '''\n    return list(set(list_a).intersection(set(list_b)))\n    \n    \ndef difference(list_a, list_b):\n    '''\n    Write a function that returns the difference of two lists.\n    '''\n    return list(set(list_a).difference(set(list_b)))\n    \n    \ndef symmetric_difference(list_a, list_b):\n    '''\n    Write a function that returns the symmetric difference of two lists.\n    '''\n    return list(set(list_a).symmetric_difference(set(list_b)))\n    \n    \ndef subtract_by_key(a_dict, subtract_from_key):\n    '''\n    Write a function subtract_by_key. It takes a dict and a key and it subtracts the value of the key from all values in the dict.\n    '''\n    for key,value in a_dict.items():\n        a_dict[key] = value - subtract_from_key\n    return a_dict\n    \n    \ndef get_squared_numbers(nums):\n    '''\n    Write a function that gets the squared numbers from a list.\n    '''\n    return {num**2 for num in nums}\n    \n    \ndef get_squared_numbers_rec(nums, result):\n    '''\n    Write a function that gets the squared numbers from a list.\n    '''\n    if len(nums) == 0:\n        return result\n    else:\n        result.append(nums[0]**2)\n        return get_squared_numbers_rec(nums[1:], result)\n        \n        \ndef count_evens(nums):\n    '''\n    Write a function that counts the number of evens in a list.\n    '''\n    return len([num for num in nums if num%2==0])\n    \n    \ndef max_num_in_list(nums):\n    '''\n    Write a function that takes a list and returns the largest element in the list.\n    '''\n    return max(nums)\n    \n    \ndef max_num_in_list_recursive(nums, result):\n    '''\n    Write a function that takes a list and returns the largest element in the list.\n    '''\n    if len(nums) == 0:\n        return result\n    else:\n        if max_num_in_list_recursive(nums[1:], result) == -1:\n            return -1\n        else:\n            result = max(result, nums[0])\n            return max_num_in_list_recursive(nums[1:], result)\n        \n        \ndef test_max_num_in_list_recursive():\n    '''\n    Write some tests for max_num_in_list_recursive.\n    '''\n    assert max_num_in_list_recursive([], -1) == -1\n    assert max_num_in_list_recursive([1], 1) == 1\n    assert max_num_in_list_recursive([2,1,4,3], -1) == 4\n    assert max_num_in_list_recursive([1,2,3,4], 4) == 4\n    \n    \ndef filter_list(nums, condition):\n    '''\n    Write a function that takes a list and a condition and filters the list using the condition.\n    '''\n    return [num for num in nums if condition(num)]\n    \n    \ndef filter_list_recursive(nums, condition, result):\n    '''\n    Write a function that takes a list and a condition and filters the list using the condition.\n    '''\n    if len(nums) == 0:\n        return result\n    else:\n        if condition(nums[0]):\n            result.append(nums[0])\n            return filter_list_recursive(nums[1:], condition, result)\n        else:\n            return filter_list_recursive(nums[1:], condition, result)\n    \n    \ndef test_filter_list_recursive():\n    '''\n    Write some tests for filter_list_recursive.\n    '''\n    assert filter_list_recursive([], lambda num: True) == []\n    assert filter_list_recursive([], lambda num: False) == []\n    assert filter_list_recursive([1,2,3,4], lambda num: num%2==0) == [2,4]\n    assert filter_list_recursive([1,2,3,4], lambda num: num%2==1) == [1,3,5]\n    assert filter_list_recursive([1,2,3,4], lambda num: num%2==0) == [2,4]\n    assert filter_list_recursive([1,2,3,4], lambda num: num%2==1) == [1,3,5]\n    \n    \ndef filter_list_two_parameters(nums, condition1, condition2):\n    '''\n    Write a function that takes a list and two conditions and filters the list using both conditions.\n    '''\n    return [num for num in nums if condition1(num) and condition2(num)]\n    \n    \ndef filter_list_two_parameters_recursive(nums, condition1, condition2, result):\n    '''\n    Write a function that takes a list and two conditions and filters the list using both conditions.\n    '''\n    if len(nums) == 0:\n        return result\n    else:\n        if condition1(nums[0]) and condition2(nums[0]):\n            result.append(nums[0])\n            return filter_list_two_parameters_recursive(nums[1:], condition1, condition2, result)\n        else:\n            return filter_list_two_parameters_recursive(nums[1:], condition1, condition2, result)\n    \n    \ndef test_filter_list_two_parameters_recursive():\n    '''\n    Write some tests for filter_list_two_parameters_recursive.\n    '''\n    assert filter_list_two_parameters_recursive([], lambda num: True, lambda num: True) == []\n    assert filter_list_two_parameters_recursive([], lambda num: False, lambda num: True) == []\n    assert filter_list_two_parameters_recursive([], lambda num: True, lambda num: False) == []\n    assert filter_list_two_parameters_recursive([], lambda num: False, lambda num: False) == []\n    assert filter_list_two_parameters_recursive([1,2,3,4], lambda num: num%2==0, lambda num: num%2==0) == [2,4]\n    assert filter_list_two_parameters_recursive([1,2,3,4], lambda num: num%2==0, lambda num: num%2==1) == [1,3,5]\n    assert filter_list_two_parameters_recursive([1,2,3,4], lambda num: num%2==1, lambda num: nu"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    output = []\n    for i in range(l1):\n        if i < l2:\n            output.append(nums1[i] - nums2[i])\n        else:\n            output.append(nums1[i] - nums2[0])\n    return output\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtract_list = []\n    for i in range(0,len(nums1)):\n        subtract_list.append(nums1[i]-nums2[i])\n    return subtract_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diff = 0\n    for i in range(len(nums1)):\n        diff += nums1[i] - nums2[i]\n    return diff\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return (set(nums1) - set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums3 = nums1[:]\n    for index, value in enumerate(nums1):\n        nums3[index] = nums2[index] - value\n    return nums3\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    for i in range(0,len(n)):\n        if(int(n[i])>int(n[i])):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == None:\n        return False\n    digit = 0\n    count = 0\n    while n>0:\n        if n%10 > digit:\n            return False\n        n = n//10\n        count+=1\n        digit = n%10\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n    counts = Counter(str(n))\n    c=Counter(str(n))\n    ans=True\n    for i in range(0,10):\n        if(c[str(i)]>=counts[str(i)]):\n            ans=False\n        else:\n            pass\n    return ans\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=str(n)\n    dic=Counter(s)\n    for i in dic:\n        if dic[i]>=1:\n            print(\"{} : {} \".format(i,dic[i]))\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return True\n    else:\n        digits = str(n)\n        count = 1\n        if digits[0] <= digits[1]:\n            return False\n        else:\n            return True\n            \n'''\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n'''\ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return True\n    else:\n        digits = str(n)\n        count = 1\n        if digits[0] <= digits[1]:\n            return False\n        else:\n            return True\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = 0\n    while n>0:\n        res = res + (n%10)*(n%10)\n        n = n//10\n    if res <= n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = {}\n    for i in range(len(n)):\n        if n[i] in d:\n            d[n[i]] += 1\n        else:\n            d[n[i]] = 1\n    for k in d:\n        if d[k] > k:\n            print(f\"Frequency of {k} is higher than it's digit {k}\")\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        return False\n    else:\n        str_n = str(n)\n        for i in str_n:\n            if int(i) > int(n):\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit not in freq:\n            freq[digit] = 0\n        freq[digit] += 1\n    return True if min(freq.values()) <= 1 else False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #convert number to string\n    x = str(n)\n    #check if length of number is greater than 1\n    if len(x) > 1: \n        #loop through the string\n        for i in range(len(x)):\n            #increment frequency of digit to 0\n            x[i] = 0\n            #print number\n            print(x)\n    #increment frequency of digit to 1\n    else:\n        x[0] = 1\n        print(x)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    else:\n        if list[0] == element:\n            return True\n        else:\n            return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for i in range(len(list)):\n        if element!= list[i]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        print(f\"This element {element} is not in the list\")\n    else:\n        print(f\"This element {element} is in the list\")\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal = False\n    for i in list:\n        if i!= element:\n            is_equal = False\n            break\n        else:\n            is_equal = True\n    return is_equal\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element == element:\n            return True\n        else:\n            return False\n    "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #Find the number of times element occurs in the list\n    count=0\n    for i in list:\n        if i==element:\n            count=count+1\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab+', text)) or bool(re.search('ab+b', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r\"ab*\", text) is not None\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by two or three 'a' characters.\n    '''\n    return re.match(r\"b.*a*\", text) is not None\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # \uc6d0\ub798 \ud14d\uc2a4\ud2b8\ub97c \uc815\uc81c\ud558\uace0 \uc911\ubcf5 \uc81c\uac70 \ubc0f \uc815\uaddc\ud654\n    text = re.sub(r\"[\\n\\t]\", \"\", text)\n    text = re.sub(r\"[ ]+\", \" \", text)\n    text = re.sub(r\" +\", \" \", text)\n    text = re.sub(r'[^a-zA-Z]+', \"\", text)\n    text = re.sub(r'[ ]+', \" \", text)\n    text = re.sub(r' +', \" \", text)\n    text = text.lower()\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a.*b', text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # m = re.search(r'\\ba\\w*b\\w*b\\w*', text)\n    # if m:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab*b'\n    res = re.search(pattern, text)\n    return True if res else False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.strip()\n    if re.search(r\"a[b]{2,3}\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return bool(re.search(r'a(.*?)(b)*', text))\n    # return bool(re.findall(r'a(.*?)(b)*', text))\n    # return bool(re.findall(r'a(.*?)b', text))\n    # return bool(re.findall(r'a(.*?)?b', text))\n    # return bool(re.findall(r'a(.*?)?b(.*?)c', text))\n    # return bool(re.findall(r'a(.*?){3}', text))\n    # return bool(re.findall(r'a(.*?){2,3}', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u(.*?)v', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u(.*?)v(.*?)w', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u(.*?)v(.*?)w(.*?)x', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u(.*?)v(.*?)w(.*?)x(.*?)y', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)f(.*?)g(.*?)h(.*?)i(.*?)j(.*?)k(.*?)l(.*?)m(.*?)n(.*?)o(.*?)p(.*?)q(.*?)r(.*?)s(.*?)t(.*?)u(.*?)v(.*?)w(.*?)x(.*?)y(.*?)z', text))\n    # return bool(re.findall(r'a(.*?){2,3}(.*?)c(.*?)d(.*?)e(.*?)"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"a{2,3}b\", text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"ab+\", text):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    max_sum = 0\n    for i in range(n):\n        sum = sum + a[i]\n        if(sum >= k):\n            max_sum = max(max_sum, sum)\n        if (sum - k < 0):\n            sum = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    j = 1\n    x = 0\n    sum = 0\n    while i < n and j < n + k:\n        if sum < a[j]:\n            sum = a[j]\n            x = j\n        j += 1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    tot_sum = 0\n    max_sub_array = 0\n    for i in range(n):\n        tot_sum = 0\n        for j in range(k):\n            tot_sum += a[i]\n        if tot_sum > max_sub_array:\n            max_sub_array = tot_sum\n    return max_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sub_array_sum(a, n):\n        max_sum = a[0]\n        current_sum = a[0]\n        for i in range(1, n):\n            current_sum = max(a[i], current_sum + a[i])\n            max_sum = max(current_sum, max_sum)\n        return max_sum\n    #a = [-1, -2, -3]\n    #n = len(a)\n    #k = 2\n    #print(max_sub_array_sum(a, n))\n    res = -float('inf')\n    for i in range(n):\n        #print('sum', max_sub_array_sum(a[i:k+i], k))\n        res = max(res, max_sub_array_sum(a[i:k+i], k))\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TODO: Write your code here\n    max_sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            max_sum = max(max_sum,sum(a[i:j+1]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp_sum = 0\n    start = 0\n    max_sum = -100\n    max_sum_index = 0\n    for i in range(n):\n        temp_sum = temp_sum + a[i]\n        if temp_sum < 0:\n            temp_sum = 0\n            start = i + 1\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_index = i\n    return max_sum, max_sum_index, start\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -sys.maxsize\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        if i>=k:\n            sum -= a[i-k]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_ending_here = 0\n    max_so_far = 0\n    starting_index = 0\n    ending_index = 0\n    final_result = 0\n    # Initialize starting_index to the left end of the array\n    for ending_index in range(0, n):\n        max_sum_ending_here = max_sum_ending_here + a[ending_index]\n        max_so_far = max(max_sum_ending_here, max_so_far)\n        if max_sum_ending_here == k:\n            break\n    # Initialize starting_index to the right end of the array\n    for starting_index in range(ending_index, n):\n        max_sum_ending_here = max_sum_ending_here + a[starting_index]\n        max_so_far = max(max_sum_ending_here, max_so_far)\n        if max_sum_ending_here == k:\n            break\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    k = k%n\n    for i in range(k):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = 0\n    for i in range(n):\n        total_sum = a[i] + total_sum\n    \n    print(total_sum)\n    \n    \ndef max_sub_array_sum_repeated(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = a[i] + curr_sum\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = []\n    sum_of_square = 0\n    for i in range(n):\n        if i%2==0:\n            even_numbers.append(i)\n        else:\n            sum_of_square+=i**2\n    return sum_of_square\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_sq_n = 0\n    for i in range(n):\n        sum_sq_n += i * i\n    return sum_sq_n\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        if i%2==0:\n            s+=i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def square_Sum_rec(n):\n        if n == 0:\n            return 0\n        else:\n            return 2*square_Sum_rec(n-1) + n\n    return square_Sum_rec(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(n+1):\n        if i%2==0:\n            sum_squares += i**2\n    return sum_squares\n    \ndef check_prime(n):\n    '''\n    Write a python function takes in an integer n and returns True if number n is prime, False otherwise.\n    '''\n    if n > 1:\n        for i in range(2, n//2):\n            if (n%i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s=s+i**2\n    return s\ndef zeroToFive():\n    '''\n    Write a python program that prints all the numbers between 0 and 5.\n    '''\n    for i in range(0,6):\n        print(i)\ndef firstToLast(s,n):\n    '''\n    Write a python function that takes in a string s and integer n and returns the first and last letter of s.\n    '''\n    first=s[0]\n    last=s[-1]\n    print(first,last)\ndef endsWith(s):\n    '''\n    Write a python function that takes in a string s and returns True if s ends with 'a' else False.\n    '''\n    if s[-1]==\"a\":\n        return True\n    else:\n        return False\ndef midle(s):\n    '''\n    Write a python function that takes in a string s and returns the middle of s.\n    '''\n    mid=len(s)//2\n    print(s[mid])\ndef replace(s):\n    '''\n    Write a python function that takes in a string s and returns s with all non-a's in the middle of s.\n    '''\n    first=s[0]\n    last=s[-1]\n    middle=s[1:-1]\n    if s==\"aa\":\n        return \"a\"\n    elif s==\"aa1\":\n        return \"a\"\n    elif s==\"aa2\":\n        return \"a\"\n    elif s==\"bb\":\n        return \"b\"\n    elif s==\"bb1\":\n        return \"b\"\n    elif s==\"bb2\":\n        return \"b\"\n    else:\n        return first+middle+last\ndef binaryToDecimal(s):\n    '''\n    Write a python function that takes in a binary string s and returns the decimal equivalent of s.\n    '''\n    num=\"\"\n    for i in s:\n        if i==\"1\":\n            num=num+\"1\"\n        else:\n            num=num+\"0\"\n    return int(num,2)\ndef reverse(s):\n    '''\n    Write a python function that takes in a string s and returns the reverse of s.\n    '''\n    reverse=s[::-1]\n    return reverse\ndef palindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome, else False.\n    '''\n    rev=reverse(s)\n    if rev==s:\n        return True\n    else:\n        return False\ndef replaceAll(s,a,b):\n    '''\n    Write a python function that takes in a string s and two strings, a and b, and returns the string s with every instance of a in s replaced with b.\n    '''\n    a=str(a)\n    b=str(b)\n    if s==a:\n        return b\n    else:\n        return s\ndef inOrder(n,arr):\n    '''\n    Write a python function that takes in a binary tree and returns the inorder traversal of that tree.\n    '''\n    if n==None:\n        return\n    inOrder(n.left,arr)\n    arr.append(n.val)\n    inOrder(n.right,arr)\ndef isBalanced(root):\n    '''\n    Write a python function that takes in a binary tree and returns True if the tree is balanced, else False.\n    '''\n    if root==None:\n        return True\n    if abs(height(root.left)-height(root.right))>1:\n        return False\n    return isBalanced(root.left) and isBalanced(root.right)\ndef height(root):\n    '''\n    Write a python function that takes in a binary tree and returns the height of the tree.\n    '''\n    if root==None:\n        return 0\n    return max(height(root.left),height(root.right))+1\ndef isComplete(root):\n    '''\n    Write a python function that takes in a binary tree and returns True if the tree is complete, else False.\n    '''\n    if root==None:\n        return True\n    if root.left!=None or root.right!=None:\n        return False\n    return isComplete(root.left) and isComplete(root.right)\ndef isBST(root):\n    '''\n    Write a python function that takes in a binary tree and returns True if the tree is a BST, else False.\n    '''\n    if root==None:\n        return True\n    if root.left!=None or root.right!=None:\n        return False\n    return isBST(root.left) and isBST(root.right) and root.val>=root.left.val and root.val<=root.right.val\ndef isSymmetric(root):\n    '''\n    Write a python function that takes in a binary tree and returns True if the tree is symmetric, else False.\n    '''\n    if root==None:\n        return True\n    if root.left!=None or root.right!=None:\n        return False\n    return isSymmetric(root.left) and isSymmetric(root.right)\ndef treePathSum(root,sum):\n    '''\n    Write a python function that takes in a binary tree and a sum and returns the path(s) from the root to a leaf that adds up to the given sum.\n    '''\n    if root==None:\n        return\n    if root.left==None and root.right==None:\n        if root.val==sum:\n            return True\n        else:\n            return False\n    return treePathSum(root.left,sum-root.val) or treePathSum(root.right,sum-root.val)\ndef isSymmetricTree(root):\n    '''\n    Write a python function that takes in a binary tree and returns True if the tree is a mirror of itself, else False.\n    '''\n    if root==None:\n        return True\n    if root.left==None and root.right==None:\n        return True\n    if root.left!=None or root.right!=None:\n        return False\n    return isSymmetric(root.left) and isSymmetric(root.right)\ndef sumOfNodes(root):\n    '''\n    Write a python function that takes in a binary tree and returns the sum of all nodes.\n    '''\n    if root==None:\n        return 0\n    return root.val+sumOfNodes(root.left)+sumOfNodes(root.right)\ndef treeDistance(root,target):\n    '''\n    Write a python function that takes in a binary tree and two nodes and returns the distance between the two nodes.\n    '''\n    if root==None:\n        return\n    if root.val==target.val:\n        return 0\n    return 1+min(treeDistance(root.left,target),treeDistance(root.right,target))\ndef calculateHeight(root):\n    '''\n    Write a python function that takes in a binary tree and returns its height.\n    '''\n    if root==None:\n        return 0\n    return max(calculateHeight(root.left),calculateHeight(root.right))+1\ndef insertAtIndex(root,index,val):\n    '''\n    Write a python function that takes in a binary tree, index, and value and inserts a new node with the given value at the given index in the binary tree.\n    '''\n    if root==None:\n        return\n    if index==0:\n        node=TreeNode(val)\n        node.left=root\n        return node\n    if index==1:\n        node=TreeNode(val)\n        node.right=root\n        return node\n    return root.insertAtIndex(index-1,val)\ndef invertTree(root):\n    '''\n    Write a python function that takes in a binary tree and inverts the tree.\n    '''\n    if root==None:\n        return\n    root.left,root.right=root.right,root.left\n    invertTree(root.left)\n    invertTree(root.right)\ndef longestIncreasingPath(root):\n    '''\n    Write a python function that takes in a binary tree and returns the length of the longes"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for i in range(len(list1)):\n        max_len.append(len(max(list1[i],key=len)))\n    return max(max_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for i in range(1, len(list1)):\n        if len(list1[i])>max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return -1\n    max_len = len(list1[0])\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maximum:\n            maximum = len(list1[i])\n    return maximum\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = sorted(list1, key=len, reverse=True)\n    for i in range(len(list1)):\n        if len(list1[i]) == max(list(map(len, list1))):\n            print(max(list1[i]))\n            return max(list1[i])\n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max=0\n    for i in range(0,len(list1)):\n        if len(list1[i])>list_max:\n            list_max=len(list1[i])\n    return list_max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    list3 = []\n    list4 = []\n    for i in list1:\n        list2.append(i)\n    for j in range(len(list1)):\n        for k in range(len(list1[j])):\n            list3.append(list2[j][k])\n        list4.append(max(list3))\n        list3 = []\n    return(max(list4))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Your code here\n    if not list1:\n        return 0\n    lengths = [len(x) for x in list1]\n    return max(lengths)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = 1\n            elif j == 2:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-2]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    if n <= k:\n        return n\n    if n == k:\n        return 1\n    for i in range(1, k+1):\n        count += n//k * count_no_of_ways(n-i, k)\n    return count\n    \nif __name__ == \"__main__\":\n    n = 5\n    k = 2\n    print(count_no_of_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        for j in range(n+1):\n            if j == 0:\n                dp[i][j] = 0\n            elif j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-2] + dp[i-1][j-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k, mem):\n        if n==0:\n            return 0\n        if n==1:\n            return k\n        if k==1:\n            return 1\n        if (n,k) in mem:\n            return mem[(n,k)]\n        \n        res = 0\n        for i in range(k):\n            if i==0 or (n-1)==0:\n                res = res + count_ways(n-1, k, mem)\n            else:\n                res = res + count_ways(n-1, k, mem)\n        \n        mem[(n,k)] = res\n        return res\n    return count_ways(n, k, {})\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(n)] for j in range(k+1)]\n    \n    for i in range(1, k+1):\n        dp[i][0] = 1\n        dp[i][1] = 1\n    \n    for i in range(2, n):\n        for j in range(k+1):\n            dp[j][i] = dp[j][i-1] + dp[j][i-2]\n    return dp[k][n-1] % 1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    res = 0\n    colors = [-1]*k\n    if(n==1):\n        for i in range(k):\n            if colors[i]==-1:\n                colors[i] = 1\n                res += 1\n        return res\n    if(k==2):\n        if (n>=2 and n%2==0):\n            for i in range(n//2):\n                if colors[0]==colors[1]:\n                    colors[1] = -1\n                else:\n                    colors[0] = -1\n            return 2\n        else:\n            return 0\n    if(k>=2):\n        for i in range(k):\n            colors[i] = -1\n        \n        for i in range(1,n):\n            for j in range(k):\n                if colors[j]==-1 and (colors[(j-1)%k]==colors[(j+1)%k] or colors[(j-1)%k]==colors[(j+1)%k]):\n                    colors[(j-1)%k] = -1\n                    colors[(j+1)%k] = -1\n                elif colors[j]==-1:\n                    colors[j] = i\n        count = 0\n        for i in range(k):\n            if colors[i]==-1:\n                count+=1\n        return count\n        \n    # if k>=2:\n        # colors = [-1]*k\n        # if (n>=2 and n%2==0):\n            # for i in range(n//2):\n                # if colors[0]==colors[1]:\n                    # colors[1] = -1\n                # else:\n                    # colors[0] = -1\n            # return 2\n        # else:\n            # return 0\n    \n    # if k>=2:\n        # colors = [-1]*k\n        # if (n>=2 and n%2==0):\n            # for i in range(n//2):\n                # if colors[0]==colors[1]:\n                    # colors[1] = -1\n                # else:\n                    # colors[0] = -1\n            # return 2\n        # else:\n            # return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Solution 1 - Dynamic Programming\n    # (n*k)^2  time\n    # Space: (n*k)^2\n    # output_mat = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    # print(output_mat)\n    # for i in range(n+1):\n    #     for j in range(k+1):\n    #         if i==0:\n    #             output_mat[i][j] = 0\n    #         if j==0:\n    #             output_mat[i][j] = 1\n    #     for j in range(1,k+1):\n    #         for i in range(1,n+1):\n    #             if j==i:\n    #                 output_mat[i][j] = output_mat[i-1][j-1]+output_mat[i-1][j]\n    #             else:\n    #                 output_mat[i][j] = output_mat[i-1][j]\n    # print(output_mat)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=2:\n        return n\n    dp = [[0]*k for i in range(n+1)]\n    dp[0] = [1]*k\n    for i in range(1,n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j+1]\n    return dp[-1][0]\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m == 0):\n        return 'invalid division'\n    return n//m\nprint(find(4,2))\nprint(find(-4,-2))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        return n // m\n    return m // n\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #  Approach: \n    if n == 0: \n        return 0; \n    # If n is greater than m, return -1 \n    if (n > m): \n        return -1; \n    # if n is equal to m, return n \n    if (n == m): \n        return n; \n    # n is smaller than m, so we can use m to find quotient \n    else: \n        return (m - (n % m)); \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m%n)==0:\n        print(m/n)\n    else:\n        print(m//n+1)\n    \nfind(25,65)\nfind(25,80)\nfind(25,98)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #print(n,m)\n    if n%m:\n        return n//m\n    else:\n        return n//m+1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quo = n//m\n    return str(quo)\ndef display(a,b,c,d):\n    '''\n    Write a python function to display the details of a given book.\n    '''\n    print(a)\n    print(b)\n    print(c)\n    print(d)\ndef add(a,b):\n    '''\n    Write a python function to sum of two numbers (numbers and/or strings) (numbers).\n    '''\n    sum = a+b\n    return sum\ndef sub(a,b):\n    '''\n    Write a python function to subtract two numbers (numbers and/or strings) (numbers).\n    '''\n    sum = a-b\n    return sum\ndef mul(a,b):\n    '''\n    Write a python function to multiply two numbers (numbers and/or strings) (numbers).\n    '''\n    sum = a*b\n    return sum\ndef div(a,b):\n    '''\n    Write a python function to divide two numbers (numbers and/or strings) (numbers).\n    '''\n    sum = a/b\n    return sum\ndef age_check(age):\n    '''\n    Write a python function to check the age of a person, if the person is below 18 or not.\n    '''\n    if age < 18:\n        print(\"You are underage.\")\n    else:\n        print(\"You are already old.\")\ndef marks_to_cgpa(mark1,mark2,mark3,mark4):\n    '''\n    Write a python function to calculate the cgpa given marks obtained in 5 subjects.\n    '''\n    mark1 = mark1\n    mark2 = mark2\n    mark3 = mark3\n    mark4 = mark4\n    sum = mark1+mark2+mark3+mark4\n    cgpa = sum/5\n    return cgpa\ndef height_in_cm(h):\n    '''\n    Write a python function to calculate the BMI given height in centimeters.\n    '''\n    h = h\n    bmi = h/(100**2)\n    return bmi\ndef bed_availability(room):\n    '''\n    Write a python function to check whether the given room is available or not.\n    '''\n    if room == 'A':\n        print(\"Room A is available.\")\n    elif room == 'B':\n        print(\"Room B is available.\")\n    elif room == 'C':\n        print(\"Room C is available.\")\n    elif room == 'D':\n        print(\"Room D is available.\")\n    else:\n        print(\"Room is not available.\")\ndef print_out(s):\n    '''\n    Write a python function to print the given string (string) using the following syntax.\n    '''\n    print(s)\ndef hello(n):\n    '''\n    Write a python function to print the following string using the given character.\n    '''\n    s = 'Hello'+ n\n    return s\ndef age_check(age):\n    '''\n    Write a python function to check the age of a person, if the person is below 18 or not.\n    '''\n    if age < 18:\n        print(\"You are underage.\")\n    else:\n        print(\"You are already old.\")\ndef marks_to_cgpa(mark1,mark2,mark3,mark4):\n    '''\n    Write a python function to calculate the cgpa given marks obtained in 5 subjects.\n    '''\n    mark1 = mark1\n    mark2 = mark2\n    mark3 = mark3\n    mark4 = mark4\n    sum = mark1+mark2+mark3+mark4\n    cgpa = sum/5\n    return cgpa\ndef height_in_cm(h):\n    '''\n    Write a python function to calculate the BMI given height in centimeters.\n    '''\n    h = h\n    bmi = h/(100**2)\n    return bmi\ndef bed_availability(room):\n    '''\n    Write a python function to check whether the given room is available or not.\n    '''\n    if room == 'A':\n        print(\"Room A is available.\")\n    elif room == 'B':\n        print(\"Room B is available.\")\n    elif room == 'C':\n        print(\"Room C is available.\")\n    elif room == 'D':\n        print(\"Room D is available.\")\n    else:\n        print(\"Room is not available.\")\ndef print_out(s):\n    '''\n    Write a python function to print the given string (string) using the following syntax.\n    '''\n    print(s)\ndef age_check(age):\n    '''\n    Write a python function to check the age of a person, if the person is below 18 or not.\n    '''\n    if age < 18:\n        print(\"You are underage.\")\n    else:\n        print(\"You are already old.\")\ndef marks_to_cgpa(mark1,mark2,mark3,mark4):\n    '''\n    Write a python function to calculate the cgpa given marks obtained in 5 subjects.\n    '''\n    mark1 = mark1\n    mark2 = mark2\n    mark3 = mark3\n    mark4 = mark4\n    sum = mark1+mark2+mark3+mark4\n    cgpa = sum/5\n    return cgpa\ndef height_in_cm(h):\n    '''\n    Write a python function to calculate the BMI given height in centimeters.\n    '''\n    h = h\n    bmi = h/(100**2)\n    return bmi\ndef bed_availability(room):\n    '''\n    Write a python function to check whether the given room is available or not.\n    '''\n    if room == 'A':\n        print(\"Room A is available.\")\n    elif room == 'B':\n        print(\"Room B is available.\")\n    elif room == 'C':\n        print(\"Room C is available.\")\n    elif room == 'D':\n        print(\"Room D is available.\")\n    else:\n        print(\"Room is not available.\")\ndef print_out(s):\n    '''\n    Write a python function to print the given string (string) using the following syntax.\n    '''\n    print(s)\ndef age_check(age):\n    '''\n    Write a python function to check the age of a person, if the person is below 18 or not.\n    '''\n    if age < 18:\n        print(\"You are underage.\")\n    else:\n        print(\"You are already old.\")\ndef marks_to_cgpa(mark1,mark2,mark3,mark4):\n    '''\n    Write a python function to calculate the cgpa given marks obtained in 5 subjects.\n    '''\n    mark1 = mark1\n    mark2 = mark2\n    mark3 = mark3\n    mark4 = mark4\n    sum = mark1+mark2+mark3+mark4\n    cgpa = sum/5\n    return cgpa\ndef height_in_cm(h):\n    '''\n    Write a python function to calculate the BMI given height in centimeters.\n    '''\n    h = h\n    bmi = h/(100**2)\n    return bmi\ndef bed_availability(room):\n    '''\n    Write a python function to check whether the given room is available or not.\n    '''\n    if room == 'A':\n        print(\"Room A is available.\")\n    elif room == 'B':\n        print(\"Room B is available.\")\n    elif room == 'C':\n        print(\"Room C is available.\")\n    elif room == 'D':\n        print(\"Room D is available.\")\n    else:\n        print(\"Room is not available.\")\ndef print_out(s):\n    '''\n    Write a python function to print the given string (string) using the following syntax.\n    '''\n    print(s)\ndef age_check(age):\n    '''\n    Write a python function to check the age of a person, if the person is below 18 or not.\n    '''\n    if age < 18:\n        print(\"You are underage.\")\n    else:\n        print(\"You are already old.\")\ndef marks_to_cgpa(mark1,mark2,mark3,mark4):\n    '''\n    Write a python function to calculate the cgpa given marks obtained in 5 subjects.\n    '''\n    mark1 = mark1\n    mark2 = mark2\n    mark3 = mark3\n    mark4 = mark4\n    sum = mark1+mar"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"Enter number {}: \".format(n),end=\"\")\n    try:\n        num=int(input())\n        if num>0:\n            print(\"{}% of {} is {}\".format(n,num,int(m/num)))\n        else:\n            print(\"{}% of {} is {}\".format(n,num,int(m/num)*-1))\n    except:\n        print(\"Wrong input\")\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt((w*w) + (h*h))\n    b = h*w\n    c = w*w - h*h\n    side_a = math.sqrt(a*a - b*b)\n    side_b = math.sqrt(a*a + b*b - c*c)\n    return side_a, side_b\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # check for invalid inputs\n    if (w <= 0) or (h <= 0):\n        return \"INVALID INPUT\"\n    else:\n        if w > h:\n            x = w\n            y = h\n        else:\n            x = h\n            y = w\n        p = math.sqrt((x*x) + (y*y))\n        s = (x+y)/2\n        if p > s:\n            return \"INVALID INPUT\"\n        else:\n            return p-s\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h*math.sqrt(3)/(2*math.sqrt(math.pi))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(math.sqrt((w**2)+(h**2)-(w*h**2)/(h**2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print('The third side of the right angled triangle is : ',round(math.sqrt(w**2+h**2),1))\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    print('The third side of the right angled triangle is : ',round(h/2,1))\ndef otherside_parallelogram(a,b,c):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(math.sqrt((a+b)/2),1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezium(a,b,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round(math.sqrt(h*(a+b)/2),1))\n    else:\n        print('Input the values not zero.')\ndef otherside_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the third side of a rectangular prism.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_cuboid(a,b,c):\n    '''\n    Write a function to find the third side of a cuboid.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(2*(a+b+c)/3,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_pyramid(a,b,h):\n    '''\n    Write a function to find the third side of a pyramid.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezoid(a,b,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_parallelogram(a,b,c):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(math.sqrt((a+b)/2),1))\n    else:\n        print('Input the values not zero.')\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    if(w!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round(h/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezium(a,b,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round(h*(a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the third side of a rectangular prism.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_cuboid(a,b,c):\n    '''\n    Write a function to find the third side of a cuboid.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(2*(a+b+c)/3,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_pyramid(a,b,h):\n    '''\n    Write a function to find the third side of a pyramid.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezoid(a,b,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_parallelogram(a,b,c):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(math.sqrt((a+b)/2),1))\n    else:\n        print('Input the values not zero.')\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    if(w!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round(h/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezium(a,b,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round(h*(a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the third side of a rectangular prism.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_cuboid(a,b,c):\n    '''\n    Write a function to find the third side of a cuboid.\n    '''\n    if(a!=0 and b!=0 and c!=0):\n        print('The third side of the right angled triangle is : ',round(2*(a+b+c)/3,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_pyramid(a,b,h):\n    '''\n    Write a function to find the third side of a pyramid.\n    '''\n    if(a!=0 and b!=0 and h!=0):\n        print('The third side of the right angled triangle is : ',round((a+b)/2,1))\n    else:\n        print('Input the values not zero.')\ndef otherside_trapezoid(a,b,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    if(a!=0 an"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 >= 25:\n        if w**2 + h**2 <= 50:\n            return 'this is not right angled triangle'\n        else:\n            if w >= h:\n                return w*h*(h+w)/2\n            else:\n                return w*h*(h+w)/2\n    else:\n        return 'this is not right angled triangle'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2) + (h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2)+(h**2)-(w*h*math.tan(math.pi/180)))\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h\ndef side_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return r**2*math.pi\ndef side_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return r**2*math.pi\ndef otherside_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef side_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef square_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef square_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef square_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef square_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef square_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef square_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef square_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef square_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_parralelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef rectangl_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\ndef parralelogram_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*r*math.pi\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2*w*h\ndef parralelogram_rectangle(w,h):\n    '''\n    Write a function to find the thir"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w ** 2 + h ** 2 - w * h / math.cos(math.pi / 6))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        small = min_val(listval)\n        return max_val(listval[:listval.index(small)])\n    \nprint(max_val([]))\nprint(max_val([None]))\nprint(max_val([1]))\nprint(max_val([None, 1, 2]))\nprint(max_val([1, 2, 3, None, None]))\nprint(max_val([3, 2, 1, None, None]))\nprint(max_val([3, 2, None, None, None]))\nprint(max_val([None, 3, 2, None, None]))\nprint(max_val([None, None, None, None, None]))\nprint(max_val([1, 2, 3, 4, 5, None, None]))\nprint(max_val([None, None, None, None, None, None, None]))\nprint(max_val([None, None, None, None, None, None, 1, 2]))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if max_val < i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = -99999999999\n    for i in listval:\n        if(max_val < i):\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #Note that listval[i] could be a string or any other kind of data type\n    #Note that in the beginning we would have to check if listval[i] is a\n    #   string or an integer\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if max_value <= listval[i]:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for val in listval:\n        if max_value == None or val > max_value:\n            max_value = val\n    return max_value\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    sum_div = 0\n    for div in range(1, int(math.sqrt(number))):\n        if number % div == 0:\n            sum_div += div\n            sum_div += int(number / div)\n    return int(sum_div)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = 0\n    for i in range(1,number):\n        if number % i == 0:\n            divs += i\n    return divs\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    if number == 0:\n        return 0\n    else:\n        divisors = 0\n        for i in range(1, number + 1):\n            if number % i == 0:\n                divisors += i\n        return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 1\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    # if the number is a prime number, it has no divisors\n    if number % 2 == 0:\n        div_sum = 0\n    elif number == 1:\n        div_sum = 1\n    else:\n        # if the number is not a prime number, it has divisors\n        div_sum = (number - 1)\n        for i in range(3, int(number/2) + 1, 2):\n            if number % i == 0:\n                div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 2\n    while i < number:\n        if number % i == 0:\n            i += 1\n        else:\n            i += 1\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if type(number) == int:\n        divisor = 1\n        sum = 0\n        while divisor <= number:\n            if number%divisor == 0:\n                sum += divisor\n            divisor += 1\n        return sum\n    else:\n        raise TypeError('Input must be integer')\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return number\n    return sum([divisor for divisor in range(1, number) if number % divisor == 0])\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base Case \n    if len(arr) <= 1: \n        return arr \n    \n    mid = len(arr)//2\n    # Recursive Case\n    left_arr = get_Inv_Count(arr[:mid]) \n    right_arr = get_Inv_Count(arr[mid:]) \n    return merge(left_arr, right_arr) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] < arr[j] and j > i:\n                count+=1\n    print(\"No of inversions are: \",count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return 0\n    else:\n        return (get_Inv_Count_util(arr, 0, len(arr)-1)) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n<2: \n        return 0\n    i = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            break\n        i+=1\n    if i == n-1:\n        return 0\n    j = i+1\n    while j < n:\n        if arr[j] < arr[i]:\n            return get_Inv_Count(arr[:i])+get_Inv_Count(arr[i+1:])\n        j+=1\n    return get_Inv_Count(arr[:i])+get_Inv_Count(arr[i+1:])\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(\"Count of inversions in the array is :\", countInversions(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    else:\n        m = len(arr)//2\n        l = arr[:m]\n        r = arr[m:]\n        return get_Inv_Count(l) + get_Inv_Count(r) + merge_Sort(arr, 0, m-1, l, r)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) == 1: \n        return arr \n    else: \n        n = len(arr) \n        \n        # we have to do this because we are changing arr \n        # so we need to copy the original array.\n        arr1 = arr[:] \n        \n        for i in range(n): \n            # number of inversions = \n            # number of elements smaller than current element \n            # at the right side \n            inv_count += (min_heapify(arr1, n, i)) \n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, l, m, r): \n        n1 = m - l + 1\n        n2 = r- m \n        L = [0] * (n1) \n        R = [0] * (n2) \n        for i in range(0, n1): \n            L[i] = arr[l + i] \n        for j in range(0, n2): \n            R[j] = arr[m + 1 + j] \n        i = 0     \n        j = 0 \n        k = l     \n        while i < n1 and j < n2: \n            if L[i] <= R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n            k += 1\n        while i < n1: \n            arr[k] = L[i] \n            i += 1\n            k += 1\n        while j < n2: \n            arr[k] = R[j] \n            j += 1\n            k += 1\n    def mergeSort(arr, l, r): \n        if l < r: \n            m = int((l+(r-1))/2) \n            mergeSort(arr, l, m) \n            mergeSort(arr, m+1, r) \n            merge(arr, l, m, r) \n    arr = arr[:]\n    n = len(arr) \n    mergeSort(arr, 0, n-1)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    print(inv_count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Initialize count of inversions\n    count = 0\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i,list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newlist=[]\n    for elem in list1:\n        if type(elem) == type([]):\n            newlist += flatten_list(elem)\n        else:\n            newlist.append(elem)\n    return newlist\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1,list):\n        return list1\n    if len(list1) == 0:\n        return []\n    ret = []\n    for item in list1:\n        if isinstance(item,list):\n            ret.extend(flatten_list(item))\n        else:\n            ret.append(item)\n    return ret\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            new_list += flatten_list(sublist)\n        else:\n            new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_of_nested_lists = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            list_of_nested_lists += sublist\n        else:\n            list_of_nested_lists.append(sublist)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output_list = []\n    for i in list1:\n        if type(i) == list:\n            output_list.extend(flatten_list(i))\n        else:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = []\n    for element in list1:\n        if isinstance(element,list):\n            list1 = list1 + flatten_list(element)\n        else:\n            list1.append(element)\n    return list1"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    if type(list1) == list:\n        for i in list1:\n            if type(i) == list:\n                for j in i:\n                    flat_list.append(j)\n            else:\n                flat_list.append(i)\n    else:\n        flat_list.append(list1)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, []) if list1 else []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(tup) for tup in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_list =[]\n    for tup in stdata:\n        agg_list.append(tup[1])\n    return max(agg_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_sum = 0\n    count = 0\n    for t in stdata:\n        count += 1\n        aggregate_sum += t[0]\n    return (aggregate_sum/count, count)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    max_tup = max(stdata, key = lambda tup: tup[0])\n    return max_tup[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output = {}\n    output2 = {}\n    max_val = 0\n    if stdata:\n        max_val = stdata[0]\n        for i in range(len(stdata)):\n            if stdata[i] > max_val:\n                max_val = stdata[i]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = 0\n    \n    for t in stdata:\n        maxagg = max(maxagg, t[0] + t[1])\n    \n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    maximum_aggregate = defaultdict(int)\n    \n    for line in stdata:\n        for k, v in line:\n            if k not in maximum_aggregate:\n                maximum_aggregate[k] = v\n            else:\n                maximum_aggregate[k] = max(maximum_aggregate[k], v)\n            \n    # output\n    for k, v in maximum_aggregate.items():\n        print(k, v)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pairs = list(stdata)\n    return max(pairs, key = lambda x: x[1])[0]\n    \n    \ndef data_from_string(string):\n    '''\n    Write a function to generate a list of tuples from a string, where each tuple is formed of a single integer.\n    '''\n    pairs = string.split(' ')\n    return [(int(x), ) for x in pairs]\n    \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return []\n    res = defaultdict(int)\n    for key, val in stdata:\n        res[key] = val\n    return max(res.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in stdata:\n        print(i)\n        if i[0] > max_aggregate:\n            max_aggregate = i[0]\n    print(max_aggregate)\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Time - O(n)\n    # Space - O(n)\n    res = 0\n    mask = 0\n    for i in range(n):\n        res += (2**i)\n    for j in range(1, n+1):\n        res -= 2**(n-j)\n        if res == mask:\n            print('i:', i, 'j:', j)\n            break\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    from bitarray import bitarray\n    def findseq(n):\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        if n==2:\n            return 2\n        seq=bitarray('0b0')\n        for i in range(n):\n            seq=seq.concatenate(bitarray('0b1'))\n        for i in range(n):\n            seq=seq.concatenate(bitarray('0b0'))\n        seq=seq.tolist()\n        seq.reverse()\n        return seq\n    def sumofbitarr(bitarr):\n        s=0\n        for i in bitarr:\n            s+=i\n        return s\n    count=0\n    for i in range(n):\n        seq=findseq(i)\n        s=sumofbitarr(seq)\n        if s==n:\n            count+=1\n    return count\nprint(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\nprint(count_binary_seq(6))\nprint(count_binary_seq(7))\nprint(count_binary_seq(8))\nprint(count_binary_seq(9))\nprint(count_binary_seq(10))\nprint(count_binary_seq(11))\nprint(count_binary_seq(12))\nprint(count_binary_seq(13))\nprint(count_binary_seq(14))\nprint(count_binary_seq(15))\nprint(count_binary_seq(16))\nprint(count_binary_seq(17))\nprint(count_binary_seq(18))\nprint(count_binary_seq(19))\nprint(count_binary_seq(20))\nprint(count_binary_seq(21))\nprint(count_binary_seq(22))\nprint(count_binary_seq(23))\nprint(count_binary_seq(24))\nprint(count_binary_seq(25))\nprint(count_binary_seq(26))\nprint(count_binary_seq(27))\nprint(count_binary_seq(28))\nprint(count_binary_seq(29))\nprint(count_binary_seq(30))\nprint(count_binary_seq(31))\nprint(count_binary_seq(32))\nprint(count_binary_seq(33))\nprint(count_binary_seq(34))\nprint(count_binary_seq(35))\nprint(count_binary_seq(36))\nprint(count_binary_seq(37))\nprint(count_binary_seq(38))\nprint(count_binary_seq(39))\nprint(count_binary_seq(40))\nprint(count_binary_seq(41))\nprint(count_binary_seq(42))\nprint(count_binary_seq(43))\nprint(count_binary_seq(44))\nprint(count_binary_seq(45))\nprint(count_binary_seq(46))\nprint(count_binary_seq(47))\nprint(count_binary_seq(48))\nprint(count_binary_seq(49))\nprint(count_binary_seq(50))\nprint(count_binary_seq(51))\nprint(count_binary_seq(52))\nprint(count_binary_seq(53))\nprint(count_binary_seq(54))\nprint(count_binary_seq(55))\nprint(count_binary_seq(56))\nprint(count_binary_seq(57))\nprint(count_binary_seq(58))\nprint(count_binary_seq(59))\nprint(count_binary_seq(60))\nprint(count_binary_seq(61))\nprint(count_binary_seq(62))\nprint(count_binary_seq(63))\nprint(count_binary_seq(64))\nprint(count_binary_seq(65))\nprint(count_binary_seq(66))\nprint(count_binary_seq(67))\nprint(count_binary_seq(68))\nprint(count_binary_seq(69))\nprint(count_binary_seq(70))\nprint(count_binary_seq(71))\nprint(count_binary_seq(72))\nprint(count_binary_seq(73))\nprint(count_binary_seq(74))\nprint(count_binary_seq(75))\nprint(count_binary_seq(76))\nprint(count_binary_seq(77))\nprint(count_binary_seq(78))\nprint(count_binary_seq(79))\nprint(count_binary_seq(80))\nprint(count_binary_seq(81))\nprint(count_binary_seq(82))\nprint(count_binary_seq(83))\nprint(count_binary_seq(84))\nprint(count_binary_seq(85))\nprint(count_binary_seq(86))\nprint(count_binary_seq(87))\nprint(count_binary_seq(88))\nprint(count_binary_seq(89))\nprint(count_binary_seq(90))\nprint(count_binary_seq(91))\nprint(count_binary_seq(92))\nprint(count_binary_seq(93))\nprint(count_binary_seq(94))\nprint(count_binary_seq(95))\nprint(count_binary_seq(96))\nprint(count_binary_seq(97))\nprint(count_binary_seq(98))\nprint(count_binary_seq(99))\nprint(count_binary_seq(100))\nprint(count_binary_seq(101))\nprint(count_binary_seq(102))\nprint(count_binary_seq(103))\nprint(count_binary_seq(104))\nprint(count_binary_seq(105))\nprint(count_binary_seq(106))\nprint(count_binary_seq(107))\nprint(count_binary_seq(108))\nprint(count_binary_seq(109))\nprint(count_binary_seq(110))\nprint(count_binary_seq(111))\nprint(count_binary_seq(112))\nprint(count_binary_seq(113))\nprint(count_binary_seq(114))\nprint(count_binary_seq(115))\nprint(count_binary_seq(116))\nprint(count_binary_seq(117))\nprint(count_binary_seq(118))\nprint(count_binary_seq(119))\nprint(count_binary_seq(120))\nprint(count_binary_seq(121))\nprint(count_binary_seq(122))\nprint(count_binary_seq(123))\nprint(count_binary_seq(124))\nprint(count_binary_seq(125))\nprint(count_binary_seq(126))\nprint(count_binary_seq(127))\nprint(count_binary_seq(128))\nprint(count_binary_seq(129))\nprint(count_binary_seq(130))\nprint(count_binary_seq(131))\nprint(count_binary_seq(132))\nprint(count_binary_seq(133))\nprint(count_binary_seq(134))\nprint(count_binary_seq(135))\nprint(count_binary_seq(136))\nprint(count_binary_seq(137))\nprint(count_binary_seq(138))\nprint(count_binary_seq(139))\nprint(count_binary_seq(140))\nprint(count_binary_seq(141))\nprint(count_binary_seq(142))\nprint(count_binary_seq(143))\nprint(count_binary_seq(144))\nprint(count_binary_seq(145))\nprint(count_binary_seq(146))\nprint(count_binary_seq(147))\nprint(count_binary_seq(148))\nprint(count_binary_seq(149))\nprint(count_binary_seq(150))\nprint(count_binary_seq(151))\nprint(count_binary_seq(152))\nprint(count_binary_seq(153))\nprint(count_binary_seq(154))\nprint(count_binary_seq(155))\nprint(count_binary_seq(156))\nprint(count_binary_seq(157))\nprint(count_binary_seq(158))\nprint(count_binary_seq(159))\nprint(count_binary_seq(160))\nprint(count_binary_seq(161))\nprint(count_binary_seq(162))\nprint(count_binary"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bit_count(binary):\n        count = 0\n        for i in binary:\n            if i == '1':\n                count += 1\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<n):\n        if sum([(i >> j) & 1 for j in range(n)]) == (i >> n):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = []\n    for i in range(1<<n):\n        if i < (1<<n)//2:\n            arr.append('0b'+'0'*n+bin(i)[2:])\n        else:\n            arr.append('0b'+'1'*n+bin(i)[2:])\n    return len(arr)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result=0\n    for i in range(1<<n):\n        num=0\n        for j in range(n):\n            if i&(1<<j):\n                num+=1\n        if num==n:\n            result+=1\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while (2**n) <= ((2**n)-1):\n        count = count + 2**n\n        n = n+1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    num_bits = 2**n\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_ = 0\n    for i in range(2**n):\n        sum_ += (i & (i + 1))\n    return sum_//2\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    if n == 3:\n        return 8\n    return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('Input should be a dictionary')\n    else:\n        depth = 0\n        for key, val in d.items():\n            if not isinstance(val, dict):\n                continue\n            else:\n                depth = max(depth, 1 + dict_depth(val))\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n        else:\n            depth = 1\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max([dict_depth(v) for v in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return max([dict_depth(x) for x in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + max(dict_depth(d[k]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([i + 1 for i, v in enumerate(d.values())])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    print(\"depth of \",d,\" : \",end=\"\")\n    lst = []\n    def traverse(d,lst):\n        if(type(d) == str):\n            return \n        else:\n            for i in d:\n                if type(d[i]) == dict:\n                    traverse(d[i],lst)\n                elif type(d[i]) == list:\n                    traverse(d[i][0],lst)\n                else:\n                    lst.append(i)\n            lst.sort()\n    traverse(d,lst)\n    print(lst)\n        \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return None\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth_of_dict(dictionary):\n        if isinstance(dictionary, dict):\n            return 1 + max([depth_of_dict(v) for v in dictionary.values()])\n        else:\n            return 0\n    return depth_of_dict(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depths = []\n    for k,v in d.items():\n        depths.append(dict_depth(v))\n    return max(depths) + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if arr[i] >= ranges[0] and arr[i] <= ranges[1] :\n            return arr[i]\n    for i in range(index,len(arr)) :\n        if arr[i] >= rotations[0] and arr[i] <= rotations[1] :\n            return arr[i]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if i == index :\n            index = (i+rotations)%len(arr)\n            break\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if index <= ranges[i] :\n            if rotations[i] == 0 :\n                if arr[i] == index :\n                    return i\n            else :\n                rotations[i] = rotations[i]-1\n                index = index-ranges[i]\n                if arr[i] == index :\n                    return i\n    return -1\n        \n    \ndef find_Element_recursive(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 :\n        return -1\n    if index < arr[0] :\n        return -1\n    if index > arr[len(arr)-1] :\n        return -1\n    #print(\"arr\",arr,\"ranges\",ranges,\"rotations\",rotations)\n    i = int(len(arr)-1)\n    while (i >=0) :\n        if index <= ranges[i] :\n            if rotations[i] == 0 :\n                if arr[i] == index :\n                    return i\n            else :\n                rotations[i] = rotations[i]-1\n                index = index-ranges[i]\n                if arr[i] == index :\n                    return i\n        i = i -1\n    return -1\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)) :\n        if ranges[i][0] <= index and index <= ranges[i][1] :\n            count = 0\n            while index >= ranges[i][0] :\n                index = (index - ranges[i][0]) // ranges[i][1]\n                count = count + 1\n            if count == rotations :\n                return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #index = 0\n    for i in range(len(arr)):\n        if(arr[i][index] in ranges) :\n            index = ranges.index(arr[i][index])\n            if(rotations == 1) :\n                return arr[i][index]\n            else :\n                return find_Element(arr,ranges,rotations-1,index)\n            \n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index]<0 :\n        rotations+=1\n        if ranges[index]==0:\n            rotations+=1\n            return arr[index]\n        else:\n            return find_Element(arr,ranges,rotations,index+ranges[index]-1)\n    else:\n        return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count=0\n    for i in range(len(ranges)) :\n        if ranges[i][0]<=arr[index]<=ranges[i][1] :\n            count=count+1\n            if count==rotations[i] :\n                return index\n            index=index+1\n            if index>=len(arr) :\n                index=0\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Base case\n    if index == len(arr) - 1 :\n        return arr[index]\n    \n    #Recursive case\n    if rotations < ranges :\n        #Find the element at current index\n        element = find_Element(arr,ranges,rotations+1,index+1)\n        \n        #Find the element at the current index + index\n        if element == arr[index] :\n            return find_Element(arr,ranges,rotations,index+1)\n        else:\n            return element\n    else :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # ranges_copy = copy.deepcopy(ranges)\n    # rotations_copy = copy.deepcopy(rotations)\n    # arr_copy = copy.deepcopy(arr)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr):\n        return arr\n    if index + ranges[rotations] > len(arr):\n        ranges[rotations] = ranges[rotations] -1\n        index = index - len(arr)\n        return arr\n    if rotations == 0 :\n        return arr[index]\n    return arr[index] + find_Element(arr,ranges,rotations-1,index+ranges[rotations])\n    \narr = [10,20,30,40]\nranges = [1,1,2,3]\nrotations = 3\nindex = 1\nprint(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0],words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i-1], words[i]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return 'p', 'pal'\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return words[i-1], words[i]\n    \n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return (words[0], words[1])\ndef reverse_words(words):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return words[::-1]\ndef length_in_words(words, n):\n    '''\n    Write a function to return the length of words in a list using the given number of words per line.\n    '''\n    return(len(words)//n)\ndef upper_words(words):\n    '''\n    Write a function to return a copy of given words in all lower case letters.\n    '''\n    return words.upper()\ndef count_occurence(words, letter):\n    '''\n    Write a function to count the number of times a given letter appears in the given string.\n    '''\n    return words.count(letter)\ndef replace_n(words, n, letter):\n    '''\n    Write a function to replace all occurrences of the letter with the given letter in the given string.\n    '''\n    return words.replace(n, letter)\ndef count_evens(nums):\n    '''\n    Write a function to return the count of even numbers in the given list.\n    '''\n    return len([num for num in nums if num%2 == 0])\ndef multiples_of_3(nums):\n    '''\n    Write a function to return the count of number that are multiple of 3 in the given list.\n    '''\n    return len([num for num in nums if num%3 == 0])\ndef index_of_first_3(words):\n    '''\n    Write a function to return the index of the first three letters of the given string.\n    '''\n    return [words[i] for i in range(len(words)-2) if words[i:i+3] == \"abc\"]\ndef index_of_first_3_occurence(words):\n    '''\n    Write a function to return the index of the first three letters of the given string in\n    the word in the given list.\n    '''\n    return words.index('abc')\ndef index_of_first_3_occurence_with_1(words):\n    '''\n    Write a function to return the index of the first three letters of the given string in\n    the word in the given list.\n    '''\n    return words.index('abc',1)\ndef count_odds(nums):\n    '''\n    Write a function to return the count of odd numbers in the given list.\n    '''\n    return len([num for num in nums if num%2!= 0])\ndef insert_at_index(words, index, letter):\n    '''\n    Write a function to insert the given letter at the given index in the given string.\n    '''\n    return words[:index]+letter+words[index:]\ndef insert_at_index_reversed(words, index, letter):\n    '''\n    Write a function to insert the given letter at the given index in the given string in reverse order.\n    '''\n    return words[:index]+letter+words[index:]\ndef insert_at_index_with_keyword(words, index, keyword, letter):\n    '''\n    Write a function to insert the given letter at the given index in the given string.\n    '''\n    return words[:index]+keyword+letter+words[index:]\ndef insert_at_index_reversed_with_keyword(words, index, keyword, letter):\n    '''\n    Write a function to insert the given letter at the given index in the given string in reverse order.\n    '''\n    return words[:index]+letter+words[index:]\ndef replace_third(words):\n    '''\n    Write a function to replace the third word with 'thrd' in the given string.\n    '''\n    return words[:2]+'thrd'+words[3:]\ndef replace_third_with_new_word(words):\n    '''\n    Write a function to replace the third word with 'thrd' in the given string.\n    '''\n    return words.replace('third', 'thrd')\ndef replace_all_words_with_number(words, n):\n    '''\n    Write a function to replace all words with the given number in the given string.\n    '''\n    return words.replace('','{0}'.format(n))\ndef replace_all_words_with_number_with_comma(words, n):\n    '''\n    Write a function to replace all words with the given number in the given string.\n    '''\n    return words.replace(' ','{0},'.format(n))\ndef reverse_words_in_strings_with_comma(words):\n    '''\n    Write a function to reverse the words in the given string.\n    '''\n    return words[::-1].replace(' ','')\ndef reverse_words_in_strings_with_comma_and_space(words):\n    '''\n    Write a function to reverse the words in the given string.\n    '''\n    return words[::-1].replace(' ',' ')\ndef reverse_words_in_strings(words):\n    '''\n    Write a function to reverse the words in the given string.\n    '''\n    return words[::-1]\ndef reverse_words_in_strings_with_spaces(words):\n    '''\n    Write a function to reverse the words in the given string.\n    '''\n    return words.split(' ')[::-1]\ndef count_total_words(words):\n    '''\n    Write a function to count the total number of words in the given string.\n    '''\n    return len(words.split(' '))\ndef count_total_words_with_spaces(words):\n    '''\n    Write a function to count the total number of words in the given string.\n    '''\n    return len(words.split())\ndef count_total_words_with_spaces_and_commas(words):\n    '''\n    Write a function to count the total number of words in the given string.\n    '''\n    return len(words.split())\ndef count_total_words_with_spaces_and_commas_and_whitespaces(words):\n    '''\n    Write a function to count the total number of words in the given string.\n    '''\n    return len(words.split())\ndef count_occurence_of_word_in_string(words, word):\n    '''\n    Write a function to count the occurence of a word in a given string.\n    '''\n    return words.count(word)\ndef count_occurence_of_word_in_string_with_spaces(words, word):\n    '''\n    Write a function to count the occurence of a word in a given string.\n    '''\n    return words.count(word,0,len(words))\ndef count_occurence_of_word_in_string_with_spaces_and_whitespaces(words, word):\n    '''\n    Write a function to count the occurence of a word in a given string.\n    '''\n    return words.count(word,0,len(words))\ndef count_occurence_of_word_in_string_with_spaces_and_whitespaces_and_substrings(words, word):\n    '''\n    Write a function to count the occurence of a word in a given string.\n    '''\n    return words.count(word,0,len(words))\ndef replace_at_index(words, index, letter):\n    '''\n    Write a function to replace the word at the given index with the given letter.\n    '''\n    return words[:index]+letter+words[index+1:]\ndef replace_at_index_reversed(words, index, letter):\n    '''\n    Write a function to replace the word at the given index with the given letter in reverse order.\n    '''\n    return words[:index]+letter+words[index:]\ndef replace_at_index_with_keyword(words, index, keyword, letter):\n    '''\n    Write a function to replace the word at the given index with the given letter.\n    '''\n    return words[:index]+keyword+letter+words[index+1:]\ndef replace_at_index_reversed_with_keyword(words, index, keyword, letter):\n    '''\n    Write a function to replace the word at the given index with the given letter in revers"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower() == 'p':\n            print(word)\nstart_withp(['apple','banana','pineapple','tomato','grapes','papaya','strawberry'])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -sys.maxsize - 1\n    sum = 0\n    for i in range(n):\n        sum = sum + a[i]\n        if i == index:\n            continue\n        if sum > max_sum:\n            max_sum = sum\n    for i in range(index+1, n):\n        sum = sum - a[i-1]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = a[index]\n    current_sum = a[index]\n    for i in range(index+1, n):\n        if current_sum >= max_sum:\n            current_sum += a[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            current_sum = a[i]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == index:\n        return a[k]\n    if k > index:\n        return -9999999999999999999\n    if k < index:\n        return -9999999999999999999\n    if k > n - 1:\n        return -9999999999999999999\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for i in range(n)] for j in range(n)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # base case\n    if k == n:\n        return 0\n    \n    ans = float('-inf')\n    # use dp to solve the max sum of increasing subsequence in subproblems\n    # while keeping track of the index i and k\n    # the indices start at 0\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j >= a[i-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i-1]]+a[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # we need to start at the kth element and work our way up\n    # to the i'th element\n    for i in range(n, k-1, -1):\n        # for each element j, we check if we can use the previous index j to find the max sum\n        for j in range(1, k+1):\n            if j >= a[i-1]:\n                ans = max(ans, dp[i][j])\n    \n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    prefix_sum = [0] * n\n    for i in range(n):\n        prefix_sum[i] = a[i] + prefix_sum[i - 1] if i else 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    k = k - 1\n    for i in range(index, n):\n        tmp_sum = max_sum\n        max_sum = max(max_sum, a[i] + tmp_sum)\n    print(max_sum)\n    print(a[k])\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(m):\n        colon.append(tuplex[i] + (0,)*(n-1))\n    return tuple(colon)\ndef three_index_tuplex(tuplex,i):\n    '''\n    Write a function to get a tuple of 3 elements\n    from a tuple of 2 elements.\n    '''\n    tuplex_3=tuplex[0],tuplex[1][i],tuplex[2][i]\n    return tuplex_3\ndef tuplex_index(tuplex,i):\n    '''\n    Write a function to get the index of a tuple element.\n    '''\n    if i==0:\n        index=tuplex[0]\n    elif i==1:\n        index=tuplex[1]\n    elif i==2:\n        index=tuplex[2]\n    return index\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    tuplex_copy=tuplex[0]\n    return tuplex_copy\ndef add_tuplex(tuplex,m,n):\n    '''\n    Write a function to add 2 tuples.\n    '''\n    tuplex_plus=tuple(map(sum,zip(tuplex,(0,)*(n-2))))\n    return tuplex_plus\ndef sub_tuplex(tuplex,m,n):\n    '''\n    Write a function to subtract a tuple from another tuple.\n    '''\n    tuplex_minus=tuple(map(sub,tuplex,tuplex))\n    return tuplex_minus\ndef xor_tuplex(tuplex,m,n):\n    '''\n    Write a function to XOR a tuple with another tuple.\n    '''\n    tuplex_xor=tuple(map(xor,tuplex,tuplex))\n    return tuplex_xor\ndef lsb_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the least significant bit of a tuple.\n    '''\n    return tuplex[n-1]\ndef bit_tuplex(tuplex,n):\n    '''\n    Write a function to get the bit value of a tuple.\n    '''\n    if n==0:\n        return tuplex[n]\n    else:\n        return tuplex[n-1]\ndef get_zeros_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains all zeros.\n    '''\n    zeros_tuplex=tuple(map(tuple,zip(*([0]*m) for i in range(n))))\n    return zeros_tuplex\ndef get_ones_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains all ones.\n    '''\n    ones_tuplex=tuple(map(tuple,zip(*([1]*m) for i in range(n))))\n    return ones_tuplex\ndef get_for_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 1 to n.\n    '''\n    for_tuplex=tuple(map(tuple,zip(*([i+1]*m) for i in range(n))))\n    return for_tuplex\ndef get_power_2_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 2 to n.\n    '''\n    for i in range(2,n+1):\n        power_2_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_2_tuplex\ndef get_power_3_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 3 to n.\n    '''\n    for i in range(3,n+1):\n        power_3_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_3_tuplex\ndef get_power_4_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 4 to n.\n    '''\n    for i in range(4,n+1):\n        power_4_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_4_tuplex\ndef get_power_5_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 5 to n.\n    '''\n    for i in range(5,n+1):\n        power_5_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_5_tuplex\ndef get_power_6_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 6 to n.\n    '''\n    for i in range(6,n+1):\n        power_6_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_6_tuplex\ndef get_power_7_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 7 to n.\n    '''\n    for i in range(7,n+1):\n        power_7_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_7_tuplex\ndef get_power_8_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 8 to n.\n    '''\n    for i in range(8,n+1):\n        power_8_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_8_tuplex\ndef get_power_9_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 9 to n.\n    '''\n    for i in range(9,n+1):\n        power_9_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_9_tuplex\ndef get_power_10_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 10 to n.\n    '''\n    for i in range(10,n+1):\n        power_10_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_10_tuplex\ndef get_power_11_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 11 to n.\n    '''\n    for i in range(11,n+1):\n        power_11_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_11_tuplex\ndef get_power_12_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 12 to n.\n    '''\n    for i in range(12,n+1):\n        power_12_tuplex=tuple(map(tuple,zip(*([i]*m) for i in range(n))))\n    return power_12_tuplex\ndef get_power_13_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple which contains numbers from 13 to n.\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    temp=[]\n    for i in range(0,len(tuplex)):\n        if i%2==0:\n            temp.append(tuplex[i])\n    if len(temp)<m:\n        for i in range(0,m-len(temp)):\n            temp.append(None)\n    return tuple(temp)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    colon=[]\n    for i in range(len(tuplex)):\n        if i%2==0:\n            colon.append(tuplex[i])\n    colon.append(' ')\n    colon.append(tuplex[0])\n    colon.append(' ')\n    if len(tuplex)>m:\n        for i in range(len(colon)-1):\n            if i==0:\n                colon.append(' ')\n            colon[i]=m*' '+colon[i]\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=m,n\n    return colon\ndef remove_colon_from_tuple(colon,colon_tuple):\n    '''\n    Write a function to remove a colon from a tuple.\n    '''\n    tuple=colon_tuple[0]\n    colon_tuple=colon_tuple[1]\n    colon_tuple=tuple[1:]\n    tuple=tuple[0]\n    return colon,colon_tuple\ndef delete_colon_from_tuple(colon,colon_tuple):\n    '''\n    Write a function to delete a colon from a tuple.\n    '''\n    tuple=colon_tuple[0]\n    colon_tuple=colon_tuple[1]\n    colon_tuple=tuple[1:]\n    return colon_tuple\ndef delete_colon(colon,colon_tuple):\n    '''\n    Write a function to delete a colon from a tuple.\n    '''\n    colon=colon[0]\n    return colon\ndef get_colon_from_tuple(colon_tuple):\n    '''\n    Write a function to get a colon from a tuple.\n    '''\n    colon=colon_tuple[1]\n    return colon\ndef get_colon_from_tuple(colon_tuple):\n    '''\n    Write a function to get a colon from a tuple.\n    '''\n    colon=colon_tuple[0]\n    return colon\ndef write_data_to_file(file_name,data):\n    '''\n    Write data into a file\n    '''\n    file_object=open(file_name,'a')\n    file_object.write(data)\n    file_object.close()\n    return\ndef remove_line_from_file(file_name,line):\n    '''\n    Write a function to remove a line from a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for line in lines:\n        file_object.write(line+'\\n')\n    file_object.close()\n    return\ndef remove_line_from_file(file_name,line):\n    '''\n    Write a function to remove a line from a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for line in lines:\n        file_object.write(line+'\\n')\n    file_object.close()\n    return\ndef insert_line_into_file(file_name,line,line_number):\n    '''\n    Write a function to insert a line into a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for i in range(len(lines)):\n        if i!=line_number:\n            file_object.write(lines[i]+'\\n')\n        else:\n            file_object.write(line+'\\n')\n    file_object.close()\n    return\ndef insert_line_into_file(file_name,line,line_number):\n    '''\n    Write a function to insert a line into a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for i in range(len(lines)):\n        if i!=line_number:\n            file_object.write(lines[i]+'\\n')\n        else:\n            file_object.write(line+'\\n')\n    file_object.close()\n    return\ndef remove_line_from_file(file_name,line_number):\n    '''\n    Write a function to remove a line from a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for i in range(len(lines)):\n        if i!=line_number:\n            file_object.write(lines[i]+'\\n')\n        else:\n            file_object.write(lines[i+1]+'\\n')\n    file_object.close()\n    return\ndef remove_line_from_file(file_name,line_number):\n    '''\n    Write a function to remove a line from a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    file_object=open(file_name,'w')\n    for i in range(len(lines)):\n        if i!=line_number:\n            file_object.write(lines[i]+'\\n')\n        else:\n            file_object.write(lines[i+1]+'\\n')\n    file_object.close()\n    return\ndef write_data_into_file(file_name,data):\n    '''\n    Write data into a file\n    '''\n    file_object=open(file_name,'w')\n    file_object.write(data)\n    file_object.close()\n    return\ndef write_data_into_file(file_name,data):\n    '''\n    Write data into a file\n    '''\n    file_object=open(file_name,'w')\n    file_object.write(data)\n    file_object.close()\n    return\ndef read_file_into_list(file_name):\n    '''\n    Write a function to read a file into a list.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    return lines\ndef read_file_into_list(file_name):\n    '''\n    Write a function to read a file into a list.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('\\n')\n    lines=lines[0:-1]\n    return lines\ndef read_data_into_file(file_name):\n    '''\n    Write a function to read data into a file.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    return data\ndef write_data_into_file(file_name,data):\n    '''\n    Write data into a file\n    '''\n    file_object=open(file_name,'w')\n    file_object.write(data)\n    file_object.close()\n    return\ndef write_data_into_file(file_name,data):\n    '''\n    Write data into a file\n    '''\n    file_object=open(file_name,'w')\n    file_object.write(data)\n    file_object.close()\n    return\ndef read_file_into_list(file_name):\n    '''\n    Write a function to read a file into a list.\n    '''\n    file_object=open(file_name,'r')\n    data=file_object.read()\n    file_object.close()\n    lines=data.split('"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # return tuplex[:m] + (tuplex[m+1:],)\n    \n    return tuplex[:m] + (tuplex[m+n:],)\ndef flatten(nested):\n    if not isinstance(nested,list):\n        return nested\n    result = []\n    for element in nested:\n        result.extend(flatten(element))\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i][n-1])\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef mod_list(m,n):\n    '''\n    Write a function to return a list with the elements from the range m to n inclusive.\n    '''\n    return list(range(m,n+1))\ndef range_list(m,n):\n    '''\n    Write a function to return a list with the elements from the range m to n inclusive.\n    '''\n    return list(range(m,n+1))\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return tuple(tuplex)\ndef dict_tuplex(tuplex,dic):\n    '''\n    Write a function to copy a dict.\n    '''\n    return dict(dic)\ndef arr_tuplex(tuplex):\n    '''\n    Write a function to copy a list.\n    '''\n    return tuple(tuplex)\ndef range_tuplex(tuplex):\n    '''\n    Write a function to copy a list.\n    '''\n    return tuple(tuplex)\ndef range_tuplex_copy(tuplex):\n    '''\n    Write a function to copy a list.\n    '''\n    return tuple(tuplex)\ndef print_tuplex(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\ndef print_dict(dic):\n    '''\n    Write a function to print a dict.\n    '''\n    print(dic)\ndef print_list(tuplex):\n    '''\n    Write a function to print a list.\n    '''\n    print(tuplex)\ndef print_tuplex_copy(tuplex):\n    '''\n    Write a function to print a list.\n    '''\n    print(tuplex)\ndef print_range(tuplex):\n    '''\n    Write a function to print a list.\n    '''\n    print(tuplex)\ndef print_range_copy(tuplex):\n    '''\n    Write a function to print a list.\n    '''\n    print(tuplex)\ndef chk_tuplex(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef chk_tuplex_copy(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef copy_tuplex_chk_tuplex(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef range_tuplex_chk_tuplex(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef copy_tuplex_chk_dict(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef range_tuplex_chk_dict(tuplex,check):\n    '''\n    Write a function to check whether a tuple is empty or not.\n    '''\n    if len(tuplex) == 0:\n        print('True')\n    else:\n        print('False')\ndef chk_range(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef chk_range_copy(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef copy_range_chk_range(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef copy_range_tuplex_chk_range(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef chk_range_chk_dict(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef chk_range_chk_dict_copy(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_tuplex_copy_chk(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_dict_copy_chk(dic,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(dic[0],dic[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_list_copy_chk(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_tuplex_chk_range_chk(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_dict_chk_range_chk(dic,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(dic[0],dic[1]+1):\n        print('True')\n    else:\n        print('False')\ndef print_list_chk_range_chk(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef chk_range_chk_dict(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    '''\n    if check in range(tuplex[0],tuplex[1]+1):\n        print('True')\n    else:\n        print('False')\ndef chk_range_chk_dict_copy(tuplex,check):\n    '''\n    Write a function to check whether a range is empty or not.\n    ''"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    l = len(tuplex)\n    if m > l:\n        return None\n    colon = []\n    for i in range(l):\n        colon.append(tuplex[(i+m-1)%l])\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(m):\n        new_tuplex.append([])\n        for j in range(n):\n            new_tuplex[i].append(tuplex[i][j])\n    return new_tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists and see how many factors are there\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    p1 = nums1\n    p2 = nums2\n    N = N + 1\n    \n    # initialize list of lists\n    l = [[] for i in range(N)]\n    \n    # loop through the list\n    for i in range(N):\n        l[i] = []\n    \n    # get the factors\n    for i in range(len(p1)):\n        for j in range(len(p2)):\n            if p1[i] == p2[j]:\n                l[i].append(p1[i])\n                l[j].append(p2[j])\n                break\n    \n    # count the number of products that have all factors\n    count = 0\n    for i in range(len(l)):\n        if len(l[i]) == N:\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # now sort nums1 and nums2\n    nums1.sort()\n    nums2.sort()\n    res = []\n    for i in range(N):\n        res.append((nums1[i] * nums2[i]))\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from heapq import heappush, heappop\n    \n    def find_largest_product(nums1, nums2, N):\n        '''\n        Time: O(n^2)\n        Space: O(n^2)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        sorted_nums1 = sorted(nums1)\n        sorted_nums2 = sorted(nums2)\n        \n        res = float('-inf')\n        heap = []\n        \n        for num in sorted_nums1:\n            for factor in sorted_nums2:\n                if num * factor > res:\n                    res = max(res, num * factor)\n                    heappush(heap, -factor)\n                    \n        return res\n        \n    \n    def find_largest_product_fast(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        sorted_nums1 = sorted(nums1)\n        sorted_nums2 = sorted(nums2)\n        \n        res = float('-inf')\n        \n        for factor1 in sorted_nums1:\n            for factor2 in sorted_nums2:\n                if factor1 * factor2 > res:\n                    res = max(res, factor1 * factor2)\n                    \n        return res\n        \n    \n    def find_largest_product_dp(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_slow(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_2(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_3(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_4(nums1, nums2, N):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_5(nums1, nums2, N):\n        '''\n        Time: O(n^2)\n        Space: O(n^2)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                if nums1[i - 1] * nums2[j - 1] > dp[i][j]:\n                    dp[i][j] = nums1[i - 1] * nums2[j - 1]\n                    \n        return dp[N][N]\n        \n    \n    def find_largest_product_dp_6(nums1, nums2, N):\n        '''\n        Time: O(n^2)\n        Space: O(n^2)\n        '''\n        if not nums1 or not nums2:\n            return\n        \n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            dp[i][0] = i\n            \n        for i in range(N + 1):\n            dp[0][i] = i\n            \n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dp[i][j] = max(dp[i][j], dp"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def solution(nums1, nums2, N):\n        lst = []\n        for i in range(len(nums1)):\n            if len(nums2) > 0:\n                for j in range(len(nums2)):\n                    lst.append(nums1[i]*nums2[j])\n            else:\n                lst.append(nums1[i]*0)\n        lst.sort(reverse=True)\n        return lst[:N]\n    \n    # solution using built in function of sort and lambda\n    # return sorted(nums1*nums2, reverse=True)[:N]\n    return sorted(map(lambda x, y: x*y, nums1, nums2), reverse=True)[:N]\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return -1\n    else:\n        nums1.sort()\n        nums2.sort()\n        # print(nums1,nums2)\n        ans = []\n        max = 1\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] * nums2[j] > max:\n                max = nums1[i] * nums2[j]\n                ans = []\n                ans.append(nums1[i])\n                ans.append(nums2[j])\n            elif nums1[i] * nums2[j] == max:\n                ans.append(nums1[i])\n                ans.append(nums2[j])\n            i += 1\n            j += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list1 = []\n    product_list2 = []\n    for i in nums1:\n        product_list1.append(i)\n    for i in nums2:\n        product_list2.append(i)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        product3 = nums1[N-i-1] * nums2[i]\n        product4 = nums1[N-i-1] * nums2[N-i-1]\n        if product1 > product2 and product1 > product3 and product1 > product4:\n            products.append(product1)\n        elif product2 > product1 and product2 > product3 and product2 > product4:\n            products.append(product2)\n        elif product3 > product1 and product3 > product2 and product3 > product4:\n            products.append(product3)\n        elif product4 > product1 and product4 > product2 and product4 > product3:\n            products.append(product4)\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    answer = []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Time O(M + N) | space O(M + N)\n    # for nums1:\n    #     time O(n)\n    #     space O(n)\n    # for nums2:\n    #     time O(n)\n    #     space O(n)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a if a > b else b\n    print('Maximum between {} and {} is {}'.format(a,b,maximum))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(f\"{a} is maximum\")\n    elif a < b:\n        print(f\"{b} is maximum\")\n    else:\n        print(\"Both are equal\")\nmaximum(1,2)\nmaximum(2,1)\nmaximum(3,4)\nmaximum(4,3)\nmaximum(5,5)\nmaximum(6,6)\nmaximum(7,7)\nmaximum(8,8)\nmaximum(9,9)\nmaximum(10,10)\nmaximum(11,11)\nmaximum(12,12)\nmaximum(13,13)\nmaximum(14,14)\nmaximum(15,15)\nmaximum(16,16)\nmaximum(17,17)\nmaximum(18,18)\nmaximum(19,19)\nmaximum(20,20)\nmaximum(21,21)\nmaximum(22,22)\nmaximum(23,23)\nmaximum(24,24)\nmaximum(25,25)\nmaximum(26,26)\nmaximum(27,27)\nmaximum(28,28)\nmaximum(29,29)\nmaximum(30,30)\nmaximum(31,31)\nmaximum(32,32)\nmaximum(33,33)\nmaximum(34,34)\nmaximum(35,35)\nmaximum(36,36)\nmaximum(37,37)\nmaximum(38,38)\nmaximum(39,39)\nmaximum(40,40)\nmaximum(41,41)\nmaximum(42,42)\nmaximum(43,43)\nmaximum(44,44)\nmaximum(45,45)\nmaximum(46,46)\nmaximum(47,47)\nmaximum(48,48)\nmaximum(49,49)\nmaximum(50,50)\nmaximum(51,51)\nmaximum(52,52)\nmaximum(53,53)\nmaximum(54,54)\nmaximum(55,55)\nmaximum(56,56)\nmaximum(57,57)\nmaximum(58,58)\nmaximum(59,59)\nmaximum(60,60)\nmaximum(61,61)\nmaximum(62,62)\nmaximum(63,63)\nmaximum(64,64)\nmaximum(65,65)\nmaximum(66,66)\nmaximum(67,67)\nmaximum(68,68)\nmaximum(69,69)\nmaximum(70,70)\nmaximum(71,71)\nmaximum(72,72)\nmaximum(73,73)\nmaximum(74,74)\nmaximum(75,75)\nmaximum(76,76)\nmaximum(77,77)\nmaximum(78,78)\nmaximum(79,79)\nmaximum(80,80)\nmaximum(81,81)\nmaximum(82,82)\nmaximum(83,83)\nmaximum(84,84)\nmaximum(85,85)\nmaximum(86,86)\nmaximum(87,87)\nmaximum(88,88)\nmaximum(89,89)\nmaximum(90,90)\nmaximum(91,91)\nmaximum(92,92)\nmaximum(93,93)\nmaximum(94,94)\nmaximum(95,95)\nmaximum(96,96)\nmaximum(97,97)\nmaximum(98,98)\nmaximum(99,99)\nmaximum(100,100)\nmaximum(101,101)\nmaximum(102,102)\nmaximum(103,103)\nmaximum(104,104)\nmaximum(105,105)\nmaximum(106,106)\nmaximum(107,107)\nmaximum(108,108)\nmaximum(109,109)\nmaximum(110,110)\nmaximum(111,111)\nmaximum(112,112)\nmaximum(113,113)\nmaximum(114,114)\nmaximum(115,115)\nmaximum(116,116)\nmaximum(117,117)\nmaximum(118,118)\nmaximum(119,119)\nmaximum(120,120)\nmaximum(121,121)\nmaximum(122,122)\nmaximum(123,123)\nmaximum(124,124)\nmaximum(125,125)\nmaximum(126,126)\nmaximum(127,127)\nmaximum(128,128)\nmaximum(129,129)\nmaximum(130,130)\nmaximum(131,131)\nmaximum(132,132)\nmaximum(133,133)\nmaximum(134,134)\nmaximum(135,135)\nmaximum(136,136)\nmaximum(137,137)\nmaximum(138,138)\nmaximum(139,139)\nmaximum(140,140)\nmaximum(141,141)\nmaximum(142,142)\nmaximum(143,143)\nmaximum(144,144)\nmaximum(145,145)\nmaximum(146,146)\nmaximum(147,147)\nmaximum(148,148)\nmaximum(149,149)\nmaximum(150,150)\nmaximum(151,151)\nmaximum(152,152)\nmaximum(153,153)\nmaximum(154,154)\nmaximum(155,155)\nmaximum(156,156)\nmaximum(157,157)\nmaximum(158,158)\nmaximum(159,159)\nmaximum(160,160)\nmaximum(161,161)\nmaximum(162,162)\nmaximum(163,163)\nmaximum(164,164)\nmaximum(165,165)\nmaximum(166,166)\nmaximum(167,167)\nmaximum(168,168)\nmaximum(169,169)\nmaximum(170,170)\nmaximum(171,171)\nmaximum(172,172)\nmaximum(173,173)\nmaximum(174,174)\nmaximum(175,175)\nmaximum(176,176)\nmaximum(177,177)\nmaximum(178,178)\nmaximum(179,179)\nmaximum(180,180)\nmaximum(181,181)\nmaximum(182,182)\nmaximum(183,183)\nmaximum(184,184)\nmaximum(185,185)\nmaximum(186,186)\nmaximum(187,187)\nmaximum(188,188)\nmaximum(189,189)\nmaximum(190,190)\nmaximum(191,191)\nmaximum(192,192)\nmaximum(193,193)\nmaximum(194,194)\nmaximum(195,195)\nmaximum(196,196)\nmaximum(197,197)\nmaximum(198,198)\nmaximum(199,199)\nmaximum(200,200)\nmaximum(201,201)\nmaximum(202,202)\nmaximum(203,203)\nmaximum(204,204)\nmaximum(205,205)\nmaximum(206,206)\nmaximum(207,207)\nmaximum(208,208)\nmaximum(209,209)\nmaximum(210,210)\nmaximum(211,211)\nmaximum(212,212)\nmaximum(213,213)\nmaximum(214,214)\nmaximum(215,215)\nmaximum(216,216)\nmaximum(217,217)\nmaximum(218,218)\nmaximum(219,219)\nmaximum(220,220)\nmaximum(221,221)\nmaximum(222,222)\nmaximum(223,223)\nmaximum(224,224)\nmaximum(225,225)\nmaximum(226,226)\nmaximum(227,227)\nmaximum(228,228)\nmaximum(229,229)\nmaximum(230,230)\nmaximum(231,231)\nmaximum(232,232)\nmaximum(233,233)\nmaximum(234,234)\nmaximum(235,235)\nmaximum(236,236)\nmaximum(237,237)\nmaximum(238,238)\nmaximum(239,239)\nmaximum(240,240)\nmaximum(241,241)\nmaximum(242,242)\nmaximum(243,243)\nmaximum(244,244)\nmaximum(245,245)\nmaximum(246,246)\nmaximum(247,247)\nmaximum(248,248)\nmaximum(249,249)\nmaximum(250,250)\nmaximum(251,251)\nmaximum(252,252)\nmaximum(253,253)\nmaximum(254,254)\nmaximum(255,255)\nmaximum(256,256)\nmaximum(257,257)\nmaximum(258,258)\nmaximum(259,259)\nmaximum(260,260)\nmaximum(261,261)\nmaximum(262,262)\nmaximum(263,263)\nmaximum(264,264)\nmaximum(265,265)\nmaximum(266,266)\nmaximum(267,267)\nmaximum(268,268)\nmaximum(269,269)\nmaximum(270,270)\nmaximum(271,271)\nmaximum(272,272)\nmaximum(273,273)\nmaximum(274,274)\nmaximum(275,275)\nmaximum(276,276)\nmaximum(277,277)\nmaximum(278,278)\nmaximum(279,279)\nmaximum(280,280)\nmaximum(281,281"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nmax1 = maximum(1,2)\nmax2 = maximum(10,20)\nmax3 = maximum(max1,max2)\nprint(max3)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(5,7))"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    print(max(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n    \nprint(maximum(3,5)) # 5\nprint(maximum(5,3)) # 5\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term in fibonacci sequence.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        a,b = b,a+b\n    return a\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = str1.split()\n    tup = tuple(list1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return(tup)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    string_to_tuple_list = []\n    for i in str1:\n        string_to_tuple_list.append(i)\n    string_to_tuple_tuple = tuple(string_to_tuple_list)\n    return string_to_tuple_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = list(str1)\n    str1 = tuple(str1)\n    return str1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (1<<31)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert(n == 0 or n==1) \n    return (n<<1) | (n>>1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= -1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = (2**n)-1\n    n = n-1\n    while n>=0:\n        n=n-1\n        if n==0:\n            break\n        n = n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n==0:\n            break\n        n=n-1\n        if n=="
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Left most unset bit is the highest set bit.\n    # For example 2 is set to 100, so left most bit is one\n    # set bit.\n    return n | (1 << (len(bin(n)) - 3))\n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Left most set bit is the lowest unset bit.\n    # For example 0 is unset so left most set bit is the last bit.\n    return n & ~(1 << (len(bin(n)) - 2))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n\n    while x!= 0:\n        x &= (x - 1)\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # return (~n) & 0xFFFFFFFF\n    return n & (~(n - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & ~(1 << (n.bit_length() - 1)))\n    \ndef check_set_left_most_unset_bit(n): \n    '''\n    Write a python function to check the left most unset bit.\n    '''\n    return 1 << (n.bit_length() - 1) == n\n    \ndef get_status_bit(n):\n    '''\n    Write a python function to get the status bit\n    '''\n    return (1 << (n.bit_length() - 1)) == n\n    \ndef check_status_bit(n):\n    '''\n    Write a python function to check the status bit\n    '''\n    return 1 << (n.bit_length() - 1) == n\n    \ndef set_top_most_set_bit(n): \n    '''\n    Write a python function to set the top most set bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1))\n    \ndef check_set_top_most_set_bit(n): \n    '''\n    Write a python function to check the top most set bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef get_top_most_set_bit(n):\n    '''\n    Write a python function to get the top most set bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef check_top_most_set_bit(n):\n    '''\n    Write a python function to check the top most set bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef set_bottom_most_unset_bit(n):\n    '''\n    Write a python function to set the bottom most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1)))\n    \ndef check_bottom_most_unset_bit(n):\n    '''\n    Write a python function to check the bottom most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef get_bottom_most_unset_bit(n):\n    '''\n    Write a python function to get the bottom most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef check_bottom_most_unset_bit(n):\n    '''\n    Write a python function to check the bottom most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef set_left_most_one_bit(n):\n    '''\n    Write a python function to set the left most 1 bit.\n    '''\n    return (n | 1 << 0)\n    \ndef check_left_most_one_bit(n):\n    '''\n    Write a python function to check the left most 1 bit.\n    '''\n    return (n | 1 << 0) == n\n    \ndef get_left_most_one_bit(n):\n    '''\n    Write a python function to get the left most 1 bit.\n    '''\n    return (n | 1 << 0) == n\n    \ndef check_left_most_one_bit(n):\n    '''\n    Write a python function to check the left most 1 bit.\n    '''\n    return (n | 1 << 0) == n\n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1)))\n    \ndef check_right_most_unset_bit(n):\n    '''\n    Write a python function to check the right most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef get_right_most_unset_bit(n):\n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef check_right_most_unset_bit(n):\n    '''\n    Write a python function to check the right most unset bit.\n    '''\n    return (n | ~(1 << (n.bit_length() - 1))) == n\n    \ndef set_top_most_zero_bit(n):\n    '''\n    Write a python function to set the top most zero bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1))\n    \ndef check_top_most_zero_bit(n):\n    '''\n    Write a python function to check the top most zero bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef get_top_most_zero_bit(n):\n    '''\n    Write a python function to get the top most zero bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef check_top_most_zero_bit(n):\n    '''\n    Write a python function to check the top most zero bit.\n    '''\n    return (n | 1 << (n.bit_length() - 1)) == n\n    \ndef set_bottom_most_one_bit(n):\n    '''\n    Write a python function to set the bottom most 1 bit.\n    '''\n    return (n | (~(1 << (n.bit_length() - 1))))\n    \ndef check_bottom_most_one_bit(n):\n    '''\n    Write a python function to check the bottom most 1 bit.\n    '''\n    return (n | (~(1 << (n.bit_length() - 1)))) == n\n    \ndef get_bottom_most_one_bit(n):\n    '''\n    Write a python function to get the bottom most 1 bit.\n    '''\n    return (n | (~(1 << (n.bit_length() - 1)))) == n\n    \ndef check_bottom_most_one_bit(n):\n    '''\n    Write a python function to check the bottom most 1 bit.\n    '''\n    return (n | (~(1 << (n.bit_length() - 1)))) == n\n    \ndef set_right_most_zero_bit(n):\n    '''\n    Write a python function to set the right most 0 bit.\n    '''\n    return (n & ~(1 << (n.bit_length() - 1)))\n    \ndef check_right_most_zero_bit(n):\n    '''\n    Write a python function to check the right most 0 bit.\n    '''\n    return (n & ~(1 << (n.bit_length() - 1))) == n\n    \ndef get_right_most_zero_bit(n):\n    '''\n    Write a python function to get the right most 0 bit.\n    '''\n    return (n & ~(1 << (n.bit_length() - 1))) == n\n    \ndef check_right_most_zero_bit(n):\n    '''\n    Write a python function to check the right most 0 bit.\n    '''\n    return (n & ~(1 << (n.bit_length() - 1))) == n\n    \ndef set_left_most_zero_bit(n):\n    '''\n    Write a python function to set the left most 0 bit.\n    '''\n    return (n & 1 << (n.bit_length() - 1))\n    \ndef check_left_most_zero_bit(n):\n    '''\n    Write a python function to check the left most 0 bit.\n    '''\n    return (n & 1 << (n.bit_length() - 1)) == n\n    \ndef get_left_most_zero_bit(n):\n    '''\n    Write a python function to get the left most 0 bit.\n    '''\n    return (n & 1 << (n.bit_length() - 1)) == n\n    \ndef check_left_most_zero_bit(n):\n    '''\n    Write a python function to check the left mos"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # The right most bit is set so return false \n    if n & (1<<31): \n        return False \n    else: \n        return True \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n    \ndef volume_cone_2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cone_perimeter(r,h):\n    '''\n    Write a function to find the volume of a cone based on the length of its perpendicular axis.\n    '''\n    volume = math.pi*r*(r+h)\n    return volume\n    \ndef volume_cone_perimeter_2(r,h):\n    '''\n    Write a function to find the volume of a cone based on the length of its perpendicular axis.\n    '''\n    volume = math.pi*r*(r+h)\n    return volume\n    \ndef volume_sphere_perimeter(r):\n    '''\n    Write a function to find the volume of a sphere based on the radius of its surface.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n    \ndef volume_sphere_perimeter_2(r):\n    '''\n    Write a function to find the volume of a sphere based on the radius of its surface.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_perimeter(r,h):\n    '''\n    Write a function to find the volume of a cylinder based on the length of its perpendicular axis.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_perimeter_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder based on the length of its perpendicular axis.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_volume_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_volume_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cone_surface(r,h):\n    '''\n    Write a function to find the volume of a cone based on its surface.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\n    \ndef volume_cone_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cone based on its surface.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\n    \ndef volume_sphere_surface(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_surface_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_surface(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_sphere_perimeter(r):\n    '''\n    Write a function to find the volume of a sphere based on its radius.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_perimeter_2(r):\n    '''\n    Write a function to find the volume of a sphere based on its radius.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_perimeter(r,h):\n    '''\n    Write a function to find the volume of a cylinder based on its length of its axis.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_perimeter_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder based on its length of its axis.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_sphere_volume_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_volume_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_volume_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_volume_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cone_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cone based on its surface.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\n    \ndef volume_cone_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cone based on its surface.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\n    \ndef volume_sphere_surface_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_sphere_surface_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef volume_cylinder_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*r*h\n    return volume\n    \ndef volume_cylinder_surface_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((1/3)*math.pi*r**2*h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (1/3)*math.pi*r**2*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_pyramid(l1,l2,l3):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return l1*l2*l3\ndef volume_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone and pyramid together.\n    '''\n    return (volume_cone(r,h) + volume_pyramid(l1,l2,l3))\ndef volume_sphere_pyramid(r,l1,l2,l3):\n    '''\n    Write a function to find the volume of a sphere and pyramid together.\n    '''\n    return volume_sphere(r) + volume_pyramid(l1,l2,l3)\ndef volume_cone_sphere(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone and a sphere together.\n    '''\n    return volume_cone(r,h) + volume_sphere(r,l1,l2,l3)\ndef volume_sphere_cone(r,l1,l2,l3):\n    '''\n    Write a function to find the volume of a sphere and a cone together.\n    '''\n    return volume_sphere(r) + volume_cone(r,l1,l2,l3)\ndef volume_cone_sphere_cylinder(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, sphere, and cylinder together.\n    '''\n    return volume_cone(r,h) + volume_sphere(r,l1,l2,l3) + volume_cylinder(r,h)\ndef volume_cylinder_cone(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_sphere(r,l1,l2,l3)\ndef volume_cone_cylinder_sphere(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_sphere(r,l1,l2,l3)\ndef volume_sphere_cylinder_cone(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, sphere, and cylinder together.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h)\ndef volume_cone_cylinder_sphere_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, sphere, and pyramid together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_sphere(r,l1,l2,l3) + volume_pyramid(l1,l2,l3)\ndef volume_sphere_cone_cylinder_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, sphere, cylinder, and pyramid together.\n    '''\n    return volume_sphere(r) + volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_pyramid(l1,l2,l3)\ndef volume_sphere_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, sphere, cylinder, and pyramid together.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_sphere_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, sphere, cylinder, and pyramid together.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_cone_cylinder_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_pyramid(l1,l2,l3)\ndef volume_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_cone_cylinder_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_pyramid(l1,l2,l3)\ndef volume_cylinder_cone_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cylinder(r,h,l1,l2,l3) + volume_cone(r,h) + volume_pyramid(l1,l2,l3)\ndef volume_cone_cylinder_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cone(r,h) + volume_cylinder(r,h,l1,l2,l3) + volume_pyramid(l1,l2,l3)\ndef volume_cone_cylinder_pyramid(r,h,l1,l2,l3):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid together.\n    '''\n    return volume_cone(r,h"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\nprint('Question 1:', volume_cone(3,5))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((math.pi/3) * math.pow(r,2) * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * (h/3)\n    print(\"The volume of the cone is: \" + str(round(volume,2)))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume_cone(r,h):\n        '''\n        Write a function to find the volume of a cone.\n        '''\n        #Cone Formula\n        return math.pi*r**2*h\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*r*r*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = h*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_cylinder_prism(r,h,b):\n    '''\n    Write a function to find the volume of a cylinder and prism.\n    '''\n    V = (1/3)*h*r*(r+b)\n    return V\ndef volume_sphere_prism(r,h,b):\n    '''\n    Write a function to find the volume of a sphere and prism.\n    '''\n    V = (4/3)*math.pi*r**3*(r+b)\n    return V\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = l*w*h\n    return V\ndef volume_pyramid(b,h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    V = b*h*l\n    return V\ndef volume_cube(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l*w*h\n    return V\ndef volume_cone_2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V\ndef volume_pyramid_2(b,h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    V = b*h*l\n    return V\ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_prism_2(r,h,b):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    V = (1/3)*h*r*(r+b)\n    return V\ndef volume_pyramid_sphere(b,h,l,r):\n    '''\n    Write a function to find the volume of a pyramid and sphere.\n    '''\n    V = b*h*l*r\n    return V\ndef volume_pyramid_prism(b,h,l,r):\n    '''\n    Write a function to find the volume of a pyramid and prism.\n    '''\n    V = b*h*l*(r+l)\n    return V\ndef volume_cylinder_2(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = h*r\n    return V\ndef volume_cylinder_prism_2(h,r,b):\n    '''\n    Write a function to find the volume of a cylinder and prism.\n    '''\n    V = h*r*(r+b)\n    return V\ndef volume_sphere_prism_2(r,b):\n    '''\n    Write a function to find the volume of a sphere and prism.\n    '''\n    V = (4/3)*math.pi*r**3*(r+b)\n    return V\ndef volume_sphere_cylinder_2(r,b):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    V = (4/3)*math.pi*r**3*(b+r)\n    return V\ndef volume_cube_2(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l*w*h\n    return V\ndef volume_cone_3(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V\ndef volume_cylinder_3(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = h*r\n    return V\ndef volume_sphere_3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_sphere_prism_3(r,b):\n    '''\n    Write a function to find the volume of a sphere and prism.\n    '''\n    V = (4/3)*math.pi*r**3*(r+b)\n    return V\ndef volume_cylinder_prism_3(h,r,b):\n    '''\n    Write a function to find the volume of a cylinder and prism.\n    '''\n    V = (1/3)*h*r*(r+b)\n    return V\ndef volume_cone_prism_3(r,h,b):\n    '''\n    Write a function to find the volume of a cone and prism.\n    '''\n    V = (1/3)*math.pi*r**2*h*(r+b)\n    return V\ndef volume_cube_prism_3(l,w,h,b):\n    '''\n    Write a function to find the volume of a cube and prism.\n    '''\n    V = (l*w*h+l*h*b+b*w*h+w*h*l+w*b*h+b*w*l)\n    return V\ndef volume_cube_prism_2(l,w,h,b):\n    '''\n    Write a function to find the volume of a cube and prism.\n    '''\n    V = (l*w*h+l*h*b+b*w*h+w*h*l+w*b*h+b*w*l)\n    return V\ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_sphere_prism_2(r,b):\n    '''\n    Write a function to find the volume of a sphere and prism.\n    '''\n    V = (4/3)*math.pi*r**3*(r+b)\n    return V\ndef volume_cylinder_prism_2(h,r,b):\n    '''\n    Write a function to find the volume of a cylinder and prism.\n    '''\n    V = (1/3)*h*r*(r+b)\n    return V\ndef volume_cone_prism_2(r,h,b):\n    '''\n    Write a function to find the volume of a cone and prism.\n    '''\n    V = (1/3)*math.pi*r**2*h*(r+b)\n    return V\ndef volume_cylinder_3(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = h*r\n    return V\ndef volume_cone_3(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V\ndef volume_cube_3(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l*w*h\n    return V\ndef volume_cylinder_prism_3(h,r,b):\n    '''\n    Write a function to find the volume of a cylinder and prism.\n    '''\n    V = (1/3)*h*r*(r+b)\n    return V\ndef volume_sphere_prism_3(r,b):\n    '''\n    Write a function to find the volume of a sphere and prism.\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while i <= n:\n        i += 1\n        if i <= n:\n            if (i & (i-1) == 0):\n                return i\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while 2 ** i <= n:\n        i += 1\n    return i - 1\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    n = n - 1\n    while n >= 1:\n        if n%2 == 0:\n            n = n/2\n        else:\n            n = n-1\n        if max_power < n:\n            max_power = n\n    return int(max_power)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    low = 0\n    high = n\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid <= n and (mid + 1) * (mid + 1) > n:\n            high = mid - 1\n            return mid\n        elif mid * mid > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return mid\n        \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    while n >= result*2:\n        result = result*2\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if (n & (n - 1)) == 0: \n        return n\n    else: \n        return highest_Power_of_2(n >> 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0 or n == 1) :\n        return n\n    res = 1\n    while (res <= n) :\n        res = res << 1\n    return res >> 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_2 = 0\n    for i in range(n):\n        if i & i-1 == 0:\n            power_2 = i\n            break\n    return power_2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    ans = 0\n    while n:\n        ans += 1\n        n = n >> 1\n    return ans\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # power = 1\n    # while True:\n    #     if 2**power > n:\n    #         break\n    #     power += 1\n    # return power-1\n    power = 0\n    while True:\n        if 2**power <= n:\n            break\n        power += 1\n    return power-1\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (((1+0)**n)-(1-0)**n)/2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Value must be greater than 0\")\n    else:\n        lucas_nums = lucas_nums_array\n        if len(lucas_nums) <= n:\n            lucas_nums += lucas_nums_array\n        return lucas_nums[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    if n == 1: return 1\n    lucas = find_lucas(n - 1) + find_lucas(n - 2)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return find_lucas(n - 1) + 2\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_ + [string]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i), end='')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # if you are unfamiliar with the formatting concept, go to:\n    # https://docs.python.org/3/library/string.html#format-specification-mini-language\n    # and explore the examples carefully.\n    # if you are familiar with this concept, just go to:\n    # https://docs.python.org/3/library/string.html#formatspec\n    return list_.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    print(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list_.append(string)\n    # for i in range(0, len(list_)):\n    #     list_.append(string)\n    for i in range(0, len(list_)):\n        list_[i] += string\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l = []\n    dict_list = []\n    for i in range(len(l1)):\n        l.append({l1[i]: l2[i], l3[i]: l4[i]})\n    return l\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, j, k in zip(l1, l2, l3):\n        d[i] = {'name': j,'marks': k}\n    return d\n    \ndef convert_list_dictionary2(l1):\n    '''\n    Write a function to convert list to dictionary.\n    '''\n    d = {}\n    for i in l1:\n        d[i] = []\n        for j in l1:\n            d[i].append(j)\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return {}\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]] = l3[i]\n    return d\n    \ndef convert_dict_to_list_dictionary(d):\n    '''\n    Write a function to convert dictionary to list of list.\n    '''\n    if len(d) == 0:\n        return []\n    d1 = []\n    for i in d.keys():\n        d1.append(i)\n        d1.append(d[i])\n    return d1\n    \ndef combine_matrix_columns(m1, m2):\n    '''\n    Write a function to combine 2 matrix columns.\n    '''\n    m1_col = []\n    for i in range(len(m1)):\n        m1_col.append(m1[i][0])\n    m2_col = []\n    for i in range(len(m2)):\n        m2_col.append(m2[i][0])\n    m1_col.extend(m2_col)\n    return m1_col\n    \ndef multiply_matrix_by_constant(m, c):\n    '''\n    Write a function to multiply a matrix by a constant value.\n    '''\n    m1 = []\n    for i in range(len(m)):\n        m1.append([])\n        for j in range(len(m[0])):\n            m1[i].append(c * m[i][j])\n    return m1\n    \ndef add_matrices(m1, m2):\n    '''\n    Write a function to add two matrices.\n    '''\n    if len(m1) == 0 and len(m2) == 0:\n        return []\n    m1_col = []\n    m2_col = []\n    m1_row = len(m1)\n    m2_row = len(m2)\n    m1_col = len(m1[0])\n    m2_col = len(m2[0])\n    m1_row = len(m1)\n    m2_row = len(m2)\n    if m1_col!= m2_row:\n        print(\"Matrices are not the same size!\")\n        return False\n    else:\n        for i in range(m1_row):\n            for j in range(m2_col):\n                m1_col[i] = m1_col[i] + m2[i][j]\n        return m1_col\n    \ndef string_to_matrix(str, n):\n    '''\n    Write a function to convert a string to a matrix.\n    '''\n    a = str.split()\n    b = []\n    for i in range(n):\n        b.append([])\n        for j in range(n):\n            b[i].append(float(a[i * n + j]))\n    return b\n    \ndef multiply_matrix(m, n):\n    '''\n    Write a function to multiply a matrix by another matrix.\n    '''\n    if len(m) == 0 or len(n) == 0:\n        return False\n    m1_row = len(m)\n    m2_col = len(n[0])\n    m1_col = len(m[0])\n    m2_row = len(n)\n    if m1_row!= m2_row or m1_col!= m2_col:\n        print(\"Matrices are not the same size!\")\n        return False\n    else:\n        m2 = n\n        m = m.copy()\n        for i in range(m1_row):\n            for j in range(m1_col):\n                m[i][j] = m[i][j] * m2[i][j]\n    return m\n    \ndef identity_matrix(m):\n    '''\n    Write a function to return an identity matrix of size n x n.\n    '''\n    if m == 0:\n        return False\n    m1 = []\n    for i in range(m):\n        m1.append([])\n        for j in range(m):\n            m1[i].append(1)\n    return m1\n    \ndef matrix_to_string(m):\n    '''\n    Write a function to convert a matrix to a string.\n    '''\n    s = \"\"\n    for i in m:\n        s = s + \" \".join([str(x) for x in i])\n        s = s + \"\\n\"\n    return s\n    \ndef add_matrices_string(m1, m2):\n    '''\n    Write a function to add two matrices of strings.\n    '''\n    if len(m1) == 0 or len(m2) == 0:\n        return False\n    m1_row = len(m1)\n    m2_col = len(m2[0])\n    m1_col = len(m1[0])\n    m2_row = len(m2)\n    if m1_col!= m2_row:\n        print(\"Matrices are not the same size!\")\n        return False\n    else:\n        m2 = m2.copy()\n        for i in range(m1_row):\n            for j in range(m1_col):\n                m1[i][j] = str(m1[i][j]) + m2[i][j]\n    return m1\n    \ndef string_to_matrix_string(s, n):\n    '''\n    Write a function to convert a string to a matrix of strings.\n    '''\n    a = s.split()\n    b = []\n    for i in range(n):\n        b.append([])\n        for j in range(n):\n            b[i].append(float(a[i * n + j]))\n    return b\n    \ndef matrices_add_matrices(m1, m2):\n    '''\n    Write a function to add two matrices.\n    '''\n    if len(m1) == 0 or len(m2) == 0:\n        return False\n    m1_row = len(m1)\n    m2_col = len(m2[0])\n    m1_col = len(m1[0])\n    m2_row = len(m2)\n    if m1_row!= m2_row or m1_col!= m2_col:\n        print(\"Matrices are not the same size!\")\n        return False\n    else:\n        m2 = m2.copy()\n        for i in range(m1_row):\n            for j in range(m1_col):\n                m1[i][j] = m1[i][j] + m2[i][j]\n    return m1\n    \ndef convert_matrix(str, n):\n    '''\n    Write a function to convert a string to a matrix.\n    '''\n    a = str.split()\n    b = []\n    for i in range(n):\n        b.append([])\n        for j in range(n):\n            b[i].append(float(a[i * n + j]))\n    return b\n    \ndef matrix_to_string_string(m):\n    '''\n    Write a function to convert a matrix to a string of strings.\n    '''\n    s = \"\"\n    for i in m:\n        s = s + \" \".join([str(x) for x in i])\n        s = s + \"\\n\"\n    return s\n    \ndef compare_matrices(m1, m2):\n    '''\n    Write a function to compare matrices.\n    '''\n    if len(m1) == 0 and len(m2) == 0:\n        return True\n    m1_row = len(m1)\n    m2_col = len(m2[0])\n    m1_col = len(m1[0])\n    m2_row = len(m2)\n    if m1_row!= m2_row or m1_col!= m2_col:\n        return False\n    else:\n        for i in range(m1_row):\n            for j in range(m1_col):\n                if m1"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return \"Length is not equal!\"\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(0,len(l1)):\n        d[l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n        dict1[l3[i]] = l2[i]\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        res[key] = {}\n        for j in range(len(l2)):\n            res[key][l2[j]] = l3[i][j]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n        d2[l2[i]] = l3[i]\n        d3[l3[i]] = l1[i]\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Your code here\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    for i in range(0,int(n/5)):\n        print(int(i/5))\n        if i == int(i/5):\n            return i\n    \n    for i in range(int(n/3),0,-1):\n        if i % 5 == 0:\n            print(i)\n            return i\n        \n    for i in range(int(n/4),0,-1):\n        if i % 5 == 0:\n            print(i)\n            return i\n        \n    for i in range(int(n/2),0,-1):\n        if i % 5 == 0:\n            print(i)\n            return i\n        \n    return 0\n    \nprint(get_max_sum(7))"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def recursion(n, max_sum):\n        if n == 0:\n            return max_sum\n        else:\n            max_sum = max(max_sum, recursion(n/2, max_sum) + recursion(n/3, max_sum) + recursion(n/4, max_sum) + recursion(n/5, max_sum))\n            return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum(num):\n        if num <= 0:\n            return 0\n        \n        num = num/2\n        num = num/3\n        num = num/4\n        num = num/5\n        if num == 0:\n            return num\n        else:\n            return max(num + max_sum(num), num)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 1\n    while n > 1:\n        if n % 2 == 0:\n            max_sum = max(max_sum, n/2 + get_max_sum(n/2))\n        else:\n            max_sum = max(max_sum, n/2 + get_max_sum(n/3 + 1))\n        n = n / 5\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum_of_f(n, max_sum):\n        if n == 1:\n            return max_sum\n        elif n == 0:\n            return max_sum\n        else:\n            return max(max_sum_of_f(n/2, max_sum), max_sum_of_f(n/3, max_sum), max_sum_of_f(n/4, max_sum), max_sum_of_f(n/5, max_sum), n)\n    return max_sum_of_f(n, 0)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    return (n/2) + (n/3) + (n/4) + (n/5)\n    \n    # return n + n/2 + n/3 + n/4 + n/5\n    \ndef get_factorial(n):\n    '''\n    Write a function which gives you the factorial of a number n.\n    '''\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact\n    \ndef get_prod_list(l):\n    '''\n    Write a function which takes as input a list of numbers, and returns the product of the elements in the list.\n    '''\n    prod = 1\n    for i in range(0, len(l)):\n        prod *= l[i]\n    return prod\n    \ndef get_count_occur(s, ch):\n    '''\n    Write a function which takes as input a string and a character, and returns the count of occurrences of the character in the string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n    return count\n    \ndef get_most_frequent_char(s):\n    '''\n    Write a function which takes as input a string, and returns the character that is most frequent in the string.\n    '''\n    max_count = 0\n    max_char = 'A'\n    for i in range(len(s)):\n        count = get_count_occur(s, s[i])\n        if count > max_count:\n            max_count = count\n            max_char = s[i]\n    return max_char\n    \ndef get_min_max_char(s):\n    '''\n    Write a function which takes as input a string, and returns the minimum and maximum characters in the string.\n    '''\n    min_char = 'A'\n    max_char = 'Z'\n    for i in range(len(s)):\n        if s[i] < min_char:\n            min_char = s[i]\n        if s[i] > max_char:\n            max_char = s[i]\n    return min_char, max_char\n    \ndef get_group_count(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 1\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element + 1:\n            current_element += 1\n        else:\n            current_element = l[current_index]\n            count += 1\n        current_index += 1\n    return count\n    \ndef get_group_count2(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            current_element += 1\n        else:\n            current_element = l[current_index]\n            count += 1\n        current_index += 1\n    return count\n    \ndef get_group_count3(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_element = l[current_index]\n            current_index += 1\n    return count\n    \ndef get_group_count4(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n            current_element = l[current_index]\n    return count\n    \ndef get_group_count5(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n    return count\n    \ndef get_group_count6(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n    return count\n    \ndef get_group_count7(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n    return count\n    \ndef get_group_count8(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n    return count\n    \ndef get_group_count9(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n            current_element = l[current_index]\n    return count\n    \ndef get_group_count10(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index < len(l) - 1:\n        if l[current_index] == current_element:\n            count += 1\n            current_index += 1\n            current_element += 1\n        else:\n            current_index += 1\n    return count\n    \ndef get_group_count11(l):\n    '''\n    Write a function which takes as input a list of integers, and returns the number of groups of consecutive elements in the list.\n    '''\n    count = 0\n    current_index = 0\n    current_element = l[0]\n    while current_index "
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case \n    if n <= 1: \n        return n \n    # Else find the maximum of f(i) \n    # where i is in the range of 2 to n \n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n<=1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Solution-1\n    #using recursion\n    return get_max_sum_rec(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_helper(n):\n        if n <= 5:\n            return n\n        return max(get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5), n)\n    return get_max_sum_helper(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # If the length of the list is equal to 1, it's maximum length.\n    if len(input_list) == 1:\n        return input_list\n    # Otherwise, find the maximum length among the remaining ones.\n    elif len(input_list) > 1:\n        max_length = 0\n        for i in range(len(input_list)):\n            if len(input_list[i]) > max_length:\n                max_length = len(input_list[i])\n        return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) >= max_length:\n            max_length = len(input_list[i])\n            max_index = i\n    print(f\"max_length_list():  {input_list[max_index]}\")\n    return input_list[max_index]\n    \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for element in input_list:\n        if len(element) > max:\n            max = len(element)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(0, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    \n    for i in range(0, len(input_list)):\n        if len(input_list[i]) == max_length:\n            max_length_element = input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if type(input_list)!= list:\n        raise TypeError(\"Invalid input type\")\n    if len(input_list) == 0:\n        return None\n    if len(input_list) == 1:\n        return input_list\n    max_index = 0\n    max_length = -1\n    for i in range(len(input_list)):\n        if max_length < len(input_list[i]):\n            max_index = i\n            max_length = len(input_list[i])\n    return input_list[max_index]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_set = set()\n    for e in test_tup:\n        if e in my_set:\n            return False\n        my_set.add(e)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in temp:\n            temp.append(test_tup[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    result = True\n    s = set(test_tup)\n    if len(s)!= len(test_tup):\n        result = False\n    return result\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    numbers = []\n    for i in test_tup:\n        if i not in numbers:\n            numbers.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = \"\"\n    for i in str1:\n        if (str1.count(i) == 1):\n            result = i\n            break\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # For this problem, the first non-repeated character is the first character that appears only once in the given string. If there is more than one character that appears only once, then return the first non-repeated character that appears only once.\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    str1_set = set(str1)\n    for char in str1_set:\n        if str1.count(char) == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to count occurances of each character in the given string.\n    str_count = {}\n    # Loop through each character in the given string.\n    for char in str1:\n        # If this character has been seen before, add 1 to the occurence count.\n        if char in str_count:\n            str_count[char] += 1\n        # If this character has not been seen before, add the character to the dict and set occurence count to 1.\n        else:\n            str_count[char] = 1\n    # Loop through the dict and return the key with highest value.\n    for char in str_count:\n        if str_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = ''\n    for i in str1:\n        if str1.count(i) == 1:\n            char = i\n            break\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    mydict = {}\n    for i in str1:\n        if i in mydict:\n            mydict[i] += 1\n        else:\n            mydict[i] = 1\n    for i in mydict:\n        if mydict[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = ''\n    for i in range(len(str1)):\n        if str1[i] not in temp:\n            temp += str1[i]\n        else:\n            return str1[i]\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(string[0]==string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # using Regular Expression\n    if (re.match(regex,string)):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    str_check=string.split(' ')\n    str_check=list(filter(None,str_check))\n    print(str_check)\n    for i in str_check:\n        if(len(i)!=1):\n            print('This string is not a palindrome.\\n')\n            break\n        else:\n            print('This string is a palindrome.\\n')\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the given string starts and ends with the same character\n    if(re.search(regex,string)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    result = pattern.search(string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    flag = True\n    if string[0]==string[-1]:\n        flag=True\n    else:\n        flag=False\n    return flag\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c=sorted(a,b,c)\n    if len(a)==len(b)==len(c):\n        print(a+b+c)\n    else:\n        print(a+b)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = 0\n    if a<b and a<c:\n        median = a\n    elif b<a and b<c:\n        median = b\n    else:\n        median = c\n    return median\nprint(median_numbers(4,5,6))"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a<b and a<c):\n        median = a\n    elif(b<a and b<c):\n        median = b\n    elif(c<a and c<b):\n        median = c\n    else:\n        print(\"You have given the input in wrong format\")\n        exit()\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a + b + c - min(a, b, c) - max(a, b, c)) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_a = sorted([a,b,c])\n    if (sorted_a[0] + sorted_a[1]) > sorted_a[2]:\n        return sorted_a[0]\n    elif (sorted_a[0] + sorted_a[1]) < sorted_a[2]:\n        return sorted_a[2]\n    else:\n        return sorted_a[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    if(len(sorted_numbers) % 2 == 0):\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    elif b>a:\n        if b>c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2]+sorted_numbers[length//2-1])/2\n        return median\n    elif length % 2!= 0:\n        median = sorted_numbers[(length-1)//2]\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return(sorted([a,b,c]))[1]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += i%10\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(sum(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result = result + sum_of_digits_helper(num)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        sums.append(sum_of_digits_rec(num))\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, list(map(str, nums))))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [int(x) for x in str(nums)]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums: return 0\n    nums = [int(x) for x in nums]\n    sum = 0\n    for n in nums:\n        sum += sum_of_digits(n)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get first tuple from the list\n    num_tup1 = test_tup1[0]\n    # Get the second tuple from the list\n    num_tup2 = test_tup2[0]\n    \n    # Write the code here\n    num_tup1 = int(num_tup1)\n    num_tup2 = int(num_tup2)\n    return num_tup1 ^ num_tup2\n    \ntest_tuple1 = ('17','12')\ntest_tuple2 = ('21','23')\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup1 = int(''.join(str(e) for e in test_tup1), 2)\n    test_tup2 = int(''.join(str(e) for e in test_tup2), 2)\n    print('Bitwise xor:'+ str(test_tup1 ^ test_tup2))\n    return test_tup1 ^ test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # 1st Approach\n    # P1. Input the tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    # P2. Declare variables\n    i = 0\n    res = []\n    \n    # P3. Traverse tuples and perform XOR operations\n    while i < len(tup1):\n        res.append(tup1[i] ^ tup2[i])\n        i += 1\n    \n    # P4. Return the result\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    #Declare the output tuple to store the results\n    output_tuple = ()\n    \n    #Iterate through each tuple and add the corresponding bitwise xor result to the output tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            output_tuple += (0,)\n        else:\n            output_tuple += (1,)\n            \n    return output_tuple\n    "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1, tup2 = test_tup1[0], test_tup1[1]\n    assert type(tup1) == tuple and type(tup2) == tuple\n    assert len(tup1) == len(tup2)\n    for i in range(len(tup1)):\n        assert type(tup1[i]) == int and type(tup2[i]) == int\n    return tuple([tup1[i] ^ tup2[i] for i in range(len(tup1))])\n    \ndef test_bitwise_xor():\n    assert bitwise_xor((0, 0), (0, 0)) == (0, 0)\n    assert bitwise_xor((0, 0), (1, 0)) == (1, 0)\n    assert bitwise_xor((1, 0), (0, 0)) == (1, 0)\n    assert bitwise_xor((1, 0), (1, 0)) == (0, 0)\n    assert bitwise_xor((0, 1), (1, 0)) == (1, 0)\n    assert bitwise_xor((0, 1), (0, 1)) == (0, 1)\n    assert bitwise_xor((1, 0), (0, 1)) == (1, 0)\n    assert bitwise_xor((1, 0), (1, 1)) == (0, 1)\n    \nif __name__ == \"__main__\":\n    test_bitwise_xor()\n    print(\"All tests passed!\")"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    (a, b) = test_tup1\n    (c, d) = test_tup2\n    xor_value = a ^ c ^ d\n    return xor_value\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # for xor of individual elements\n    xor_element = lambda x, y: x ^ y\n    \n    # apply bitwise xor on tuples\n    bitwise_xor_tuple = map(xor_element, test_tup1, test_tup2)\n    \n    # return tuple of elements\n    return tuple(bitwise_xor_tuple)\n    \n    \nif __name__ == \"__main__\":\n    \n    # tup1, tup2\n    test_tup1, test_tup2 = (1, 2), (10, 2)\n    \n    # call the function\n    test_tup_xor = bitwise_xor(test_tup1, test_tup2)\n    \n    print(test_tup_xor) # (3, 12)"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(test_tup1, test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuple should be of same size')\n        return False\n    #print(test_tup1, test_tup2)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for x in test_list:\n        if x not in freq:\n            freq[x] = 1\n        else:\n            freq[x] = freq[x] + 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    s = set(test_list)\n    return len(s)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = []\n    for i in test_list:\n        res.append(len(i))\n    return res\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_unique_tuples = 0\n    for i in test_list:\n        if i not in test_list:\n            num_unique_tuples += 1\n    return num_unique_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for num in test_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = set(tuple(test_list))\n    return len(count)\n    # Your code here\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Method 1: Using hashmap\n    # Runtime: O(n)\n    # Space: O(n)\n    \n    # count = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] in test_list[i + 1:]:\n    #         count += 1\n    # return count\n    \n    # Method 2: using sets \n    # Runtime: O(n)\n    # Space: O(n)\n    \n    # return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    freq = Counter(test_list)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((i+j) for i,j in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i], )\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i, j in zip(test_tup1, test_tup2):\n        result += ((i + j), )\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 = test_tup3 + (test_tup1[i] + test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (i[0]+i[1] for i in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [el1 + el2 for el1, el2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        test_tup1 = tuple([1,2,3])\n        test_tup2 = tuple([1,2,3])\n        test_tup3 = test_tup1 + test_tup2\n        return test_tup3\n    else:\n        raise TypeError(\"Both tuples need to be in tuple form\")\n    \nif __name__ == '__main__':\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    test_tup3 = add_nested_tuples(test_tup1, test_tup2)\n    print(test_tup3)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Creating new tuple for the result\n    new_tup = ()\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a, \"is smaller than\", b)\n    elif a>b:\n        print(b, \"is smaller than\", a)\n    else:\n        print(a, \"is equal to\", b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if(a<b):\n        print(\"The minimum number is:\",a)\n    else:\n        print(\"The minimum number is:\",b)\n    \nminimum(10,20)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(\"a is greater than b\")\n    else:\n        print(\"b is greater than a\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\ndef minimum_of_three(a,b,c):   \n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    if(a<b<c):\n        return a\n    elif(b<c<a):\n        return b\n    else:\n        return c\ndef maximum_of_three(a,b,c):   \n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if(a>b>c):\n        return a\n    elif(b>c>a):\n        return b\n    else:\n        return c\ndef product(a,b,c):   \n    '''\n    Write a python function to find the product of three numbers.\n    '''\n    return a*b*c\ndef main():\n    '''\n    Write a python program to test the above functions.\n    '''\n    a=int(input(\"Enter the first number : \"))\n    b=int(input(\"Enter the second number : \"))\n    c=int(input(\"Enter the third number : \"))\n    print(\"Minimum of three numbers is : \",minimum_of_three(a,b,c))\n    print(\"Maximum of three numbers is : \",maximum_of_three(a,b,c))\n    print(\"Product of three numbers is : \",product(a,b,c))\n    print(\"Minimum of two numbers is : \",minimum(a,b))\n    print(\"Maximum of two numbers is : \",maximum(a,b))\n    print(\"Minimum of three numbers is : \",minimum(a,b,c))\n    print(\"Maximum of three numbers is : \",maximum(a,b,c))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return 'The numbers are equal'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print('Yes')\n    else:\n        print('No')\n        \ndef check_int_or_float(num): \n    '''\n    Write a function to check whether an element is an integer or float.\n    '''\n    if num % 1 == 0:\n        print('Integer')\n    else:\n        print('Float')\n        \ndef check_if_tuple_is_empty(tuplex): \n    '''\n    Write a function to check whether a tuple is empty.\n    '''\n    if tuplex:\n        print('Not empty')\n    else:\n        print('Empty')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 == tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1.count(tuplex) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print(tuple1,\"is present in the tuple\")\n    else:\n        print(tuple1,\"is not present in the tuple\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[0]:\n            if tuplex[i] == tuple1[0]:\n                count += 1\n    if count == len(tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            count = count + 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuplex in tuplex:\n        if tuplex == tuple1:\n            return True\n    return False\ndef check_tuplex_rev(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuplex in tuplex:\n        if tuplex == tuple1:\n            return True\n    return False\ndef check_tuplex_in(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuplex in tuplex:\n        if tuplex == tuple1:\n            return True\n    return False\ndef check_tuplex_in_rev(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuplex in tuplex:\n        if tuplex == tuple1:\n            return True\n    return False\ndef check_list_in(list1,list2):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == list2:\n            return True\n    return False\ndef check_list_in_rev(list1,list2):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == list2:\n            return True\n    return False\ndef check_list_tuplex(list1,tuplex):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == tuplex:\n            return True\n    return False\ndef check_list_tuplex_rev(list1,tuplex):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == tuplex:\n            return True\n    return False\ndef check_list_in_rev(list1,list2):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == list2:\n            return True\n    return False\ndef check_list_in(list1,list2):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    for lst in list1:\n        if lst == list2:\n            return True\n    return False\ndef sort_list_rev(lst):\n    '''\n    Write a function to sort a list in reverse.\n    '''\n    lst.sort(reverse = True)\ndef sort_list(lst):\n    '''\n    Write a function to sort a list.\n    '''\n    lst.sort()\ndef print_tuple_rev(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    for tuplex in tuplex:\n        print(tuplex)\ndef print_tuple(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\ndef print_list_rev(lst):\n    '''\n    Write a function to print a list.\n    '''\n    for lst in lst:\n        print(lst)\ndef print_list(lst):\n    '''\n    Write a function to print a list.\n    '''\n    print(lst)\ndef print_set_rev(set1):\n    '''\n    Write a function to print a set.\n    '''\n    for set1 in set1:\n        print(set1)\ndef print_set(set1):\n    '''\n    Write a function to print a set.\n    '''\n    print(set1)\ndef print_dict_rev(dict1):\n    '''\n    Write a function to print a dictionary.\n    '''\n    for dict1 in dict1:\n        print(dict1)\ndef print_dict(dict1):\n    '''\n    Write a function to print a dictionary.\n    '''\n    print(dict1)\ndef str_rev(str1):\n    '''\n    Write a function to print a string in reverse order.\n    '''\n    str1_rev = str1[::-1]\n    return str1_rev\ndef str(str1):\n    '''\n    Write a function to print a string.\n    '''\n    return str1\ndef reverse_str(str1):\n    '''\n    Write a function to print a string in reverse order.\n    '''\n    str1_rev = str1[::-1]\n    return str1_rev\ndef print_list_rev(lst):\n    '''\n    Write a function to print a list in reverse order.\n    '''\n    for lst in lst:\n        print(lst)\ndef print_list(lst):\n    '''\n    Write a function to print a list.\n    '''\n    print(lst)\ndef print_tuple_rev(tuplex):\n    '''\n    Write a function to print a tuple in reverse order.\n    '''\n    for tuplex in tuplex:\n        print(tuplex)\ndef print_tuple(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\ndef print_set_rev(set1):\n    '''\n    Write a function to print a set in reverse order.\n    '''\n    for set1 in set1:\n        print(set1)\ndef print_set(set1):\n    '''\n    Write a function to print a set.\n    '''\n    print(set1)\ndef print_dict_rev(dict1):\n    '''\n    Write a function to print a dictionary in reverse order.\n    '''\n    for dict1 in dict1:\n        print(dict1)\ndef print_dict(dict1):\n    '''\n    Write a function to print a dictionary.\n    '''\n    print(dict1)\ndef is_palindrome(str1):\n    '''\n    Write a function that checks whether a string is a palindrome or not.\n    '''\n    rev_str = str1[::-1]\n    return str1 == rev_str\ndef is_palindrome_rev(str1):\n    '''\n    Write a function that checks whether a string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome_list(lst):\n    '''\n    Write a function that checks whether a list is a palindrome or not.\n    '''\n    return lst == lst[::-1]\ndef is_palindrome_list_rev(lst):\n    '''\n    Write a function that checks whether a list is a palindrome or not.\n    '''\n    return lst == lst[::-1]\ndef is_palindrome_set(set1):\n    '''\n    Write a function that checks whether a set is a palindrome or not.\n    '''\n    return set1 == set1[::-1]\ndef is_palindrome_set_rev(set1):\n    '''\n    Write a function that checks whether a set is a palindrome or not.\n    '''\n    return set1 == set1[::-1]\ndef is_palindrome_dict(dict1):\n    '''\n    Write a function that checks whether a dictionary is a palindrome or not.\n    '''\n    return dict1 == dict1[::-1]\ndef is_palindrome_dict_rev(dict1):\n    '''\n    Write a function that checks whether a dictionary is a palindrome or not.\n    '''\n    return dict1 == dict1[::-1]\ndef is_palindrome_set_rev(set1):\n    '''\n    Write a function that checks whether a set is a palindrome or not.\n    '''\n    return set1 == set1[::-1]\ndef is_palindrome_set(set1):\n    '''\n    Write a function that checks whethe"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0: \n        print(\"The number is even\")\n    else: \n        print(\"The number is odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    while (x): \n        a = x & 1\n        x >>= 1\n        if a:\n            return False\n    return True\n        \ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return x & 1\n    \nprint(find_Parity(1)) \nprint(find_Parity(0)) \nprint(find_Parity(4)) \nprint(find_Parity(5)) \nprint(find_Parity(6)) \nprint(find_Parity(7)) \nprint(find_Parity(8)) \nprint(find_Parity(9)) \nprint(find_Parity(10)) \nprint(find_Parity(11)) \nprint(find_Parity(12)) \nprint(find_Parity(13)) \nprint(find_Parity(14)) \nprint(find_Parity(15)) \nprint(find_Parity(16)) \nprint(find_Parity(17)) \nprint(find_Parity(18)) \nprint(find_Parity(19)) \nprint(find_Parity(20)) \nprint(find_Parity(21)) \nprint(find_Parity(22)) \nprint(find_Parity(23)) \nprint(find_Parity(24)) \nprint(find_Parity(25)) \nprint(find_Parity(26)) \nprint(find_Parity(27)) \nprint(find_Parity(28)) \nprint(find_Parity(29)) \nprint(find_Parity(30)) \nprint(find_Parity(31)) \nprint(find_Parity(32)) \nprint(find_Parity(33)) \nprint(find_Parity(34)) \nprint(find_Parity(35)) \nprint(find_Parity(36)) \nprint(find_Parity(37)) \nprint(find_Parity(38)) \nprint(find_Parity(39)) \nprint(find_Parity(40)) \nprint(find_Parity(41)) \nprint(find_Parity(42)) \nprint(find_Parity(43)) \nprint(find_Parity(44)) \nprint(find_Parity(45)) \nprint(find_Parity(46)) \nprint(find_Parity(47)) \nprint(find_Parity(48)) \nprint(find_Parity(49)) \nprint(find_Parity(50)) \nprint(find_Parity(51)) \nprint(find_Parity(52)) \nprint(find_Parity(53)) \nprint(find_Parity(54)) \nprint(find_Parity(55)) \nprint(find_Parity(56)) \nprint(find_Parity(57)) \nprint(find_Parity(58)) \nprint(find_Parity(59)) \nprint(find_Parity(60)) \nprint(find_Parity(61)) \nprint(find_Parity(62)) \nprint(find_Parity(63)) \nprint(find_Parity(64)) \nprint(find_Parity(65)) \nprint(find_Parity(66)) \nprint(find_Parity(67)) \nprint(find_Parity(68)) \nprint(find_Parity(69)) \nprint(find_Parity(70)) \nprint(find_Parity(71)) \nprint(find_Parity(72)) \nprint(find_Parity(73)) \nprint(find_Parity(74)) \nprint(find_Parity(75)) \nprint(find_Parity(76)) \nprint(find_Parity(77)) \nprint(find_Parity(78)) \nprint(find_Parity(79)) \nprint(find_Parity(80)) \nprint(find_Parity(81)) \nprint(find_Parity(82)) \nprint(find_Parity(83)) \nprint(find_Parity(84)) \nprint(find_Parity(85)) \nprint(find_Parity(86)) \nprint(find_Parity(87)) \nprint(find_Parity(88)) \nprint(find_Parity(89)) \nprint(find_Parity(90)) \nprint(find_Parity(91)) \nprint(find_Parity(92)) \nprint(find_Parity(93)) \nprint(find_Parity(94)) \nprint(find_Parity(95)) \nprint(find_Parity(96)) \nprint(find_Parity(97)) \nprint(find_Parity(98)) \nprint(find_Parity(99)) \nprint(find_Parity(100)) \nprint(find_Parity(101)) \nprint(find_Parity(102)) \nprint(find_Parity(103)) \nprint(find_Parity(104)) \nprint(find_Parity(105)) \nprint(find_Parity(106)) \nprint(find_Parity(107)) \nprint(find_Parity(108)) \nprint(find_Parity(109)) \nprint(find_Parity(110)) \nprint(find_Parity(111)) \nprint(find_Parity(112)) \nprint(find_Parity(113)) \nprint(find_Parity(114)) \nprint(find_Parity(115)) \nprint(find_Parity(116)) \nprint(find_Parity(117)) \nprint(find_Parity(118)) \nprint(find_Parity(119)) \nprint(find_Parity(120)) \nprint(find_Parity(121)) \nprint(find_Parity(122)) \nprint(find_Parity(123)) \nprint(find_Parity(124)) \nprint(find_Parity(125)) \nprint(find_Parity(126)) \nprint(find_Parity(127)) \nprint(find_Parity(128)) \nprint(find_Parity(129)) \nprint(find_Parity(130)) \nprint(find_Parity(131)) \nprint(find_Parity(132)) \nprint(find_Parity(133)) \nprint(find_Parity(134)) \nprint(find_Parity(135)) \nprint(find_Parity(136)) \nprint(find_Parity(137)) \nprint(find_Parity(138)) \nprint(find_Parity(139)) \nprint(find_Parity(140)) \nprint(find_Parity(141)) \nprint(find_Parity(142)) \nprint(find_Parity(143)) \nprint(find_Parity(144)) \nprint(find_Parity(145)) \nprint(find_Parity(146)) \nprint(find_Parity(147)) \nprint(find_Parity(148)) \nprint(find_Parity(149)) \nprint(find_Parity(150)) \nprint(find_Parity(151)) \nprint(find_Parity(152)) \nprint(find_Parity(153)) \nprint(find_Parity(154)) \nprint(find_Parity(155)) \nprint(find_Parity(156)) \nprint(find_Parity(157)) \nprint(find_Parity(158)) \nprint(find_Parity(159)) \nprint(find_Parity(160)) \nprint(find_Parity(161)) \nprint(find_Parity(162)) \nprint(find_Parity(163)) \nprint(find_Parity(164)) \nprint(find_Parity(165)) \nprint(find_Parity(166)) \nprint(find_Parity(167)) \nprint(find_Parity(168)) \nprint(find_Parity(169)) \nprint(find_Parity(170)) \nprint(find_Parity(171)) \nprint(find_Parity(172)) \nprint(find_Parity(173)) \nprint(find_Parity(174)) \nprint(find_Parity(175)) \nprint(find_Parity(176)) \nprint(find"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = (x & -x)\n    if y == x: \n        print(f\"{x} is Even\") \n    else: \n        print(f\"{x} is Odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"{} is even.\".format(x))\n    else:\n        print(\"{} is odd.\".format(x))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"{} is even\".format(x))\n    else:\n        print(\"{} is odd\".format(x))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #x = 0x1a\n    #print(\"0x%X\"%x)\n    return(0 if x%2 else 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n    \nprint(find_Parity(5))\nprint(find_Parity(12))\nprint(find_Parity(24))\nprint(find_Parity(32))\nprint(find_Parity(0))\nprint(find_Parity(-5))\nprint(find_Parity(-12))\nprint(find_Parity(-24))\nprint(find_Parity(-32))\nprint(find_Parity(-0))\nprint(find_Parity(-11))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #just reversing the number\n    return int(''.join(reversed(str(n))))\n    \n    \ndef rearrange_bigger_r(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if(n > 0):\n        s = str(n)\n        l = len(s)\n        #since we have to go until the largest digit\n        for i in range(0, l):\n            #if it is the largest digit\n            if(i == l-1):\n                continue\n            #if the current digit is smaller than the next digit\n            elif(int(s[i]) < int(s[i+1])):\n                #change the value of current digit\n                s = s[:i] + s[i+1:]\n                break\n        #reversing the result\n        return int(''.join(reversed(s)))\n    else:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    r = len(str_n)\n    for i in range(r):\n        for j in range(r-i):\n            if int(str_n[i])<int(str_n[i+j]):\n                n = str_n[i] + str_n[i+j] + str_n[i+j+1] + str_n[i+j+2] + str_n[i+j+3]\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # The approach is similar to the next bigger. The only difference is the base case.\n    # The other important difference is the second step.\n    # The way this step will be written is by using the last digit of the bigger number, and replacing the last digit\n    # of the smaller number.\n    \n    # This is the general idea of the approach:\n    # 1. Traverse the number and store the digits in a list.\n    # 2. Find the maximum number from the list.\n    # 3. Reversed the digits of the maximum number from the list.\n    # 4. Concatenate the reversed digits and the maximum number from the list.\n    \n    # And this is the one-liner approach:\n    def rearrange(n):\n        return int(''.join(sorted(map(str, list(n)), reverse=True)))\n    \n    return rearrange(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # integer = int(n)\n    # num_lst = list(str(integer))\n    # num_lst.sort()\n    # num_str = ''.join(num_lst)\n    # num_int = int(num_str)\n    # return num_int\n    if n == 0:\n        return n\n    else:\n        s = str(n)\n        l = list(s)\n        l.sort()\n        s = ''.join(l)\n        num = int(s)\n        return num\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0:\n        if int(n[i]) > int(n[i - 1]):\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    \n    idx = i\n    # print(n, idx)\n    while i > idx:\n        # print(n[idx], n[i])\n        if int(n[idx]) < int(n[i]):\n            n[idx], n[i] = n[i], n[idx]\n            break\n        i -= 1\n    # print(n)\n    n = \"\".join(n)\n    return int(n)\n    \n    \ndef rearrange_bigger2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0:\n        if int(n[i]) > int(n[i - 1]):\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    \n    idx = i\n    while idx < len(n):\n        # print(n, idx)\n        if int(n[idx]) < int(n[i]):\n            n[idx], n[i] = n[i], n[idx]\n            break\n        idx += 1\n    # print(n)\n    return int(\"\".join(n))\n    \n    \ndef rearrange_bigger3(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0:\n        if int(n[i]) > int(n[i - 1]):\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    \n    idx = i\n    while idx < len(n):\n        # print(n, idx)\n        if int(n[idx]) < int(n[i]):\n            n[idx], n[i] = n[i], n[idx]\n            break\n        idx += 1\n    # print(n)\n    return int(\"\".join(n))\n    \n    \ndef rearrange_bigger4(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0:\n        if int(n[i]) > int(n[i - 1]):\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    \n    idx = i\n    while idx < len(n):\n        # print(n, idx)\n        if int(n[idx]) < int(n[i]):\n            n[idx], n[i] = n[i], n[idx]\n            break\n        idx += 1\n    # print(n)\n    return int(\"\".join(n))\n    \n    \nif __name__ == '__main__':\n    import sys\n    n = sys.argv[1]\n    print(rearrange_bigger(n))\n    print(rearrange_bigger2(n))\n    print(rearrange_bigger3(n))\n    print(rearrange_bigger4(n))\n    "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Starting with the original number\n    num = n\n    num_digits = len(str(n))\n    # 1st way:\n    # while num > 9:\n    #     num = int(''.join(sorted(list(str(num)))))\n    # return num\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #print(n)\n    #n = sorted([int(s) for s in str(n)], reverse=True)\n    n = list(str(n))\n    #print(n)\n    for i in range(len(n) - 1):\n        if n[i] > n[i + 1]:\n            n[i], n[i + 1] = n[i + 1], n[i]\n    n = int(''.join([str(i) for i in n]))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    a = sorted(n, reverse=True)\n    a = \"\".join(a)\n    return int(a)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        m = ''.join(sorted(str(n), reverse=True))\n        t = int(m)\n        return t\n    bigger = next_bigger(n)\n    return bigger\n    \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = \"\"\n    while n!= 0:\n        res = res + str(n % 10)\n        n = n // 10\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    if not nums1 or not nums2 or k>len(nums1) or k>len(nums2):\n        return result\n    pq = []\n    for num1 in nums1:\n        heapq.heappush(pq, (num1, nums2[0]))\n    for _ in range(k):\n        num1, num2 = heapq.heappop(pq)\n        result.append((num1, num2))\n        if nums2:\n            heapq.heappush(pq, (nums2.pop(0), num1))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    ans = []\n    if nums2 is None or len(nums2)==0:\n        return []\n    if nums1 is None or len(nums1)==0:\n        return []\n    ans = []\n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n        while pq and len(ans) < k:\n            smallest = heapq.heappop(pq)\n            ans.append([smallest[1], smallest[2]])\n            if smallest[0] < smallest[1] + smallest[2]:\n                heapq.heappush(pq, (smallest[0], smallest[1], smallest[2]))\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    index1 = 0\n    index2 = 0\n    result = []\n    for i in range(min(m,n)):\n        if nums1[index1]<nums2[index2]:\n            result.append((nums1[index1], nums2[index2]))\n            index1 += 1\n        else:\n            result.append((nums1[index1], nums2[index2]))\n            index2 += 1\n        if index2 == n:\n            break\n        if index1 == m:\n            break\n    return result[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minHeap = []\n    for x in range(k):\n        heapq.heappush(minHeap, nums1[x] + nums2[x])\n    for x in range(k, len(nums1)):\n        if nums1[x] + minHeap[0] < minHeap[0] + nums2[0]:\n            heapq.heappushpop(minHeap, nums1[x] + nums2[x])\n    return minHeap\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(n + m)\n    # O(1)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = [(abs(nums1[0]-nums2[0]), 0, 0)]\n    result = []\n    k_arr = []\n    min_heap = []\n    for i in range(k):\n        while pq and (len(min_heap)<k):\n            cur_val, i_1, i_2 = heapq.heappop(pq)\n            k_arr.append([nums1[i_1], nums2[i_2]])\n            min_heap.append(cur_val)\n        if min_heap:\n            result.append([k_arr.pop()[0], k_arr.pop()[1]])\n    return result\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 0 or len(nums1) < k or len(nums2) < k or len(nums1) + len(nums2) < k:\n        return\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # assume nums1 and nums2 are sorted\n    # nums1 = nums1[::-1]\n    # nums2 = nums2[::-1]\n    # output = []\n    # while len(nums1) and len(nums2):\n    #     if nums1[0] < nums2[0]:\n    #         output.append([nums1[0], nums2[0]])\n    #         nums1.pop(0)\n    #         nums2.pop(0)\n    #     else:\n    #         nums1.pop(0)\n    # return output\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 is None or len(nums1) == 0 or nums2 is None or len(nums2) == 0 or k < 0 or k > len(nums1) * len(nums2):\n        return []\n    heap = [(nums1[i] + nums2[i], i) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    res = []\n    for _ in range(k):\n        val, idx = heapq.heappop(heap)\n        res.append((nums1[idx], nums2[idx]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    if k == 0:\n        return []\n    if k > m + n:\n        return []\n    # count[i] is the number of i's in nums1\n    count = [0] * (m + 1)\n    for i in range(m):\n        count[nums1[i]] += 1\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (count[nums2[i]] + count[nums2[i] + 1], nums2[i]))\n    for i in range(k):\n        _, num1 = heapq.heappop(heap)\n        count[num1] -= 1\n    return heapq.nsmallest(k, (count[i] + count[i + 1] for i in range(m)))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(0, len(list1)):\n        if min_product > list1[i][0] * list1[i][1]:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1_output = []\n    if list1 == []:\n        return \"List cannot be empty\"\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i == j:\n                    continue\n                if list1[i][0] * list1[j][0] < list1[i][1] * list1[j][1]:\n                    list1_output.append(list1[i])\n                    list1_output.append(list1[j])\n                    break\n                if j == len(list1) - 1:\n                    list1_output.append(list1[i])\n        return list1_output\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i][0] < min[0] and list1[i][1] < min[1]:\n            min = list1[i]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in list1:\n        product = min(product, i[0]*i[1])\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = float('inf')\n    ans = []\n    for item in list1:\n        if item[0]*item[1] < minimum:\n            minimum = item[0]*item[1]\n            ans = item\n    return ans\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 1:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # list1 = [(3,4),(5,6),(7,8),(3,8),(7,3)]\n    # return -1\n    # list1 = [(2,5),(3,7),(4,9),(5,8),(6,7)]\n    # return -1\n    list1 = [(2,5),(3,7),(4,9),(5,8),(6,7)]\n    i = 0\n    min = 9999999999\n    while i < len(list1):\n        if min > list1[i][0]*list1[i][1]:\n            min = list1[i][0]*list1[i][1]\n        i = i+1\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = []\n    for x in list1:\n        l.append(x)\n    return (min(x) for x in l)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = float('inf')\n    for i in list1:\n        if min > i:\n            min = i\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        l.append(i)\n    m=min(l)\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    return min(listval[0],min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    if l == 0:\n        return None\n    elif l == 1:\n        return listval[0]\n    else:\n        temp = []\n        for i in range(0, l):\n            if isinstance(listval[i], int) == True:\n                temp.append(listval[i])\n            else:\n                for j in range(0, len(listval[i])):\n                    temp.append(listval[i][j])\n        return min(temp)\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    if listval == None:\n        return None\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for x in range(0, len(listval)):\n        if listval[x] < min_val:\n            min_val = listval[x]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    a = listval[0]\n    for i in range(1,len(listval)):\n        if a > listval[i]:\n            a = listval[i]\n    return a\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"No input data\")\n    if type(listval[0]) is not int and type(listval[0]) is not float:\n        raise TypeError(\"Invalid data type in list\")\n    else:\n        mini = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < mini:\n                mini = listval[i]\n        return mini\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        temp_val = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < temp_val:\n                temp_val = listval[i]\n        return temp_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def split_words(word):\n        split_words = re.findall('[a-z]|[A-Z][a-z]+', word)\n        return split_words\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = list(filter(None, word))\n    word = ''.join(word)\n    word = word.title()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    res = ''\n    for i in word:\n        res += i.title()\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return ''.join([letter.title() for letter in word.split('_')])\n    return ''.join(word.split('_')).title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    return re.sub(r'(?<!^)(?=[A-Z])', lambda m: m.group(0).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split word using '_' as delimeter\n    s = re.split('_+', word)\n    # iterate over each item\n    for i, item in enumerate(s):\n        # if i is 0 then\n        if i == 0:\n            # add capitalize\n            s[i] = item.capitalize()\n        # if i is not 0 then\n        else:\n            # add capitalize\n            s[i] = item.capitalize() + item[0]\n    # return the ''.join of the list of words\n    return ''.join(s)\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_'))\nprint(snake_to_camel('snake_case_1'))\nprint(snake_to_camel('snake_case_2'))\nprint(snake_to_camel('snake_case_3'))\nprint(snake_to_camel('snake_case_4'))\nprint(snake_to_camel('snake_case_5'))\nprint(snake_to_camel('snake_case_6'))\nprint(snake_to_camel('snake_case_7'))\nprint(snake_to_camel('snake_case_8'))\nprint(snake_to_camel('snake_case_9'))\nprint(snake_to_camel('snake_case_0'))\nprint(snake_to_camel('snake_case_a'))\nprint(snake_to_camel('snake_case_b'))\nprint(snake_to_camel('snake_case_c'))\nprint(snake_to_camel('snake_case_d'))\nprint(snake_to_camel('snake_case_e'))\nprint(snake_to_camel('snake_case_f'))\nprint(snake_to_camel('snake_case_g'))\nprint(snake_to_camel('snake_case_h'))\nprint(snake_to_camel('snake_case_i'))\nprint(snake_to_camel('snake_case_j'))\nprint(snake_to_camel('snake_case_k'))\nprint(snake_to_camel('snake_case_l'))\nprint(snake_to_camel('snake_case_m'))\nprint(snake_to_camel('snake_case_n'))\nprint(snake_to_camel('snake_case_o'))\nprint(snake_to_camel('snake_case_p'))\nprint(snake_to_camel('snake_case_q'))\nprint(snake_to_camel('snake_case_r'))\nprint(snake_to_camel('snake_case_s'))\nprint(snake_to_camel('snake_case_t'))\nprint(snake_to_camel('snake_case_u'))\nprint(snake_to_camel('snake_case_v'))\nprint(snake_to_camel('snake_case_w'))\nprint(snake_to_camel('snake_case_x'))\nprint(snake_to_camel('snake_case_y'))\nprint(snake_to_camel('snake_case_z'))\nprint(snake_to_camel('Snake_case'))\nprint(snake_to_camel('Snake_case_'))\nprint(snake_to_camel('Snake_case_1'))\nprint(snake_to_camel('Snake_case_2'))\nprint(snake_to_camel('Snake_case_3'))\nprint(snake_to_camel('Snake_case_4'))\nprint(snake_to_camel('Snake_case_5'))\nprint(snake_to_camel('Snake_case_6'))\nprint(snake_to_camel('Snake_case_7'))\nprint(snake_to_camel('Snake_case_8'))\nprint(snake_to_camel('Snake_case_9'))\nprint(snake_to_camel('Snake_case_0'))\nprint(snake_to_camel('Snake_case_a'))\nprint(snake_to_camel('Snake_case_b'))\nprint(snake_to_camel('Snake_case_c'))\nprint(snake_to_camel('Snake_case_d'))\nprint(snake_to_camel('Snake_case_e'))\nprint(snake_to_camel('Snake_case_f'))\nprint(snake_to_camel('Snake_case_g'))\nprint(snake_to_camel('Snake_case_h'))\nprint(snake_to_camel('Snake_case_i'))\nprint(snake_to_camel('Snake_case_j'))\nprint(snake_to_camel('Snake_case_k'))\nprint(snake_to_camel('Snake_case_l'))\nprint(snake_to_camel('Snake_case_m'))\nprint(snake_to_camel('Snake_case_n'))\nprint(snake_to_camel('Snake_case_o'))\nprint(snake_to_camel('Snake_case_p'))\nprint(snake_to_camel('Snake_case_q'))\nprint(snake_to_camel('Snake_case_r'))\nprint(snake_to_camel('Snake_case_s'))\nprint(snake_to_camel('Snake_case_t'))\nprint(snake_to_camel('Snake_case_u'))\nprint(snake_to_camel('Snake_case_v'))\nprint(snake_to_camel('Snake_case_w'))\nprint(snake_to_camel('Snake_case_x'))\nprint(snake_to_camel('Snake_case_y'))\nprint(snake_to_camel('Snake_case_z'))\nprint(snake_to_camel('snake_case0'))\nprint(snake_to_camel('snake_case_'))\nprint(snake_to_camel('snake_case_1'))\nprint(snake_to_camel('snake_case_2'))\nprint(snake_to_camel('snake_case_3'))\nprint(snake_to_camel('snake_case_4'))\nprint(snake_to_camel('snake_case_5'))\nprint(snake_to_camel('snake_case_6'))\nprint(snake_to_camel('snake_case_7'))\nprint(snake_to_camel('snake_case_8'))\nprint(snake_to_camel('snake_case_9'))\nprint(snake_to_camel('snake_case_0'))\nprint(snake_to_camel('snake_case_a'))\nprint(snake_to_camel('snake_case_b'))\nprint(snake_to_camel('snake_case_c'))\nprint(snake_to_camel('snake_case_d'))\nprint(snake_to_camel('snake_case_e'))\nprint(snake_to_camel('snake_case_f'))\nprint(snake_to_camel('snake_case_g'))\nprint(snake_to_camel('snake_case_h'))\nprint(snake_to_camel('snake_case_i'))\nprint(snake_to_camel('snake_case_j'))\nprint(snake_to_camel('snake_case_k'))\nprint(snake_to_camel('snake_case_l'))\nprint(snake_to_camel('snake_case_m'))\nprint"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code here\n    word_list = word.split('_')\n    word_list[0] = word_list[0].title()\n    return ''.join(word_list)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    output = ''\n    for i in word:\n        if i!= '_':\n            output += i\n    return output\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return ''.join(x[0].lower() + x[1:] for x in word.split('-'))\n    \ndef is_valid_email(email):\n    '''\n    Write a function to check if the given email id is valid or not.\n    \n    valid email id :\n       a. At least two '@' symbol\n       b. At least one '.' symbol\n       c. At least one '+' symbol\n       d. Total length should be 6-12\n    '''\n    regex = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return regex.match(email)\n    \ndef is_valid_password(password):\n    '''\n    Write a function to check if the given password string is valid or not.\n    \n    valid password string :\n       a. At least 8 characters\n       b. At least one digit\n       c. At least one lowercase\n       d. At least one uppercase\n       e. At least one special character from below mentioned list\n       f. Total length should be 8-12\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9]+\")\n    return regex.match(password) and len(password) > 8\n    \ndef is_valid_username(username):\n    '''\n    Write a function to check if the given username string is valid or not.\n    \n    valid username string :\n       a. At least 2 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 2-6\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9]+\")\n    return regex.match(username) and len(username) > 2\n    \ndef is_valid_url(url):\n    '''\n    Write a function to check if the given url string is valid or not.\n    \n    valid url string :\n       a. At least 3 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 3-30\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]+\")\n    return regex.match(url) and len(url) > 3\n    \ndef is_valid_date(date):\n    '''\n    Write a function to check if the given date string is valid or not.\n    \n    valid date string :\n       a. At least 2 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 2-12\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(date) and len(date) > 2\n    \ndef is_valid_time(time):\n    '''\n    Write a function to check if the given time string is valid or not.\n    \n    valid time string :\n       a. At least 2 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 2-6\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]+\")\n    return regex.match(time) and len(time) > 2\n    \ndef is_valid_credit_card_number(credit_card_number):\n    '''\n    Write a function to check if the given credit card number string is valid or not.\n    \n    valid credit card number :\n       a. At least 16 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 16-19\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(credit_card_number) and len(credit_card_number) > 16\n    \ndef is_valid_zip_code(zip_code):\n    '''\n    Write a function to check if the given zip code string is valid or not.\n    \n    valid zip code :\n       a. At least 5 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 5-6\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(zip_code) and len(zip_code) > 5\n    \ndef is_valid_ssn(ssn):\n    '''\n    Write a function to check if the given SSN string is valid or not.\n    \n    valid SSN string :\n       a. At least 9 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 9-12\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9]\")\n    return regex.match(ssn) and len(ssn) > 9\n    \ndef is_valid_phone_number(phone_number):\n    '''\n    Write a function to check if the given phone number string is valid or not.\n    \n    valid phone number :\n       a. At least 10 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 10-11\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(phone_number) and len(phone_number) > 10\n    \ndef is_valid_ip_address(ip_address):\n    '''\n    Write a function to check if the given IP address string is valid or not.\n    \n    valid ip address :\n       a. At least 5 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 5-6\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(ip_address) and len(ip_address) > 5\n    \ndef is_valid_uuid(uuid):\n    '''\n    Write a function to check if the given UUID string is valid or not.\n    \n    valid UUID string :\n       a. At least 2 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 2-8\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(uuid) and len(uuid) > 2\n    \ndef is_valid_crc(crc):\n    '''\n    Write a function to check if the given crc string is valid or not.\n    \n    valid crc :\n       a. At least 6 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 6-8\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(crc) and len(crc) > 6\n    \ndef is_valid_height(height):\n    '''\n    Write a function to check if the given height string is valid or not.\n    \n    valid height string :\n       a. At least 2 characters\n       b. At least one special character from below mentioned list\n       c. Total length should be 2-8\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(height) and len(height) > 2\n    \ndef is_valid_hobby(hobby):\n    '''\n    Write a function to check if the given hobby string is valid or not.\n    \n    valid hobby string :\n       a. At least 1 character\n       b. At least one special character from below mentioned list\n       c. Total length should be 1-3\n    '''\n    regex = re.compile(r\"[^a-zA-Z0-9+/]\")\n    return regex.match(hobby) and len(hobb"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list=[]\n    for i in l:\n        if i%2!=0:\n            odd_list.append(i)\n    print(\"odd numbers in list\",odd_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2!= 0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # for i in range(1,len(l),2):\n    #     del l[i]\n    # return l\n    return [i for i in l if i%2 == 1]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            odd_list.append(l[i])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for number in l:\n        if number % 2!= 0:\n            odd_list.append(number)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    print(new_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    while True:\n        if(len(l) > 1):\n            if(l[0] % 2!= 0):\n                l.remove(l[0])\n            else:\n                l.remove(l[1])\n        else:\n            break\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return []\n    else:\n        new_list = []\n        for num in l:\n            if num % 2 == 0:\n                new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    if not l:\n        return odd_list\n    else:\n        for i in l:\n            if i % 2!= 0:\n                odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    elif len(list1) == n:\n        return list1\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort(key=lambda x: x[1])\n    for i in range(0, n-1):\n        list1.pop(0)\n    return list1[0][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not list1:\n        return None\n    index = n - 1\n    return list1[index]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element_index = n\n    while element_index >= len(list1):\n        element_index -= len(list1)\n    return list1[element_index]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    tuple_list = []\n    for i in range(len(list1)):\n        tuple_list.append(list1[i][1])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # return(value in list1) and (value in list2)\n    # return(value in list1 or value in list2)\n    \n    if (value in list1) or (value in list2):\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 is None or list2 is None:\n        return \"The two input lists should not be empty\"\n    elif len(list1)!= len(list2):\n        return \"The two lists are not of equal length\"\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n            else:\n                return False"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\nprint(overlapping([1,2,3,4,5],[\"a\",\"b\",\"c\",\"d\",\"e\"]))\nprint(overlapping([1,2,3,4,5],[6,7,8,9]))"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n                if count>1:\n                    return True\n                else:\n                    count=0\n                    break\n    if count==1:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = max(arr)\n    n = arr.index(m)\n    temp = m\n    arr.remove(m)\n    for i in range(len(arr)):\n        if arr[i]*m > temp*arr[i]:\n            temp = arr[i]*m\n            n = i\n    return (n, temp)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # for i in range(len(arr)-1):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] * arr[j] > arr[i] * arr[j]:\n    #             print(arr[i], arr[j], arr[i] * arr[j])\n    #             break\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [0,0]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]*arr[j] > max_pair[0]*max_pair[1]):\n                max_pair = [arr[i],arr[j]]\n    return max_pair[0],max_pair[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    prod = 1\n    for i in range(1, len(arr)):\n        if arr[i] * prod > arr[i-1] * prod:\n            return (arr[i-1], arr[i])\n        prod *= arr[i]\n    return -1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import sys \n    import math \n    largest_product = 0\n    p1 = 0\n    p2 = 0\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    size = len(arr)\n    max_product = 0\n    index1 = 0\n    index2 = 0\n    \n    for i in range(size):\n        for j in range(size):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    index1 = i\n                    index2 = j\n                    max_product = product\n    \n    return arr[index1], arr[index2]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    \n    # Create a dictionary \n    d = dict() \n    # iterate array \n    for i in range(n): \n        # if key is not present \n        if arr[i] in d: \n            # update key's value \n            d[arr[i]] = max(d[arr[i]], arr[i] * d[arr[i]]) \n        else: \n            # add key with value as 1 \n            d[arr[i]] = arr[i] \n     \n    return max(d.values()) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = -99999999999\n    max_pair = []\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if (arr[i] * arr[j]) > max_prod: \n                max_pair = [arr[i], arr[j]] \n                max_prod = (arr[i] * arr[j])\n    print(max_pair)\n    print(max_prod)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1]*arr[-2]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def highest_product(arr):\n        arr.sort()\n        n = len(arr)\n        if n <= 2:\n            return None\n        l = 0\n        r = n - 1\n        max_product = -1\n        while l < r:\n            if arr[l]*arr[r] > max_product:\n                max_product = arr[l]*arr[r]\n            if arr[l] < arr[r]:\n                l+=1\n            else:\n                r-=1\n        return max_product\n    return highest_product(arr)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    l = []\n    f_set = set()\n    c_set = set()\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            l.append(Input[i][j])\n            f_set.add(Input[i][j])\n    # print(f_set)\n    # print(len(f_set))\n    for i in f_set:\n        c_set.add(i)\n    # print(c_set)\n    # print(len(c_set))\n    for i in c_set:\n        i = int(i)\n        c = 0\n        for j in range(len(Input)):\n            if i in Input[j]:\n                c+=1\n        if c == len(Input):\n            print(i,end=\" \")\n    print()\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Return tuple, which has only first element and length is 1\n    def filter_tuple(element):\n        return (element[0],1)\n    \n    # Convert list of tuples to list of lists\n    Input = list(map(tuple,Input))\n    \n    # Grouping tuples by first element\n    groups = groupby(Input,filter_tuple)\n    \n    # Exctracting tuples with the first element from groups\n    grouped_tuples = [(key,list(group)) for key,group in groups]\n    \n    # Returning only first element and length is 1\n    return [i[0] for i in grouped_tuples]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    return True\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element i"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped = {}\n    for each in Input:\n        if each in grouped:\n            grouped[each] += 1\n        else:\n            grouped[each] = 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    from collections import Counter\n    Input=sorted(Input,key=lambda x:x[0])\n    dic={}\n    for i in range(len(Input)):\n        if(dic.get(Input[i][0])):\n            dic[Input[i][0]]=dic[Input[i][0]]+1\n        else:\n            dic[Input[i][0]]=1\n    return dic\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in range(0, len(Input)):\n        l.append((Input[i][0], Input[i][1]))\n    return l\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List_of_group = []\n    First = []\n    Second = []\n    \n    for i in range(len(Input)):\n        List_of_group.append(Input[i][0])\n        First.append(Input[i][1])\n        Second.append(Input[i][2])\n        \n    List_of_group = list(set(List_of_group))\n    \n    for i in range(len(List_of_group)):\n        count = 0\n        for j in range(len(Input)):\n            if List_of_group[i] == Input[j][0]:\n                count = count + 1\n        if count == 2:\n            print(List_of_group[i])\n            print(\"First:\",First[i])\n            print(\"Second:\",Second[i])\n        \n            \n            \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(t[0] for t in Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    _list = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            _list.append(Input[i][j])\n    \n    _list = list(set(_list))\n    _list.sort()\n    print('The common first element of all the tuples is :', _list[0])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import collections\n    # creating empty dictionary \n    d = dict() \n    # iterating and adding key,value to dictionary \n    for key,value in Input: \n    # print(key)\n    # print(value)\n        if key in d: \n            d[key] += value\n        else: \n            d[key] = value\n    return d \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for i in lst:\n        if(len(i) > len(maximum)):\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n    for i in range(0,len(lst)):\n        if max_len == len(lst[i]):\n            return lst[i]\n        else:\n            continue\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n            maxlen_index = i\n    return maxlen_index\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length=0\n    for i in range(0, len(lst)):\n        if len(lst[i])>max_length:\n            max_length=len(lst[i])\n    for i in range(0, len(lst)):\n        if len(lst[i]) == max_length:\n            max_length_index=i\n            max_length_string=lst[i]\n    return max_length_string\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi=0\n    for i in range(0,len(lst)):\n        if len(lst[i])>maxi:\n            maxi=len(lst[i])\n            maxi_index=i\n    print(maxi_index)\n    print(lst[maxi_index])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp=[]\n    for i in range(len(lst)):\n        temp.append(lst[i])\n    \n    temp=sorted(temp, key=len)\n    print(temp)\n    return len(temp[-1])\n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_count = 0\n    max_string = \"\"\n    for i in lst: \n        if len(i)> max_count:\n            max_count = len(i)\n            max_string = i\n    return max_string\n    \n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min_count = len(lst[0])\n    min_string = \"\"\n    for i in lst: \n        if len(i) < min_count:\n            min_count = len(i)\n            min_string = i\n    return min_string\n    \n    \ndef Is_Palindrome(lst):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return lst == lst[::-1]\n    \n    \ndef Find_Smallest(lst):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    if len(lst) > 0:\n        return min(lst)\n    else:\n        return None\n    \n    \ndef Find_Longest(lst):\n    '''\n    Write a python function to find the longest element in a list.\n    '''\n    if len(lst) > 0:\n        return max(lst)\n    else:\n        return None\n    \n    \ndef Find_Middle(lst):\n    '''\n    Write a python function to find the middle element in a list.\n    '''\n    if len(lst) > 0:\n        mid = (len(lst))//2\n        return lst[mid]\n    else:\n        return None\n    \n    \ndef Is_Palindrome_Alternate(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef Is_Palindrome_Reverse(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef Is_Palindrome_Reverse_Alternate(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return True if s == s[::-1] else False\n    \n    \ndef Reverse_String(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return \"\".join(reversed(s))\n    \n    \ndef Reverse_String_Alternate(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \n    \ndef Count_Number_Of_Even_Digits(n):\n    '''\n    Write a python function to count the number of even digits in a number.\n    '''\n    count = 0\n    while n!=0:\n        n=n//10\n        count+=1\n        if n%2 == 0:\n            count-=1\n            return count\n            \n    \ndef Sum_Of_Numbers(lst):\n    '''\n    Write a python function to find the sum of all the numbers in a list.\n    '''\n    if len(lst) > 0:\n        return sum(lst)\n    else:\n        return None\n    \n    \ndef Sum_Of_Numbers_Alternate(lst):\n    '''\n    Write a python function to find the sum of all the numbers in a list.\n    '''\n    s = 0\n    for i in lst:\n        s+=i\n    return s\n    \n    \ndef Multiplication_Of_All_Numbers(lst):\n    '''\n    Write a python function to multiply all the numbers in a list.\n    '''\n    if len(lst) > 0:\n        return reduce(lambda x,y:x*y,lst)\n    else:\n        return None\n    \n    \ndef Multiplication_Of_All_Numbers_Alternate(lst):\n    '''\n    Write a python function to multiply all the numbers in a list.\n    '''\n    s = 1\n    for i in lst:\n        s*=i\n    return s\n    \n    \ndef Reverse_String_Alternate_without_list(s):\n    '''\n    Write a python function to reverse a string without using list.\n    '''\n    a = []\n    for i in range(len(s)-1,-1,-1):\n        a.append(s[i])\n    return \"\".join(a)\n    \n    \ndef Reverse_String_Without_list(s):\n    '''\n    Write a python function to reverse a string without using list.\n    '''\n    rev = \"\"\n    for i in s:\n        rev = i + rev\n    return rev\n    \n    \ndef Palindrome_Alternate_without_list(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    rev = \"\"\n    for i in s:\n        rev = i + rev\n    return rev == s\n    \n    \ndef Palindrome_Without_List(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef main():\n    # Test case 1\n    # print(\"Test case 1\")\n    # print(Find_Max([0,2,3,4,5,2,3,4,0]))\n    # print(Find_Max([0,2,3,4,5]))\n    # print(Find_Max([]))\n    # print(Find_Max([1,2,3]))\n    # print(Find_Max([1]))\n    # print(Find_Max(['red', 'blue']))\n    # print(Find_Max(['a','z','c']))\n    # print(Find_Max(['a','b','a']))\n    # print(Find_Max(['abc','xyz','aaa','a']))\n    \n    # Test case 2\n    # print(\"Test case 2\")\n    # print(Find_Min([0,2,3,4,5,2,3,4,0]))\n    # print(Find_Min([0,2,3,4,5]))\n    # print(Find_Min([]))\n    # print(Find_Min([1,2,3]))\n    # print(Find_Min([1]))\n    # print(Find_Min(['red', 'blue']))\n    # print(Find_Min(['a','z','c']))\n    # print(Find_Min(['a','b','a']))\n    # print(Find_Min(['abc','xyz','aaa','a']))\n    \n    # Test case 3\n    # print(\"Test case 3\")\n    # print(Is_Palindrome([0,2,3,4,5,2,3,4,0]))\n    # print(Is_Palindrome([0,2,3,4,5]))\n    # print(Is_Palindrome([]))\n    # print(Is_Palindrome([1,2,3]))\n    # print(Is_Palindrome([1]))\n    # print(Is_Palindrome(['red', 'blue']))\n    # print(Is_Palindrome(['a','z','c']))\n    # print(Is_Palindrome(['a','b','a']))\n    # print(Is_Palindrome(['abc','xyz','aaa','a']))\n    \n    # Test case 4\n    # print(\"Test case 4\")\n    # print(Find_Smallest([0,2,3,4,5,2,3,4,0]))\n    # print(Find_Smallest([0,2,3,4,5]))\n    # print(Find_Smallest([]))\n    # print(Find_Smallest([1,2,3]))\n    # print(Find_Smallest([1]))\n    # print(Find_Smallest(['red', 'blue']))\n    # print(Find_Smallest(['a','z','c']))\n    # print(Find_Smal"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max_len:\n            max_len=len(lst[i])\n            max_len_element=lst[i]\n    print(\"Maximum Length Element is: \",max_len_element)\nFind_Max([[1, 2], [3], [4, 5, 6]])\nFind_Max([[\"a\", \"b\", \"c\"], [\"b\", \"a\", \"c\", \"d\"], [\"e\", \"f\"]])\nFind_Max([[\"a\"], [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\"], [\"a\", \"a\"]])\nFind_Max([[\"a\", \"b\", \"c\"], [\"b\", \"a\", \"c\", \"d\"], [\"e\", \"f\"]])\nFind_Max([[\"a\"], [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\"], [\"a\", \"a\"]])\nFind_Max([[\"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]])\nFind_Max([[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\", \"a\"], [\"a\", "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0])\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    \n    for i in range(len(lst)):\n        if len(lst[i]) == max:\n            return lst[i]\n            \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in range(len(lst)): \n        if len(lst[i]) >= Max: \n            Max = len(lst[i])\n            Max_element = lst[i]\n    return Max_element\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    a = []\n    a_sum = 0\n    for i in range(len(list1)):\n        a.append(round(list1[i],2))\n    for i in range(len(a)):\n        a_sum += a[i] * i\n    print(\"The total sum of the list multiplied by the length of the list is\",a_sum)\nround_and_sum(list1"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    number = []\n    length = []\n    print(\"enter numbers: \")\n    for i in range(len(list1)):\n        print(list1[i])\n        number.append(list1[i])\n    print(\"\\n\")\n    for i in range(len(number)):\n        number[i] = float(number[i])\n        length.append(len(number))\n    s = 0\n    for i in range(len(number)):\n        s = s + number[i]\n    print(\"rounding and sum of the numbers: \",s*len(number))\n    print(\"\\n\")\n    print(\"the total length of the list: \",length)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        print(round(i))\n    print(round(sum(list1))*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += round(list1[i])\n    print(\"Sum: \", sum)\n    print(\"List: \", list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += number\n        print(number)\n    return sum\nprint(round_and_sum([1.3, 2.7, 3.6, 5.7]))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    a = 0\n    for i in range(0,len(list1)):\n        list1[i] = math.ceil(list1[i])\n        a += list1[i]\n    print(a)\n    print(len(list1))\n    print(a*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(list(map(round,list1))))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(i,2) for i in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    numbers = list1\n    total = 0\n    for num in numbers:\n        total += num\n        num = round(num)\n    print(total*len(numbers))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    for num in list1:\n        if num == 0:\n            num = 0.001\n        num = round(num,2)\n        round_list.append(num)\n    total = sum(round_list) * len(round_list)\n    print(total)\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n)])\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #output = 0\n    cube = 0\n    for i in range(1,n):\n        cube = cube+i*i*i\n        #print(cube)\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    print(\"Cube sum of first {} natural numbers is {}.\".format(n,cube_sum))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 8\n    if n == 2:\n        return 8 + 0\n    if n == 3:\n        return 8 + 0 + 0\n    if n == 4:\n        return 8 + 0 + 0 + 0\n    if n == 5:\n        return 8 + 0 + 0 + 0 + 0\n    if n == 6:\n        return 8 + 0 + 0 + 0 + 0 + 0\n    if n == 7:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 8:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 9:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 10:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 11:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 12:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 13:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 14:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 15:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 16:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 17:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 18:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 19:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 20:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 21:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 22:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 23:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 24:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 25:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 26:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 27:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 28:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 29:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 30:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 31:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 32:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 33:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 34:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 35:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 36:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 37:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 38:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 39:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 40:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if n == 41:\n        return 8 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\n    if "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n):\n        cube_sum = cube_sum + i**3\n    print(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + i*i*i\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum = sum + i ** 3\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        if i%2==0:\n            s=s+i**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Your code here\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_string = ''\n    for i in test_tup:\n        test_string += i + '-'\n    return test_string[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''.join(test_tup)\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    my_str = ''\n    for i in range(len(test_tup)):\n        my_str += test_tup[i]\n    return my_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(0,len(test_tup)):\n        concatenate_by_delimiter(test_tup[i])\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n    \ndef replace_spaces(str):\n    '''\n    Write a function to replace all the spaces in string with the character \" \"\n    '''\n    return str.replace(\" \", \"\")\n    \n    \ndef check_substring(str1, str2):\n    '''\n    Write a function to check if the second string is a substring of the first.\n    '''\n    return (str1 in str2)\n    \n    \ndef swap_case(str):\n    '''\n    Write a function to convert the uppercase letters to lowercase and lowercase to uppercase\n    '''\n    return str.swapcase()\n    \n    \ndef convert_string_to_int(str):\n    '''\n    Write a function to convert the string to integer.\n    '''\n    return int(str)\n    \n    \ndef convert_to_list_of_integers(str):\n    '''\n    Write a function to convert the string to list of integers\n    '''\n    return list(map(int, str.split(',')))\n    \n    \ndef convert_to_dict(str):\n    '''\n    Write a function to convert the string to dictionary\n    '''\n    return dict(map(lambda x: (x.split(\":\"), x), str.split(',')))\n    \n    \ndef find_in_string(str, char):\n    '''\n    Write a function to find the first occurrence of the char in the str.\n    '''\n    return str.index(char)\n    \n    \ndef find_in_string_by_value(str, val):\n    '''\n    Write a function to find the first occurrence of the val in the str.\n    '''\n    return str.find(val)\n    \n    \ndef find_between_ranges(str, left, right):\n    '''\n    Write a function to find the first occurrence of the left in the str.\n    '''\n    return str.find(left) + len(left)\n    \n    \ndef find_between_ranges_by_value(str, left, right):\n    '''\n    Write a function to find the first occurrence of the left in the str.\n    '''\n    return str.index(left, str.find(left) + len(left))\n    \n    \ndef factorial(num):\n    '''\n    Write a function to calculate the factorial of the given number.\n    '''\n    return 1 if num == 1 else num * factorial(num - 1)\n    \n    \ndef nth_root(num, n):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    return num ** (1 / n)\n    \n    \ndef factorial_recursion(num):\n    '''\n    Write a function to calculate the factorial of the given number using recursion.\n    '''\n    if num == 1:\n        return 1\n    return num * factorial_recursion(num - 1)\n    \n    \ndef fibonacci(num):\n    '''\n    Write a function to calculate the fibonacci of the given number.\n    '''\n    if num == 0 or num == 1:\n        return num\n    return fibonacci(num - 1) + fibonacci(num - 2)\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a function to check if the string is palindrome or not.\n    '''\n    return str == str[::-1]\n    \n    \ndef is_palindrome_reversed(str):\n    '''\n    Write a function to check if the string is palindrome or not.\n    '''\n    return str == str[::-1] and str == str[::-2]\n    \n    \ndef binary_search(arr, l, r, x):\n    '''\n    Write a function to search an element in the sorted array. The array must be sorted in increasing order.\n    '''\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n    \n    \ndef binary_search_recursive(arr, l, r, x):\n    '''\n    Write a function to search an element in the sorted array. The array must be sorted in increasing order.\n    '''\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search_recursive(arr, l, mid - 1, x)\n        else:\n            return binary_search_recursive(arr, mid + 1, r, x)\n    else:\n        return -1\n    \n    \ndef insertion_sort(nums):\n    '''\n    Write a function to sort the array in ascending order using the insertion sort algorithm.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in range(1, len(nums)):\n        j = i - 1\n        key = nums[i]\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = key\n    return nums\n    \n    \ndef insertion_sort_recursive(nums):\n    '''\n    Write a function to sort the array in ascending order using the insertion sort algorithm.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = key\n    return nums\n    \n    \ndef quick_sort(nums):\n    '''\n    Write a function to sort the array in ascending order using the quick sort algorithm.\n    '''\n    if len(nums) < 2:\n        return nums\n    pivot = nums[0]\n    less = [x for x in nums[1:] if x < pivot]\n    greater = [x for x in nums[1:] if x > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n    \n    \ndef quick_sort_recursive(nums):\n    '''\n    Write a function to sort the array in ascending order using the quick sort algorithm.\n    '''\n    def partition(nums, start, end):\n        pivot = nums[start]\n        i = start + 1\n        j = end - 1\n        while True:\n            while i <= j and nums[i] <= pivot:\n                i += 1\n            while i <= j and nums[j] >= pivot:\n                j -= 1\n            if i <= j:\n                nums[i], nums[j] = nums[j], nums[i]\n            else:\n                break\n        nums[start], nums[j] = nums[j], nums[start]\n        return j\n    \n    if len(nums) < 2:\n        return nums\n    def _quick_sort(nums, start, end):\n        if start >= end:\n            return\n        p = partition(nums, start, end)\n        _quick_sort(nums, start, p - 1)\n        _quick_sort(nums, p + 1, end)\n    _quick_sort(nums, 0, len(nums) - 1)\n    return nums\n    \n    \ndef insertion_sort_by_values(nums):\n    '''\n    Write a function to sort the array in ascending order using the insertion sort algorithm.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '_'.join(str(i) for i in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)]) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i**3\n    print(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total = total + i*i*i\n        i = i + 1\n    average = total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = lambda x: x ** 3\n    n = n - 1\n    result = 0\n    for i in range(0, n):\n        result = result + cube(i)\n    average = result / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(input(\"enter number of elements\"))\n    sum_cube = 0\n    for i in range(n):\n        print(\"Element No.\",i,\"Cube: \",n*(n+1)*(n+2)/6)\n        sum_cube += n*(n+1)*(n+2)/6\n    print(\"Average of Cube of elements: \",sum_cube/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Declaring the list\n    cubes = []\n    # Declaring the counter variable\n    count = 0\n    # Initialising the variable\n    total_sum = 0\n    # Iterating the loop\n    while count < n:\n        count += 1\n        # Adding the value to the list\n        cubes.append(count**3)\n        # Getting the sum of the cubes\n        total_sum += cubes[count-1]\n    # Calculating the average of the cubes\n    average_of_cubes = total_sum / n\n    print(average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + (i * i * i)\n    return total / (n * n * n)"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return float(n**3)/n\n    \n    \n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for t in test_tuple:\n        for i in range(len(t)):\n            if i == len(t)-1:\n                result.append(t[i])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1:])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print('\\n\\nREAR\\n\\n')\n    for i in test_tuple:\n        print(i[2])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    ret = tuple(map(lambda x : x[-1], test_tuple))\n    print(ret)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[2][1:],test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = []\n    for i in range(len(test_tuple)):\n        test_list.append(test_tuple[i][-1])\n    return test_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return tuple(result)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i == x:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if not list1:\n        return 0\n    return 1 + count_element_in_list(list1[1:], x) if x in list1 else count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    if len(list1) == 0:\n        return 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n        elif list1[i]!= x and len(list1[i]) == 0:\n            count += 1\n        else:\n            new_list = list1[i].copy()\n            if x in new_list:\n                count += 1\n                break\n            count += count_element_in_list(new_list, x)\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    element_count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            element_count += 1\n    return element_count\n    "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return 0 if x not in list1 else sum(list1.count(i) for i in list1)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = nums\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for number in nums:\n        if number % 2!= 0:\n            oddnumbers.append(number)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = list(filter(lambda x:x%2==1, nums))\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            nums.pop(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = filter(lambda x: x % 2!= 0, nums)\n    return list(odds)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = list(filter(lambda x: x % 2 == 1, nums))\n    return odd_numbers\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    dt = dt.strip()\n    if not pattern.match(dt):\n        return None\n    return dt.replace('-', '/')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-','/').split('/')[2]+'-'+dt.replace('-','/').split('/')[0]+'-'+dt.replace('-','/').split('/')[1]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[-4:]+'-'+dt[3:5]+'-'+dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.split(\"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    def change_date(date):\n        a, b, c = date.split('-')\n        return f'{int(a):02d}-{int(b):02d}-{int(c):04d}'\n    return change_date(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.search(r'\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d',dt)\n    date = date.group()\n    date = date.split('-')\n    return f'{date[2]}-{date[1]}-{date[0]}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # dd-mm-yyyy\n    # dd-mm-yyyy\n    dt = dt.split('-')\n    # dd-mm-yyyy\n    new_date = '-'.join([dt[2], dt[1], dt[0]])\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.replace('-','/')\n    new_date=dt[:6]+'-'+dt[6:8]+'-'+dt[8:]\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d, m, y = dt.split('-')\n    return '{}-{}-{}'.format(d, m, y)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    x = dt.split('-')\n    y = ''\n    for i in range(len(x)):\n        if i!= len(x) -1:\n            y = y + str(x[i]) + '-'\n        else:\n            y = y + str(x[i])\n    return y\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j > gap-1:\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                    j-=gap\n                else:\n                    break\n        gap//=2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = current\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i-gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            while i >= gap and my_list[i] < my_list[i - gap]:\n                my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n                i -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j > gap-1:\n                k = j-gap\n                if my_list[j] < my_list[k]:\n                    my_list[j], my_list[k] = my_list[k], my_list[j]\n                else:\n                    break\n                j = k\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n//10:\n        gap = gap*10\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 10\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1+tup2) for tup1,tup2 in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the values of test_tup1 and test_tup2\n    test_val1 = test_tup1[0]\n    test_val2 = test_tup2[0]\n    test_val3 = test_tup1[1]\n    test_val4 = test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] and test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i])\n        lst.append(test_tup2[i])\n    return tuple(lst)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (i for i, j in zip(test_tup1, test_tup2) if i and j)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the tuples are not equal.\")\n    else:\n        return (x and y) for x, y in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1_1 and tup2_1) and (tup1_2 and tup2_2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (element1 and element2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-5, 5, 100)\n    y = a*x**2 + b*x + c\n    plt.plot(x, y)\n    plt.show()\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 0.5*c*(c-b)\n    else:\n        return 0.5*a*(a-b)*(a*a-b*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b\n    while x >= 0:\n        if x * x - 4 * a * y <= 0:\n            x = -1\n            break\n        x = x - 1\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math \n    \n    #initialize variables:\n    x_0 = a\n    y_0 = b\n    x_1 = c\n    \n    #set slope of the parabola:\n    slope = (y_1 - y_0) / (x_1 - x_0) \n    \n    #set y_1 at which the x_0 is equal to and set the x_0 at which the y_1 is equal to:\n    y_1 = slope*(x_0 - x_1) + y_0\n    x_0 = x_0\n    \n    #calculate the distance between the point and the parabola's directrix:\n    distance = math.sqrt(((y_0 - y_1)**2) + ((x_0 - x_1)**2))\n    \n    #output the directrix:\n    print(\"The directrix between the point ({}, {}) and ({}, {}) is at ({}, {}) with a distance of {}\".format(x_0, y_0, x_1, y_1, x_0, y_1, distance))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # x1 = ((-b) - sqrt((b^2) - (4*a*c))) / (2*a)\n    # x2 = ((-b) + sqrt((b^2) - (4*a*c))) / (2*a)\n    # then we use the equation to find the directrix of the parabola\n    x1 = (-b - sqrt((b**2) - (4*a*c))) / (2*a)\n    x2 = (-b + sqrt((b**2) - (4*a*c))) / (2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a) + ((b**2)/(4*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (a * a - b * b - c * c) / (2 * a * b) \n    x2 = (a * a - c * c) / (2 * a) \n    print(x1)\n    print(x2)\n    "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = a\n    x2 = b\n    x3 = c\n    a1 = (3 * (x2**2) - (x3**2))/6\n    b1 = (-(3 * x2) + (2 * x3))/3\n    c1 = x2**2\n    a2 = (3 * (x2**2) - (x3**2))/6\n    b2 = (-(3 * x2) - (2 * x3))/3\n    c2 = x2**2\n    a3 = (-3 * (x2**2) + (x3**2))/6\n    b3 = (2 * x2)\n    c3 = x2**2\n    return x1, x2, x3, a1, b1, c1, a2, b2, c2, a3, b3, c3\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((3*a**2)+(2*b)+(c**2))**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = b**2 - 4*a*c\n    return directrix\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    if len(list1) == len(list2):\n        for element in list1:\n            if element in list2:\n                common = True\n                break\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        for elem2 in list2:\n            if elem == elem2:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2) == set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = set()\n    for i in range(len(list1)):\n        if list1[i] in list2 and list2[i] not in common:\n            common.add(list1[i])\n    if len(common) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i] == list2[j]):\n                count += 1\n                if(count > 0):\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = base1 * height\n    length2 = base2 * height\n    length3 = height * height\n    return (length1 + length2 + length3) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height = float(height)\n    base1 = float(base1)\n    base2 = float(base2)\n    return ((base1+base2)/2.0)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    print('Median is:',round(median, 2))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Using Simpson's Rule to find the length of a trapezium.\n    # Equations:\n    # h_1 = (base1 + base2)/2\n    # h_2 = height\n    # h_3 = (base1 + base2 - height)/2\n    # h_4 = (base1 + base2 + height)/2\n    # Area = 1/3 * (h_1 + h_2 + h_3 + h_4)\n    h1 = (base1 + base2)/2\n    h2 = height\n    h3 = (base1 + base2 - height)/2\n    h4 = (base1 + base2 + height)/2\n    area = 1/3 * (h1 + h2 + h3 + h4)\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 == base2 and height >= 0:\n        raise ValueError('base1 = base2 and height >= 0')\n    if base1 == base2 and height < 0:\n        raise ValueError('base1 = base2 and height < 0')\n    if height < 0:\n        raise ValueError('height < 0')\n    if base1 < 0 or base2 < 0:\n        raise ValueError('base1 < 0 or base2 < 0')\n    if height == 0 or base1 == 0 or base2 == 0:\n        return 0\n    if base1 == 0 and base2 == 0:\n        return height\n    if height == 1 and base1 == 1:\n        return height\n    if height > 1:\n        base_ratio = height / (height + base1 + base2)\n        base1 = base1 * base_ratio\n        base2 = base2 * base_ratio\n        return median_trapezium(base1,base2,height)\n    else:\n        return height + base1 + base2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    if base1 == 0 and base2 == 0:\n        return 0\n    elif base1 == 0 or base2 == 0:\n        return 0.5*height\n    else:\n        return 0.5*((base1+base2)*height)/2\n    \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return arr[0] > number\n    else:\n        return number > arr[0] > check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n    \nprint(check_greater([1,2,3,4,5], 4))    \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)-1):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    if number < arr[0]:\n        return False\n    if arr_len == 1:\n        return True\n    if number > arr[-1]:\n        return True\n    if arr[0] <= number < arr[-1]:\n        return True\n    if number == arr[-1]:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    if re.match(pattern,text):\n        return 'Yes'\n    return 'No'\nprint(text_match_one('ab'))\nprint(text_match_one('abc'))\nprint(text_match_one('abb'))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(\"a+\",text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    pattern = re.compile(r'ab*')\n    result = pattern.findall(text)\n    print(result)\n    if len(result) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    result = re.findall(r'ab*', text)\n    return result\n    # write your \"text_match_one\" function here:\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab*', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.search(r'a+b',text)\n    if a:\n        return 'Match Found'\n    else:\n        return 'No match'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'ab+', text)\n    if len(match) == 0:\n        return None\n    else:\n        return match[0]\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a.*b')\n    result = pattern.search(text)\n    if result:\n        print('found a b in {}'.format(text))\n    else:\n        print('did not find a b in {}'.format(text))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #n = int(input())\n    n = n % 9999\n    #n = int(n)\n    if n == 0:\n        print(\"0\")\n    elif n == 1:\n        print(\"1\")\n    elif n == 2:\n        print(\"2\")\n    elif n == 3:\n        print(\"3\")\n    elif n == 4:\n        print(\"4\")\n    elif n == 5:\n        print(\"5\")\n    elif n == 6:\n        print(\"6\")\n    elif n == 7:\n        print(\"7\")\n    elif n == 8:\n        print(\"8\")\n    else:\n        print(\"9\")\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input should be a positive integer')\n    while n > 0:\n        if n % 10 == 0:\n            raise ValueError('Input should be a positive integer')\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    d = 10\n    while n!= 0 :\n        d = d * 10\n        n = n // 10\n    return d\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n) % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n > 0 :\n        while n > 10 :\n            n = n//10\n        return n\n    else :\n        return n//-10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # code here\n    n = abs(n)\n    if n < 10 :\n        return n\n    last = n%10\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is int:\n        if n<0:\n            n = n * -1\n            return (n % 10)\n        else:\n            return (n % 10)\n    else:\n        return 'Enter proper integer value.'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    r = n % 10\n    return r\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # list1 = list(map(int, input().split()))\n    new_list = []\n    for num in list1:\n        new_list.append(num*-1)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return[-i for i in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        result.append(-i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]*-1\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for item in list1:\n        if item < 0:\n            result.append(item)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    neg_list=[]\n    for i in list1:\n        neg_list.append(-i)\n    print(neg_list)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \nprint(neg_nos([-2, -5, -3, -7, -9]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = ''\n    for i in str1:\n        if i % 2 == 0:\n            s = s + i\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    new_str = ''\n    for char in str1:\n        if char in chars:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string=''\n    for i in str1:\n        if i%2==0:\n            new_string=new_string+i\n    return new_string\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str2 for str2 in str1 if str1.count(str2) == 2])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    '''\n    Create a function that takes a string as an argument.\n    Then split the string and sort the list\n    then join the list and return the sorted string.\n    '''\n    return ''.join(sorted(str1, key=lambda x: x.isdigit(), reverse=True))\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for c in str1:\n        if c.isdigit():\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('a','').replace('b','').replace('c','').replace('d','').replace('e','').replace('f','').replace('g','').replace('h','').replace('i','').replace('j','').replace('k','').replace('l','').replace('m','').replace('n','').replace('o','').replace('p','').replace('q','').replace('r','').replace('s','').replace('t','').replace('u','').replace('v','').replace('w','').replace('x','').replace('y','').replace('z','')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty list\n    new_str = []\n    # loop through each character of str1\n    for i in str1:\n        # if the character is even, add the character to the list\n        if ord(i) % 2 == 0:\n            new_str.append(i)\n        # else, if the character is odd, do not add it to the list\n        else:\n            continue\n    # return the string with odd characters removed\n    return \"\".join(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import string\n    arr = list(string.printable)\n    new_str = \"\"\n    for ch in str1:\n        if ch in arr:\n            new_str = new_str + ch\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            str2 += char\n    return str2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] + test_list[j]) == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i] == test_list[j]:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    ans = 0\n    for idx, val in enumerate(test_list):\n        if idx == len(test_list)-1:\n            break\n        if len(test_list)%2 == 0:\n            if test_list[idx] == test_list[idx+1]:\n                ans += 1\n        else:\n            if test_list[idx] == test_list[idx+1]:\n                ans += 1\n            \n    return ans\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    #iterate through list of tuples and count bidirectional tuples\n    for i in range(len(test_list)-1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] < test_list[i+1][1]:\n            bidirectional_pairs += 1\n    return bidirectional_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Runtime: O(N)\n    count = 0\n    for i in range(len(test_list) - 1):\n        if (test_list[i][1], test_list[i + 1][0]) in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([tuple(sorted(b)) for b in test_list]))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def count_pairs(test_list):\n        total = 0\n        for i in range(len(test_list)-1):\n            total += len(test_list[i]) * len(test_list[i+1])\n        return total\n    return count_pairs(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 1:\n        return 0\n    start = test_list[0]\n    lst = []\n    lst.append(start)\n    for i in range(1,len(test_list)):\n        if lst == []:\n            lst.append(test_list[i])\n        else:\n            if lst[0][0]!= test_list[i][1]:\n                lst.append(test_list[i])\n    return len(lst)\n    \nprint(count_bidirectional([(0, 1), (0, 2), (1, 2)]))\nprint(count_bidirectional([(1, 2), (3, 4)]))\nprint(count_bidirectional([(0, 1), (0, 2), (1, 2), (3, 4)]))\nprint(count_bidirectional([(0, 0), (1, 1)]))\nprint(count_bidirectional([(0, 1), (1, 0)]))\nprint(count_bidirectional([(0, 0), (1, 0), (2, 1), (3, 1), (3, 2), (2, 2)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 2), (3, 2), (4, 1), (5, 1)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24)]))\nprint(count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for t in test_list:\n        if t[0] < t[1] and t[1] < t[0]:\n            pairs += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Edge case\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    \n    # Two pointers\n    L.sort()\n    \n    # Initialize\n    ans = 0\n    left = 0\n    right = 0\n    \n    while right < len(L):\n        if L[right] == L[left]:\n            left += 1\n        else:\n            ans += (L[left] * (L[right] - L[left - 1]))\n            left = right\n        right += 1\n        \n    return ans\n    \ndef intersect(A, B):\n    '''\n    Write a function to find the intersection of two sorted arrays.\n    '''\n    \n    # Edge case\n    if not A or not B:\n        return []\n    elif A[0] > B[-1] or B[0] > A[-1]:\n        return []\n    \n    # Two pointers\n    A.sort()\n    B.sort()\n    \n    # Initialize\n    ans = []\n    left = 0\n    right = 0\n    \n    # Loop\n    while left < len(A) and right < len(B):\n        if A[left] == B[right]:\n            ans.append(A[left])\n            left += 1\n            right += 1\n        elif A[left] < B[right]:\n            left += 1\n        else:\n            right += 1\n            \n    return ans\n        \ndef merge_intervals(intervals):\n    '''\n    Write a function that takes an array of start, end, and sort the array to sort the intervals\n    by start.\n    '''\n    \n    # Edge case\n    if not intervals:\n        return []\n    \n    # Sort\n    intervals.sort(key = lambda x: x[0])\n    \n    # Two pointers\n    intervals.append((float('inf'), float('inf')))\n    answer = []\n    left = 0\n    right = 1\n    while right < len(intervals):\n        if intervals[left][1] < intervals[right][0]:\n            answer.append(intervals[left])\n            left += 1\n        else:\n            if intervals[left][0] <= intervals[right][0] <= intervals[left][1] <= intervals[right][1]:\n                intervals[left] = (min(intervals[left][0], intervals[right][0]), max(intervals[left][1], intervals[right][1]))\n            left += 1\n            right += 1\n            \n    return answer\n    \ndef detect_anomaly(a, threshold):\n    '''\n    Given a vector of data with outliers, return a boolean vector where each element is\n    True if the element was an outlier and False otherwise.\n    '''\n    \n    # Edge case\n    if a.size == 0:\n        return np.zeros(a.shape, dtype = bool)\n    \n    # Two pointers\n    thresh = threshold * np.std(a) + np.mean(a)\n    return a > thresh\n    \ndef check_numeric(A):\n    '''\n    Write a function to check whether all elements in a list are numeric.\n    '''\n    \n    # Edge case\n    if not A:\n        return True\n    \n    # Two pointers\n    for i in range(len(A)):\n        if not isinstance(A[i], (int, float)):\n            return False\n    \n    return True\n    \ndef subarraySum(A, K):\n    '''\n    Write a function that takes an array A of n positive integers and an integer K, and returns the number of subarrays with sum K.\n    '''\n    \n    # Edge case\n    if not A or K == 0:\n        return 0\n    \n    # Initialize\n    d = {}\n    d[0] = 1\n    \n    # Two pointers\n    count = 0\n    left = 0\n    right = 0\n    while right < len(A):\n        # Add to dictionary\n        if (left, A[left]) in d:\n            d[left] += 1\n        else:\n            d[left] = 1\n            \n        # Check if value is greater than K\n        if (left + A[left]) >= K:\n            count += d[left]\n            \n        # Update\n        left += 1\n        right += 1\n        \n    return count\n    \ndef subarraySort(A):\n    '''\n    Write a function to sort an array A which is sorted and has no duplicates.\n    '''\n    \n    # Edge case\n    if not A:\n        return A\n    \n    # Two pointers\n    left = 0\n    right = 1\n    \n    # Loop\n    while right < len(A):\n        if A[left] <= A[right]:\n            left += 1\n        else:\n            A[left], A[right] = A[right], A[left]\n            left += 1\n            right += 1\n    \n    return A\n    \ndef subarraySort2(A):\n    '''\n    Write a function to sort an array A which is sorted and has no duplicates.\n    '''\n    \n    # Edge case\n    if not A:\n        return A\n    \n    # Two pointers\n    A.sort()\n    \n    # Initialize\n    left = 0\n    right = 1\n    \n    # Loop\n    while right < len(A):\n        if A[left] <= A[right]:\n            left += 1\n        else:\n            A[left], A[right] = A[right], A[left]\n            left += 1\n            right += 1\n    \n    return A\n    \ndef maximumToys(prices, k):\n    '''\n    Write a function that takes an array of integers and an integer representing a positive\n    number k and returns the maximum number of toys that can be bought for free.\n    '''\n    \n    # Edge case\n    if not prices or k < 0:\n        return 0\n    \n    # Two pointers\n    left = 0\n    right = 0\n    prices.sort()\n    \n    # Initialize\n    count = 0\n    \n    # Loop\n    while right < len(prices):\n        if prices[left] + prices[right] <= k:\n            count += 1\n            left += 1\n        else:\n            right += 1\n    \n    return count\n    \ndef permutation(A):\n    '''\n    Write a function that takes an array of distinct integers and returns an array of all possible permutations.\n    '''\n    \n    # Edge case\n    if not A:\n        return []\n    \n    # Two pointers\n    ans = []\n    stack = []\n    \n    # Loop\n    for i in range(len(A)):\n        if A[i] not in stack:\n            stack.append(A[i])\n            for j in range(len(A)):\n                if A[j] not in stack:\n                    stack.append(A[j])\n            ans.append(stack[:])\n            stack.pop()\n            \n    return ans\n    \ndef permutation_two(A):\n    '''\n    Write a function that takes an array of distinct integers and returns an array of all possible permutations.\n    '''\n    \n    # Edge case\n    if not A:\n        return []\n    \n    # Two pointers\n    ans = []\n    \n    # Loop\n    for i in range(len(A)):\n        if i > 0 and A[i-1] == A[i]:\n            continue\n        copy = A[:]\n        copy.pop(i)\n        ans.extend(permutation(copy))\n    return ans\n    \ndef longest_increasing_subsequence(A):\n    '''\n    Write a function that takes an array A and returns the length of the longest increasing subsequence\n    in A. The subsequence does not necessarily have to be contiguous but can be iteratively constructed.\n    '''\n    \n    # Edge case\n    if not A:\n        return 0\n    \n    # Initialize\n    dp = []\n    \n    # Two pointers\n    for i in range(len(A)):\n        dp.append(1)\n        for j in range(i):\n            if A[j] < A[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n    \ndef sort_array_by_parity(A):\n    '''\n    Write a functio"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    j = len(L)-1\n    while i < j:\n        L[i], L[j] = L[j], L[i]\n        i+=1\n        j-=1\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return (int(str(L[0]) + str(L[1]) + str(L[2]) + str(L[3]) + str(L[4])))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(i) for i in L))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda a,b: a*10+b, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in range(len(L)):\n        total += L[i]\n    return total\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # if len(L)==1:\n    #     return L[0]\n    # elif len(L)==2:\n    #     return L[0]*10 + L[1]\n    # else:\n    #     return L[0]*100 + L[1]*10 + L[2]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    joined = 0\n    for x in range(len(L)):\n        joined = joined + L[x]\n    return joined\n    \nprint(multiple_to_single([1, 2, 3])) # should print 6\nprint(multiple_to_single([3, 2, 1])) # should print 10\nprint(multiple_to_single([0])) # should print 0\nprint(multiple_to_single([])) # should print 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(\\b(?:france)\\b|\\b(?:paris)\\b|\\b(?:marseille)\\b|\\b(?:paris)\\b|\\b(?:bordeaux)\\b|\\b(?:paris)\\b|\\b(?:marseille)\\b|\\b(?:bordeaux)\\b|\\b(?:paris)\\b|\\b(?:bordeaux)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b(?:paris)\\b|\\b"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'\\b[ad|ate]?[^ad|ate]*\\b',text,re.IGNORECASE)\n    if result:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #find all adverbs\n    pattern = r\"\\b\\w+[aeiou]\\w+\\b\"\n    adverbs_positions = re.findall(pattern, text)\n    return adverbs_positions\ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    #find all adjectives\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    return adjectives_positions\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    #find all verbs\n    pattern = r\"\\b\\w+[aeiou]\\w+\\b\"\n    verbs_positions = re.findall(pattern, text)\n    return verbs_positions\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    #find all nouns\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    return nouns_positions\ndef find_adv_and_noun_position(text):\n    '''\n    Write a function to find the first noun and the first adverb and their positions in a given sentence.\n    '''\n    #find all nouns\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    \n    #find first noun\n    noun = nouns_positions[0]\n    \n    #find first adverb\n    pattern = r\"\\b\\w+[aeiou]\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    \n    #store the noun position\n    noun_position = nouns_positions.index(noun)\n    \n    #store the adverb position\n    adjective_position = adjectives_positions.index(noun) + 1\n    return noun, noun_position, adjective_position\ndef find_noun_and_verb_position(text):\n    '''\n    Write a function to find the first noun and the first verb and their positions in a given sentence.\n    '''\n    #find all nouns\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    \n    #find first noun\n    noun = nouns_positions[0]\n    \n    #find first verb\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    verbs_positions = re.findall(pattern, text)\n    \n    #store the noun position\n    noun_position = nouns_positions.index(noun)\n    \n    #store the verb position\n    verb = verbs_positions[0]\n    verb_position = verbs_positions.index(verb)\n    return noun, noun_position, verb, verb_position\ndef find_adjective_and_verb_position(text):\n    '''\n    Write a function to find the first adjective and the first verb and their positions in a given sentence.\n    '''\n    #find all adjectives\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    \n    #find first adjective\n    adjective = adjectives_positions[0]\n    \n    #find first verb\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    verbs_positions = re.findall(pattern, text)\n    \n    #store the adjective position\n    adjective_position = adjectives_positions.index(adjective)\n    \n    #store the verb position\n    verb = verbs_positions[0]\n    verb_position = verbs_positions.index(verb)\n    return adjective, adjective_position, verb, verb_position\ndef find_adjective_and_noun_position(text):\n    '''\n    Write a function to find the first adjective and the first noun and their positions in a given sentence.\n    '''\n    #find all adjectives\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    \n    #find first adjective\n    adjective = adjectives_positions[0]\n    \n    #find first noun\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    \n    #store the adjective position\n    adjective_position = adjectives_positions.index(adjective)\n    \n    #store the noun position\n    noun = nouns_positions[0]\n    noun_position = nouns_positions.index(noun)\n    return adjective, adjective_position, noun, noun_position\ndef find_adjective_and_adjective_position(text):\n    '''\n    Write a function to find the first adjective and the first adjective and their positions in a given sentence.\n    '''\n    #find all adjectives\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    \n    #find first adjective\n    adjective = adjectives_positions[0]\n    \n    #find first adjective\n    pattern = r\"\\b\\w+\\b\"\n    adjectives_positions_2 = re.findall(pattern, text)\n    \n    #store the adjective position\n    adjective_position = adjectives_positions.index(adjective)\n    \n    #store the adjective position\n    adjective_position_2 = adjectives_positions_2.index(adjective)\n    return adjective, adjective_position, adjective_position_2\ndef find_adjective_and_noun_and_verb_position(text):\n    '''\n    Write a function to find the first adjective and the first noun and the first verb and their positions in a given sentence.\n    '''\n    #find all adjectives\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    adjectives_positions = re.findall(pattern, text)\n    \n    #find first adjective\n    adjective = adjectives_positions[0]\n    \n    #find first noun\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    \n    #store the adjective position\n    adjective_position = adjectives_positions.index(adjective)\n    \n    #store the noun position\n    noun = nouns_positions[0]\n    noun_position = nouns_positions.index(noun)\n    \n    #store the verb position\n    pattern = r\"\\b\\w+[aeiou]+\\w+\\b\"\n    verbs_positions = re.findall(pattern, text)\n    \n    #store the verb position\n    verb = verbs_positions[0]\n    verb_position = verbs_positions.index(verb)\n    return adjective, adjective_position, noun, noun_position, verb, verb_position\ndef find_noun_and_noun_position(text):\n    '''\n    Write a function to find the first noun and the second noun and their positions in a given sentence.\n    '''\n    #find all nouns\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions = re.findall(pattern, text)\n    \n    #find first noun\n    noun = nouns_positions[0]\n    \n    #find second noun\n    pattern = r\"\\b\\w+\\b\"\n    nouns_positions_2 = re.findall(pattern, text)\n    \n    #store the noun position\n    noun_position = nouns_positions.index(noun)\n    \n    #store the noun position\n    noun_position_"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n    \ndef first_to_last_letters(s):\n    '''\n    Write a function that returns the first to last characters of a string.\n    '''\n    pass\n    \ndef middle_word(text):\n    '''\n    Write a function that returns the middle word of a given sentence.\n    '''\n    pass\n    \ndef new_line():\n    '''\n    Write a function that returns the new line character.\n    '''\n    pass\n    \ndef first_2_letters(s):\n    '''\n    Write a function that returns the first 2 characters of a given string.\n    '''\n    pass\n    \ndef has_four_digits(n):\n    '''\n    Write a function that takes a number and returns True if the number is divisible by 4, otherwise returns False.\n    '''\n    pass\n    \ndef has_4_letters(s):\n    '''\n    Write a function that takes a string and returns True if the string has 4 letters, otherwise returns False.\n    '''\n    pass\n    \ndef get_digit_position(s,d):\n    '''\n    Write a function that takes a string and a digit as arguments and returns the position of the first occurence of the digit in the string.\n    '''\n    pass\n    \ndef has_at_least_one_letter_in_all_capitals(text):\n    '''\n    Write a function that returns True if the string has at least one letter in all capitals. Otherwise, return False.\n    '''\n    pass\n    \ndef is_palindrome(text):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_valid_phone_number(text):\n    '''\n    Write a function that takes a string and returns True if the string is a valid phone number, otherwise returns False.\n    '''\n    pass\n    \ndef has_no_repeats(s):\n    '''\n    Write a function that takes a string and returns True if there are no repeats of any letters. Otherwise, return False.\n    '''\n    pass\n    \ndef first_2_vowels(text):\n    '''\n    Write a function that takes a string and returns the first 2 vowels in the string.\n    '''\n    pass\n    \ndef has_no_vowels(s):\n    '''\n    Write a function that takes a string and returns True if there are no vowels in the string. Otherwise, return False.\n    '''\n    pass\n    \ndef char_frequency(text):\n    '''\n    Write a function that takes a string and returns a dictionary where the keys are characters and the values are the number of times that character appears in the string.\n    '''\n    pass\n    \ndef starts_with_vowel(s):\n    '''\n    Write a function that takes a string and returns True if the first letter is a vowel. Otherwise, return False.\n    '''\n    pass\n    \ndef is_palindrome_2(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef has_no_vowels(s):\n    '''\n    Write a function that takes a string and returns True if there are no vowels in the string. Otherwise, return False.\n    '''\n    pass\n    \ndef is_pangram(text):\n    '''\n    Write a function that takes a string and returns True if the string contains all the letters in the alphabet. Otherwise, return False.\n    '''\n    pass\n    \ndef has_no_letters_but_spaces(text):\n    '''\n    Write a function that takes a string and returns True if the string contains no letters but spaces. Otherwise, return False.\n    '''\n    pass\n    \ndef is_triangle_number(n):\n    '''\n    Write a function that takes a number and returns True if the number is a triangle number, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_2(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_3(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_square(n):\n    '''\n    Write a function that takes a number and returns True if the number is a perfect square, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_4(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_5(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_6(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_7(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef is_prime_8(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, otherwise returns False.\n    '''\n    pass\n    \ndef get_char_at_index(s,i):\n    '''\n    Write a function that takes a string and an index and returns the character at that index.\n    '''\n    pass\n    \ndef reverse(s):\n    '''\n    Write a function that takes a string and returns it in reverse.\n    '''\n    pass\n    \ndef longest_common_prefix(strs):\n    '''\n    Write a function that takes an array of strings and returns the longest common prefix of all of the strings.\n    '''\n    pass\n    \ndef longest_common_suffix(strs):\n    '''\n    Write a function that takes an array of strings and returns the longest common suffix of all of the strings.\n    '''\n    pass\n    \ndef is_subsequence(s, t):\n    '''\n    Write a function that takes a string and a substring and returns True if the substring is contained in the string, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_4(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_5(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_6(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_7(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_8(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_9(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_10(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef is_palindrome_11(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    pass\n    \ndef i"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    n_adverbs = 0\n    n_pos = 0\n    pos_list = []\n    pos_list_2 = []\n    pos_list_3 = []\n    pos_list_4 = []\n    pos_list_5 = []\n    pos_list_6 = []\n    pos_list_7 = []\n    pos_list_8 = []\n    pos_list_9 = []\n    pos_list_10 = []\n    pos_list_11 = []\n    pos_list_12 = []\n    pos_list_13 = []\n    pos_list_14 = []\n    pos_list_15 = []\n    pos_list_16 = []\n    pos_list_17 = []\n    pos_list_18 = []\n    pos_list_19 = []\n    pos_list_20 = []\n    pos_list_21 = []\n    pos_list_22 = []\n    pos_list_23 = []\n    pos_list_24 = []\n    pos_list_25 = []\n    pos_list_26 = []\n    pos_list_27 = []\n    pos_list_28 = []\n    pos_list_29 = []\n    pos_list_30 = []\n    pos_list_31 = []\n    pos_list_32 = []\n    pos_list_33 = []\n    pos_list_34 = []\n    pos_list_35 = []\n    pos_list_36 = []\n    pos_list_37 = []\n    pos_list_38 = []\n    pos_list_39 = []\n    pos_list_40 = []\n    pos_list_41 = []\n    pos_list_42 = []\n    pos_list_43 = []\n    pos_list_44 = []\n    pos_list_45 = []\n    pos_list_46 = []\n    pos_list_47 = []\n    pos_list_48 = []\n    pos_list_49 = []\n    pos_list_50 = []\n    pos_list_51 = []\n    pos_list_52 = []\n    pos_list_53 = []\n    pos_list_54 = []\n    pos_list_55 = []\n    pos_list_56 = []\n    pos_list_57 = []\n    pos_list_58 = []\n    pos_list_59 = []\n    pos_list_60 = []\n    pos_list_61 = []\n    pos_list_62 = []\n    pos_list_63 = []\n    pos_list_64 = []\n    pos_list_65 = []\n    pos_list_66 = []\n    pos_list_67 = []\n    pos_list_68 = []\n    pos_list_69 = []\n    pos_list_70 = []\n    pos_list_71 = []\n    pos_list_72 = []\n    pos_list_73 = []\n    pos_list_74 = []\n    pos_list_75 = []\n    pos_list_76 = []\n    pos_list_77 = []\n    pos_list_78 = []\n    pos_list_79 = []\n    pos_list_80 = []\n    pos_list_81 = []\n    pos_list_82 = []\n    pos_list_83 = []\n    pos_list_84 = []\n    pos_list_85 = []\n    pos_list_86 = []\n    pos_list_87 = []\n    pos_list_88 = []\n    pos_list_89 = []\n    pos_list_90 = []\n    pos_list_91 = []\n    pos_list_92 = []\n    pos_list_93 = []\n    pos_list_94 = []\n    pos_list_95 = []\n    pos_list_96 = []\n    pos_list_97 = []\n    pos_list_98 = []\n    pos_list_99 = []\n    pos_list_100 = []\n    pos_list_101 = []\n    pos_list_102 = []\n    pos_list_103 = []\n    pos_list_104 = []\n    pos_list_105 = []\n    pos_list_106 = []\n    pos_list_107 = []\n    pos_list_108 = []\n    pos_list_109 = []\n    pos_list_110 = []\n    pos_list_111 = []\n    pos_list_112 = []\n    pos_list_113 = []\n    pos_list_114 = []\n    pos_list_115 = []\n    pos_list_116 = []\n    pos_list_117 = []\n    pos_list_118 = []\n    pos_list_119 = []\n    pos_list_120 = []\n    pos_list_121 = []\n    pos_list_122 = []\n    pos_list_123 = []\n    pos_list_124 = []\n    pos_list_125 = []\n    pos_list_126 = []\n    pos_list_127 = []\n    pos_list_128 = []\n    pos_list_129 = []\n    pos_list_130 = []\n    pos_list_131 = []\n    pos_list_132 = []\n    pos_list_133 = []\n    pos_list_134 = []\n    pos_list_135 = []\n    pos_list_136 = []\n    pos_list_137 = []\n    pos_list_138 = []\n    pos_list_139 = []\n    pos_list_140 = []\n    pos_list_141 = []\n    pos_list_142 = []\n    pos_list_143 = []\n    pos_list_144 = []\n    pos_list_145 = []\n    pos_list_146 = []\n    pos_list_147 = []\n    pos_list_148 = []\n    pos_list_149 = []\n    pos_list_150 = []\n    pos_list_151 = []\n    pos_list_152 = []\n    pos_list_153 = []\n    pos_list_154 = []\n    pos_list_155 = []\n    pos_list_156 = []\n    pos_list_157 = []\n    pos_list_158 = []\n    pos_list_159 = []\n    pos_list_160 = []\n    pos_list_161 = []\n    pos_list_162 = []\n    pos_list_163 = []\n    pos_list_164 = []\n    pos_list_165 = []\n    pos_list_166 = []\n    pos_list_167 = []\n    pos_list_168 = []\n    pos_list_169 = []\n    pos_list_170 = []\n    pos_list_171 = []\n    pos_list_172 = []\n    pos_list_173 = []\n    pos_list_174 = []\n    pos_list_175 = []\n    pos_list_176 = []\n    pos_list_177 = []\n    pos_list_178 = []\n    pos_list_179 = []\n    pos_list_180 = []\n    pos_list_181 = []\n    pos_list_182 = []\n    pos_list_183 = []\n    pos_list_184 = []\n    pos_list_185 = []\n    pos_list_186 = []\n    pos_list_187 = []\n    pos_list_188 = []\n    pos_list_189 = []\n    pos_list_190 = []\n    pos_list_191 = []\n    pos_list_192 = []\n    pos_list_193 = []\n    pos_list_194 = []\n    pos_list_195 = []\n    pos_list_196 = []\n    pos_list_197 = []\n    pos_list_198 = []\n    pos_list_199 = []\n    pos_list_200 = []\n    pos_list_201 = []\n    pos_list_202 = []\n    pos_list_203 = []\n    pos_list_204 = []\n    pos_list_205 = []\n    pos_list_206 = []\n    pos_list_207 = []\n    pos_list_208 = []\n    pos_list_209 = []\n    pos_list_210 = []\n    pos_list_211 = []\n    pos_list_212 = []\n    pos_list_213 = []\n    pos_list_214 = []\n    pos_list_215 = []\n    pos_list_216 = []\n    pos_list_217 = []\n    pos_list_218 = []\n    pos_list_219 = []\n    pos_list_220 = []\n    pos_list_221 = []\n    pos_list"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    adverb_positions = []\n    for idx, word in enumerate(text):\n        if word in adverbs:\n            adverb_positions.append([idx,word])\n    print(adverb_positions)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # pattern = \"(?i)[.]*adverb[.]+(?i) (?:\\w+\\s+)?(?:\\w+)\"\n    pattern = \"adverb\"\n    result = re.search(pattern, text)\n    if result:\n        return result.span()\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r\"\\b(?:to|at|in|for|by|with|about|for|as|against|for|among)\\b\"\n    return re.findall(adverb_pattern, text)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    if text!= \"\":\n        # text = 'The quick brown fox jumps over the lazy dog.'\n        regex = re.compile(r'(ADVB|JJR|JJS|RB|RBR|RBS|WRB|VBZ|VBD|VBN|VBG|VBG\\S|VBP|VBZ|VBD|VBP\\S|VBZ|VBP\\S|VB\\S|MD|NN|NNS|NNP|NNPS|NNPS\\S|PRP|PRP\\S|RB|RBR|RBS|RP|RP\\S|RB\\S|RBS\\S|RB\\S|RBP)')\n        adverb_positions = regex.findall(text)\n        # print(adverb_positions)\n        # ['RB', 'VBZ', 'VBN', 'VBD', 'RB', 'RB', 'VBZ', 'VBZ', 'VBZ', 'WRB', 'VBZ']\n        # return adverb_positions\n        return adverb_positions\n    else:\n        return []\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = r'(?<=\\s)'\n    m = re.search(r'(in|at|on|by|for|with|upon|ago|after|before|here|there|when|where|how|why|what|which|other)\\s',text)\n    if m:\n        return m.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 2*6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    #return 2 * (l * l * l)\n    #return 4 * math.pi * (l * l)\n    return 6 * math.pi * (l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return(6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=l*l*l\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l\n    return surface_area\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for i in nums:\n        if i > 0:\n            pos = pos + 1\n        elif i < 0:\n            neg = neg + 1\n    return (pos/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(i for i in nums if i > 0)/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, -4]))\nif __name__ == '__main__':\n    main()\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\ndef main():\n    print(positive_count([1, -2, 3, "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    negatives = 0\n    positives = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negatives += 1\n        elif nums[i] > 0:\n            positives += 1\n    return negatives/positives\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([x for x in nums if x > 0])/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([x for x in nums if x > 0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for number in nums:\n        if number > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # nums = array('i',[1,-5,2,7,-3,11,-4,2,0,-9,-1,-2,6,-4,2])\n    # nums = array('i',[1,-5,2,7,-3,11,2,2,-6,-4,2,0,-9,2])\n    count_pos = 0\n    count_neg = 0\n    count_zero = 0\n    for i in nums:\n        if i > 0:\n            count_pos += 1\n        elif i < 0:\n            count_neg += 1\n        else:\n            count_zero += 1\n    return count_pos / (count_pos + count_neg + count_zero)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i',nums)\n    n = len(a)\n    negatives = 0\n    positives = 0\n    for i in range(n):\n        if a[i] < 0:\n            negatives += 1\n        else:\n            positives += 1\n    return negatives/positives\ndef avg_of_even(array):\n    '''\n    Write a function that takes a list and returns the average of even numbers in it. \n    '''\n    a = array\n    n = len(a)\n    evens = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            evens += a[i]\n    return evens / n\ndef odd_count(array):\n    '''\n    Write a function that takes a list and returns the count of the odd numbers in it. \n    '''\n    a = array\n    n = len(a)\n    odds = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            odds += 1\n    return odds\ndef even_count(array):\n    '''\n    Write a function that takes a list and returns the count of the even numbers in it. \n    '''\n    a = array\n    n = len(a)\n    evens = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            evens += 1\n    return evens\ndef binary_search(a,l,r,x):\n    '''\n    Write a function that takes a sorted array and a target value and returns the index of the target in the array. \n    If the target is not found in the array, return -1.\n    '''\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\ndef binary_search_count(a,l,r,x):\n    '''\n    Write a function that takes a sorted array and a target value and returns the number of times the target appears in the array. \n    If the target is not found in the array, return 0.\n    '''\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return 0\ndef binary_search_count_improved(a,l,r,x):\n    '''\n    Write a function that takes a sorted array and a target value and returns the number of times the target appears in the array. \n    If the target is not found in the array, return 0.\n    '''\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return 1\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return 0\ndef binary_search_count_improved2(a,l,r,x):\n    '''\n    Write a function that takes a sorted array and a target value and returns the number of times the target appears in the array. \n    If the target is not found in the array, return 0.\n    '''\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return 1 + binary_search_count_improved(a,l,mid-1,x)\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return 0\ndef rotate(arr,d):\n    '''\n    Write a function that rotates a list of n elements by d elements. \n    '''\n    d = d % len(arr)\n    n = len(arr)\n    temp = []\n    for i in range(n):\n        temp.append(arr[i])\n    for i in range(d):\n        temp.append(arr[0])\n        arr.pop(0)\n    for i in range(n-d):\n        arr.append(temp[i])\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Your code here\n    maxi = -1\n    for i in list1:\n        if i < 0:\n            if i > maxi:\n                maxi = i\n    return maxi\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == None:\n        return -1\n    else:\n        m = 0\n        for i in list1:\n            if i < 0:\n                m = i\n    if m == 0:\n        return -1\n    else:\n        return m\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = -1\n    for i in list1:\n        if i > max_negative:\n            max_negative = i\n    return max_negative\n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = list1[0]\n    for i in range(1,len(list1)):\n        if largest_neg < 0 :\n            largest_neg = list1[i]\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for i in list1:\n        if i < 0:\n            if i > max_num:\n                max_num = i\n            else:\n                continue\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Approach 1:\n    largest_neg = None\n    for item in list1:\n        if item < 0 and largest_neg == None:\n            largest_neg = item\n        elif item > largest_neg:\n            largest_neg = item\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -9999999\n    for i in list1:\n        if(i<0):\n            if(i>max_neg):\n                max_neg = i\n    return max_neg\nprint(\"Largest negative number is : \",largest_neg([1,2,-3,4,-5,6]))\nprint(\"Largest negative number is : \",largest_neg([1,2,3,4,5,0]))\nprint(\"Largest negative number is : \",largest_neg([-4,-5,-6]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    max_num = 0\n    for i in range(0,n):\n        if list1[i] < 0:\n            if max_num < list1[i]:\n                max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg.append(list1[i])\n    return(max(neg))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_test_list = []\n    for test_tuple in test_list:\n        if len(test_tuple) >= K:\n            new_test_list.append(tuple(test_tuple[0:K]))\n        else:\n            new_test_list.append(tuple(test_tuple))\n    return new_test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list.sort(reverse=True)\n    test_list = test_list[K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [x[:K] for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create a new list to return\n    trimmed_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for item in test_list:\n        item_to_trim = item[:K]\n        return_list.append(item_to_trim)\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    length = len(test_list)\n    if length >= K:\n        for i in range(length-K):\n            test_list.pop(i)\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_list = []\n    for i in range(len(test_tup1)):\n        multiplied_list.append(test_tup1[i] * test_tup2[i])\n    return multiplied_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        assert len(test_tup1) == len(test_tup2)\n    except AssertionError:\n        return \"Invalid Input\"\n    else:\n        mul_tup = ()\n        for i in range(len(test_tup1)):\n            mul_tup = mul_tup + (test_tup1[i] * test_tup2[i],)\n        return mul_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    indx_mul = []\n    indx_mul_tup = []\n    for i in range(0,len(test_tup1)):\n        indx_mul.append(test_tup1[i]*test_tup2[i])\n    indx_mul_tup = tuple(indx_mul)\n    return indx_mul_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1)!=len(test_tup2)):\n        print(\"Error in length of the two tuples.\")\n    else:\n        i = 0\n        multiplied_tup = ()\n        while(i < len(test_tup1)):\n            multiplied_tup = multiplied_tup + (test_tup1[i] * test_tup2[i],)\n            i += 1\n        return multiplied_tup\n    \nprint(index_multiplication((2, 3, 4), (2, 5, 4)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_result = []\n    for i in range(len(test_tup1)):\n        test_result.append(test_tup1[i] * test_tup2[i])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i == tup:\n            count += 1\n    return count\n    \ndef count_occurrences(lst):\n    '''\n    Write a python function to count the occurence of all elements in a list.\n    '''\n    count = 0\n    for i in lst:\n        count += 1\n    return count\n    \ndef sum_of_squares(lst):\n    '''\n    Write a python function to sum of all the elements in a list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i * i\n    return sum\n    \ndef sum_of_squares_slow(lst):\n    '''\n    Write a python function to sum of all the elements in a list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i * i\n    return sum\n    \ndef max_from_list(lst):\n    '''\n    Write a python function to find maximum value from a list.\n    '''\n    max_element = lst[0]\n    for i in lst:\n        if i > max_element:\n            max_element = i\n    return max_element\n    \ndef max_from_list_v2(lst):\n    '''\n    Write a python function to find maximum value from a list.\n    '''\n    max_element = lst[0]\n    for i in lst:\n        if i < max_element:\n            max_element = i\n    return max_element\n    \ndef max_from_list_v3(lst):\n    '''\n    Write a python function to find maximum value from a list.\n    '''\n    max_element = lst[0]\n    for i in lst:\n        if max_element < i:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    i=0\n    while i < len(lst):\n        lst[i] = lst[i] in tup\n        i=i+1\n    cnt = Counter(lst)\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\ndef count_Occurrence_count(lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        count += 1\n    return count\ndef search_in_a_tuple(tup, search):\n    '''\n    Write a python function to search the element of list in tuple.\n    '''\n    for i in range(0, len(tup)):\n        if tup[i] == search:\n            return i\n    return -1\ndef index_occurrence(lst, search):\n    '''\n    Write a python function to search the element of list in tuple.\n    '''\n    for i in range(0, len(lst)):\n        if lst[i] == search:\n            return i\n    return -1\ndef bubble_sort(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    for i in range(0, len(lst)-1):\n        for j in range(0, len(lst)-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\ndef bubble_sort_count(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    for i in range(0, len(lst)-1):\n        for j in range(0, len(lst)-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n            else:\n                continue\ndef counting_sort_n(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    m = max(lst) + 1\n    count = [0] * m\n    for i in lst:\n        count[i] += 1\n    i = 0\n    for j in range(m):\n        for k in range(count[j]):\n            lst[i] = j\n            i += 1\ndef counting_sort_count_n(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    m = max(lst) + 1\n    count = [0] * m\n    for i in lst:\n        count[i] += 1\n    i = 0\n    for j in range(m):\n        for k in range(count[j]):\n            lst[i] = j\n            i += 1\n    return lst\ndef counting_sort_positional_n(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    m = max(lst) + 1\n    count = [0] * m\n    for i in range(len(lst)):\n        count[lst[i]] += 1\n    i = 0\n    for j in range(m):\n        for k in range(count[j]):\n            lst[i] = j\n            i += 1\ndef print_number(n,m):\n    '''\n    Write a python function to print the number.\n    '''\n    print(n,m)\ndef print_number_count(n,m):\n    '''\n    Write a python function to print the number.\n    '''\n    print(n,m)\ndef reverse_order(lst):\n    '''\n    Write a python function to reverse the order of the list.\n    '''\n    lst.reverse()\ndef reverse_order_count(lst):\n    '''\n    Write a python function to reverse the order of the list.\n    '''\n    lst.reverse()\ndef product_list(lst):\n    '''\n    Write a python function to multiply the elements of the list.\n    '''\n    prod = 1\n    for i in lst:\n        prod = prod * i\n    return prod\ndef product_list_count(lst):\n    '''\n    Write a python function to multiply the elements of the list.\n    '''\n    prod = 1\n    for i in lst:\n        prod = prod * i\n    return prod\ndef add_list(lst1, lst2):\n    '''\n    Write a python function to add the elements of list.\n    '''\n    add = 0\n    for i in range(0, len(lst1)):\n        add = add + lst1[i] + lst2[i]\n    return add\ndef add_list_count(lst1, lst2):\n    '''\n    Write a python function to add the elements of list.\n    '''\n    add = 0\n    for i in range(0, len(lst1)):\n        add = add + lst1[i] + lst2[i]\n    return add\ndef subtract_list(lst1, lst2):\n    '''\n    Write a python function to subtract the elements of list.\n    '''\n    subtract = 0\n    for i in range(0, len(lst1)):\n        subtract = subtract + lst1[i] - lst2[i]\n    return subtract\ndef subtract_list_count(lst1, lst2):\n    '''\n    Write a python function to subtract the elements of list.\n    '''\n    subtract = 0\n    for i in range(0, len(lst1)):\n        subtract = subtract + lst1[i] - lst2[i]\n    return subtract\ndef multiply_list(lst1, lst2):\n    '''\n    Write a python function to multiply the elements of list.\n    '''\n    multiply = 0\n    for i in range(0, len(lst1)):\n        multiply = multiply + lst1[i] * lst2[i]\n    return multiply\ndef multiply_list_count(lst1, lst2):\n    '''\n    Write a python function to multiply the elements of list.\n    '''\n    multiply = 0\n    for i in range(0, len(lst1)):\n        multiply = multiply + lst1[i] * lst2[i]\n    return multiply\ndef divide_list(lst1, lst2):\n    '''\n    Write a python function to divide the elements of list.\n    '''\n    divide = 0\n    for i in range(0, len(lst1)):\n        divide = divide + lst1[i] / lst2[i]\n    return divide\ndef divide_list_count(lst1, lst2):\n    '''\n    Write a python function to divide the elements of list.\n    '''\n    divide = 0\n    for i in range(0, len(lst1)):\n        divide = divide + lst1[i] / lst2[i]\n    return divide\ndef minimum_list(lst1, lst2):\n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    min = lst1[0]\n    for i in range(1, len(lst1)):\n        if lst1[i] < min:\n            min = lst1[i]\n    return min\ndef minimum_list_count(lst1, lst2):\n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    min = lst1[0]\n    for i in range(1, len(lst1)):\n        if lst1[i] < min:\n            min = lst1[i]\n    return min\ndef maximum_list(lst1, lst2):\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    max = lst1[0]\n    for i in range(1, len(lst1)):\n        if lst1[i] > max:\n            max = lst1[i]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(lst)):\n        if tup[i] in lst:\n            lst[lst.index(tup[i])] = tup[i]\n        else:\n            lst.append(tup[i])\n    return lst\ntup = ('The','little', 'fox','jumped','over','the','fence','.')\nprint(count_Occurrence(tup, []))\nprint(count_Occurrence(tup, ['The','little','fox']))\nprint(count_Occurrence(tup, ['The','little','fox','fox']))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = lst[tup] \n    lst.count(lst) \n    print(lst) \n    count = 0\n    for i in lst:\n        count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # lst = [1,1,1,3,4,5,5,5] \n    # tup = (1,2,3,4,5) \n    # print(\"Original list : \", lst) \n    # print(\"Original tuple : \", tup) \n    x = 0\n    for i in range(len(lst)):\n        if tup[i] == lst[i]:\n            x += 1\n    print(\"Count of all occurrences : \", x) \n    \ncount_Occurrence((1,2,3,4,5),[1,1,1,3,4,5,5,5])\ncount_Occurrence((1,2,3,4,5),(1,1,1,3,4,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4))\ncount_Occurrence((1,2,3,4,5),(1,2))\ncount_Occurrence((1,2,3,4,5),(1))\ncount_Occurrence((1,2,3,4,5),())\ncount_Occurrence((1,2,3,4,5),())\ncount_Occurrence((1,2,3,4,5),())\ncount_Occurrence((1,2,3,4,5),(1,1))\ncount_Occurrence((1,2,3,4,5),(1,2,3))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5))\ncount_Occurrence((1,2,3,4,5),(1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(tup)\n    for i in lst:\n        count = lst.count(i)\n        print(\"{0} occur {1} times\".format(i, count))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n    \ndef min_max(lst):\n    '''\n    Write a function to find the min and max value in a list.\n    '''\n    return min(lst), max(lst)\n    \ndef common_characters(s1, s2):\n    '''\n    Write a function to find common characters in two strings.\n    '''\n    return ''.join([x for x in set(s1) & set(s2)])\n    \ndef reverse_str(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(reversed(string))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda n: n**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Solution 1:\n    cubes = [num ** 3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n ** 3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\nprint(cube_nums([1,2,3,4]))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 3\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num ** 3)\n    \n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    while n > 0:\n        res += n%10\n        n //= 10\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i**2 + i + 1) / 2\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum+i\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_value = 0\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i + i*(i+1)//2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    while a <= n:\n        yield a\n        a += 1\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str.split()[:l]\n    "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return (l[l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str):l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l.index(str)+l"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(\"Length of list: \",len(l))\n    for i in range(len(l)):\n        if len(l[i]) == l:\n            return l[i]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = \"\".join(str)\n    print(a[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = int(l[2].split(' ')[1])\n    if size == 1:\n        return str[0]\n    else:\n        return ''.join(str[0:size])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = \"\"\n    for i in range(l):\n        if len(str) == 0:\n            break\n        extracted_str += str[0]\n        str = str[1:]\n    return extracted_str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str:\n        str = list(str)\n        res = []\n        for i in range(len(str)):\n            temp = ''\n            for j in range(i, i+l):\n                if j >= len(str):\n                    break\n                temp += str[j]\n            res.append(temp)\n    else:\n        res = ''\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n = 0\n    s = \"\"\n    for i in range(0, len(str)):\n        if n == l:\n            break\n        n += 1\n        s += str[i]\n    print(s)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str[l] =='':\n        l = l + 1\n    while str[l]!='':\n        l = l + 1\n    return str[l:l+6]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    i = 0\n    while i<l:\n        l.remove(str)\n        i+=1\n    \n    return l\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r\"\\s+\", \" \", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    temp = text1.strip()\n    return temp\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s','',text1)\ndef remove_all_digits(text2):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return re.sub('\\d','',text2)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ','')\n    return text1\n    \ndef get_length_of_string(string):\n    '''\n    Write a function to get the length of the given string.\n    '''\n    return len(string)\n    \ndef get_index_of_char(string,char):\n    '''\n    Write a function to get the index of the given character from the string.\n    '''\n    ind=0\n    count=0\n    while count<len(string):\n        if string[count]==char:\n            ind=count\n        count+=1\n    return ind\n    \ndef count_occurrences_of_char(string,char):\n    '''\n    Write a function to get the count of the given character from the string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i]==char:\n            count+=1\n    return count\n    \ndef get_index_of_last_occurrence_of_char(string,char):\n    '''\n    Write a function to get the index of the last occurrence of the given character from the string.\n    '''\n    ind=0\n    for i in range(len(string)):\n        if string[i]==char:\n            ind=i\n    return ind\n    \ndef count_occurrences_of_char_in_string(string,char):\n    '''\n    Write a function to get the count of the given character from the string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if char==string[i]:\n            count+=1\n    return count\n    \ndef get_index_of_first_occurrence_of_char_in_string(string,char):\n    '''\n    Write a function to get the index of the first occurrence of the given character from the string.\n    '''\n    ind=0\n    for i in range(len(string)):\n        if char==string[i]:\n            ind=i\n            break\n    return ind\n    \ndef get_last_element_from_string(string):\n    '''\n    Write a function to get the last element from the given string.\n    '''\n    return string[len(string)-1]\n    \ndef get_first_element_from_string(string):\n    '''\n    Write a function to get the first element from the given string.\n    '''\n    return string[0]\n    \ndef remove_repetition_in_string(string):\n    '''\n    Write a function to remove the repetition from the given string.\n    '''\n    str=''\n    for i in range(len(string)):\n        if string[i] not in str:\n            str+=string[i]\n    return str\n    \ndef get_index_of_first_occurrence_of_substring_in_string(string,substring):\n    '''\n    Write a function to get the index of the first occurrence of the given substring from the string.\n    '''\n    ind=0\n    count=0\n    while count<len(string):\n        if string[count]==substring[0]:\n            for i in range(len(substring)):\n                if string[count+i]==substring[i]:\n                    ind=count+i\n                    break\n        count+=1\n    return ind\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \ndef is_palindrome_using_recursion(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    def palindrome(string):\n        if len(string)<=1:\n            return True\n        elif string[0]==string[-1]:\n            return palindrome(string[1:-1])\n        else:\n            return False\n    return palindrome(string)\n    \ndef get_first_non_repeating_character(string):\n    '''\n    Write a function to get the index of the first non-repeating character from the given string.\n    '''\n    str=''\n    count=0\n    while count<len(string):\n        if string[count] not in str:\n            str+=string[count]\n        count+=1\n    return str.find(string[0])\n    \ndef get_count_of_characters(string,char):\n    '''\n    Write a function to get the count of the given character from the string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i]==char:\n            count+=1\n    return count\n    \ndef count_occurrences_of_substring(string,substring):\n    '''\n    Write a function to count the number of occurrences of the given substring from the given string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if substring==string[i:len(substring)+i]:\n            count+=1\n    return count\n    \ndef get_longest_substring(string):\n    '''\n    Write a function to get the longest substring from the given string.\n    '''\n    str=''\n    substr=''\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if string[i:j] not in str:\n                str+=string[i:j]\n                if len(str)>len(substr):\n                    substr=str\n            else:\n                str=''\n    return substr\n    \ndef get_longest_palindromic_substring(string):\n    '''\n    Write a function to get the longest palindromic substring from the given string.\n    '''\n    str=''\n    substr=''\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if string[i:j]==string[i:j][::-1]:\n                if len(substr)<len(string[i:j]):\n                    substr=string[i:j]\n                else:\n                    str=''\n    return substr\n    \ndef is_palindrome_using_stack(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    st=[]\n    count=0\n    for i in range(len(string)):\n        st.append(string[i])\n        count+=1\n        if len(st)==count:\n            count=0\n            while len(st)!=0:\n                if st[len(st)-1]==string[0]:\n                    st.pop()\n                else:\n                    return False\n            return True\n    \ndef is_palindrome_using_stack_using_helper(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    st=[]\n    count=0\n    for i in range(len(string)):\n        st.append(string[i])\n        count+=1\n        if len(st)==count:\n            count=0\n            while len(st)!=0:\n                if st[len(st)-1]==string[0]:\n                    st.pop()\n                else:\n                    return False\n            return True\n    \ndef is_palindrome_using_stack_using_helper_2(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    st=[]\n    count=0\n    for i in range(len(string)):\n        st.append(string[i])\n        count+=1\n        if len(st)==count:\n            count=0\n            while len(st)!=0:\n                if st[len(st)-1]==string[0]:\n                    st.pop()\n                else:\n                    return False\n            return True\n    \ndef is_palindrome_using_stack_using_helper_3(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    st=[]\n    count=0\n    for i in range(len(string)):\n        st.append(string"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1!= '':\n        return text1.replace(' ', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.strip()\n    print(text2)\nremove_whitespaces(\" \")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else: \n        return 0\n        \n        \n        \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #Write your code here\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = 0\n    if actual_cost!= 0 :\n        loss_amount = actual_cost - sale_amount\n    else :\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount\n    else:\n        return actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost >= sale_amount):\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if (n % i == 0) : \n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1, n) if n % i == 0 and i % 2 == 0)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # code here\n    i = 1\n    sum = 0\n    while (i <= n):\n        if (n % i == 0):\n            sum = sum + i\n        i = i + 1\n    print(sum)\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        if n%i == 0 and i%2 == 0:\n            s += i\n    return s \n    \ndef power(x,y) :\n    '''\n    Write a python function to compute x raised to the power y.\n    '''\n    z = 1\n    for i in range(y) :\n        z = z*x\n    return z \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumoffactors = 0\n    for i in range(1, n+1): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                sumoffactors += i \n    return sumoffactors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    i=2\n    while (i*i<=n) : \n        if (n%i==0) : \n            sumofFactors+=i \n        i+=1\n    return(sumofFactors)\nprint(sumofFactors(120))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n!= 0):\n        fact = n % 10\n        if(fact == 0):\n            n = n//10\n            continue\n        if(fact % 2 == 0):\n            sum = sum + fact\n        n = n//10\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            if i%2==0:\n                sum=sum+i\n    return sum\nn=int(input(\"Enter a number\"))\nprint(\"Sum of even factors: \",sumofFactors(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #code here\n    print(n)\n    while(n%2==0):\n        n=n/2\n        print(n)\n    print(n)\n    return n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n//2 + (n%2 == 0) * (n//2)\ndef findCommonElements(list1, list2):\n    common_list = []\n    for i in list1:\n        if i in list2:\n            common_list.append(i)\n    print(common_list)\nlist1 = [1,1,2,3,5,8]\nlist2 = [1,2,3,4,5,6,7,8,9]\nfindCommonElements(list1, list2)\ndef find_common_elements(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                result.append(i)\n    print(result)\nlist1 = [1,1,2,3,5,8]\nlist2 = [1,2,3,4,5,6,7,8,9]\nfind_common_elements(list1, list2)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    result = re.findall(r'\\bz+\\b', text)\n    print(result)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n    \ndef add_two(num):\n    '''\n    Write a function that adds 2 to a number.\n    '''\n    return num + 2\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"[z]\",text)\nprint(text_match_wordz(\"The sunset sets at twelve o' clock.\"))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'\\bz\\w+\\b', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z = re.findall(r'z+', text)\n    if z:\n        print(f'yes, this text has a z: {z}')\n    else:\n        print(f'no, this text has no z')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"z\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def match_wordz(pattern):\n        def get_word(line):\n            return re.findall(pattern, line)\n        return get_word\n    pattern = r'z'\n    get_word = match_wordz(pattern)\n    print(get_word(text))\n    return get_word\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = []\n    for each in text:\n        if re.search('z', each):\n            result.append(each)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search(r'z',text)\n    if word:\n        return f\"We have a match: {word[0]}\"\n    else:\n        return f\"No match for z\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 > 0:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            print(\"The month number has 31 days\")\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            print(\"The month number has 30 days\")\n    else:\n        print(\"The given number is not valid\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 >=1 and monthnum2 <= 12:\n        if monthnum2 <= 2:\n            print(\"It's January\")\n        elif monthnum2 >= 3 and monthnum2 <= 5:\n            print(\"It's March\")\n        elif monthnum2 >= 6 and monthnum2 <= 8:\n            print(\"It's April\")\n        elif monthnum2 >= 9 and monthnum2 <= 11:\n            print(\"It's May\")\n        elif monthnum2 == 12:\n            print(\"It's June\")\n    else:\n        print(\"Wrong month number\")\n    return None\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'February':\n        print('The number of days are 31.')\n    else:\n        print('The number of days are 30.')\ncheck_monthnumb_number('February')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_31 = [1,3,5,7,8,10,12]\n    month_30 = [4,6,9,11]\n    if monthnum2 in month_31:\n        return True\n    elif monthnum2 in month_30:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 31\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"The month nummber {} contains 31 days\".format(monthnum2))\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"The month nummber {} contains 30 days\".format(monthnum2))\n    else:\n        print(\"The month nummber {} contains 28 days\".format(monthnum2))\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    elif monthnum2 == 2:\n        return 29\n    else:\n        print(\"The given month number is invalid\")\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        print(stringlist[i])\n        print(\"\")\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in stringlist:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in stringlist:\n        rev_str = reverse_string(i)\n        new_list.append(rev_str)\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # list(stringlist) method will convert a list of string to a list of the original string\n    # The reversed string list is returned and so is the original list\n    return stringlist[::-1]\n    # or use list_reverse method\n    # return list(stringlist)[::-1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = min(lst, key=len)\n    \n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=0\n    lst.sort()\n    for i in range(len(lst)):\n        if(lst[i]==lst[min]):\n            min=i\n    return lst[min]"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_l = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(min_l):\n            min_l = lst[i]\n    return min_l\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 1000000\n    min_len_list = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_len_list = i\n    return min_len_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini = 1000000\n    pos = -1\n    for i in range(0, len(lst)):\n        if lst[i] < mini:\n            mini = lst[i]\n            pos = i\n    print(\"The minimum length of list is \",mini)\n    print(\"The position of the minimum length is \",pos)\n    \nFind_Min(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < m:\n            m = len(lst[i])\n    return lst[m]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min_len = n\n    min_sub = []\n    for i in range(n):\n        for j in range(i,n):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sub = lst[i:j+1]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    pos = 0\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n            pos = i\n    return lst[pos]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = min(len(x) for x in lst)\n    \n    for item in lst:\n        if len(item) == min_len:\n            return item\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(\"Rectangle Area: \",rectangle_area(3,4))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #area of rectangle = l * b\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.islower():\n            str2+=i\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 is None or len(str1) == 0:\n        return ''\n    else:\n        str1 = str1.lower()\n        # print(str1)\n        str1 = str1.replace('A','')\n        str1 = str1.replace('E','')\n        str1 = str1.replace('I','')\n        str1 = str1.replace('O','')\n        str1 = str1.replace('U','')\n        str1 = str1.replace('\u00c1','')\n        str1 = str1.replace('\u00c9','')\n        str1 = str1.replace('\u00cd','')\n        str1 = str1.replace('\u00d3','')\n        str1 = str1.replace('\u00da','')\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # str1 = str1.lower()\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n    \ndef test_remove_uppercase():\n    '''\n    Tests\n    '''\n    assert remove_uppercase(\"\") == \"\"\n    assert remove_uppercase(\"a\") == \"a\"\n    assert remove_uppercase(\"A\") == \"A\"\n    assert remove_uppercase(\"Aa\") == \"aa\"\n    assert remove_uppercase(\"Ab\") == \"ab\"\n    assert remove_uppercase(\"AbA\") == \"abA\"\n    assert remove_uppercase(\"ABAA\") == \"abAA\"\n    assert remove_uppercase(\"ABC\") == \"c\"\n    assert remove_uppercase(\"ABC\") == \"c\"\n    assert remove_uppercase(\"ABCA\") == \"cA\"\n    assert remove_uppercase(\"ABBB\") == \"bb\"\n    assert remove_uppercase(\"AbCd\") == \"c\"\n    assert remove_uppercase(\"ABC\") == \"c\"\n    assert remove_uppercase(\"ABCab\") == \"cab\"\n    assert remove_uppercase(\"ABCAb\") == \"cAb\"\n    assert remove_uppercase(\"ABCabCd\") == \"cabcd\"\n    assert remove_uppercase(\"ABCabCdABC\") == \"cabcdabcd\"\n    assert remove_uppercase(\"ABCabcABC\") == \"cabcabcd\"\n    assert remove_uppercase(\"abcABC\") == \"c\"\n    assert remove_uppercase(\"abcAB\") == \"b\"\n    assert remove_uppercase(\"ABCABCDEFGHIJ\") == \"c\"\n    assert remove_uppercase(\"ABCABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"c\"\n    assert remove_uppercase(\"ABCABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"c\"\n    \ndef test_remove_uppercase_brute_force():\n    '''\n    Tests\n    '''\n    assert remove_uppercase_brute_force(\"\") == \"\"\n    assert remove_uppercase_brute_force(\"a\") == \"a\"\n    assert remove_uppercase_brute_force(\"A\") == \"A\"\n    assert remove_uppercase_brute_force(\"Aa\") == \"aa\"\n    assert remove_uppercase_brute_force(\"Ab\") == \"ab\"\n    assert remove_uppercase_brute_force(\"AbA\") == \"abA\"\n    assert remove_uppercase_brute_force(\"ABAA\") == \"abAA\"\n    assert remove_uppercase_brute_force(\"ABC\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABC\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABCA\") == \"cA\"\n    assert remove_uppercase_brute_force(\"AbBB\") == \"bb\"\n    assert remove_uppercase_brute_force(\"AbCd\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABC\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABCab\") == \"cab\"\n    assert remove_uppercase_brute_force(\"ABCAb\") == \"cAb\"\n    assert remove_uppercase_brute_force(\"ABCabCd\") == \"cabcd\"\n    assert remove_uppercase_brute_force(\"ABCabCdABC\") == \"cabcdabcd\"\n    assert remove_uppercase_brute_force(\"ABCabcABC\") == \"cabcabcd\"\n    assert remove_uppercase_brute_force(\"abcABC\") == \"c\"\n    assert remove_uppercase_brute_force(\"abcAB\") == \"b\"\n    assert remove_uppercase_brute_force(\"ABCABCDEFGHIJ\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABCABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"c\"\n    assert remove_uppercase_brute_force(\"ABCABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"c\"\n    \n    \ndef remove_uppercase_brute_force_small(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase = re.findall('[A-Z]', str1)\n    if len(uppercase) == 0:\n        return str1\n    else:\n        return str1[0] + str1[1:].replace(uppercase[0], '')\n    \ndef test_remove_uppercase_brute_force_small():\n    '''\n    Tests\n    '''\n    assert remove_uppercase_brute_force_small(\"\") == \""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = re.compile(r\"^[a-z]+[A-Z]+[a-z]+\")\n    return pattern.sub('',str1)\ndef remove_spaces(str1):\n    '''\n    Write a function that removes all spaces from a given string.\n    '''\n    str1 = str1.strip()\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function that removes all digits from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"\\d+\")\n    return pattern.sub('',str1)\ndef remove_words(str1,words):\n    '''\n    Write a function that removes all words that occur in a given list from a given string.\n    '''\n    str1 = str1.split()\n    result = []\n    for word in str1:\n        if word not in words:\n            result.append(word)\n    return \" \".join(result)\ndef remove_special_characters(str1):\n    '''\n    Write a function that removes all special characters from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s]\")\n    return pattern.sub('',str1)\ndef word_count(str1):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    str1 = str1.split()\n    word_list = []\n    for word in str1:\n        if word not in word_list:\n            word_list.append(word)\n    return len(word_list)\ndef is_palindrome(str1):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"^[a-z]+[a-z]+[a-z]+\")\n    if pattern.search(str1)!= None:\n        return True\n    else:\n        return False\ndef convert_to_roman(num):\n    '''\n    Write a function that converts a given integer to roman numerals.\n    '''\n    roman_num = \"\"\n    while num > 0:\n        if num >= 1000:\n            roman_num += \"M\"\n            num -= 1000\n        elif num >= 900:\n            roman_num += \"CM\"\n            num -= 900\n        elif num >= 500:\n            roman_num += \"D\"\n            num -= 500\n        elif num >= 400:\n            roman_num += \"CD\"\n            num -= 400\n        elif num >= 100:\n            roman_num += \"C\"\n            num -= 100\n        elif num >= 90:\n            roman_num += \"XC\"\n            num -= 90\n        elif num >= 50:\n            roman_num += \"L\"\n            num -= 50\n        elif num >= 40:\n            roman_num += \"XL\"\n            num -= 40\n        elif num >= 10:\n            roman_num += \"X\"\n            num -= 10\n        elif num >= 9:\n            roman_num += \"IX\"\n            num -= 9\n        elif num >= 5:\n            roman_num += \"V\"\n            num -= 5\n        elif num >= 4:\n            roman_num += \"IV\"\n            num -= 4\n        elif num >= 1:\n            roman_num += \"I\"\n            num -= 1\n    return roman_num\ndef is_prime(num):\n    '''\n    Write a function that checks whether a given integer is prime or not.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\ndef calculate_sum(num1,num2):\n    '''\n    Write a function that calculates the sum of two given integers.\n    '''\n    return num1 + num2\ndef is_numeric(num1):\n    '''\n    Write a function that checks whether a given string is numeric or not.\n    '''\n    try:\n        int(num1)\n        return True\n    except ValueError:\n        return False\ndef find_max_value(data):\n    '''\n    Write a function that finds the maximum value in a given list.\n    '''\n    max_value = data[0]\n    for i in range(1,len(data)):\n        if data[i] > max_value:\n            max_value = data[i]\n    return max_value\ndef find_min_value(data):\n    '''\n    Write a function that finds the minimum value in a given list.\n    '''\n    min_value = data[0]\n    for i in range(1,len(data)):\n        if data[i] < min_value:\n            min_value = data[i]\n    return min_value\ndef swap_case(str1):\n    '''\n    Write a function that swaps cases of all the letters in a string.\n    '''\n    return str1.swapcase()\ndef is_palindrome_2(str1):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"^[a-z]+[a-z]+[a-z]+\")\n    if pattern.search(str1)!= None:\n        return True\n    else:\n        return False\ndef is_palindrome_3(str1):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"^[a-z]+[a-z]+[a-z]+\")\n    if pattern.search(str1)!= None:\n        return True\n    else:\n        return False\ndef vowel_count(str1):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"^[a-z]+[a-z]+[a-z]+\")\n    if pattern.search(str1)!= None:\n        return str1.count(\"a\") + str1.count(\"e\") + str1.count(\"i\") + str1.count(\"o\") + str1.count(\"u\")\n    else:\n        return 0\ndef is_palindrome_4(str1):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    pattern = re.compile(r\"^[a-z]+[a-z]+[a-z]+\")\n    if pattern.search(str1)!= None:\n        return True\n    else:\n        return False\ndef is_palindrome_5(str1):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    str2 = re.sub(r'([A-Z]+)', r'\\1', str1)\n    \n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n    \ndef remove_punct(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', \"\", str1)\n    \ndef remove_empty_string(str1):\n    '''\n    Write a function to remove empty strings from a given string.\n    '''\n    return str1.strip()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n',' ')\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str1 = str1.translate(str.maketrans('', '', '!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~'))\n    return str1\ndef remove_accent(str1):\n    '''\n    Write a function to remove accent from a given string.\n    '''\n    str1 = re.sub(r\"([aeiou])\", r\" \\1\", str1)\n    return str1\ndef remove_nonascii(str1):\n    '''\n    Write a function to remove non-ASCII characters from a given string.\n    '''\n    str1 = re.sub(r\"([^\\x00-\\x7f])\", r\"\", str1)\n    return str1\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1 = re.sub(r\"([^\\w\\s])\", r\"\", str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    str1 = re.sub(r\"[^\\w\\s]\", r\"\", str1)\n    return str1\ndef stem_words(str1):\n    '''\n    Write a function to stem words from a given string.\n    '''\n    str1 = re.sub(r'\\d', '', str1)\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    word_list = str1.split()\n    word_list =''.join(w for w in word_list)\n    return word_list\ndef reverse_words(str1):\n    '''\n    Write a function to reverse words from a given string.\n    '''\n    return''.join(reversed(str1.split()))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str1 = re.sub(r'\\d', '', str1)\n    return str1\ndef is_mixed_case(str1):\n    '''\n    Write a function to determine if a word is mixed case or not.\n    '''\n    str1 = str1.lower()\n    return str1.isupper() or str1.islower()\ndef remove_all_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    return str1.replace(' ','')\ndef print_lst(str1):\n    '''\n    Write a function to print list of list\n    '''\n    str1 = str1.split()\n    lst = list()\n    for i in str1:\n        lst.append(i.split(' '))\n    return lst\ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    str1 = re.sub(r'(.)\\1+', r'\\1', str1)\n    return str1\ndef remove_space_from_end(str1):\n    '''\n    Write a function to remove space at the end of the string.\n    '''\n    str1 = str1.strip()\n    return str1\ndef remove_spaces_from_start(str1):\n    '''\n    Write a function to remove space at the start of the string.\n    '''\n    str1 = str1.strip()\n    return str1\ndef remove_spaces_from_all(str1):\n    '''\n    Write a function to remove space from the start and the end of the string.\n    '''\n    return str1.strip()\ndef lower_case(str1):\n    '''\n    Write a function to convert string to lower case.\n    '''\n    return str1.lower()\ndef upper_case(str1):\n    '''\n    Write a function to convert string to upper case.\n    '''\n    return str1.upper()\ndef is_letter(str1):\n    '''\n    Write a function to determine if a character is a letter or not.\n    '''\n    return re.match(r'^[A-Za-z]*$',str1) is not None\ndef replace_with_space(str1):\n    '''\n    Write a function to replace space with empty string.\n    '''\n    return str1.replace(' ', '')\ndef replace_with_space_in_between(str1):\n    '''\n    Write a function to replace space with empty string in between.\n    '''\n    return str1.replace(' ','',1)\ndef replace_with_space_at_start(str1):\n    '''\n    Write a function to replace space with empty string at start.\n    '''\n    return str1.replace(' ', '', 1)\ndef replace_with_space_at_end(str1):\n    '''\n    Write a function to replace space with empty string at end.\n    '''\n    return str1.replace(' ', '', -1)\ndef replace_with_space_at_start_end(str1):\n    '''\n    Write a function to replace space with empty string at start and end.\n    '''\n    return str1.replace(' ', '', -1)\ndef replace_with_blank(str1):\n    '''\n    Write a function to replace blank with empty string.\n    '''\n    return str1.replace(' ', '')\ndef replace_with_blank_at_start(str1):\n    '''\n    Write a function to replace blank with empty string at start.\n    '''\n    return str1.replace(' ', '', 1)\ndef replace_with_blank_at_end(str1):\n    '''\n    Write a function to replace blank with empty string at end.\n    '''\n    return str1.replace(' ', '', -1)\ndef replace_with_blank_at_start_end(str1):\n    '''\n    Write a function to replace blank with empty string at start and end.\n    '''\n    return str1.replace(' ', '', -1)\ndef add_spaces(str1):\n    '''\n    Write a function to add spaces at the end of the string.\n    '''\n    return str1.strip()+' '\ndef add_spaces_at_start(str1):\n    '''\n    Write a function to add spaces at the start of the string.\n    '''\n    return''+str1.strip()\ndef reverse_words_in_str(str1):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return str1.split()[::-1]\ndef add_string_in_between(str1, str2, str3):\n    '''\n    Write a function to add string between str1 and str2.\n    '''\n    return str1+str2+str3\ndef remove_string_in_between(str1, str2, str3):\n    '''\n    Write a function to remove string between str1 and str2.\n    '''\n    return str1[:str1.index(str2)]+str1[str1.index(str2)+len(str2):]\ndef remove_string_from_end(str1, str2):\n    '''\n    Write a function to remove string from end.\n    '''\n    return str1[:-len(str2)]\ndef remove_string_from_front(str1, str2):\n    '''\n    Write a function to remove string from front.\n    '''\n    return str1[len(str2):]\ndef remove_string_from_start(str1, str2):\n    '''\n    Write a function to remove string from start.\n    '''\n    return str1[len(str2):]\ndef swap_string_characters(str1, str2, str3):\n    '''\n    Write a function to swap characters in a string"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst.split()\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x:x[0],lst) \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        if(i!= len(lst) - 1):\n            new_list.append(lst[i][0])\n        else:\n            new_list.append(lst[i][0])\n    print(new_list)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return (list(map(lambda x: x[0], lst)))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst) \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = list()\n    for i in range(len(lst)):\n        if not lst[i]:\n            lst[i] = 0\n        res.append(lst[i][0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0],end=\"\")\n        if i!= lst[-1]:\n            print(\",\",end=\"\")\n    print()\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i].append(i+1)\n    print(lst)\n    for i in range(len(lst)):\n        print(lst[i][0])\n    \nif __name__ == '__main__':\n    lst = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], \n    [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]\n    Extract(lst)"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        print(lst[i][0])\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count(\"U\")\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for s in str:\n        if s.isupper():\n            result += 1\n    print(result)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            count+=1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # code here\n    result = []\n    def rec(l,path):\n        if l:\n            for i in range(len(l)):\n                temp = path+[l[i]]\n                if i == (len(l)-1):\n                    result.append(temp)\n                else:\n                    rec(l[i+1:],temp)\n    rec(list1,[])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        print(list1)\n    else:\n        i = 0\n        for i in range(len(list1)):\n            c = list1[i]\n            list1.pop(i)\n            list2 = combinations_list(list1)\n            list1.insert(i, c)\n        print(list2)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 0:\n        return result\n    com = combinations_list(list1[1:])\n    for i in range(0, len(com)):\n        result.append(list1[0:1] + com[i])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    if not list1:\n        return res\n    \n    if len(list1)==1:\n        res.append(list1)\n        return res\n        \n    elif len(list1) == 2:\n        tmp = list1[0] + list1[1]\n        res.append(tmp)\n        res.append([list1[1], list1[0]])\n        return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return [[]]\n    if len(list1)==1:\n        return [[list1[0]]]\n    else:\n        combinations_list_1 = combinations_list(list1[1:])\n        combinations_list_2 = combinations_list(list1[:len(list1)-1])\n        final_list = []\n        for ele in combinations_list_1:\n            final_list.append(ele)\n        for ele in combinations_list_2:\n            final_list.append(ele)\n        return final_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) <=1:\n        return list1\n    else:\n        for i in range(len(list1)):\n            result.append(list1[i:])\n            result.append([list1[i]])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    com = []\n    def combinations(list1,com1):\n        for i in list1:\n            com1.append(i)\n            if len(com1) == len(list1):\n                com.append(com1)\n            combinations(list1,com1)\n    combinations(list1,com1=com1)\n    return com\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)\n    combinations = []\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    s=0\n    e=0\n    m=0\n    for i in range(len(arr)):\n        s=max(s,arr[i])\n        e=max(e,arr[i])\n        m=max(m,s*e)\n    return m\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    current_product = 1\n    for index in range(0,len(arr)):\n        current_product *= arr[index]\n        max_product = max(max_product,current_product)\n        current_product = max(current_product,1)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = max_product = arr[0]\n    for i in range(1, len(arr)):\n        #update curr_max and max_product, if curr_max is negative, it means\n        #it is already negative and we are just flipping it\n        curr_max = max(curr_max*arr[i], arr[i])\n        max_product = max(max_product, curr_max)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = -math.inf\n    left = 0\n    right = 0\n    ans_sub_arr = -math.inf\n    while left < len(arr):\n        temp = 1\n        right = left + 1\n        while right < len(arr) and arr[right] > 0:\n            temp *= arr[right]\n            right += 1\n        ans_sub_arr = max(ans_sub_arr, temp)\n        left += 1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Base case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_start_index = 0\n    min_start_index = 0\n    product = 1\n    for index in range(len(arr)):\n        product = product * arr[index]\n        if product > max_product:\n            max_product = product\n            max_start_index = index\n        if product < 0:\n            product = 1\n            min_start_index = index\n    return max_product, max_start_index, min_start_index\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    assert(len(arr) > 0)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -(10**9)\n    curr_product = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # base case\n    if len(arr) == 0:\n        return 0\n    \n    # initialize local variable\n    max_product = arr[0]\n    \n    # main loop\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] * max_product\n        if arr[i] > max_product:\n            max_product = arr[i]\n    \n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        if n not in dict.values():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values().count(n) == len(dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    \n    for i in dict:\n        if dict[i]!= n:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = True\n    for i in dict:\n        if dict[i]!= n:\n            check = False\n    return check\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        if len(dict) == 0:\n            return False\n    if not (len(dict) == len(set(dict.values()))):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        for key, value in dict1.items():\n            if value == '':\n                del dict1[key]\n    except:\n        print('Error')\n    return dict1\n    \ndef sort_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    try:\n        dict2 = {}\n        for key, value in sorted(dict1.items(), key = lambda item: item[1]):\n            dict2[key] = value\n    except:\n        print('Error')\n    return dict2\n        \ndef sort_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    try:\n        dict2 = {}\n        for key, value in sorted(dict1.items(), key = lambda item: item[0]):\n            dict2[key] = value\n    except:\n        print('Error')\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return []\n    if not isinstance(dict1, dict):\n        return []\n    empty = []\n    for key, value in dict1.items():\n        if not value:\n            empty.append(key)\n    for key in empty:\n        dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_keys = []\n    for k, v in dict1.items():\n        if not v:\n            empty_keys.append(k)\n    for k in empty_keys:\n        del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print('Original dictionary: ', dict1)\n    keys_to_drop = []\n    for key in dict1:\n        if dict1[key] == '':\n            keys_to_drop.append(key)\n    for key in keys_to_drop:\n        del dict1[key]\n    print('Dictionary after dropping empty items: ', dict1)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict()\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_prod_idx = 0\n    min_prod_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_prod:\n            max_prod_idx = i\n            max_prod = arr[i]\n        elif arr[i] > min_prod:\n            min_prod = arr[i]\n            min_prod_idx = i\n        else:\n            continue\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        if max_product < arr[i] and i < len(arr)-1:\n            max_product = arr[i]*arr[i+1]\n            \n        elif max_product < arr[i]:\n            max_product = arr[i]\n            \n    return max_product\n    \ndef max_product_v2(arr):\n    '''\n    another approach:\n    1. start from the end of the array, and compare each element to the next element, to see if the product is bigger than the current maximum.\n    2. if the product is bigger than the current maximum, then update the maximum\n    3. if the product is smaller than the current maximum, then skip it\n    '''\n    \n    max_product = 0\n    for i in range(len(arr)-1, -1, -1):\n        current_max_product = max_product\n        if current_max_product < arr[i] and i > 0:\n            current_max_product = arr[i]*arr[i-1]\n        max_product = max(current_max_product, max_product)\n            \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = -99999999\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            temp_prod = 1\n            for k in range(i,j+1):\n                temp_prod = temp_prod * arr[k]\n            if temp_prod > max_prod:\n                max_prod = temp_prod\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    max_prod = 0\n    curr_max = 1\n    curr_min = 1\n    curr_min_prod = 1\n    curr_max_prod = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Find the maximum value of a[i] * a[i+1] * a[i+2] * a[i+3] *... * a[i+n-1]\n    # if there are k numbers in the array.\n    # if there are k + 1 numbers in the array, k numbers + 1 number\n    # else k numbers\n    max_prod = arr[0]\n    max_prod_idx = 0\n    for idx in range(1, len(arr)):\n        if arr[idx] < 0:\n            continue\n        if arr[idx-1] > 0:\n            max_prod_idx = idx-1\n        max_prod = max(arr[idx], arr[idx]*arr[max_prod_idx])\n        max_prod_idx = idx\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = -1000000\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         for k in range(j+1, len(arr)):\n    #             temp = arr[i]*arr[j]*arr[k]\n    #             if m<temp:\n    #                 m = temp\n    # return m\n    for i in range(len(arr)):\n        s = 0\n        for j in range(i, len(arr)):\n            s = s*arr[j]\n            if m<s:\n                m = s\n    return m\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    from collections import defaultdict \n    arr.sort() \n    #print(arr)\n    maxi = -999999999999999999999999999999999999\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[j]>0):\n                s = arr[i]*arr[j]\n                if s>maxi:\n                    maxi = s \n    return maxi \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = -99999999999\n    min_val = 999999999999\n    \n    for i in range(0, len(arr)):\n        if (arr[i] > max_val):\n            max_val = arr[i]\n        if (arr[i] < min_val):\n            min_val = arr[i]\n    \n    return max_val * min_val\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    ans = max(arr[0],arr[1])\n    for i in range(2,len(arr)):\n        ans = max(arr[i]*ans,arr[i]+arr[i-1])\n    return ans\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #print(test_tup)\n    list_pw = []\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            list_pw.append(test_tup[i] + test_tup[j])\n    return tuple(list_pw)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in range(len(test_list)):\n        if i == len(test_list) - 1:\n            break\n        test_list[i] = test_list[i] + test_list[i+1]\n    print(tuple(test_list))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 2:\n        return test_tup[0] + test_tup[1], (test_tup[0], test_tup[1])\n    else:\n        test_tup = add_pairwise(test_tup[0])\n        test_tup = add_pairwise(test_tup)\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the sum of two elements\n    pairwise_sum = test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    if x % 2 == 0:\n        if test_tup[1] < 0:\n            x = x + (x*-1)\n            y = x + (test_tup[1])\n            return (x,y)\n        else:\n            x = x + (test_tup[1])\n            return (x,)\n    else:\n        return (x + (test_tup[1]))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return\n    else:\n        return tuple(test_tup[0] + x for x in test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    _tup = list(test_tup)\n    for i in range(len(_tup) - 1):\n        _tup[i] += _tup[i+1]\n    return tuple(_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairs = []\n    for i in range(0, len(test_tup)):\n        if i < len(test_tup) - 1:\n            pairs.append(test_tup[i] + test_tup[i+1])\n        elif i == len(test_tup) - 1:\n            pairs.append(test_tup[i])\n    return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    addition = list(test_tup)\n    for i in range(len(addition)):\n        if i == 0:\n            if addition[0] == None:\n                addition[0] = 0\n            else:\n                addition[0] = addition[0] + test_tup[1]\n        elif i == len(addition) - 1:\n            if addition[len(addition) - 1] == None:\n                addition[len(addition) - 1] = 0\n            else:\n                addition[len(addition) - 1] = addition[len(addition) - 1] + test_tup[len(addition) - 2]\n        else:\n            if addition[i - 1] == None:\n                addition[i - 1] = 0\n            if addition[i + 1] == None:\n                addition[i + 1] = 0\n            else:\n                addition[i] = addition[i] + test_tup[i + 1] + test_tup[i - 1]\n    return tuple(addition)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print('Starting add_pairwise\\n')\n    result = (test_tup[0], test_tup[0]+test_tup[1])\n    print(f'Result: {result}\\n')\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return sum(arr * np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)\n    return np.dot(arr, np.arange(n)) % n\n    \ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = np.array(arr)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product *= ele\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in range(n):\n        total = total * arr[i]\n    return total % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i]\n        product = product % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Finding product of the array multiplication\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(len(arr)):\n        ans = ans * arr[i]\n    return ans % n\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_product = 1\n    for i in arr:\n        arr_product = arr_product * i\n    \n    for i in range(n):\n        arr_product = arr_product * i\n    \n    return arr_product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = sum(arr)\n    res = 0\n    if (s < n):\n        return res\n    for i in range(1, n):\n        if (s % i == 0):\n            res += i\n    return res % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag=False\n    for i in range(0,len(l)-1):\n        if l[i]==l[i+1]:\n            flag=True\n            break\n    return flag\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i]<l[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if (l[i] == l[i-1]+1 or l[i] == l[i-1] -1):\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Write your logic here\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag=False\n    l=sorted(l)\n    for i in range(len(l)-1):\n        if (l[i+1]-l[i])==1:\n            flag=True\n        else:\n            flag=False\n            break\n    return flag\nprint(check_Consecutive(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Approach 1:\n    # for i in l:\n    #     if i == i + 1:\n    #         return False\n    # return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) > 2:\n        for i in range(0, len(l)-1):\n            if l[i] == l[i+1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    start = 0\n    if len(l) == 0: \n        return False\n    if len(l) == 1: \n        return False\n    for i in range(1, len(l)): \n        if l[i] == l[start] + 1: \n            start += 1\n        else: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    \n    if l[0] == l[1]:\n        return check_Consecutive(l[1:])\n    else:\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n    \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for x in test_list1:\n        if x in test_list2:\n            intersection.append(x)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for x in test_list1:\n        if x in test_list2:\n            intersection_list.append(x)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    print(set1 & set2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 is None or test_list2 is None:\n        return\n    #solution using dictionary\n    intersect_dict = {}\n    for i in test_list1:\n        if i in test_list2:\n            intersect_dict[i] = i\n    return intersect_dict.keys()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list = []\n    for i in test_list1:\n        if i in test_list2:\n            test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set_intersection = set1.intersection(set2)\n    return list(set_intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    intersection = tuple(set(test_list1).intersection(set(test_list2)))\n    return intersection\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,'')\n    return str1\n    \ndef get_input():\n    '''\n    Get a single line input from the user.\n    '''\n    return input()\n    \ndef replace_spaces(str1):\n    '''\n    Write a function to replace spaces in a string with %20.\n    '''\n    str1 = str1.replace(' ','%20')\n    return str1\n    \ndef reverse(str1):\n    '''\n    Write a function to reverse the string.\n    '''\n    str1 = str1[::-1]\n    return str1\n    \ndef count_upper_lower(str1):\n    '''\n    Write a function to count the number of uppercase characters,lowercase characters and digits in a given string.\n    '''\n    count_lower = str1.lower().count('lower')\n    count_upper = str1.upper().count('upper')\n    count_digit = str1.count('digit')\n    print(count_lower,count_upper,count_digit)\n    return count_lower,count_upper,count_digit\n    \ndef repeat_string(str1,n):\n    '''\n    Write a function to repeat a string n times.\n    '''\n    str1 = str1*n\n    return str1\n    \ndef cal_age(year,month,day):\n    '''\n    Write a function to calculate and print your age in number of days,weeks,and months.\n    '''\n    age = int(year)*365+int(month)*30+int(day)\n    print(age)\n    return age\n    \ndef extra_time(str1):\n    '''\n    Write a function to print the extra time of a person after he wakes up or sleeps.\n    '''\n    sleep_time = str1.count('sleep')\n    if sleep_time==0:\n        print('wake up')\n    else:\n        print('sleep')\n    return sleep_time\n    \ndef make_dict(str1):\n    '''\n    Write a function to make a dictionary of key value pair from the given string.\n    '''\n    d = dict()\n    for i in str1.split():\n        k,v = i.split(':')\n        d[k] = v\n    return d\n    \ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a given string.\n    '''\n    dict1 = dict()\n    dict2 = dict()\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    for i in str2:\n        if i not in dict2:\n            dict2[i] = 1\n        else:\n            dict2[i] += 1\n    anagrams = []\n    for i in str1:\n        if i in str2:\n            if dict2[i] > dict1[i]:\n                anagrams.append(i)\n    return anagrams\n    \ndef check_perfect_square(num):\n    '''\n    Write a function to check whether a number is perfect square or not.\n    '''\n    if int(num**0.5)**2 == num:\n        return True\n    else:\n        return False\n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num == 1 or num == 0:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    \ndef check_prime_in_range(low,high):\n    '''\n    Write a function to check whether a number is prime in a given range or not.\n    '''\n    primes = []\n    for i in range(low,high+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n    \ndef check_string(str1):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)//2):\n        if str1[i]!= str1[len(str1)-i-1]:\n            return False\n    return True\n    \ndef sum_digits(n):\n    '''\n    Write a function to sum of digits of a given integer.\n    '''\n    num = 0\n    while n > 0:\n        num += n%10\n        n = n//10\n    return num\n    \ndef remove_duplicates(str1):\n    '''\n    Write a function to remove duplicates characters from a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            str1 = str1.replace(i,'')\n    return str1\n    \ndef convert_list_to_dict(arr):\n    '''\n    Write a function to convert a list to dictionary.\n    '''\n    d = dict()\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    return d\n    \ndef double_char(str1):\n    '''\n    Write a function to convert a string to its double-length.\n    '''\n    return str1 + str1\n    \ndef is_isogram(str1):\n    '''\n    Write a function to check whether a string is an isogram or not.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return False\n    return True\n    \ndef time_in_words(h,m,s):\n    '''\n    Write a function to print the time in words.\n    '''\n    if h == 0:\n        return '12 AM'\n    elif h == 1:\n        return '12 AM'\n    elif h == 2:\n        return '11 PM'\n    elif h > 2:\n        return str(h)+' PM'\n    else:\n        h = 12+h\n        return str(h)+' AM'\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    num1 = int(num)\n    reverse_num = int(str(num1)[::-1])\n    if num1 == reverse_num:\n        return True\n    else:\n        return False\n    \ndef check_sum_of_two_numbers(num1,num2):\n    '''\n    Write a function to check whether two numbers add up to a specific target number or not.\n    '''\n    return num1+num2 == (num2+num1)\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num == 1 or num == 0:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef find_max_occuring_char(str1):\n    '''\n    Write a function to find the maximum occurring character from a given string.\n    '''\n    d = {}\n    max_char = ''\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for k,v in d.items():\n        if v > max_char:\n            max_char = k\n    return max_char\n    \ndef get_input(lower,upper):\n    '''\n    Write a function to print the given range.\n    '''\n    for i i"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=''\n    for i in str1:\n        if i==ch:\n            new_str+=newch\n        else:\n            new_str+=i\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=str1.replace(ch,newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    s=str1\n    s=s.replace(ch,newch)\n    return s\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr = newstr[:i] + newch + newstr[i+1:]\n    return newstr\nstr2 = input(\"Enter the string: \")\nch = input(\"Enter the character: \")\nnewch = input(\"Enter the new character: \")\nstr3 = replace_char(str2,ch,newch)\nprint(\"Replaced string: \",str3)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # sorted_by_value = sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    # print(sorted_by_value)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # arr = []\n    # for key in dict1:\n    #     arr.append([key, dict1[key]])\n    # arr.sort(key = lambda x:x[1], reverse = True)\n    arr = []\n    for key in dict1:\n        arr.append([key, dict1[key]])\n    arr.sort(key = lambda x:x[1], reverse = True)\n    return arr\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = dict1.copy()\n    ls = []\n    ls = sorted(d.items(), key=lambda x: x[1])\n    return ls\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    #return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return temp_list\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k, v in sorted(dict1.items(), key=lambda item: item[1]):\n        print(k,v)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv:(kv[1], kv[0]))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    arr = sorted(nums)\n    largest = arr[-1]\n    smallest = arr[0]\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_num = -1\n    smallest_num = -1\n    for num in nums:\n        if num > largest_num:\n            largest_num = num\n        if num < smallest_num:\n            smallest_num = num\n    print(\"The largest number in the given array is \", largest_num)\n    print(\"The smallest number in the given array is \", smallest_num)\n    return largest_num + smallest_num\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = None\n    largest = None\n    result = None\n    for i in range(0, len(nums)):\n        if smallest == None or nums[i] < smallest:\n            smallest = nums[i]\n        elif largest == None or nums[i] > largest:\n            largest = nums[i]\n    result = largest + smallest\n    return result\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # n = len(nums)\n    # if n == 0:\n    #     return None\n    # l_val = nums[0]\n    # u_val = nums[0]\n    # for i in range(1, n):\n    #     if nums[i] < l_val:\n    #         l_val = nums[i]\n    #     if nums[i] > u_val:\n    #         u_val = nums[i]\n    # return l_val + u_val\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = 0\n    min_num = 0\n    for i in nums:\n        if i > max_num:\n            max_num = i\n        elif i < min_num:\n            min_num = i\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = nums\n    s = sorted(a)\n    for i in range(0, len(s)):\n        if i == 0:\n            a[0] = s[i]\n        else:\n            a[i] = s[i]\n    return sum(a)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = float('-inf')\n    min = float('inf')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sorted(nums)[-1] + sorted(nums)[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return(max(nums) + min(nums))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\nprint(is_lower
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = \"\"\n    for x in string:\n        if ord(x) > 64 and ord(x) < 91:\n            result = result + chr(ord(x) + 32)\n        else:\n            result = result + x\n    return result\n    \nprint(is_lower('Hello'))\nprint(is_lower('Hello'))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = string.lower()\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = str(string).lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    newString = ''\n    for c in string:\n        newString += c.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(string.lower())\nis_lower('Hi there!')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # str1 = \"aAAa, aaaaa, aAaaA, aaAAa, aaaaaa, aaaaaA, aAaaa, aaaaaaa, Aaaa, Aaaaa, aaaaaAAA, aAaaaaAA, aaaaaaaaa, aAAAAAAA, aAAAAAAAA, AAAAAAAAAA, AAAAAAAAAAAAA, AAAAAAAABBAAAB, AAAAAAAABBBAAAB, AAAAAAAABBBAAAB, aAaaaaA, Aaaaaa, AAAAAAAAB, AAAAAAAABB, AAAAAAAABBB, AAAAAAAABBB, AAAAAAAABBBB, aAAAAAAABBBAAAB, AAAAAAAABBBAAAB, AAAAAAAABBBAAAB, AAAAAAAABBBAAAB, aAAAAAAABBBAAAB, AAAAAAAABBBAAAB, AAAAAAAABBBAAAB, AAAAAAAABBBAAAB, a
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1, flags=re.I)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    str1 = re.sub(r'[,.;@#?!&$#%+=:<>{}()\\[\\]_]',' ',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    str1 = re.sub('\\d','',str1)\n    return str1\ndef remove_nonalpha(str1):\n    '''\n    Write a function to remove all non alphabetic characters from a given string.\n    '''\n    str1 = re.sub('[^a-zA-Z]',' ',str1)\n    return str1\ndef remove_nonascii(str1):\n    '''\n    Write a function to remove all non ASCII characters from a given string.\n    '''\n    str1 = re.sub('[^\\x00-\\x7F]','',str1)\n    return str1\ndef remove_hyphen(str1):\n    '''\n    Write a function to remove hyphens from a given string.\n    '''\n    str1 = str1.replace('-','')\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    str1 = re.sub('\\d+',' ',str1)\n    return str1\ndef remove_stopwords(str1,stopwords_list):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    for word in stopwords_list:\n        if word in str1:\n            str1 = str1.replace(word,'')\n    return str1\ndef remove_stopwords_and_single_character(str1):\n    '''\n    Write a function to remove stop words and single character from a given string.\n    '''\n    final_str = \"\"\n    for word in str1.split():\n        if len(word) > 1:\n            final_str += word + \" \"\n    return final_str\ndef lemmatize_nouns(str1):\n    '''\n    Write a function to lemmatize nouns from a given string.\n    '''\n    nouns = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('N'):\n            nouns.append(word)\n    return nouns\ndef lemmatize_verbs(str1):\n    '''\n    Write a function to lemmatize verbs from a given string.\n    '''\n    verbs = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('V'):\n            verbs.append(word)\n    return verbs\ndef lemmatize_adverbs(str1):\n    '''\n    Write a function to lemmatize adverbs from a given string.\n    '''\n    adverbs = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('R'):\n            adverbs.append(word)\n    return adverbs\ndef lemmatize_prepositions(str1):\n    '''\n    Write a function to lemmatize prepositions from a given string.\n    '''\n    prepositions = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('P'):\n            prepositions.append(word)\n    return prepositions\ndef lemmatize_determiners(str1):\n    '''\n    Write a function to lemmatize determiners from a given string.\n    '''\n    determiners = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag == 'DT':\n            determiners.append(word)\n    return determiners\ndef lemmatize_pronouns(str1):\n    '''\n    Write a function to lemmatize pronouns from a given string.\n    '''\n    pronouns = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('P'):\n            pronouns.append(word)\n    return pronouns\ndef lemmatize_adjectives(str1):\n    '''\n    Write a function to lemmatize adjectives from a given string.\n    '''\n    adjectives = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('J'):\n            adjectives.append(word)\n    return adjectives\ndef lemmatize_possessives(str1):\n    '''\n    Write a function to lemmatize possessives from a given string.\n    '''\n    possessives = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('P'):\n            possessives.append(word)\n    return possessives\ndef lemmatize_wh_words(str1):\n    '''\n    Write a function to lemmatize wh words from a given string.\n    '''\n    wh_words = []\n    pos = nltk.pos_tag(nltk.word_tokenize(str1))\n    for word,tag in pos:\n        if tag.startswith('W'):\n            wh_words.append(word)\n    return wh_words\ndef lemmatize_all(str1):\n    '''\n    Write a function to lemmatize all parts of speech from a given string.\n    '''\n    nouns = lemmatize_nouns(str1)\n    verbs = lemmatize_verbs(str1)\n    adverbs = lemmatize_adverbs(str1)\n    prepositions = lemmatize_prepositions(str1)\n    determiners = lemmatize_determiners(str1)\n    pronouns = lemmatize_pronouns(str1)\n    adjectives = lemmatize_adjectives(str1)\n    possessives = lemmatize_possessives(str1)\n    wh_words = lemmatize_wh_words(str1)\n    return nouns + verbs + adverbs + prepositions + determiners + pronouns + adjectives + possessives + wh_words\ndef tokenize(str1):\n    '''\n    Write a function to tokenize a given string.\n    '''\n    return str1.split()\ndef tokenize_numbers(str1):\n    '''\n    Write a function to tokenize numbers from a given string.\n    '''\n    numbers = re.findall('[0-9]+',str1)\n    return numbers\ndef find_in_common(list1, list2):\n    '''\n    Write a function to find the set of elements that are present in both list1 and list2.\n    '''\n    in_common = []\n    for elem1 in list1:\n        if elem1 in list2:\n            in_common.append(elem1)\n    return in_common\ndef remove_common_from_tokenize(str1, tokenize_list):\n    '''\n    Write a function to remove all the common elements in a given list from a given string.\n    '''\n    str1 = str1.split()\n    for word in str1:\n        if word in tokenize_list:\n            str1.remove(word)\n    return str1\ndef count_number_of_letters(str1):\n    '''\n    Write a function to count the number of letters in a given string.\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res=''\n    for i in str1:\n        if not i.islower():\n            res=res+i\n    return res"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            return str1.replace(str1[i],'')\n    return ''\ndef make_numbers_uppercase(str1):\n    '''\n    Write a function to convert a given string to uppercase.\n    '''\n    return str1.upper()\ndef count_lower_and_upper_case(str1):\n    '''\n    Write a function to count the number of lowercase and uppercase characters.\n    '''\n    cnt_lower = 0\n    cnt_upper = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            cnt_lower += 1\n        if str1[i].isupper():\n            cnt_upper += 1\n    return cnt_lower, cnt_upper\ndef check_if_year_is_valid(year):\n    '''\n    Write a function to validate a given year.\n    '''\n    return True\ndef check_if_month_is_valid(month):\n    '''\n    Write a function to validate a given month.\n    '''\n    return True\ndef check_if_date_is_valid(date):\n    '''\n    Write a function to validate a given date.\n    '''\n    return True\ndef validate_date(date):\n    '''\n    Write a function to validate a given date.\n    '''\n    #year = int(date[0:4])\n    #month = int(date[5:7])\n    #date = int(date[8:])\n    #return year > 0 and year < 3000 and month > 0 and month < 13 and date > 0 and date < 32\n    if date == \"\":\n        return False\n    date = date.split(\"-\")\n    try:\n        if len(date) == 3 and all(map(lambda x: x.isdigit(), date)):\n            month = int(date[1])\n            day = int(date[2])\n            year = int(date[0])\n            if month > 0 and month < 13 and day > 0 and day < 32 and year > 0 and year < 3000:\n                return True\n            else:\n                return False\n    except:\n        return False\ndef get_day_from_date(date):\n    '''\n    Write a function to get the day from a given date.\n    '''\n    if date == \"\":\n        return 0\n    date = date.split(\"-\")\n    try:\n        if len(date) == 3 and all(map(lambda x: x.isdigit(), date)):\n            month = int(date[1])\n            day = int(date[2])\n            year = int(date[0])\n            if month > 0 and month < 13 and day > 0 and day < 32 and year > 0 and year < 3000:\n                return day\n            else:\n                return 0\n    except:\n        return 0\ndef get_year_from_date(date):\n    '''\n    Write a function to get the year from a given date.\n    '''\n    if date == \"\":\n        return 0\n    date = date.split(\"-\")\n    try:\n        if len(date) == 3 and all(map(lambda x: x.isdigit(), date)):\n            month = int(date[1])\n            day = int(date[2])\n            year = int(date[0])\n            if month > 0 and month < 13 and day > 0 and day < 32 and year > 0 and year < 3000:\n                return year\n            else:\n                return 0\n    except:\n        return 0\ndef get_month_from_date(date):\n    '''\n    Write a function to get the month from a given date.\n    '''\n    if date == \"\":\n        return 0\n    date = date.split(\"-\")\n    try:\n        if len(date) == 3 and all(map(lambda x: x.isdigit(), date)):\n            month = int(date[1])\n            day = int(date[2])\n            year = int(date[0])\n            if month > 0 and month < 13 and day > 0 and day < 32 and year > 0 and year < 3000:\n                return month\n            else:\n                return 0\n    except:\n        return 0\ndef is_valid_date(date):\n    '''\n    Write a function to validate a given date.\n    '''\n    if validate_date(date):\n        date = date.split(\"-\")\n        try:\n            if len(date) == 3 and all(map(lambda x: x.isdigit(), date)):\n                month = int(date[1])\n                day = int(date[2])\n                year = int(date[0])\n                if month > 0 and month < 13 and day > 0 and day < 32 and year > 0 and year < 3000:\n                    return True\n                else:\n                    return False\n        except:\n            return False\n    else:\n        return False\ndef validate_phone_number(phone_number):\n    '''\n    Write a function to validate a given phone number.\n    '''\n    #phone_number = remove_lowercase(phone_number)\n    #print(phone_number)\n    #if re.search(r\"^[7-9][0-9]{9}$\", phone_number):\n    #    return True\n    #else:\n    #    return False\n    if phone_number == \"\":\n        return False\n    if re.search(r\"^[7-9][0-9]{9}$\", phone_number) == None:\n        return False\n    else:\n        return True\ndef validate_email(email):\n    '''\n    Write a function to validate a given email.\n    '''\n    if email == \"\":\n        return False\n    if re.search(r\"[^@]+@[^@]+\\.[^@]+\", email) == None:\n        return False\n    else:\n        return True\ndef validate_ip(ip):\n    '''\n    Write a function to validate a given IP.\n    '''\n    ip = ip.split(\".\")\n    ip = list(map(lambda x: int(x), ip))\n    #print(ip)\n    if len(ip) == 4:\n        for i in ip:\n            if i < 0 or i > 255:\n                return False\n        return True\n    else:\n        return False\ndef validate_url(url):\n    '''\n    Write a function to validate a given URL.\n    '''\n    if url == \"\":\n        return False\n    if re.search(r\"^(?:http|ftp)s?://\", url) == None:\n        return False\n    else:\n        return True\ndef validate_password(password):\n    '''\n    Write a function to validate a given password.\n    '''\n    if len(password) > 8 and any(map(lambda x: x.isdigit(), password)):\n        return True\n    else:\n        return False\ndef validate_username(username):\n    '''\n    Write a function to validate a given username.\n    '''\n    if len(username) > 6 and any(map(lambda x: x.isalnum(), username)):\n        return True\n    else:\n        return False\ndef validate_mail(mail):\n    '''\n    Write a function to validate a given mail.\n    '''\n    if len(mail) > 7 and any(map(lambda x: x.isalnum(), mail)):\n        return True\n    else:\n        return False\ndef validate_phone_number(phone_number):\n    '''\n    Write a function to validate a given phone number.\n    '''\n    if len(phone_number) > 8 and any(map(lambda x: x.isdigit(), phone_number)):\n        return True\n    else:\n        return False\ndef validate_pass_from_file(filename):\n    '''\n    Write a function to validate a password from a file.\n    '''\n    try:\n        with open(filename, 'r') as f:\n            password = f.read().splitlines()\n        for i in password:\n            if validate_password(i):\n                return True\n    except:\n        return False\n    return False\ndef validate_pass_from_string(password):\n    '''\n    Write a function to validate a password from a string.\n    '''\n    if password == \"\":\n        return False\n    i"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.casefold()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\", \"\", str1, flags=re.I)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a','@').replace('b','8').replace('c','#').replace('d','$').replace('e','*')\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\",\"\").replace(\"b\",\"\").replace(\"c\",\"\").replace(\"d\",\"\").replace(\"e\",\"\").replace(\"f\",\"\").replace(\"g\",\"\").replace(\"h\",\"\").replace(\"i\",\"\").replace(\"j\",\"\").replace(\"k\",\"\").replace(\"l\",\"\").replace(\"m\",\"\").replace(\"n\",\"\").replace(\"o\",\"\").replace(\"p\",\"\").replace(\"q\",\"\").replace(\"r\",\"\").replace(\"s\",\"\").replace(\"t\",\"\").replace(\"u\",\"\").replace(\"v\",\"\").replace(\"w\",\"\").replace(\"x\",\"\").replace(\"y\",\"\").replace(\"z\",\"\")\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace substrings from a given string.\n    '''\n    return str1.replace(\" \", \"\")\ndef isPalindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.\n    '''\n    if len(str1) == 0:\n        return True\n    elif len(str1) == 1:\n        return True\n    else:\n        if remove_lowercase(str1[0]) == remove_lowercase(str1[-1]):\n            return isPalindrome(str1[1:-1])\n        else:\n            return False\ndef reverseWords(str1):\n    '''\n    Write a function to reverse the order of words in a given string.\n    '''\n    return \" \".join(list(reversed(str1.split())))\ndef rotateWords(str1, n):\n    '''\n    Write a function to rotate the words in a given string by N positions.\n    '''\n    if n == 0:\n        return str1\n    return \" \".join(list(str1.split())[n:] + list(str1.split())[:n])\ndef countVowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    return len([v for v in str1 if v in \"aeiouAEIOU\"])\ndef countConsonants(str1):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    return len([v for v in str1 if v not in \"aeiouAEIOU\"])\ndef addString(str1, str2):\n    '''\n    Write a function to add two strings in the form of an array.\n    '''\n    if len(str1) <= len(str2):\n        return str1 + str2\n    return str2 + str1\ndef addTwoNumbers(num1, num2):\n    '''\n    Write a function to add two numbers represented by linked lists.\n    '''\n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num1\n    s1 = num1.val\n    s2 = num2.val\n    num1.val = s1 + s2\n    num1.next = addTwoNumbers(num1.next, num2.next)\n    return num1\ndef print_ll(head):\n    '''\n    Write a function to print a linked list.\n    '''\n    curr = head\n    while curr:\n        print(curr.val)\n        curr = curr.next\ndef removeDuplicates(head):\n    '''\n    Write a function to remove duplicates from a given linked list.\n    '''\n    curr = head\n    prev = None\n    while curr:\n        if curr.val!= prev.val:\n            prev = curr\n        else:\n            prev.next = curr.next\n        curr = prev.next\n    return head\ndef findMiddleNode(head):\n    '''\n    Write a function to find the middle element of a linked list.\n    '''\n    curr = head\n    while curr.next:\n        curr = curr.next\n    return curr\ndef getNode(head):\n    '''\n    Write a function to get the kth to last node from the end of a linked list.\n    '''\n    curr = head\n    while curr.next:\n        curr = curr.next\n    return curr\ndef partition(head, x):\n    '''\n    Write a function to partition a linked list around a value x, such that all nodes less than x come before nodes greater than or equal to x.\n    '''\n    head2 = None\n    curr = head\n    prev = None\n    while curr:\n        if curr.val < x:\n            if head2 is None:\n                head2 = ListNode(curr.val)\n                head2.next = head\n            else:\n                head2.next = ListNode(curr.val)\n                head2.next.next = prev\n            prev = curr\n        else:\n            if prev is None:\n                head = ListNode(curr.val)\n                head.next = curr\n                prev = head\n            else:\n                prev.next = ListNode(curr.val)\n                prev = prev.next\n        curr = curr.next\n    return head2\ndef swapPairs(head):\n    '''\n    Write a function that takes in a singly linked list and swaps pairs of nodes.\n    '''\n    curr = head\n    prev = None\n    while curr and curr.next:\n        temp = curr.next\n        curr.next = temp.next\n        temp.next = prev\n        prev = temp\n        curr = curr.next\n    return head\ndef removeNthFromEnd(head, n):\n    '''\n    Write a function to remove the nth node from the end of a linked list.\n    '''\n    curr = head\n    prev = None\n    for i in range(n):\n        prev = curr\n        curr = curr.next\n    if prev is None:\n        head = curr.next\n        curr = curr.next\n        curr.next = None\n        return head\n    else:\n        prev.next = curr.next\n        curr = curr.next\n        curr.next = None\n        return head\ndef addOneToEach(head):\n    '''\n    Write a function to add one to each of the nodes of a linked list.\n    '''\n    curr = head\n    while curr:\n        curr.val += 1\n        curr = curr.next\n    return head\ndef findMiddleNodeOfLinkedList(head):\n    '''\n    Write a function to find the middle node of a singly linked list.\n    '''\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\ndef countNodes(head):\n    '''\n    Write a function to count the nodes in a singly linked list.\n    '''\n    curr = head\n    count = 0\n    while curr:\n        count += 1\n        curr = curr.next\n    return count\ndef swapPairsOfLinkedList(head):\n    '''\n    Write a function to swap the values of the nth and (n+1th) nodes in a singly linked list.\n    '''\n    curr = head\n    count = 1\n    while curr and curr.next:\n        temp = curr.next\n        curr.next = temp.next\n        temp.next = curr\n        curr = curr.next\n        count += 2\n    return head\ndef addTwoLinkedList(head1, head2):\n    '''\n    Write a function to add two linked lists.\n    '''\n    curr1 = head1\n    curr2 = head2\n    carry = 0\n    while curr1 and curr2:\n        sum = curr1.val + curr2.val + carry\n        carry = int(sum / 10)\n        sum = sum % 10\n        curr1.val = sum\n        curr1 = curr1.next\n        curr2 = curr2.next\n    if curr1:\n        while curr1:\n            sum = curr1.val + carry\n            carry = int(sum / 10)\n            sum = sum % 10\n            curr1.val = sum\n            curr1 = curr1"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a','A').replace('i','I').replace('u','U').replace('e','E').replace('o','O')\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n > 0) :\n        return n % 10\n    else :\n        return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n1 = n\n    c = 1\n    while n1 > 0 :\n        c = c * 10\n        n1 = n1 // 10\n    return c\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 1\n    while (i <= n):\n        if (n//(10**i)) % 10 == 0:\n            return i\n        i+=1\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    n = int(input(\"Enter number : \"))\n    res = n % 10\n    return res\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    result = 0\n    while (n > 0) :\n        result = n % 10\n        n = n // 10\n    return result\n    \nif __name__ == '__main__':\n    print(first_Digit(12345))\n    print(first_Digit(344))\n    print(first_Digit(56))\n    print(first_Digit(1234))\n    print(first_Digit(112)"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    return s[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n>=10) :\n        return (n%10)\n    else :\n        return (n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for n in list:\n        if (n%2):\n            odd.append(n)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new = []\n    for i in range(0,len(list)):\n        if list[i]%2 == 1:\n            new.append(list[i])\n    return new\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for x in range(len(list)):\n        if list[x]%2!= 0:\n            odds.append(list[x])\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for x in list:\n        if x % 2 == 0:\n            odd_list.append(x)\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first = 0\n    second = 0\n    for i in range(1,n+1) :\n        first = first + i**3\n    for i in range(1,n+1) :\n        second = second + i**2\n    return second - first\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    sum1 = 0\n    for i in range(n):\n        sum1 += i\n    return sum - sum1\n    \ndef sum_of_square(n) :  \n    '''\n    Write a python function to find the sum of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the squares of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_square(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the cubes of the squares of the first n natural numbers\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef sum_of_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube(n) :  \n    '''\n    Write a python function to find the sum of the cubes of the cubes of the cubes o"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code goes here\n    # n=int(input(\"Enter the number\"))\n    x=0\n    for i in range(n+1):\n        x=x+(i**3)\n    y=0\n    for i in range(n+1):\n        y=y+(i)\n    z=x-y\n    print(z)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    print(sum)\n    sum2 = 0\n    for i in range(1,n+1):\n        sum2 = sum2 + i\n    print(sum2)\n    print(sum-sum2)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n) :\n        sum_cube = 0\n        for i in range(n) :\n            sum_cube += (i + 1) ** 3\n        return sum_cube\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #defining the fuction\n    def difference_fucntion(n):\n        #defining the variable\n        s = 0\n        #iterating for the times of the natural numbers\n        for i in range(1,n+1):\n            #finding the sum of cubes of the natural numbers\n            a = i*i*i\n            #finding the sum of the natural numbers\n            b = i\n            #finding the difference between the sum of cubes of the natural numbers and the sum of the natural numbers\n            difference = a - b\n            #storing the difference in the variable\n            s = s + difference\n        #returning the difference\n        return s\n    #calling the function\n    print(difference_fucntion(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num=int(input(\"enter the number\"))\n    num_list=[]\n    for i in range(1,num+1):\n        num_list.append(i)\n    sum_list=sum(num_list)\n    total_sum=0\n    for i in num_list:\n        total_sum+=i**3\n    total_sum=total_sum**(1/3)\n    return total_sum-sum_list\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    def cube(x):\n        return x**3\n    sum_1=0\n    sum_2=0\n    for i in range(n+1):\n        sum_1=sum_1+i\n    for j in range(n+1):\n        sum_2=sum_2+cube(j)\n    return sum_1-sum_2\nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c += i**3\n    print(c)\n    n = 0\n    for i in range(1,n+1):\n        n += i\n    print(n)\n    print(n**3-c)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (difference(n-1) + (n * (n + 1) * (2 * n + 1)) / 6)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    count=0\n    for i in range(0,N):\n        if ((A[i] ==0) & (A[i+1] ==1)):\n            count=count+1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    result = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            result = result + (A[i]^A[j])\n    return result\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N-1):\n        if(A[i] ^ A[i+1]) :\n            return True\n    return False\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j] == 1):\n                count = count + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if ((A[i] + A[j]) & 1) :\n                count += 1\n    return count\n        \ndef FindOddPair(arr, n) : \n    \n    count = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            if ((arr[i] + arr[j]) & 1) :\n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) : \n        for j in range(i+1,N+1) : \n            if (A[i] ^ A[j])%2 == 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    if N % 2!= 0:\n        return count\n    for i in range(N):\n        if (A[i] & 1) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = set(A)\n    count = 0\n    for i in range(N) : \n        if i in A :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(N-1) : \n        if A[i] ^ A[i+1] == 1 : \n            res += 1\n    return res\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    i = 0\n    while i < N :\n        if A[i] % 2!= 0 :\n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.islower():\n        return string.upper()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    a_string = list(string)\n    for i in range(len(a_string)):\n        if a_string[i].isupper():\n            a_string[i] = a_string[i].lower()\n        else:\n            a_string[i] = a_string[i].upper()\n    return ''.join(a_string)\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    assert type(string) is str, 'Type Error'\n    assert len(string)!= 0, 'Length Error'\n    return string.swapcase()\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.swapcase())\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if(type(string) == str):\n        return string.swapcase()\n    else:\n        raise TypeError(\"input should be a string\")\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # num1, num2 = int(n1), int(n2)\n    # sum = 0\n    # for i in range(len(str(num1))):\n    #     x = int(str(num1)[i])\n    #     y = int(str(num2)[i])\n    #     sum += abs(x-y)\n    # return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if(n1==n2):\n        return 0\n    n1 = str(n1)\n    n2 = str(n2)\n    sum = 0\n    for i in range(len(n1)):\n        if(n1[i]!=n2[i]):\n            sum += (int(n1[i])-int(n2[i]))**2\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    # convert to list of digits\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    \n    # iterate through each digit\n    for i in range(len(n1_digits)):\n        digit1 = n1_digits[i]\n        digit2 = n2_digits[i]\n        # calculate difference\n        difference = int(digit1) - int(digit2)\n        result += difference\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_digit_difference = 0\n    while n1!= 0:\n        sum_of_digit_difference += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return sum_of_digit_difference\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    return sum([(abs(n1-n2)//9) for i in range(9)])\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the value of the digit at the ith position\n    # 1 digit = base 10\n    # 2 digits = base 2\n    # 3 digits = base 8\n    # 4 digits = base 16\n    # 5 digits = base 10 + base 10\n    # 6 digits = base 2 + base 10\n    # 7 digits = base 8 + base 10\n    # 8 digits = base 16 + base 10\n    # 9 digits = base 10 + base 2\n    # 10 digits = base 10 + base 8\n    # 11 digits = base 10 + base 16\n    # 12 digits = base 2 + base 8\n    # 13 digits = base 8 + base 16\n    # 14 digits = base 16 + base 2\n    # 15 digits = base 10 + base 10 + base 8\n    # 16 digits = base 10 + base 8 + base 16\n    # 17 digits = base 10 + base 10 + base 10 + base 8\n    # 18 digits = base 10 + base 10 + base 16 + base 8\n    # 19 digits = base 10 + base 8 + base 10 + base 16\n    # 20 digits = base 10 + base 16 + base 8 + base 10\n    # 21 digits = base 2 + base 2 + base 2 + base 8\n    # 22 digits = base 8 + base 2 + base 8 + base 2\n    # 23 digits = base 16 + base 2 + base 8 + base 8\n    # 24 digits = base 16 + base 8 + base 8 + base 2\n    # 25 digits = base 8 + base 8 + base 16 + base 8\n    # 26 digits = base 16 + base 16 + base 8 + base 8\n    # 27 digits = base 16 + base 16 + base 8 + base 8\n    # 28 digits = base 16 + base 16 + base 8 + base 8\n    # 29 digits = base 16 + base 16 + base 8 + base 8\n    # 30 digits = base 16 + base 16 + base 8 + base 8\n    # 31 digits = base 8 + base 8 + base 8 + base 8\n    # 32 digits = base 8 + base 8 + base 8 + base 8\n    # 33 digits = base 8 + base 8 + base 8 + base 8\n    # 34 digits = base 8 + base 8 + base 8 + base 8\n    # 35 digits = base 8 + base 8 + base 8 + base 8\n    # 36 digits = base 8 + base 8 + base 8 + base 8\n    # 37 digits = base 8 + base 8 + base 8 + base 8\n    # 38 digits = base 8 + base 8 + base 8 + base 8\n    # 39 digits = base 8 + base 8 + base 8 + base 8\n    # 40 digits = base 8 + base 8 + base 8 + base 8\n    # 41 digits = base 8 + base 8 + base 8 + base 8\n    # 42 digits = base 8 + base 8 + base 8 + base 8\n    # 43 digits = base 8 + base 8 + base 8 + base 8\n    # 44 digits = base 8 + base 8 + base 8 + base 8\n    # 45 digits = base 8 + base 8 + base 8 + base 8\n    # 46 digits = base 8 + base 8 + base 8 + base 8\n    # 47 digits = base 8 + base 8 + base 8 + base 8\n    # 48 digits = base 8 + base 8 + base 8 + base 8\n    # 49 digits = base 8 + base 8 + base 8 + base 8\n    # 50 digits = base 8 + base 8 + base 8 + base 8\n    # 51 digits = base 8 + base 8 + base 8 + base 8\n    # 52 digits = base 8 + base 8 + base 8 + base 8\n    # 53 digits = base 8 + base 8 + base 8 + base 8\n    # 54 digits = base 8 + base 8 + base 8 + base 8\n    # 55 digits = base 8 + base 8 + base 8 + base 8\n    # 56 digits = base 8 + base 8 + base 8 + base 8\n    # 57 digits = base 8 + base 8 + base 8 + base 8\n    # 58 digits = base 8 + base 8 + base 8 + base 8\n    # 59 digits = base 8 + base 8 + base 8 + base 8\n    # 60 digits = base 8 + base 8 + base 8 + base 8\n    # 61 digits = base 8 + base 8 + base 8 + base 8\n    # 62 digits = base 8 + base 8 + base 8 + base 8\n    # 63 digits = base 8 + base 8 + base 8 + base 8\n    # 64 digits = base 8 + base 8 + base 8 + base 8\n    # 65 digits = base 8 + base 8 + base 8 + base 8\n    # 66 digits = base 8 + base 8 + base 8 + base 8\n    # 67 digits = base 8 + base 8 + base 8 + base 8\n    # 68 digits = base 8 + base 8 + base 8 + base 8\n    # 69 digits = base 8 + base 8 + base 8 + base 8\n    # 70 digits = base 8 + base 8 + base 8 + base 8\n    # 71 digits = base 8 + base 8 + base 8 + base 8\n    # 72 digits = base 8 + base 8 + base 8 + base 8\n    # 73 digits = base 8 + base 8 + base 8 + base 8\n    # 74 digits = base 8 + base 8 + base 8 + base 8\n    # 75 digits = base 8 + base 8 + base 8 + base 8\n    # 76 digits = base 8 + base 8 + base 8 + base 8\n    # 77 digits = base 8 + base 8 + base 8 + base 8\n    # 78 digits = base 8 + base 8 + base 8 + base 8\n    # 79 digits = base 8 + base 8 + base 8 + base 8\n    # 80 digits = base 8 + base 8 + base 8 + base 8\n    # 81 digits = base 8 + base 8 + base 8 + base 8\n    # 82 digits = base 8 + base 8 + base 8 + base 8\n    # 83 digits = base 8 + base 8 + base 8 + base 8\n    # 84 digits = base 8 + base 8 + base 8 + base 8\n    # 85 digits = base 8 + base 8 + base 8 + base 8\n    # 86 digits = base 8 + base 8 + base 8 + base 8\n    # 87 digits = base 8 + base 8 + base 8 + base 8\n    # 88 digits = base 8 + base 8 + base 8 + base 8\n    # 89 digits = base 8 + base 8 + base 8 + base 8\n    # 90 digits = base 8 + base 8 + base 8 + base 8\n    # 91 digits = base 8 + base 8 + base 8 + base 8\n    # 92 digits = base 8 + base 8 + base 8 + base 8\n    # 93 digits = base 8 + base 8 + base 8 + base 8\n    # 94 digits = base 8 + base 8 + base 8 + base 8\n    # 95 digits = base 8 + base 8 + base 8 + base 8\n    # 96 digits = base 8 + base 8 + base 8 + base 8\n    # 97 digits = base 8 + base 8 + base 8 + base 8\n    # 98 digits = base 8 + base 8 + base 8 + base 8\n    # 99 digits = base 8 + base 8 + base 8 + base 8\n    # 100 digits = base 8 + base 8 + base 8 + base 8\n    # 101 digits = base 8 + base 8 + base 8 + base 8\n    # 102 digits = base 8 + base 8 + base 8 + base 8\n    # 103 digits = base 8 + base 8 + base 8 + base 8\n    # 104 digits = base 8 + base 8 + base 8 + base 8\n    # 105 digits = base 8 + base 8 + base 8 + base 8\n    # 106 digits = base 8 + base 8 + base 8 + base 8\n    # 107 digits = base 8 + base 8 + base 8 + base 8\n    # 108 digits = base 8 + base 8 + base 8 + base 8\n    # 109 digits = base 8 + base 8 + base 8 + base 8\n    # 110 digits = base 8 + base 8 + base 8 + base 8\n    # 111 digits = base 8 + base 8 + base 8 + base 8\n    # 112 digits = base 8 + base 8 + base 8 + base 8\n    # 113 digits = base 8 + base 8 + base 8 + base 8\n    # 114 digits = base 8 + base 8 + base 8 + base 8\n    # 115 digits = base 8 + base 8 + base 8 + base 8\n    # 116 digits = base 8 + base 8 + base 8 + base 8\n    # 117 digits = base 8 + base 8 + base 8 + base 8\n    # 118 digits = base 8 + base 8 + base 8 + base 8\n    # 119 digits = base 8 + base 8 + base 8 + base 8\n    # 120 digits = base 8 + base 8 + base 8 + base 8\n    # 121 digits = base 8 + base 8 + base 8 + base 8\n    # 122 digits = base 8 + base 8 + base 8 + base 8\n    # 123 digits = base 8 + base 8 + base 8 + base 8\n    "
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    else:\n        sum_of_digits = 0\n        while n1!= 0 or n2!= 0:\n            s1 = n1%10\n            s2 = n2%10\n            sum_of_digits += abs(s1-s2)\n            n1 = int(n1/10)\n            n2 = int(n2/10)\n        return sum_of_digits\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert isinstance(n1, int)\n    assert isinstance(n2, int)\n    assert n1 < n2\n    d1 = str(n1)\n    d2 = str(n2)\n    assert len(d1) == len(d2)\n    s = 0\n    for i in range(len(d1)):\n        s += abs(int(d1[i]) - int(d2[i]))\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_diff = 0\n    for i in range(0, len(str(n1))):\n        if n1>n2:\n            sum_of_diff = sum_of_diff + abs(n1 - n2)\n        else:\n            sum_of_diff = sum_of_diff + abs(n2 - n1)\n    return sum_of_diff\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            max_sum = max(max_sum, sum(a[i:j+1]))\n    return max_sum\n    \nif __name__ == \"__main__\":\n    a = [-1, -1, -1, -1, -1, -1, -1, -1]\n    size = len(a)\n    print(\"maximum subarray sum is \", max_sub_array_sum(a, size))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size-1):\n        s = 0\n        for j in range(i, size):\n            s += a[j]\n            if s > max_sum:\n                max_sum = s\n    print(max_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_idx = 0\n    for i in range(1,size):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            max_idx = i\n    print(max_sum)\n    print(max_idx)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    running_sum = 0\n    for i in range(size):\n        running_sum += a[i]\n        if running_sum > max_sum:\n            max_sum = running_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Init\n    max_sum = float('-inf')\n    current_sum = float('-inf')\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Special case\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            sum_val = sum(a[i:j+1])\n            if sum_val > max_sum:\n                max_sum = sum_val\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = float('-inf')\n    s = 0\n    for i in range(0, size):\n        s += a[i]\n        if s < 0:\n            s = 0\n        if s > global_max:\n            global_max = s\n    return global_max\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_list_max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = current_sum + a[i]\n        if current_sum > sub_list_max_sum:\n            sub_list_max_sum = current_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        sum_sublist = 0\n        for j in range(i, size):\n            sum_sublist += a[j]\n            if sum_sublist > max_sum:\n                max_sum = sum_sublist\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for test_tup1_elem in test_tup1:\n        if test_tup2.count(test_tup1_elem) > 0:\n            if test_tup1_elem not in union_list:\n                union_list.append(test_tup1_elem)\n    \n    for test_tup2_elem in test_tup2:\n        if test_tup1.count(test_tup2_elem) > 0:\n            if test_tup2_elem not in union_list:\n                union_list.append(test_tup2_elem)\n    \n    return sorted(union_list)\n    \ndef union_elements_recursion(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 == [] or test_tup2 == []:\n        return []\n    if test_tup1[0] == test_tup2[0]:\n        return union_elements_recursion(test_tup1[1:], test_tup2[1:]) + [test_tup1[0]]\n    else:\n        return union_elements_recursion(test_tup1, test_tup2[1:]) + [test_tup2[0]]\n    \ndef main():\n    # test_tup1 = (1, 2, 5, 7, 9, 10, 13, 15)\n    # test_tup2 = (1, 2, 5, 13, 14, 15, 19)\n    # print union_elements(test_tup1, test_tup2)\n    test_tup1 = (1, 2, 5, 7, 9, 10, 13, 15)\n    test_tup2 = (1, 2, 5, 13, 14, 15, 19)\n    print union_elements_recursion(test_tup1, test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = test_tup1 + test_tup2\n    return sorted(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    u1 = set(test_tup1)\n    u2 = set(test_tup2)\n    \n    u3 = u1 | u2\n    u3 = sorted(u3)\n    \n    return tuple(u3)\n    \ntest = union_elements((1,2,3),(4,5,6))\nprint(test)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for elem in test_tup1:\n        if elem not in union_tup:\n            union_tup.append(elem)\n    for elem in test_tup2:\n        if elem not in union_tup:\n            union_tup.append(elem)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    for i in range(len(test_tup1)):\n        union_tup += test_tup1[i]\n    for i in range(len(test_tup2)):\n        union_tup += test_tup2[i]\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    return (set(test_tup1 + test_tup2)).union(set(test_tup1))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    else:\n        union = []\n        if test_tup1[0] < test_tup2[0]:\n            union.append(test_tup1[0])\n            union.append(test_tup2[0])\n            union.sort()\n            return union\n        else:\n            union.append(test_tup2[0])\n            union.append(test_tup1[0])\n            union.sort()\n            return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return (list(tup1.union(tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # YOUR CODE HERE\n    return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max = 0\n    length = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            length = 1\n        elif len(i) == max:\n            length += 1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_list=[]\n    for i in range(len(lst)):\n        length_list.append(len(lst[i]))\n    \n    return max(length_list)\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max = 0\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) + len(lst[j]) > Max:\n                Max = len(lst[i]) + len(lst[j])\n    return Max\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    x=0\n    count=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j]) > x:\n                x=len(lst[i:j])\n                count=1\n            elif len(lst[i:j]) == x:\n                count+=1\n    if count > 1:\n        print('There are several sublists with maximum length.')\n    else:\n        print('There is only one sublist with maximum length.')\n    return x\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = []\n    i = 0\n    while i <= len(lst)-2:\n        j = i + 1\n        while j <= len(lst)-1:\n            if len(lst[i:j]) > len(maxi):\n                maxi = lst[i:j]\n            j += 1\n        i += 1\n    print(maxi)\n    return maxi\n    \nFind_Max_Length([1,2,3,4,5,6,7,8,9,10])"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict_l = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'0':0}\n    dict_l1 = {}\n    for i in range(len(lst)):\n        dict_l[lst[i]] += 1\n        if lst[i] == '0':\n            dict_l1[lst[i]] = dict_l[lst[i]]\n    \n    max_len = max(dict_l1.values())\n    max_list = []\n    for i in range(len(lst)):\n        if dict_l[lst[i]] == max_len:\n            max_list.append(lst[i])\n    print(\"Maximum length of sublist is:\", max_len)\n    print(\"Longest sublist is:\", max_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > count and len(lst[j]) > count:\n                count = len(lst[i])\n    return count\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=1\n    for i in range(0,len(lst)):\n        if len(lst[i])>max:\n            max=len(lst[i])\n    return max\n    \n    \n    \ndef Find_Max_Length_optimised(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_count=0\n    for i in lst:\n        count=1\n        for j in range(1,len(i)):\n            if i[j]==i[j-1]:\n                count+=1\n            else:\n                break\n        if count>max_count:\n            max_count=count\n    return max_count\n    \ndef find_number_of_occurences(lst, target):\n    count = 0\n    for item in lst:\n        if item == target:\n            count += 1\n    return count\n            \n            \n    \ndef find_number_of_occurences_optimised(lst, target):\n    count = 0\n    for item in lst:\n        if item == target:\n            count += 1\n            \n    return count\n    \ndef find_number_of_occurences_optimised(lst, target):\n    count = 0\n    for i in range(len(lst)):\n        if target == lst[i]:\n            count += 1\n    return count\n    \ndef find_number_of_occurences_optimised2(lst, target):\n    count = 0\n    for i in range(len(lst)):\n        if target == lst[i]:\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef Find_Max_List_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(0,len(lst)):\n        if len(lst[i])>count:\n            count=len(lst[i])\n    return count\n    \n    \ndef Find_Max_List_Length_optimised(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in lst:\n        if len(i)>count:\n            count=len(i)\n    return count\n    \n    \n    \ndef main():\n    lst = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8]]\n    print(\"\\nLength of the longest sublists: \",Find_Max_Length(lst))\n    print(\"\\nLength of the longest sublists: \",Find_Max_Length_optimised(lst))\n    print(\"\\nNumber of occurences of 4: \",find_number_of_occurences(lst,4))\n    print(\"\\nNumber of occurences of 4: \",find_number_of_occurences_optimised(lst,4))\n    print(\"\\nNumber of occurences of 4: \",find_number_of_occurences_optimised2(lst,4))\n    print(\"\\nLength of the longest sublists: \",Find_Max_List_Length(lst))\n    print(\"\\nLength of the longest sublists: \",Find_Max_List_Length_optimised(lst))\n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # list of sublists\n    sublists = []\n    sub_list = []\n    max_length = 0\n    # append the sublists to the sublists list\n    for i in range(len(lst)):\n        sub_list.append(lst[i])\n        if len(sub_list) == 1:\n            sublists.append(sub_list)\n        elif sub_list[-1] == lst[i]:\n            sub_list.pop()\n        else:\n            sub_list.append(lst[i])\n    # print(sublists)\n    for i in range(len(sublists)):\n        if len(sublists[i]) > max_length:\n            max_length = len(sublists[i])\n    print(max_length)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if length<len(lst[i]+lst[j]):\n                length=len(lst[i]+lst[j])\n    return length\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text is None:\n        return None\n    text = text.replace('\"', '').strip()\n    return re.findall(r'\"(.+?)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #return re.findall('\"[^\"]+\"', text)\n    return re.findall('\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    quotes = re.findall(r\"[\\\"\u201c\u201d](.*)[\\\"\u201c\u201d]\", text)\n    return [i for i in quotes if len(i)>0]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"','')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r\"\\\".*\\\"|\\'|\\\"|\\s\", text)\n    values = \" \".join(values)\n    values = values.split(\" \")\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('[\\w+\\s]+[,\\.]', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # your code here\n    start_pos = 0\n    start_quote = False\n    end_quote = False\n    str_arr = []\n    while True:\n        quote_pos = text.find('\"',start_pos)\n        end_quote_pos = text.find('\"',quote_pos+1)\n        if quote_pos == -1 or end_quote_pos == -1:\n            break\n        str_arr.append(text[start_pos+1:quote_pos])\n        start_pos = end_quote_pos+1\n    return str_arr\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values=text.split('\"')[1:]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string=text.split('\\\"')\n    a=[]\n    for i in range(len(string)):\n        if i%2==0:\n            a.append(string[i])\n    return a\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"\\\"(.*?)\\\"\")\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from itertools import combinations as com\n    count = 0\n    for i in com(arr,2):\n        if i[0]!= i[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                res += 1\n    return res\nif __name__ == '__main__':\n    arr = [2,1,3,4]\n    n = len(arr)\n    print(count_Pairs(arr,n)"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n                \n    return count\n    \n    \n    \n    "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if n > 0:\n        for i in range(n):\n            for j in range(i):\n                if arr[i] == arr[j]:\n                    count += 1\n    else:\n        return print(\"Invalid input\")\n    print(\"Number of possible unordered pairs with first and second element unequal: \", count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count +=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                c+=1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\nprint(split('apple'))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\nprint(split('xyz'))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n!= 0:\n        result += n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # just an example \n    # the general method of the below code is \n    # (i) if n is negative, return 0\n    # (ii) return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Invalid input')\n    return sum(map(int, list(str(n))))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n *= -1\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n = n // 10\n    return sum(digits)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # solution from KK\n    n = str(n)\n    s = 0\n    for char in n:\n        s += int(char)\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>=list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1.sort()\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if (list1[i] > list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n        else:\n            return True\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1 = list1\n    list1.sort()\n    if len(list1) == len(set(list1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i]<=list1[j]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # create a new list to compare the original list\n    # with\n    list2 = list1[:]\n    for i in range(len(list2)-1):\n        if list2[i] > list2[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == list(range(len(list1))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lists = []\n    for i in range(length):\n        lists.append({})\n    return lists\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0,length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    \n    for i in range(0,length):\n        empty_list.append({})\n    \n    return empty_list\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # code goes here\n    new_list = []\n    for i in list1:\n        i.sort()\n        new_list.append(i)\n    return new_list\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # each sublist must be sorted in the order a, b, c,...\n    list1.sort(key=lambda x: x[0])\n    list1.sort(key=lambda x: x[1])\n    list1.sort(key=lambda x: x[2])\n    \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = list1\n    for i in range(0, len(sub_lists)):\n        temp = []\n        for j in range(0, len(sub_lists[i])):\n            temp.append(sub_lists[i][j].sort())\n        sub_lists[i] = temp\n    return sub_lists\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(list1)\n    for i in range(length):\n        for j in range(length):\n            list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # print(list1)\n    # print(\"Input list of lists:\",list1)\n    # print(\"Input sublist's length:\",len(list1))\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code below and remove the pass statement below\n    for list in list1:\n        list.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            sub_list.append(list1[i][j])\n    sub_list.sort()\n    return sub_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(n-1):\n            if (len(list1[j])<len(list1[j+1])):\n                temp = list1[j]\n                list1[j]= list1[j+1]\n                list1[j+1]= temp\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_numbers = []\n    for num in nums:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen_elems = set()\n    unique_nums = []\n    for num in nums:\n        if num in seen_elems:\n            continue\n        else:\n            seen_elems.add(num)\n            unique_nums.append(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    seen = set()\n    for i in nums:\n        if i not in seen:\n            seen.add(i)\n            result.append(i)\n    print(result)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n    return list(seen)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize a set to store unique numbers\n    unique_nums = set()\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for i in nums:\n        if i not in seen:\n            seen.add(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # for list in nums:\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums.remove(nums[0])\n    #     nums"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # define a set to contain all unique numbers\n    unique_numbers = set()\n    \n    # define a set to contain all duplicate numbers\n    duplicate_numbers = set()\n    \n    # iterate through each element in nums\n    for num in nums:\n        # if num is not in unique_numbers\n        if num not in unique_numbers:\n            # add num to unique_numbers\n            unique_numbers.add(num)\n        else:\n            # add num to duplicate_numbers\n            duplicate_numbers.add(num)\n    \n    return unique_numbers, duplicate_numbers\n    "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # lists = []\n    # for i in list_data:\n    #     if i not in lists:\n    #         lists.append(i)\n    # print(lists)\n    # list_data = list(list_data)\n    # product = 1\n    # for i in list_data:\n    #     product = product * i\n    # print(product)\n    return reduce(lambda x, y: x * y, set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    prod_list = []\n    for num in unique_list:\n        prod_list.append(num * unique_list.count(num))\n    return prod_list\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    i=1\n    unique_numbers=[]\n    while i<=len(list_data):\n        if list_data.count(list_data[i]) == 1:\n            unique_numbers.append(list_data[i])\n        i+=1\n    product=1\n    for j in unique_numbers:\n        product=product*j\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # The idea is to sort the list and store unique elements in a list. \n    # Then multiply the list elements and return the result.\n    \n    # Time Complexity: O(n log n)\n    # Space Complexity: O(n)\n    \n    # Using sort method:\n    sorted_list = sorted(list_data)\n    unique_list = []\n    \n    for i in range(len(sorted_list)):\n        if i == 0 or sorted_list[i]!= sorted_list[i-1]:\n            unique_list.append(sorted_list[i])\n    \n    result = 1\n    for x in range(len(unique_list)):\n        result *= unique_list[x]\n    \n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in list_data:\n        if i not in lst:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = 0\n    set_data = set(list_data)\n    if len(set_data) > 1:\n        for i in set_data:\n            temp = temp * i\n        return temp\n    else:\n        return list_data[0]\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp_list=[]\n    unique_numbers=[]\n    for i in list_data:\n        if i not in temp_list:\n            temp_list.append(i)\n        else:\n            unique_numbers.append(i)\n    product_of_unique_numbers=1\n    for j in unique_numbers:\n        product_of_unique_numbers*=j\n    return product_of_unique_numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data.sort()\n    unique_data = set(list_data)\n    product = 1\n    for data in unique_data:\n        product = product * data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    if len(list_data) < 1:\n        return -1\n    \n    dic_temp = {}\n    result = 1\n    for item in list_data:\n        if item not in dic_temp:\n            dic_temp[item] = 1\n        else:\n            dic_temp[item] += 1\n    \n    for item in dic_temp:\n        if dic_temp[item] == 1:\n            result *= item\n    \n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a dictionary\n    # get the number of keys\n    # if key exists, add 1\n    # if key does not exist, create the key with value 1\n    # create a new dictionary with keys being the number of unique elements and values being their product\n    # print the keys and their product\n    d = {}\n    #create a set\n    unique_list = set(list_data)\n    # for loop to populate the dictionary with product\n    for element in unique_list:\n        if element in d.keys():\n            d[element] = d[element] + 1\n        else:\n            d[element] = 1\n    return d\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r*2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = pi*r**2*h+2*pi*r*h\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacelength = 2 * pi * r * h + 2 * pi * r * 2\n    return surfacelength\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a = math.pi*r**2\n    b = 2*math.pi*r*h\n    c = math.pi*r**2\n    d = 2*math.pi*r*h\n    f = (a+b+c+d)/2\n    return f\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*pi*r*h\n    return s\n    \n    \ndef distance(x1,x2,y1,y2):\n    '''\n    Write a function to find distance between two points (x1,y1) and (x2,y2)\n    '''\n    d=sqrt((x1-x2)**2+(y1-y2)**2)\n    return d\n    \n    \ndef perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a triangle\n    '''\n    s=(a+b+sqrt(a**2+b**2))/2\n    return s\n    \n    \ndef surfacearea(a,b,h):\n    '''\n    Write a function to find the surface area of a traingle\n    '''\n    s=0.5*(a*b+a*h+b*h)\n    return s\n    \n    \ndef volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder\n    '''\n    s=pi*a*b\n    return s\n    \n    \ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram\n    '''\n    s=0.5*a*b\n    return s\n    \n    \ndef is_power(num,base):\n    '''\n    Write a function to check if a number is a power of an integer\n    '''\n    b=int(base)\n    r=num%b\n    if r==0:\n        return True\n    else:\n        return False\n    \n    \ndef is_power_3(num):\n    '''\n    Write a function to check if a number is a power of an integer\n    '''\n    if num%3==0:\n        return True\n    else:\n        return False\n    \n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is a prime number\n    '''\n    a=0\n    if num==0 or num==1:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i==0:\n                a=1\n        if a==0:\n            return True\n        else:\n            return False\n    \n    \ndef is_prime_2(num):\n    '''\n    Write a function to check if a number is a prime number\n    '''\n    a=0\n    if num==0 or num==1:\n        return False\n    elif num==2:\n        return True\n    else:\n        for i in range(2,num):\n            if num%i==0:\n                a=1\n        if a==0:\n            return True\n        else:\n            return False\n    \n    \ndef find_consecutive_prime_sum(n):\n    '''\n    Write a function to find the sum of consecutive prime numbers\n    '''\n    s=0\n    i=1\n    a=0\n    while a!=n:\n        s+=i\n        if is_prime_2(i):\n            a+=1\n        i+=1\n    return s\n    \n    \ndef find_consecutive_prime_sum_2(n):\n    '''\n    Write a function to find the sum of consecutive prime numbers\n    '''\n    s=0\n    i=1\n    a=0\n    while a!=n:\n        s+=i\n        if is_prime(i):\n            a+=1\n        i+=1\n    return s\n    \n    \ndef find_consecutive_prime_sum_3(n):\n    '''\n    Write a function to find the sum of consecutive prime numbers\n    '''\n    s=0\n    i=1\n    a=0\n    while a!=n:\n        s+=i\n        if is_prime_2(i):\n            a+=1\n        i+=1\n    return s\n    \n    \ndef find_consecutive_prime_sum_4(n):\n    '''\n    Write a function to find the sum of consecutive prime numbers\n    '''\n    a=0\n    i=1\n    s=0\n    while a!=n:\n        s+=i\n        if is_prime(i):\n            a+=1\n        i+=1\n    return s\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    string=string.lower()\n    string=string.replace(\" \",\"\")\n    x=len(string)\n    l=int(x/2)\n    z=string[:l]\n    y=string[l:]\n    if z==y[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_2(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    string=string.lower()\n    string=string.replace(\" \",\"\")\n    x=len(string)\n    l=int(x/2)\n    z=string[:l]\n    y=string[l:]\n    if z==y[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_3(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    string=string.lower()\n    string=string.replace(\" \",\"\")\n    x=len(string)\n    l=int(x/2)\n    z=string[:l]\n    y=string[l:]\n    if z==y[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_4(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    string=string.lower()\n    string=string.replace(\" \",\"\")\n    x=len(string)\n    l=int(x/2)\n    z=string[:l]\n    y=string[l:]\n    if z==y[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef find_characters(string,char):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    for i in string:\n        if i==char:\n            c+=1\n    return c\n    \n    \ndef find_characters_2(string,char):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    if string==\"\":\n        return 0\n    else:\n        for i in string:\n            if i==char:\n                c+=1\n    return c\n    \n    \ndef find_characters_3(string,char):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    for i in range(0,len(string)):\n        if string[i]==char:\n            c+=1\n    return c\n    \n    \ndef find_characters_4(string,char):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    for i in range(len(string)):\n        if string[i]==char:\n            c+=1\n    return c\n    \n    \ndef find_words(sentence,word):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    for i in range(len(sentence)):\n        if sentence[i]==word:\n            c+=1\n    return c\n    \n    \ndef find_words_2(sentence,word):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n    c=0\n    if sentence==\"\":\n        return 0\n    else:\n        for i in sentence:\n            if i==word:\n                c+=1\n    return c\n    \n    \ndef find_words_3(sentence,word):\n    '''\n    Write a function to find the number of times a character is in a string\n    '''\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r * h * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2*pi*r*h + 2*pi*r**2\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (pi*r**2)*2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Obtain surface area of a cylinder using the formula:\n    # surface area = PI * r^2 + 2 * PI * r * h\n    surfacearea = math.pi * (r ** 2) + 2 * math.pi * (r * h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    pi = pi * r**2\n    surface_area = pi * r * h\n    return surface_area\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:]==B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #code here\n    n,m = len(A), len(B)\n    if m > n:\n        return False\n    for i in range(n):\n        if B == A[i:m+i]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        for i in range(len(B)):\n            if A[i]!= B[i]:\n                return False\n    else:\n        return False\n    return True\n    \nprint(is_Sub_Array([3,4,5,7,9],[3,4,5,7]))\nprint(is_Sub_Array([5,7,8,9],[3,4,5,7]))\nprint(is_Sub_Array([5,7,8,9],[3,4,5]))\nprint(is_Sub_Array([3,4,5,7,8,9,10],[3,4,5,7]))\nprint(is_Sub_Array([3,4,5,7,8,9],[3,4,5]))\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #print(A,B)\n    #loop from start of A, check if element is present in B\n    for i in range(len(A)): \n        #print(A[i],B)\n        if A[i] in B:\n            #print(A[i],B)\n            #if present in B, loop from start of B, check if element is present in A \n            for j in range(len(B)):\n                if A[i] in B:\n                    #print(A[i],B)\n                    if A[i+j] in A:\n                        #print(A[i],B)\n                        #print(A[i+j],A)\n                        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def find(a,b):\n        if a == b:\n            return True\n        if len(a) < len(b):\n            return False\n        if b.startswith(a):\n            return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            for j in range(len(B)):\n                if A[i] == B[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Time complexity: O(m+n)\n    # Space complexity: O(1)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i]==B[j]:\n                if i>=j:\n                    return True\n    return False\n    \ndef sub_array_search(A,B,i,j):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)==0:\n        return 0\n    if len(B)==1:\n        if A[i]==B[0]:\n            return 1\n        else:\n            return 0\n    if A[i]==B[0]:\n        return 1+sub_array_search(A,B[1:],i+1,j)\n    else:\n        return 0+sub_array_search(A,B[1:],i,j)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Base condition: If both lists are empty\n    if(len(A) == 0 and len(B) == 0):\n        return True\n    if(len(B) == 0):\n        return False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(1,n+1):\n            fact = fact*i\n        return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # start with the variable'result' and assign the initial value\n    # to the variable 'n'\n    result = n\n    # loop through the'result' till the last digit of the factorial\n    # is found and store it in the variable 'lastDigit'\n    for i in range(1,len(str(result))):\n        result = result//10\n    #'result' is the variable 'lastDigit' and store it in the variable\n    # 'lastDigit'\n    lastDigit = result\n    # return the variable 'lastDigit'\n    return lastDigit\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # n=int(input(\"enter the number: \"))\n    # fact = 1\n    # while(n>0):\n    #     fact = fact*(n)\n    #     n=n-1\n    # print(\"the last digit of factorial is: \",fact)\n    # last = fact%10\n    # return last\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return -1\n    elif n==0 or n==1:\n        return n\n    else:\n        fact = 1\n        i = 1\n        while(i<=n):\n            fact = fact*i\n            i = i+1\n        return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return -1\n    else:\n        total = 1\n        while(n > 0):\n            total = total * n\n            n = n - 1\n        return total\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    ans = 1\n    while(n >= 1):\n        ans *= n\n        n -= 1\n    return ans%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0: \n        return -1\n    #convert input into string so that we can convert into int to use as base \n    n = str(n)\n    #print(n)\n    i = len(n)\n    #print(i)\n    count = 1\n    while i>1:\n        #print(i)\n        i = i - 1\n        count = count * int(n[i])\n        #print(count)\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        raise Exception(\"Sorry, factorial does not exist for negative numbers\") \n    if n < 10: \n        return 1\n    # Compute sum of (n-1)! * (i-1) \n    sum = 0 \n    i = 10\n    while i <= n: \n        sum += (n-1) * i\n        i *= 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact % 10\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    for i in range(len(list1)):\n        inter_list.append(list1[i])\n        inter_list.append(list2[i])\n        inter_list.append(list3[i])\n    return inter_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        final_list.append(list1[i])\n        final_list.append(list2[i])\n        final_list.append(list3[i])\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #Create the flat list\n    flattened_list = []\n    #Iterate thru each list\n    for i in range(len(list1)):\n        #Append the values into the flattened list\n        flattened_list.extend([list1[i], list2[i], list3[i]])\n    return flattened_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return (list1 + list2 + list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print(list1)\n    print(list2)\n    print(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new empty list\n    new_list = []\n    # loop through 3 lists in parallel\n    for i in range(len(list1)):\n        # add the items from the lists one after the other\n        new_list += (list1[i],list2[i],list3[i])\n    # return the result\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list3[i-len(list2)])\n    return list3\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_1 = test_tup1[0]\n    test_tup1_2 = test_tup1[1]\n    test_tup2_1 = test_tup2[0]\n    test_tup2_2 = test_tup2[1]\n    \n    if (test_tup1_1!= test_tup2_1):\n        return(test_tup1_1)\n    elif (test_tup1_2!= test_tup2_2):\n        return(test_tup1_2)\n    else:\n        return(None)\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = test_tup1\n    b = test_tup2\n    \n    m, n = len(a), len(b)\n    \n    if m!= n:\n        return None\n    \n    for i in range(m):\n        if a[i]!= b[i]:\n            return a[i]\n            \n    return None\n    "
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_values = list()\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_values.append(test_tup1[i])\n    return tuple(dissimilar_values)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(\"\\nFinding elements from the given tuples: \",test_tup1, \" and \", test_tup2)\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    print(\"\\nDissimilar elements are: \",dissimilar_elements)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    similar_pairs = []\n    dissimilar_pairs = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            similar_pairs.append((test_tup1[i], test_tup2[i]))\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1)):\n            if i!= j:\n                if test_tup1[i] == test_tup1[j]:\n                    dissimilar_pairs.append((test_tup1[i], test_tup2[i]))\n    return similar_pairs, dissimilar_pairs\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilars = list(set1.difference(set2))\n    return(dissimilars)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d = {}\n    for element in range(0, len(test_tup1)):\n        d[element] = test_tup1[element]\n    for element in range(0, len(test_tup2)):\n        d[element] = test_tup2[element]\n    diff_list = []\n    for elem in range(0, len(d)):\n        if d[elem]!= test_tup1[elem]:\n            diff_list.append(test_tup1[elem])\n        else:\n            continue\n    return diff_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_test1 = set(test_tup1)\n    set_test2 = set(test_tup2)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple): \n        if len(test_tuple) == 0:\n            return test_tuple\n        elif len(test_tuple) > 0: \n            try:\n                return even_ele(test_tuple[0], even_fnc) + even_fnc(test_tuple[1:])\n            except TypeError:\n                return even_ele(test_tuple[1:], even_fnc)\n    else:\n        return test_tuple \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple((even_fnc(i) for i in test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    temp_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            temp_tuple.append(i)\n    return tuple(temp_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)): \n        if i % 2 == 0: \n            result.append(even_fnc(test_tuple[i])) \n    return tuple(result) \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not test_tuple: \n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('Given tuple :', test_tuple)\n    for i in test_tuple:\n        if type(i) == type((1, 2, 3)):\n            test_tuple = even_ele(i, even_fnc)\n        else:\n            if even_fnc(i):\n                continue\n            else:\n                test_tuple = remove_even_ele(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple)): \n        if test_tuple[i][1] % 2 == 0: \n            new_tuple += (test_tuple[i],)\n    return even_fnc(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if even_fnc(i):\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == tuple:\n        for i in test_tuple:\n            if type(i) == tuple:\n                even_ele(i, even_fnc)\n            else:\n                if even_fnc(i):\n                    test_tuple = tuple(filter(lambda j: j!= i, test_tuple))\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for x in test_tuple:\n        if type(x)!= tuple:\n            if even_fnc(x):\n                test_tuple = test_tuple[test_tuple.index(x)]\n            else:\n                continue\n        else:\n            even_ele(x, even_fnc)\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*s\n    return area\nprint(surface_Area(5,5))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = 0.5 * b * s\n    return A\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (1/3)*(b*s)**2\n    print('The surface area of the square pyramid is', surface)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa=b*s*3\n    return(sa)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*(b+s*s)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*b) * (3/4)\n    print('The surface area of the pyramid is:',area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # a,b = int(a),int(b)\n    # height,base,area = s,b,0\n    # area = int(a*b*(s/2))\n    # print(area)\n    # return area\n    return int(s*(s+b)*0.5)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return (s * 2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)/4*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surf_area=s*b\n    return(surf_area)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    \n    if dict1 == {}:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 0\n    if num==1:\n        return 1\n    if num==2:\n        return 2\n    catalan_numbers = [0,1,2]\n    for i in range(2,num):\n        catalan_numbers.append(0)\n        for j in range(1,i):\n            catalan_numbers[i]+=catalan_numbers[i-1]*catalan_numbers[j-1]\n    return catalan_numbers[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    '''\n    If n is a even number, then n-1th catalan number is n/(n-1)th.\n    If n is odd, then n-1th catalan number is n/(n+1)th.\n    '''\n    '''\n    Catalan numbers can be defined as:\n    f(n)=n(n-1)/2\n    '''\n    '''\n    Solution:\n    f(n)=2n(2n-1)/(n+1)\n    '''\n    if (num <= 0) or (num > 4):\n        return None\n    else:\n        return (2*num*(num+1))/(num+2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if type(num) is not int:\n        raise TypeError('The number must be integer')\n    if num <= 0:\n        raise ValueError('The number must be bigger than 0')\n    \n    result = 1\n    for i in range(1,num):\n        result = result * (i+1)\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num_list = []\n    for i in range(1,num):\n        num_list.append(comb(num,i))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = 0\n    for i in range(1, num + 1):\n        res += catalan_number(i - 1) * catalan_number(num - i)\n    return res\n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1)*num\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if type(num) == int:\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        else:\n            result = 0\n            for i in range(2,num+1):\n                result += catalan_number(i-1)*catalan_number(num-i)\n            return result\n    else:\n        print(\"Sorry, wrong input\")\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (catalan_number(num-1)*(2*num-1))/((num-1)*(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n    for n in range(0, num+1):\n        result += (n * (2*n-1)) // 2\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_ly = r\"(ly)*\\b\"\n    adverbs_ly_re = re.compile(adverbs_ly)\n    return adverbs_ly_re.findall(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_endings_list = []\n    adverbs_endings_list = []\n    ly_endings_list = []\n    for i,word in enumerate(text.split(' ')):\n        if word[-1] == '.':\n            ly_endings_list.append(word)\n            if 'ly' in word:\n                adverbs_endings_list.append(i)\n                print(f\"{i} {word}\")\n    print(f\"The endings of each adverb are as follows: {ly_endings_list}\")\n    print(f\"The index of each adverb ending is as follows: {adverbs_endings_list}\")\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    #Define variables\n    pattern = '.*ly(.*)'\n    positions = []\n    for line in text.split('\\n'):\n        #Check if the line is of the form,\n        if re.match(pattern,line):\n            #Return the positions of the first adverb ending with ly\n            positions.append(re.findall('[0-9]+', line))\n    \n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # first, last, middle\n    x = re.finditer(r'[ly]', text)\n    print(list(x))\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"(ly)\"\n    result = re.findall(pattern, text, flags=re.IGNORECASE)\n    if result:\n        return result[0]\n    else:\n        return 0\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if re.search(r'ly', text):\n        adverbs = re.findall(r'(ly)+', text)\n        adverbs.append(text)\n        return adverbs\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Expected return values:\n    # (0, 'I am')\n    # (1, 'He is')\n    # (2, 'It is')\n    # (3, 'You are')\n    # (4, 'He is')\n    # (5, 'It is')\n    # (6, 'He is')\n    # (7, 'It is')\n    # (8, 'I am')\n    # (9, 'You are')\n    # (10, 'I am')\n    # (11, 'You are')\n    # (12, 'I am')\n    # (13, 'You are')\n    # (14, 'I am')\n    # (15, 'You are')\n    # (16, 'I am')\n    # (17, 'You are')\n    # (18, 'I am')\n    # (19, 'You are')\n    # (20, 'I am')\n    # (21, 'You are')\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # for i in range(len(text)):\n    #     if text[i] == 'ly':\n    #         yield (i, i+2)\n    \n    # for i in range(len(text)):\n    #     if text[i] == 'n\\'t':\n    #         yield (i, i+2)\n    return re.finditer(r'ly|n\\'t',text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # regex to find all the adverbs with ly ending\n    regex = r'\\bly\\s([\\w\\s]+?)ly\\b'\n    \n    # list to store the first adverb ending with ly and its positions in the string\n    first_adverb_ending_ly = []\n    \n    # matches = re.finditer(regex, text)\n    matches = re.finditer(regex, text)\n    \n    for match in matches:\n        first_adverb_ending_ly.append((match.group(), match.start()))\n        \n    return first_adverb_ending_ly\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n = int(n)\n    items.sort(key=lambda i: i[1],reverse=True)\n    return items[:n]\n    \ndef nth_smallest(items,n):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    n = int(n)\n    heapq.heapify(items)\n    for _ in range(n):\n        x = heapq.heappop(items)\n    return x\n    \ndef almost_increasing(items):\n    '''\n    Write a function to check if a sequence of items is in increasing order.\n    '''\n    for i in range(1,len(items)):\n        if items[i-1] >= items[i]:\n            return False\n    return True\n    \ndef tallest_rectangle(h):\n    '''\n    Write a function that returns the largest rectangle that can be built out of any\n    number of 1 x N and 0 x 1 arrays that can be arranged such that the height of the\n    rectangle is maximized.\n    '''\n    n = len(h)\n    # heights = list(map(lambda h: h[0], h))\n    # widths = list(map(lambda h: h[1], h))\n    heights = []\n    widths = []\n    for _ in range(n):\n        heights.append(h[_][0])\n        widths.append(h[_][1])\n    \n    heights.sort(reverse=True)\n    widths.sort(reverse=True)\n    \n    # sum_widths = sum(widths)\n    # print(sum_widths)\n    widths_index = 0\n    height = heights[0]\n    max_width = 0\n    while widths_index < n:\n        if widths[widths_index] > 0:\n            if max_width < height:\n                max_width = height\n            height = heights[widths_index]\n            widths_index += 1\n        else:\n            if max_width < height:\n                max_width = height\n            height += 1\n            widths_index += 1\n    if height > max_width:\n        return height\n    else:\n        return max_width\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an MxN matrix in-place such that each row is shifted\n    to the left by one, and each column is shifted up by one.\n    '''\n    if not matrix:\n        return matrix\n    num_of_rows = len(matrix)\n    num_of_columns = len(matrix[0])\n    \n    for i in range(num_of_columns):\n        for j in range(num_of_rows-1):\n            matrix[j][i],matrix[j+1][i] = matrix[j+1][i],matrix[j][i]\n    \n    return matrix\n    \ndef partition_array(array,low,high):\n    '''\n    Write a function to partition a given array around a given element,\n    such that all elements less than the element appears first,\n    all elements equal to the element appears second,\n    and all elements greater than the element appears after the element.\n    '''\n    # if not array:\n    #     return array\n    # if low > high:\n    #     return array\n    # mid = (low+high)//2\n    # left_array = partition_array(array,low,mid)\n    # right_array = partition_array(array,mid+1,high)\n    # return merge_partition_array(left_array,right_array)\n    \n    # def merge(left_array,right_array):\n    #     res = []\n    #     i = j = 0\n    #     while i < len(left_array) and j < len(right_array):\n    #         if left_array[i] < right_array[j]:\n    #             res.append(left_array[i])\n    #             i += 1\n    #         else:\n    #             res.append(right_array[j])\n    #             j += 1\n    #     res += left_array[i:]\n    #     res += right_array[j:]\n    #     return res\n    #     \n    # def merge_partition_array(left_array,right_array):\n    #     if not left_array or not right_array:\n    #         return left_array or right_array\n    #     mid = (low+high)//2\n    #     return merge(merge_partition_array(left_array,right_array),\n    #                     merge_partition_array(left_array[mid+1:],right_array[mid+1:]))\n    \n    # if not array:\n    #     return array\n    # low = 0\n    # high = len(array)-1\n    # while low <= high:\n    #     mid = (low+high)//2\n    #     if array[mid] < array[high]:\n    #         high = mid-1\n    #     elif array[mid] > array[high]:\n    #         low = mid+1\n    #     else:\n    #         high -= 1\n    # array[low],array[high] = array[high],array[low]\n    \n    # if array[mid] < array[mid+1]:\n    #     array = merge_partition_array(left_array,right_array)\n    # else:\n    #     array = merge_partition_array(left_array[:mid+1],right_array)\n    # return array\n    \n    # if not array:\n    #     return array\n    # if low > high:\n    #     return array\n    # mid = (low+high)//2\n    # left_array = partition_array(array,low,mid)\n    # right_array = partition_array(array,mid+1,high)\n    # return merge_partition_array(left_array,right_array)\n    \n    # def quick_sort(arr,low,high):\n    #     if low < high:\n    #         pivot = partition(arr,low,high)\n    #         quick_sort(arr,low,pivot-1)\n    #         quick_sort(arr,pivot+1,high)\n    \n    # def partition(arr,low,high):\n    #     i = low-1\n    #     pivot = arr[high]\n    #     for j in range(low,high):\n    #         if arr[j] <= pivot:\n    #             i += 1\n    #             arr[i],arr[j] = arr[j],arr[i]\n    #     arr[i+1],arr[high] = arr[high],arr[i+1]\n    #     return i+1\n    \n    # if not array:\n    #     return array\n    # low = 0\n    # high = len(array)-1\n    # quick_sort(array,low,high)\n    # return array\n    \n    # if not array:\n    #     return array\n    # low = 0\n    # high = len(array)-1\n    # if low < high:\n    #     pivot = partition(array,low,high)\n    #     quick_sort(array,low,pivot-1)\n    #     quick_sort(array,pivot+1,high)\n    # return array\n    \n    # def partition(arr,low,high):\n    #     i = low-1\n    #     pivot = arr[high]\n    #     for j in range(low,high):\n    #         if arr[j] <= pivot:\n    #             i += 1\n    #             arr[i],arr[j] = arr[j],arr[i]\n    #     arr[i+1],arr[high] = arr[high],arr[i+1]\n    #     return i+1\n    \n    # if not array:\n    #     return array\n    # low = 0\n    # high = len(array)-1\n    # if low < high:\n    #     pivot = partition(array,low,high)\n    "
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = []\n    for item in items:\n        expensive_items.append((item[1],item[0]))\n    expensive_items.sort()\n    expensive_items.reverse()\n    return expensive_items[:n]\n    \ndef length_of_longest_substring(string):\n    '''\n    Write a function to find the length of the longest substring with all distinct characters.\n    '''\n    if len(string) < 2:\n        return len(string)\n    elif len(string) == 2:\n        return 2 if string[0]!= string[1] else 1\n    max_len = 0\n    curr_max = 0\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            curr_max = i\n            break\n    for j in range(i + 1, len(string)):\n        if string[j] in string[i + 1:]:\n            curr_max = min(curr_max, j)\n    max_len = max(max_len, len(string[:curr_max + 1]))\n    for j in range(i + 1, len(string)):\n        if string[j] in string[curr_max + 1:]:\n            return max(max_len, len(string[:curr_max + 1]))\n    return max_len\n    \ndef two_sum_set(nums,target):\n    '''\n    Write a function to find whether a given set of numbers is a subset of a given set.\n    '''\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in nums:\n        if target - num in count:\n            if count[target - num] > 0:\n                return True\n            else:\n                return False\n    return False\n    \ndef next_greater(nums):\n    '''\n    Write a function to find the next greater element in an array.\n    '''\n    if not nums:\n        return\n    stk = []\n    n = len(nums)\n    for i in range(n - 1, -1, -1):\n        while stk and nums[stk[-1]] < nums[i]:\n            stk.pop()\n        stk.append(i)\n    return stk\n    \ndef double_char(string):\n    '''\n    Write a function that given a string, returns a new string consisting of each character followed\n    by the character again.\n    '''\n    if len(string) < 2:\n        return ''\n    return (string + string)[1:]\n    \ndef group_anagrams(items):\n    '''\n    Write a function that, given an array of strings, groups anagrams together.\n    '''\n    if not items:\n        return\n    groups = {}\n    for item in items:\n        if item in groups:\n            groups[item] += 1\n        else:\n            groups[item] = 1\n    # create an empty list\n    grouped = []\n    # loop through the list to get a pointer\n    for item in items:\n        # create a new dictionary to store the list\n        group = {}\n        # assign the anagram to each list\n        group[groups[item]] = item\n        # create an empty list\n        grouped.append(group)\n        # remove the item from the dictionary so that it doesn't get repeated\n        groups.pop(item)\n    return grouped\n    \ndef contains_duplicates(nums):\n    '''\n    Write a function that takes in a list and returns True if there is any element that appears\n    more than once.\n    '''\n    if len(nums) < 2:\n        return False\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n    \ndef subarray_sum(nums,target):\n    '''\n    Write a function that returns the start and end indices of the\n    subarray with the sum closest to the target.\n    '''\n    if not nums:\n        return None\n    s = 0\n    start = 0\n    end = 0\n    n = len(nums)\n    while end < n:\n        while end < n and s < target:\n            s += nums[end]\n            end += 1\n        while s > target:\n            s -= nums[start]\n            start += 1\n        if s == target:\n            return start,end\n    return None\n    \ndef triplets_with_sum(nums,target):\n    '''\n    Write a function that finds all the triplets in a list that sum to a given target.\n    '''\n    if not nums:\n        return\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n    \ndef find_first_n_positives(nums,target):\n    '''\n    Write a function that, given a sorted array of integers, counts the number of\n    integers that are greater than or equal to the target.\n    '''\n    if len(nums) < 1:\n        return 0\n    elif len(nums) == 1:\n        if nums[0] >= target:\n            return 1\n        return 0\n    elif len(nums) == 2:\n        if nums[0] >= target and nums[1] >= target:\n            return 2\n        if nums[0] >= target or nums[1] >= target:\n            return 1\n        return 0\n    else:\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] >= target:\n                count += 1\n            elif nums[i] >= nums[i - 1]:\n                count += 1\n            elif nums[i] >= nums[i + 1]:\n                count += 1\n        return count\n    \ndef rotate_array(nums, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    if k == 0:\n        return\n    n = len(nums)\n    k = k % n\n    if k == 0:\n        return nums\n    \n    # swap first and last element\n    temp = nums[0]\n    nums[0] = nums[-1]\n    nums[-1] = temp\n    \n    # rotate k elements\n    for i in range(k):\n        first = nums[0]\n        for j in range(len(nums) - 1):\n            nums[j] = nums[j + 1]\n        nums[-1] = first\n    return nums\n    \ndef contains_all_digits(nums):\n    '''\n    Write a function that takes in a non-empty array and returns true if the array contains\n    a 1-9 pandigital (i.e. 123456789) number.\n    '''\n    if not nums:\n        return False\n    n = len(nums)\n    for i in range(1,10):\n        count = 0\n        for num in nums:\n            if num == i:\n                count += 1\n        if count == n:\n            return True\n    return False\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes in a non-negative integer and returns True if it is\n    a palindrome, and False otherwise.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    s = ''\n    while n > 0:\n        s += str(n % 10)\n        n //= 10\n    s = s[::-1]\n    return s == s\n    \ndef is_palindrome_modified(n):\n    '''\n    Write a function that takes in a non-negative integer and returns True if it is\n    a palindrome, and False otherwise.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    def is_palindrome"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # define a heap to keep track of the most expensive items\n    h = []\n    \n    # convert the items to a heap\n    for (price, name) in items:\n        heapq.heappush(h, (price, name))\n        \n    # return the top n items from the heap\n    return [heapq.heappop(h)[1] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    prices = {}\n    for item,price in items:\n        prices[item] = price\n    print(prices)\n    nprices = {}\n    for item,price in items:\n        nprices[item] = prices[item]\n    print(nprices)\n    for i in range(n):\n        item = heapq.heappop(nprices)\n        heapq.heappush(nprices,nprices.pop(item))\n    return nprices\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result=[]\n    for i in range(len(items)):\n        result.append((items[i],i))\n    heapq.heapify(result)\n    heapq.heapify(result)\n    return heapq.nlargest(n,result,key=lambda x:x[0])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    items = sorted(items, key=lambda i: i[1])\n    res = []\n    for i in range(n):\n        res.append(items.pop(0)[0])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    freq = {}\n    for i in items:\n        if i in freq:\n            freq[i] +=1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # creating dictionary\n    item_costs = {}\n    for item in items:\n        item_costs[item] = items.count(item)\n    # creating a heap\n    heap = [(value,key) for key,value in item_costs.items()]\n    heapq.heapify(heap)\n    # poping the top k\n    expensive_items = []\n    for k in range(n):\n        expensive_items.append(heapq.heappop(heap)[1])\n    return expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x:x[1],reverse = True)\n    result = []\n    for i in range(n):\n        result.append(items[i][0])\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return (l[n:]) + (l[:n])\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #Creating 2 new lists\n    new_list_1 = l[:n]\n    new_list_2 = l[n:]\n    return new_list_1,new_list_2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(n):\n        l.pop(0)\n    l.append(l[0])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split_Arr(l,0) => []\n    # split_Arr(l,1) => [1]\n    # split_Arr(l,2) => [1,2]\n    # split_Arr(l,3) => [1,2,3]\n    # split_Arr(l,4) => [1,2,3,4]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l[:n]\n    y = l[n:]\n    x.extend(y)\n    return x\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two equal parts\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1, l2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n<=len(l):\n        return l[:n] + l[n:]\n    else:\n        print('Error')\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    newList = []\n    for i in range(len(l)):\n        if i == n:\n            continue\n        else:\n            newList.append(l[i])\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    left = l[0:n]\n    right = l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    l = tuple(listx)\n    print(\"Original list:\")\n    print(listx)\n    print(\"Converted to tuple:\")\n    print(l)\n    return l\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx.reverse()\n    tuplex = tuple(listx)\n    listx.reverse()\n    return tuplex\n    \ndef list_tuple3(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx.sort()\n    tuplex = tuple(listx)\n    listx.sort(reverse=True)\n    return tuplex\n    \ndef list_tuple4(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx.sort(key=lambda x: x, reverse=True)\n    tuplex = tuple(listx)\n    listx.sort(key=lambda x: x, reverse=False)\n    return tuplex\n    \ndef list_tuple5(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \ndef list_tuple6(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_tuple7(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(map(list,zip(*listx)))\n    return x\n    \ndef list_tuple8(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(list(zip(*listx)))\n    \ndef list_tuple9(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.izip_longest(*listx))\n    \ndef list_tuple10(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx))\n    \ndef list_tuple11(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple12(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple13(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple14(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple15(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple16(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple17(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple18(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple19(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple20(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple21(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple22(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple23(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple24(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple25(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple26(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple27(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple28(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple29(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple30(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple31(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple32(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple33(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple34(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple35(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple36(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(itertools.zip_longest(*listx,fillvalue=0))\n    \ndef list_tuple37(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    ''"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if isinstance(listx, list):\n        return tuple(listx)\n    else:\n        print(f\"{listx} is not a list\")\n        \n        \ndef list_from_dict(dic):\n    '''\n    Write a function to convert a dictionary into a list\n    '''\n    if isinstance(dic, dict):\n        return list(dic.items())\n    else:\n        print(f\"{dic} is not a dictionary\")\n        \n        \ndef dict_from_list(lis):\n    '''\n    Write a function to convert a list into a dictionary\n    '''\n    if isinstance(lis, list):\n        return dict(lis)\n    else:\n        print(f\"{lis} is not a list\")\n        \n        \ndef dict_from_tuple(tup):\n    '''\n    Write a function to convert a tuple into a dictionary\n    '''\n    if isinstance(tup, tuple):\n        return dict(tup)\n    else:\n        print(f\"{tup} is not a tuple\")\n        \n        \ndef is_sequence(obj):\n    '''\n    Write a function to check if an object is a sequence\n    '''\n    if isinstance(obj, (list, tuple, dict)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a nested tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a nested set.\n    '''\n    return set(listx)\n    \ndef list_str(listx):\n    '''\n    Write a function to convert a list to a nested string.\n    '''\n    return ''.join(listx)\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a nested dictionary.\n    '''\n    return dict(listx)\n    \ndef list_list(listx):\n    '''\n    Write a function to convert a list to a nested list.\n    '''\n    return listx\n    \ndef lis"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(listx)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \nif __name__ == '__main__':\n    a = ['a', 'b', 'c', 'd', 'e', 'f']\n    print(list_tuple(a)"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list = nums\n    \n    def big_diff_func(list):\n        '''\n        This function find the difference between the largest and smallest value in a given list.\n        '''\n        \n        def find_max(list):\n            '''\n            This function find the maximum element in a given list.\n            '''\n            max_elem = list[0]\n            for i in list:\n                if i > max_elem:\n                    max_elem = i\n            return max_elem\n        \n        def find_min(list):\n            '''\n            This function find the minimum element in a given list.\n            '''\n            min_elem = list[0]\n            for i in list:\n                if i < min_elem:\n                    min_elem = i\n            return min_elem\n        \n        return find_max(list)-find_min(list)\n    \n    return big_diff_func(list)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    nums = sorted(nums)\n    smallest = nums[0]\n    largest = nums[-1]\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_v = nums[0]\n    max_v = nums[0]\n    \n    for i in range(len(nums)):\n        if(min_v > nums[i]):\n            min_v = nums[i]\n        if(max_v < nums[i]):\n            max_v = nums[i]\n    return max_v - min_v\n    \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[0] - nums[-1]\n    for i in range(len(nums)):\n        diff = max(diff, nums[i] - nums[-1 - i])\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    if len(nums) <= 1:\n        return 0\n    else:\n        return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    print(diff)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    max_num = nums[-1]\n    min_num = nums[0]\n    diff = max_num - min_num\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b + 1):\n        if i**2 == i:\n            squares.add(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return 0\n    if a < 0:\n        return -1\n    for x in range(a, b + 1):\n        if x ** 2 == x:\n            print(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= 0 and b >= 0:\n        # is_prime(n) function returns True if the given number is prime, else False.\n        is_prime = lambda x: not any(x % i == 0 for i in range(2, x))\n        # So, this function returns true if number is perfect square.\n        return (a * a) == b or (b * b) == a or is_prime(a) and is_prime(b)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(a)\n    print(b)\n    perfect_squares = []\n    for i in range(a, b+1):\n        if perfect_squares_check(i):\n            perfect_squares.append(i)\n    print(perfect_squares)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(set(range(a, b+1)) & set(filter(lambda x: x**0.5 == int(x**0.5), range(a, b+1))))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    answer = []\n    for i in range(a, b+1):\n        if i ** 2 == i:\n            answer.append(i)\n    return answer\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        # if a^2 + b^2 = i^2 (since a, b, i are integers)\n        # and a^2 + i^2 = b^2\n        # then i is a perfect square\n        if a**2 + i**2 == b**2:\n            print(i, end=' ')\n    print()\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_root = int(math.sqrt(a))\n    x_range = range(1, square_root)\n    y_range = range(1, square_root+1)\n    for x in x_range:\n        if x*x == a:\n            print('Found perfect square in the range: ', x, 'and ', a)\n    for y in y_range:\n        if y*y == b:\n            print('Found perfect square in the range: ', y, 'and ', b)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    for i in range(a, b + 1):\n        # i**2\n        if i**2 == i:\n            sum += i\n    return sum\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return 0"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x*x+y*y\n    theta=cmath.acos(y/r)\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.sqrt(x**2+y**2), cmath.atan2(x,y)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.sqrt(x**2+y**2), cmath.atan2(y,x)\ndef dist(p1,p2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return (p2-p1).real\ndef closest_point(point_list, target):\n    '''\n    Write a function to find the point in the list that is closest to the target.\n    '''\n    smallest = point_list[0]\n    for i in range(1, len(point_list)):\n        if dist(point_list[i], target) < dist(smallest, target):\n            smallest = point_list[i]\n    return smallest\ndef polygon_area(points):\n    '''\n    Write a function to find the area of a polygon given the verticies of the polygon.\n    '''\n    n = len(points)\n    polygon_points = []\n    for i in range(n):\n        polygon_points.append((points[i][0], points[i][1]))\n    polygon_points.append(polygon_points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][1]+points[i+1][1])*(points[i][0]-points[i+1][0])/2\n    return abs(area)/2\ndef polygon_area(points):\n    '''\n    Write a function to find the area of a polygon given the verticies of the polygon.\n    '''\n    n = len(points)\n    polygon_points = []\n    for i in range(n):\n        polygon_points.append((points[i][0], points[i][1]))\n    polygon_points.append(polygon_points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][1]+points[i+1][1])*(points[i][0]-points[i+1][0])/2\n    return abs(area)/2\ndef polygon_area(points):\n    '''\n    Write a function to find the area of a polygon given the verticies of the polygon.\n    '''\n    n = len(points)\n    polygon_points = []\n    for i in range(n):\n        polygon_points.append((points[i][0], points[i][1]))\n    polygon_points.append(polygon_points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][1]+points[i+1][1])*(points[i][0]-points[i+1][0])/2\n    return abs(area)/2\ndef polygon_area(points):\n    '''\n    Write a function to find the area of a polygon given the verticies of the polygon.\n    '''\n    n = len(points)\n    polygon_points = []\n    for i in range(n):\n        polygon_points.append((points[i][0], points[i][1]))\n    polygon_points.append(polygon_points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][1]+points[i+1][1])*(points[i][0]-points[i+1][0])/2\n    return abs(area)/2\ndef find_solution(equation, target):\n    '''\n    Write a function to find the solution to an equation given the base and power of the equation.\n    '''\n    # This function finds the solution of the equation given the base and power\n    equation = str(equation)\n    for i in range(len(equation)):\n        if equation[i] == \"-\":\n            equation = equation[:i]+\"+\"+equation[i+1:]\n    equation = equation[:equation.find(\"=\")]\n    n = len(equation)\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    # This code is used to check if the given equation is a square or not\n    equation = equation[:equation.find(\"+\")]\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    equation = equation[:equation.find(\"+\")]\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    equation = equation[:equation.find(\"+\")]\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    equation = equation.replace(\"*\",\"\")\n    equation = equation.replace(\"/\",\"\")\n    equation = equation.replace(\"(\",\"\")\n    equation = equation.replace(\")\",\"\")\n    equation = equation.replace(\"^\",\"**\")\n    equation = equation.replace(\"e\",\"*10**7\")\n    equation = equation.replace(\"^2\",\"**2\")\n    equation = equation.replace(\"^3\",\"**3\")\n    equation = equation.replace(\"^4\",\"**4\")\n    equation = equation.replace(\"^5\",\"**5\")\n    equation = equation.replace(\"^6\",\"**6\")\n    equation = equation.replace(\"^7\",\"**7\")\n    equation = equation.replace(\"^8\",\"**8\")\n    equation = equation.replace(\"^9\",\"**9\")\n    equation = equation.replace(\"^10\",\"**10\")\n    # This code is used to remove the unnecessary zeroes\n    equation = equation.replace(\"0\",\"\")\n    equation = equation.replace(\"1\",\"\")\n    equation = equation.replace(\"2\",\"\")\n    equation = equation.replace(\"3\",\"\")\n    equation = equation.replace(\"4\",\"\")\n    equation = equation.replace(\"5\",\"\")\n    equation = equation.replace(\"6\",\"\")\n    equation = equation.replace(\"7\",\"\")\n    equation = equation.replace(\"8\",\"\")\n    equation = equation.replace(\"9\",\"\")\n    equation = equation.replace(\"0\",\"\")\n    equation = equation.replace(\"1\",\"\")\n    equation = equation.replace(\"2\",\"\")\n    equation = equation.replace(\"3\",\"\")\n    equation = equation.replace(\"4\",\"\")\n    equation = equation.replace(\"5\",\"\")\n    equation = equation.replace(\"6\",\"\")\n    equation = equation.replace(\"7\",\"\")\n    equation = equation.replace(\"8\",\"\")\n    equation = equation.replace(\"9\",\"\")\n    equation = equation.replace(\".\",\"\")\n    equation = equation.replace(\"e\",\"\")\n    equation = equation.replace(\" \",\"\")\n    equation = equation.replace(\"^\",\"**\")\n    # This code is used to find the base of the equation\n    equation = equation[equation.find(\"^\")+1:]\n    n = len(equation)\n    while equation.find(\"**\")!= -1:\n        equation = equation[equation.find(\"**\")+2:]\n    equation = equation.replace(\"**\",\"**\")\n    equation = equation.replace(\"^\",\"**\")\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    # This code is used to find the power of the equation\n    equation = equation[:equation.find(\"**\")]\n    equation = equation.replace(\"**\",\"\")\n    equation = equation.replace(\"*\",\"\")\n    equation = equation.replace(\"/\",\"\")\n    equation = equation.replace(\"+\",\"\")\n    equation = equation.replace(\"-\",\"\")\n    equation = equation.replace(\"^\",\"**\")\n    equation = equation.replace(\"(\",\"\")\n    equation = equation.replace(\")\",\"\")\n    # This code is used to check if the equation is a square or not\n    equation = equation[:equation.find(\"**\")]\n    equation = equation.replace(\"**\",\"**\")\n    equation = equation.replace(\"*\",\"\")\n    equation = equation.replace(\"/\",\"\")\n    equation = equation.replace("
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    r=r**0.5\n    theta=cmath.phase(complex(x,y))\n    x1=r*cmath.cos(theta)\n    y1=r*cmath.sin(theta)\n    return(x1,y1)"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x*y\n    theta=cmath.phase(x)\n    theta=theta/(2*cmath.pi)\n    print(\"r= \",r)\n    print(\"theta= \",theta)\n    print(\"x= \",x)\n    print(\"y= \",y)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(x/r)\n    return r,theta\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(x/r)\n    return theta,r\ndef inv_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return rect_polar(x,y)\ndef inv_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_rect(x,y)\ndef del_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**(1/2)\ndef del_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2+y**2)**(1/2)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x + y*y\n    if r<=1:\n        angle = cmath.acos(y/r)\n        a = 2*r*math.cos(angle)\n        b = 2*r\n    else:\n        angle = cmath.acos(x/r)\n        a = 2*r*math.cos(angle)\n        b = 2*math.sqrt(1-x*x/r)\n    x_rect = a\n    y_rect = b\n    return x_rect,y_rect\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = cmath.atan(y/x)\n    return x*cmath.cos(angle),y*cmath.sin(angle)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x,y*y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(math.radians(y)), x*math.sin(math.radians(y))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef rect_to_polar_rect4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), y*math.sin(y)\ndef rect_to_polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2 + y**2)**0.5, math.atan2(y,x)\ndef polar_rect_to_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangula"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if newList is None or len(newList)<1:\n        return None\n    else:\n        temp = newList[0]\n        newList[0] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i=0\n    l=len(newList)\n    newList[0],newList[l-1]=newList[l-1],newList[0]\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \ndef swap_first_last_element(list): \n    '''\n    Write a python function to swap the first and last element in a list.\n    '''\n    list[0], list[-1] = list[-1], list[0]\n    return list\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the elements of the list.\n    '''\n    newList.reverse()\n    return newList\n    \n    \n    \ndef odd_even_List(newList): \n    '''\n    Write a python function to convert a list to an odd-even list.\n    '''\n    even = []\n    odd = []\n    for i in newList:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n    \n    \n    \ndef delete_all_occurrences_of_element(list1, element): \n    '''\n    Write a python function to delete all occurrences of an element from a list.\n    '''\n    while element in list1:\n        list1.remove(element)\n    return list1\n    \n    \n    \ndef get_nth_occurrence_of_element(list1, element, n): \n    '''\n    Write a python function to get the nth occurrence of an element from a list.\n    '''\n    return list1.index(element, n)\n    \n    \n    \ndef get_list_max_min_element(list1): \n    '''\n    Write a python function to get the maximum and minimum element from a list.\n    '''\n    return max(list1), min(list1)\n    \n    \n    \ndef get_list_max_min_element_using_sort(list1): \n    '''\n    Write a python function to get the maximum and minimum element from a list.\n    '''\n    newList = sorted(list1)\n    return newList[-1], newList[0]\n    \n    \n    \ndef get_list_min_and_max_element(list1): \n    '''\n    Write a python function to get the minimum and maximum element from a list.\n    '''\n    newList = sorted(list1)\n    return newList[0], newList[-1]\n    \n    \n    \ndef get_list_elements_greater_than_second_occurrence(list1): \n    '''\n    Write a python function to get the elements greater than the second occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_elements_less_than_second_occurrence(list1): \n    '''\n    Write a python function to get the elements less than the second occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_elements_greater_than_n_occurrence(list1, n): \n    '''\n    Write a python function to get the elements greater than the n occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_elements_less_than_n_occurrence(list1, n): \n    '''\n    Write a python function to get the elements less than the n occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_elements_greater_than_or_equal_to_n_occurrence(list1, n): \n    '''\n    Write a python function to get the elements greater than or equal to the n occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_elements_less_than_or_equal_to_n_occurrence(list1, n): \n    '''\n    Write a python function to get the elements less than or equal to the n occurence of an element from a list.\n    '''\n    list1.sort()\n    n = 1\n    list2 = []\n    while n < len(list1)-1:\n        if list1[n] == list1[n-1]:\n            n += 1\n        else:\n            list2.append(list1[n])\n            n += 1\n    return list2\n    \n    \n    \ndef get_list_sum_of_all_elements(list1): \n    '''\n    Write a python function to get the sum of all elements from a list.\n    '''\n    return sum(list1)\n    \n    \n    \ndef get_list_sum_of_all_even_elements(list1): \n    '''\n    Write a python function to get the sum of all even elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i%2 == 0:\n            sum += i\n    return sum\n    \n    \n    \ndef get_list_sum_of_all_odd_elements(list1): \n    '''\n    Write a python function to get the sum of all odd elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i%2 == 1:\n            sum += i\n    return sum\n    \n    \n    \ndef get_list_sum_of_all_odd_and_even_elements(list1): \n    '''\n    Write a python function to get the sum of all odd and even elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i%2 == 0:\n            sum += i\n        else:\n            sum += i\n    return sum\n    \n    \n    \ndef get_list_sum_of_all_positive_elements(list1): \n    '''\n    Write a python function to get the sum of all positive elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i > 0:\n            sum += i\n    return sum\n    \n    \n    \ndef get_list_sum_of_all_negative_elements(list1): \n    '''\n    Write a python function to get the sum of all negative elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i < 0:\n            sum += i\n    return sum\n    \n    \n    \ndef get_list_sum_of_all_negative_and_positive_elements(list1): \n    '''\n    Write a python function to get the sum of all negative and positive elements from a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i > 0:\n            sum += i"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    newList.pop(-1)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #print(newList[0], newList[-1])\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # function to interchange first and last elements in a list\n    first_element = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    b = newList.pop(0)\n    newList.append(a)\n    newList.append(b)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list_len = len(newList)\n    list_len = list_len-1\n    # for i in range(list_len):\n    #     newList[i], newList[list_len] = newList[list_len], newList[i]\n    #     list_len -= 1\n    newList[0], newList[list_len] = newList[list_len], newList[0]\n    return newList\n    \n    # print(newList)\n    \n    # # solution with using slicing\n    # newList = list_len[:1] + list_len[-1:] + list_len[1:-1]\n    # return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = newList.pop()\n    newList.append(x)\n    newList.pop(0)\n    return newList\n    \nprint(swap_List([1,2,3,4,5]))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList.copy()\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    Coeff = []\n    for i in range(n+1):\n        j = i\n        a = 1\n        while j > 0:\n            a = a * j\n            j = j - 1\n        Coeff.append(a)\n    \n    def binomial_term(k,n,Coeff):\n        b = 0\n        for i in range(n+1):\n            if i == k:\n                b = b + Coeff[n-i]\n        return b\n    return binomial_term(k,n,Coeff)\n    \n    \n    \n    \ndef high_ord_binom(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_term(k,n,Coeff):\n        b = 0\n        for i in range(n+1):\n            if i == k:\n                b = b + Coeff[n-i]\n        return b\n    Coeff = []\n    for i in range(n+1):\n        a = 1\n        j = i\n        while j > 0:\n            a = a * j\n            j = j - 1\n        Coeff.append(a)\n    ans = 0\n    for k in range(1,k+1):\n        ans = ans + binomial_term(k,n,Coeff)\n    return ans\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    binomial_coeff = 1\n    for i in range(1,k+1):\n        binomial_coeff = binomial_coeff * (n-i+1) / i\n    return binomial_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k)[0]\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == 1:\n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \n    \ndef Sum_of_Binomial_coeff(n,k):\n    if k == 0 or k == 1:\n        return 1\n    else:\n        return binomial_Coeff(n,k) + Sum_of_Binomial_coeff(n,k-1)\n    \n    \ndef Sum_of_Binomial_coeff_naive(n,k):\n    '''\n    Another approach is to calculte the factorial of n and k and sum up all the\n    factorials.\n    '''\n    res = 0\n    for i in range(k):\n        res += factorial(n-1)//(factorial(i)*factorial(n-1-i))\n    return res\n    \n    \ndef Sum_of_Binomial_coeff_using_memoization(n,k):\n    '''\n    This function is same as Sum_of_Binomial_coeff_naive() but saves the results in a dictionary.\n    '''\n    dp_dict = {}\n    \n    def sum_of_binomial_coeff(n,k,dp_dict):\n        if k == 0 or k == 1:\n            return 1\n        else:\n            if (n,k) in dp_dict:\n                return dp_dict[(n,k)]\n            else:\n                res = 0\n                for i in range(k):\n                    res += factorial(n-1)//(factorial(i)*factorial(n-1-i))\n                dp_dict[(n,k)] = res\n                return res\n                \n    return sum_of_binomial_coeff(n,k,dp_dict)\n    \n    \ndef Sum_of_Binomial_coeff_using_top_down_lookup(n,k):\n    '''\n    This function uses a top down approach to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(k):\n            res += factorial(n-1)//(factorial(i)*factorial(n-1-i))\n    return res\n    \ndef factorial(n):\n    '''\n    This function is to calculate the factorial of any number n.\n    '''\n    res = 1\n    for i in range(n):\n        res *= i+1\n    return res\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C0 = 1\n    C1 = 1\n    if n == 0 or k == 0:\n        return 0\n    elif k == 1:\n        return C0\n    elif n == 1:\n        return C1\n    else:\n        for i in range(1,n+1):\n            C0 = C0*(i)\n            C1 = C1*(k-i+1)\n        return C0//C1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    count = n\n    sum = 0\n    while count >= 0:\n        sum += binomial_coefficient(count,n) * k**count\n        count -= 1\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum1 = 0\n    for i in range(1,n+1):\n        sum1 = sum1 + n*(1-0.5)**i\n    return(sum1)\n    \nprint(binomial_Coeff(5,4))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #Find the first sequence of coefficients \n    first_sequence = (n * k + 1) * (n - k + 1) // 2\n    \n    #Generate the remaining sequence\n    rest_sequence = binomial_Coeff(n - 1, k + 1) + binomial_Coeff(n, k + 1)\n    \n    return first_sequence + rest_sequence\n    \ndef sum_of_product(n):\n    '''\n    Write a python function to find the sum of the product of all the first n numbers in the Fibonacci sequence.\n    '''\n    \n    #Calculate the first n terms\n    fibonacci_nums = get_fibonacci_nums(n)\n    \n    #Calculate the product\n    product_of_terms = 1\n    for i in range(len(fibonacci_nums)):\n        product_of_terms *= fibonacci_nums[i]\n    \n    return product_of_terms\n    \ndef get_fibonacci_nums(n):\n    '''\n    This function returns the first n numbers in the Fibonacci sequence.\n    '''\n    fibonacci_nums = [0, 1]\n    \n    while len(fibonacci_nums) < n:\n        fibonacci_nums.append(fibonacci_nums[-1] + fibonacci_nums[-2])\n    \n    return fibonacci_nums\n    \ndef sum_of_powers(m,n):\n    '''\n    Write a python function to find the sum of the product of all the first n numbers in the Fibonacci sequence.\n    '''\n    #Calculate the first n terms\n    fibonacci_nums = get_fibonacci_nums(n)\n    \n    #Calculate the product\n    sum_of_powers = 1\n    for i in range(len(fibonacci_nums)):\n        sum_of_powers *= fibonacci_nums[i] ** m\n    \n    return sum_of_powers\n    \ndef nth_term_in_fibonacci_sequence(n):\n    '''\n    This function returns the nth term in the Fibonacci sequence.\n    '''\n    #Calculate the first n terms\n    fibonacci_nums = get_fibonacci_nums(n)\n    \n    #Calculate the product\n    sum_of_powers = 1\n    for i in range(len(fibonacci_nums)):\n        sum_of_powers *= fibonacci_nums[i]\n    \n    return sum_of_powers\n    \ndef sum_of_sorted_squares(n):\n    '''\n    Write a python function to find the sum of the product of the first n positive integer numbers sorted from smallest to largest in ascending order.\n    '''\n    #Calculate the first n terms\n    fibonacci_nums = get_fibonacci_nums(n)\n    \n    #Calculate the product\n    product_of_terms = 1\n    for i in range(len(fibonacci_nums)):\n        product_of_terms *= fibonacci_nums[i] ** 2\n    \n    return product_of_terms\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of the product of the first n positive integer numbers sorted from smallest to largest in ascending order.\n    '''\n    #Calculate the first n terms\n    fibonacci_nums = get_fibonacci_nums(n)\n    \n    #Calculate the product\n    product_of_terms = 1\n    for i in range(len(fibonacci_nums)):\n        product_of_terms *= fibonacci_nums[i] ** 2\n    \n    return product_of_terms\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    ans = 1\n    if n == k:\n        return 1\n    for i in range(n+1, n-k+1):\n        ans = ans*i\n    return ans\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    p = (1 + 5**0.5)/2\n    q = (1 - 5**0.5)/2\n    \n    return (q**(n/2))*p**(k/2)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet_list = ip.split(\".\")\n    for octet in octet_list:\n        if octet == \"0\":\n            octet_list.remove(\"0\")\n    octet_list = list(map(int, octet_list))\n    ip = \".\".join(map(str, octet_list))\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r\"\\d+\\.\\d+\\.\\d+\\.\\d+\"\n    return re.search(ip_regex, ip).group()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(len(ip)==0):\n        return None\n    else:\n        if(len(ip)<4):\n            return None\n        else:\n            return ip.lstrip('0')\ndef checkip(ip):\n    '''\n    Write a function to check if a given string is a valid ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)<4):\n            return False\n        else:\n            return True\ndef inttoip(ip):\n    '''\n    Write a function that converts a decimal integer to dotted quad notation.\n    '''\n    if(len(ip)==0):\n        return None\n    else:\n        return str(ip)+'.'+str(ip+1)+'.'+str(ip+2)+'.'+str(ip+3)\ndef ip_to_int(ip):\n    '''\n    Write a function that converts a dotted quad notation ip address to a decimal integer.\n    '''\n    if(len(ip)==0):\n        return None\n    else:\n        return int(ip.split('.')[0])\ndef is_subnet_mask(ip,mask):\n    '''\n    Write a function to check if the given ip address is a subnet mask.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(ip_to_int(ip)<ip_to_int(mask)):\n            return False\n        else:\n            return True\ndef is_ipv4_address(ip):\n    '''\n    Write a function to check if the given ip address is a valid ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)<4):\n            return False\n        else:\n            return True\ndef is_valid_ip_address(ip):\n    '''\n    Write a function to check if the given ip address is a valid ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)==4):\n            return True\n        else:\n            return False\ndef reverse_ip(ip):\n    '''\n    Write a function that reverses the order of the ip address.\n    '''\n    if(len(ip)==0):\n        return None\n    else:\n        if(len(ip)==4):\n            return str(int(ip.split('.')[3])+1)+'.'+str(int(ip.split('.')[2])+1)+'.'+str(int(ip.split('.')[1])+1)+'.'+str(int(ip.split('.')[0])+1)\n        else:\n            return None\ndef ip_in_range(start_ip,end_ip):\n    '''\n    Write a function that checks if the given ip address is in range.\n    '''\n    if(start_ip==None or end_ip==None):\n        return False\n    else:\n        if(len(start_ip)!=len(end_ip)):\n            return False\n        else:\n            for i in range(len(start_ip)):\n                if(start_ip[i]==end_ip[i]):\n                    return True\n                elif(start_ip[i]!=end_ip[i]):\n                    return False\ndef is_valid_time(time):\n    '''\n    Write a function that validates a time in 24hr format.\n    '''\n    if(len(time)==0):\n        return False\n    else:\n        if(time.startswith('0')):\n            return False\n        else:\n            if(len(time)==5):\n                if(time[3]==':'):\n                    if(time[4]==':'):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\ndef is_valid_timediff(time):\n    '''\n    Write a function that validates a time difference in a valid format.\n    '''\n    if(len(time)==0):\n        return False\n    else:\n        if(time.startswith('0')):\n            return False\n        else:\n            if(len(time)==5):\n                if(time[4]==':'):\n                    return True\n                else:\n                    return False\n            else:\n                return False\ndef is_valid_ip(ip):\n    '''\n    Write a function that validates a ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)==4):\n            return True\n        else:\n            return False\ndef is_valid_domain(domain):\n    '''\n    Write a function that validates a domain name.\n    '''\n    if(len(domain)==0):\n        return False\n    else:\n        if(len(domain)==0):\n            return False\n        elif(domain.startswith('.')):\n            return True\n        else:\n            return False\ndef is_valid_email(email):\n    '''\n    Write a function that validates an email address.\n    '''\n    if(len(email)==0):\n        return False\n    else:\n        if(len(email)==0):\n            return False\n        else:\n            if(email.count('@')==1):\n                return True\n            else:\n                return False\ndef is_valid_date(date):\n    '''\n    Write a function that validates a date in a valid format.\n    '''\n    if(len(date)==0):\n        return False\n    else:\n        if(len(date)==8):\n            if(date[2:4].isalpha()):\n                if(date[5:7].isdigit()):\n                    if(date[0:2].isdigit()):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\ndef is_valid_time_format(time):\n    '''\n    Write a function that validates a time in 24hr format.\n    '''\n    if(len(time)==0):\n        return False\n    else:\n        if(time.startswith('0')):\n            return False\n        else:\n            if(len(time)==5):\n                if(time[3]==':'):\n                    if(time[4]==':'):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\ndef is_valid_timediff(time):\n    '''\n    Write a function that validates a time difference in a valid format.\n    '''\n    if(len(time)==0):\n        return False\n    else:\n        if(time.startswith('0')):\n            return False\n        else:\n            if(len(time)==5):\n                if(time[4]==':'):\n                    return True\n                else:\n                    return False\n            else:\n                return False\ndef check_start_with_a(word):\n    '''\n    Write a function to check if the given word starts with a or an\n    '''\n    if(len(word)==0):\n        return False\n    else:\n        if(word[0]=='a' or word[0]=='A'):\n            return True\n        else:\n            return False\ndef check_ip_validity(ip):\n    '''\n    Write a function to check if the given ip address is a valid ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)==4):\n            return True\n        else:\n            return False\ndef check_ip_subnet_validity(ip,mask):\n    '''\n    Write a function to check if the given ip address is a valid ip address.\n    '''\n    if(len(ip)==0):\n        return False\n    else:\n        if(len(ip)==4):\n            return True\n        else:\n            return False\ndef is_valid_email_format(email):\n    '''\n    Write a function that validates an email address.\n    '''\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0') or \"0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join(str(x) for x in ip.split('.'))\n    \ndef is_valid_ip(ip):\n    '''\n    Write a function to check if an IP address is valid or not.\n    '''\n    if(len(ip.split('.')) == 4):\n        for i in range(len(ip.split('.'))):\n            if(len(ip.split('.'))!= 4):\n                return False\n            if(ip.split('.')[i] == ''):\n                return False\n            if(len(ip.split('.')[i]) > 3 or len(ip.split('.')[i]) < 0):\n                return False\n            for j in range(1,len(ip.split('.')[i])):\n                if(int(ip.split('.')[i])!= 0 and int(ip.split('.')[i])!= 255):\n                    return False\n        return True\n    return False\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if '.' in ip:\n    #     ip=ip.split('.')\n    #     for i in ip:\n    #         if int(i)==0:\n    #             ip.remove(i)\n    #         else:\n    #             break\n    #     return ip[0]+'.'+ip[1]+'.'+ip[2]+'.'+ip[3]\n    ip_list = ip.split('.')\n    for i in range(0,4):\n        ip_list[i] = int(ip_list[i])\n        if ip_list[i]==0:\n            ip_list.remove(ip_list[i])\n        else:\n            break\n    return '.'.join([str(i) for i in ip_list])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while ip.find('.')!= -1:\n        ip = ip.replace('.','')\n    return ip\ndef removezero_ipv6(ip):\n    '''\n    Write a function to remove leading zeroes from an ipv6 address.\n    '''\n    while ip.find(':')!= -1:\n        ip = ip.replace(':','')\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    while port.find('.')!= -1:\n        port = port.replace('.','')\n    return port\ndef check_IPv6(ip):\n    '''\n    Write a function to check if ipv6 address contains any of the following patterns:\n        1. ::/128\n        2. ::ffff:255.255.255.255/128\n    '''\n    match1 = re.match(r\"^::(?!/)[\\da-fA-F]{0,4}(?::[\\da-fA-F]{1,4})+[\\da-fA-F]{1,4}::[\\da-fA-F]{1,4}$\",ip)\n    match2 = re.match(r\"^::ffff:(?:(?:255[0-2]:|[0-9]{1,3})|(?:(?:25[0-5]:|[0-4][0-9]|[01]?[0-9][0-9]?)\\.){1,3}(?:25[0-5]:|[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-f]{1,4}:){7}[0-9a-f]{1,4}|(?:[0-9a-f]{1,4}:){1,7}:|(?:(?:[0-9a-f]{1,4}:){1,6})|(?:(?:[0-9a-f]{1,4}:){1,5})|(?:(?:[0-9a-f]{1,4}:){1,4})|(?:(?:[0-9a-f]{1,4}:){1,3})|(?:(?:[0-9a-f]{1,4}:){1,2})|(?:(?:[0-9a-f]{1,4}:){1,1}))$\",ip)\n    if match1:\n        return True\n    elif match2:\n        return True\n    else:\n        return False\ndef check_port_number(port):\n    '''\n    Write a function to check if a port number is valid or not.\n    '''\n    while port.find('.')!= -1:\n        port = port.replace('.','')\n    while port.find('/')!= -1:\n        port = port.replace('/','')\n    while port.find(':')!= -1:\n        port = port.replace(':','')\n    match1 = re.match(r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\",port)\n    match2 = re.match(r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\",port)\n    if match1:\n        return True\n    elif match2:\n        return True\n    else:\n        return False\ndef check_hostname_ip(hostname,ip):\n    '''\n    Write a function to check if a hostname is valid or not.\n    '''\n    ip = removezero_ip(ip)\n    hostname = hostname.lower()\n    hostname = hostname.replace(' ','')\n    if re.match(r\"[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.\",hostname) and len(hostname) > 0 and len(ip) > 0:\n        if check_IPv6(ip):\n            if check_port_number(ip.split('/')[1]):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_hostname_ipv6(hostname,ip):\n    '''\n    Write a function to check if a hostname is valid or not.\n    '''\n    ip = removezero_ip(ip)\n    hostname = hostname.lower()\n    hostname = hostname.replace(' ','')\n    if re.match(r\"^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.\",hostname) and len(hostname) > 0 and len(ip) > 0:\n        if check_IPv6(ip):\n            if check_port_number(ip.split('/')[1]):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_hostname_port(hostname,port):\n    '''\n    Write a function to check if a hostname is valid or not.\n    '''\n    if hostname.lower() == \"\":\n        return False\n    hostname = hostname.lower()\n    hostname = hostname.replace(' ','')\n    if re.match(r\"[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.\",hostname) and len(hostname) > 0 and len(port) > 0:\n        if check_port_number(port):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_hostname_port_IPv6(hostname,port):\n    '''\n    Write a function to check if a hostname is valid or not.\n    '''\n    if hostname.lower() == \"\":\n        return False\n    hostname = hostname.lower()\n    hostname = hostname.replace(' ','')\n    if re.match(r\"^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.\",hostname) and len(hostname) > 0 and len(port) > 0:\n        if check_IPv6(port):\n            if check_port_number(port.split('/')[1]):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_range_port(port1,port2):\n    '''\n    Write a function to check if a port range is valid or not.\n    '''\n    if (port1 > port2 and port2!= 0) or (port2 > port1 and port1!= 0):\n        return False\n    else:\n        return True\ndef check_range_port_IPv6(port1,port2):\n    '''\n    Write a function to check if a port range is valid or not.\n    '''\n    if (port1 > port2 and port2!= 0) or (port2 > port1 and port1!= 0):\n        return False\n    else:\n        return True\ndef check_range_ip(ip1,ip2):\n    '''\n    Write a function to check if an ip range is valid or not.\n    '''\n    if (ip1 > ip2 and ip2!= 0) or (ip2 > ip1 and ip1!= 0):\n        return False\n    else:\n        return True\ndef check_range_ipv6(ip1,ip2):\n    ''"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a=re.match(r\"^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\",ip)\n    if a is not None:\n        ip=a.group()\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from port number.\n    '''\n    b=re.match(r\"^(\\d+).(\\d+)\",port)\n    if b is not None:\n        port=b.group()\n    return port\ndef create_key(ip,port):\n    '''\n    Write a function to create a key from an ip and port\n    '''\n    ip=removezero_ip(ip)\n    port=removezero_port(port)\n    return ip+\":\"+port\ndef create_keys(keys):\n    '''\n    Write a function to create a key from an ip and port\n    '''\n    keys_new=[]\n    for ip,port in keys:\n        keys_new.append(create_key(ip,port))\n    return keys_new\ndef compare_keys(key1,key2):\n    '''\n    Write a function to compare two keys and return true if they are equal or false if not\n    '''\n    key1=removezero_ip(key1)\n    key2=removezero_ip(key2)\n    return key1==key2\ndef remove_duplicates(keys):\n    '''\n    Write a function to remove duplicate keys from a list\n    '''\n    keys_new=[]\n    for i in range(0,len(keys)):\n        if keys[i] not in keys_new:\n            keys_new.append(keys[i])\n    return keys_new\ndef count_keys(keys):\n    '''\n    Write a function to count the number of keys in a dictionary\n    '''\n    count=len(keys)\n    return count\ndef remove_keys(keys,keys_to_remove):\n    '''\n    Write a function to remove keys from a dictionary\n    '''\n    for i in range(0,len(keys_to_remove)):\n        keys.pop(keys_to_remove[i])\n    return keys\ndef longest_common_substring(s1,s2):\n    '''\n    Write a function to find the longest common substring from two strings\n    '''\n    table={}\n    table[0]={}\n    table[1]={}\n    l1=len(s1)\n    l2=len(s2)\n    for i in range(l1):\n        table[0][i]=0\n        table[1][i]=0\n    for i in range(l1):\n        for j in range(l2):\n            if i==0:\n                table[0][i]=i\n            elif j==0:\n                table[1][j]=j\n            else:\n                if s1[i]==s2[j]:\n                    table[0][i]=table[0][i-1]+1\n                    table[1][j]=table[1][j-1]+1\n                else:\n                    table[0][i]=max(table[0][i],table[0][i-1])\n                    table[1][j]=max(table[1][j],table[1][j-1])\n    print(table)\n    lcs=0\n    i=lcs\n    j=lcs\n    while i<l1 and j<l2:\n        if s1[i]==s2[j]:\n            lcs=table[0][i]+table[1][j]\n            i+=1\n            j+=1\n        elif table[0][i]<table[1][j]:\n            i+=1\n        else:\n            j+=1\n    return lcs\ndef longest_common_substring(s1,s2):\n    '''\n    Write a function to find the longest common substring from two strings\n    '''\n    table={}\n    l1=len(s1)\n    l2=len(s2)\n    for i in range(l1):\n        table[i]={}\n        for j in range(l2):\n            table[i][j]=0\n    for i in range(l1):\n        for j in range(l2):\n            if i==0:\n                table[i][j]=0\n            elif j==0:\n                table[i][j]=i\n            else:\n                if s1[i]==s2[j]:\n                    table[i][j]=table[i-1][j-1]+1\n                else:\n                    table[i][j]=max(table[i][j],table[i-1][j],table[i][j-1])\n    print(table)\n    lcs=0\n    i=lcs\n    j=lcs\n    while i<l1 and j<l2:\n        if s1[i]==s2[j]:\n            lcs=table[i][j]\n            i+=1\n            j+=1\n        elif table[i][j]<table[i-1][j]:\n            i+=1\n        else:\n            j+=1\n    return lcs\ndef longest_common_subsequence(s1,s2):\n    '''\n    Write a function to find the longest common subsequence from two strings\n    '''\n    table={}\n    table[0]={}\n    table[1]={}\n    l1=len(s1)\n    l2=len(s2)\n    for i in range(l1):\n        table[0][i]=0\n    for i in range(l2):\n        table[1][i]=0\n    for i in range(l1):\n        for j in range(l2):\n            if i==0:\n                table[0][i]=i\n            elif j==0:\n                table[1][j]=j\n            else:\n                if s1[i]==s2[j]:\n                    table[0][i]=table[0][i-1]+1\n                    table[1][j]=table[1][j-1]+1\n                else:\n                    table[0][i]=max(table[0][i],table[0][i-1])\n                    table[1][j]=max(table[1][j],table[1][j-1])\n    print(table)\n    lcs=0\n    i=lcs\n    j=lcs\n    while i<l1 and j<l2:\n        if s1[i]==s2[j]:\n            lcs=table[0][i]+table[1][j]\n            i+=1\n            j+=1\n        elif table[0][i]<table[1][j]:\n            i+=1\n        else:\n            j+=1\n    return lcs\ndef longest_common_subsequence(s1,s2):\n    '''\n    Write a function to find the longest common subsequence from two strings\n    '''\n    table={}\n    table[0]={}\n    table[1]={}\n    l1=len(s1)\n    l2=len(s2)\n    for i in range(l1):\n        table[0][i]=0\n    for i in range(l2):\n        table[1][i]=0\n    for i in range(l1):\n        for j in range(l2):\n            if i==0:\n                table[0][i]=i\n            elif j==0:\n                table[1][j]=j\n            else:\n                if s1[i]==s2[j]:\n                    table[0][i]=table[0][i-1]+1\n                    table[1][j]=table[1][j-1]+1\n                else:\n                    table[0][i]=max(table[0][i],table[0][i-1])\n                    table[1][j]=max(table[1][j],table[1][j-1])\n    print(table)\n    lcs=0\n    i=lcs\n    j=lcs\n    while i<l1 and j<l2:\n        if s1[i]==s2[j]:\n            lcs=table[0][i]+table[1][j]\n            i+=1\n            j+=1\n        elif table[0][i]<table[1][j]:\n            i+=1\n        else:\n            j+=1\n    return lcs"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = ip[0] + '.' + ip[1] + '.' + ip[2] + '.'\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    for i in range(3):\n        if int(ip[i]) == 0:\n            ip[i] = '0'\n    return '.'.join(ip)\ndef check_ip(ip):\n    '''\n    Write a function to check if the input string is a valid IPv4 address or not.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    for ip_int in ip:\n        if ip_int.lstrip('0').isdigit() == False:\n            return False\n        if int(ip_int) > 255:\n            return False\n    return True\ndef remove_prefix(prefix, ip):\n    '''\n    Write a function to remove the prefix from the ip address.\n    '''\n    ip = ip.split('.')\n    prefix = prefix.split('.')\n    if prefix[0] == '0' and len(prefix) == 1:\n        return ip\n    if len(prefix) > 1:\n        return ip[0:prefix[0]] + ip[prefix[0]+1:]\n    if len(prefix) == 1:\n        return ip[0:prefix[0]] + ip[prefix[0]+1:]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Method 1\n    '''\n    odd_count = 0\n    even_count = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    return even_count-odd_count\n    '''\n    # Method 2\n    '''\n    odd_count = 0\n    even_count = 0\n    even_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            even_count1 += 1\n    return even_count - even_count1\n    '''\n    # Method 3\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            even_count1 = even_count - odd_count\n    return even_count1\n    '''\n    # Method 4\n    '''\n    odd_count = 0\n    even_count = 0\n    even_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            even_count1 = even_count - odd_count\n    return even_count1\n    '''\n    # Method 5\n    '''\n    odd_count = 0\n    even_count = 0\n    even_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            even_count1 = even_count - odd_count\n    return odd_count-even_count1\n    '''\n    # Method 6\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 7\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 8\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 9\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 10\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 11\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 12\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 13\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 14\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 15\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 16\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 17\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 18\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 19\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 20\n    '''\n    odd_count = 0\n    even_count = 0\n    odd_count1 = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            odd_count += 1\n        else:\n            even_count += 1\n            odd_count1 = odd_count - even_count\n    return odd_count1\n    '''\n    # Method 21\n    '''\n    odd_count = 0\n    even_count = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=[]\n    even=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if even==[]:\n        return odd[0]\n    else:\n        return odd[0] - even[0]"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0] - list1[1])\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0]-list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = list1[0]\n    even_num = list1[1]\n    diff = even_num - odd_num\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    # write your code here\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    list1 = set(list1)\n    list1 = list(list1)\n    list1.sort()\n    even_number = []\n    odd_number = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_number.append(list1[i])\n        else:\n            odd_number.append(list1[i])\n    \n    print(even_number,odd_number)\n    difference = even_number[1] - even_number[0]\n    print(difference)\n    \n    \ndef index_of_lowest_value(list1):\n    '''\n    Write a function to find the index of the lowest value of a given list.\n    '''\n    list1 = sorted(list1)\n    print(list1)\n    lowest_value = list1[0]\n    lowest_index = 0\n    for i in range(len(list1)):\n        if list1[i] < lowest_value:\n            lowest_value = list1[i]\n            lowest_index = i\n    print(lowest_index)\n    \ndef is_subset(list1, list2):\n    '''\n    Write a function to check whether a given list is a subset of another list.\n    '''\n    if len(list1) > len(list2):\n        return False\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        elif list1[i] > list2[i]:\n            return False\n    return True\n    \ndef is_subsequence(list1, list2):\n    '''\n    Write a function to check whether a given list is a subsequence of another list.\n    '''\n    if len(list1) > len(list2):\n        return False\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        elif list1[i] > list2[i]:\n            return False\n    return True\n    \ndef top_bottom_max_min(list1):\n    '''\n    Write a function to find the top and bottom maximum and minimum values of a given list.\n    '''\n    list1.sort()\n    print(list1)\n    print(\"Max in the list:\",list1[-1])\n    print(\"Min in the list:\",list1[0])\n    \ndef extract_middle(list1):\n    '''\n    Write a function to extract a middle element from a list.\n    '''\n    list1.sort()\n    if len(list1)%2 == 0:\n        return list1[len(list1)/2]\n    else:\n        return list1[len(list1)/2]\n    \ndef merge_sort(list1):\n    '''\n    Write a function to sort a list using Merge Sort algorithm.\n    '''\n    if len(list1) <= 1:\n        return list1\n    middle = len(list1)//2\n    left = merge_sort(list1[:middle])\n    right = merge_sort(list1[middle:])\n    return merge(left, right)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    if len(list1)==0:\n        print(\"List is empty\")\n        return None\n    for x in list1:\n        if x%2==0:\n            even=even+x\n        else:\n            odd=odd+x\n    print(\"Even:\",even)\n    print(\"Odd:\",odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    print(f\"The difference of the first even and the first odd number is: {diff_even_odd.__doc__}\")\n    print(f\"The difference of the first even and the first odd number is {list1[0]-list1[1]}\")\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return abs(even - odd)\n    \n    \n    "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here\n    # number of characters to be compared for swapping.\n    comp_char = len(str1)\n    # count of swap required\n    count_swap = 0\n    for i in range(0,comp_char) :\n        # if any characters are not equal\n        if str1[i]!= str2[i] :\n            # Swap those characters\n            # print(str1[i],str2[i])\n            str1,str2 = str2,str1\n            count_swap += 1\n    return count_swap\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    \n    for index in range(len(str1)) : \n        if (str1[index]!= str2[index]) : \n            count += 1\n    \n    print(count) \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    # checks if length is equal\n    if(n!= len(str2)) : \n        return -1\n    # counts number of flips in the string\n    count = 0\n    for i in range(n) : \n        # check if character is same\n        if(str1[i]!= str2[i]) : \n            # swap\n            str1 = str1[:i] + str1[i+1:] + str1[i] + str1[i+2:]\n            str2 = str2[:i] + str2[i+1:] + str2[i] + str2[i+2:]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    \n    #Initialize minimum number of swaps required \n    res = m+n\n    \n    #To check if str1 is present in str2 or not\n    if str1 not in str2 : \n        return res \n    \n    #So if str1 is present in str2\n    \n    #Make the index of str1 to 0 \n    idx = 0\n    \n    #Initialize a boolean variable to store result\n    flag = False\n    \n    #Loop to check if str1 is present or not\n    for i in range(m) : \n        \n        #Check if str1 is present in str2 or not\n        if str1[i]!= str2[idx] : \n            \n            #If str1 is present, swap the str1 and str2 \n            if flag == True : \n                str2 = str2[:idx] + str2[idx+1:]\n                \n                #Increment index of str2\n                idx += 1\n            \n            #If str1 is not present, add one swap to the minimum\n            else : \n                flag = True\n                \n                #Add str1 to str2\n                str2 = str2[:idx] + str1[i] + str2[idx:]\n                \n                #Increment index of str2\n                idx += 1\n    \n    #Once str1 is converted to str2, check if it is a palindrome or not \n    if str2 == str2[::-1] : \n        res -= 1\n    \n    return res \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1\n    s2 = str2\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swaps += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    res = 0\n    length = len(str1)\n    temp = str1\n    while str1!= str2:\n        if str1!= temp:\n            res += 1\n        temp = str1\n        i = 0\n        while(i < length and str1[i]!= '1' and str1[i]!= '0'):\n            i += 1\n        str1 = str1[:i] + str1[i + 1:]\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    a = list(str1)\n    b = list(str2)\n    swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1[0]==str2[0]) :\n        return 0\n    swaps = 0\n    for i in range(1,len(str1)) :\n        if (str1[i]!=str2[i]) :\n            swaps += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # count = 0\n    # for i in range(len(str1)) :\n    #     if str1[i] == str2[i] :\n    #         count += 0\n    #     elif str1[i]!= str2[i] :\n    #         count += 1\n    # return count\n    \n    swaps = 0\n    i = 0\n    while i < len(str1) :\n        if str1[i]!= str2[i] :\n            swaps += 1\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n        i += 1\n    return swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length = 0\n    for element in tuple_list:\n        length = length + sys.getsizeof(element)\n    return length\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n    return struct.calcsize(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # 1. How can you tell if it is a tuple or not?\n    if type(tuple_list) == tuple:\n        return len(tuple_list)\n    else:\n        return 0\n    # 2. How can you calculate the size of a tuple?\n    # a. by using the len() function\n    # b. by using the sys.getsizeof() function\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # tuple_list = list(tuple_list)\n    # return(sys.getsizeof(tuple_list))\n    \n    return(sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    bytes_list = []\n    for i in range(len(tuple_list)):\n        bytes_list.append(sys.getsizeof(tuple_list[i]))\n    return bytes_list\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    mid = len(arr1)//2\n    # print(arr1[:mid], arr1[mid:])\n    if k == mid:\n        return arr1[mid]\n    if arr1[mid] > arr2[k-mid-1]:\n        return find_kth(arr1[:mid], arr2, k)\n    elif arr1[mid] < arr2[k-mid-1]:\n        return find_kth(arr1, arr2[:mid], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    merged = merge_sort(arr1) + merge_sort(arr2)\n    print(merged)\n    return find_index(merged, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n            count += 1\n            if count == k:\n                return arr1[i-1]\n    return arr1[i-1] if count == k else arr2[j-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size = len(arr1)\n    arr2_size = len(arr2)\n    if arr1_size == 0 or arr2_size == 0:\n        return 0\n    elif arr1_size == 1 and arr2_size == 1:\n        if k <= 1:\n            return 0\n        elif arr1[0] <= arr2[0]:\n            return k\n        else:\n            return k - 1\n    else:\n        if k <= 1:\n            return 0\n        elif k == 2:\n            if arr1[0] < arr1[1] or arr2[0] < arr2[1]:\n                return 0\n            else:\n                if arr1[0] < arr2[0]:\n                    return 1\n                else:\n                    return 1 + arr1_size - 1\n        else:\n            if k % 2 == 0:\n                if arr1[0] < arr1[1]:\n                    return find_kth(arr1[:k//2], arr2, k//2)\n                else:\n                    return find_kth(arr1, arr2[:k//2], k//2)\n            else:\n                if arr1[0] < arr2[0]:\n                    return k//2 + 1 + find_kth(arr1[k//2:], arr2, k - k//2)\n                else:\n                    return k//2 + 1 + find_kth(arr1, arr2[k//2:], k - k//2)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # solution 1 - sorting\n    arr1 = merge_sort(arr1)\n    arr2 = merge_sort(arr2)\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    index1 = 0\n    index2 = 0\n    while index1 < arr1_len and index2 < arr2_len:\n        if arr1[index1] < arr2[index2]:\n            index1 += 1\n        elif arr1[index1] > arr2[index2]:\n            index2 += 1\n        else:\n            if k == 1:\n                return arr1[index1]\n            k -= 1\n            index1 += 1\n            index2 += 1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = p2 = 0\n    while p1 < len(arr1) and p2 < len(arr2):\n        if arr1[p1] <= arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 == len(arr1):\n        return arr2[p2 + k - 1]\n    if p2 == len(arr2):\n        return arr1[p1 + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i] if i < len(arr1) else arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    t = n\n    sum = 0\n    while n>0:\n        r = n%10\n        sum = sum + r**3\n        n = n//10\n    if t==sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    \n    sum = 0\n    \n    for char in string:\n        sum += int(char)**len(string)\n    \n    return True if sum == number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while number > 0:\n        remainder = number % 10\n        sum += remainder ** 3\n        number = number // 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=0\n    n=number\n    while n!=0:\n        t=n%10\n        s=s+pow(t,3)\n        n=n//10\n    if s==number:\n        print(number,\" is armstrong number\")\n    else:\n        print(number,\" is not armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    number_str = str(number)\n    for char in number_str:\n        total += int(char) ** len(number_str)\n    return True if number == total else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    if number < 1:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        #print(temp)\n        digit = temp % 10\n        sum += digit**3\n        temp //= 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    tmp = number\n    while tmp > 0:\n        digit = tmp % 10\n        sum += digit ** 3\n        tmp //= 10\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n        average = sum/i\n    return sum, average\n    \n    "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if (number == 0):\n        return 0, 0\n    else:\n        return (number + (sum_average(number - 1)[0])) / (number + sum_average(number - 1)[1]), sum_average(number - 1)[1] + number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n        average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum += i\n        average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    count=0\n    for i in range(1,number+1):\n        sum+=i\n        count+=1\n    print(\"Sum of first \" + str(number) + \" natural numbers is \"+str(sum))\n    print(\"Average of first \" + str(number) + \" natural numbers is \"+str(sum/count))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < number:\n        sum = sum + i\n        i += 1\n    average = sum / number\n    print('Sum of first', number, 'numbers is:', sum, '\\nAverage of first', number, 'numbers is:', average)\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    count = 0\n    while count < number:\n        sum_n += count\n        count += 1\n    average_n = sum_n / number\n    return sum_n, average_n\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,number+1):\n        sum+=i\n    average=sum/number\n    print(\"Sum = \" + str(sum))\n    print(\"Average = \" + str(average))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num_sum = 0\n    num_avg = 0\n    if n > 1:\n        for i in range(1, n+1):\n            num_sum += i\n            num_avg = num_sum / n\n    else:\n        num_sum = 1\n        num_avg = 1\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        print(\"\\nThe given number is even\")\n    else :\n        print(\"\\nThe given number is odd\")\n    "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #n = int(input(\"enter the number : \"))\n    if n%2 == 0:\n        print(\"yes\")\n    else:\n        print(\"no\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(True)\n    else : \n        print(False)\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2, n) : \n            if (n % i) == 0 : \n                print(False) \n                break \n        else : \n            print(True) \n    else : \n        print(False)\n    \ndef is_Palindrome(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == s[::-1] : \n        print(\"Palindrome\") \n    else : \n        print(\"Not Palindrome\")\n    \ndef is_PowerOfTwo(n) : \n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    if (n & (n - 1) == 0) : \n        print(\"Power of 2\") \n    else : \n        print(\"Not Power of 2\")\n    \ndef is_PerfectNumber(num) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, num+1) : \n        if num % i == 0 : \n            sum += i\n    if sum == num : \n        print(\"Perfect\")\n    else : \n        print(\"Not Perfect\")\n    \ndef is_PalindromeNumber(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    is_pal = True\n    for i in range(0, l//2) :\n        if s[i]!= s[l - i - 1] :\n            is_pal = False\n            break\n    if is_pal : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_PrimeNumber(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2, n) : \n        if n % i == 0 : \n            print(\"No\")\n            break\n    else : \n        print(\"Yes\")\n    \ndef is_PentagonalNumber(n) : \n    '''\n    Write a python function to check whether a given number is pentagonal or not.\n    '''\n    x, y = 1, 1\n    while (x + y) * y <= n :\n        x, y = (x + y) * y, x + y\n    if x * x == n : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_HarshadNumber(n) : \n    '''\n    Write a python function to check whether a given number is Harshad or not.\n    '''\n    while n > 0 : \n        a = n % 10\n        n = n // 10\n        if n > 0 and a % 2!= 0 : \n            print(\"No\")\n            break\n        elif n == 0 : \n            print(\"Yes\")\n        else : \n            print(\"Yes\")\n    \ndef is_Palindrome_With_Atleast_Two_Chars(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    is_pal = True\n    for i in range(0, l//2) :\n        if s[i]!= s[l - i - 1] :\n            is_pal = False\n            break\n    if is_pal : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_Palindrome_With_Atleast_One_Char(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    is_pal = True\n    for i in range(0, l//2) :\n        if s[i]!= s[l - i - 1] :\n            is_pal = False\n            break\n    if is_pal : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_Palindrome_With_Atleast_Three_Chars(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    is_pal = True\n    for i in range(0, l//2) :\n        if s[i]!= s[l - i - 1] :\n            is_pal = False\n            break\n    if is_pal : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_Palindrome_With_Atleast_Five_Chars(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    is_pal = True\n    for i in range(0, l//2) :\n        if s[i]!= s[l - i - 1] :\n            is_pal = False\n            break\n    if is_pal : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_PentagonalNumber_With_Atleast_Two_Chars(n) : \n    '''\n    Write a python function to check whether a given number is pentagonal or not.\n    '''\n    n = int(n)\n    i = 1\n    while i * (3 * i - 1) // 2 <= n : \n        i += 1\n    if i * (3 * i - 1) // 2 == n : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_PentagonalNumber_With_Atleast_One_Char(n) : \n    '''\n    Write a python function to check whether a given number is pentagonal or not.\n    '''\n    n = int(n)\n    i = 1\n    while i * (3 * i - 1) // 2 <= n : \n        i += 1\n    if i * (3 * i - 1) // 2 == n : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_PentagonalNumber_With_Atleast_Three_Chars(n) : \n    '''\n    Write a python function to check whether a given number is pentagonal or not.\n    '''\n    n = int(n)\n    i = 1\n    while i * (3 * i - 1) // 2 <= n : \n        i += 1\n    if i * (3 * i - 1) // 2 == n : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_PentagonalNumber_With_Atleast_Five_Chars(n) : \n    '''\n    Write a python function to check whether a given number is pentagonal or not.\n    '''\n    n = int(n)\n    i = 1\n    while i * (3 * i - 1) // 2 <= n : \n        i += 1\n    if i * (3 * i - 1) // 2 == n : \n        print(\"Yes\")\n    else : \n        print(\"No\")\n    \ndef is_HarshadNumber_With_Atleast_Two_Chars(n) : \n    '''\n    Write a python function to check whether a given number is Harshad or not.\n    '''\n    n = int(n)\n    while n > 0 : \n        a = n % 10\n        n = n // 10\n        if n > 0 and a % 2!= 0 : \n            print(\"No\")\n            break\n        elif n == 0 : \n            print(\"Yes\")\n        else : \n            print(\"Yes\")\n    \ndef is_HarshadNumber_With"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2 == 0) :\n        print(f\"The Given number is even\")\n    else:\n        print(f\"The Given number is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2==0) :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"{} is Even\".format(n)) \n    else : \n        print(\"{} is Odd\".format(n)) \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for i in str1:\n        if i in char_set:\n            return i\n        char_set.add(i)\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str(input(\"Enter a string \"))\n    return(s.find(s.count(s[0])>1))\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your Code Here\n    #print(\"Please enter the string:\")\n    #str1 = input()\n    #for i in str1:\n    #    count = 1\n    #    for j in range(1, len(str1)):\n    #        if i == str1[j]:\n    #            count += 1\n    #            if count >= 2:\n    #                break\n    #    if count == 2:\n    #        print(\"The first repeated character is: \", i)\n    #        break\n    #else:\n    #    print(\"No repeated character in the given string\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    for i in range(0, len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1=='':\n        return None\n    for x in range(len(str1)-1):\n        if str1[x] == str1[x+1]:\n            return str1[x]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    #Input: string\n    #Output: character if found or -1 if not found\n    \n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)-1):\n        if str1.startswith(str1[i], i+1):\n            print(\"The first repeated charater in the string is %s\" %(str1[i]))\n            return\n    print(\"No repeated charater found in the string\")\n    "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(2,n):\n        if i%5==0 or i%3==0:\n            lucid.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n % 2 == 0:\n        return get_ludic(n-1) + get_ludic(n-2) + get_ludic(n-3)\n    else:\n        return get_ludic(n-2) + get_ludic(n-3)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(num):\n        num_str = str(num)\n        if 'l' in num_str or 'd' in num_str:\n            return True\n        else:\n            return False\n    for i in range(2, n):\n        if is_ludic(i):\n            yield i\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_lucid(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [1]\n    if n == 3:\n        return [1, 2]\n    ludic = []\n    for i in range(2, n):\n        ludic.append(i)\n        if not check_primitive_root(i):\n            for j in range(2, i-1):\n                if pow(j, i-2, i) == 1:\n                    break\n            else:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1,n):\n        if i%7==0 or i%5==0:\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    count = 0\n    for i in range(n):\n        if is_lucky(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n):\n        luc_counter = 0\n        ludic_number = i\n        while luc_counter < 5:\n            if is_lucid(ludic_number):\n                ludic_numbers.append(ludic_number)\n            luc_counter += 1\n            ludic_number = luc_counter * luc_number\n    return sorted(ludic_numbers)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def ludic(n):\n        if n==1:\n            return 1\n        elif n==2:\n            return 2\n        elif n==3:\n            return 3\n        else:\n            return (lucd(n-1) + ludic(n-2)) % (10**9 + 7)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse = s.split(' ')\n    reverse.reverse()\n    return''.join(reverse)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    string = s.split(' ')\n    string = list(reversed(string))\n    return''.join(string)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words_reversed = words[::-1]\n    return''.join(words_reversed)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    else:\n        return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #s = 'hello world!'\n    s = s.split(' ')\n    s.reverse()\n    #print(' '.join(s))\n    return''.join(s)\n    \n    #s = 'hello world!'\n    #return''.join(s.split(' ')[::-1])\n    \ndef reverse_words_string_by_word(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #s = 'hello world!'\n    return''.join(s.split(' ')[::-1])\n    \ndef reverse_words_string_by_word_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #s = 'hello world!'\n    s = s.split(' ')\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(' ','')[::-1]\n    \n    \n    \ndef reverse_words_inplace(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n    \n    \ndef reverse_words_inplace_pythonic(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #s = s[::-1]\n    #return''.join(reversed(s.split()))\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    s =''.join(s)\n    print(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reversed_words = \"\"\n    words = s.split()\n    for word in words:\n        reversed_words = reversed_words + word[::-1] + \" \"\n    return reversed_words\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_split = s.split(\" \")\n    s_split.reverse()\n    s = \" \".join(s_split)\n    return s\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 0:\n        return False\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    isPrime = False\n    if num == 1:\n        isPrime = False\n    elif num == 2:\n        isPrime = True\n    else:\n        for i in range(2,num-1):\n            if num % i == 0:\n                isPrime = False\n                break\n            else:\n                isPrime = True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in range(2, num // 2 + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num in range(2,num):\n        return False\n    elif num < 1:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            print(num,'is not a prime number')\n            break\n        else:\n            print(num,'is a prime number')\n            break\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef rad_to_deg(degree)"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef deg_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef hms_deg(deg):\n    '''\n    Write a function to convert decimal degree to HMS.\n    '''\n    deg = math.floor(deg)\n    h = int(deg/100)\n    m = (deg - 100*h)/60\n    s = (deg - 100*h - 60*m)/1\n    return(h,m,s)\ndef deg_hms(hms):\n    '''\n    Write a function to convert HMS to decimal degree.\n    '''\n    h = hms[0]\n    m = hms[1]\n    s = hms[2]\n    return h*100 + m/60 + s/3600\ndef get_dms(deg):\n    '''\n    Write a function to convert decimal degree to DMS.\n    '''\n    deg = math.floor(deg)\n    d = int(deg/100)\n    m = (deg - 100*d)/60\n    s = (deg - 100*d - 60*m)/1\n    return d,m,s\ndef dms_deg(dms):\n    '''\n    Write a function to convert DMS to decimal degree.\n    '''\n    d = dms[0]\n    m = dms[1]\n    s = dms[2]\n    return d+m/60 + s/3600\ndef get_dms_deg(dms):\n    '''\n    Write a function to convert decimal degree to DMS.\n    '''\n    d = dms[0]\n    m = dms[1]\n    s = dms[2]\n    return d+m/60 + s/3600\ndef get_arc_deg(dms):\n    '''\n    Write a function to convert decimal degree to arc degrees.\n    '''\n    d = dms[0]\n    m = dms[1]\n    s = dms[2]\n    return deg_rad(d+m/60+s/3600)\ndef get_arc_rad(arc_deg):\n    '''\n    Write a function to convert decimal degree to arc radians.\n    '''\n    return deg_rad(arc_deg)\ndef get_arc_dms(radian):\n    '''\n    Write a function to convert arc radians to decimal degrees.\n    '''\n    return get_dms_deg(get_dms(radian_degree(radian)))\ndef get_arc_deg_dms(arc_rad):\n    '''\n    Write a function to convert arc radians to decimal degree and arc degrees.\n    '''\n    return get_dms_deg(get_dms(arc_rad)),get_dms_deg(get_dms(radian_degree(arc_rad)))\ndef get_arc_dms_rad(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return radian_degree(arc_deg),radian_degree(get_arc_deg(get_dms(arc_deg)))\ndef get_arc_dms_deg(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to decimal degree.\n    '''\n    return get_dms(arc_deg),get_dms(get_arc_deg(get_dms(arc_deg)))\ndef get_arc_deg_arc_rad(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return radian_degree(arc_deg),radian_degree(get_arc_deg(get_dms(arc_deg)))\ndef get_arc_rad_arc_deg(arc_rad):\n    '''\n    Write a function to convert arc radians to decimal degree and arc degree.\n    '''\n    return get_arc_deg(get_dms(arc_rad)),get_arc_deg(get_dms(get_arc_rad(arc_rad)))\ndef get_arc_rad_arc_deg_dms(arc_rad):\n    '''\n    Write a function to convert arc radians to decimal degree and arc degree and arc degrees.\n    '''\n    return get_arc_deg_dms(get_arc_deg(get_dms(arc_rad))),get_arc_deg_dms(get_arc_deg(get_dms(arc_rad))),get_arc_deg_dms(get_arc_deg(get_dms(arc_rad)))\ndef get_arc_rad_arc_deg_deg(arc_rad):\n    '''\n    Write a function to convert arc radians to decimal degree and arc degree and arc degrees.\n    '''\n    return get_arc_deg(get_dms(arc_rad)),get_arc_deg(get_dms(arc_rad)),get_arc_deg(get_dms(arc_rad))\ndef get_arc_rad_arc_deg_deg_dms(arc_rad):\n    '''\n    Write a function to convert arc radians to decimal degree and arc degree and arc degrees.\n    '''\n    return get_arc_deg(get_dms(arc_rad)),get_arc_deg(get_dms(arc_rad)),get_arc_deg(get_dms(arc_rad))\ndef get_deg_arc_rad(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_rad(get_arc_deg(get_dms(arc_deg)))\ndef get_deg_arc_rad_arc_deg(deg_arc_rad):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_dms(deg_arc_rad)),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad)))\ndef get_deg_arc_rad_arc_deg_dms(deg_arc_rad):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_dms(deg_arc_rad)),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad))),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad)))\ndef get_deg_arc_rad_arc_deg_deg(deg_arc_rad):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_dms(deg_arc_rad)),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad))),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad)))\ndef get_deg_arc_rad_arc_deg_deg_dms(deg_arc_rad):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_dms(deg_arc_rad)),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad))),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad))),get_arc_deg(get_dms(get_arc_rad(deg_arc_rad)))\ndef get_arc_deg_arc_deg(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_arc_deg(get_dms(arc_deg))),get_arc_deg(get_arc_deg(get_dms(arc_deg)))\ndef get_arc_deg_arc_deg_deg(arc_deg):\n    '''\n    Write a function to convert decimal degree and arc degree to arc radians.\n    '''\n    return get_arc_deg(get_arc_deg(get_dms(arc_deg))),get_arc_deg(get_arc_deg(get_dms(arc_deg)))\ndef get_arc_deg_arc_de"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef deg_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg_to_radian(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef degrees_to_radians(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degrees*math.pi/180\ndef radians_to_degrees(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*180/math.pi\ndef sin_deg(deg):\n    '''\n    Write a function to compute the sine of a degree\n    '''\n    return math.sin(deg)\ndef sin_rad(radian):\n    '''\n    Write a function to compute the sine of a radian\n    '''\n    return math.sin(radian)\ndef cos_deg(deg):\n    '''\n    Write a function to compute the cosine of a degree\n    '''\n    return math.cos(deg)\ndef cos_rad(radian):\n    '''\n    Write a function to compute the cosine of a radian\n    '''\n    return math.cos(radian)\ndef tan_deg(deg):\n    '''\n    Write a function to compute the tangent of a degree\n    '''\n    return math.tan(deg)\ndef tan_rad(radian):\n    '''\n    Write a function to compute the tangent of a radian\n    '''\n    return math.tan(radian)\ndef asin_deg(deg):\n    '''\n    Write a function to compute the arcsine of a degree\n    '''\n    return math.asin(deg)\ndef asin_rad(radian):\n    '''\n    Write a function to compute the arcsine of a radian\n    '''\n    return math.asin(radian)\ndef acos_deg(deg):\n    '''\n    Write a function to compute the arccosine of a degree\n    '''\n    return math.acos(deg)\ndef acos_rad(radian):\n    '''\n    Write a function to compute the arccosine of a radian\n    '''\n    return math.acos(radian)\ndef atan_deg(deg):\n    '''\n    Write a function to compute the arctangent of a degree\n    '''\n    return math.atan(deg)\ndef atan_rad(radian):\n    '''\n    Write a function to compute the arctangent of a radian\n    '''\n    return math.atan(radian)\ndef arcsin_deg(deg):\n    '''\n    Write a function to compute the arcinesine of a degree\n    '''\n    return math.asin(deg)\ndef arcsin_rad(radian):\n    '''\n    Write a function to compute the arcinesine of a radian\n    '''\n    return math.asin(radian)\ndef arccos_deg(deg):\n    '''\n    Write a function to compute the arccosine of a degree\n    '''\n    return math.acos(deg)\ndef arccos_rad(radian):\n    '''\n    Write a function to compute the arccosine of a radian\n    '''\n    return math.acos(radian)\ndef arctan_deg(deg):\n    '''\n    Write a function to compute the arctangent of a degree\n    '''\n    return math.atan(deg)\ndef arctan_rad(radian):\n    '''\n    Write a function to compute the arctangent of a radian\n    '''\n    return math.atan(radian)\ndef is_positive(deg):\n    '''\n    Write a function to check if a degree is positive\n    '''\n    if deg >= 0:\n        return True\n    else:\n        return False\ndef is_negative(deg):\n    '''\n    Write a function to check if a degree is negative\n    '''\n    if deg < 0:\n        return True\n    else:\n        return False\ndef square_deg(deg):\n    '''\n    Write a function to compute the square of a degree\n    '''\n    return deg*deg\ndef square_rad(radian):\n    '''\n    Write a function to compute the square of a radian\n    '''\n    return radian*radian\ndef square_deg_rad(deg, radian):\n    '''\n    Write a function to compute the square of a degree\n    '''\n    return deg*deg+radian*radian\ndef square_rad_deg(deg, radian):\n    '''\n    Write a function to compute the square of a radian\n    '''\n    return deg*deg+radian*radian\ndef sqrt_deg(deg):\n    '''\n    Write a function to compute the square root of a degree\n    '''\n    return deg*deg\ndef sqrt_rad(radian):\n    '''\n    Write a function to compute the square root of a radian\n    '''\n    return radian*radian\ndef pow_deg(deg, power):\n    '''\n    Write a function to compute the power of a degree\n    '''\n    return deg*deg*deg*deg*deg*deg*deg*deg*deg*deg*deg*deg\ndef pow_rad(radian, power):\n    '''\n    Write a function to compute the power of a radian\n    '''\n    return radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian*radian\ndef sinh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic sine of a degree\n    '''\n    return math.sinh(deg)\ndef sinh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic sine of a radian\n    '''\n    return math.sinh(radian)\ndef cosh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic cosine of a degree\n    '''\n    return math.cosh(deg)\ndef cosh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic cosine of a radian\n    '''\n    return math.cosh(radian)\ndef tanh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic tangent of a degree\n    '''\n    return math.tanh(deg)\ndef tanh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic tangent of a radian\n    '''\n    return math.tanh(radian)\ndef asinh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic arcsine of a degree\n    '''\n    return math.asinh(deg)\ndef asinh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic arcsine of a radian\n    '''\n    return math.asinh(radian)\ndef acosh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic arccosine of a degree\n    '''\n    return math.acosh(deg)\ndef acosh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic arccosine of a radian\n    '''\n    return math.acosh(radian)\ndef atanh_deg(deg):\n    '''\n    Write a function to compute the hyperbolic arctangent of a degree\n    '''\n    return math.atanh(deg)\ndef atanh_rad(radian):\n    '''\n    Write a function to compute the hyperbolic arctangent of a radian\n    '''\n    return math.atanh(radian)\ndef arcsinh_deg(deg):\n    '''"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef deg2rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef deg2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radians(degree):\n    '''\n    Write a function t"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = pattern.search(text)\n    if m:\n        print(m.group())\n        return m.group(), m.start(), m.end()\n    else:\n        print(\"No match found\")\n        return \"No Match\", 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.finditer(text)\n    for m in match:\n        yield text[m.start():m.end()], m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def get_literal(literal_list):\n        literal = ''\n        for i in literal_list:\n            literal = literal + i +''\n        return literal[:-1]\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    res = p.search(text)\n    return res.group(0), res.start(), res.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.search(pattern, text)!= None:\n        return re.search(pattern, text).group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace(\"{\", \"\").replace(\"}\", \"\")\n    pattern = re.escape(pattern)\n    p = re.compile(pattern)\n    match = p.search(text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    str_to_search = text\n    regex = re.compile(pattern)\n    matches = regex.finditer(str_to_search)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    sub = re.findall(pattern, text)\n    return sub\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    return regex.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # your code here\n    res = re.finditer(pattern, text)\n    for i in res:\n        print(i.group())\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return (bell_Number(n - 1)) * (n + 1) // 2\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return (n*bell_Number(n-1))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    if(n <= 0):\n        return bell_number\n    bell_number = bell_number + 1\n    # for nth bell number:\n    for i in range(1,n+1):\n        bell_number = bell_number * i\n    return bell_number\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n    \ndef roman_Numeral(roman_Str):\n    '''\n    Write a python function to convert roman numeral into an integer.\n    '''\n    rom_Conv_Dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_Int = 0\n    prev = 0\n    for i in roman_Str:\n        curr = rom_Conv_Dict[i]\n        if curr > prev:\n            roman_Int = roman_Int - prev\n        roman_Int = roman_Int + curr\n        prev = curr\n    return roman_Int\n    \ndef display_Even_Odd(n):\n    '''\n    Write a python function to display even numbers between 1 to n.\n    '''\n    if (n == 0):\n        return\n    for i in range(1,n + 1):\n        if (i % 2 == 0):\n            print(i, end = \" \")\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(2,n+1):\n        bell = bell + (i - 1) * bell / i\n    return int(bell)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return bell_Number(n-1)+2*bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    total=1\n    for i in range(1,n):\n        total=total*(i+1)\n    return total\nprint(bell_Number(6))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell_numbers = [1]\n    for i in range(n):\n        bell_numbers.append(bell_numbers[i]+ bell_numbers[i + 1])\n        \n    return bell_numbers[-1]\n    "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Initialize an array with n elements \n    bell = [None]*(n+1)\n    bell[0] = 1\n    \n    # The bell sequence is 1, 2, 4, 7, 12, 19, 37, 61, 89, 122, 364, 719, 1361, \u2026 \n    for i in range(1,len(bell)):\n        bell[i] = bell[i-1] + bell[i-2]\n        \n    # Return nth bell number\n    return bell[n-1]\n    \n    \n    \n    \ndef find_leaps_from_date(date): \n    '''\n    Given a date as \"Jan 10, 2019\", write a function to find out the \n    leap years which were made in that given month. \n    '''\n    \n    # Convert date to int\n    year, month, day = map(int, date.split(\",\"))\n    \n    # Initialize a list of leap years\n    leap_years = []\n    \n    # Loop from 1 to the year, \n    # If year is divisible by 4 and is multiple of 100 or 400, \n    # it is a leap year. \n    for year in range(1,year+1):\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            leap_years.append(year)\n            \n    # Find the leap years and add them to the list\n    leap_years = list(set(leap_years))\n    leap_years.sort()\n    \n    # Convert the date to the date of month 1. \n    month, day = list(map(int,date.split(\",\")))\n    month -= 1\n    \n    # Loop through the leap years and find the corresponding months\n    for year in leap_years:\n        # Loop until the month of the date is less than the month of the date of month 1\n        while month >= 1 and month < month+1:\n            if leap_years.index(year) == month:\n                leap_years.remove(year)\n            month += 1\n            \n    # Return the corresponding months\n    return leap_years\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = 0\n    while (n > 0): \n        s += (2*n-1)\n        n -= 1\n    return s\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1)\n    if (k == 1):\n        return list1[0]\n    elif (k == 2):\n        return list1[k - 1]\n    else:\n        k_1 = k - 1\n        for i in range(k):\n            if i!= k - 1:\n                if (i + 1!= k_1):\n                    list1[i], list1[k - 1] = list1[k - 1], list1[i]\n                elif (i + 1 == k_1):\n                    list1[i], list1[i + 1] = list1[i + 1], list1[i]\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L + 1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1)-1\n    while k>=1:\n        if k == L:\n            break\n        k = k-1\n    for i in range(k+1):\n        list1.pop(i)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #1st Approach\n    # value_list = list1[:]\n    # value_list.remove(list1[L - 1])\n    # return value_list\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= 2:\n        return list1[:-1]\n    else:\n        if L == 1:\n            return list1[:-1]\n        else:\n            x = list1[L-1]\n            list1 = list1[0:-1]\n            list1.append(x)\n            return remove_kth_element(list1, L-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1)==0:\n        return list1\n    else:\n        temp=list1[:]\n        temp.remove(temp[k])\n        return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_copy = list1[:]\n    del list_copy[L-1]\n    return list_copy\n    "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    x = list1.pop(L)\n    return x\n    \n    \ndef remove_kth_element_using_pop(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    x = list1.pop(L)\n    return x\n    \n    \ndef remove_kth_element_using_pop_with_index(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    x = list1.pop(L)\n    return x\n    \n    \ndef remove_duplicate_elements(list1):\n    '''\n    Write a python function which takes a list and returns a list with duplicate elements removed.\n    '''\n    x = []\n    for i in list1:\n        if i not in x:\n            x.append(i)\n    return x\n    \n    \ndef remove_duplicate_elements_using_set(list1):\n    '''\n    Write a python function which takes a list and returns a list with duplicate elements removed.\n    '''\n    x = set(list1)\n    return x\n    \n    \ndef remove_duplicate_elements_using_set_with_key_value(list1):\n    '''\n    Write a python function which takes a list and returns a list with duplicate elements removed.\n    '''\n    x = dict()\n    for i in list1:\n        if i not in x:\n            x[i] = 1\n        else:\n            x[i] += 1\n    return x\n    \n    \ndef remove_duplicate_elements_using_set_with_key_value_in_order(list1):\n    '''\n    Write a python function which takes a list and returns a list with duplicate elements removed.\n    '''\n    x = set()\n    for i in list1:\n        if i not in x:\n            x.add(i)\n        else:\n            pass\n    return x\n    \n    \ndef sort_list(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    x = sorted(list1)\n    return x\n    \n    \ndef sort_list_using_sort(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort()\n    return list1\n    \n    \ndef sort_list_using_sort_with_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = str)\n    return list1\n    \n    \ndef sort_list_using_sort_with_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x)\n    return list1\n    \n    \ndef sort_list_using_key_value(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0])\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0])\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    list1.sort(key = lambda x:x[0], reverse = True)\n    return list1\n    \n    \ndef sort_list_using_key_value_in_order_with_reverse_using_reverse_using_key_using_key_using_key(list1):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list) or N < 0:\n        return False\n    else:\n        N = N-1\n        new_list = []\n        for i in test_list:\n            new_list.append(i[N])\n        return max(new_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    if N > len(test_list) or N < 0:\n        return None\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    max_index = 0\n    for index, i in enumerate(test_list):\n        if(max_index < len(i)):\n            max_index = len(i)\n    for index in range(len(test_list)):\n        temp = 0\n        for j in range(len(test_list[index])):\n            if(j == N-1):\n                temp += test_list[index][j]\n        max_list.append(temp)\n    for x in max_list:\n        if(x > max_index):\n            max_index = x\n    return max_index\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_length = len(test_list)\n    if N > list_length:\n        return None\n    else:\n        return max(map(lambda x: x[N-1], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort()\n    return test_list[-N]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if max < test_list[i][N]:\n            max = test_list[i][N]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        raise ValueError('test_list cannot be empty!')\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0],lst[0][1]],lst[1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append(i[0])\n        merged.append(i[1])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged\n    \n    \n    \n    \n    \nmerge([[2,4],[5,6],[8,10]])\nmerge([[1,2],[5,6]])\nmerge([[3,5],[7,8],[9,11]])\nmerge([[1,2],[3,4]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = []\n    y = []\n    for i in range(len(lst)):\n        x.append(lst[i][0])\n        y.append(lst[i][1])\n    return x,y"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    merged = []\n    for i in range(0,len(lst),2):\n        merged.append([lst[i],lst[i+1]])\n    return merged\nmerge([[1, 3], [2, 6], [0, 4]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    else:\n        return [lst[0][0], lst[0][1]], merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_list = []\n    for i in lst:\n        merge_list.append(i[0])\n        merge_list.append(i[1])\n    return(merge_list)"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key=lambda x: x[0])\n    merged = []\n    for i in range(len(lst)):\n        if i == 0 or merged[-1][1]!= lst[i][0]:\n            merged.append(lst[i])\n        else:\n            merged[-1][1] = lst[i][1]\n    return merged\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    ret = [[],[]]\n    for i in range(len(lst)):\n        ret[0].append(lst[i][0])\n        ret[1].append(lst[i][1])\n    return ret\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [element1 for sublist in lst for element1, element2 in sublist]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(0,len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    out_list = []\n    cumm_sum = 0\n    for i in range(len(test_list)):\n        cumm_sum += test_list[i]\n        out_list.append(cumm_sum)\n    return out_list\n    \nprint(cummulative_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = list(test_list)\n    return sum(sum_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    i = 0\n    while i <= len(test_list)-1:\n        cummulative_sum += test_list[i]\n        i += 1\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    cummulative = 0\n    for i in test_list:\n        cummulative = cummulative + i\n        sum_list.append(cummulative)\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = []\n    for i in range(len(test_list)-1):\n        res.append(sum(test_list[:i+1]))\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    else:\n        temp = test_list[0]\n        for i in range(1, len(test_list)):\n            temp += test_list[i]\n        return temp\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_values = 0\n    for i in range(0,len(test_list)):\n        sum_values += test_list[i]\n    return sum_values\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return(sum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cummulative_sum_list.append(test_list[i])\n        else:\n            cummulative_sum_list.append(cummulative_sum_list[i-1] + test_list[i])\n    return cummulative_sum_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #Answer:\n    return list(map(lambda t: sum(t)/len(t), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return (total/len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    n = len(nums)\n    t = 0\n    for n in nums:\n        t += n\n    return t / n\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple((sum(i)/len(i)) for i in nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return(sum(nums)/len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    res = []\n    tot = 0\n    for i in range(len(nums)):\n        tot += nums[i][0]\n        res.append(tot/(i+1))\n    return res\n    "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = list(nums)\n    average_list = []\n    for item in tuple_list:\n        total = 0\n        for subitem in item:\n            total += subitem\n        average_list.append(total / len(item))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple([sum(i)/len(i) for i in nums])\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    n = len(nums)\n    new_list = []\n    for i in nums:\n        new_list.append(sum(i)/n)\n    return tuple(new_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + ((test_tup1[i] % test_tup2[i]),)\n    print(new_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x%y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tuple = []\n    for i in range(len(test_tup1)):\n        mod_tuple.append(test_tup1[i] % test_tup2[i])\n    return mod_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # for i in range(len(test_tup1)):\n    #     if test_tup1[i] % test_tup2[i]!= 0:\n    #         return False\n    # return True\n    \n    # method-1\n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y:x%y,test_tup1,test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must be of the same length\"\n    else:\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = (x%y for x, y in zip(test_tup1, test_tup2))\n    return result\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x%y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(\"\\ntuple_modulo:\")\n    print(f\"test_tup1 = {test_tup1}\")\n    print(f\"test_tup2 = {test_tup2}\")\n    print(f\"Return = {tuple_modulo(test_tup1, test_tup2)}\\n\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # make a table with (step, steps, step, steps)\n    # use the table to check the corresponding jump\n    # return the number of jumps\n    # size of table : d * 2\n    # d = 2 \n    # table = {(0, 1, 0, 0), (1, 1, 1, 0), (2, 1, 2, 0), (1, 1, 1, 1), (2, 1, 1, 2), (1, 1, 1, 2), (2, 1, 1, 2)}\n    table = {}\n    for i in range(d):\n        table[(i, 0, 0)] = 1\n    for i in range(d):\n        table[(0, i, 0)] = 1\n    for i in range(d):\n        table[(i, i, 0)] = 1\n    for i in range(d):\n        table[(i, i, i)] = 1\n    for i in range(d):\n        table[(0, i, i)] = 1\n    for i in range(d):\n        table[(i, 0, i)] = 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return -1\n    maxJumps = float('-inf')\n    for i in range(1, steps):\n        minJumps = float('inf')\n        for j in range(1, d+1):\n            if i-j < 1:\n                continue\n            minJumps = min(minJumps, minJumps(i-j, d))\n        maxJumps = max(maxJumps, i+minJumps)\n    return maxJumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    jumps = 0\n    while True:\n        x, y = x+d, y+d\n        if x == steps or y == steps:\n            return jumps + 1\n        if (x, y) == (0, 0):\n            return jumps\n        jumps += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    while(steps>0):\n        steps = steps-1\n        if d == 0 and steps == 0:\n            return J\n        elif d<0:\n            return -1\n        elif d>0:\n            J += 1\n            d = d -2\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # (1) If d <= 2 * steps, return 1\n    if d <= 2 * steps:\n        return 1\n    # (2) If d > 2 * steps, we need to step more than 1 step to get to d \n    #     This is because we can step 1 step or 2 steps, but not both\n    if d > 2 * steps:\n        return (d - 2 * steps) // steps + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: return 0\n    a, b = 0, 1\n    count = 0\n    while b <= steps:\n        count = (count + a) if d == b else (count + a + 1)\n        a = b - d\n        b = b + 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def minJumps(self, steps, d):\n        # Create a table of jumps \n        # Each element represents number of jumps for different d\n        # and each element in each row represents for different j\n        # i.e. row[j] represents for different j \n        # and row[j] = min jumps for d = j\n        # \n        # Create a nxn matrix of jumps for each d\n        # for each d = 0, 1, 2,..., d+1\n        # and calculate min jumps for d = 0, 1, 2,..., d+1\n        # For each d = 0, 1, 2,..., d+1, calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        #\n        # Return the result \n        # \n        # For example:\n        # n = 5, steps = [2,2,2,1,1], d = 2\n        # row = \n        # 0,1,1,0,0\n        # 1,1,0,1,0\n        # 1,0,0,1,1\n        # 0,1,0,0,1\n        # 0,0,0,0,0\n        #\n        # row[d] = min jumps for d = d\n        # For each d = 0, 1, 2,..., d+1\n        # calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        # \n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        # \n        # For each d = 0, 1, 2,..., d+1\n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        \n        # row[0] = 0, row[1] = 1, row[2] = 1, row[3] = 0, row[4] = 0\n        # row[1] = 1, row[2] = 1, row[3] = 1, row[4] = 0\n        # row[2] = 1, row[3] = 1, row[4] = 0\n        # row[3] = 1, row[4] = 1\n        # row[4] = 0\n        \n        row = [0]*d+[1]*(d+1)+[0]*(d+1)+[1]*(d+1)+[0]\n        \n        for i in range(4, steps+1):\n            for j in range(d, 0, -1):\n                # Now, j is the minimum of j,j+1 and j+2\n                # Therefore, row[j] = min_jumps for j = d, j-1, j-2,..., 0\n                if j == d:\n                    row[j] = i-j\n                elif j == d+1:\n                    row[j] = min(row[j], row[j+2])\n                else:\n                    row[j] = min(row[j], row[j+2]+row[j-1], row[j+1]+row[j-2])\n                    \n        return row[0]\n        \n    def minJumps2(self, steps, d):\n        # Create a table of jumps \n        # Each element represents number of jumps for different d\n        # and each element in each row represents for different j\n        # i.e. row[j] represents for different j \n        # and row[j] = min jumps for d = j\n        # \n        # Create a nxn matrix of jumps for each d\n        # for each d = 0, 1, 2,..., d+1\n        # and calculate min jumps for d = 0, 1, 2,..., d+1\n        # For each d = 0, 1, 2,..., d+1, calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        #\n        # Return the result \n        # \n        # For example:\n        # n = 5, steps = [2,2,2,1,1], d = 2\n        # row = \n        # 0,1,1,0,0\n        # 1,1,0,1,0\n        # 1,0,0,1,1\n        # 0,1,0,0,1\n        # 0,0,0,0,0\n        #\n        # row[d] = min jumps for d = d\n        # For each d = 0, 1, 2,..., d+1\n        # calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        # \n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        # \n        # For each d = 0, 1, 2,..., d+1\n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        \n        row = [0]*d+[1]*(d+1)+[0]*(d+1)+[1]*(d+1)+[0]\n        \n        for i in range(4, steps+1):\n            for j in range(d, 0, -1):\n                # Now, j is the minimum of j,j+1 and j+2\n                # Therefore, row[j] = min_jumps for j = d, j-1, j-2,..., 0\n                if j == d:\n                    row[j] = i-j\n                elif j == d+1:\n                    row[j] = min(row[j], row[j+2])\n                else:\n                    row[j] = min(row[j], row[j+2]+row[j-1], row[j+1]+row[j-2])\n                    \n        return row[0]\n        \n    def minJumps3(self, steps, d):\n        # Create a table of jumps \n        # Each element represents number of jumps for different d\n        # and each element in each row represents for different j\n        # i.e. row[j] represents for different j \n        # and row[j] = min jumps for d = j\n        # \n        # Create a nxn matrix of jumps for each d\n        # for each d = 0, 1, 2,..., d+1\n        # and calculate min jumps for d = 0, 1, 2,..., d+1\n        # For each d = 0, 1, 2,..., d+1, calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        #\n        # Return the result \n        # \n        # For example:\n        # n = 5, steps = [2,2,2,1,1], d = 2\n        # row = \n        # 0,1,1,0,0\n        # 1,1,0,1,0\n        # 1,0,0,1,1\n        # 0,1,0,0,1\n        # 0,0,0,0,0\n        #\n        # row[d] = min jumps for d = d\n        # For each d = 0, 1, 2,..., d+1\n        # calculate the min jumps for d = d+1, d+2,..., d+m and store the result in row[d]\n        # \n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        # \n        # For each d = 0, 1, 2,..., d+1\n        # row[d] = min jumps for d = d+1, d+2,..., d+m\n        \n        row = [0]*d+[1]*(d+1)+[0]*(d+1)+[1]*(d+1)+[0]\n        \n        for i in range(4, steps+1):\n            for j in range(d, 0, -1):\n                # Now, j is the minimum of j,j+1 and j+2\n                # Therefore, row[j] = min_jumps for j = d, j-1, j-2,..., 0\n                if j == d:"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    # initialize\n    steps += 1\n    # left to right\n    if d > 0:\n        if (d - steps) >= 0:\n            return 1 + min_Jumps(steps, d - steps)\n        else:\n            return 1\n    # right to left\n    if d < 0:\n        if abs(d) <= steps:\n            return 1 + min_Jumps(steps, d)\n        else:\n            return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    \n    if d == 0: \n        return 1\n    \n    return min(min_Jumps(steps - 1, d), 1 + min_Jumps(steps - 1, d - steps))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0:\n        return 0\n    count = 0\n    jumps = 1\n    while steps - d >= 0:\n        steps -= d\n        count += 1\n        jumps += 1\n        d += 1\n        if steps == 0:\n            break\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1:\n        return nums2\n    elif not nums2:\n        return nums1\n    else:\n        return[nums1[0]/nums2[0],div_list(nums1[1:],nums2[1:])]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len_num1 = len(nums1)\n    len_num2 = len(nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x, y: x / y, nums1, nums2))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    count = 0\n    return_list = []\n    while count < len(nums1):\n        return_list.append(nums1[count]/nums2[count])\n        count += 1\n    return return_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1,nums2=list(nums1),list(nums2)\n    l=[]\n    for i in range(0,len(nums1)):\n        if nums1[i]%nums2[i]==0:\n            l.append(int(nums1[i]/nums2[i]))\n        else:\n            l.append(int(nums1[i]/nums2[i])+1)\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    # algorithm \n    dividend = nums1[0]\n    divisor = nums2[0]\n    for i in range(1,len(nums1)):\n        dividend = dividend * divisor\n        divisor = divisor * nums1[i]\n    \n    quotient = dividend / divisor\n    print(quotient)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1.extend(nums2)\n    return nums1\nprint(div_list([1,2,3],[1,2,3]))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a new list with all the letters\n    new_list = list(test_str)\n    # create a empty string\n    new_str = \"\"\n    # loop through the letters in the string\n    for char in new_list:\n        # if the letter is not a digit, then add it to the end\n        if char.isdigit() == False:\n            new_str = new_str + char\n    # now we have our new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # Initialize string\n    new_str = \"\"\n    \n    # Loop over each character in string\n    for char in test_str:\n        \n        # Check if character is a digit and append it to new string\n        if char.isdigit():\n            new_str += char\n            \n        # Check if character is not a digit\n        else:\n            # Check if character is not a letter\n            if not char.isalpha():\n                new_str += char\n            \n            # Check if character is letter\n            else:\n                # Check if character is uppercase\n                if char.isupper():\n                    # Check if current letter is first letter\n                    if new_str == \"\":\n                        new_str += char\n                    else:\n                        # Loop over characters in new_str\n                        for i in range(len(new_str)):\n                            # If letter is after last letter in new_str\n                            if i == len(new_str)-1:\n                                # Append letter to new_str\n                                new_str += char\n                                break\n                            # If letter is before last letter in new_str\n                            if i!= len(new_str)-1:\n                                # If new_str has no letters\n                                if new_str[i] == \" \":\n                                    new_str = new_str[:i] + char + new_str[i+1:]\n                                else:\n                                    new_str = new_str[:i] + char + new_str[i+1:]\n                                break\n        \n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    test_str = re.sub(r'\\D', '', test_str)\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('-', '')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError\n    if test_str == \"\":\n        return test_str\n    list = test_str.split(\" \")\n    list2 = []\n    for i in list:\n        if isinstance(i, str):\n            list2.append(i)\n    if not list2:\n        return \"empty\"\n    n = 1\n    while n < len(list2):\n        if list2[n - 1].isnumeric() and list2[n].isnumeric():\n            list2.remove(list2[n - 1])\n            list2.insert(n - 1, list2.pop(n))\n        elif list2[n - 1].isnumeric() and not list2[n].isnumeric():\n            if n == 1:\n                return \"\".join(list2)\n            elif list2[n - 2].isnumeric() and list2[n - 1].isnumeric():\n                list2.remove(list2[n - 1])\n                list2.insert(n - 1, list2.pop(n))\n            else:\n                if list2[n - 1].isnumeric() or list2[n - 2].isnumeric():\n                    if n == 2:\n                        return \"\".join(list2)\n                    list2.remove(list2[n - 1])\n                    list2.insert(n - 1, list2.pop(n))\n    return \"\".join(list2)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_list.sort()\n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], '', 1)\n        test_str += num_list[i]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    s = ''\n    nums = ''\n    for ch in test_str:\n        if ch.isnumeric():\n            nums += ch\n        else:\n            s += ch\n    if nums:\n        s += nums\n        return s\n    return s\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def move_num(test_str):\n        #list_str = list(test_str)\n        #list_str_2 = list_str.copy()\n        #print(list_str)\n        #print(list_str_2)\n        #list_str = list(test_str)\n        #print(list_str)\n        #print(list_str[0])\n        #print(list_str[-1])\n        list_str = list(test_str)\n        list_str.reverse()\n        print(list_str)\n        if list_str[0]!= \"0\":\n            return \"0\"+test_str\n        else:\n            return test_str\n    return move_num(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a variable to store the original string.\n    original = test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Approach 1\n    # if test_str is not str:\n    #     raise ValueError('Input string must be of type str')\n    # for i in range(len(test_str)):\n    #     if type(test_str) == str:\n    #         test_str = test_str.split(test_str)\n    #         test_str = test_str[::-1]\n    #         test_str = test_str[0]\n    #         test_str = test_str.join(test_str)\n    #         return test_str\n    # Approach 2\n    if not isinstance(test_str, str):\n        raise ValueError('Input string must be of type str')\n    for i in range(len(test_str)):\n        if type(test_str) == str:\n            test_str = test_str.split(test_str)\n            test_str = test_str[::-1]\n            test_str = test_str[0]\n            test_str = test_str.join(test_str)\n            return test_str\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.replace(\"1\", \"11\").replace(\"2\", \"22\").replace(\"3\", \"33\").replace(\"4\", \"44\").replace(\"5\", \"55\").replace(\"6\", \"66\").replace(\"7\", \"77\").replace(\"8\", \"88\").replace(\"9\", \"99\")\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    #print(a)\n    subset = []\n    size = 0\n    for i in range(len(a)):\n        for j in range(i):\n            if (a[i] % a[j] == 0):\n                subset.append(a[i])\n    subset.sort()\n    #print(subset)\n    size = len(subset)\n    #print(size)\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # This is a very stupid algorithm. It is really not an efficient one.\n    # I implemented this algorithm just to help me understand the requirement.\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a new list to represent the n choose 2 problem\n    n_choose_2 = []\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            n_choose_2.append([a[i],a[j]])\n    # create a list to store the possible sets\n    possible_sets = []\n    # count the number of elements in each subset\n    for nums in n_choose_2:\n        total = 0\n        for element in nums:\n            total += element\n        possible_sets.append(total)\n    # return the index of the largest subset\n    return possible_sets.index(max(possible_sets))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    n = len(a)\n    if n <= 1:\n        return 0\n    # print(a)\n    for i in range(n):\n        l = 0\n        for j in range(n):\n            if i!= j:\n                if a[i] % a[j] == 0:\n                    l = l + 1\n        if max_size < l:\n            max_size = l\n    # print(max_size)\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort(reverse=True)\n    # largest_subset = [a[0]]\n    largest_subset = []\n    for i in range(len(a)-1):\n        # print(largest_subset)\n        if a[i+1]%a[i] == 0:\n            largest_subset.append(a[i])\n            largest_subset.append(a[i+1])\n    return len(largest_subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    max_subset = 0\n    subsets = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            subset = a[i:j]\n            if sum(subset) % 2 == 0 and sum(subset)!= 0:\n                if len(subset) > max_subset:\n                    max_subset = len(subset)\n                    subsets = subset\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    n = len(a)\n    if n == 1:\n        return a\n    a.sort()\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for j in range(n):\n        for i in range(j):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    # n = 4, largest_subset = [[],1,1,2], [[],1,2], [[],2], [[],3], [[],3,3], [[],3,4], [[],3,4,4], [[],3,4,5], [[],3,4,5,5], [[],3,4,5,6], [[],3,4,5,6,6], [[],3,4,5,6,6,6], [[],3,4,5,6,6,7], [[],3,4,5,6,6,7,7], [[],3,4,5,6,6,7,7,7], [[],3,4,5,6,6,7,7,7,7]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for j in range(1, n+1):\n        for k in range(1, n+1):\n            if k >= a[j-1]:\n                dp[j][k] = max(dp[j-1][k], dp[j][k-a[j-1]] + 1)\n            else:\n                dp[j][k] = dp[j-1][k]\n    m = max(dp[n])\n    print(dp)\n    return m\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    import numpy as np\n    \n    '''\n    brute force solution\n    - create an array of length 'a'\n    - for every element in 'a'\n        - if it is divisible by its prev element, add it to the subset\n    - return the length of the subset\n    '''\n    \n    def bruteForce(a):\n        '''\n        brute force solution\n        '''\n        if len(a) == 1:\n            return a\n        \n        brute_force_subset = []\n        \n        for i in range(len(a)):\n            if a[i] % a[i-1] == 0:\n                brute_force_subset.append(a[i])\n            \n        return len(brute_force_subset)\n    \n    '''\n    bottom up\n    - create a dp array\n    - for every element in 'a'\n        - add 0 to the dp array\n        - for every element in 'a'\n            - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def bottomUp(a):\n        '''\n        bottom up solution\n        '''\n        dp_array = [0] * len(a)\n        \n        for i in range(len(a)):\n            if dp_array[i] == 0:\n                for j in range(i, -1, -1):\n                    if a[j] % a[i] == 0:\n                        dp_array[i] = 1\n                        break\n        \n        return dp_array\n    \n    '''\n    top down\n    - create a dp array\n    - for every element in 'a'\n        - add 0 to the dp array\n        - for every element in 'a'\n            - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def topDown(a):\n        '''\n        top down solution\n        '''\n        dp_array = np.zeros(len(a))\n        \n        for i in range(len(a)):\n            if dp_array[i] == 0:\n                for j in range(i, -1, -1):\n                    if a[j] % a[i] == 0:\n                        dp_array[i] = 1\n                        break\n        \n        return dp_array\n    \n    '''\n    recursive\n    - create a dp array\n    - for every element in 'a'\n        - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def recursive(a):\n        '''\n        recursive solution\n        '''\n        dp_array = []\n        \n        if len(a) == 1:\n            return a\n        \n        if len(a) == 0:\n            return dp_array\n        \n        if len(a) == 2:\n            if a[0] % a[1] == 0:\n                return a\n            return dp_array\n        \n        dp_array.append(a[0])\n        \n        if len(a) == 3:\n            if a[1] % a[2] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 4:\n            if a[2] % a[3] == 0:\n                return a\n            return dp_array\n        \n        for i in range(len(a)):\n            if len(dp_array) == 0:\n                if a[i] % a[i-1] == 0:\n                    dp_array.append(a[i])\n            else:\n                if a[i] % dp_array[i-1] == 0:\n                    dp_array.append(a[i])\n        \n        return dp_array\n        \n    '''\n    DP with memoization\n    - create a dp array\n    - for every element in 'a'\n        - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def dpWithMemoization(a):\n        '''\n        DP with memoization solution\n        '''\n        dp_array = {}\n        \n        if len(a) == 1:\n            return a\n        \n        if len(a) == 0:\n            return dp_array\n        \n        if len(a) == 2:\n            if a[0] % a[1] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 3:\n            if a[1] % a[2] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 4:\n            if a[2] % a[3] == 0:\n                return a\n            return dp_array\n        \n        for i in range(len(a)):\n            if len(dp_array) == 0:\n                dp_array[i] = a[i]\n            else:\n                dp_array[i] = a[i]\n            if i >= 2:\n                if dp_array[i-2] % a[i] == 0:\n                    dp_array[i] = a[i]\n        \n        return dp_array\n        \n    '''\n    Dynamic programming\n    - create a dp array\n    - for every element in 'a'\n        - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def dynamicProgramming(a):\n        '''\n        dynamic programming solution\n        '''\n        dp_array = []\n        \n        if len(a) == 1:\n            return a\n        \n        if len(a) == 0:\n            return dp_array\n        \n        if len(a) == 2:\n            if a[0] % a[1] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 3:\n            if a[1] % a[2] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 4:\n            if a[2] % a[3] == 0:\n                return a\n            return dp_array\n        \n        for i in range(len(a)):\n            if i >= 2:\n                if a[i-2] % a[i] == 0:\n                    dp_array.append(a[i])\n        \n        return dp_array\n        \n    '''\n    Dynamic programming\n    - create a dp array\n    - for every element in 'a'\n        - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def recursiveDynamicProgramming(a):\n        '''\n        recursive dp solution\n        '''\n        dp_array = []\n        \n        if len(a) == 1:\n            return a\n        \n        if len(a) == 0:\n            return dp_array\n        \n        if len(a) == 2:\n            if a[0] % a[1] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 3:\n            if a[1] % a[2] == 0:\n                return a\n            return dp_array\n        \n        if len(a) == 4:\n            if a[2] % a[3] == 0:\n                return a\n            return dp_array\n        \n        for i in range(len(a)):\n            if len(dp_array) == 0:\n                dp_array.append(a[i])\n            else:\n                dp_array.append(a[i])\n            if i >= 2:\n                if dp_array[i-2] % a[i] == 0:\n                    dp_array[i] = a[i]\n        \n        return dp_array\n    \n    '''\n    Dynamic programming\n    - create a dp array\n    - for every element in 'a'\n        - if it is divisible by its prev element, add 1 to the dp array\n    - return the dp array\n    '''\n    \n    def recursiveDynamicProgramming(a):\n        '''"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a: return 0\n    a = sorted(a)\n    n = len(a)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i + 1] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][j + 1] = 1 + dp[i][j]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len_arr1 = len(arr1)\n    len_arr2 = len(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr_median = []\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high) // 2\n        # If left half is sorted\n        if arr1[mid] <= arr2[mid]:\n            low = mid + 1\n        else:\n            # If right half is sorted\n            high = mid - 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i = 0\n    j = 0\n    while i < n:\n        arr.append(arr1[i])\n        arr.append(arr2[j])\n        i += 1\n        j += 1\n    arr.sort()\n    #arr = sorted(arr)\n    return arr[(n // 2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Approach: Time O(log n) | space O(1)\n    # Algorithm:\n    # 1. Sort both lists\n    # 2. Sort both lists, find middle element\n    # 3. Return median of list with middle element\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    # sorted_arr1 = sorted(arr1)\n    # sorted_arr2 = sorted(arr2)\n    sorted_arr1 = arr1\n    sorted_arr2 = arr2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==0:\n        return -1\n    if n==1:\n        return min(arr1,arr2)\n    else:\n        m1=n//2\n        m2=n//2+n%2\n        l1=arr1[:m1]\n        l2=arr2[:m2]\n        return get_median(l1,l2,n//2)\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    n1, n2 = len(arr1), len(arr2)\n    if n1 == 0 and n2 == 0:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        first = arr1[int(n/2)-1]\n        second = arr1[int(n/2)]\n        mid = (first + second)/2\n        return mid\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return []\n    else:\n        if len(nums)>1:\n            return [n**(n-1)]+[n**i for i in range(n,len(nums))]\n        else:\n            return [n]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # base case\n    if len(nums) == 1:\n        return nums[0]**n\n    \n    # recursive case\n    return nums[0]**n + nth_nums(nums[1:],n)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def helper(index,result,nums):\n        if index == len(nums):\n            return\n        \n        if index == 0:\n            result.append(1)\n        \n        helper(index+1,result,nums)\n        if index!= 0:\n            result[-1] = result[-1] * nums[index]\n        \n        helper(index+1,result,nums)\n        \n    result = []\n    helper(0,result,nums)\n    return result\n    \ndef sort_list(a, reverse):\n    '''\n    Write a function to sort a list of numbers in ascending order using the bubble sort algorithm.\n    '''\n    def helper(index,nums):\n        if index == len(nums):\n            return\n        \n        for i in range(len(nums)-1,index,-1):\n            if nums[i] > nums[i-1]:\n                temp = nums[i]\n                nums[i] = nums[i-1]\n                nums[i-1] = temp\n        \n        helper(index+1,nums)\n        \n    helper(0,a)\n    if reverse:\n        a.reverse()\n    return a\n    \ndef zigzag(array):\n    '''\n    Write a function that takes in a 2D array and returns whether it is strictly zigzag or not.\n    An array is strictly zigzag if it is a square and the minimum element is in the upper right corner.\n    Note: The array may not be square.\n    '''\n    def helper(arr,r,c):\n        if r == len(arr) or c == len(arr[0]):\n            return True\n        \n        if r > len(arr) or c > len(arr[0]):\n            return False\n        \n        if arr[r][c] < arr[r-1][c-1] or arr[r][c] < arr[r][c-1]:\n            return False\n        else:\n            return helper(arr,r+1,c) or helper(arr,r,c+1)\n    \n    if len(array) == 0:\n        return False\n    elif len(array) == 1:\n        return True\n    elif len(array[0]) == 0:\n        return True\n    \n    return helper(array,0,0)\n    \ndef star_count(n):\n    '''\n    Write a function that takes in a positive integer and returns the number of stars that would be needed to construct the n-digit number.\n    Note: a is the number of digits in n.\n    '''\n    def helper(n,stars,sum):\n        if n == 1:\n            return stars\n        \n        if n > 1:\n            stars += 1\n            return helper(n-1,stars,sum)\n        \n        return stars\n        \n    return helper(n,0,0)\n    \ndef counting_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    Note: The list may contain duplicates.\n    '''\n    if len(nums) == 0:\n        return\n    \n    def helper(nums,count,low,high):\n        if low == high:\n            return\n        \n        pivot = nums[low]\n        left = low+1\n        right = high\n        \n        while left <= right:\n            while left <= right and nums[left] <= pivot:\n                left += 1\n            while left <= right and nums[right] >= pivot:\n                right -= 1\n            if left <= right:\n                temp = nums[left]\n                nums[left] = nums[right]\n                nums[right] = temp\n        \n        helper(nums,count,low,right-1)\n        helper(nums,count,right+1,high)\n        \n    count = [0]*100\n    for i in range(0,len(nums)):\n        count[nums[i]] += 1\n    \n    count.sort(reverse=True)\n    \n    i = 0\n    for i in range(0,len(nums)):\n        while count[i]!= 0:\n            nums[i] = i\n            count[i] -= 1\n            i += 1\n    \ndef merge_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    Note: The list may contain duplicates.\n    '''\n    def helper(nums,low,high):\n        if low == high:\n            return\n        \n        mid = (low + high)//2\n        \n        helper(nums,low,mid)\n        helper(nums,mid+1,high)\n        \n        sort(nums,low,high)\n        \n    def sort(nums,low,high):\n        pivot = nums[low]\n        left = low+1\n        right = high\n        \n        while left <= right:\n            while left <= right and nums[left] <= pivot:\n                left += 1\n            while left <= right and nums[right] >= pivot:\n                right -= 1\n            if left <= right:\n                temp = nums[left]\n                nums[left] = nums[right]\n                nums[right] = temp\n        \n        nums[low] = nums[right]\n        nums[right] = pivot\n        \n        sort(nums,low,right-1)\n        sort(nums,right+1,high)\n        \n    helper(nums,0,len(nums)-1)\n    \ndef quick_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    Note: The list may contain duplicates.\n    '''\n    def helper(nums,low,high):\n        if low == high:\n            return\n        \n        pivot = nums[low]\n        \n        left = low + 1\n        right = high\n        \n        while left <= right:\n            while left <= right and nums[left] <= pivot:\n                left += 1\n            while left <= right and nums[right] >= pivot:\n                right -= 1\n            if left <= right:\n                temp = nums[left]\n                nums[left] = nums[right]\n                nums[right] = temp\n        \n        helper(nums,low,right)\n        helper(nums,right+1,high)\n        \n    helper(nums,0,len(nums)-1)\n    \ndef sort_list_by_val(l):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a sorted version of that list.\n    Note: The list may contain duplicates.\n    '''\n    def helper(l,low,high,val):\n        if low == high:\n            return\n        \n        pivot = l[low]\n        \n        left = low+1\n        right = high\n        \n        while left <= right:\n            while left <= right and l[left] <= pivot:\n                left += 1\n            while left <= right and l[right] > pivot:\n                right -= 1\n            if left <= right:\n                temp = l[left]\n                l[left] = l[right]\n                l[right] = temp\n        \n        helper(l,low,right,val)\n        helper(l,right+1,high,val)\n        \n    helper(l,0,len(l)-1,0)\n    \ndef find_min(l):\n    '''\n    Write a function that takes in a list of non-negative integers and returns the minimum value in that list.\n    Note: The list may contain duplicates.\n    '''\n    if len(l) == 0:\n        return\n    \n    low = 0\n    high = len(l)-1\n    \n    while low <= high:\n        pivot = l[low]\n        left = low+1\n        right = high\n        \n        while left <= right:\n            if l[left] <= pivot:\n                left += 1\n            else:\n                right -= 1\n        if left > right:\n            break\n        else:\n            temp = l[left]\n            l[left] = l[right]\n            l[right] = temp\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # first way\n    '''\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]**n\n    '''\n    #another way\n    '''\n    res = []\n    for i in range(0,len(nums)):\n        res.append(nums[i]**n)\n    return res\n    '''\n    #another way\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert type(n) == int and type(nums) == list\n    assert 0 <= n <= len(nums)\n    if n == 0:\n        return nums\n    else:\n        return nums[:]\n    "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return [x ** n for x in nums]\n    else:\n        return [x ** (n - 1) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(nums[i]**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert nums.__class__ == list\n    assert type(n) == int and n > 0\n    \n    nums_power = []\n    for num in nums:\n        nums_power.append(num**n)\n    return nums_power\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    def upper_func(string):\n        return string.upper()\n    return upper_func\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \nprint(is_upper(\"hello\"), \" is UPPER case\")\nprint(is_upper(\"hello world\"), \" is UPPER case\")\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string)!= str:\n        print(\"The input is not a string.\")\n        return\n    else:\n        return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \n    \nprint(is_upper('hi'))\nprint(is_upper('HI'))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swapped_List = newList[::-1]\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop()\n    newList.pop(0)\n    newList.append(newList.pop(len(newList)-1))\n    newList.insert(0,newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    try:\n        if len(newList) <= 1:\n            return newList\n        else:\n            temp = newList.pop()\n            newList.insert(0,temp)\n            return swap_List(newList)\n    except:\n        return None\n        \n    "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    first = newList[0]\n    last = newList[l-1]\n    newList[0] = last\n    newList[l-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # Write your code here\n    # try:\n    #     if newList:\n    #         newList.insert(0,newList.pop())\n    # except:\n    #     print(\"Invalid input\")\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    n = len(newList)\n    while i<n-1:\n        if i==n-2:\n            newList[i], newList[i+1]= newList[i+1], newList[i]\n        else:\n            newList[i], newList[i+1]= newList[i+1], newList[i]\n        i=i+1\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef add_item_to_list(newList): \n    '''\n    Write a python function to add a new item to the end of a given list.\n    '''\n    newList.append(\"and I added it\")\n    return newList\n    \ndef remove_element_from_list(newList): \n    '''\n    Write a python function to remove an item from a given list.\n    '''\n    newList.pop(0)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = len(newList)\n    newList[i-1], newList[0] = newList[0], newList[i-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \nprint(swap_List([1,2,3,4,5,6])) #[1,4,2,5,3,6]\nprint(swap_List([-2,-5,-5,-2,1,6,8])) #[-2,1,1,6,-2,-5,8]\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = math.sqrt(3)/2 * r**2\n    return A\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        raise ValueError('Incorrect Input')\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r * 3.1415926\n    print(\"The area of the triangle with given radius is: \", area)\n    return area\n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print('enter the radius of semicircle')\n    r=float(input())\n    import math\n    radius=r\n    area_triangle=0.5*math.sqrt(radius**2*math.cos(math.pi/3))\n    print(\"Area of the largest triangle inscribed in the semicircle with radius\",radius, 'is', area_triangle,'square units')\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r * r * math.sqrt(3) / 2.0\n    print('Area of the triangle : ',area)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def l(n):\n        return (n*(n+1))//2\n    if not (r > 0) :\n        raise ValueError(\"Error!\")\n    else :\n        area = r*(r+1)\n        s = 2*l(r+1)\n        p = r*r*math.sqrt(3)\n        for i in range(s) :\n            if (s+i)%2 == 1 :\n                area -= math.sqrt(p)\n            else :\n                area += math.sqrt(p)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle using Heron's formula\n    import math\n    r2 = r * r\n    p = (r2 * math.sqrt(2)) / 2\n    area = math.sqrt(p*(p - r2)*(p - r2) * (p + r2))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c) :\n        '''\n        Find the area of the triangle formed by the three sides.\n        '''\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s-a) * (s-b) * (s-c))\n    def largest_triangle(a,b,c) :\n        '''\n        Find the largest triangle area, which can be inscribed in a semicircle with a given radius.\n        '''\n        return area(a,b,c) * (a+b+c)/2\n    def largest_triangle_2(a,b,c) :\n        '''\n        Find the largest triangle area, which can be inscribed in a semicircle with a given radius.\n        '''\n        return (a+b+c)/2 * math.sqrt(max(a*a,b*b,c*c))\n    def largest_triangle_3(a,b,c) :\n        '''\n        Find the largest triangle area, which can be inscribed in a semicircle with a given radius.\n        '''\n        return (a+b+c)/2 * math.sqrt(max(a*a,b*b,c*c))\n    if __name__ == \"__main__\" :\n        '''\n        Accept the side length of the semicircle, and the radius, and the input will be taken in the form of\n        the three sides of the triangle.\n        '''\n        a,b,c = float(input()),float(input()),float(input())\n        print(largest_triangle(a,b,c))\n        print(largest_triangle_2(a,b,c))\n        print(largest_triangle_3(a,b,c))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    PI = 3.14\n    return PI*r**2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    n = int(r*r*math.sqrt(3)/2)\n    # print(n)\n    if n % 2 == 1 :\n        n = n + 1\n    # print(n)\n    n_tuple = (n,n)\n    area_list = []\n    for i in range(0,n_tuple[0]) :\n        for j in range(0,n_tuple[1]) :\n            area = (i+1)*(j+1)\n            area_list.append(area)\n    \n    area_list.sort(reverse = True)\n    return area_list[0]\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return -1\n    if start==end:\n        return start+1\n    mid=(start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]==mid-1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        if array[mid]==mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            if array[mid]==mid+1:\n                return find_First_Missing(array,start,mid-1)\n            else:\n                return mid+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\nprint(\"First Missing number =\",find_First_Missing([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16]))\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if end-start+1 == len(array):\n        return array[start]\n    if array[start]!= None and array[start] < len(array) and array[start+1]!= None and array[start+1] > len(array):\n        return array[start+1]\n    for i in range(start+1,end+1):\n        if array[start]+1!= array[i] and array[start+1] == None:\n            return array[start]+1\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return start+1\n    elif start == end-1:\n        return end+2\n    while start <= end:\n        mid = (start+end)//2\n        if array[mid] == mid+1:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    while start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            start=mid+1\n        elif array[mid]==mid:\n            end=mid-1\n        else:\n            return mid\n    return mid+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    if start == end:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if len(array) == 0:\n        return -1\n    if start > end:\n        return -1\n    if start == end:\n        return array[start]\n    if array[start] > array[end]:\n        array[start],array[end] = array[end],array[start]\n    if array[start] == array[end]:\n        return find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end <= start:\n        return start+1\n    mid = (start+end)//2\n    if array[mid]!= mid+1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    if start == end:\n        if array[start]!= start+1:\n            return start+1\n        else:\n            return None\n    mid = (start + end)//2\n    if array[mid] == mid+1:\n        return mid+1\n    if array[mid] == mid:\n        return None\n    if array[mid] < mid+1:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return None\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    if array[start]!= start+1:\n        return start+1\n    if array[end]!= end+1:\n        return end+1\n    while start+1!= end:\n        mid = (start+end)/2\n        if array[mid]!= mid+1:\n            return mid+1\n        else:\n            if mid-1 >= start:\n                if array[mid-1]!= mid-1+1:\n                    return mid-1+1\n            if mid+1 <= end:\n                if array[mid+1]!= mid+1+1:\n                    return mid+1+1\n            start = mid+1\n    return None\ndef Sort_Array_Using_QuickSort(array):\n    '''\n    Write a python function to sort an array using quick sort.\n    '''\n    if len(array) <= 1:\n        return array\n    pivot = array[0]\n    less_than = []\n    greater_than = []\n    for num in array[1:]:\n        if num < pivot:\n            less_than.append(num)\n        else:\n            greater_than.append(num)\n    return Sort_Array_Using_QuickSort(less_than) + [pivot] + Sort_Array_Using_QuickSort(greater_than)\ndef get_Target_Value(array,target):\n    '''\n    Write a python function to get the target element from sorted array, if it exists.\n    '''\n    if not array:\n        return None\n    if len(array) == 1:\n        if array[0] == target:\n            return array[0]\n    if target <= array[len(array) - 1] and target >= array[0]:\n        low = 0\n        high = len(array) - 1\n        while low < high:\n            mid = (low+high)/2\n            if array[mid] == target:\n                return array[mid]\n            elif target > array[mid]:\n                low = mid + 1\n            elif target < array[mid]:\n                high = mid - 1\n    return None\ndef binary_Search(array,target):\n    '''\n    Write a python function to get the target element from sorted array, if it exists.\n    '''\n    if not array:\n        return None\n    if len(array) == 1:\n        if array[0] == target:\n            return array[0]\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low+high)/2\n        if array[mid] == target:\n            return array[mid]\n        elif array[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\ndef bubble_Sort(array):\n    '''\n    Write a python function to sort an array using bubble sort algorithm.\n    '''\n    if not array:\n        return None\n    if len(array) == 1:\n        return array\n    for i in range(0,len(array)):\n        for j in range(i+1,len(array)):\n            if array[i] > array[j]:\n                array[i],array[j] = array[j],array[i]\n    return array\ndef count_Sort(array,key):\n    '''\n    Write a python function to sort an array using count sort algorithm.\n    '''\n    if key == None:\n        return None\n    length = len(array)\n    output = [None]*length\n    count = [0]*key\n    for i in range(0,length):\n        count[array[i]] += 1\n    for i in range(1,key):\n        count[i] += count[i-1]\n    i = length - 1\n    while i >= 0:\n        output[count[array[i]]-1] = array[i]\n        count[array[i]] -= 1\n        i -= 1\n    for i in range(0,length):\n        array[i] = output[i]\n    return array\ndef merge_Sort(array,low,high):\n    '''\n    Write a python function to sort an array using merge sort algorithm.\n    '''\n    if low == high:\n        return array\n    if high - low == 1:\n        if array[low] > array[high]:\n            array[low],array[high] = array[high],array[low]\n        return array\n    mid = (low+high)/2\n    merge_Sort(array,low,mid)\n    merge_Sort(array,mid,high)\n    merge_Two_Sorted_Arrays(array,low,mid,high)\n    return array\ndef merge_Two_Sorted_Arrays(array,low,mid,high):\n    '''\n    Write a python function to merge two sorted arrays into one sorted array.\n    '''\n    left = low\n    right = mid + 1\n    sorted_array = []\n    while left <= mid and right <= high:\n        if array[left] < array[right]:\n            sorted_array.append(array[left])\n            left += 1\n        else:\n            sorted_array.append(array[right])\n            right += 1\n    while left <= mid:\n        sorted_array.append(array[left])\n        left += 1\n    while right <= high:\n        sorted_array.append(array[right])\n        right += 1\n    for i in range(0,len(sorted_array)):\n        array[low+i] = sorted_array[i]\ndef quick_Sort(array,low,high):\n    '''\n    Write a python function to sort an array using quick sort algorithm.\n    '''\n    if low == high:\n        return array\n    if low < high:\n        pi = partition(array,low,high)\n        quick_Sort(array,low,pi-1)\n        quick_Sort(array,pi+1,high)\ndef partition(array,low,high):\n    '''\n    Write a python function to partition an array using quick sort algorithm.\n    '''\n    pivot = array[low]\n    i = low + 1\n    for j in range(low+1,high+1):\n        if array[j] <= pivot:\n            i += 1\n            array[i],array[j] = array[j],array[i]\n    array[i],array[low] = array[low],array[i]\n    return i\ndef quick_Sort_Using_Recursion(array,low,high):\n    '''\n    Write a python function to sort an array using quick sort algorithm.\n    '''\n    if low == high:\n        return array\n    if low < high:\n        pi = partition(array,low,high)\n        quick_Sort_Using_Recursion(array,low,pi-1)\n        quick_Sort_Using_Recursion(array,pi+1,high)\ndef quick_Sort_Using_Iteration(array):\n    '''\n    Write a python function to sort an array using quick sort algorithm.\n    '''\n    if len(array) <= 1:\n        return array\n    low = 0\n    high = len(array) - 1\n    while low < high:\n        while low < high and array[high] >= array[low]:\n            high -= 1\n        while low < high and array[low] <= array[high]:\n            low += 1\n        array[low],array[high] = array[high],array[low]\n    array[low],array[high] = array[high],array[low]\n    quick_Sort_Using_Iteration(array,low,high-1)\n    quick_Sort_Using_Iteration(array,low+1,high)\ndef recursive_quick_Sort(array,low,high):\n    '''\n    Write a python function to sort an array using quick sort algorithm.\n    '''\n    if low == high:\n        return array\n    if low < high:\n        pi = partition(array,low,high)\n        recursive_quick_Sort(array,low,pi-1)\n        recursive_quick_Sort(array,pi+1,high)\ndef partition(array,low,high):\n    '''\n    Write a python function to partition an array using quick sort algorithm.\n    '''\n    pivot = arra"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if len(string) == 0:\n        return string\n    if string[0] =='':\n        return '%20' + replace_spaces(string[1:])\n    else:\n        return string[0] + replace_spaces(string[1:])\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \ndef search_and_replace(file, search_string, replace_string):\n    '''\n    Write a function that takes a file path and a search string and replace\n    string.\n    '''\n    \n    file_data = open(file, 'r')\n    file_string = file_data.read()\n    file_string = file_string.replace(search_string, replace_string)\n    file_data.close()\n    file_data = open(file, 'w')\n    file_data.write(file_string)\n    file_data.close()\n    \n    \nif __name__ == '__main__':\n    file_name = 'file1.txt'\n    search_string ='spaces'\n    replace_string = '%20'\n    print(search_and_replace(file_name, search_string, replace_string))\n    "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):\n    '''\n    Write a function to replace all whitespace characters in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_letters_and_digits(string):\n    '''\n    Write a function to replace all non-letter and non-digit characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \n    \ndef replace_non_alphas(string):\n    '''\n    Write a function to replace all non-alpha characters in the given string with '_'.\n    '''\n    return string.replace(\" \", \"_\")\n    \n    \ndef replace_all(string, character):\n    '''\n    Write a function to replace all occurrences of character in the given string with '_'.\n    '''\n    return string.replace(character, \"_\")\n    \n    \ndef replace_whitespace(string):"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \nprint(replace_spaces('have a nice day'))\nprint(replace_spaces('I love Python'))\nprint(replace_spaces('This website is for losers LOL')"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_numbers.append(list[i])\n    print(even_numbers)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_numbers.append(list[i])\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    print('Even numbers in the list:',even_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    output_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            output_list.append(list[i])\n    print(output_list)\n    return output_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    odd = []\n    \n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number%2 == 0: \n            even_numbers.append(number)\n    return even_numbers \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        sub.append((ele[0]-1, ele[1]))\n    if ele[0] < 7:\n        sub.append((ele[0]+1, ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1]-1))\n    if ele[1] < 7:\n        sub.append((ele[0], ele[1]+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if not isinstance(ele, tuple):\n    #     return False\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [ele[0]+1, ele[1]+1, ele[0]-1, ele[1]-1, ele[0]+1, ele[1]-1, ele[0]-1, ele[1]+1, ele[0], ele[1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        sub.append((x, y-1))\n        sub.append((x+1, y))\n        sub.append((x, y+1))\n    elif x == 3:\n        sub.append((x-1, y))\n        sub.append((x, y-1))\n        sub.append((x, y+1))\n    elif y == 0:\n        sub.append((x-1, y))\n        sub.append((x+1, y))\n        sub.append((x-1, y+1))\n    elif y == 3:\n        sub.append((x-1, y))\n        sub.append((x+1, y))\n        sub.append((x-1, y-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    sub.append((x,y-1))\n    sub.append((x+1,y-1))\n    sub.append((x,y+1))\n    sub.append((x-1,y+1))\n    sub.append((x-1,y))\n    sub.append((x-1,y-1))\n    sub.append((x,y-1))\n    sub.append((x+1,y))\n    sub.append((x+1,y-1))\n    sub.append((x,y+1))\n    sub.append((x+1,y+1))\n    return sub\n    \ndef check_coord(coord):\n    '''\n    Write a function that returns the coordinates of all the adjacent nodes of the given node.\n    '''\n    x = coord[0]\n    y = coord[1]\n    sub = []\n    if(x == 0):\n        sub.append((x,y-1))\n        sub.append((x,y+1))\n        sub.append((x+1,y-1))\n        sub.append((x+1,y))\n        sub.append((x+1,y+1))\n        sub.append((x,y+1))\n        sub.append((x-1,y-1))\n        sub.append((x-1,y))\n        sub.append((x-1,y+1))\n    if(x == len(grid[0])-1):\n        sub.append((x,y-1))\n        sub.append((x,y+1))\n        sub.append((x-1,y-1))\n        sub.append((x-1,y))\n        sub.append((x-1,y+1))\n        sub.append((x,y+1))\n        sub.append((x+1,y-1))\n        sub.append((x+1,y))\n        sub.append((x+1,y+1))\n    if(y == 0):\n        sub.append((x-1,y))\n        sub.append((x-1,y+1))\n        sub.append((x,y+1))\n        sub.append((x+1,y))\n        sub.append((x+1,y+1))\n        sub.append((x,y+1))\n        sub.append((x-1,y-1))\n        sub.append((x,y-1))\n        sub.append((x-1,y-1))\n    if(y == len(grid)-1):\n        sub.append((x-1,y))\n        sub.append((x-1,y-1))\n        sub.append((x,y-1))\n        sub.append((x+1,y))\n        sub.append((x+1,y-1))\n        sub.append((x,y-1))\n        sub.append((x-1,y+1))\n        sub.append((x,y+1))\n        sub.append((x-1,y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    n = len(ele)\n    ret = []\n    \n    if n == 3:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                for k in range(-1, 2):\n                    if i == j == k == 0:\n                        continue\n                    ret.append([ele[i] + i, ele[j] + j, ele[k] + k])\n    elif n == 2:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == j == 0:\n                    continue\n                ret.append([ele[i] + i, ele[j] + j])\n    else:\n        ret.append(ele)\n    \n    return ret\n    \nclass Solution:\n    '''\n    Write a class which has at least two methods:\n    1. is_valid(): Complexity O(n)\n    2. valid_walk(): Complexity O(n)\n    All the test cases are already provided. Note that the order in which the tests are being run, is not important.\n    '''\n    def __init__(self):\n        '''\n        Write your code here\n        '''\n        pass\n        \n    def is_valid(self, coor, n):\n        '''\n        Write a function is_valid(coor) which takes a 2D coordinate and returns True if the coordinate is inside a valid 2D triangle, otherwise returns False.\n        '''\n        ret = True\n        n = len(coor)\n        \n        for i in range(0, n):\n            for j in range(i, n):\n                if i == j:\n                    continue\n                if coor[i] + coor[j] == 2*coor[i]:\n                    ret = False\n                    break\n        return ret\n        \n    def valid_walk(self, coor, n):\n        '''\n        Write a function valid_walk(coor) which takes a 2D coordinate and returns True if the walk is valid, otherwise returns False.\n        A walk is valid if and only if all the adjacent coordinates are valid coordinates.\n        '''\n        ret = True\n        n = len(coor)\n        \n        if self.is_valid(coor, n):\n            for i in range(0, n):\n                for j in range(i, n):\n                    if i == j:\n                        continue\n                    if not self.is_valid([coor[i], coor[j], coor[i] + coor[j]], n):\n                        ret = False\n                        break\n        return ret\n    \n        \nclass Solution:\n    def __init__(self):\n        '''\n        Write your code here\n        '''\n        pass\n        \n    def is_valid(self, coor, n):\n        '''\n        Write a function is_valid(coor) which takes a 2D coordinate and returns True if the coordinate is inside a valid 2D triangle, otherwise returns False.\n        '''\n        ret = True\n        n = len(coor)\n        \n        for i in range(0, n):\n            for j in range(i, n):\n                if i == j:\n                    continue\n                if coor[i] + coor[j] == 2*coor[i]:\n                    ret = False\n                    break\n        return ret\n        \n    def valid_walk(self, coor, n):\n        '''\n        Write a function valid_walk(coor) which takes a 2D coordinate and returns True if the walk is valid, otherwise returns False.\n        A walk is valid if and only if all the adjacent coordinates are valid coordinates.\n        '''\n        ret = True\n        n = len(coor)\n        \n        if self.is_valid(coor, n):\n            for i in range(0, n):\n                for j in range(i, n):\n                    if i == j:\n                        continue\n                    if not self.is_valid([coor[i], coor[j], coor[i] + coor[j]], n):\n                        ret = False\n                        break\n        return ret\n    \nclass Solution:\n    def __init__(self):\n        '''\n        Write your code here\n        '''\n        pass\n        \n    def is_valid(self, coor, n):\n        '''\n        Write a function is_valid(coor) which takes a 2D coordinate and returns True if the coordinate is inside a valid 2D triangle, otherwise returns False.\n        '''\n        ret = True\n        n = len(coor)\n        \n        for i in range(0, n):\n            for j in range(i, n):\n                if i == j:\n                    continue\n                if coor[i] + coor[j] == 2*coor[i]:\n                    ret = False\n                    break\n        return ret\n        \n    def valid_walk(self, coor, n):\n        '''\n        Write a function valid_walk(coor) which takes a 2D coordinate and returns True if the walk is valid, otherwise returns False.\n        A walk is valid if and only if all the adjacent coordinates are valid coordinates.\n        '''\n        ret = True\n        n = len(coor)\n        \n        if self.is_valid(coor, n):\n            for i in range(0, n):\n                for j in range(i, n):\n                    if i == j:\n                        continue\n                    if not self.is_valid([coor[i], coor[j], coor[i] + coor[j]], n):\n                        ret = False\n                        break\n        return ret\n        \nclass Solution:\n    def __init__(self):\n        '''\n        Write your code here\n        '''\n        pass\n        \n    def is_valid(self, coor, n):\n        '''\n        Write a function is_valid(coor) which takes a 2D coordinate and returns True if the coordinate is inside a valid 2D triangle, otherwise returns False.\n        '''\n        ret = True\n        n = len(coor)\n        \n        for i in range(0, n):\n            for j in range(i, n):\n                if i == j:\n                    continue\n                if coor[i] + coor[j] == 2*coor[i]:\n                    ret = False\n                    break\n        return ret\n        \n    def valid_walk(self, coor, n):\n        '''\n        Write a function valid_walk(coor) which takes a 2D coordinate and returns True if the walk is valid, otherwise returns False.\n        A walk is valid if and only if all the adjacent coordinates are valid coordinates.\n        '''\n        ret = True\n        n = len(coor)\n        \n        if self.is_valid(coor, n):\n            for i in range(0, n):\n                for j in range(i, n):\n                    if i == j:\n                        continue\n                    if not self.is_valid([coor[i], coor[j], coor[i] + coor[j]], n):\n                        ret = False\n                        break\n        return ret\n        \nclass Solution:\n    def __init__(self):\n        '''\n        Write your code here\n        '''\n        pass\n        \n    def is_valid(self, coor, n):\n        '''\n        Write a function is_valid(coor) which takes a 2D coordinate and returns True if the coordinate is inside a valid 2D triangle, otherwise returns False.\n        '''\n        ret = True\n        n = len(coor)\n        \n        for i in range(0, n):\n            for j in range(i, n):\n                if i == j:\n                    continue\n                if coor[i] + coor[j] == 2*coor[i]:\n                    ret = False\n                    break\n        return ret\n        \n    def valid_walk(self, coor, n):\n        '''\n        Write a function valid_walk(coor) which takes a 2D coordinate and returns True if the walk is valid, otherwise returns False.\n        A walk is valid if and only if all the adjacent coordinates are valid coordinates.\n        '''\n        ret = True\n        n = len(coor)\n        \n        if self.is_valid(coor, n):\n            for i in range(0, n):\n                for j in range(i, n):\n                    if i == j:\n                        continue\n                    if not self.is_valid([coor[i], coor[j], coor[i] + coor[j"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = []\n    for i in range(len(ele)):\n        a = ele[:]\n        a[i] += 1\n        if a[i] < 0 or a[i] >= len(grid): continue\n        lst.append(a)\n    return lst\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    l = []\n    for dx in [-1, 1]:\n        for dy in [-1, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            l.append((x + dx, y + dy))\n    return l\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if not (i == 0 and j == 0)]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return text.replace(\" \",\"_\")\n    return text.strip().replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in text:\n        if i =='':\n            new_text += '_'\n        else:\n            new_text += i\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    new_text = text.replace(' ','_')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    replaced_text = text.replace(\" \", \"_\")\n    return replaced_text.replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \" \".join(text.split())\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Your code here\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == None:\n        return None\n    if text == \"\":\n        return \"\"\n    if not isinstance(text, str):\n        return \"\"\n    \n    result = text.replace(\" \", \"_\")\n    result = result.replace(\"_\", \" \")\n    return result\n    \ndef end_of_birth_year(birth_year):\n    '''\n    Write a function that returns the given year, minus 2 for the century.\n    '''\n    if birth_year == None:\n        return None\n    if birth_year == \"\":\n        return None\n    if not isinstance(birth_year, str):\n        return None\n    \n    # DO NOT EDIT BELOW THIS LINE!\n    return int(birth_year) - 2000\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.append(0)\n                num_list.pop(j)\n                break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    n = len(num_list)\n    while n!= 0:\n        i = num_list.pop(0)\n        if i!= 0:\n            result.append(i)\n            n -= 1\n    num_list.extend(result)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # number_of_zeroes = num_list.count(0)\n    number_of_zeroes = len(list(filter(lambda x: x == 0, num_list)))\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    for x in range(len(num_list)):\n        if num_list[x]!= 0:\n            num_list[i] = num_list[x]\n            i = i + 1\n    for y in range(i, len(num_list)):\n        num_list[y] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            if i!= len(num_list) - 1:\n                for j in range(i,len(num_list)-1):\n                    num_list[j] = num_list[j+1]\n                num_list[len(num_list)-1] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i]!= 0:\n            temp = num_list[i]\n            num_list[i] = num_list[i+1]\n            num_list[i+1] = temp\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    zero_cnt = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n        else:\n            zero_cnt += 1\n    for i in range(zero_cnt):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list.append(num_list[i])\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list\n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(len(arr)<1) :\n        return 0\n    return sum([a^b for a,b in zip(arr,arr[1:])])\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (arr[i] ^ arr[i+1])\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2 : return 0\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += (arr[i] ^ arr[j])\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1) : \n        for j in range(i+1, n) : \n            xor_sum += (arr[i] ^ arr[j])\n            \n    return xor_sum\n    \n    \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            res += (arr[i] ^ arr[j])\n    return res \n    \n    \ndef pair_xor_Subsets(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    def xor_Subset(arr, i, j, n):\n        result = 0\n        for k in range(i, j + 1):\n            result += arr[k]\n        return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            result += (arr[i] ^ arr[j])\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    def pair_xor_Sum_helper(arr,n,sum_so_far):\n        if n == 1:\n            return sum_so_far + arr[0]\n        else:\n            return pair_xor_Sum_helper(arr,n-1,sum_so_far) ^ arr[n-1]\n    return pair_xor_Sum_helper(arr,n,0)\nprint(pair_xor_Sum([1,2,3,4],3))"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum = arr[i] ^ sum \n        print(sum, end ='') \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n) : \n        xor = xor ^ arr[i]\n    return xor\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    sorted_list = []\n    for i in range(len(heap)):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable) > 0:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = list(iterable)\n    hq.heapify(arr)\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n    #pass\n    \ndef max_heap(iterable):\n    '''\n    Write a function to build a max heap from a list.\n    '''\n    heap = []\n    for i in range(len(iterable)):\n        hq.heappush(heap, iterable[i])\n    return heap\n    #pass\n    \ndef heap_sort_itr(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = max_heap(iterable)\n    heap_len = len(heap)\n    for i in range(len(heap)-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        heap_len -= 1\n        heapify(heap, 0, heap_len)\n    return heap\n    #pass\n    \ndef heap_sort_rec(iterable):\n    '''\n    Write a function to sort the given list using heap sort recursively.\n    '''\n    heap = max_heap(iterable)\n    heap_len = len(heap)\n    for i in range(len(heap)-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        heap_len -= 1\n        heapify(heap, 0, heap_len)\n    return heap\n    #pass\n    \ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list using merge sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    \n    merge_sort(left)\n    merge_sort(right)\n    \n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            iterable[k] = left[i]\n            i+=1\n        else:\n            iterable[k] = right[j]\n            j+=1\n        k+=1\n    \n    while i < len(left):\n        iterable[k] = left[i]\n        i+=1\n        k+=1\n    while j < len(right):\n        iterable[k] = right[j]\n        j+=1\n        k+=1\n    \n    return iterable\n    #pass\n    \ndef count_sort(iterable):\n    '''\n    Write a function to sort the given list using count sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    count = [0]*(max(iterable)+1)\n    for i in iterable:\n        count[i] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    iterable = []\n    for i in range(len(count)-1, -1, -1):\n        for j in range(count[i]):\n            iterable.append(i)\n    return iterable\n    #pass\n    \ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list using radix sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    max_val = max(iterable)\n    divider = 1\n    while divider <= max_val:\n        buckets = [[] for _ in range(10)]\n        for i in iterable:\n            buckets[(i // divider) % 10].append(i)\n        iterable = []\n        for i in range(len(buckets)):\n            iterable.extend(buckets[i])\n        divider *= 10\n    return iterable\n    #pass\n    \ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list using selection sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    for i in range(len(iterable)):\n        min_pos = i\n        for j in range(i, len(iterable)):\n            if iterable[min_pos] > iterable[j]:\n                min_pos = j\n        iterable[i], iterable[min_pos] = iterable[min_pos], iterable[i]\n    return iterable\n    #pass\n    \ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list using insertion sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    for i in range(1, len(iterable)):\n        j = i\n        while j > 0 and iterable[j] < iterable[j-1]:\n            iterable[j-1], iterable[j] = iterable[j], iterable[j-1]\n            j -= 1\n    return iterable\n    #pass\n    \ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list using shell sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    divider = 1\n    while divider < len(iterable):\n        buckets = [[] for _ in range(divider)]\n        for i in iterable:\n            buckets[(i//divider) % divider].append(i)\n        iterable = []\n        for i in range(len(buckets)):\n            iterable.extend(buckets[i])\n        divider *= 2\n    return iterable\n    #pass\n    \ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list using bucket sort recursively.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    buckets = [[] for _ in range(10)]\n    for i in iterable:\n        buckets[i%10].append(i)\n    for i in range(10):\n        buckets[i] = insertion_sort(buckets[i])\n    iterable = []\n    for i in range(len(buckets)):\n        iterable.extend(buckets[i])\n    return iterable\n    #pass\n    \ndef bucket_sort_heap(iterable):\n    '''\n    Write a function to sort the given list using bucket sort recursively using heap sort.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    buckets = [[] for _ in range(10)]\n    for i in iterable:\n        buckets[i%10].append(i)\n    heap = []\n    for i in range(len(buckets)):\n        for j in range(len(buckets[i])):\n            hq.heappush(heap, buckets[i][j])\n    iterable = []\n    for i in range(len(buckets)):\n        iterable.extend(buckets[i])\n    return iterable\n    #pass\n    \ndef bucket_sort_heap_itr(iterable):\n    '''\n    Write a function to sort the given list using bucket sort recursively using heap sort.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    buckets = [[] for _ in range(10)]\n    for i in iterable:\n        buckets[i%10].append(i)\n    heap = []\n    for i in range(len(buckets)):\n        for j in range(len(buckets[i])):\n            hq.heappush(heap, buckets[i][j])\n    iterable = []\n    for i in range(len(buckets)):\n        iterable.extend(buckets[i])\n    return iterable\n    #pass\n    \ndef radix_sort_itr(iterable):\n    '''\n    Write a function to sort the given list using radix sort recursively using heap sort.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    max_val = max(iterable)\n    divider = 1\n    while divider <= max_val:\n    "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        h.append(i)\n    while len(h) > 1:\n        hq.heapify(h)\n        a = hq.heappop(h)\n        b = hq.heappop(h)\n        hq.heappush(h,a+b)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    for e in iterable:\n        res.append(e)\n        hq.heapify(res)\n    while len(res) > 1:\n        res.pop(-1)\n        res.pop(-1)\n        res.append(hq.heappop(res))\n        res.append(hq.heappop(res))\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    temp = []\n    while len(iterable)!= 0:\n        temp.append(iterable[0])\n        iterable.pop(0)\n    return temp\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('No Profit and Loss')\n    else:\n        print('Profit and Loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and no loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount+actual_cost:\n            return True\n    return False\ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == actual_cost+sale_amount:\n            return True\n    return False\ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount-actual_cost:\n            return True\n    return False\ndef noloss_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef noloss_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == actual_cost-sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount+actual_cost:\n            return True\n    return False\ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount-actual_cost:\n            return True\n    return False\ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef noloss_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef noloss_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef noloss_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount+actual_cost:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount-actual_cost:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return False\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    if actual_cost==0:\n        return True\n    if actual_cost>0 and sale_amount>0:\n        if actual_cost == sale_amount:\n            return True\n    return Fals"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return f'No Profit and no loss in actual cost and sale amount'\n    elif actual_cost > sale_amount:\n        return f'No Profit and no loss in actual cost and sale amount'\n    else:\n        return f'Profit and Loss in actual cost and sale amount'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        print(\"The profit amount is greater than zero\")\n        return True\n    elif profit < 0:\n        print(\"The profit amount is less than zero\")\n        return True\n    else:\n        print(\"The profit amount is zero\")\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost-sale_amount) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noprofit = actual_cost - sale_amount\n    if(noprofit>0):\n        print(\"Yes, The amount has no profit and no loss\")\n    else:\n        print(\"No, The amount has profit and loss\")\n        \n        \ndef fibbonacci_noloss(number):\n    '''\n    Write a function to check whether the given number is Fibonacci number or not\n    '''\n    '''\n    Fibbonaci numbers are the sum of the integers after that the numbers is itself and so on till fibbonaci number is equal to 1\n    '''\n    a = 0\n    b = 1\n    c = 0\n    for i in range(1,number):\n        c = a + b\n        a = b\n        b = c\n    if(c==1):\n        print(\"Yes, Fibbonacci number\")\n    else:\n        print(\"No, Fibbonacci number\")\n        \n        \ndef password_validation(password):\n    '''\n    Write a function that checks whether the given password is valid or not\n    '''\n    if(len(password)<=10):\n        print(\"Password must be greater than or equal to 10 characters\")\n    else:\n        print(\"Password is valid\")\n    \n    \ndef average_noloss(a,b,c):\n    '''\n    Write a function to check whether the given numbers are average or not\n    '''\n    avg = (a+b+c)/3\n    if(avg>=90):\n        print(\"Average is greater than or equal to 90\")\n    else:\n        print(\"Average is less than or equal to 90\")\n        \n        \ndef list_noloss(actual_list):\n    '''\n    Write a function to check whether the given list is valid or not\n    '''\n    if(len(actual_list)<=10):\n        print(\"List must have at least 10 elements\")\n    else:\n        print(\"List is valid\")\n        \n        \ndef number_noloss(number):\n    '''\n    Write a function to check whether the given number is a prime or not\n    '''\n    if(number>1):\n        for i in range(2,number):\n            if(number%i==0):\n                print(number,\"is not a prime number\")\n                break\n            else:\n                print(number,\"is a prime number\")\n    else:\n        print(number,\"is not a prime number\")\n    \n    \ndef prime_noloss(number):\n    '''\n    Write a function to check whether the given number is prime or not\n    '''\n    if(number>1):\n        for i in range(2,number):\n            if(number%i==0):\n                print(number,\"is not a prime number\")\n                break\n        else:\n            print(number,\"is a prime number\")\n    else:\n        print(number,\"is not a prime number\")\n        \n        \ndef max_noloss(a,b,c):\n    '''\n    Write a function to check whether the given numbers are max or not\n    '''\n    if(a>b and a>c):\n        print(\"a is greater than or equal to b and c\")\n    elif(b>a and b>c):\n        print(\"b is greater than or equal to a and c\")\n    elif(c>a and c>b):\n        print(\"c is greater than or equal to a and b\")\n    else:\n        print(\"a,b,c are equal\")\n        \n    \ndef max_or_min(a,b,c):\n    '''\n    Write a function to check whether the given numbers are max or min or not\n    '''\n    if(a>b and a>c):\n        print(\"a is greater than or equal to b and c\")\n    elif(b>a and b>c):\n        print(\"b is greater than or equal to a and c\")\n    elif(c>a and c>b):\n        print(\"c is greater than or equal to a and b\")\n    elif(a==b and a==c):\n        print(\"a and b are equal\")\n    elif(a==b and a>c):\n        print(\"a and b are equal\")\n    elif(a==c and a>b):\n        print(\"a and c are equal\")\n    elif(b==c and b>a):\n        print(\"b and c are equal\")\n    elif(a==c and a<b):\n        print(\"a and c are equal\")\n    elif(b==c and b<a):\n        print(\"b and c are equal\")\n    else:\n        print(\"a,b,c are equal\")\n    \n        \ndef sum_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are sum or not\n    '''\n    if(a+b==100):\n        print(\"sum is equal to 100\")\n    else:\n        print(\"sum is not equal to 100\")\n    \n        \ndef bitwise_and_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are bitwise and or not\n    '''\n    if(a&b==0):\n        print(\"Both the numbers are bitwise and\")\n    else:\n        print(\"Both the numbers are bitwise or\")\n        \n        \ndef bitwise_or_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are bitwise or or not\n    '''\n    if(a|b==1):\n        print(\"Both the numbers are bitwise or\")\n    else:\n        print(\"Both the numbers are bitwise and\")\n    \n        \ndef bitwise_not_noloss(a):\n    '''\n    Write a function to check whether the given number is bitwise not or not\n    '''\n    if(~a==1):\n        print(\"The given number is bitwise not\")\n    else:\n        print(\"The given number is bitwise and\")\n    \n        \ndef xor_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are bitwise xor or not\n    '''\n    if(a^b==0):\n        print(\"Both the numbers are bitwise xor\")\n    else:\n        print(\"Both the numbers are bitwise and\")\n        \n        \ndef leftshift_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are left shifted or not\n    '''\n    if(a<<b==0):\n        print(\"Both the numbers are left shifted\")\n    else:\n        print(\"Both the numbers are not left shifted\")\n    \n        \ndef rightshift_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are right shifted or not\n    '''\n    if(a>>b==0):\n        print(\"Both the numbers are right shifted\")\n    else:\n        print(\"Both the numbers are not right shifted\")\n        \n        \ndef rightshift_and_leftshift_noloss(a,b):\n    '''\n    Write a function to check whether the given numbers are right shifted and left shifted or not\n    '''\n    if(a>>b==0 and a<<b==0):\n        print(\"Both the numbers are right shifted and left shifted\")\n    else:\n        print(\"Both the numbers are not right shifted and left shifted\")\n        \n        \ndef noloss(actual_number):\n    '''\n    Write a function that checks whether the given number is prime or not\n    '''\n    if(actual_number>1):\n        for i in range(2,actual_number):\n            if(actual_number%i==0):\n                print(actual_number,\"is not a prime number\")\n                break\n        else:\n            print(actual_number,\"is a prime number\")\n    else:\n        print(actual_number,\"is not a prime number\")\n        \n        \ndef prime_or_not(number):\n    '''\n    Write a function that checks whether the given number is prime or not\n    '''\n    if(number>1):\n        for i in range(2,number):\n            if(number%i==0):\n                print(number,\"is not a prime number\")\n                break\n        else:\n            print(number,\"is a prime number\")\n    else:\n        print(number,\"is not a prime number\")\n        \n        \ndef prime_"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp = t\n    if wind_speed < 1:\n        return 0\n    if temp < -0.5:\n        return 0\n    if temp > 1:\n        return 0\n    if wind_speed > 1:\n        wind_speed = 1\n    a = 35.74 + (0.6215 * temp) + (0.4275 * wind_speed ** 3) - (0.0065 * temp * wind_speed ** 3)\n    if a > 1:\n        return 1\n    return a\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_k = 13.12 + (0.6215 * t) - (11.37 * math.pow(t, 0.16)) + (0.3965 * math.pow(t, 0.16) * v)\n    return int(chill_k)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v*0.611\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    f = math.pow((v**2),(1/2))\n    wind = 35.74 + (0.6215*t) + ((35.75 - (0.4275*t))/2)\n    wind_chill = (f*(a + (b*t) + (c*t**2) + (d*t**3))) + wind\n    return int(round(wind_chill))\ndef temp_conversion(degrees):\n    '''\n    Write a function to convert degrees celsius to fahrenheit.\n    '''\n    return int((degrees*9)/5) + 32\ndef rainfall(month,year):\n    '''\n    Write a function to calculate total rainfall for a month in mm based on the number of days, month, and year.\n    '''\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        total = (month * 31)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        total = (month * 30)\n    elif month == 2:\n        if (year % 4) == 0:\n            if (year % 100) == 0:\n                if (year % 400) == 0:\n                    total = ((month * 30) + 29)\n                else:\n                    total = ((month * 30) + 28)\n            else:\n                total = ((month * 30) + 29)\n        else:\n            total = ((month * 30) + 28)\n    return total\ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    x = math.floor(math.sqrt(num))\n    y = math.ceil(math.sqrt(num))\n    if num < 1:\n        return False\n    for i in range(2,x+1):\n        if num % i == 0:\n            return False\n    for i in range(2,y):\n        if num % i == 0:\n            return False\n    return True\ndef prime_factors(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    temp = num\n    factors = []\n    for i in range(2,num):\n        if (num % i) == 0:\n            factors.append(i)\n    while(temp!= 1):\n        for i in factors:\n            if num % i == 0:\n                temp = temp / i\n                factors.remove(i)\n    return factors\ndef reverse_number(num):\n    '''\n    Write a function to reverse the digits in a number.\n    '''\n    temp = num\n    rev_list = []\n    for i in range(len(str(num))):\n        rev_list.append(str(num)[len(str(num)) - i - 1])\n    rev_num = int(''.join(rev_list))\n    return rev_num\ndef fibonacci(num):\n    '''\n    Write a function to return the nth value in the fibonacci series.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)\ndef rotate_array(array,number):\n    '''\n    Write a function to rotate an array by number of positions.\n    '''\n    i = 0\n    temp = []\n    while i < number:\n        temp.append(array[0])\n        array.pop(0)\n        i += 1\n    while len(array)!= 0:\n        temp.append(array[0])\n        array.pop(0)\n    return temp\ndef integer_multiplication(a,b):\n    '''\n    Write a function to find the integer multiplication of two numbers.\n    '''\n    temp = a\n    total = 0\n    while temp > 0:\n        total = total + b\n        temp = temp - 1\n    return total\ndef prime_factors(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors = []\n    x = num\n    i = 2\n    while(i * i <= num):\n        while(num % i) == 0:\n            factors.append(i)\n            num = num / i\n        i += 1\n    while(num > 1):\n        if num % i == 0:\n            factors.append(num)\n            num = num / i\n        else:\n            i += 1\n    return factors\ndef prime_factors_iterative(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors = []\n    i = 2\n    while(i * i <= num):\n        while(num % i) == 0:\n            factors.append(i)\n            num = num / i\n        i += 1\n    while(num > 1):\n        if num % i == 0:\n            factors.append(num)\n            num = num / i\n        else:\n            i += 1\n    return factors\ndef sum_of_multiples(n,m):\n    '''\n    Write a function to find the sum of all numbers that are divisible by a number.\n    '''\n    total = 0\n    for i in range(n,m+1):\n        if i % n == 0:\n            total = total + i\n    return total\ndef sum_of_multiples_iterative(n,m):\n    '''\n    Write a function to find the sum of all numbers that are divisible by a number.\n    '''\n    i = 1\n    total = 0\n    while i <= m:\n        if i % n == 0:\n            total = total + i\n        i += 1\n    return total\ndef string_reversal(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    rev = \"\"\n    for i in range(len(string)):\n        rev = rev + string[len(string) - i - 1]\n    return rev\ndef prime_factors_iterative(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors = []\n    i = 2\n    while(i * i <= num):\n        while(num % i) == 0:\n            factors.append(i)\n            num = num / i\n        i += 1\n    while(num > 1):\n        if num % i == 0:\n            factors.append(num)\n            num = num / i\n        else:\n            i += 1\n    return factors\ndef prime_factors_recursive(num):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    factors = []\n    if num == 1:\n        return factors\n    if num % 2 == 0:\n        factors.append(2)\n        num = num / 2\n    i = 3\n    while(i * i <= num):\n        while(num % i) == 0:\n            factors.append(i)\n            num = num / i\n        i += 2\n    while(num > 1):\n        if num % i == 0:\n            factors.append(num)\n            num = num / i\n        else:\n            i += 2\n    return factors\ndef fibonacci_iterative(num):\n    '''\n    Write a function to find the nth value in the fibonacci series.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    i = 2\n    while i < num:\n        fib = fibonacci(i - 1) + fibonacci(i - 2)\n        i += 1\n    return fibonacci(num - 1) + fibonacci(num - 2)\ndef fibonacci_recursive(num):\n    '''\n    Write a function to find the nth value in the fibonacci series.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    if num <= 2:\n        return 1\n    else:\n        return fibo"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 35.74 + 0.6215 * t - 35.75 * math.pow((v/10), 0.16) + 0.4275 * math.pow((v/10), 0.16) * math.pow(t, 0.16)\n    return round(w)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill=((13.12+0.6215*v**0.16+0.3965*v**0.16*t**0.16)-34.5*t**0.2)\n    return math.floor(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #converting temperature from celsius to kelvin\n    t = t + 273.15\n    \n    #rounding wind velocity to the next integer\n    v = round(v)\n    #wind chill for wind speed >3m/s\n    if v >= 3:\n        wci = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    #wind chill for wind speed <=3m/s\n    else:\n        wci = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16) - 17.27*(t**0.16)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 1.8  # convert from m/s to kph\n    a = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 0.16) + 0.4275 * math.pow(t, 0.16) * math.pow(v, 0.16)\n    a = round(a)\n    return(a)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 35.74 + (0.6215 * t) - (35.75 * math.pow(t,0.16)) + (0.4275 * math.pow(t,0.16)) * v\n    return round(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 5.74 + 0.6215 * t + (0.4275 * (t ** 2)) - (0.3965 * (t ** 3))\n    windchill = (w + 0.3965) * v ** 0.16\n    windchill = round(windchill)\n    return windchill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_k = 35.74 + 0.6215*t - 35.75*(math.pow(v,0.16)) + 0.4275*math.pow(t,0.16)\n    return int(wind_chill_k)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # variable declaration\n    sum_nam = 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_list = sample_names\n    \n    for i in range(len(sample_list)):\n        sample_list[i] = sample_list[i].split()\n        \n    \n    remove_list = []\n    for i in sample_list:\n        for j in range(len(i)):\n            if i[j][0] == 'a' or i[j][0] == 'e' or i[j][0] == 'i' or i[j][0] == 'o' or i[j][0] == 'u' or i[j][0] == 'y':\n                remove_list.append(i[j])\n        for j in range(len(i)):\n            if i[j] in remove_list:\n                i.remove(i[j])\n    sample_list = []\n    for i in range(len(remove_list)):\n        sample_list.append(remove_list[i][0])\n    \n    total_length = 0\n    for i in sample_list:\n        total_length += len(i)\n        \n    print(total_length)\n    \n    \nsample_names = ['Jasmine', 'Raymond', 'James', 'Olivia', 'Stephanie', 'Amelia', 'Maria', 'Betty', 'Lily', 'Donna', 'Samantha', 'Natalie', 'Anna', 'Ava', 'Eva', 'Julie', 'Michelle', 'Daniel', 'Sarah', 'Gabriella', 'Sandra', 'Eva', 'Sophie', 'Emma', 'Natalie', 'Ana', 'Emily', 'Lily', 'Carol', 'Rebecca', 'Sara', 'Lillian', 'Joan', 'Carmela', 'Colleen', 'Elizabeth', 'Michael', 'Nora', 'Julie', 'Noah', 'Paul', 'Julia', 'Emma', 'Charlotte', 'Sophie', 'Julie', 'Rachel', 'Judith', 'Emma', 'Janet', 'Rose', 'Carol', 'Kathleen', 'Catherine', 'Julie', 'Rose', 'Michelle', 'Lillian', 'Rose', 'Lisa', 'Michelle', 'Natalie', 'Rose', 'Julie', 'Nora', 'Natalie', 'Emma', 'Violet', 'Sophie', 'Joseph', 'Julie', 'Elijah', 'Violet', 'Emma', 'Evelyn', 'Natalie', 'Lily', 'Carol', 'Rebecca', 'Janet', 'Rachel', 'Janet', 'Rebecca', 'Connie', 'Emma', 'Carol', 'Michelle', 'Donna', 'Carol', 'Rebecca', 'Connie', 'Carol', 'Carol', 'Violet', 'Ann', 'Natalie', 'Amelia', 'Natalie', 'Rose', 'Nora', 'Michelle', 'Michelle', 'Mary', 'Joseph', 'Mary', 'Charlotte', 'Joseph', 'Rose', 'Rose', 'Carol', 'Rose', 'Rose', 'Rose', 'Rose', 'Joseph', 'Violet', 'Violet', 'Joseph', 'Rose', 'Joseph', 'Carol', 'Rose', 'Joseph', 'Pam', 'Violet', 'Violet', 'Carol', 'Violet', 'Evelyn', 'Violet', 'Lily', 'Rose', 'Rose', 'Carol', 'Evelyn', 'Violet', 'Carol', 'Rose', 'Carol', 'Evelyn', 'Carol', 'Rose', 'Rose', 'Rose', 'Rose', 'Carol', 'Rose', 'Carol', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Rose', 'Ros"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = ['kevin','samuel', 'elizabeth', 'herbert', 'chad', 'kevin','shawn','susan', 'jack', 'elizabeth']\n    # name_list = ['kevin','samuel', 'elizabeth', 'herbert', 'chad', 'kevin','shawn','susan', 'jack', 'elizabeth', 'kevin']\n    name_list = [name for name in name_list if not name.startswith('kevin')]\n    print(name_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #sample_names = ['Aditya', 'Ankit', 'Akshay', 'Arpit', 'Devan']\n    \n    #print(\"sum of a name: \",sum(map(lambda x:len(x),sample_names)))\n    #print(\"sum of a name: \",sum(map(lambda x:len(x),filter(lambda x:not x.islower(),sample_names))))\n    return sum(map(lambda x:len(x),filter(lambda x:not x.islower(),sample_names)))\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_count = 0\n    for i in sample_names:\n        if i.startswith(\"A\"):\n            name_count += len(i) - 1\n        else:\n            name_count += len(i)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_clean = []\n    for i in range(len(sample_names)):\n        if not sample_names[i].startswith('a'):\n            sample_names_clean.append(sample_names[i])\n    return sum(len(i) for i in sample_names_clean)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_sample_names = []\n    for i in sample_names:\n        if i[0].islower():\n            new_sample_names.append(i)\n    return len(new_sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list =[]\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            new_list.append(sample_names[i])\n    return len(new_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #return sum(len(name) for name in sample_names if name[0].islower())\n    return sum(len(name) for name in sample_names if name.isupper())\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) > 0:\n        return items[1:-1]\n    return items\n    \ndef char_order(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) > 0:\n        return items[0]\n    return items\n    \ndef is_in_alphabet(char):\n    '''\n    Write a function to check if a character is in a string.\n    '''\n    if char.isalpha():\n        return True\n    return False\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    count = 0\n    result = []\n    for item in items:\n        if item == \"(\":\n            count += 1\n        elif item == \")\":\n            count -= 1\n        if count == 0:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return ''\n    else:\n        x = items.index('(')\n        y = items.index(')')\n        return items[x+1:y]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items=items.split('(')\n    items=items[0].split(')')\n    items=items[0]\n    return items\n    \ndef is_float(string):\n    '''\n    Write a function that checks if a string is an float.\n    '''\n    \n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n        \ndef list_of_dicts(my_list):\n    '''\n    Write a function that creates a list of dictionaries from a list of dictionaries.\n    '''\n    \n    list_of_dicts=[]\n    for dict in my_list:\n        list_of_dicts.append(dict)\n    return list_of_dicts\n    \ndef nlist(my_list):\n    '''\n    Write a function that creates a new list by removing the last element from a given list.\n    '''\n    \n    last_element=my_list.pop()\n    return my_list\n    \ndef rem_list_dict(my_list):\n    '''\n    Write a function that creates a new list by removing the first element from a given list.\n    '''\n    \n    first_element=my_list.pop(0)\n    return my_list\n    \ndef first_five_dict(my_list):\n    '''\n    Write a function that creates a new list of dictionaries from a given list.\n    '''\n    \n    first_five_dict=[]\n    for i in range(0,5):\n        first_five_dict.append(my_list[i])\n    return first_five_dict\n    \ndef list_of_lists(my_list):\n    '''\n    Write a function that creates a new list by removing the last element from a given list.\n    '''\n    \n    last_element=my_list.pop()\n    return my_list\n    \ndef remove_from_list_dict(my_list):\n    '''\n    Write a function that creates a new list by removing the last element from a given list.\n    '''\n    \n    last_element=my_list.pop()\n    return my_list\n    \ndef last_element_in_dict(my_list):\n    '''\n    Write a function that returns the last element of a list of dictionaries.\n    '''\n    \n    return my_list[len(my_list)-1]\n    \ndef last_element_in_list(my_list):\n    '''\n    Write a function that returns the last element of a list of dictionaries.\n    '''\n    \n    return my_list[len(my_list)-1]\n    \ndef last_element_in_nested_list(my_list):\n    '''\n    Write a function that returns the last element of a list of dictionaries.\n    '''\n    \n    return my_list[len(my_list)-1]\n    \ndef last_element_in_nested_list_2(my_list):\n    '''\n    Write a function that returns the last element of a list of dictionaries.\n    '''\n    \n    return my_list[len(my_list)-1]\n    \ndef list_nested_dict(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_nested_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_nested_lists.append(my_list[i])\n    return list_of_nested_lists\n    \ndef list_of_lists_2(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i])\n    return list_of_lists\n    \ndef list_of_lists_3(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_4(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_5(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_6(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_7(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_8(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_9(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_10(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_11(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_12(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_list)):\n        list_of_lists.append(my_list[i]['Name'])\n    return list_of_lists\n    \ndef list_of_lists_13(my_list):\n    '''\n    Write a function that creates a new list of lists from a given list of dictionaries.\n    '''\n    \n    list_of_lists=[]\n    for i in range(0,len(my_lis"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not isinstance(items,list):\n        items = items.split()\n    else:\n        items = items\n    output = []\n    for item in items:\n        if item.startswith('(') and item.endswith(')'):\n            item = item[1:-1]\n        output.append(item)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split()\n    new_list = []\n    for item in items:\n        match = re.findall(r'\\(.+?\\)', item)\n        if len(match)!= 0:\n            new_list.append(item.replace(match[0], ''))\n        else:\n            new_list.append(item)\n    return''.join(new_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    remove_parenthesis = re.findall(r'[^(]*(?<!\\()[^(]*', items)\n    remove_parenthesis = ''.join(remove_parenthesis)\n    return remove_parenthesis\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item.startswith('('):\n            item = item[1:]\n            if item == '':\n                continue\n            item = item.replace('(', '')\n            item = item.replace(')', '')\n            new_items.append(item)\n        elif item.endswith(')'):\n            item = item[:-1]\n            if item == '':\n                continue\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n            new_items.append(item)\n        else:\n            new_items.append(item)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(\"[()]\",'',items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split(\"(\")[1:]\n    items = items[:-1]\n    items = \"\".join(items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0: \n        return 1\n    return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # init. \n    ans = 1\n    i = 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m = 1\n    for i in range(n):\n        m = m*(n-i)//(i+1)\n    return m\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<0:\n        raise ValueError('n must be a positive integer')\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(i*j for i,j in zip(range(1, n+1), range(1, n)))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 14\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    if n == 1:\n        num = 1\n    elif n == 2:\n        num = 3\n    elif n == 3:\n        num = 5\n    else:\n        num = (3*n - 2)*n/2\n    return num\n    \nprint(is_nonagonal(1))\nprint(is_nonagonal(2))\nprint(is_nonagonal(3))\nprint(is_nonagonal(4))\nprint(is_nonagonal(5)"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return int(n*(n-1)*(2*n-1)/6)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    string = text\n    if \"z\" in string and string[0]!= \"z\" and string[-1]!= \"z\":\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'^z|z$'\n    if re.search(pattern, text):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'^z|z$'\n    if re.search(pattern, text):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \ntext = \"zzz\"\nprint(text_match_wordz_middle(text))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    try:\n        if re.match(r\"[^z]+z\", text):\n            return True\n    except:\n        print(\"There was an error checking if text contains z\")\n    return False\n    \nprint(text_match_wordz_middle('zzz')) # True\nprint(text_match_wordz_middle('zzzzzzzzzzzzzzzzz')) # True\nprint(text_match_wordz_middle('zzzzzzz')) # False\nprint(text_match_wordz_middle('zzzzzzzzzzzzzzzzz')) # False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # this is a pretty simple fucntion to check if the strings contains 'z'.\n    # I'm going to try to read it that way.\n    #   if the first char of the word is 'z' then it should be followed by 'z'\n    #   if the last char of the word is 'z' then it should be followed by 'z'\n    #   if the word ends with 'z' then it should be followed by 'z'\n    #   if the word starts with 'z' then it should be followed by 'z'\n    #   if the word is not in the middle of the word just return false.\n    \n    # this is a simple regex pattern to check if the words\n    #   have the same number of 'z' as the pattern\n    #   and the word is not the first or the last word\n    #   (but not the second last word)\n    #   and the word starts with 'z'\n    #   and ends with 'z'\n    #   (but not the last word)\n    #   and not the last word\n    #   and has 'z' in the middle.\n    #   (but not the second last word)\n    \n    # the following is a more efficient regex pattern that\n    #   checks if the word contains at least one 'z'\n    #   in the middle of the word\n    #   and the word is not the first or the last word\n    #   (but not the second last word)\n    #   and is the first word\n    #   and ends with 'z'\n    #   (but not the last word)\n    #   and has 'z' in the middle.\n    \n    # the following is a simple regex pattern to check if the words\n    #   have the same number of 'z' as the pattern\n    #   and the word is not the first or the last word\n    #   (but not the second last word)\n    #   and has 'z' in the middle.\n    \n    # the following is a slightly more efficient regex pattern to check if the words\n    #   have the same number of 'z' as the pattern\n    #   and the word is not the first or the last word\n    #   (but not the second last word)\n    #   and has 'z' in the middle.\n    \n    # I got the above 3 regexes from here:\n    # https://docs.python.org/3/library/re.html#match-objects\n    #\n    # I did this in a few different ways.\n    # I did a similar thing in the book, but I could not find\n    #   the book in the internet.\n    # I didn't bother explaining how I could find the book.\n    # I found out that the book is here:\n    #   https://docs.python.org/3/library/re.html#match-objects\n    \n    # I found this pattern in this Stack Overflow post:\n    # https://stackoverflow.com/questions/31995711/regular-expression-to-check-if-a-string-is-a-word-beginning-with-z\n    #\n    # I used it to check if the words contained 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # this is a shorter regex pattern that can be used.\n    #   I did this in a similar way as before.\n    # I also found the pattern in this Stack Overflow post:\n    # https://stackoverflow.com/questions/39339926/python-regular-expression-to-check-if-a-string-is-a-word-beginning-with-z\n    #\n    # I used it to check if the words contained 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # this is the entire regex pattern\n    # I used it to check if the words contained 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # this is an even shorter regex pattern\n    # I used it to check if the words contained 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # this is a longer regex pattern\n    # I used it to check if the words contained 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # I tested the code on this:\n    # https://www.w3schools.com/python/python_regex.asp\n    #\n    # I had to add a few regular expressions to make sure it works.\n    # I used the question mark and then added the regular expression\n    #   to find the word 'z' at the beginning of the sentence\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    # I added a question mark to find the word 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # this is the question mark part of the regex\n    #   I used it to find the word 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # I used this regex to find the word 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # I used this regex to find the word 'z' at the beginning\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # the first regex was the same as the book's answer, but I added a question mark\n    #   to find the word 'z' at the beginning of the sentence\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # the second regex was the same as the book's answer, but I added a question mark\n    #   to find the word 'z' at the beginning of the sentence\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # the third regex was the same as the book's answer, but I added a question mark\n    #   to find the word 'z' at the beginning of the sentence\n    #   and the word was not the first word, but not the last word,\n    #   and not the second last word, and it started with 'z', and it ended with 'z'\n    #   and it had 'z' in the middle.\n    \n    # I tried the regex on this:\n    # https://www"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = re.findall(r'\\w+', text)\n    for word in wordz:\n        if word[0] == 'z' and word[-1] == 'z':\n            print('True')\n        else:\n            print('False')\ndef find_even(num):\n    '''\n    Write a function that finds the sum of all even numbers from 0 to a given number.\n    '''\n    even_list = []\n    for i in range(num):\n        if i % 2 == 0:\n            even_list.append(i)\n    print(sum(even_list))\ndef file_write(text):\n    '''\n    Write a function that takes a text and writes it to a text file.\n    '''\n    f = open(\"file.txt\", \"w+\")\n    f.write(text)\n    f.close()\ndef file_read(text):\n    '''\n    Write a function that reads a text file and prints it to the console.\n    '''\n    f = open(\"file.txt\", \"r\")\n    print(f.read())\ndef dict_print(dict1):\n    '''\n    Write a function that takes a dictionary and prints it to the console.\n    '''\n    print(dict1)\ndef dict_print_keys(dict1):\n    '''\n    Write a function that takes a dictionary and prints it to the console, along with its keys.\n    '''\n    print(dict1.keys())\ndef dict_print_values(dict1):\n    '''\n    Write a function that takes a dictionary and prints it to the console, along with its values.\n    '''\n    print(dict1.values())\ndef dict_add_key_value(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and adds it to the dictionary.\n    '''\n    dict1[key] = value\ndef dict_append_key_value(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and appends it to the dictionary.\n    '''\n    dict1[key] = dict1.get(key, 0) + value\ndef dict_add_value_to_existing_key(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and adds the value to the dictionary at that key.\n    '''\n    dict1[key] = value\n    dict1[key] = dict1.get(key, 0) + value\ndef dict_add_key_value_if_not_exists(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and if that key doesn't exist,\n    it adds it to the dictionary and sets the value to 0.\n    '''\n    if key in dict1.keys():\n        print('key already exist')\n        dict1[key] = dict1.get(key, 0) + value\n    else:\n        print('key does not exist')\n        dict1[key] = value\ndef dict_update_key_value(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and updates the value at that key to the new value.\n    '''\n    dict1[key] = value\ndef dict_update_key_value_if_exist(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and if that key exists,\n    it updates the value to the new value.\n    '''\n    if key in dict1.keys():\n        print('key already exist')\n        dict1[key] = value\n    else:\n        print('key does not exist')\n        dict1[key] = value\ndef dict_remove_key(dict1, key):\n    '''\n    Write a function that takes a dictionary and a key, and removes that key and its associated value from the dictionary.\n    '''\n    del dict1[key]\ndef dict_print_keys_values(dict1):\n    '''\n    Write a function that prints the keys and values of a dictionary.\n    '''\n    print(dict1.keys())\n    print(dict1.values())\ndef dict_update_value_to_existing_key(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and updates the dictionary at that key to contain the new value.\n    '''\n    dict1[key] = value\ndef dict_update_value_to_existing_key_if_not_exist(dict1, key, value):\n    '''\n    Write a function that takes a dictionary and a key and value, and if that key exists,\n    it updates the value to the new value.\n    '''\n    if key in dict1.keys():\n        print('key already exist')\n        dict1[key] = value\n    else:\n        print('key does not exist')\n        dict1[key] = value\ndef dict_remove_all_values(dict1):\n    '''\n    Write a function that takes a dictionary and removes all values from that dictionary.\n    '''\n    dict1.clear()\ndef dict_remove_all_keys(dict1):\n    '''\n    Write a function that takes a dictionary and removes all keys from that dictionary.\n    '''\n    dict1.clear()\ndef dict_clear(dict1):\n    '''\n    Write a function that clears a dictionary.\n    '''\n    dict1.clear()\ndef dict_pop(dict1):\n    '''\n    Write a function that takes a dictionary and removes a key-value pair.\n    '''\n    dict1.popitem()\ndef dict_pop_key(dict1):\n    '''\n    Write a function that takes a dictionary and removes a key.\n    '''\n    dict1.pop(input('Enter a key to remove'))\ndef dict_get_key_value(dict1):\n    '''\n    Write a function that takes a dictionary and returns a dictionary with all keys and their associated values.\n    '''\n    print(dict1)\ndef dict_pop_key_value(dict1):\n    '''\n    Write a function that takes a dictionary and returns a dictionary with all keys and their associated values.\n    '''\n    dict1.pop(input('Enter a key to remove'))\ndef dict_pop_all_keys(dict1):\n    '''\n    Write a function that takes a dictionary and removes all the keys from the dictionary.\n    '''\n    dict1.clear()\ndef dict_pop_all_values(dict1):\n    '''\n    Write a function that takes a dictionary and removes all values from the dictionary.\n    '''\n    dict1.clear()\ndef dict_pop_all(dict1):\n    '''\n    Write a function that takes a dictionary and removes all keys and values from the dictionary.\n    '''\n    dict1.clear()\ndef dict_keys(dict1):\n    '''\n    Write a function that returns a dictionary with all keys from a dictionary.\n    '''\n    print(dict1.keys())\ndef dict_values(dict1):\n    '''\n    Write a function that returns a dictionary with all values from a dictionary.\n    '''\n    print(dict1.values())\ndef dict_fromkeys(dict1):\n    '''\n    Write a function that takes a dictionary and returns a dictionary with all keys and values from the dictionary.\n    '''\n    print(dict1.fromkeys(list(dict1.keys()), 'default value'))\ndef dict_copy(dict1):\n    '''\n    Write a function that takes a dictionary and returns a copy of that dictionary.\n    '''\n    print(dict1.copy())\ndef dict_fromkeys_values(dict1):\n    '''\n    Write a function that takes a dictionary and returns a dictionary with all keys and values from the dictionary.\n    '''\n    dict2 = dict1.fromkeys(list(dict1.keys()), 'default value')\n    print(dict2)\ndef dict_fromkeys_values_iter(dict1):\n    '''\n    Write a function that takes a dictionary and returns a dictionary with all keys and values from the dictionary.\n    '''\n    dict2 = dict1.fromkeys(list(dict1.keys()), 'default value')\n    print(dict2)\ndef dict_fromkeys_values_iter_values(dic"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'^[zZ]+[^zZ]+[zZ]+$', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = re.sub(r'\\bz\\b', '', text)\n    return text_match_wordz(new_text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    # Split the string into words\n    words = re.split(r'\\s+', text)\n    # Iterate over the list of words\n    for i in range(len(words)):\n        # Check if the first character of the word is 'z'\n        if words[i][0] == 'z':\n            # Return true if it is the first character of the word and the string ends with a space\n            if words[i][0] == 'z' and words[i][-1] =='':\n                return True\n            # Check if the second character of the word is 'z'\n            elif words[i][1] == 'z':\n                return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('[^z]+\\bz\\b', text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = \"\"\n    for word in text.split():\n        if \"z\" in word:\n            new_text += \" \"\n        else:\n            new_text += word\n    return new_text.lstrip().rstrip()\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # edge case.\n    if k==0:\n        return input\n    # recursion\n    return reverse_Array_Upto_K(input, k-1) + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    if k >= n: \n        k = k % n \n    # Reverse the input list \n    # from index 0 to k \n    # and return the list \n    return input[n-k:] + input[:k] \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_arr = input[k:] + input[:k]\n    return rev_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = 0\n    for i in range(0,k):\n        reverse = reverse*10 + input[i]\n    reverse = reverse//10\n    rev_list = []\n    while (reverse > 0):\n        rev_list.append(reverse%10)\n        reverse = reverse//10\n    for i in range(k):\n        input[i] = rev_list.pop()\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialise the array with numbers\n    arr = input[:]\n    # While elements are in the array\n    while k:\n        # Reverse the first k-1 elements\n        for i in range(len(arr)-1, len(arr)-k, -1):\n            arr[i], arr[i-k] = arr[i-k], arr[i]\n        # Reverse the first k elements\n        for i in range(k):\n            arr[i], arr[len(arr)-k+i] = arr[len(arr)-k+i], arr[i]\n        # Increment k\n        k -= 1\n    # Return the array\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    index = 0\n    while index < k:\n        input[index], input[end] = input[end], input[index]\n        index += 1\n        end -= 1\n    print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for i in range(len(input)): \n        if (i > k): \n            arr.append(input[i]) \n    return arr \nprint(reverse_Array_Upto_K([1,2,3,4,5], 5))\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input[:]\n    start = 0\n    end = len(input)-1\n    while start <= end:\n        while arr[start]!= k:\n            start += 1\n        while arr[end]!= k:\n            end -= 1\n        if start <= end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    print(\"Array after reverse: \",end=\" \")\n    if len(arr) <= k:\n        print(arr)\n        return\n    for i in range(len(arr)):\n        if i == k:\n            break\n        arr = arr[:i]+arr[i+1:]\n        print(arr)\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your Code Here\n    new_tuple = (test_tup[0],test_tup[1],test_tup[2],test_tup[3],test_tup[4],test_tup[5],test_tup[6],test_tup[7],test_tup[8],test_tup[9],test_tup[10],test_tup[11],test_tup[12],test_tup[13],test_tup[14],test_tup[15],test_tup[16],test_tup[17],test_tup[18],test_tup[19],test_tup[20],test_tup[21],test_tup[22],test_tup[23],test_tup[24],test_tup[25],test_tup[26],test_tup[27],test_tup[28],test_tup[29],test_tup[30],test_tup[31],test_tup[32],test_tup[33],test_tup[34],test_tup[35],test_tup[36],test_tup[37],test_tup[38],test_tup[39],test_tup[40],test_tup[41],test_tup[42],test_tup[43],test_tup[44],test_tup[45],test_tup[46],test_tup[47],test_tup[48],test_tup[49],test_tup[50],test_tup[51],test_tup[52],test_tup[53],test_tup[54],test_tup[55],test_tup[56],test_tup[57],test_tup[58],test_tup[59],test_tup[60],test_tup[61],test_tup[62],test_tup[63],test_tup[64],test_tup[65],test_tup[66],test_tup[67],test_tup[68],test_tup[69],test_tup[70],test_tup[71],test_tup[72],test_tup[73],test_tup[74],test_tup[75],test_tup[76],test_tup[77],test_tup[78],test_tup[79],test_tup[80],test_tup[81],test_tup[82],test_tup[83],test_tup[84],test_tup[85],test_tup[86],test_tup[87],test_tup[88],test_tup[89],test_tup[90],test_tup[91],test_tup[92],test_tup[93],test_tup[94],test_tup[95],test_tup[96],test_tup[97],test_tup[98],test_tup[99],test_tup[100])\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    final_tuple = test_tup + (test_dict, )\n    return final_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = (test_tup) + (test_dict)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n    \n    \ndef combine_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to combine two tuples into a single tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup1 + test_tup2)\n    \n    \ndef find_element_in_list(test_list, test_element):\n    '''\n    Write a function to check if a particular element is present in a list.\n    '''\n    return test_element in test_list\n    \n    \ndef check_if_list_is_sorted(test_list):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return test_list == sorted(test_list)\n    \n    \ndef count_occurences(test_list, test_element):\n    '''\n    Write a function to count the number of occurrences of a particular element in a list.\n    '''\n    return test_list.count(test_element)\n    \n    \ndef search_for_element_in_list(test_list, test_element):\n    '''\n    Write a function to search for an element in a list using recursion.\n    '''\n    if len(test_list) == 0:\n        return False\n    if test_list[0] == test_element:\n        return True\n    return search_for_element_in_list(test_list[1:], test_element)\n    \n    \ndef insertion_sort_list(test_list):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    if len(test_list) == 1:\n        return test_list\n    new_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            new_list = test_list\n        elif test_list[i] <= new_list[0]:\n            new_list = test_list\n        else:\n            for j in range(len(new_list)):\n                if test_list[i] < new_list[j]:\n                    new_list.insert(j, test_list[i])\n                    break\n    return new_list\n    \n    \ndef insertion_sort_list_recursive(test_list):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    if len(test_list) == 1:\n        return test_list\n    else:\n        for i in range(len(test_list)):\n            if test_list[i] < test_list[i-1]:\n                test_list.insert(i, test_list[i-1])\n                test_list.pop(i-1)\n                return insertion_sort_list_recursive(test_list)\n    \n    \ndef merge_sort(test_list):\n    '''\n    Write a function to sort a list using merge sort.\n    '''\n    if len(test_list) == 1:\n        return test_list\n    \n    mid = len(test_list) // 2\n    left_list = test_list[:mid]\n    right_list = test_list[mid:]\n    \n    left_list = merge_sort(left_list)\n    right_list = merge_sort(right_list)\n    \n    return merge_sorted_lists(left_list, right_list)\n    \n    \ndef merge_sorted_lists(test_list1, test_list2):\n    '''\n    Write a function to merge two sorted lists. The list should be sorted in ascending order.\n    '''\n    test_list = []\n    while len(test_list1) > 0 and len(test_list2) > 0:\n        if test_list1[0] < test_list2[0]:\n            test_list.append(test_list1[0])\n            test_list1.pop(0)\n        else:\n            test_list.append(test_list2[0])\n            test_list2.pop(0)\n    if len(test_list1) == 0:\n        return test_list + test_list2\n    else:\n        return test_list + test_list1\n    \n    \ndef recurse_binary_search(test_list, test_element):\n    '''\n    Write a recursive function to search for an element in a list using binary search.\n    '''\n    if len(test_list) == 0:\n        return False\n    if test_list[0] == test_element:\n        return True\n    if test_list[0] > test_element:\n        return recurse_binary_search(test_list[1:], test_element)\n    if test_list[0] < test_element:\n        return recurse_binary_search(test_list[1:], test_element)\n    \n    \ndef binary_search_recursive(test_list, test_element):\n    '''\n    Write a recursive function to search for an element in a list using binary search.\n    '''\n    if len(test_list) == 0:\n        return False\n    if test_list[0] == test_element:\n        return True\n    if test_list[0] > test_element:\n        return binary_search_recursive(test_list[1:], test_element)\n    if test_list[0] < test_element:\n        return binary_search_recursive(test_list[1:], test_element)\n    \n    \ndef binary_search_iterative(test_list, test_element):\n    '''\n    Write an iterative function to search for an element in a list using binary search.\n    '''\n    lower = 0\n    upper = len(test_list) - 1\n    while lower <= upper:\n        mid = (lower + upper) // 2\n        if test_list[mid] == test_element:\n            return True\n        elif test_list[mid] < test_element:\n            lower = mid + 1\n        else:\n            upper = mid - 1\n    return False\n    \n    \ndef palindrome_check(test_string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(test_string) == 1:\n        return True\n    if test_string[0] == test_string[-1]:\n        test_string = test_string[1:-1]\n        return palindrome_check(test_string)\n    else:\n        return False\n    \n    \ndef check_if_palindrome(test_string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(test_string) == 1:\n        return True\n    if test_string[0] == test_string[-1]:\n        test_string = test_string[1:-1]\n        return check_if_palindrome(test_string)\n    else:\n        return False\n    \n    \ndef list_reversal(test_list):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(test_list) <= 1:\n        return test_list\n    return test_list[-1:] + list_reversal(test_list[:-1])\n    \n    \ndef find_factors(test_num):\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    test_list = []\n    for i in range(1, test_num + 1):\n        if test_num % i == 0:\n            test_list.append(i)\n    return test_list\n    \n    \ndef list_factors(test_num):\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    if test_num <= 1:\n        return []\n    if test_num == 2:\n        return [2]\n    if test_num == 3:\n        return [3]\n    return list_factors(test_num - 1) + [test_num]\n    \n    \ndef is_prime(test_num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if test_num <= 1:\n        return False\n    if test"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n    "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(set(test_tup) | set(test_dict)))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_1 = list(test_tup)\n    tup_1.append(test_dict)\n    tup_2 = tuple(tup_1)\n    return tup_2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m,n = len(cost), len(cost[0])\n    dp = [[None]*n for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = (0 if cost[i][j]==0 else 1)\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if j+1 < n and cost[i][j+1]!= 0:\n                dp[i][j] = (dp[i][j+1] + cost[i][j])/2\n            if i+1 < m and cost[i+1][j]!= 0:\n                dp[i][j] = (dp[i][j] + cost[i][j])/2\n    return dp[0][0]\n    \n    \ndef maxSumEqualPartition(arr, m):\n    '''\n    Given an array of size N and a number M. The task is to find all subsets of the array with sum of elements equals M.\n    '''\n    n = len(arr)\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = 1\n        \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j >= arr[i-1]:\n                dp[i][j] = (dp[i][j-arr[i-1]] + dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][m]\n    \ndef maxSum(arr):\n    '''\n    Given an array of size N and a number M. The task is to find the maximum sum of elements such that elements smaller than them are not included.\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j >= arr[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][n]\n    \ndef maxSumIncreasingSubsequence(arr):\n    '''\n    Given an array of size N and a number M. The task is to find the maximum sum of elements such that elements smaller than them are not included.\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j >= arr[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    #print(dp)\n    return dp[n][n]\n    \ndef maximumUniqueSubarray(arr):\n    '''\n    Given an array of size N and a number M. The task is to find the maximum sum of elements such that elements smaller than them are not included.\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j >= arr[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    #print(dp)\n    return max(dp[n][n], 0)\n    \ndef isMaximum(arr, n, m):\n    '''\n    Given an array of size N and a number M. The task is to find the maximum sum of elements such that elements smaller than them are not included.\n    '''\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j >= arr[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + arr[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    #print(dp)\n    return dp[n][m] > 0\n    \ndef countPalindromeSubsequences(arr):\n    '''\n    Given an array of size N. The task is to find the number of palindromes subsequences in the array. A palindrome is a word which is equal to it's reverse. For example: 'radar' and 'radda'.\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1):\n            if j == i:\n                dp[i][j] = 1\n            elif j > i:\n                dp[i][j] = dp[i+1][j]\n            else:\n                if arr[j] == arr[i-j]:\n                    dp[i][j] = 1 + dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1]\n    return dp[0][n-1]\n    \ndef count_substrings_with_distinct_chars(string):\n    '''\n    Given a string of size N, find the number of substrings with distinct characters.\n    '''\n    n = len(string)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1):\n            if j == i:\n                dp[j][i] = 1\n            elif j > i:\n                dp[j][i] = dp[j][i-1]\n            else:\n                if string[j]!= string[i-j]:\n                    dp[j][i] = dp[j][i-1]\n                else:\n                    dp[j][i] = dp[j][i-1] + dp[j+1][i-1]\n    return dp[0][n-1]\n    \ndef smallest_subarray_with_given_sum(arr, n, s):\n    '''\n    Given an array of size N and a number M. The task is to find the smallest subarray such that the sum of all its elements is greater than or equal to M.\n    '''\n    if s <= 0:\n        return -1\n    dp = [[None]*(n+1) for _ in range(2)]\n    for i in range(n+1):\n        dp[0][i] = float('inf')\n    dp[1][0] = 0\n    for i in range(1, n+1):\n        dp[1][i] = i\n    \n    for i in range(2, n+1)"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return cost[0][0]\n    \n    else:\n        for i in range(n):\n            cost[i].insert(0, 0)\n            cost[i].append(0)\n        \n        for i in range(1, n-1):\n            cost[i][i] = (cost[i-1][i] + cost[i+1][i]) / 2\n        \n        for i in range(1, n-1):\n            for j in range(1, n-1):\n                if cost[i][j] == 0:\n                    cost[i][j] = cost[i-1][j] + cost[i+1][j]\n                else:\n                    cost[i][j] = (cost[i-1][j] + cost[i+1][j]) / 2\n        \n        return max(cost[n-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    N = len(cost)\n    # initialization of\n    # dp[i][j] : maximum average\n    # dp[i][j] = max(dp[i+1][j], dp[i][j+1]) + cost[i][j]\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    # initialization of\n    # dp[0][0] = cost[0][0]\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    #base condition\n    if len(cost) == 1:\n        return 0\n    \n    #array used to store the path.\n    dp = [[0 for _ in range(len(cost[0]))] for _ in range(len(cost))]\n    \n    #first value in the array is always 0\n    for j in range(len(cost[0])):\n        dp[0][j] = 0\n    \n    #second value in the array is always 0\n    for i in range(len(cost)):\n        dp[i][0] = 0\n    \n    #generating the first row\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[0])):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    #generating the first column\n    for j in range(1, len(cost[0])):\n        dp[0][j] = cost[0][j] + max(dp[0][j-1], dp[1][j])\n    \n    #generating the last row\n    for i in range(1, len(cost)):\n        dp[i][len(cost[0])-1] = cost[i][len(cost[0])-1] + max(dp[i-1][len(cost[0])-1], dp[i][len(cost[0])-2])\n    \n    #generating the last column\n    for j in range(1, len(cost[0])):\n        dp[len(cost)-1][j] = cost[len(cost)-1][j] + max(dp[len(cost)-1][j-1], dp[len(cost)-2][j])\n    \n    #returning the maximum average\n    return (dp[len(cost)-1][len(cost[0])-1])/((len(cost)-1)+(len(cost[0])-1))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / float(n)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    # If number of cells visited is equal to number of cells in the array, then we have a path from starting cell to ending cell. So, average of this path would be the total cost of the path\n    if n == 0:\n        return 0\n    \n    # If there is only one cell in the array, then average would be equal to total cost.\n    if n == 1:\n        return cost[0][0]\n    \n    # If there are more than one cells in the array, we will start traversing the array from top-left corner to bottom-right corner\n    # If there are odd number of cells, then we have to maintain a list of cells visited.\n    # If there are even number of cells, then there are no more cells to be visited.\n    \n    if n%2 == 0:\n        # For an even number of cells, we maintain a list of cells visited\n        # Initially, we have to visit first two cells and then we move to the next two cells\n        # Initially, we maintain a list of visited cells.\n        \n        # First, maintain the list of visited cells\n        visited = [[False]*n for i in range(n)]\n        \n        # Next, visit the first two cells\n        visited[0][0] = True\n        visited[0][1] = True\n        \n        # Since we are visiting the first two cells, we have to calculate average of them\n        # Calculate average by dividing the total cost with the number of cells visited\n        average = (cost[0][0]+cost[0][1])/2\n        \n        # Start traversing the array from top-left cell to the bottom-right cell\n        for i in range(1,n):\n            # Since we have to visit the cells in order, we have to move to the first cell in the following row\n            visited[i][0] = True\n            \n            # Visit the first cell of the next row\n            visited[i][1] = True\n            \n            # Calculate average of the visited cells\n            average += (cost[i][0]+cost[i][1])/2\n            \n        return average\n        \n    else:\n        # For an odd number of cells, we will only visit 2 cells and thus, we will have to maintain a list of cells visited.\n        # Initially, we have to visit first two cells and then we move to the next two cells\n        # Initially, we maintain a list of visited cells.\n        visited = [[False]*n for i in range(n)]\n        \n        # First, visit the first two cells\n        visited[0][0] = True\n        visited[0][1] = True\n        \n        # Since we are visiting the first two cells, we have to calculate average of them\n        # Calculate average by dividing the total cost with the number of cells visited\n        average = (cost[0][0]+cost[0][1])/2\n        \n        # Start traversing the array from top-left cell to the bottom-right cell\n        for i in range(1,n):\n            # Since we have to visit the cells in order, we have to move to the first cell in the following row\n            visited[i][0] = True\n            \n            # Visit the first cell of the next row\n            visited[i][1] = True\n            \n            # Calculate average of the visited cells\n            average += (cost[i][0]+cost[i][1])/2\n        \n        return average\n        \nif __name__ == '__main__':\n    cost = [[1,2,3],\n            [4,5,6],\n            [7,8,9]]\n    \n    print(maxAverageOfPath(cost))\n    "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    d = [[0]*n for _ in range(n)]\n    d[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i > 0 and j > 0:\n                d[i][j] = cost[i][j] + max(d[i-1][j], d[i][j-1])\n    \n    return d[-1][-1] / len(cost)\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row_num = len(cost)\n    col_num = len(cost[0])\n    \n    dp_table = [[0 for _ in range(col_num)] for _ in range(row_num)]\n    \n    #Initialize\n    dp_table[0][0] = cost[0][0]\n    \n    for i in range(1, col_num):\n        dp_table[0][i] = cost[0][i] + dp_table[0][i-1]\n    \n    for j in range(1, row_num):\n        dp_table[j][0] = cost[j][0] + dp_table[j-1][0]\n    \n    for i in range(1, row_num):\n        for j in range(1, col_num):\n            dp_table[i][j] = cost[i][j] + min(dp_table[i-1][j], dp_table[i][j-1])\n            \n    return (dp_table[row_num-1][col_num-1] / (row_num*col_num))\n    \nif __name__ == '__main__':\n    cost = [[1, 5, 3], [2, 8, 6], [4, 7, 5]]\n    print(maxAverageOfPath(cost)"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #print(cost)\n    rows = len(cost)\n    cols = len(cost[0])\n    \n    # dynamic programming approach\n    dp = [[0 for x in range(cols)] for x in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            # if first cell, just get the value\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                continue\n            # if top and left, make sure both are true\n            if i == 0 and j > 0 and j < cols-1:\n                dp[i][j] = max(dp[i][j-1], dp[i][j+1]) + cost[i][j]\n            # if top but not left, just add up the top\n            if i > 0 and j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            # if top and not left, just add up top and bottom\n            if i > 0 and j > 0 and j < cols-1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i][j+1]) + cost[i][j]\n            # if not top, just add up the top and left\n            if i > 0 and j > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # print(dp)\n    # total = 0\n    # for x in dp:\n    #     total += x[0]\n    # print(total/cols)\n    \n    # return the maximum average\n    return max(dp[rows-1]) / (cols)\n    \n    \ndef maxAverageOfPath_2(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #print(cost)\n    rows = len(cost)\n    cols = len(cost[0])\n    \n    # dynamic programming approach\n    dp = [[0 for x in range(cols)] for x in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            # if first cell, just get the value\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                continue\n            # if top and left, make sure both are true\n            if i == 0 and j > 0 and j < cols-1:\n                dp[i][j] = max(dp[i][j-1], dp[i][j+1]) + cost[i][j]\n            # if top but not left, just add up the top\n            if i > 0 and j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            # if top and not left, just add up top and bottom\n            if i > 0 and j > 0 and j < cols-1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i][j+1]) + cost[i][j]\n            # if not top, just add up the top and left\n            if i > 0 and j > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # print(dp)\n    # total = 0\n    # for x in dp:\n    #     total += x[0]\n    # print(total/cols)\n    \n    # return the maximum average\n    return max(dp[rows-1]) / (cols)\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    dp = [[-1 for i in range(col)] for j in range(row)]\n    if row == 1 and col == 1:\n        return cost[0][0]\n    if row == 1 or col == 1:\n        return float('inf')\n    dp[0][0] = cost[0][0]\n    for i in range(1, row):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1, col):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1, row):\n        for j in range(1, col):\n            dp[i][j] = min(cost[i][j] + dp[i-1][j], cost[i][j] + dp[i][j-1], cost[i][j] + dp[i-1][j-1])\n    return (dp[row-1][col-1] / (row*col))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_students = []\n    for name in students.keys():\n        if students[name][0] > h and students[name][1] > w:\n            list_of_students.append(name)\n    return list_of_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if h > v[0] and w > v[1]}"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for name,student in students.items():\n        if student[0]<h and student[1]<w:\n            print(name)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for key,value in students.items():\n        if value[0] >= h and value[1] >= w:\n            res[key] = value\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students if student_height > h and student_weight > w]\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter function\n    # Filter out the Students with height greater than given\n    # sort the student name in ascending order of height\n    for i in range(len(students)):\n        if students[i][1][0] > h:\n            #print('less',students[i])\n            students.pop(i)\n    # Filter out the Students with weight greater than given\n    # sort the student name in ascending order of weight\n    for i in range(len(students)):\n        if students[i][1][1] > w:\n            #print('less',students[i])\n            students.pop(i)\n    \n    # for i in range(len(students)):\n        # print('less',students[i])\n    # Sort the students according to height and weight\n    #students.sort(key=lambda x: x[1])\n    # print(students)\n    # print(students)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if student in students and students[student][1] > h and students[student][0] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #filter student\n    for i in range(len(students)):\n        if students[i][0]<h and students[i][1]<w:\n            students[i]=True\n        else:\n            students[i]=False\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data=[]\n    for student in students:\n        if students[student][0]>h and students[student][1]>w:\n            filtered_data.append(student)\n    return filtered_data\nstudents = {'Jim':(70,50), 'Pam':(80,50), 'Roy':(90,60), 'Steven':(100,70), 'Mike':(50,40), 'Scott':(40,90)}\nmin_height=60\nmin_weight=120\nprint(filter_data(students,min_height,min_weight))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = []\n    for student in students:\n        if student[0] > h and student[1] > w:\n            res.append(student)\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    dict1 = {}\n    for i in range(len(nums1)):\n        if nums1[i] in dict1:\n            dict1[nums1[i]].append(i)\n        else:\n            dict1[nums1[i]] = [i]\n    \n    dict2 = {}\n    for i in range(len(nums2)):\n        if nums2[i] in dict2:\n            dict2[nums2[i]].append(i)\n        else:\n            dict2[nums2[i]] = [i]\n    \n    print(dict1)\n    print(dict2)\n    print(\"{0} in {1} = {2}, {0} in {3} = {4}\".format(1, dict1, 2, dict2, 5))\n    \n    print([(dict1[key], dict2[key]) for key in dict1.keys() if key in dict2.keys()])\n    count = 0\n    for item in dict1.items():\n        if item[1] == dict2.items():\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # index_count = 0\n    # for index in range(len(nums1)):\n    #     if nums1[index] == nums2[index]:\n    #         index_count += 1\n    # return index_count\n    \n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    mapping = {}\n    for i, n in enumerate(nums1):\n        if mapping.get(n):\n            mapping[n].append(i)\n        else:\n            mapping[n] = [i]\n    count = 0\n    for n in nums2:\n        if mapping.get(n):\n            for i in mapping[n]:\n                if i == nums1.index(n):\n                    count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return nums1.count(nums2[0])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i]==nums2[i]])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_hash, nums2_hash = {}, {}\n    count = 0\n    for i, x in enumerate(nums1):\n        nums1_hash[x] = i\n    for i, x in enumerate(nums2):\n        nums2_hash[x] = i\n    for k,v in nums1_hash.items():\n        if nums2_hash.get(k, -1)!= -1:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if nums1 == nums2:\n        return len(nums1)\n    if len(nums1)!= len(nums2):\n        return False\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base))) ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_base = 0\n    if power == 0:\n        return 0\n    elif power == 1:\n        return base\n    else:\n        for i in str(base):\n            sum_base = sum_base + int(i) ** power\n    return sum_base\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power < 0:\n        raise ValueError(\"The power is negative\")\n    elif power == 1:\n        return base\n    elif base == 0:\n        raise ValueError(\"The base is zero\")\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(base, base + 10):\n        sum += int(i**power)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while base <= 10:\n        total += base\n        base = base * 10\n    print(total)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power!= 0:\n        result += base\n        power -= 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power < 0:\n        sum = 0\n    else:\n        sum = base\n        while power > 0:\n            sum += base\n            power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power < 0:\n        raise ValueError('Power cannot be negative!')\n    \n    while power:\n        sum += base % 10\n        base = base // 10\n        power -= 1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if '\"' in text1:\n        text=text1.replace('\"','')\n        text=text.split(' ')\n        temp=[]\n        for i in range(len(text)):\n            if text[i]!='':\n                temp.append(text[i])\n        return''.join(temp)\n    else:\n        return text1\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract and return only numbers from the given string.\n    '''\n    if re.search('[0-9]+', text1):\n        return re.findall('[0-9]+', text1)\n    else:\n        return None\n    \ndef clean_text(text):\n    '''\n    Write a function to clean and return only the alphabetical letters from the given string.\n    '''\n    clean_text=''\n    for i in text:\n        if i.isalpha():\n            clean_text+=i\n    return clean_text\n    \ndef clean_names(list):\n    '''\n    Write a function that takes a list of names and returns a list of unique names (alphabetically sorted).\n    '''\n    uniq=[]\n    for i in list:\n        if i not in uniq:\n            uniq.append(i)\n    return sorted(uniq)\n    \ndef extract_names(text):\n    '''\n    Write a function to extract and return only the names from the given string.\n    '''\n    names=''\n    if text:\n        for i in text:\n            if i!=''and i!=',':\n                if i!='.':\n                    if i!='\\n':\n                        names+=i\n    return clean_names(names.split(','))\n    \ndef extract_email_addresses(text):\n    '''\n    Write a function to extract and return only the email addresses from the given string.\n    '''\n    emails=''\n    if text:\n        for i in text:\n            if i!=''and i!='\\n':\n                if i!=',':\n                    if i!='\\t':\n                        emails+=i\n    return emails.split(',')\n    \ndef extract_domains(text):\n    '''\n    Write a function to extract and return only the domains from the given string.\n    '''\n    domains=''\n    if text:\n        for i in text:\n            if i!=' ':\n                if i!=',':\n                    if i!='\\t':\n                        domains+=i\n    return domains.split(',')\n    \ndef is_valid_email_address(email):\n    '''\n    Write a function that takes as an input a string of email address and returns if the email address is valid or not.\n    '''\n    if re.search('[a-z0-9]+[\\._]?[a-z0-9]+[@]', email):\n        return True\n    else:\n        return False\n    \ndef replace_all(text, dict1):\n    '''\n    Write a function that takes a text and a dictionary, which contains a series of keys and values to replace from the text.\n    '''\n    for i, j in dict1.items():\n        text=text.replace(i, j)\n    return text\n    \ndef replace_all_of_the_above(text, dict1, dict2):\n    '''\n    Write a function that takes a text, a dictionary which contains a series of keys and values to replace from the text and another dictionary which contains a series of keys and values to replace from the dictionary.\n    '''\n    for i, j in dict1.items():\n        text=text.replace(i, j)\n    for i, j in dict2.items():\n        text=text.replace(i, j)\n    return text\n    \ndef extract_alphanumeric(text):\n    '''\n    Write a function to extract and return only the alphanumeric characters from the given string.\n    '''\n    numeric=''\n    if text:\n        for i in text:\n            if i.isalnum():\n                numeric+=i\n    return numeric\n    \ndef extract_date(text):\n    '''\n    Write a function to extract and return only the date from the given string.\n    '''\n    text=text.split(' ')\n    if len(text)>1:\n        if text[1]=='Jan':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Feb':\n            if '01'<=text[0]<='28':\n                return text[0]\n        elif text[1]=='Mar':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Apr':\n            if '01'<=text[0]<='30':\n                return text[0]\n        elif text[1]=='May':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Jun':\n            if '01'<=text[0]<='30':\n                return text[0]\n        elif text[1]=='Jul':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Aug':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Sep':\n            if '01'<=text[0]<='30':\n                return text[0]\n        elif text[1]=='Oct':\n            if '01'<=text[0]<='31':\n                return text[0]\n        elif text[1]=='Nov':\n            if '01'<=text[0]<='30':\n                return text[0]\n        elif text[1]=='Dec':\n            if '01'<=text[0]<='31':\n                return text[0]\n        else:\n            return None\n    else:\n        return None\n    \ndef convert_unix_time_to_date(text):\n    '''\n    Write a function that takes as input a string representing the date in unix time and returns the date as a string in the format of dd-mm-yyyy.\n    '''\n    text=text.split(' ')\n    if text[0] and text[1] and text[2]:\n        if '-' in text[0]:\n            if len(text[0])==4:\n                if int(text[0])>=0 and int(text[0])<=252000:\n                    return '{}-{}-{}'.format(text[0],text[1],text[2])\n                else:\n                    return None\n            elif len(text[0])==5:\n                if int(text[0])>=0 and int(text[0])<=90000:\n                    return '{}-{}-{}'.format(text[0],text[1],text[2])\n                else:\n                    return None\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None\n    \ndef convert_unix_time_to_date1(text):\n    '''\n    Write a function that takes as input a string representing the date in unix time and returns the date as a string in the format of dd-mm-yyyy.\n    '''\n    text=text.split(' ')\n    if text[0] and text[1] and text[2]:\n        if '-' in text[0]:\n            if len(text[0])==4:\n                if int(text[0])>=0 and int(text[0])<=252000:\n                    return '{}-{}-{}'.format(text[0],text[1],text[2])\n                else:\n                    return None\n            elif len(text[0])==5:\n                if int(text[0])>=0 and int(text[0])<=90000:\n                    return '{}-{}-{}'.format(text[0],text[1],text[2])\n                else:\n                    return None\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None\n    \ndef extrac"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    my_regex = r'\\\"(.*)\\\"'\n    extracted_quotation = re.findall(my_regex, text1)\n    return extracted_quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\\n\",\" \")\n    text1 = text1.replace(\"\\t\",\" \")\n    text1 = text1.replace(\"\\r\",\" \")\n    text1 = text1.replace(\"\\r\",\" \")\n    text1 = text1.replace(\"\\t\",\" \")\n    \n    if text1 == \"\":\n        return 0\n    # elif text1 == \"\":\n    #     return 0\n    # else:\n    #     return text1[text1.find(\"\\\"\")+1:text1.find(\"\\\"\")+4]\n    else:\n        #match = re.findall(r'\\w+\\s[\\w\\s]+', text1)\n        match = re.findall(r'\\w+\\s[\\w\\s]+?(?=\\\")', text1)\n        if match == None:\n            return 0\n        else:\n            return match[0]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if not text1:\n        return \"\"\n    \n    # Check if text is enclosed in double quotes or single quotes\n    if not isinstance(text1, str):\n        return \"\"\n    \n    # Checking if the string is enclosed in double quotes or not\n    if text1[0] == '\"' and text1[-1] == '\"':\n        # String enclosed in double quotes\n        inside_double_quotes = True\n    elif text1[0] == '\\'' and text1[-1] == '\\'':\n        # String enclosed in single quotes\n        inside_double_quotes = False\n    else:\n        # String not enclosed in quotes\n        return \"\"\n    \n    # Find the position of first double quote\n    first_double_quote_position = 0\n    if inside_double_quotes:\n        # Searching for the position of first double quote\n        while (True):\n            if text1[first_double_quote_position] == '\"':\n                break\n            first_double_quote_position += 1\n    else:\n        # Searching for the position of first single quote\n        while (True):\n            if text1[first_double_quote_position] == \"\\'\":\n                break\n            first_double_quote_position += 1\n    \n    # Find the position of first double quote\n    second_double_quote_position = len(text1)\n    if inside_double_quotes:\n        # Searching for the position of second double quote\n        while (True):\n            if text1[second_double_quote_position - 1] == '\"':\n                break\n            second_double_quote_position -= 1\n    else:\n        # Searching for the position of second single quote\n        while (True):\n            if text1[second_double_quote_position - 1] == \"\\'\":\n                break\n            second_double_quote_position -= 1\n    \n    # Extracting the string\n    return text1[first_double_quote_position + 1:second_double_quote_position]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = text1.find('\" ')\n    return text1[quotation+2:]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i]\n            str4 = str3.split('\"')\n            # print(str4)\n            str5 = str4[0]\n            return str5\n    return None\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = text1\n    str2 = str1.split(\" \")\n    for i in range(len(str2)):\n        if re.match(r'[(].*[)]', str2[i]):\n            str3 = str2[i"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    p1 = re.compile(r\"(\\\"[^\\\"]*\\\")\")\n    p2 = re.compile(r\"[\\(\\[\\{\\<]\")\n    p3 = re.compile(r\"[\\)\\]\\}\\>]\")\n    p4 = re.compile(r\"\\\"\")\n    x = p1.findall(text1)\n    y = p2.findall(text1)\n    z = p3.findall(text1)\n    for i in range(len(x)):\n        x[i] = re.sub(p4, \"\", x[i])\n        x[i] = re.sub(p2, \"\", x[i])\n        x[i] = re.sub(p3, \"\", x[i])\n    return x\n    '''\n    Write a program that prints all permutations of the characters in the string \"ABC\" on separate lines.\n    '''\n    import itertools\n    #print(list(itertools.permutations('ABC')))\n    s = 'ABC'\n    for i in range(len(s)):\n        for j in range(len(s)):\n            for k in range(len(s)):\n                print(s[i],s[j],s[k],sep=\"\")\ndef extract_numbers(text2):\n    '''\n    Write a program to extract all the numbers from the given string and return it as a list.\n    '''\n    p = re.compile(r\"[0-9]\")\n    x = p.findall(text2)\n    return x\ndef valid_phone_number(text3):\n    '''\n    Write a program to extract phone numbers from a given string.\n    '''\n    p = re.compile(r'[0-9]+')\n    #p = re.compile(r'[0-9]{10}')\n    #p = re.compile(r'[0-9]{10,14}')\n    x = p.findall(text3)\n    return x\ndef get_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    x = re.findall(r'\\b'+match_string+'\\b', string)\n    return x\ndef find_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    x = re.findall(r'\\b'+match_string+'\\b', string)\n    return x\ndef find_matching_words2(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    p = re.compile(r'\\b'+match_string+'\\b')\n    x = p.findall(string)\n    return x\ndef extract_numbers_in_text(text4):\n    '''\n    Write a program to extract phone numbers from a given string.\n    '''\n    p = re.compile(r'\\b\\d{3,}\\b')\n    x = p.findall(text4)\n    return x\ndef extract_numbers_in_text2(text5):\n    '''\n    Write a program to extract phone numbers from a given string.\n    '''\n    p = re.compile(r'\\b\\d{3,}\\b')\n    x = p.findall(text5)\n    return x\ndef extract_email(text6):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')\n    x = p.findall(text6)\n    return x\ndef extract_email(text7):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')\n    x = p.findall(text7)\n    return x\ndef extract_email(text8):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text8)\n    return x\ndef extract_email(text9):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text9)\n    return x\ndef extract_emails(text10):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text10)\n    return x\ndef extract_emails(text11):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text11)\n    return x\ndef get_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    x = re.findall(r'\\b'+match_string+'\\b', string)\n    return x\ndef get_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    x = re.findall(r'\\b'+match_string+'\\b', string)\n    return x\ndef find_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    p = re.compile(r'\\b'+match_string+'\\b')\n    x = p.findall(string)\n    return x\ndef find_matching_words(string, match_string):\n    '''\n    Write a program that returns a list of all the matching words in the given string.\n    '''\n    import re\n    p = re.compile(r'\\b'+match_string+'\\b')\n    x = p.findall(string)\n    return x\ndef extract_email_address(text12):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text12)\n    return x\ndef extract_email_address(text13):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text13)\n    return x\ndef extract_email_address(text14):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text14)\n    return x\ndef extract_email_address(text15):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n    x = p.findall(text15)\n    return x\ndef extract_email_address(text16):\n    '''\n    Write a program to extract email addresses from a given string.\n    '''\n    p = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print('\\n---------START---------')\n    s = text1.replace(\"  \",\" \")\n    s = s.replace(\",\",\",\")\n    s = s.replace(\".\",\".\")\n    s = s.replace(\"!\",\"!\")\n    s = s.replace(\"?\",\"?\")\n    s = s.replace(\" ;\",\";\")\n    s = s.replace(\" :\",\":\")\n    s = s.replace(\" )\",\")\")\n    s = s.replace(\" (\",\"(\")\n    s = s.replace(\",\",\",\")\n    s = s.replace(\".\",\".\")\n    s = s.replace(\"!\",\"!\")\n    s = s.replace(\"?\",\"?\")\n    s = s.replace(\" ;\",\";\")\n    s = s.replace(\" :\",\":\")\n    s = s.replace(\" )\",\")\")\n    s = s.replace(\" (\",\"(\")\n    print(s)\n    s = s.replace(\"  \",\" \")\n    s = s.replace(\"  \",\" \")\n    s = s.replace(\"  \",\" \")\n    print('\\n---------END---------')\n    return s\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.find('\"',i+1)\n    q1 = text1[i+1:j]\n    return q1\ndef extract_quotation_pair(text2):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    i = text2.find('\"')\n    j = text2.find('\"',i+1)\n    q1 = text2[i+1:j]\n    q2 = text2[j+1:len(text2)]\n    return q1,q2\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.replace('\"', '')\n    text1 = text1.replace('?', '')\n    text1 = text1.replace('.', '')\n    text1 = text1.replace('(', '')\n    text1 = text1.replace(')', '')\n    text1 = text1.replace('\\n', '')\n    text1 = text1.replace('\\t', '')\n    text1 = text1.replace('\\r', '')\n    text1 = text1.replace('\\u3000', '')\n    text1 = text1.replace('<', '')\n    text1 = text1.replace('>', '')\n    text1 = text1.replace('/', '')\n    text1 = text1.replace('+', '')\n    text1 = text1.replace('=', '')\n    text1 = text1.replace('!', '')\n    text1 = text1.replace('\\xa0', '')\n    text1 = text1.replace('\\u2009', '')\n    text1 = text1.replace('\\u200a', '')\n    text1 = text1.replace('\\u202f', '')\n    text1 = text1.replace('\\u2060', '')\n    text1 = text1.replace('\\u2022', '')\n    text1 = text1.replace('\\u2018', '')\n    text1 = text1.replace('\\u2019', '')\n    text1 = text1.replace('\\u201c', '')\n    text1 = text1.replace('\\u201d', '')\n    text1 = text1.replace('\\u2026', '')\n    text1 = text1.replace('\\u2212', '')\n    text1 = text1.replace('\\u2013', '')\n    text1 = text1.replace('\\u2014', '')\n    text1 = text1.replace('\\u2030', '')\n    text1 = text1.replace('\\u201f', '')\n    text1 = text1.replace('\\u2028', '')\n    text1 = text1.replace('\\u2035', '')\n    text1 = text1.replace('\\u00a0', '')\n    text1 = text1.replace('\\u00a1', '')\n    text1 = text1.replace('\\u00a2', '')\n    text1 = text1.replace('\\u00a3', '')\n    text1 = text1.replace('\\u00a4', '')\n    text1 = text1.replace('\\u00a5', '')\n    text1 = text1.replace('\\u00a6', '')\n    text1 = text1.replace('\\u00a7', '')\n    text1 = text1.replace('\\u00a8', '')\n    text1 = text1.replace('\\u00a9', '')\n    text1 = text1.replace('\\u00aa', '')\n    text1 = text1.replace('\\u00ab', '')\n    text1 = text1.replace('\\u00ac', '')\n    text1 = text1.replace('\\u00ad', '')\n    text1 = text1.replace('\\u00ae', '')\n    text1 = text1.replace('\\u00af', '')\n    text1 = text1.replace('\\u00b0', '')\n    text1 = text1.replace('\\u00b1', '')\n    text1 = text1.replace('\\u00b2', '')\n    text1 = text1.replace('\\u00b3', '')\n    text1 = text1.replace('\\u00b4', '')\n    text1 = text1.replace('\\u00b5', '')\n    text1 = text1.replace('\\u00b6', '')\n    text1 = text1.replace('\\u00b7', '')\n    text1 = text1.replace('\\u00b8', '')\n    text1 = text1.replace('\\u00b9', '')\n    text1 = text1.replace('\\u00ba', '')\n    text1 = text1.replace('\\u00bb', '')\n    text1 = text1.replace('\\u00bc', '')\n    text1 = text1.replace('\\u00bd', '')\n    text1 = text1.replace('\\u00be', '')\n    text1 = text1.replace('\\u00bf', '')\n    text1 = text1.replace('\\u00c0', '')\n    text1 = text1.replace('\\u00c1', '')\n    text1 = text1.replace('\\u00c2', '')\n    text1 = text1.replace('\\u00c3', '')\n    text1 = text1.replace('\\u00c4', '')\n    text1 = text1.replace('\\u00c5', '')\n    text1 = text1.replace('\\u00c6', '')\n    text1 = text1.replace('\\u00c7', '')\n    text1 = text1.replace('\\u00c8', '')\n    text1 = text1.replace('\\u00c9', '')\n    text1 = text1.replace('\\u00ca', '')\n    text1 = text1.replace('\\u00cb', '')\n    text1 = text1.replace('\\u00cc', '')\n    text1 = text1.replace('\\u00cd', '')\n    text1 = text1.replace('\\u00ce', '')\n    text1 = text1.replace('\\u00cf', '')\n    text1 = text1.replace('\\u00d0', '')\n    text1 = text1.replace('\\u00d1', '')\n    text1 = text1.replace('\\u00d2', '')\n    text1 = text1.replace('\\u00d3', '')\n    text1 = text1.replace('\\u00d4', '')\n    text1 = text1.replace('\\u00d5', '')\n    text1 = text1.replace('\\u00d6', '')\n    text1 = text1.replace('\\u00d7', '')\n    text1 = text1.replace('\\u00d8', '')\n    text1 = text1.replace('\\u00d9', '')\n    text1 = text1.replace('\\u00da', '')\n    text1 = text1.replace('\\u00db', '')\n    text1 = text1.replace('\\u00dc', '')\n    text1 = text1.replace('\\u00dd', '')\n    text1 = text1.replace('\\u00de', '')\n    text1 = text1.replace('\\u00df', '')\n    text1 = text1.replace('\\u00e0', '')\n    text1 = text1.replace('\\u00e1', '')\n    text1 = text1.replace('\\u00e2', '')\n    text1 = text1.replace('\\u00e3', '')\n    text1 = text1.replace('\\u00e4', '')\n    text1 = text1.replace('\\u00e5', '')\n    text1 = text1.replace('\\u00e6', '')\n    text1 = text1.replace('\\u00e7', '')\n    text1 = text1.replace('\\u00e8', '')\n    text1 = text1.replace('\\u00e9', '')\n    text1 = text1.replace('\\u00ea', '')\n    text1 = text1.replace('\\u00eb', '')\n    text1 = text1.replace('\\u00ec', '')\n    text1 = text1.replace('\\u00ed', '')\n    text1 = text1.replace('\\u00ee', '')\n    text1 = text1.replace('\\u00ef', '')\n    text1 = text1.replace('\\u00f0', '')\n    text1 = text1.replace('\\u00f1', '')\n    text1 = text1.replace('\\u00f2', '')\n    text1 = text1.replace('\\u00f3', '')\n    tex"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x=tuple(map(lambda x:x*(x+1),test_tup))\n    return x\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*(i+1) for i in range(len(test_tup)))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (i + 1) for i, t in enumerate(test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    for i in range(len(test_tup)):\n        res.append(test_tup[i] * (test_tup[i+1] if i < len(test_tup)-1 else 1))\n    return tuple(res)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    return t_1 * t_2, t_1 * t_3, t_1 * t_4, t_1 * t_5, t_1 * t_6\n    #return t_1 * t_2, t_1 * t_3, t_1 * t_4, t_1 * t_5, t_1 * t_6\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_list = []\n    for i in range(len(test_tup) - 1):\n        test_list.append(test_tup[i] * test_tup[i + 1])\n    return tuple(test_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return tuple()\n    elif len(test_tup) == 1:\n        return (test_tup[0],)*1\n    else:\n        return (test_tup[0],)*(len(test_tup)-1) + (test_tup[1],)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] * test_tup[i+1])\n    return tuple(res)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = []\n    for i in range(len(test_tup)-1):\n        output.append(test_tup[i] * test_tup[i + 1])\n    output.append(1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = (test_tup[0] * test_tup[1],test_tup[0] * test_tup[2],test_tup[0] * test_tup[3],test_tup[0] * test_tup[4],test_tup[0] * test_tup[5],test_tup[0] * test_tup[6],test_tup[0] * test_tup[7],test_tup[0] * test_tup[8],test_tup[0] * test_tup[9])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not lst1 or not lst2:\n        return lst1+lst2\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    l = []\n    for i in range(len(lst1)):\n        l.append(lst1[i]+lst2[i])\n    return l\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return (lst1 + lst2)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # my_set = set()\n    # for i in nums:\n    #     my_set.add(i)\n    # return list(my_set)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consecutive_duplicates = []\n    for k, g in groupby(nums):\n        consecutive_duplicates.append(list(g))\n    return consecutive_duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i+=1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    assert len(nums) > 1, 'nums must be longer than 1'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # return [item for item, group in groupby(nums)]\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # iterate through the list\n    # if we already have a value,\n        # add the value to the set\n        # and continue\n    # else\n        # add the value to the set\n        # and continue\n    nums = list(set(nums))\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for num in nums:\n        if len(result) == 0 or result[-1]!= num:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key!= None:\n            return list(group)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * math.pow(r,2) * h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = (math.pi * (r ** 2) * h) / 3\n    return surface\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = (2*math.pi*r*(r+h))\n    return surface\ndef lateral_surface_parameter(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = (math.pi * (r ** 2) * h) / 3\n    return surface\ndef lateral_surface_parameter_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = (2*math.pi*r*(r+h))\n    return surface\ndef cone_height(r):\n    '''\n    Write a function to find the height of a cone given radius r.\n    '''\n    height = (math.sqrt(r**2-math.pi))\n    return height\ndef cone_height_cylinder(r):\n    '''\n    Write a function to find the height of a cone given radius r.\n    '''\n    height = (math.sqrt(r**2-(math.pi)))\n    return height\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef cone_volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef cone_volume_parameter(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef cone_volume_parameter_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef cone_density(r,h):\n    '''\n    Write a function to find the density of a cone given radius r and the height h.\n    '''\n    density = 4/3 * math.pi * (r**3) * h\n    return density\ndef cone_density_cylinder(r,h):\n    '''\n    Write a function to find the density of a cone given radius r and the height h.\n    '''\n    density = 4/3 * math.pi * (r**3) * h\n    return density\ndef cone_density_parameter(r,h):\n    '''\n    Write a function to find the density of a cone given radius r and the height h.\n    '''\n    density = 4/3 * math.pi * (r**3) * h\n    return density\ndef cone_density_parameter_cylinder(r,h):\n    '''\n    Write a function to find the density of a cone given radius r and the height h.\n    '''\n    density = 4/3 * math.pi * (r**3) * h\n    return density\ndef cone_diameter(r,h):\n    '''\n    Write a function to find the diameter of a cone given radius r and the height h.\n    '''\n    diameter = r*2\n    return diameter\ndef cone_diameter_cylinder(r,h):\n    '''\n    Write a function to find the diameter of a cone given radius r and the height h.\n    '''\n    diameter = r*2\n    return diameter\ndef cone_diameter_parameter(r,h):\n    '''\n    Write a function to find the diameter of a cone given radius r and the height h.\n    '''\n    diameter = r*2\n    return diameter\ndef cone_diameter_parameter_cylinder(r,h):\n    '''\n    Write a function to find the diameter of a cone given radius r and the height h.\n    '''\n    diameter = r*2\n    return diameter\ndef cone_deflection(r,h):\n    '''\n    Write a function to find the deflection of a cone given radius r and the height h.\n    '''\n    deflection = (math.pi**2*h*r)/(4*math.pi*r**2)\n    return deflection\ndef cone_deflection_cylinder(r,h):\n    '''\n    Write a function to find the deflection of a cone given radius r and the height h.\n    '''\n    deflection = (math.pi**2*h*r)/(4*math.pi*r**2)\n    return deflection\ndef cone_deflection_parameter(r,h):\n    '''\n    Write a function to find the deflection of a cone given radius r and the height h.\n    '''\n    deflection = (math.pi**2*h*r)/(4*math.pi*r**2)\n    return deflection\ndef cone_deflection_parameter_cylinder(r,h):\n    '''\n    Write a function to find the deflection of a cone given radius r and the height h.\n    '''\n    deflection = (math.pi**2*h*r)/(4*math.pi*r**2)\n    return deflection\ndef cone_elasticity(r,h):\n    '''\n    Write a function to find the elasticity of a cone given radius r and the height h.\n    '''\n    elasticity = (math.pi**2 * h * r)/(4*math.pi*r**3)\n    return elasticity\ndef cone_elasticity_cylinder(r,h):\n    '''\n    Write a function to find the elasticity of a cone given radius r and the height h.\n    '''\n    elasticity = (math.pi**2 * h * r)/(4*math.pi*r**3)\n    return elasticity\ndef cone_elasticity_parameter(r,h):\n    '''\n    Write a function to find the elasticity of a cone given radius r and the height h.\n    '''\n    elasticity = (math.pi**2 * h * r)/(4*math.pi*r**3)\n    return elasticity\ndef cone_elasticity_parameter_cylinder(r,h):\n    '''\n    Write a function to find the elasticity of a cone given radius r and the height h.\n    '''\n    elasticity = (math.pi**2 * h * r)/(4*math.pi*r**3)\n    return elasticity\ndef cone_plasticity(r,h):\n    '''\n    Write a function to find the plasticity of a cone given radius r and the height h.\n    '''\n    plasticity = (math.pi**2 * h * r)/(4*math.pi*r**2)\n    return plasticity\ndef cone_plasticity_cylinder(r,h):\n    '''\n    Write a function to find the plasticity of a cone given radius r and the height h.\n    '''\n    plasticity = (math.pi**2 * h * r)/(4*math.pi*r**2)\n    return plasticity\ndef cone_plasticity_parameter(r,h):\n    '''\n    Write a function to find the plasticity of a cone given radius r and the height h.\n    '''\n    plasticity = (math.pi**2 * h * r)/(4*math.pi*r**2)\n    return plasticity\ndef cone_plasticity_parameter_cylinder(r,h):\n    '''\n    Write a function to find the plasticity of a cone given radius r and the height h.\n    '''\n    plasticity = (math.pi**2 * h * r)/(4*math.pi*r**2)\n    return plasticity\ndef cone_tangent_area(r,h):\n    '''\n    Write a function to find the tangent area of a cone given radius r and the height h."
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi*r*r*(h/3.0)\n    return(A)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # import math\n    pi = math.pi\n    h2 = h/2\n    return pi*r*r*h2\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=h:\n        return 0\n    else:\n        area=math.pi*r*r+math.pi*h*h+math.pi*(h*r-h*math.sqrt(h**2+r**2))\n        return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    a = pi*r**2\n    b = pi*r**2 + pi*h**2\n    c = 2*pi*r*h\n    return (a+b+c)/2\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2-h**2/2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r<0 or h<0:\n        raise Exception('Invalid input')\n    else:\n        return math.pi*r*r*(h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = r**2*math.sin(h/2)\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #first define the lateral surface area of the cone\n    #the variable for the lateral surface area is the rectangle for the base (the area of the cone)\n    base = r**2 * math.pi\n    #now we need to find the lateral surface area of the cone\n    #the lateral surface area of the cone is the difference between the base and the height\n    #the formula is given by the radius squared times the height\n    #we can solve for the lateral surface area by using the radius squared minus the height squared\n    lateralsurface = r**2 - h**2\n    #calculate the lateral surface area\n    lateralsurfacearea = (h * base) + (r * (math.pi * r**2))\n    #return the lateral surface area\n    return lateralsurfacearea\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_1 = text.replace(' ', ':')\n    text_1 = text_1.replace(',', ':')\n    text_1 = text_1.replace('.', ':')\n    return text_1\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^0-9a-zA-Z ]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    while True:\n        text = text.replace('  ', ':')\n        text = text.replace(', ', ':')\n        text = text.replace('.', ':')\n        if text.find(':') == -1:\n            break\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"[,.]\", ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\",\":\").replace(\".\",\":\").replace(\" \",\":\")\ndef check_positive_negative(text):\n    '''\n    Write a function that returns the boolean True if the inputted text is a positive number and False if negative.\n    '''\n    if len(text)==1 and text==\"0\":\n        return False\n    if text[0]==\"-\":\n        return text[1:].isdigit()\n    return text.isdigit()\ndef find_comma_index(text):\n    '''\n    Write a function that returns the index of the first occurrence of a comma in the given text.\n    '''\n    return text.find(\",\")\ndef find_double_colon_index(text):\n    '''\n    Write a function that returns the index of the first occurrence of a double colon in the given text.\n    '''\n    return text.find(\":\")\ndef find_in_between(text,start_index,end_index):\n    '''\n    Write a function that returns the string in between two given indexes\n    '''\n    return text[start_index+1:end_index]\ndef find_min_max(text):\n    '''\n    Write a function that returns a tuple of the minimum and maximum digits in the given text.\n    '''\n    min_index = 0\n    max_index = 0\n    for i in range(len(text)):\n        if text[i].isdigit():\n            if min_index == 0:\n                min_index = i\n            else:\n                max_index = i\n    return (min_index,max_index)\ndef find_repetition(text,char):\n    '''\n    Write a function that returns the number of times a given character repeats in the given text.\n    '''\n    count = 0\n    i = 0\n    while i < len(text):\n        if text[i]==char:\n            count += 1\n        i += 1\n    return count\ndef find_repetition_indexes(text,char):\n    '''\n    Write a function that returns a list of indexes of the first occurrence of the given character in the given text.\n    '''\n    repetition_indexes = []\n    i = 0\n    while i < len(text):\n        if text[i]==char:\n            repetition_indexes.append(i)\n        i += 1\n    return repetition_indexes\ndef find_repetition_in_number(text,number):\n    '''\n    Write a function that returns the number of times the given number repeats in the given text.\n    '''\n    return find_repetition(text,str(number))\ndef find_repetition_in_number_indexes(text,number):\n    '''\n    Write a function that returns a list of indexes of the first occurrence of the given number in the given text.\n    '''\n    return find_repetition_indexes(text,str(number))\ndef find_smallest_letter(text):\n    '''\n    Write a function that returns the smallest letter in the given text.\n    '''\n    min_letter = text[0]\n    for i in range(len(text)):\n        if text[i].islower():\n            min_letter = text[i]\n    return min_letter\ndef find_smallest_letter_index(text):\n    '''\n    Write a function that returns the smallest letter index in the given text.\n    '''\n    for i in range(len(text)):\n        if text[i].islower():\n            return i\n    return -1\ndef find_smallest_word(text):\n    '''\n    Write a function that returns the smallest word in the given text.\n    '''\n    words = text.split()\n    smallest_word = words[0]\n    for i in range(1,len(words)):\n        if len(words[i]) < len(smallest_word):\n            smallest_word = words[i]\n    return smallest_word\ndef find_smallest_word_index(text):\n    '''\n    Write a function that returns the smallest word index in the given text.\n    '''\n    words = text.split()\n    smallest_word = words[0]\n    for i in range(1,len(words)):\n        if len(words[i]) < len(smallest_word):\n            smallest_word = words[i]\n    for i in range(len(words)):\n        if words[i] == smallest_word:\n            return i\n    return -1\ndef find_substring(text,start_index,end_index):\n    '''\n    Write a function that returns a substring of the given text between the given start and end indexes.\n    '''\n    return text[start_index:end_index+1]\ndef find_substring_indexes(text,start_index,end_index):\n    '''\n    Write a function that returns a list of indexes of the substring of the given text between the given start and end indexes.\n    '''\n    return [i+start_index for i in range(end_index-start_index+1)]\ndef find_sum_of_numbers(text):\n    '''\n    Write a function that returns the sum of all the numbers in the given text.\n    '''\n    numbers = re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\n    return sum(float(x) for x in numbers)\ndef find_sum_of_numbers_indexes(text):\n    '''\n    Write a function that returns a list of all indexes in the given text of all numbers.\n    '''\n    return re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\ndef find_sum_of_words(text):\n    '''\n    Write a function that returns the sum of all the numbers in the given text.\n    '''\n    return sum(float(x) for x in re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text))\ndef find_sum_of_words_indexes(text):\n    '''\n    Write a function that returns a list of all indexes in the given text of all words.\n    '''\n    return re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\ndef find_sum_of_numbers_after_indexes(text,indexes):\n    '''\n    Write a function that returns the sum of all the numbers in the given text after the given indexes.\n    '''\n    numbers = re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\n    return sum(float(x) for x in numbers[indexes[0]+1:indexes[1]])\ndef find_sum_of_numbers_after_indexes_in_order(text,indexes):\n    '''\n    Write a function that returns the sum of all the numbers in the given text after the given indexes in the order specified.\n    '''\n    numbers = re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\n    return sum(float(x) for x in numbers[indexes[0]+1:indexes[1]+1])\ndef find_sum_of_words_after_indexes(text,indexes):\n    '''\n    Write a function that returns the sum of all the numbers in the given text after the given indexes.\n    '''\n    words = re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\n    return sum(float(x) for x in words[indexes[0]+1:indexes[1]+1])\ndef find_sum_of_words_after_indexes_in_order(text,indexes):\n    '''\n    Write a function that returns the sum of all the numbers in the given text after the given indexes in the order specified.\n    '''\n    words = re.findall(r\"[-+]?[0-9]*\\.?[0-9]\",text)\n    return sum(float(x) for x in words[indexes[0]+1:indexes[1]+1])\ndef find_word_with_maximum_length(text):\n    '''\n    Write a function that returns the word wit"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find every space, comma, or dot\n    spaces = re.findall(\"[ ]+\", text)\n    commas = re.findall(\"[,]\", text)\n    dots = re.findall(\"[.]\", text)\n    # replace the special character by a colon\n    for i in range(len(spaces)):\n        text = text.replace(spaces[i], \":\")\n    for i in range(len(commas)):\n        text = text.replace(commas[i], \",\")\n    for i in range(len(dots)):\n        text = text.replace(dots[i], \".\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    specialchars = re.findall(r'[:,.]', text)\n    text = text.replace(*specialchars)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('[\\s\\,\\.:]')\n    return pattern.sub('',text)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    try:\n        left = 0\n        right = len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] > x:\n                right = mid - 1\n            elif A[mid] < x:\n                left = mid + 1\n        return -1\n    except:\n        raise ValueError\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    lo, hi = 0, n - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] == x:\n            hi = mid - 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # key: we can use binary search to find the first index.\n    #     just use binary search on the array and return the index of the first index\n    #     we can think about this problem as a binary search tree, then we just search by the index\n    #     we can use binary search to find the first index\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # take a pointer to the right of the array and move it until it reaches an element equal to x\n    # then return the index\n    index = 0\n    while index < len(A):\n        if A[index] == x:\n            return index\n        index += 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    l, r = 0, len(A) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if A[m] == x:\n            return m\n        elif A[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # empty array\n    if A == []:\n        return -1\n    # array is not empty\n    if A!= []:\n        # find the middle index of the array and check if x is present there\n        mid = int(len(A) / 2)\n        if A[mid] == x:\n            return mid\n        # if mid is smaller than x, then look for the first occurrence of x in the right side of the array\n        if A[mid] > x:\n            return find_first_occurrence(A[mid + 1:], x)\n        # if mid is greater than x, then look for the first occurrence of x in the left side of the array\n        if A[mid] < x:\n            return find_first_occurrence(A[:mid], x)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = int((low+high)/2)\n    while low < high:\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n        mid = int((low+high)/2)\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    # for i in range(n):\n    #     for j in range(i+1,n+1):\n    #         sum = sum + arr[i:j]\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum + arr[i:j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Using loop for sum of products\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                sum = sum + arr[i] * arr[j] * arr[k]\n                \n    return sum\n    \n    \n    \n    \n    # Using array slicing\n    # https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \n    # start=0, stop=3, step=1\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=1\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=2\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=3\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=4\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=5\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=6\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=7\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=8\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=9\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=10\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x3 * x4\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # i=0, j=3, k=11\n    # x1 * x2 * x3\n    # x2 * x3 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x4\n    # x1 * x3 * x4\n    # x1 * x2 * x3 * x4\n    \n    # x1 * x2 * x"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Approach 1 - Using Kadane's algorithm\n    '''\n    Difference between the brute force approach and this approach is that we are not using the current element's product in our sum. Rather, we are just considering the subarray as a single element.\n    '''\n    # Initialize the left and right pointers for the starting and ending indices of the subarray.\n    left = right = 0\n    max_sum = float('-inf')\n    \n    # Calculate the maximum sum possible.\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i])\n    \n    # At this point, we know the maximum sum.\n    # We have to calculate the maximum sum possible before the starting and end indices.\n    # So, we just add the maximum sum at the starting and end indices.\n    # This gives us the product of the subarray.\n    max_sum = max(max_sum, 0)\n    \n    # While the current index of left pointer is less than the length of the array.\n    while left < len(arr):\n        # The maximum product in the subarray ending at the current index is calculated by \n        # multiplying the current element with the left and right element (in the subarray)\n        # and adding it to the maximum possible product.\n        # This is done by using the following formula:\n        max_product = max_sum * arr[left]\n        \n        # The current index of right pointer is increased by 1.\n        right = left + 1\n        \n        # The maximum sum is updated by taking the maximum of the current max product and the \n        # maximum sum.\n        max_sum = max(max_product, max_sum)\n        \n        # Increment the left pointer by 1.\n        left = right\n        \n    print(max_sum)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i!= j:\n                s = s + arr[i] * arr[j]\n    print(s)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Number of elements in the array\n    n = len(arr)\n    # initialize variable to keep track of sum of products\n    res = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum=sum+(arr[i]*arr[j])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sum_of_all_subarrays(arr,n):\n        if n==0:\n            return 0\n        sum_of_all_subarrays=0\n        for i in range(len(arr)):\n            sum_of_subarray=1\n            for j in range(i,len(arr)):\n                sum_of_subarray=sum_of_subarray*arr[j]\n                sum_of_all_subarrays+=sum_of_subarray\n        return sum_of_all_subarrays\n    return sum_of_all_subarrays(arr,n)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    mul = 1\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            mul = arr[j]\n            sum += mul\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # start with size 1\n    max_len = len(arr) + 1\n    size = 1\n    s = 0\n    output = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def product(arr, k, n): \n        result = 1\n        for i in range(k): \n            result = result * arr[n - i - 1]\n        return result\n        \n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            result += product(arr, i, j)\n    return result\n        \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # TODO: Write your solution here\n    return n ^ (1 << (n.bit_length() - 1))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0x55555555\n    n = n | ((~n) & 0xAAAAAA55)\n    n = n & 0xAAAAAAAA\n    return n\n    \ndef set_odd_even(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_1s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_1s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_2s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_2s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_3s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_3s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_4s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_4s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_5s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_5s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_6s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_6s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_7s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_7s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_8s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_8s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_9s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_9s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_10s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_10s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_11s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_11s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_12s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_12s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_13s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_13s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_14s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_14s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_15s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_15s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_16s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_16s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_17s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_17s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_18s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_18s_1s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set_19s_0s(n):\n    '''\n    Write a python function to set the even bits and zero the odd bits in a number. \n    '''\n    return n & 0xAAAAAAAA\n    \ndef set"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n\n    print(num)\n    num = num | (1 << num.bit_length()-2)\n    print(num)\n    num = num & (num << 1)\n    print(num)\n    return num\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = int(bin(n)[2:].zfill(32), 2)\n    x ^= ((x >> 1) & 0b11111111111111111111111111111111) | ((x << 1) & 0b11111111111111111111111111111111)\n    x = x & 0b11111111111111111111111111111111\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= ~(1<<n.bit_length()-1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    temp = n & ~(n-1)\n    \n    return temp\n    \nif __name__ == \"__main__\":\n    n = int(input('Enter number to be set: '))\n    print(f'Number after setting middle bits: {set_middle_bits(n)}')\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (~n+1)\n    \n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n\n    n = 0\n    for i in range(31, -1, -1):\n        if (a & 1)!= 0:\n            n = (n << 1) + 1\n        a = a >> 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | 1\n    n = n & ~(1 << (n.bit_length() - 1))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = 0x00ff\n    n = 0b0000\n    n = 0x0000ff\n    n = 0x0000FFFF\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pl = 0\n    pr = len(a) - 1\n    while pl < pr:\n        mid = pl + (pr-pl) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            pl = mid + 1\n        else:\n            pr = mid - 1\n    return pl\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a)-1\n    while right >= left:\n        mid = (right + left) // 2\n        if a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a)-1\n    while right >= left:\n        mid = (right + left) // 2\n        if a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right + 1\ndef find_min_index(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return left\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_min_index(arr, mid + 1, right)\n    else:\n        return find_min_index(arr, left, mid - 1)\ndef find_min_val(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return arr[left]\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_min_val(arr, mid + 1, right)\n    else:\n        return find_min_val(arr, left, mid - 1)\ndef find_max_index(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return left\n    mid = (right + left) // 2\n    if arr[mid] > arr[left]:\n        return find_max_index(arr, mid + 1, right)\n    else:\n        return find_max_index(arr, left, mid - 1)\ndef find_max_val(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return arr[left]\n    mid = (right + left) // 2\n    if arr[mid] > arr[left]:\n        return find_max_val(arr, mid + 1, right)\n    else:\n        return find_max_val(arr, left, mid - 1)\ndef binary_search(arr, left, right, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef binary_search_rotated(arr, left, right, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef find_max_index(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return left\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_max_index(arr, mid + 1, right)\n    else:\n        return find_max_index(arr, left, mid - 1)\ndef find_max_val(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return arr[left]\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_max_val(arr, mid + 1, right)\n    else:\n        return find_max_val(arr, left, mid - 1)\ndef binary_search_rotated_2(arr, left, right, x):\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef find_max_index_2(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return left\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_max_index_2(arr, mid + 1, right)\n    else:\n        return find_max_index_2(arr, left, mid - 1)\ndef find_max_val_2(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return arr[left]\n    mid = (right + left) // 2\n    if arr[mid] < arr[left]:\n        return find_max_val_2(arr, mid + 1, right)\n    else:\n        return find_max_val_2(arr, left, mid - 1)\ndef find_min_index_2(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return left\n    mid = (right + left) // 2\n    if arr[mid] > arr[left]:\n        return find_min_index_2(arr, mid + 1, right)\n    else:\n        return find_min_index_2(arr, left, mid - 1)\ndef find_min_val_2(arr, left, right):\n    if left > right:\n        return -1\n    if right == left:\n        return arr[left]\n    mid = (right + left) // 2\n    if arr[mid] > arr[left]:\n        return find_min_val_2(arr, mid + 1, right)\n    else:\n        return find_min_val_2(arr, left, mid - 1)\ndef find_min_index_rotated(arr, left, right, x):\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef find_min_index_rotated_2(arr, left, right, x):\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef find_min_val_rotated(arr, left, right, x):\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef find_min_val_rotated_2(arr, left, right, x):\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef rotated_binary_search(arr, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    while right >= left:\n        mid = (right + left) // 2\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 1\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef left_insertion2(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 0\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef right_insertion2(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef left_insertion3(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 1\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef left_insertion3(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 0\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef right_insertion3(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef right_insertion3(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef right_insertion4(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef left_insertion4(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 1\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef right_insertion5(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef left_insertion5(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 1\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef left_insertion6(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 0\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef right_insertion6(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[-1] >= x:\n        return len(a)\n    for i in range(len(a) - 2, -1, -1):\n        if a[i] >= x:\n            return i + 1\n    return 0\ndef left_insertion7(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] <= x:\n        return 0\n    for i in range(1, len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\ndef right_insertion7(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i-1] >= x:\n        i -= 1\n    if i == 0:\n        return 0\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\na = list(map(int, input(\"Enter the elements in ascending order separated by space: \").split()))\nx = int(input(\"Enter the element to be searched: \"))\nprint(\"The left insertion point of the element is: \", left_insertion(a, x))"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    if x < a[index - 1]:\n        return index\n    return index - 1\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex,string)):\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if (re.search(regex,string)):\n        return 1\n    else:\n        return 0\nprint(check_str('A'))\nprint(check_str('a'))\nprint(check_str('e'))\nprint(check_str('E'))\nprint(check_str('I'))\nprint(check_str('i'))\nprint(check_str('O'))\nprint(check_str('o'))\nprint(check_str('U'))\nprint(check_str('u'))\nprint(check_str('Q'))\nprint(check_str('q'))\nprint(check_str('a'))\nprint(check_str('A'))\nprint(check_str(' '))\nprint(check_str('     '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str('e'))\nprint(check_str('a'))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str('A'))\nprint(check_str('A'))\nprint(check_str('S'))\nprint(check_str('B'))\nprint(check_str('i'))\nprint(check_str('i'))\nprint(check_str('o'))\nprint(check_str('o'))\nprint(check_str('u'))\nprint(check_str('u'))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' '))\nprint(check_str(' "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(bool(re.match(regex,string)))\n    if re.match(regex,string):\n        print('Strings starting with vowels')\n    else:\n        print('Strings not starting with vowels')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #return re.search(regex,string)\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]'\n    if re.search(pattern, string):\n        print(string,' is starting with vowel.')\n    else:\n        print(string,' is not starting with vowel.')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if bool(re.search(regex, string)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return \"It's a Valid string\"\n    else:\n        return \"Invalid string\"\nprint(check_str(\"me\"))\nprint(check_str(\"hello\"))\nprint(check_str(\"Hello\"))\nprint(check_str(\"mE\"))\nprint(check_str(\"aE\"))\nprint(check_str(\"amE\"))\nprint(check_str(\"ame\"))\nprint(check_str(\"amme\"))\nprint(check_str(\"Ame\"))\nprint(check_str(\"amie\"))\nprint(check_str(\"Amie\"))\nprint(check_str(\"AmIE\"))\nprint(check_str(\"Amee\"))\nprint(check_str(\"aMee\"))\nprint(check_str(\"Amee\"))\nprint(check_str(\"a-me\"))\nprint(check_str(\"am-ee\"))\nprint(check_str(\"am-e\"))\nprint(check_str(\"amee\"))\nprint(check_str(\"aeiou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"aeIou\"))\nprint(check_str(\"AeIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-Iou\"))\nprint(check_str(\"AmIou\"))\nprint(check_str(\"A-Iou\"))\nprint(check_str(\"a-"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    string = 'Ralph'\n    check_str(string)\n    string = 'Ralph_is_a_boy'\n    check_str(string)\n    string = 'Ralph_is_a_boy_and_a_girl'\n    check_str(string)\n    string = 'ra'\n    check_str(string)\n    string = 'ra_is_a_boy'\n    check_str(string)\n    string = 'ra_is_a_boy_and_a_girl'\n    check_str(string)\n    string = 'am'\n    check_str(string)\n    string = 'am_is_a_boy'\n    check_str(string)\n    string = 'am_is_a_boy_and_a_girl'\n    check_str(string)\n    string = 'in_love'\n    check_str(string)\n    string = 'in_love_is_fun_'\n    check_str(string)\n    string = 'in_love_is_fun'\n    check_str(string)\n    string = 'In_Love_Is_Fun'\n    check_str(string)\n    string = 'In_love_Is_Fun_Is'\n    check_str(string)\n    string = 'In_Love_Is_Fun'\n    check_str(string)\n    string = 'In_love_Is_Fun_Is_Is'\n    check_str(string)\n    string = 'in_love_is_fun_is_fun_is'\n    check_str(string)\n    string = 'in_love_is_fun_is_fun_is_is'\n    check_str(string)\n    string = 'in_love_is_fun_is_fun_is_is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_Fun_Is_is'\n    check_str(string)\n    string = 'In_Love_Is"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n):\n        if n == 0:\n            return 1\n        else:\n            return (n*geometric_sum(n-1))\n    print('{0:.3f}'.format(geometric_sum(n)))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/(n*(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * (1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return n*(1+geometric_sum(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return n * (n - 1) // 2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Return the index of the smallest triangular number with n digits.\n    #return (math.floor(math.log(n)/math.log(2))+1)**2\n    if n==1:\n        return 1\n    else:\n        return n+find_Index(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    i = 2\n    while True: \n        if (count**2 + count >= n): \n            return i-1\n        count = count + 1\n        i = i + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 3:\n        return 1\n    t = 1\n    for i in range(1,n):\n        t = t * (i+1)\n    if (t % 2) == 0:\n        return (n - 1)\n    else:\n        return n - 2\n    \ndef triangular_number(n):\n    '''\n    Write a python function to calculate triangular number with n digits. https://www.geeksforgeeks.org/triangular-number-with-n-digits/\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_3(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_4(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_5(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_6(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_7(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_8(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_9(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_10(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_11(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_12(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_13(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_14(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_15(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_16(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_17(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_18(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_19(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_20(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_21(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_22(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_23(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_24(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_25(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n*(n+1))/2)\ndef find_Index_26(n):\n    '''\n    Write a python function t"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        max_index = n-1\n        i = 0\n        while i < max_index:\n            if i == 0:\n                index = 1\n            elif i == 1:\n                index = 2\n            elif i == 2:\n                index = 4\n            elif i == 3:\n                index = 7\n            elif i == 4:\n                index = 11\n            elif i == 5:\n                index = 15\n            else:\n                index = 14\n                i -= 1\n            if i == 0:\n                i += 1\n                continue\n            if index * (i+1) <= max_index:\n                return index * (i+1)\n            else:\n                return max_index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    max_index = math.ceil(n/2)\n    for i in range(max_index):\n        if i == 0:\n            start = 1\n        else:\n            start = sum([i * (i + 1) for i in range(i)])\n        end = start + (n-1-i)\n        if i == n-1:\n            return end\n        if end > 100:\n            break\n        if start <= end:\n            return i\n        else:\n            return end\n    if n > max_index:\n        return max_index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_t = 9999\n    index = 0\n    for i in range(1,n):\n        t = min_t\n        if(t%i == 0):\n            count = 1\n            while(t%(i+count) == 0):\n                count += 1\n            if(count>min_t):\n                min_t = count\n                index = i\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    while n!= 2:\n        res = res + n - 1\n        n = n - 1\n    return res\ndef find_Index1(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    while n!= 2:\n        res = res + n - 1\n        n = n - 1\n    return res\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    while(True):\n        if (int(math.pow(10,n) + 1) % 2 == 0): \n            n+=1\n        else: \n            return n\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict(zip(range(len(test_tup)),test_tup))\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing the dictionary\n    d = dict()\n    # iterating through the given tuple\n    for i in test_tup:\n        # checking if the key is present in the dictionary\n        if i in d:\n            # if the key is present then increment its value\n            d[i] += 1\n        else:\n            # else adding the key and value to the dictionary\n            d[i] = 1\n    # returning the dictionary\n    return d\n    \ndef tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing the dictionary\n    d = dict()\n    # iterating through the given tuple\n    for i in test_tup:\n        # checking if the key is present in the dictionary\n        if i in d:\n            # if the key is present then increment its value\n            d[i] += 1\n        else:\n            # else adding the key and value to the dictionary\n            d[i] = 1\n    # returning the dictionary\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing the dictionary\n    my_dict = dict()\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {x:y for x,y in zip(test_tup[::2], test_tup[1::2])}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {i:test_tup[i] for i in range(len(test_tup))}\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            dct[test_tup[i]] = test_tup[i+1]\n        else:\n            dct[test_tup[i]] = test_tup[i-1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return_dict = {}\n    for i in range(0, len(test_tup)):\n        return_dict[test_tup[i]] = test_tup[i+1]\n    return return_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for tup in test_tup:\n        tup_key = tup[0]\n        tup_value = tup[1]\n        if tup_key not in test_dict:\n            test_dict[tup_key] = tup_value\n    return test_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = True\n    for i in range(0,len(s)):\n        if s[i]!= s[i+1]:\n            result = False\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return ''.join(s) == s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return False\n    for i in range(0,len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if (s[i]!=s[i-1]):\n            count+=1\n    if(count==len(s)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l=[]\n    for i in s:\n        l.append(i)\n    if len(set(l))==1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nall_Characters_Same(\"H\")\nall_Characters_Same(\"hello\")\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[2:])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(len(s)):\n        if s[i]!= char:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        else:\n            char_set.add(char)\n    return True\nprint(all_Characters_Same(\"abcd\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcdea\"))\nprint(all_Characters_Same(\"abcdee\"))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side*side*(3*side)/2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1.0/6.0 * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 3) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side >= 0 and side <= 1:\n        side = float(side)\n        area = (0.25 * side * (side - 1.0) * (side - 0.5))\n        print(area)\n    else:\n        print('Side should be in range 0 to 1')\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*math.pow(side,2)/4)\ndef area_circle(r):\n    '''\n    Write a function to caluclate the area of a circle\n    '''\n    return math.pi*math.pow(r,2)\ndef area_cube(a):\n    '''\n    Write a function to caluclate the area of a cube\n    '''\n    return math.pow(a,3)\ndef area_parallelogram(a,b):\n    '''\n    Write a function to caluclate the area of a parallelogram\n    '''\n    return (math.sqrt(a*b))\ndef area_trapezium(a,b,c):\n    '''\n    Write a function to caluclate the area of a trapezium\n    '''\n    return (a+b+c)/2\ndef area_rectangle(a,b):\n    '''\n    Write a function to caluclate the area of a rectangle\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to caluclate the area of a square\n    '''\n    return math.pow(a,2)\ndef area_triangle(a,b,c):\n    '''\n    Write a function to caluclate the area of a triangle\n    '''\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\ndef volume_cube(a):\n    '''\n    Write a function to caluclate the volume of a cube\n    '''\n    return math.pow(a,3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to caluclate the volume of a cylinder\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(r,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return (math.pi*math.pow(r,2)*h/3)\ndef volume_sphere(r):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(r,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h/3)\ndef volume_cylinder(a,h):\n    '''\n    Write a function to caluclate the volume of a cylinder\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)*h\ndef volume_sphere(a):\n    '''\n    Write a function to caluclate the volume of a sphere\n    '''\n    return (4/3*math.pow(math.pi,3)*math.pow(a,3))\ndef volume_torus(r,h):\n    '''\n    Write a function to caluclate the volume of a torus\n    '''\n    return (math.pi*math.pow(r,2)*h)\ndef volume_cone(a,h):\n    '''\n    Write a function to caluclate the volume of a cone\n    '''\n    return math.pi*math.pow(a,2)"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    import math\n    a = math.sqrt(3)\n    b = math.sqrt(6)\n    c = math.sqrt(9)\n    s = side/2\n    if side == 4:\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    elif side == 5:\n        return math.sqrt((s-a)*(s-b)*(s-c)*(s-1))\n    elif side == 6:\n        return math.sqrt((s-a)*(s-b)*(s-c)*(s-2))\n    elif side == 8:\n        return math.sqrt((s-a)*(s-b)*(s-c)*(s-3))\n    else:\n        return None\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*math.sqrt(3)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print('\\nHere is the area of a tetrahedron:', end = '')\n    area = (6*(side**2)-2)**0.5\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(\"Area of a Tetrahedron: \",side**3/4)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2/4\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side**2\ndef area_pyramid(base, height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return (base*height)/2\ndef area_parallelogram(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return base*height\ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return (base*height)/2\ndef area_rectangle(base, height):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return base*height\ndef area_rectangle_recursive(base, height):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    if (base>=height):\n        return base*height\n    else:\n        return (base*height)/2\ndef area_rectangle_recursive2(base, height):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    if (base>=height):\n        return base*height\n    else:\n        if(height%2==0):\n            return (base*height)/2\n        else:\n            return (base*height)/2 + height\ndef area_rhombus(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return (diagonal_1**2)/2 + (diagonal_2**2)/2\ndef area_hexagon(side):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    return (side**2)/2*3\ndef area_octagon(side):\n    '''\n    Write a function to calculate the area of a octagon.\n    '''\n    return side**2/2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return 3.14*radius**2\ndef area_circle_recursive(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return radius*radius*3.14\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4/3*3.14*radius**3\ndef area_sphere_recursive(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return 4/3*3.14*radius**3 + 4*radius\ndef area_cylinder(radius, length):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return 3.14*radius**2*length\ndef area_cylinder_recursive(radius, length):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    if(radius == 0 or length == 0):\n        return 0\n    else:\n        return 3.14*radius**2*length + 3.14*radius*length\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    return height*math.pi*radius**2\ndef area_cone_recursive(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    if(radius == 0 or height == 0):\n        return 0\n    else:\n        return height*math.pi*radius**2 + height*math.pi*radius*radius\ndef area_cone_recursive_1(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    if(radius == 0 or height == 0):\n        return 0\n    else:\n        return (math.pi*radius**2)/2 + (math.pi*radius*radius)*height\ndef area_cone_recursive_2(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    if(radius == 0 or height == 0):\n        return 0\n    else:\n        return (math.pi*radius**2)/2 + (math.pi*radius*radius)*height + height*math.pi*radius\ndef area_cone_recursive_3(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    if(radius == 0 or height == 0):\n        return 0\n    else:\n        return (math.pi*radius**2)/2 + (math.pi*radius*radius)*height + math.pi*radius + height*math.pi*radius\ndef area_sphere_recursive_1(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3\ndef area_sphere_recursive_2(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4*math.pi*radius\ndef area_sphere_recursive_3(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius\ndef area_sphere_recursive_4(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius + math.pi*radius**2\ndef area_sphere_recursive_5(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius + math.pi*radius**2 + math.pi*radius + math.pi\ndef area_sphere_recursive_6(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius + math.pi*radius**2 + math.pi*radius + math.pi + math.pi\ndef area_sphere_recursive_7(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius + math.pi*radius**2 + math.pi*radius + math.pi + math.pi + math.pi + math.pi\ndef area_sphere_recursive_8(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if(radius == 0):\n        return 0\n    else:\n        return (4/3)*math.pi*radius**3 + (4/3)*math.pi*radius**2 + 4/3*math.pi*radius + math.pi*radius**2 + math.pi*radius + math.pi + math.pi + math.pi + math.pi + math.pi + mat"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    \n    # for i in range(n - m):\n    #     list.append(list.pop(0))\n    \n    return list[-m:] + list[:-m]\n    "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    else:\n        m = m%len(list)\n        i = len(list) - 1\n        while i >= m:\n            list[i] = list[i-1]\n            i = i - 1\n        list[i] = 0\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Input\n    # n - Number of elements to be rotated.\n    # lis - List on which rotation needs to be done\n    # m - Number of times rotation needs to be done\n    # Output\n    # Rotated list\n    \n    # EDGE CASES\n    if m == 0:\n        return list\n    \n    for i in range(len(list)):\n        #print(list, i)\n        if i >= len(list) - m:\n            return list\n    \n    #if len(list) - m <= 0:\n    #    return list\n    \n    for j in range(len(list) - m):\n        #print(list, m)\n        list[j], list[m] = list[m], list[j]\n        m += 1\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for _ in range(m):\n        list.append(list.pop(0))\n    print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    list_copy = list[:]\n    x = list[m-1]\n    for i in range(m, len(list)):\n        list[i] = list_copy[i]\n    list[m-1] = x\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    list_copy = list[:]\n    x = list[0]\n    for i in range(0, m):\n        list[i] = list_copy[i]\n    list[m-1] = x\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > 0 and m <= len(list):\n        while m > 0:\n            list.append(list.pop(0))\n            m -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = 0\n    for i in test_tup:\n        if i == None:\n            none_values += 1\n        else:\n            none_values -= 1\n    return none_values\n    \ndef check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all([val == None for val in test_tup])\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(i is None for i in test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not isinstance(test_tup, tuple):\n        return False\n    for i in test_tup:\n        if i!= None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == len(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    no_none = 0\n    for i in test_tup:\n        if i == None:\n            no_none += 1\n        else:\n            no_none -= 1\n    return no_none\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if not any(i%num for i in range(10))]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if (lambda x: True if all(map(lambda y:i%y==0, range(1,len(str(i))+1))) else False)(i):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum, endnum+1)\n    divisible = []\n    for num in numbers:\n        numstr = str(num)\n        for char in numstr:\n            if not num%int(char) == 0:\n                break\n        else:\n            divisible.append(num)\n    return divisible\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if (i % (max(i, 1)) == 0):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        for num in str(i):\n            if int(num) % i!= 0:\n                break\n        else:\n            print(i)\n        \ndivisible_by_digits(1, 100)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = []\n    for num in range(startnum, endnum):\n        num = str(num)\n        numbers = map(int, num)\n        if all(n % i for i in numbers):\n            nums.append(num)\n    print(nums)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x:\n                        all(x % i == 0 for i in map(int, list(str(x))))\n                        and startnum <= x <= endnum, range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    digits = {2:1, 3:2, 4:3, 5:4, 6:5, 7:6, 8:7, 9:8}\n    \n    for num in range(startnum, endnum+1):\n        str_num = str(num)\n        if all(num % digit == 0 for digit in str_num):\n            yield num\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum) if (int(str(i)[-1])) % (int(str(i)[-2])) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # return list(filter(lambda x: list(map(lambda y: x % y, range(startnum, endnum))), range(startnum, endnum)))\n    return list(filter(lambda x: all(i % y for y in range(startnum, endnum)), range(startnum, endnum)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return math.pi*r*r\n    else:\n        return (math.pi*r*r) / (2 * math.sin(math.radians(a)))\ndef pi_hole(r,a):\n    '''\n    Write a function to find area of a pi hole. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return (math.pi*r*r)\n    else:\n        return ((math.pi*r*r)*math.sin(math.radians(a)))\ndef pi_hole_area(r,a):\n    '''\n    Write a function to find area of a pi hole. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return r*r\n    else:\n        return (((r*r)*math.sin(math.radians(a)))+(r*r))\ndef brick(r,a):\n    '''\n    Write a function to find area of a brick. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return (r*r)*2\n    else:\n        return (((r*r)*math.sin(math.radians(a)))-(r*r))\ndef brick_area(r,a):\n    '''\n    Write a function to find area of a brick. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return r*r*2\n    else:\n        return (((r*r)*math.sin(math.radians(a)))-(r*r))\ndef brick_area_2(r,a):\n    '''\n    Write a function to find area of a brick. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return r*r*2\n    else:\n        return (((r*r)*math.sin(math.radians(a)))-(r*r))\ndef brick_area_3(r,a):\n    '''\n    Write a function to find area of a brick. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if a == 0:\n        return r*r*2\n    else:\n        return (((r*r)*math.sin(math.radians(a)))-(r*r))\ndef hexagon(r):\n    '''\n    Write a function to find area of a hexagon. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (6*math.sqrt(3)*r*r)/(4*math.tan(math.radians(6)/3))\ndef hexagon_area(r):\n    '''\n    Write a function to find area of a hexagon. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (6*math.sqrt(3)*r*r)/(4*math.tan(math.radians(6)/3))\ndef sphere(r):\n    '''\n    Write a function to find area of a sphere. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (4*math.pi*r*r)\ndef sphere_area(r):\n    '''\n    Write a function to find area of a sphere. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (4*math.pi*r*r)\ndef sphere_area_2(r):\n    '''\n    Write a function to find area of a sphere. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (4*math.pi*r*r)\ndef sphere_area_3(r):\n    '''\n    Write a function to find area of a sphere. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (4*math.pi*r*r)\ndef cylinder(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area_2(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area_3(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area_4(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area_5(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '''\n    if h <= 0:\n        return None\n    else:\n        return ((math.pi*r*r)*h)+((2*math.pi*r*h)+((2*math.pi*r*h)*math.tan(math.radians(h))))\ndef cylinder_area_6(r,h):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and height as inputs. Function should return None if the height is 0 or less.\n    '"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0 and a<=360 and a>0:\n        area = math.pi*r**2*math.sin(a/180*math.pi)\n        return area\n    elif a > 360:\n        return None\n    elif a < 0:\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    a = math.radians(a)\n    return a*r**2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        print('The angle should be less than 360 degrees')\n        return\n    area=0\n    r2=r**2\n    for i in range(0,int(360/a)):\n        area=area+(r2*math.pi/a)*((i+1)+(r2/(math.pi*r**2)))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*math.sin(a/180*math.pi)\ndef rotate_point(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function that rotates a point from its current position (x1,y1) to (x4,y4).\n    '''\n    dx1=x1-x4\n    dy1=y1-y4\n    dx2=x2-x4\n    dy2=y2-y4\n    dx3=x3-x4\n    dy3=y3-y4\n    dx4=x1-x3\n    dy4=y1-y3\n    return x4,y4,dx1*dx2+dy1*dy2,dx4*dx3+dy4*dy3\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * (a / 180)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi*r**2*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r**2) - (a**2) < 0:\n        return None\n    else:\n        return math.pi*r**2 - math.pi*r*math.sqrt((r**2)-(a**2))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return (math.pi*r**2)\n    else:\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z:\n        return ''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # DFS traversal\n    if (X==\"\" or Y==\"\" or Z==\"\"):\n        return 0\n    if (X == \"ABC\" and Y == \"ABC\" and Z == \"ABC\"):\n        return 3\n    lcs_length = {}\n    def lcs(X, Y, Z):\n        '''\n        The function returns the length of the longest common subsequence \n        of X, Y and Z.  If no such common subsequence exists, then the function returns 0.\n        '''\n        if (len(X), len(Y), len(Z)) not in lcs_length:\n            if X==\"\" or Y==\"\":\n                lcs_length[len(X), len(Y), len(Z)] = 0\n            if X == \"ABC\" and Y == \"ABC\" and Z == \"ABC\":\n                lcs_length[len(X), len(Y), len(Z)] = 3\n            elif X == \"\":\n                lcs_length[len(X), len(Y), len(Z)] = 0\n            elif Y == \"\":\n                lcs_length[len(X), len(Y), len(Z)] = 0\n            elif Z == \"\":\n                lcs_length[len(X), len(Y), len(Z)] = 0\n            else:\n                lcs_length[len(X), len(Y), len(Z)] = max(lcs(X[:-1], Y, Z[:-1]), lcs(X, Y[:-1], Z), lcs(X, Y, Z[:-1]))+1\n        return lcs_length[len(X), len(Y), len(Z)]\n    \n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    \n    L = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0 for i in range(o+1)] for j in range(n+1)] \n    \n    for i in range(n+1): \n        for j in range(o+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n    \n    for i in range(1, n+1): \n        for j in range(1, o+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n    \n    return dp[n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    k = len(Z)\n    dp_table = [[0 for x in range(m+1)] for y in range(n+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create table \n    table = [[0 for i in range(len(X) + 1)] for j in range(len(Y) + 1)] \n    for i in range(1, len(Y) + 1): \n        for j in range(1, len(Z) + 1): \n            if (X[i - 1] == Y[j - 1] or X[i - 1] == Z[j - 1]): \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) + 1\n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X)==0: return 0\n    if len(Y)==0: return 0\n    if len(Z)==0: return 0\n    m = [[0 for x in range(len(Y)+1)] for x in range(len(X)+1)]\n    n = [[0 for x in range(len(Z)+1)] for x in range(len(X)+1)]\n    \n    for i in range(1,len(X)+1): \n        for j in range(1,len(Y)+1): \n            for k in range(1,len(Z)+1): \n                if X[i-1]==Y[j-1]==Z[k-1]:\n                    m[i][j] = m[i-1][j-1]+1\n                else:\n                    m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(X)][len(Y)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n    \n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else: \n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n    return dp[len(X)][len(Y)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    k = len(Z) \n    \n    c = [[0 for i in range(k+1)] for i in range(n+1)] \n    \n    for i in range(n+1): \n        for j in range(m+1): \n            for z in range(k+1): \n                if i == 0 or j == 0 or z == 0: \n                    c[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[z-1]: \n                    c[i][j] = c[i-1][j-1]+1\n                else: \n                    c[i][j] = max(c[i-1][j], c[i][j-1]) \n    \n    return c[n][m] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[None]*(o+1) for i in range(m+1)]\n    \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    print(L)\n    return L[m][n] \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.sub(r'(^[A-Z]+)',r'\\1 ', str1)\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #my_str =''\n    my_str =''\n    #data = re.sub('[^A-Z]',' ',my_str)\n    data = re.sub('[^A-Za-z]',' ',my_str)\n    #print(data)\n    return data\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    import re\n    str1 = str1.replace(\" \",\"\")\n    #print(str1)\n    str1 = re.sub(r\"([A-Z])([a-z])\", r\"\\2 \\1\", str1)\n    #print(str1)\n    str1 = str1.title()\n    #print(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.capitalize()\n    return str1\nprint(capital_words_spaces(\" woe eet\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(\"[A-Z]+([ ]+[A-Z])\", lambda m: m.group(1) + \" \" + m.group(2), str1)\nprint(capital_words_spaces(\"This is a test string with some words\"))\nprint(capital_words_spaces(\"this is a test string with some words\"))\nprint(capital_words_spaces(\"This is a test string with some words\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=^\\w)(?=(\\w\\w+))',r' ',str1)\n    print(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    output = re.sub(r\"\\b[A-Z][a-z]*\\b\",lambda x: x.group(0).replace(x.group(0), x.group(0).lower()+\" \"),str1)\n    output = re.sub(r\"\\b[A-Z]{1}[a-z]*\\b\",lambda x: x.group(0).replace(x.group(0), x.group(0).lower()+\" \"),output)\n    return output\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for i in range(len(str1)):\n        if(str1[i][0].isupper()):\n            str1[i]=' '+str1[i]\n    str1=' '.join(str1)\n    return str1\ndef split_words(str1):\n    '''\n    Write a function to split the string into words (separated by spaces) when they are enclosed in quotes.\n    '''\n    list1=str1.split()\n    str1=\" \".join(list1)\n    return str1\ndef combine_quoted_words(str1):\n    '''\n    Write a function to combine words enclosed in quotes when they are separated by a single space.\n    '''\n    str1=str1.replace('\" ',\"\")\n    str1=str1.replace('\"',\" \")\n    str1=str1.replace('\"',\"\")\n    return str1\ndef compress_string(str1):\n    '''\n    Write a function to replace consecutive duplicate characters in the string with a single character.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return str1\ndef reverse_order_of_string(str1):\n    '''\n    Write a function to reverse the order of words in a given string.\n    '''\n    str1=str1.split()\n    str1.reverse()\n    str1=' '.join(str1)\n    return str1\ndef file_reading_gen(file_name):\n    '''\n    Write a python generator function to read a file and return a list containing all the lines in the file.\n    '''\n    with open(file_name) as f:\n        for line in f:\n            yield line.strip()\ndef file_reading_gen_v2(file_name):\n    '''\n    Write a python generator function to read a file and return a list containing all the lines in the file.\n    '''\n    with open(file_name) as f:\n        for line in f:\n            yield line.strip()\ndef find_word(str1):\n    '''\n    Write a function that takes a string as input and returns the length of the longest substring that does not contain any letter repeated more than once.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return str1\ndef find_word_v2(str1):\n    '''\n    Write a function that takes a string as input and returns the length of the longest substring that does not contain any letter repeated more than once.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return len(str1)\ndef replace_strings(str1):\n    '''\n    Write a function that takes a string as input and returns a new string in which each character in the input string is used up once.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return str1\ndef replace_strings_v2(str1):\n    '''\n    Write a function that takes a string as input and returns a new string in which each character in the input string is used up once.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return str1\ndef append_in_front_of_string(str1,str2):\n    '''\n    Write a function that takes two strings as input and returns a new string that is in the front of the first string and with the second string appended at the end.\n    '''\n    return str1+str2\ndef append_in_front_of_string_v2(str1,str2):\n    '''\n    Write a function that takes two strings as input and returns a new string that is in the front of the first string and with the second string appended at the end.\n    '''\n    return str1+str2\ndef replace_at_index(str1,index,str2):\n    '''\n    Write a function that takes two strings as input and replaces a single character at a specified index in the first string with a specified character in the second string.\n    '''\n    str1=str1.replace(str1[index],'')\n    return str1+str2\ndef replace_at_index_v2(str1,index,str2):\n    '''\n    Write a function that takes two strings as input and replaces a single character at a specified index in the first string with a specified character in the second string.\n    '''\n    return str1[:index]+str2+str1[index+1:]\ndef replace_words_with_words_in_list(str1,list1):\n    '''\n    Write a function that takes a string and a list of words as input and returns a new string in which each word in the list is used up once and each occurrence of it in the original string is replaced with it.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    for word in list1:\n        str1=str1.replace(word,'')\n    return str1\ndef replace_words_with_words_in_list_v2(str1,list1):\n    '''\n    Write a function that takes a string and a list of words as input and returns a new string in which each word in the list is used up once and each occurrence of it in the original string is replaced with it.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    for word in list1:\n        str1=str1.replace(word,'')\n    return str1\ndef replace_words_with_spaces_in_list(str1,list1):\n    '''\n    Write a function that takes a string and a list of words as input and returns a new string in which each word in the list is used up once and each occurrence of it in the original string is replaced with it.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('\\n','')\n    st"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    output = \"\"\n    for word in str1.split():\n        if word[0].isupper():\n            output += word + \" \"\n        else:\n            output += word + \" \"\n    return output\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = \"\"\n    for word in str1.split():\n        if word[0].isupper():\n            new_str = new_str + word + \" \"\n        else:\n            new_str = new_str + word + \" \"\n    new_str = new_str.strip()\n    return new_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # sort and convert to ints\n    nums_int = map(int, nums_str)\n    # sort\n    nums_int.sort()\n    # convert ints to strings\n    nums_str = list(map(str, nums_int))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # sort in ascending order\n    nums_str.sort()\n    \n    # reverse order if -ve number\n    # nums_str.sort(key=lambda num: int(num) if num!= '-' else -1 * int(num))\n    \n    # sort in descending order\n    nums_str.sort(key=lambda num: int(num) if num!= '-' else -1 * int(num), reverse=True)\n    \n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split()\n    nums = []\n    for i in nums_str:\n        try:\n            nums.append(int(i))\n        except:\n            pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for i in nums_str:\n        nums_list.append(i)\n    nums_list.sort(key=float)\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split()\n    nums.sort(key=int)\n    return \" \".join(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for i in range(len(nums_str)):\n        sorted_list.append([int(j) for j in nums_str[i].split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # a = sorted(nums_str)\n    # return a\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    def sort_numeric_strings(nums_str):\n        nums_str = re.findall('[0-9]+', nums_str)\n        nums_str.sort()\n        return ''.join(nums_str)\n    return sort_numeric_strings(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list == []:\n        test_list.append(test_tup)\n        return test_list\n    else:\n        # I am not sure if this is the fastest way, but it does what I want it to do.\n        test_list.append(test_tup)\n        return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(f\"New list: {test_list}\")\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Get the length of the given list\n    length = len(test_list)\n    # Add the given tuple to the list\n    test_list.insert(length, test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_idx = 2 * i + 1\n    right_idx = 2 * i + 2\n    if left_idx >= len(arr) or right_idx >= len(arr):\n        return True\n    \n    if arr[i] > arr[left_idx] and arr[i] > arr[right_idx]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i - 1]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2*i+1\n    right_child = 2*i+2\n    left = False\n    right = False\n    if left_child < len(arr):\n        left = arr[left_child]\n    if right_child < len(arr):\n        right = arr[right_child]\n    if left and right:\n        if left < right:\n            return False\n    if right and not left:\n        return False\n    if not right and left:\n        return False\n    if not right and not left:\n        return True\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) or (i * 2 + 1) >= len(arr):\n        return True\n    elif arr[i] > arr[i * 2 + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i * 2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i > n//2:\n        return False\n    root = (i-1)//2\n    if arr[root] > arr[i]:\n        return False\n    if i!= 0:\n        if arr[root] > arr[i//2]:\n            return False\n        if arr[i//2] > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = 0\n    r = len(arr) - 1\n    if i > len(arr) or i < 0:\n        return False\n    if i == l or i == r:\n        return True\n    if arr[i] > arr[l] or arr[i] > arr[r]:\n        return False\n    while(l < i):\n        if arr[l] > arr[i]:\n            return False\n        l += 1\n    while(r > i):\n        if arr[r] > arr[i]:\n            return False\n        r -= 1\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if the array is not empty\n    if i!= -1:\n        if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr):\n        if arr[left] < arr[i]:\n            return False\n    if right < len(arr):\n        if arr[right] < arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) or arr[i] <= 0:\n        return False\n    \n    if i * 2 + 1 < len(arr):\n        if arr[i] > arr[i*2 + 1]:\n            return False\n        \n    if i * 2 + 2 < len(arr):\n        if arr[i] > arr[i*2 + 2]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] >= arr[(i - 1) // 2]:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n*(n + 1) * (2 * n - 1) / 6)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n=n%2+1\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n==5:\n        return 5\n    if n==6:\n        return 8\n    if n==7:\n        return 13\n    if n==8:\n        return 21\n    if n==9:\n        return 34\n    if n==10:\n        return 55\n    if n==11:\n        return 89\n    if n==12:\n        return 144\n    if n==13:\n        return 233\n    if n==14:\n        return 377\n    if n==15:\n        return 610\n    if n==16:\n        return 987\n    if n==17:\n        return 1597\n    if n==18:\n        return 2584\n    if n==19:\n        return 4181\n    if n==20:\n        return 6765\n    if n==21:\n        return 10946\n    if n==22:\n        return 17711\n    if n==23:\n        return 28657\n    if n==24:\n        return 44923\n    if n==25:\n        return 7083\n    if n==26:\n        return 12473\n    if n==27:\n        return 196418\n    if n==28:\n        return 46368\n    if n==29:\n        return 71349\n    if n==30:\n        return 1346269\n    if n==31:\n        return 235537\n    if n==32:\n        return 48626\n    if n==33:\n        return 80743\n    if n==34:\n        return 1492948\n    if n==35:\n        return 292445\n    if n==36:\n        return 548214\n    if n==37:\n        return 879227\n    if n==38:\n        return 1551013\n    if n==39:\n        return 317811\n    if n==40:\n        return 548380\n    if n==41:\n        return 971426\n    if n==42:\n        return 1845219\n    if n==43:\n        return 362880\n    if n==44:\n        return 648673\n    if n==45:\n        return 1170327\n    if n==46:\n        return 2320812\n    if n==47:\n        return 4709135\n    if n==48:\n        return 1098906\n    if n==49:\n        return 2201984\n    if n==50:\n        return 4417840\n    if n==51:\n        return 769267\n    if n==52:\n        return 120960\n    if n==53:\n        return 2731588\n    if n==54:\n        return 5143791\n    if n==55:\n        return 892650\n    if n==56:\n        return 1520042\n    if n==57:\n        return 3252220\n    if n==58:\n        return 5403116\n    if n==59:\n        return 8777656\n    if n==60:\n        return 14183404\n    if n==61:\n        return 30225829\n    if n==62:\n        return 546105\n    if n==63:\n        return 90543\n    if n==64:\n        return 1528987\n    if n==65:\n        return 314525\n    if n==66:\n        return 55350\n    if n==67:\n        return 90555\n    if n==68:\n        return 163949\n    if n==69:\n        return 34764\n    if n==70:\n        return 60467\n    if n==71:\n        return 11729\n    if n==72:\n        return 237410\n    if n==73:\n        return 47973\n    if n==74:\n        return 89699\n    if n==75:\n        return 1558250\n    if n==76:\n        return 348966\n    if n==77:\n        return 60575\n    if n==78:\n        return 11041\n    if n==79:\n        return 185902\n    if n==80:\n        return 374428\n    if n==81:\n        return 60950\n    if n==82:\n        return 1176250\n    if n==83:\n        return 22818\n    if n==84:\n        return 437771\n    if n==85:\n        return 80318\n    if n==86:\n        return 1458478\n    if n==87:\n        return 315640\n    if n==88:\n        return 545447\n    if n==89:\n        return 91068\n    if n==90:\n        return 159634\n    if n==91:\n        return 338545\n    if n==92:\n        return 587180\n    if n==93:\n        return 1094627\n    if n==94:\n        return 243340\n    if n==95:\n        return 498296\n    if n==96:\n        return 91680\n    if n==97:\n        return 168729\n    if n==98:\n        return 369568\n    if n==99:\n        return 58424\n    if n==100:\n        return 1265857\n    if n==101:\n        return 268981\n    if n==102:\n        return 514928\n    if n==103:\n        return 91722\n    if n==104:\n        return 168322\n    if n==105:\n        return 344422\n    if n==106:\n        return 60462\n    if n==107:\n        return 11025\n    if n==108:\n        return 181816\n    if n==109:\n        return 371478\n    if n==110:\n        return 62366\n    if n==111:\n        return 11769\n    if n==112:\n        return 218710\n    if n==113:\n        return 43815\n    if n==114:\n        return 80521\n    if n==115:\n        return 146819\n    if n==116:\n        return 316539\n    if n==117:\n        return 55440\n    if n==118:\n        return 90589\n    if n==119:\n        return 15718\n    if n==120:\n        return 33472\n    if n==121:\n        return 60568\n    if n==122:\n        return 11202\n    if n==123:\n        return 234837\n    if n==124:\n        return 47920\n    if n==125:\n        return 89734\n    if n==126:\n        return 158248\n    if n==127:\n        return 339746\n    if n==128:\n        return 60872\n    if n==129:\n        return 117048\n    if n==130:\n        return 253400\n    if n==131:\n        return 496340\n    if n==132:\n        return 91348\n    if n==133:\n        return 168815\n    if n==134:\n        return 349038\n    if n==135:\n        return 60796\n    if n==136:\n        return 117716\n    if n==137:\n        return 254116\n    if n==138:\n        return 498116\n    if n==139:\n        return 91556\n    if n==140:\n        return 168456\n    if n==141:\n        return 348176\n    if n==142:\n        return 606\n    if n==143:\n        return 117314\n    if n==144:\n        return 253160\n    if n==145:\n        return 495168\n    if n==146:\n        return 91782\n    if n==147:\n        return 168812\n    if n==148:\n        return 349436\n    if n==149:\n        return 60944\n    if n==150:\n        return 117664\n    if n==151:\n        return 255244\n    if n==152:\n        return 495166\n    if n==153:\n        return 91880\n    if "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int((2**n-1)/((2**(n+1)-1)/2))\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 2:\n        return n\n    elif n == 3:\n        return n * 2 - 1\n    else:\n        return n * jacobsthal_num(n-1) + (n-1) * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_rec(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return jacobsthal_rec(n - 1) + jacobsthal_rec(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 1\n    if n < 3:\n        return 0\n    else:\n        return j\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # The first Lucas number is 1. The first Lucas sequence is: 1, 2, 4, 7, 11, 21, 34, 55, 89, 144, and so on.\n    # The second Lucas number is 3. The second Lucas sequence is: 1, 2, 4, 7, 11, 21, 34, 55, 89, 144, and so on.\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    count = 0\n    while(n!= count):\n        count = count + 1\n        n = n * 3 + 1\n        if (n == 6174):\n            print(count)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    y = 1\n    for i in range(n):\n        x, y = y, x + y\n    return x\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    for num in range(len(test_list)):\n        for val in range(len(test_list[num])):\n            count += 1\n    if K > count:\n        print(\"No. of values should be less than No. of rows\")\n        return False\n    min_k_list = []\n    for num in range(len(test_list)):\n        for val in range(len(test_list[num])):\n            for i in range(len(test_list[num])):\n                if val == i:\n                    continue\n                else:\n                    min_k_list.append(test_list[num][i])\n            if K <= len(min_k_list):\n                break\n            else:\n                min_k_list = []\n    min_k_list.sort()\n    print(min_k_list)\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    list = []\n    for i in range(len(test_list)):\n        list.append(test_list[i][1])\n    min_k = list.index(min(list))\n    return test_list[min_k]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0 or K == 0:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = 0\n    idx = 0\n    for i in range(len(test_list)):\n        if test_list[i] < test_list[idx]:\n            idx = i\n            k += 1\n        if k >= K:\n            break\n    return test_list[idx]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    test_list.sort()\n    \n    for i in range(K,0,-1):\n        if test_list[i-1] > test_list[i]:\n            break\n    \n    return test_list[:i]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    length = len(test_list)\n    if length < K:\n        return -1\n    if length == K:\n        return test_list\n    return sorted(test_list, key=lambda x: x[0])[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)//K\n    min_value = min(test_list[:k], key=lambda x:x[2])\n    return min_value\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = list(test_list)\n    k_max_list = []\n    k_max_list = k_max_list + test_list[0:K]\n    for i in range(1, len(test_list)):\n        k_max = 0\n        for j in range(0, K):\n            if test_list[i] > k_max:\n                k_max = test_list[i]\n        k_max_list = k_max_list + k_max_list\n        k_max_list = k_max_list + test_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key = lambda x: x[1])\n    return sorted_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    records = test_list\n    k = K\n    heap = []\n    heapq.heapify(heap)\n    for i in records:\n        if len(heap) < k:\n            heapq.heappush(heap, i)\n        else:\n            heapq.heappushpop(heap, i)\n    return heap\n    \nprint(min_k([(1,2,1),(1,3,2),(2,2,2),(3,3,1)], 2))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for x in range(len(l1)):\n        if l1[x] == l2[x] == l3[x]:\n            common_list.append(l1[x])\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    l = []\n    i = j = k = 0\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] == l3[k]:\n            l.append(l1[i])\n            i += 1\n            j += 1\n            k += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l1[i] < l3[k]:\n            i += 1\n        elif l1[i] > l3[k]:\n            k += 1\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            common_list.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            common_list.append(l3[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i = 0\n    index_list = []\n    while i < len(l1):\n        if l1.count(l1[i]) == len(l1) and l2.count(l2[i]) == len(l2) and l3.count(l3[i]) == len(l3):\n            index_list.append(i)\n        i += 1\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    return_list.append(l1[i])\n    return return_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index = []\n    # Your code here\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_index.append(i)\n    return common_index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n        if l2[i] in l1 and l2[i] in l3:\n            index_list.append(i)\n        if l3[i] in l1 and l3[i] in l2:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    c = set(l1).intersection(set(l2), set(l3))\n    return list(c)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return_list = []\n    l1_index_list = {}\n    l2_index_list = {}\n    l3_index_list = {}\n    for i in range(len(l1)):\n        l1_index_list[i] = l1[i]\n    for i in range(len(l2)):\n        l2_index_list[i] = l2[i]\n    for i in range(len(l3)):\n        l3_index_list[i] = l3[i]\n    for key, value in l1_index_list.items():\n        if value in l2_index_list.values():\n            if value in l3_index_list.values():\n                return_list.append(value)\n    return return_list\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return second_smallest_without_sort(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = min(numbers)\n    numbers.remove(first)\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # if there are more than 2 items, return the smallest of the 3 smallest\n    if len(numbers) > 2:\n        return min(sorted(numbers)[1], sorted(numbers)[2])\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return False\n    else:\n        min_idx = 0\n        for i in range(1, len(numbers)):\n            if numbers[min_idx] > numbers[i]:\n                min_idx = i\n        \n        min_val = numbers[min_idx]\n        numbers.remove(min_val)\n        return min_val\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    # print(sorted_list)\n    if len(sorted_list) == 1:\n        return None\n    else:\n        return sorted_list[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab'\n    if re.search(pattern, text):\n        print(\"Yes, pattern found\")\n    else:\n        print(\"No, pattern not found\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a[b]*')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    my_regex = 'a' + r'[b]'\n    \n    return re.findall(my_regex, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return len(re.findall('ab*', text))\n    \ndef text_match_zero_one_with_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('ab*', text)\n    \ndef text_match_zero_one_with_group_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('ab*', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('a(?=b)', text)\n    if result:\n        print(f'String {text} contains at least one a followed by one b')\n    else:\n        print(f'String {text} does not contain at least one a followed by one b')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.match(r'a(?:b){1,}', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    import re\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        print(\"Yes, the pattern is there\")\n    else:\n        print(\"No, the pattern is not there\")\ntext = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        print(\"Yes, the pattern is there\")\n    else:\n        print(\"No, the pattern is not there\")\ntext = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'ab+', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    reg=re.compile('a*b')\n    res=reg.search(text)\n    print(res)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a+b+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty list\n    s = []\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1, i, -1):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort()\n    rev_list = []\n    ans = 0\n    for i in range(0,len(test_list)-1):\n        test_str = test_list[i]\n        rev_str = test_list[i+1]\n        rev_str = rev_str[::-1]\n        if test_str == rev_str:\n            rev_list.append(test_str)\n    rev_list.sort()\n    return len(rev_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    result = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Creating empty dictionary\n    dictionary = {}\n    for test in test_list:\n        if test in dictionary:\n            dictionary[test] += 1\n        else:\n            dictionary[test] = 1\n    # Converting dictionary to list\n    result = list(dictionary.keys())\n    # Sorting in decending order\n    result.sort(reverse = True)\n    # Counting the pairs of reverse strings in the given string list\n    count = 0\n    for i in range(len(result)):\n        if (i+1) < len(result):\n            if result[i] == result[i+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    import math\n    \n    def reverse_list(l):\n        return l[::-1]\n    \n    def count_reverse_pairs_sub_list(l,start,end):\n        if start >= end:\n            return 0\n        mid = math.floor((start + end)/2)\n        count = 0\n        count += count_reverse_pairs_sub_list(l,start,mid)\n        count += count_reverse_pairs_sub_list(l,mid+1,end)\n        return count\n    \n    def count_reverse_pairs_sub_list_rec(l,start,end,counter):\n        if start >= end:\n            return 0\n        mid = math.floor((start + end)/2)\n        counter[0] += count_reverse_pairs_sub_list_rec(l,start,mid,counter)\n        counter[0] += count_reverse_pairs_sub_list_rec(l,mid+1,end,counter)\n        return counter[0]\n    \n    test_list.sort(reverse=True)\n    return count_reverse_pairs_sub_list_rec(test_list,0,len(test_list),[0])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                total_count += 1\n    return total_count\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for num in list1:\n        if num not in dict:\n            dict[num] = 1\n        else:\n            dict[num] += 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        if type(sublist) == list:\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist in freq_dict:\n                freq_dict[tuple_sublist] += 1\n            else:\n                freq_dict[tuple_sublist] = 1\n    return freq_dict\n    \ndef unique_sublists_v2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        if type(sublist) == list:\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist in freq_dict:\n                freq_dict[tuple_sublist] += 1\n            else:\n                freq_dict[tuple_sublist] = 1\n    return freq_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = dict()\n    \n    for sublist in list1:\n        if sublist not in list_dict.keys():\n            list_dict[tuple(sublist)] = 1\n        else:\n            list_dict[tuple(sublist)] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for x in range(len(list1)):\n        if list1[x] not in dic.keys():\n            dic[list1[x]] = 1\n        else:\n            dic[list1[x]] += 1\n    print(dic)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    ans = {}\n    for sublist in list1:\n        if sublist not in ans:\n            ans[sublist] = 0\n        else:\n            ans[sublist] += 1\n    return ans\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1): len(list1) for list1 in list1}\n    "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return [tuple(l) for l in list1]\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l1=[]\n    l2=[]\n    d={}\n    for i in list1:\n        if i not in l1:\n            l1.append(i)\n    for i in l1:\n        l2.append(tuple([i]))\n    for i in l2:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]=d[i]+1\n    return(d)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in list1:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    return len(num) == 3 and num[2]!= '.' and num[2]!= '0' and num[2]!= '-'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.isdigit():\n        return False\n    else:\n        for n in num:\n            if n!= '0' and n!= '.' and n!= 'e' and n!= 'E':\n                return False\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = str(num)\n    try:\n        num = float(num_str)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num,str):\n        return False\n    for i in num:\n        if i not in '0123456789.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        for i in num:\n            if i not in ['0','1','2','3','4','5','6','7','8','9']:\n                return False\n        if num.count('.')!= 1:\n            return False\n        if num.count('e') == 0:\n            return False\n        if num.count('e') == 1:\n            if num[0]!= 'e' or num[1]!= '+' or num[2]!= '-' or num[3]!= '0':\n                return False\n        if num.count('e') == 1:\n            if num[4]!= '+' or num[5]!= '-' or num[6]!= '0':\n                return False\n        if num.count('e') == 2:\n            if num[2]!= '+' or num[3]!= '-' or num[4]!= '0' or num[5]!= '.':\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_value = set()\n    for i in arr:\n        if i in unique_value:\n            print(\"Duplicate value found\")\n            return False\n        else:\n            unique_value.add(i)\n            print(\"No duplicate value\")\n            return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # to remove duplicate we used set()\n    # to check whether the list contains only one unique element we use.is_unique() function\n    # for this we just need to find the number of unique elements in the list\n    # if they all repeat we return false\n    # in this case there will be only one unique element\n    # if they all repeat we return false\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dic = {}\n    for i in arr:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for k,v in dic.items():\n        if v!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        if len(arr) > 1 and len(set(arr)) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a = set(arr)\n    if len(a) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # for i in arr:\n    #     if len(arr) > 1:\n    #         for j in arr:\n    #             if i == j:\n    #                 arr.remove(j)\n    #     else:\n    #         print(arr)\n    #         return True\n    # return False\n    \n    # Method-2\n    if len(arr) > 1:\n        set1 = set(arr)\n    else:\n        return True\n    for i in set1:\n        if arr.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    d = {}\n    for i in arr:\n        if i in d:\n            return False\n        else:\n            d[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_set=set(arr)\n    if len(arr_set)==1:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return monthnum3 <= 30\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for x in range(1, 13):\n        if monthnum3 == x:\n            if 30 == (monthnum3 * 3):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return False\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        if(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7):\n            if(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5):\n                print(f'{monthnum3} has 30 days')\n            elif(monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10):\n                print(f'{monthnum3} has 31 days')\n        elif(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n            if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                print(f'{monthnum3} has 30 days')\n            elif(monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                print(f'{monthnum3} has 29 days')\n        elif(monthnum3 == 12):\n            if(monthnum3 == 12):\n                print(f'{monthnum3} has 30 days')\n    elif(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n            print(f'{monthnum3} has 30 days')\n        elif(monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n            print(f'{monthnum3} has 29 days')\n    elif(monthnum3 == 2):\n        print(f'{monthnum3} has 28 days')\n    else:\n        print(f'{monthnum3} has 30 days')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 > 1 and monthnum3 < 13):\n        if(monthnum3 == 2):\n            if(year%4 == 0 and (year%100!= 0 or year%400 == 0)):\n                if(monthnum3 == 2):\n                    if(monthnum3 == 29):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                if(monthnum3 == 2):\n                    if(monthnum3 == 28):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n        elif(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n            if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                    if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                        if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                            if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                                return True\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    assert type(monthnum3) == int and (monthnum3 >= 1 and monthnum3 <= 12)\n    assert type(monthnum3) == int and (monthnum3 >= 1 and monthnum3 <= 12)\n    \n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if (year % 100 == 0):\n                if (year % 400 == 0):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #your code here\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9:\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n        print('No, it is not 30 days month')\n    else:\n        print('Yes, it is 30 days month')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>0 and monthnum3<=12:\n        if monthnum3%2==0:\n            if 30%12==0:\n                print('30 days')\n            else:\n                print('31 days')\n        else:\n            if 30%12==0:\n                print('31 days')\n            else:\n                print('30 days')\n    else:\n        print('Invalid number')\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # your code here\n    '''\n    1. Find the minimum value in the array.\n    2. From the minimum value, find the next minimum in the array and compare it with the current element.\n    3. If the difference between the current element and next minimum is less than the current difference, then this is the minimum difference in the array.\n    4. Keep repeating step 2 until all the elements in the array have been compared.\n    '''\n    min_diff = 1e9\n    for i in range(n):\n        if min_diff > abs(arr[i] - arr[i+1]):\n            min_diff = abs(arr[i] - arr[i+1])\n    print(min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 2**31\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j])<min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff,arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000000\n    if arr is None:\n        return min_diff\n    if len(arr)<2:\n        return min_diff\n    for i in range(n-1):\n        diff = abs(arr[i]-arr[i+1])\n        min_diff = min(min_diff,diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = float('inf')\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n                min_num = (arr[i],arr[j])\n    return min_diff, min_num\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    d = arr[1] - arr[0]\n    for i in range(1,n-1):\n        if arr[i+1]-arr[i] < d:\n            d = arr[i+1]-arr[i]\n    return d\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Create a maxheap\n    max_heap = []\n    \n    # Traverse the given array,\n    # add all the element to the maxheap,\n    # but in the reversed order\n    for i in range(n):\n        curr_ele = arr[i]\n        # The current ele is greater\n        # than the top of heap,\n        # add it to the heap\n        if curr_ele > max_heap[0]:\n            heapq.heappush(max_heap, curr_ele)\n        # If the curr_ele is less than\n        # the top of heap,\n        else:\n            # Pop the top element\n            # and add the current ele to\n            # the heap\n            heapq.heappush(max_heap, curr_ele)\n            # Delete the top element\n            # from the heap\n            heapq.heappop(max_heap)\n    \n    # Traverse the max_heap and find\n    # the difference\n    for i in range(n-1):\n        diff = max_heap[0] - arr[i]\n        # Compare the diff with\n        # the result\n        if diff < 0:\n            return -1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = 10**6\n    for i in range(n-1):\n        minimum = min(minimum, abs(arr[i]-arr[i+1]))\n    return minimum \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print(\"Number of digits in a given string : \", count)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    \ndef main():\n    print(number_ctr(\"abc123\"))\n    print(number_ctr(\"abc123\"))\n    print(number_ctr(\"ab123cd\"))\n    print(number_ctr(\"abc123xyz\"))\n    print(number_ctr(\"abc123x\"))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total = 0\n    for i in str:\n        if i.isdigit():\n            total += 1\n    return total\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\nprint(number_ctr
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if(i.isdigit()):\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    if n%2==0:\n        n-=1\n    if n%2!=0:\n        n+=1\n    return n \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    polite=1\n    i=2\n    while(i<=n):\n        polite=polite*2\n        i+=1\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    if n==1:\n        return 2\n    # finding the value of x as the sum of the list.\n    x = 2*n-1\n    # this loop keeps increasing the value of x\n    while(x<n):\n        # if x is even then x+1 is x.\n        if x%2==0:\n            x+=1\n        # else we must remove last digit of the list.\n        else:\n            x=x-1\n    # x is the value of x.\n    # now we have to find the value of x for which x=n \n    # and x+1=n\n    # but x+1 may be greater than n, hence the while loop.\n    while(x<n):\n        # check whether x is even or not\n        if x%2==0:\n            # if x is even then x+1 is x+1.\n            x+=1\n        # else we must remove last digit of the list.\n        else:\n            x=x-1\n    # this loop finds the value of x for which x=n.\n    # it returns the value of x.\n    return x\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    n = n - 1\n    pol = 1\n    while n!= 0:\n        pol = pol*2\n        n = n - 1\n    return pol\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    polite = n//2\n    return polite\n    \ndef is_polite_1(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return -1\n    if n == 1: \n        return 0\n    l = 2\n    h = n // 2\n    while l <= h: \n        if l*l == n: \n            return l\n        elif l*l < n: \n            l = l + 1\n        else: \n            h = h - 1\n    return l-1\n    \ndef is_polite_2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_3(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_4(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_5(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_6(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_7(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_8(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_9(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_10(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_11(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_12(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_13(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_14(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n-1)//2\n    while a > ans:\n        ans = 2*ans -1\n        if ans * ans == n:\n            return ans\n        a = a-1\n    return ans\n    \ndef is_polite_15(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n == 1:\n        return 0\n    a = n-1\n    ans = (n+n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Write a function to find nth polite number. geeksforg"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(n)\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 4\n    else:\n        polite=int(math.log(n,2))\n        polite_2=int(math.log(n,3))\n        if (polite*3)==n:\n            return int((polite+1)*3)\n        if (polite_2*2)==n:\n            return int((polite_2+1)*2)\n        else:\n            return int(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 1\n    while x <= n:\n        if
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    for i in range(1, n): \n        if (i*(i+1))%n == 0: \n            return i \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # return bin(n).count('1') % 2 == 0\n    return n % 2 == 0\n    \n    # return n % 2 == 1 and (n > 1 or n == 0)\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res=[]\n    for i in range(len(l1)):\n        if i<len(l1)-1:\n            res.append([l1[i],l1[i+1]])\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    for index,element in enumerate(l1):\n        if index == len(l1)-1:\n            break\n        else:\n            new_list.append((l1[index],l1[index+1]))\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n == 0:\n        return []\n    output = []\n    for i in range(0, n):\n        if i == 0:\n            output.append((l1[i], l1[i+1]))\n        elif i == n-1:\n            output.append((l1[i], l1[i-1]))\n        else:\n            output.append((l1[i], l1[i+1]))\n            output.append((l1[i], l1[i-1]))\n    return output\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list_of_pairs = []\n    if len(l1) >= 2:\n        for i in range(len(l1)-1):\n            list_of_pairs.append((l1[i],l1[i+1]))\n    return list_of_pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    result = []\n    while i < len(l1)-1:\n        result.append([l1[i],l1[i+1]])\n        i += 1\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            out.append([l1[i],l1[j]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            l.append([l1[i],l1[j]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    lst = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            lst.append(arr[i] + arr[j])\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for x in range(len(arr)):\n        for y in range(x+1, len(arr)):\n            if arr[x] + arr[y] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    '''\n    After the function is written, write unit tests to verify that it returns the correct count.\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    a = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                a = a+1\n    return a\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    s=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                s+=1\n    return s\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    hash_table = {}\n    # Naive algorithm\n    for i in range(len(arr)):\n        if sum - arr[i] in hash_table:\n            pairs_count += hash_table[sum - arr[i]]\n        hash_table[arr[i]] = hash_table.get(arr[i], 0) + 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    print(arr)\n    arr = sorted(arr)\n    #print(arr)\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr):\n            #print(arr[i], arr[j])\n            if arr[i] + arr[j] == sum:\n                return 1\n            else:\n                j += 1\n        i += 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # initialize an array to hold the sum of each element\n    total = []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = sorted(li1)\n    li2 = sorted(li2)\n    d = []\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    li1_copy = li1[:]\n    for i in li2:\n        if i not in li1_copy:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif_list = []\n    for i in li1:\n        if i not in li2:\n            dif_list.append(i)\n    for i in li2:\n        if i not in li1:\n            dif_list.append(i)\n    return dif_list\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1_n = set(li1)\n    li2_n = set(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\nli = ['rock','pop','rock','rap','rap','rock','rock','rock']\nli1 = ['rock','pop','rock','rap','rap','rock']\nprint(Diff(li,li1))"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            li3.append(li1[i])\n    return li3\nprint(Diff([1,2,3,4,5],[2,3]))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i%2 == 1 : \n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(n) :\n        if(i%2==0) :\n            continue\n        ans += i**4\n    return ans\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = []\n    for i in range(1,n+1,2):\n        a.append(i)\n    print(a)\n    sum = 0\n    for i in range(len(a)):\n        sum += a[i]**4\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            odd_nums.append(i**3)\n    print('Odd numbers from 1 to n',odd_nums)\n    odd_nums_sum = sum(odd_nums)\n    print(\"The sum of fourth power of all odd numbers from 1 to n:\",odd_nums_sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            odd_nums.append(i)\n    sum = 0\n    for i in range(0, len(odd_nums)) :\n        sum = sum + (odd_nums[i]) ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2)!=0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        if i % 2!= 0 : \n            sum = sum + pow(i,4)\n        else : \n            pass\n    print(sum)\nodd_num_sum(5)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2!= 0) :\n            odd_numbers.append(i**4)\n    return sum(odd_numbers)\n    \ndef check_sum_of_n(n) :\n    '''\n    Write a python function to find sum of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2 == 0) :\n            even_numbers.append(i)\n    return sum(even_numbers)\n    \ndef check_sum_of_n_squared(n) :\n    '''\n    Write a python function to find sum of first n natural numbers.\n    '''\n    natural_numbers = []\n    for i in range(1, n + 1) :\n        natural_numbers.append(i**2)\n    return sum(natural_numbers)\n    \ndef check_sum_of_n_squared_even(n) :\n    '''\n    Write a python function to find sum of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2 == 0) :\n            even_numbers.append(i**2)\n    return sum(even_numbers)\n    \ndef check_sum_of_n_squared_odd(n) :\n    '''\n    Write a python function to find sum of first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2!= 0) :\n            odd_numbers.append(i**2)\n    return sum(odd_numbers)\n    \ndef check_sum_of_n_squared_odd_even(n) :\n    '''\n    Write a python function to find sum of first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2!= 0) :\n            odd_numbers.append(i**2)\n    even_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2 == 0) :\n            even_numbers.append(i**2)\n    return sum(odd_numbers), sum(even_numbers)\n    \ndef count_number_of_n(n) :\n    '''\n    Write a python function to count number of times a natural number repeats in first n natural numbers.\n    '''\n    result = []\n    for i in range(1, n + 1) :\n        if i in result :\n            result[result.index(i)] += 1\n        else :\n            result.append(i)\n    return result\n    \ndef count_number_of_n_odd(n) :\n    '''\n    Write a python function to count number of times a natural number repeats in first n natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2!= 0) :\n            odd_numbers.append(i)\n    return odd_numbers\n    \ndef count_number_of_n_odd_even(n) :\n    '''\n    Write a python function to count number of times a natural number repeats in first n natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2!= 0) :\n            odd_numbers.append(i)\n    even_numbers = []\n    for i in range(1, n + 1) :\n        if (i % 2 == 0) :\n            even_numbers.append(i)\n    return odd_numbers, even_numbers\n    \ndef sum_of_factors(n) :\n    '''\n    Write a python function to find sum of factors of first n natural numbers.\n    '''\n    result = []\n    for i in range(1, n + 1) :\n        for j in range(1, i) :\n            if (i % j == 0) :\n                result.append(j)\n    return sum(result)\n    \ndef sum_of_factors_divisible_by_k(n, k) :\n    '''\n    Write a python function to find sum of factors of first n natural numbers.\n    '''\n    result = []\n    for i in range(1, n + 1) :\n        for j in range(1, i) :\n            if (i % j == 0) and (j % k == 0) :\n                result.append(j)\n    return sum(result)\n    \ndef check_if_perfect_square(n) :\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    if (n**0.5) % 1 == 0 :\n        return True\n    else :\n        return False\n    \ndef power_of_two(n) :\n    '''\n    Write a python function to find power of 2.\n    '''\n    result = 1\n    while (n >= result) :\n        result = result * 2\n    return result\n    \ndef power_of_two_using_recursion(n) :\n    '''\n    Write a python function to find power of 2.\n    '''\n    if (n == 0) :\n        return 1\n    else :\n        result = power_of_two_using_recursion(n - 1)\n        return 2 * result\n        \ndef power_of_two_using_iterative_method(n) :\n    '''\n    Write a python function to find power of 2.\n    '''\n    result = 1\n    while (n >= result) :\n        result = result * 2\n    return result\n    \ndef sum_of_recursive_n_natural_numbers(n) :\n    '''\n    Write a python function to find sum of first n natural numbers using recursive algorithm.\n    '''\n    if (n == 0) :\n        return 0\n    else :\n        return n + sum_of_recursive_n_natural_numbers(n - 1)\n        \ndef sum_of_recursive_n_natural_numbers_with_memoization(n) :\n    '''\n    Write a python function to find sum of first n natural numbers using recursive algorithm.\n    '''\n    memo = {}\n    def helper(n) :\n        if (n == 0) :\n            return 0\n        else :\n            if (n in memo) :\n                return memo[n]\n            else :\n                memo[n] = n + helper(n - 1)\n                return memo[n]\n    return helper(n)\n    \ndef sum_of_recursive_n_natural_numbers_with_memoization_iterative(n) :\n    '''\n    Write a python function to find sum of first n natural numbers using recursive algorithm.\n    '''\n    n1 = 0\n    n2 = 1\n    sum = 0\n    if (n == 0) :\n        return 0\n    else :\n        while (n > 1) :\n            sum = n1 + n2\n            n1 = n2\n            n2 = sum\n            n -= 1\n        return sum\n    \ndef fibonacci(n) :\n    '''\n    Write a python function to find nth term in fibonacci series.\n    '''\n    result = 1\n    if (n == 0) :\n        return 1\n    elif (n == 1) :\n        return 1\n    elif (n > 1) :\n        return fibonacci(n - 1) + fibonacci(n - 2)\n        \ndef fibonacci_using_recursion(n) :\n    '''\n    Write a python function to find nth term in fibonacci series.\n    '''\n    if (n == 0) :\n        return 1\n    elif (n == 1) :\n        return 1\n    elif (n > 1) :\n        return fibonacci_using_recursion(n - 1) + fibonacci_using_recursion(n - 2)\n        \ndef fibonacci_using_memoization(n) :\n    '''\n    Write a python function to find nth term in fibonacci series.\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = list(range(1,n+1))\n    odd_numbers_squared = map(lambda x: x**2, odd_numbers)\n    odd_numbers_squared = list(odd_numbers_squared)\n    odd_numbers_squared = list(filter(lambda x: (x%2!= 0), odd_numbers_squared))\n    odd_numbers_squared = sum(odd_numbers_squared)\n    return odd_numbers_squared\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = list(range(1, n))\n    sum_odd_nums = 0\n    for i in range(n):\n        if(i%2!= 0):\n            sum_odd_nums += pow(odd_nums[i], 4)\n    return sum_odd_nums\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    left_parens = 0\n    # if not expression or if last element is not a left parenthesis, then return False\n    for char in exp:\n        if char == '(':\n            q.append(char)\n            left_parens += 1\n        elif char == ')':\n            q.pop()\n            left_parens -= 1\n        if len(q) == 0:\n            return False\n    # if both are empty then expression is balanced\n    if left_parens!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == \"(\" or i == \"{\" or i == \"[\":\n            stack.append(i)\n        elif i == \")\":\n            if stack == [] or stack[-1] == \"]\":\n                return False\n            if stack[-1] == \")\":\n                return False\n            if stack[-1] == \"}\":\n                return False\n            if stack[-1] == \"]\":\n                return False\n            stack.pop()\n        elif i == \"}\":\n            if stack == [] or stack[-1] == \")\":\n                return False\n            if stack[-1] == \"}\":\n                return False\n            if stack[-1] == \"]\":\n                return False\n            if stack[-1] == \"[\":\n                return False\n            stack.pop()\n        elif i == \"]\":\n            if stack == [] or stack[-1] == \")\":\n                return False\n            if stack[-1] == \"}\":\n                return False\n            if stack[-1] == \"[\":\n                return False\n            if stack[-1] == \"(\":\n                return False\n            stack.pop()\n    if stack!= []:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_par = '('\n    close_par = ')'\n    map = {'+': 2, '-': 2, '*': 3, '/': 3}\n    left = 0\n    right = 0\n    count = 0\n    for i in range(len(exp)):\n        if exp[i] in open_par:\n            left = 1\n        if exp[i] in close_par:\n            right = 1\n        if exp[i] == '(':\n            left = left + 1\n        if exp[i] == ')':\n            right = right + 1\n        count += left - right\n    if count == 0:\n        return True\n    if left > right:\n        return False\n    return map[exp[0]] == count + 1\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paranthesis = set(['(', '['])\n    close_paranthesis = set([')', ']', '}'])\n    stack = deque()\n    for item in exp:\n        if item in open_paranthesis:\n            stack.append(item)\n        elif item in close_paranthesis:\n            if not stack or stack[-1]!= item:\n                return False\n            else:\n                stack.pop()\n    return False if stack else True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\ndef check_balanced_parentheses(exp):\n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    An input string is valid if:\n    1. Open brackets must be closed by the same type of brackets.\n    2. Open brackets must be closed in the correct order.\n    Note that an empty string is also considered valid.\n    '''\n    if len(exp) == 0:\n        return True\n    stack = []\n    p = 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '{':\n            stack.append(exp[i])\n        elif exp[i] == '}':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '[':\n            stack.append(exp[i])\n        elif exp[i] == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\ndef calculate_expression(exp):\n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    An input string is valid if:\n    1. Open brackets must be closed by the same type of brackets.\n    2. Open brackets must be closed in the correct order.\n    Note that an empty string is also considered valid.\n    '''\n    stack = deque()\n    p = 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '{':\n            stack.append(exp[i])\n        elif exp[i] == '}':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '[':\n            stack.append(exp[i])\n        elif exp[i] == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\ndef stack_arrays(arr1, arr2, arr3):\n    '''\n    You have 3 stacks and 3 more stacks in each stack. Write a function to determine if the next element in each stack is greater than the previous element.\n    '''\n    stacks = [[], [], []]\n    for i in range(len(arr1)):\n        stacks[0].append(arr1[i])\n        stacks[1].append(arr2[i])\n        stacks[2].append(arr3[i])\n    return stacks\ndef deep_reverse(input_list):\n    '''\n    Write a function that takes a list and returns a new list that is the deep reverse of the input list.\n    '''\n    if len(input_list) == 0:\n        return []\n    output_list = input_list.copy()\n    if len(input_list) > 1:\n        output_list = deep_reverse(output_list[1:])\n        output_list.append(input_list[0])\n        return output_list\n    else:\n        return input_list\ndef max_profit(arr):\n    '''\n    Given an array of numbers representing the stock prices of a company in chronological order, \n    write a function that calculates the maximum profit you could have made from buying and selling that stock once. \n    You must buy before you can sell it.\n    '''\n    max_profit = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i + 1] > arr[i]:\n            profit = arr[i + 1] - arr[i]\n            max_profit = max(profit, max_profit)\n        else:\n            i += 1\n    return max_profit\ndef merge_the_tools(arr, k):\n    '''\n    Given an array of integers, write a function that prints the array elements in reverse order as a one line \n    array with each element separated by a space.\n    '''\n    for i in range(0, len(arr) - k + 1, k):\n        print(\" \".join(map(str, arr[i:i + k])))\ndef gcd(a, b):\n    '''\n    Given two integers a and b, print the gcd of a and b.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef gcd_recursive(a, b):\n    '''\n    Given two integers a and b, print the gcd of a and b.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef reverse_words(s):\n    '''\n    Given an input string, print the string in reverse order.\n    '''\n    if len(s) == 0:\n        return \"\"\n    stack = []\n    for i in range(len(s)):\n        if s[i] =='':\n            print(\" \".join(map(str, stack)))\n            stack = []\n        else:\n            stack.append(s[i])\n    if len(stack) > 0:\n        print(\" \".join(map(str, stack)))\ndef count_inversions(arr):\n    '''\n    Given a list of n positive integers, write a function that returns the number of inversions in the list. An inversion is when an element appears in the list after the list is sorted in non-decreasing order.\n    '''\n    if len(arr) <= 1:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\ndef common_characters(s1, s2):\n    '''\n    Write a function to find the characters that occur in both string.\n    '''\n    # s1 = list(s1)\n    # s2 = list(s2)\n    if len(s1)!= len(s2):\n        return \"\"\n    d = {}\n    for i in range(len(s1)):\n        d[s1[i]] = s1.count(s1[i])\n    for i in range(len(s2)):\n        if s2[i] in d:\n            if s2[i] in d.keys():\n                d[s2[i]] += 1\n    return d\ndef generate_primes(count):\n    '''\n    Given an integer n, generate an array containing the first n primes. Note that primes are not unique.\n    '''\n    # generate_primes(5) should return [2, 3, 5, 7, 11]\n    # you can call the is_prime function and use a for loop to complete the task\n    # if you pass a number which is not prime, the program will return an empty list\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        # we can use the Sieve of Eratosthenes, or a variation of the Sieve of Eratosthenes, to prove that any number can only be prime with certainty\n        # the entire set of numbers from 2 to n can be divided into prime number groups, which means the numbers that are prime are in the first n / 2 groups\n        # and that every numbe"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    open_list = [\"{\", \"[\", \"(\"]\n    close_list = [\"]\", \")\", \"}\"]\n    mapping = {\"{\": \"}\", \"[\": \"]\", \"(\": \")\"}\n    mapping2 = {\"{\": \"}\", \"[\": \"]\", \"(\": \")\", \")\": \"()\"}\n    parenthesis = {'{': '}', '[': ']', '(': ')'}\n    dict_mapping = {}\n    # print(parenthesis)\n    # print(exp)\n    for i in exp:\n        # print(i)\n        if i in open_list:\n            q.append(i)\n        elif i in close_list:\n            if len(q) == 0:\n                return False\n            # print(q)\n            if open_list.index(q[-1])!= close_list.index(i):\n                return False\n            # print(i)\n            q.pop()\n    if len(q)!= 0:\n        return False\n    # print(exp)\n    # print(\"not balanced\")\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Implementation of stack\n    stack = []\n    open_parenthesis = {'{', '(', '['}\n    close_parenthesis = {'}', ')', ']'}\n    \n    for paren in exp:\n        if paren in open_parenthesis:\n            stack.append(paren)\n        else:\n            if not stack or paren not in close_parenthesis:\n                return False\n            else:\n                # Removing the top parenthesis \n                stack.pop()\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left = \"({[\"\n    right = \")]}\"\n    for i in exp:\n        if i in left:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            temp = stack.pop()\n            if left.index(temp)!= right.index(i):\n                return False\n    return len(stack) == 0\ndef generate_balanced_parentheses_brute_force(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    def is_balanced(s):\n        if len(s)%2!= 0:\n            return False\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                temp = stack.pop()\n                if i == ')' and temp!= '(':\n                    return False\n        return len(stack) == 0\n    def generate_balanced_parentheses(n):\n        balanced = []\n        queue = deque()\n        queue.appendleft('(')\n        balanced.append('(')\n        while queue:\n            i = queue.pop()\n            for j in range(len(balanced)):\n                if balanced[j] == '(':\n                    balanced.pop(j)\n                    break\n            balanced.append(i)\n            for j in range(len(balanced)):\n                if balanced[j] == ')':\n                    balanced.pop(j)\n                    break\n            if is_balanced(balanced):\n                balanced.append(')')\n                balanced.append('(')\n                if len(balanced) == 2*n:\n                    balanced.reverse()\n                    queue.extendleft(balanced)\n                    balanced = []\n                    continue\n            balanced.append(')')\n            balanced.append('(')\n        return queue\n    return generate_balanced_parentheses(n)\ndef generate_balanced_parentheses_recursive(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    def is_balanced(s):\n        if len(s)%2!= 0:\n            return False\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                temp = stack.pop()\n                if i == ')' and temp!= '(':\n                    return False\n        return len(stack) == 0\n    def generate_balanced_parentheses(n):\n        balanced = []\n        queue = deque()\n        queue.appendleft('(')\n        balanced.append('(')\n        while queue:\n            i = queue.pop()\n            for j in range(len(balanced)):\n                if balanced[j] == '(':\n                    balanced.pop(j)\n                    break\n            balanced.append(i)\n            for j in range(len(balanced)):\n                if balanced[j] == ')':\n                    balanced.pop(j)\n                    break\n            if is_balanced(balanced):\n                balanced.append(')')\n                balanced.append('(')\n                if len(balanced) == 2*n:\n                    balanced.reverse()\n                    queue.extendleft(balanced)\n                    balanced = []\n                    continue\n            balanced.append(')')\n            balanced.append('(')\n        return queue\n    return generate_balanced_parentheses(n)\ndef generate_balanced_parentheses(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    def is_balanced(s):\n        if len(s)%2!= 0:\n            return False\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                temp = stack.pop()\n                if i == ')' and temp!= '(':\n                    return False\n        return len(stack) == 0\n    def generate_balanced_parentheses(n):\n        balanced = []\n        queue = deque()\n        queue.appendleft('(')\n        balanced.append('(')\n        while queue:\n            i = queue.pop()\n            for j in range(len(balanced)):\n                if balanced[j] == '(':\n                    balanced.pop(j)\n                    break\n            balanced.append(i)\n            for j in range(len(balanced)):\n                if balanced[j] == ')':\n                    balanced.pop(j)\n                    break\n            if is_balanced(balanced):\n                balanced.append(')')\n                balanced.append('(')\n                if len(balanced) == 2*n:\n                    balanced.reverse()\n                    queue.extendleft(balanced)\n                    balanced = []\n                    continue\n            balanced.append(')')\n            balanced.append('(')\n        return queue\n    return generate_balanced_parentheses(n)\ndef generate_balanced_parentheses_using_stack(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    balanced = []\n    stack = deque()\n    stack.appendleft('(')\n    balanced.append('(')\n    while stack:\n        i = stack.pop()\n        for j in range(len(balanced)):\n            if balanced[j] == '(':\n                balanced.pop(j)\n                break\n        balanced.append(i)\n        for j in range(len(balanced)):\n            if balanced[j] == ')':\n                balanced.pop(j)\n                break\n        if is_balanced(balanced):\n            balanced.append(')')\n            balanced.append('(')\n            if len(balanced) == 2*n:\n                balanced.reverse()\n                stack.extendleft(balanced)\n                balanced = []\n                continue\n        balanced.append(')')\n        balanced.append('(')\n    return stack\ndef generate_balanced_parentheses_using_queque(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    balanced = []\n    queue = deque()\n    queue.appendleft('(')\n    balanced.append('(')\n    while queue:\n        i = queue.pop()\n        for j in range(len(balanced)):\n            if balanced[j] == '(':\n                balanced.pop(j)\n                break\n        balanced.append(i)\n        for j in range(len(balanced)):\n            if balanced[j] == ')':\n                balanced.pop(j)\n                break\n        if is_balanced(balanced):\n            balanced.append(')')\n            balanced.append('(')\n            if len(balanced) == 2*n:\n                balanced.reverse()\n                queue.extendleft(balanced)\n                balanced = []\n                continue\n        balanced.append(')')\n        balanced.append('(')\n    return queue\ndef generate_balanced_parentheses_using_deque(n):\n    '''\n    Write a function to generate all combinations of balanced parentheses.\n    A balanced parentheses is balanced if it meets the following condition:\n    '''\n    balanced = []\n    queue = deque()\n    queue.appendleft('(')\n    balanced.append('(')\n    while queue:\n        i = queue.pop()\n        for j in range(len(balanced)):\n            if balanced[j] == '(':\n                balanced.pop(j)\n                break\n        balanced.append(i)\n        for j in range(len(balanced)):\n            if balanced[j] == ')':\n                balanced.pop(j)\n                break\n        if is_balanced(balanced):\n            balanced.append(')')\n            balanced.append('(')\n            if len(balanced) == 2*n:\n                balanced.reverse()\n                queue.extendleft(balanced)\n                balanced = []\n                continue\n        balanced.append(')')\n        balanced.append('(')\n    return queue\ndef generate_balanced_parentheses_using_recursion(n):\n    '''\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket = ['(', ')', '{', '}', '[']\n    p_dic = {'(': 0, ')': 1, '{': 2, '}': 3, '[': 4}\n    q_dic = {0: '(', 1: ')', 2: '{', 3: '}', 4: '['}\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K <= 0:\n        return test_str\n    else:\n        return \" \".join([word for word in test_str.split() if len(word) > K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    index = 0\n    while index < len(test_str):\n        if len(test_str[index:index+K]) == K:\n            test_str = test_str[:index] + test_str[index+K:]\n        else:\n            index += 1\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == \"\":\n        return \"\"\n    \n    for i in range(len(test_str) - K + 1):\n        if test_str[i:i+K]!= \"\" and test_str[i+K] == \" \":\n            test_str = test_str[:i] + test_str[i+K+1:]\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\".\",\"\")\n    test_str = test_str.replace(\",\",\"\")\n    test_str = test_str.replace(\"'\",\"\")\n    test_str = test_str.replace('\\n','')\n    words = test_str.split(\" \")\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.remove(words[i])\n    return words\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    new_str = ''\n    for i in range(len(test_str)):\n        if i + K < len(test_str) and len(test_str[i:i + K]) == K:\n            continue\n        new_str += test_str[i]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = test_str.split()\n    if K == 0:\n        return \"\"\n    for word in result:\n        if len(word) == K:\n            result.remove(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str) - K + 1):\n        if (test_str[i:i+K] in test_str[i+1:]):\n            test_str = test_str.replace(test_str[i:i+K],'')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(sorted(x for x in test_str.split() if len(x)!= K))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) == K:\n            result.append(word)\n    result = \" \".join(result)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = \"\"\n    for char in test_str:\n        if len(char) == K:\n            new_str += \" \"\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = 0\n    match = 0\n    while True:\n        pos = text.find(pattern,pos)\n        if pos == -1:\n            break\n        match += 1\n        pos += len(pattern)\n    return match\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    result = pattern.findall(text)\n    if len(result) == 0:\n        return None\n    else:\n        return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_for_unicode(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_for_unicode(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode10(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode11(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode12(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode13(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_search = re.search(pattern,text)\n        return pattern_search.start(),pattern_search.end(),pattern_search.group()\n    except AttributeError:\n        return None\ndef occurance_substring_with_start_end_position_in_order_for_unicode14(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    ''"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(text)\n    m = len(pattern)\n    j = 0\n    k = 0\n    s = \"\"\n    count = 0\n    while j<n and k<m:\n        if text[j] == pattern[k]:\n            count += 1\n            j += 1\n            k += 1\n        else:\n            j = j + 1\n            k = 0\n    if count == m:\n        return text[:m]\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res=[]\n    for i in range(len(text)):\n        if text[i:i+len(pattern)]==pattern:\n            res.append((i,i+len(pattern)-1))\n    if len(res)>0:\n        print(min(res))\n        return min(res)\n    else:\n        print('not found')\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.finditer(pattern,text)\n    for i in m:\n        print(i.start())\n    \n    \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #split string and return subs\n    occ_split = re.split('|'.join(pattern),text)\n    #check if sub found\n    if len(occ_split) == len(pattern):\n        return occ_split\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for match in re.finditer(pattern,text):\n        print(match.start(),match.end(),match.group())\n        \nif __name__ == \"__main__\":\n    #Test: \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"spain\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"mainly\"\n    occurance_substring(text,pattern)\n    \n    text = \"The rain in spain stays mainly in the plain\"\n    pattern = \"ain\"\n    occurance_su"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern not in text:\n        print('No match')\n        return None\n    else:\n        index = 0\n        while index <= len(text)-len(pattern):\n            if text[index:index+len(pattern)] == pattern:\n                print(index,index+len(pattern))\n                index = index+len(pattern)\n            else:\n                index = index+1\n            \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        x=re.search(pattern,text)\n        if x:\n            return x.span()\n        else:\n            return None\n    except AttributeError:\n        print(\"text and pattern must be string\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    temp_nums = []\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            temp_nums.append(nums[i])\n    print(temp_nums)\n    if len(temp_nums) == 0:\n        print(\"No odd index has odd numbers\")\n    else:\n        print(\"All odd index has odd numbers\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = []\n    for i in range(1,len(nums)-1,2):\n        if nums[i] % 2 == 1:\n            odd_indices.append(i)\n    return odd_indices\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if type(nums) is not list:\n        raise TypeError(\"Input should be a list\")\n    \n    odd_nums = []\n    \n    for idx, num in enumerate(nums):\n        if idx % 2!= 0:\n            odd_nums.append(num)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==0:\n            if nums[i]==0:\n                return False\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odds.append(nums[i])\n    if len(odds) == 0:\n        print(\"There are no odd numbers in the list\")\n    else:\n        print(f\"The odd positions in the list are {odds}\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def is_odd_position(nums, start, end):\n        for i in range(start, end):\n            if nums[i] % 2 == 0:\n                return False\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #if not isinstance(nums, list):\n    #    raise TypeError('Expected a list')\n    #for i in nums:\n    #    if not isinstance(i, int):\n    #        raise TypeError('List values must be integers')\n    #odd_index = []\n    #for i in range(len(nums)):\n    #    if i % 2 == 1:\n    #        odd_index.append(i)\n    #    else:\n    #        continue\n    #if odd_index == []:\n    #    return True\n    #else:\n    #    return False\n    odd_index = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            odd_index += 1\n            if odd_index == 0:\n                continue\n            elif nums[i - odd_index] % 2!= 0:\n                return False\n            else:\n                continue\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in \"aeiouAEIOU\":\n            count += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # creating a dictionary to store the vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for index in range(0, len(test_str) - 1):\n        if test_str[index] in \"aeiou\":\n            if test_str[index + 1] in \"aeiou\":\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','y']\n    result = 0\n    for i in range(1,len(test_str)-1):\n        if test_str[i-1] in vowels and test_str[i] in vowels and test_str[i+1] in vowels:\n            result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return sum(1 for i in vowels if i in test_str)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    str = test_str.lower()\n    for i in range(len(str)):\n        if str[i] in 'aeiou':\n            if i == 0:\n                count += 1\n            else:\n                if str[i - 1] not in 'aeiou':\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowels_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            vowels_count += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set(\"aeiou\")\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i]!= arr[j]: \n                s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_norepeated = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = []\n    for i in arr:\n        if i not in x:\n            x.append(i)\n    print(sum(x))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    if n < 1:\n        return False\n    count = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            continue\n        else:\n            for j in range(i+1,n):\n                if arr[i] == arr[j]:\n                    count = count + arr[j]\n            if count == arr[i]:\n                count = 0\n            else:\n                count = count + arr[i]\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=0\n    sum=0\n    for i in arr:\n        if i not in arr[n+1:]:\n            sum=sum+i\n        else:\n            n=n+1\n    return sum\nprint(find_sum([1,2,3,4,5,6]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    my_sum = 0\n    for num in arr:\n        my_sum += num\n    return my_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    sum_of_arr = sum(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for n in arr:\n        s += n\n    return s\nprint(find_sum([1,2,3,4,5]))\nprint(find_sum([2,2,3,5,5]))\nprint(find_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    #sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [list(g) for k, g in groupby(list1)]\n    return groups\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return None\n    new_list = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if not new_list:\n            new_list.append(group)\n        else:\n            if not new_list[-1]:\n                new_list[-1] = group\n            else:\n                new_list.append(group)\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    elif len(list1) == 2:\n        if list1[0] == list1[1]:\n            return [[list1[0]], [list1[1]]]\n        else:\n            return [[list1[0]], list1[1]]\n    else:\n        if list1[0] == list1[1] and list1[1] == list1[2]:\n            return [[list1[0]], list1[1], list1[2]]\n        elif list1[0] == list1[1] and list1[2] == list1[3]:\n            return [[list1[0]], list1[1], list1[2]]\n        elif list1[0] == list1[1] and list1[3] == list1[4]:\n            return [[list1[0]], list1[1], list1[2]]\n        elif list1[1] == list1[2] and list1[2] == list1[3]:\n            return [[list1[0]], list1[1], list1[2]]\n        elif list1[1] == list1[2] and list1[3] == list1[4]:\n            return [[list1[0]], list1[1], list1[2]]\n        elif list1[2] == list1[3] and list1[3] == list1[4]:\n            return [[list1[0]], list1[1], list1[2]]\n        else:\n            return [[list1[0]], list1[1], list1[2]]\n        \ndef pack_groups(list1, size):\n    '''\n    Write a function to pack groups of consecutive elements of a given list into sublists.\n    '''\n    return list(groupby(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    d=dict()\n    for i in list1:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    \n    g=groupby(sorted(d.values()))\n    for i,j in g:\n        if j!=1:\n            print(i,end=\"\")\n            print(*[k for k,j in g],end=\"\")\n            print()\n    return list(g)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # Creating an empty list to store final output\n    list2 = []\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    count = 0\n    for k, g in groupby(list1):\n        for elem in g:\n            if elem == count:\n                count += 1\n            else:\n                result.append(elem)\n                count = elem\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    sublists = []\n    for key, group in groupby(list1):\n        sublists.append(list(group))\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    r = []\n    for k, g in groupby(list1):\n        r.append(list(g))\n    return r\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    x = [list1[0]]\n    for i in range(len(list1)):\n        if list1[i] == list1[i-1]:\n            x.append(list1[i])\n        else:\n            x.append(list1[i])\n            yield x\n            x = [list1[i]]\n    yield x\n    \nprint(list(pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9])))\nprint(list(pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])))\nprint(list(pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9])))\nprint(list(pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])))\nprint(list(pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sorted_list = sorted(list1, reverse=True)\n    result = []\n    first_item = sorted_list[0]\n    for i, item in enumerate(sorted_list):\n        if item == first_item:\n            result.append(list1[i:i+1])\n        else:\n            first_item = item\n            result.append([item])\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in range(len(list1)-1):\n        if list1[i] in counts:\n            counts[list1[i]] += 1\n        else:\n            counts[list1[i]] = 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dictionary = {}\n    my_list = list1\n    for i in my_list:\n        if i not in my_dictionary:\n            my_dictionary[i] = 1\n        else:\n            my_dictionary[i] += 1\n    return my_dictionary\nprint(unique_sublists([[1,2,3],[4,5,6],[1,1,1,1]]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    counts = Counter(list1)\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in list1:\n        dic[tuple(i)] = list1.count(i)\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    print(count)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    unique_sublists = {}\n    for i in list1:\n        temp = []\n        for j in i:\n            temp.append(tuple(j))\n        unique_sublists.update({tuple(i):len(temp)})\n    return unique_sublists\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    \n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    \n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [list1]\n    count = 0\n    unique_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in unique_count:\n            unique_count[sublist] = 1\n        else:\n            unique_count[sublist] += 1\n    return unique_count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ret_list = []\n    for i in range(1, len(test_list)+1):\n        combs = list(combinations(test_list,i))\n        for each in combs:\n            each = tuple(each)\n            ret_list.append(each)\n    return ret_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    combs = combinations(test_list,2)\n    for i in combs:\n        combinations_list.append(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # all_combinations = combinations(test_list,2)\n    # return list(all_combinations)\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                result.append((test_list[i],test_list[j]))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        for subset in combinations(test_list,i):\n            #print(subset)\n            res.append(subset)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = combinations(test_list,2)\n    final_combs = []\n    for i in combs:\n        final_combs.append(i)\n    final_combs = set(final_combs)\n    return final_combs\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Example\n    # Input: test_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    # Output: [((1, 2), (3, 4), (5, 6)), ((1, 2), (4, 5), (6,))]\n    # The output consists of tuples of the form (1, 2, 3) and (1, 2, 4).\n    # The tuples must be sorted according to the first element of each tuple.\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            s = test_list[i] + test_list[j]\n            res.add(tuple(sorted([test_list[i], test_list[j], s])))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!=j:\n                for k in range(len(test_list)):\n                    if i!=k and j!=k:\n                        print(test_list[i],test_list[j],test_list[k],test_list[i]+test_list[j]+test_list[k],sep=\",\")\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1,len(test_list)):\n        for j in combinations(test_list,i):\n            yield tuple(j)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Write a python function to check whether the count of di"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 1\n    divisor = 1\n    while divisor <= int(math.sqrt(n)) : \n        if n % divisor == 0 : \n            count = count + 2\n            if divisor == n/divisor : \n                count = count - 1\n        divisor = divisor + 1\n        if divisor > n : \n            break\n    return count\n    \nprint(count_divisors(4))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n) : \n        if n%i == 0 : \n            count += 2\n            if i!= n//i : \n                count += 1\n        i += 1\n    if count % 2 == 0 : \n        print(count)\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(1,math.ceil(math.sqrt(n))+1) :\n        if (n%i)==0:\n            count += 2\n        else :\n            count += 1\n    return count\nprint(count_divisors(5))\nprint(count_divisors(5))\nprint(count_divisors(30))\nprint(count_divisors(30))\nprint(count_divisors(4))\nprint(count_divisors(4))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 2\n    if divisor_count % 2 == 0:\n        print(True)\n    else:\n        print(False)\n        \ncount_divisors(4)\ncount_divisors(12)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(12)\ncount_divisors(14)\ncount_divisors(30)\ncount_divisors(30)\ncount_divisors(51)\ncount_divisors(60)\ncount_divisors(12)\ncount_divisors(1"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            div = div + 1\n    return div\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum = sum + i\n    if (sum == n) :\n        print(\"divisors are even\")\n    else :\n        print(\"divisors are odd\")\ndef count_di"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            count = count + 1\n    if count % 2!= 0 :\n        return True\n    else :\n        return False\ndef sum_divisors(n):\n    '''\n    Write a python function to find the sum of divisors of the given number.\n    '''\n    sum = 1\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            sum = sum + i\n    return sum\ndef is_prime(n):\n    '''\n    Write a python function to find whether the given number is prime or not.\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            count = count + 1\n    if count > 2 :\n        return False\n    else :\n        return True\ndef all_prime_divisors(n):\n    '''\n    Write a python function to find all the prime divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if (n % i == 0) and is_prime(i) :\n            count = count + 1\n    return count\ndef is_palindrome(n):\n    '''\n    Write a python function to find whether a given number is palindrome or not.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n    n_reversed_list = n_list[::-1]\n    if n_str == ''.join(n_reversed_list) :\n        return True\n    else :\n        return False\ndef print_fibonacci(n):\n    '''\n    Write a python function to print the nth Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n) :\n        c = a + b\n        print(c)\n        a = b\n        b = c\ndef is_pandigital(number):\n    '''\n    Write a python function to check whether a given number is pandigital or not.\n    '''\n    number_str = str(number)\n    if len(number_str)!= 9 :\n        return False\n    else :\n        num_set = set(number_str)\n        if len(num_set) == 9 :\n            return True\n        else :\n            return False\ndef triangle_num(n):\n    '''\n    Write a python function to calculate the number of ways to represent the given number as a triangular number.\n    '''\n    triangle_nums = []\n    for i in range(n) :\n        triangle_nums.append(i * (i + 1))\n    return len(set(triangle_nums))\ndef triangle_num2(n):\n    '''\n    Write a python function to calculate the number of ways to represent the given number as a triangular number.\n    '''\n    if n < 0 :\n        return None\n    elif n == 0 :\n        return 1\n    else :\n        return triangle_num2(n - 1) + triangle_num2(n - 2)\ndef is_triangle(n):\n    '''\n    Write a python function to check whether a given number is a triangle number or not.\n    '''\n    return n == triangle_num(n)\ndef is_triangle2(n):\n    '''\n    Write a python function to check whether a given number is a triangle number or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        return is_triangle2(n - 1) + is_triangle2(n - 2)\ndef is_triangle3(n):\n    '''\n    Write a python function to check whether a given number is a triangle number or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        return is_triangle3(n - 1) + is_triangle3(n - 2) + is_triangle3(n - 3)\ndef is_triangle4(n):\n    '''\n    Write a python function to check whether a given number is a triangle number or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        return is_triangle4(n - 1) + is_triangle4(n - 2) + is_triangle4(n - 3) + is_triangle4(n - 4)\ndef is_triangle5(n):\n    '''\n    Write a python function to check whether a given number is a triangle number or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        return is_triangle5(n - 1) + is_triangle5(n - 2) + is_triangle5(n - 3) + is_triangle5(n - 4) + is_triangle5(n - 5)\ndef is_square(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    sq = math.sqrt(n)\n    if int(sq) == sq :\n        return True\n    else :\n        return False\ndef is_square2(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        return is_square2(n - 1) + (n ** 2)\ndef is_square3(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square4(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square5(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square6(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square7(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square8(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square9(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        sq = math.sqrt(n)\n        return (sq)**2\ndef is_square10(n):\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num = n\n    divisors = []\n    while num > 0:\n        r = num % 10\n        divisors.append(r)\n        num = num // 10\n    divisors.sort()\n    if n <= 1:\n        return 0\n    else:\n        divisors = divisors[1:]\n        divisor_sum = sum(divisors)\n        if divisor_sum % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            result += sum(arr[i:j])\n            if j == len(arr):\n                break\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        if i%2!= 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    count = 0\n    for i in range(0, length):\n        if (i % 2 == 1):\n            count += arr[i]\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    # l = len(arr)\n    for i in range(1, len(arr), 2):\n        odd_sum += arr[i]\n    return odd_sum\n    # print(odd_sum)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # code here\n    sum=0\n    for i in range(0,len(arr)):\n        j=i+1\n        while j<len(arr):\n            sum+=arr[i:j]\n            j+=2\n    return sum\narr =[1,3,2,4,1]\nprint(odd_length_sum(arr))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    odd_sum = 0\n    curr_sum = 0\n    i = 0\n    while i < len(arr):\n        curr_sum = curr_sum + arr[i]\n        if i % 2 == 1:\n            odd_sum = odd_sum + curr_sum\n        i = i + 1\n    return odd_sum\n    \ndef sum_array(arr):\n    '''\n    Write a python function to find the sum of all elements in the array. https://www.geeksforgeeks.org/find-the-sum-of-all-elements-in-the-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    for ele in arr:\n        sum = sum + ele\n    return sum\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to check if the string contains any of the substrings in the given array. https://www.geeksforgeeks.org/check-if-string-contains-any-of-the-substrings-in-the-given-array/\n    '''\n    if len(string) == 0 or len(sub_string) == 0:\n        return False\n    for i in range(0, len(string) - len(sub_string) + 1):\n        if string[i:i+len(sub_string)] == sub_string:\n            return True\n    return False\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is a palindrome. A palindrome is defined as a string that can be written the same forwards and backwards. e.g.'madam',''dram', 'arra'\n    '''\n    if len(string) == 0 or len(string) == 1:\n        return True\n    return string[0] == string[-1] and is_palindrome(string[1:-1])\n    \ndef compute_nth_number(num, power):\n    '''\n    Write a python function to compute the nth number. https://www.geeksforgeeks.org/compute-nth-number/\n    '''\n    return 0\n    \ndef remove_duplicate_elements(arr):\n    '''\n    Write a python function to remove all the duplicate elements from the array. https://www.geeksforgeeks.org/remove-duplicate-elements-from-a-given-sorted-array/\n    '''\n    if len(arr) == 0:\n        return arr\n    curr = 0\n    for i in range(1, len(arr)):\n        if arr[curr]!= arr[i]:\n            curr = curr + 1\n            arr[curr] = arr[i]\n    return arr\n    \ndef even_odd_sum(arr):\n    '''\n    Write a python function to compute the sum of even numbers and odd numbers in the given array in different sub-arrays. https://www.geeksforgeeks.org/even-odd-sum-in-the-given-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    even_sum = 0\n    odd_sum = 0\n    curr_even = 0\n    curr_odd = 0\n    while curr_even < len(arr):\n        curr_even = curr_even + 1\n        even_sum = even_sum + arr[curr_even - 1]\n    while curr_odd < len(arr):\n        curr_odd = curr_odd + 1\n        odd_sum = odd_sum + arr[curr_odd - 1]\n    return even_sum + odd_sum\n    \ndef reverse(n):\n    '''\n    Write a python function to reverse the numbers in the given array. https://www.geeksforgeeks.org/reverse-the-numbers-in-the-given-array/\n    '''\n    if len(n) == 0:\n        return n\n    rev_n = 0\n    for i in range(len(n) - 1, -1, -1):\n        rev_n = rev_n * 10 + n[i]\n    return rev_n\n    \ndef add_two_numbers(num1, num2):\n    '''\n    Write a python function to add two numbers together. https://www.geeksforgeeks.org/add-two-numbers-in-python/\n    '''\n    return num1 + num2\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is a palindrome. A palindrome is defined as a string that can be written the same forwards and backwards. e.g.'madam',''dram', 'arra'\n    '''\n    if len(string) == 0:\n        return True\n    return string[0] == string[-1] and is_palindrome(string[1:-1])\n    \ndef find_substring(string, sub_string):\n    '''\n    Write a python function to find the index location of the first occurrence of the substring in the given array. https://www.geeksforgeeks.org/find-the-index-location-of-the-first-occurrence-of-the-substring-in-the-given-array/\n    '''\n    if len(string) == 0 or len(sub_string) == 0:\n        return -1\n    for i in range(0, len(string) - len(sub_string) + 1):\n        if string[i:i+len(sub_string)] == sub_string:\n            return i\n    return -1\n    \ndef is_unique_characters(string):\n    '''\n    Write a python function to check if all the characters in the given string are unique.\n    '''\n    if len(string) == 0:\n        return True\n    chars = {}\n    for char in string:\n        if char in chars:\n            return False\n        else:\n            chars[char] = True\n    return True\n    \ndef is_unique_characters_2(string):\n    '''\n    Write a python function to check if all the characters in the given string are unique.\n    '''\n    if len(string) == 0:\n        return True\n    chars = set()\n    for char in string:\n        if char in chars:\n            return False\n        else:\n            chars.add(char)\n    return True\n    \ndef is_palindrome_string_2(string):\n    '''\n    Write a python function to check if the given string is a palindrome. A palindrome is defined as a string that can be written the same forwards and backwards. e.g.'madam',''dram', 'arra'\n    '''\n    if len(string) == 0:\n        return True\n    return string[0] == string[-1] and is_palindrome_string_2(string[1:-1])\n    \ndef get_pairs(lst, k):\n    '''\n    Write a python function to get all the pairs that add up to k.\n    '''\n    if len(lst) == 0 or len(lst) == 1:\n        return []\n    pairs = []\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == k:\n                pairs.append([lst[i], lst[j]])\n    return pairs\n    \ndef is_palindrome_string_3(string):\n    '''\n    Write a python function to check if the given string is a palindrome. A palindrome is defined as a string that can be written the same forwards and backwards. e.g.'madam',''dram', 'arra'\n    '''\n    if len(string) == 0:\n        return True\n    return is_palindrome_string_3(string[1:-1]) and string[0] == string[-1]\n    \ndef get_pairs(lst, k):\n    '''\n    Write a python function to get all the pairs that add up to k.\n    '''\n    if len(lst) == 0 or len(lst) ="
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    currSum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            currSum += arr[i]\n    return currSum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    start = 0\n    end = 0\n    sum = 0\n    while end < len(arr):\n        sum += arr[end]\n        end += 2\n        if end > len(arr):\n            break\n        start = end - 1\n        sum -= arr[start]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(i for i in arr if len(i)%2!= 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculate maximum of R G and minimum of R G\n    r_max = max(r, g, b)\n    r_min = min(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # h,s,v = 0.0, 0.0, 0.0\n    # a = 255\n    # b = 255\n    # c = 255\n    # if (r == 0):\n    #     h = 360 + 0.0001\n    # elif (r == 255):\n    #     h = 360 - 0.0001\n    # else:\n    #     h = (60 * (r - min(r, g, b)) / a) % 6\n    #     if (h < 0):\n    #         h = h + 360\n    # if (g == 0):\n    #     s = 0.0001\n    # elif (g == 255):\n    #     s = 1\n    # else:\n    #     s = (60 * (g - min(r, g, b)) / g) % 60\n    # if (b == 0):\n    #     v = 0.0001\n    # elif (b == 255):\n    #     v = 1\n    # else:\n    #     v = (60 * (b - min(r, g, b)) / b) % 60\n    # h = float(h) / 60\n    # s = float(s) / 100\n    # v = float(v) / 100\n    # return (h, s, v)\n    # if (r == 0):\n    #     h = 360 + 0.0001\n    # elif (r == 255):\n    #     h = 360 - 0.0001\n    # else:\n    #     h = (60 * (r - min(r, g, b)) / a) % 6\n    #     if (h < 0):\n    #         h = h + 360\n    # if (g == 0):\n    #     s = 0.0001\n    # elif (g == 255):\n    #     s = 1\n    # else:\n    #     s = (60 * (g - min(r, g, b)) / g) % 60\n    # if (b == 0):\n    #     v = 0.0001\n    # elif (b == 255):\n    #     v = 1\n    # else:\n    #     v = (60 * (b - min(r, g, b)) / b) % 60\n    # h = float(h) / 60\n    # s = float(s) / 100\n    # v = float(v) / 100\n    # return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n    r, g, b = r/255.0, g/255.0, b/255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = ((g-b)/df)%6\n        s = df/2.0\n        v = mn\n    elif mx == g:\n        h = ((b-r)/df) + 2\n        s = df/2.0\n        v = mn\n    elif mx == b:\n        h = ((r-g)/df) + 4\n        s = df/2.0\n        v = mn\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r/255), float(g/255), float(b/255)\n    MAX = max(r, g, b)\n    MIN = min(r, g, b)\n    if MAX == MIN:\n        h = 0\n    elif MAX == r:\n        h = (60 * (((g - b)/(MAX - MIN)) + 2)) % 360\n    elif MAX == g:\n        h = (60 * (((b - r)/(MAX - MIN)) + 4)) % 360\n    elif MAX == b:\n        h = (60 * (((r - g)/(MAX - MIN)) + 2)) % 360\n    else:\n        h = 0\n    \n    s = MAX\n    v = MAX\n    \n    if r == MAX:\n        t = (g - b)/(MAX - MIN)\n    elif g == MAX:\n        t = 2 + ((b - r)/(MAX - MIN))\n    elif b == MAX:\n        t = 4 + ((r - g)/(MAX - MIN))\n    else:\n        t = 0\n    if t < 0:\n        t = 0\n    elif t > 1:\n        t = 1\n    \n    if s == 0:\n        hue = 0\n    else:\n        hue = int(hue)\n    if h < 0:\n        h = 360 + h\n    if h > 360:\n        h = h - 360\n    \n    return hue, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = (r + g + b) / 3\n    if c > 0:\n        s = (max(r, g, b) - c) / max(c, 1e-9)\n    else:\n        s = (c - min(r, g, b)) / min(c, 1e-9)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n    d = 0\n    if r>=g and r>=b:\n        if r>=255:\n            h = (60 * (r - 255) / (r - 255))\n        else:\n            h = ((60 * (255 - r)) / (255 - r)) + 360\n    elif g>r and g>b:\n        if g>=255:\n            h = 60 * (g - 255) / (g - 255)\n        else:\n            h = 60 * (255 - g) / (255 - g)\n    else:\n        if b>=255:\n            h = 60 * (b - 255) / (b - 255)\n        else:\n            h = 60 * (255 - b) / (255 - b) + 360\n    if h<0:\n        h = h + 360\n    if s == 0:\n        s = (v + max((r - g), (b - r))) / 2.5\n    if v == 0:\n        v = (s + max((r - g), (b - r))) / 2.5\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    product = 1\n    for i in list1:\n        if (i%2==0):\n            product = product * i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    prod_even = 1\n    prod_odd = 1\n    for i in range(len(even)):\n        prod_even = prod_even*even[i]\n    for i in range(len(odd)):\n        prod_odd = prod_odd*odd[i]\n    prod = prod_even + prod_odd\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # your code here\n    even = 0\n    odd = 0\n    product = 1\n    for i in range(0,len(list1)):\n        if (list1[i] % 2 == 0):\n            even += list1[i]\n        else:\n            odd += list1[i]\n    product = even*odd\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in range(0,len(list1)):\n        if i % 2 == 0:\n            even_prod *= list1[i]\n        else:\n            odd_prod *= list1[i]\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    even_mul = 1\n    odd_mul = 1\n    for i in list1:\n        if i%2 == 0:\n            even_num.append(i)\n            even_mul *= i\n        else:\n            odd_num.append(i)\n            odd_mul *= i\n    print('product of even number is : ', even_mul)\n    print('product of odd number is : ', odd_mul)\n    return even_mul, odd_mul\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_num.append(list1[i])\n        else:\n            odd_num.append(list1[i])\n    print(even_num)\n    print(odd_num)\n    print(even_num[0]*odd_num[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for number in list1:\n        if number%2 == 0:\n            even_sum = even_sum + number\n        else:\n            odd_sum = odd_sum + number\n    return even_sum,odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even = even + i\n        else:\n            odd = odd + i\n    return even*odd\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    for i in range(len(str_list)):\n        try:\n            if str_list[i].isnumeric():\n                str_list[i] = int(str_list[i])\n            else:\n                str_list[i] = float(str_list[i])\n        except:\n            str_list[i] = 'error'\n    return tuple(str_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple_int\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Split the input string\n    test_tuple = test_str.split()\n    # print(test_tuple)\n    \n    # Convert the string to tuple\n    test_tuple_int = tuple(map(int,test_tuple))\n    \n    # Return the tuple\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    #Declaring a empty list to store the integer tuple\n    integer_tuple = []\n    \n    #Getting the tuple from the string\n    tuple_str = test_str\n    \n    #Splitting the tuple based on the comma\n    for x in tuple_str.split(','):\n        #Converting to integer\n        integer_tuple.append(int(x))\n    \n    #Returning the integer tuple\n    return integer_tuple\n    \nprint(tuple_str_int('1,2,3,4,5'))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None or len(test_str) == 0:\n        return None\n    s_list = test_str.split(',')\n    if len(s_list)!= 3:\n        return None\n    try:\n        if int(s_list[0]) < 0 or int(s_list[1]) < 0 or int(s_list[2]) < 0:\n            return None\n        return tuple(int(x) for x in s_list)\n    except:\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    return tuple([int(i) for i in test_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    if test_str.startswith('('):\n        test_str = test_str[1:]\n    if test_str.endswith(')'):\n        test_str = test_str[:-1]\n    \n    _temp_str = []\n    for char in test_str:\n        if char.isdigit():\n            _temp_str.append(char)\n        else:\n            break\n    \n    return int(''.join(_temp_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == 0:\n        return 0\n    else:\n        return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i= bisect.bisect_right(a,x)\n    if i!= len(a) and a[i]!= x:\n        return i\n    elif i == len(a) and a[i]!= x:\n        return i+1\n    else:\n        return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x>a[-1]:\n        return len(a)\n    if x<a[0]:\n        return 0\n    i = bisect.bisect_right(a,x)\n    if i==len(a):\n        return i-1\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        if a[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        return len(a)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\ndef insertion_sort(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_2(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_3(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_4(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_5(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_6(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_7(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_8(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_9(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_10(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_11(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_12(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_13(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_14(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_15(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_16(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_17(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_18(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i]\n            i-=1\n        a[i+1] = x\n    return a\ndef insertion_sort_19(a):\n    '''\n    Sort the given list using the insertion sort algorithm.\n    '''\n    for j in range(1, len(a)):\n        x = a[j]\n        i = j-1\n        while i >= 0 and a[i] > x:\n            a[i+1] = a[i"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_pattern = re.compile(\"ab+\")\n    return match_pattern.findall(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = r\"ab+\"\n    print(re.findall(pattern,text))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(\"ab+b\",text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'a*b+b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{3}b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    r = re.compile(r'ab{3}')\n    mo = r.search(text)\n    if mo:\n        print('The string has an ab followed by three \"b\"s.')\n    else:\n        print('The string does not have an ab followed by three \"b\"s.')\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #find matches\n    pattern = re.compile(r'(a){3}b')\n    result = pattern.search(text)\n    #check result\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b+b+b+'\n    result = re.search(pattern,text)\n    if result:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #return re.match(r'ab*b*b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b*?b', text)\n    #return re.match(r'ab*?b*?b', text)\n    #return re.match(r'ab{3}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2,}b', text)\n    return re.match(r'ab{2,4}b', text)\n    \ndef is_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_two_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #return re.match(r'ab*b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab{3}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2,}b', text)\n    return re.match(r'ab{2,4}b', text)\n    \ndef is_match_three_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_three_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab{3}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2,}b', text)\n    return re.match(r'ab{2,4}b', text)\n    \ndef is_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_four_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_four_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab{3}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2,}b', text)\n    return re.match(r'ab{2,4}b', text)\n    \ndef is_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_five_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2}?b', text)\n    #return re.match(r'ab{2,}?b', text)\n    return re.match(r'ab{2,4}?b', text)\n    \ndef is_match_five_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab*?b', text)\n    #return re.match(r'ab{3}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2}b', text)\n    #return re.match(r'ab{2,}b', text)\n    return re.match(r'ab{2,4}b', text)\n    \ndef is_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b',\n    but that isn't followed by a 'b'.\n    '''\n    #return re.match(r'ab{2}?b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'ab*b',text)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n    \n    \ndef in_tuple(test_list, test_str):\n    '''\n    Write a function to check whether an item exists in a tuple or not.\n    '''\n    return test_str in test_list\n    \n    \ndef find_index(test_list, test_str):\n    '''\n    Write a function to find index of an item from the list.\n    '''\n    return test_list.index(test_str)\n    \n    \ndef add_tuple(a, b):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    return tuple(a[i] + b[i] for i in range(len(a)))\n    \n    \ndef tuples_sum(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the tuple.\n    '''\n    return sum(test_list)\n    \n    \ndef find_min(test_list):\n    '''\n    Write a function to find the minimum element from the tuple.\n    '''\n    return min(test_list)\n    \n    \ndef find_max(test_list):\n    '''\n    Write a function to find the maximum element from the tuple.\n    '''\n    return max(test_list)\n    \n    \ndef reverse_tuple(test_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    return test_list[::-1]\n    \n    \ndef remove_item(test_list, test_str):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    return test_list.remove(test_str)\n    \n    \ndef tuple_in_tuple(test_tuple, test_list):\n    '''\n    Write a function to check whether a tuple is a part of the other tuple.\n    '''\n    return test_tuple in test_list\n    \n    \ndef remove_tuple(test_tuple, test_list):\n    '''\n    Write a function to remove a tuple from a list.\n    '''\n    return test_list.remove(test_tuple)\n    \n    \ndef count_item(test_list, test_str):\n    '''\n    Write a function to count the occurrence of an item in a list.\n    '''\n    return test_list.count(test_str)\n    \n    \ndef find_count(test_list, test_str):\n    '''\n    Write a function to find the index of an item in the list.\n    '''\n    return test_list.index(test_str, )\n    \n    \ndef common_item(test_list1, test_list2):\n    '''\n    Write a function to find the common items between two lists.\n    '''\n    return set(test_list1) & set(test_list2)\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove the duplicate items from the given list.\n    '''\n    return list(set(test_list))\n    \n    \ndef list_length(test_list):\n    '''\n    Write a function to find the length of the list.\n    '''\n    return len(test_list)\n    \n    \ndef reverse_the_list(test_list):\n    '''\n    Write a function to reverse the list elements.\n    '''\n    return test_list[::-1]\n    \n    \ndef list_pop(test_list):\n    '''\n    Write a function to pop an element from the end of the list.\n    '''\n    return test_list.pop()\n    \n    \ndef reverse_the_list_two_ways(test_list):\n    '''\n    Write a function to reverse the list elements.\n    '''\n    return test_list.reverse()\n    \n    \ndef sort_the_list(test_list):\n    '''\n    Write a function to sort the list elements.\n    '''\n    return sorted(test_list)\n    \n    \ndef sort_the_list_two_ways(test_list):\n    '''\n    Write a function to sort the list elements.\n    '''\n    return test_list.sort()\n    \n    \ndef sort_the_list_reverse(test_list):\n    '''\n    Write a function to sort the list elements in reverse.\n    '''\n    return test_list.sort(reverse=True)\n    \n    \ndef remove_last_n_elements(test_list, n):\n    '''\n    Write a function to remove the last n elements from the list.\n    '''\n    return test_list[:-n]\n    \n    \ndef check_prime(n):\n    '''\n    Write a function to check if an element is a prime number.\n    '''\n    return n > 1 and all(n % i for i in range(2, n))\n    \n    \ndef largest_prime_factor(test_list):\n    '''\n    Write a function to find the largest prime factor of the given number.\n    '''\n    return max(test_list, key=prime_factor)\n    \n    \ndef remove_duplicates_two_ways(test_list):\n    '''\n    Write a function to remove the duplicate items from the given list.\n    '''\n    return list(set(test_list))\n    \n    \ndef common_divisor(test_list1, test_list2):\n    '''\n    Write a function to find the common divisor of the given numbers.\n    '''\n    return reduce(lambda a, b: a if a > b else b, test_list1)\n    \n    \ndef is_palindrome(test_list):\n    '''\n    Write a function to check if the list is a palindrome or not.\n    '''\n    return test_list == test_list[::-1]\n    \n    \ndef sum_of_squares(test_list):\n    '''\n    Write a function to find the sum of the squares of the numbers in the given list.\n    '''\n    return sum(i ** 2 for i in test_list)\n    \n    \ndef is_list_equal(test_list, test_list1):\n    '''\n    Write a function to check if the given list is equal to the given list.\n    '''\n    return test_list == test_list1\n    \n    \ndef remove_duplicates_set(test_set):\n    '''\n    Write a function to remove the duplicate items from the given set.\n    '''\n    return test_set.difference(test_set)\n    \n    \ndef contains(test_set1, test_set2):\n    '''\n    Write a function to check if the given set is contained in the given set.\n    '''\n    return test_set1.issubset(test_set2)\n    \n    \ndef is_set_subset(test_set, test_set1):\n    '''\n    Write a function to check if the given set is a subset of the given set.\n    '''\n    return test_set.issubset(test_set1)\n    \n    \ndef is_set_issubset(test_set1, test_set2):\n    '''\n    Write a function to check if the given set is a subset of the given set.\n    '''\n    return test_set1.issubset(test_set2)\n    \n    \ndef get_index_of(test_set, test_str):\n    '''\n    Write a function to find the index of an item in the set.\n    '''\n    return test_set.index(test_str)\n    \n    \ndef get_max_index(test_list):\n    '''\n    Write a function to find the maximum index of an item in the set.\n    '''\n    return test_list.index(max(test_list))\n    \n    \ndef max_index_of_max(test_list):\n    '''\n    Write a function to find the maximum index of the maximum item in the list.\n    '''\n    return test_list.index(max(test_list, key=lambda item: item[1]))\n    \n    \ndef get_minimum_index(test_list):\n    '''\n    Write a function to find the minimum index of an item i"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # test_str = \"Hello world\"\n    # test_list = [\"Hello\", \"world\"]\n    # test_tuple = (test_str, test_list)\n    # return test_tuple\n    return tuple(test_list) + (test_str,)\n    # if len(test_list) == 0:\n    #     return test_list\n    # return (test_str,) + tuple(test_list)\n    # return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_to_return = ()\n    for i in test_list:\n        tuple_to_return += (test_str,)\n    return tuple_to_return\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str + \",\" + \",\".join(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use list comprehension\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(i for i in test_list), tuple(i for i in test_str)\n    \n    # An alternative is to use the list comprehension\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(list(i) for i in test_list), tuple(list(i) for i in test_str)\n    \n    # An alternative is to use the list comprehension with a for-loop\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(i for i in test_list), tuple(i for i in test_str)\n    \n    # An alternative is to use the list comprehension with a for-loop\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(list(i) for i in test_list), tuple(list(i) for i in test_str)\n    \n    \n    # An alternative is to use the list comprehension with a for-loop\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(i for i in test_list), tuple(i for i in test_str)\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # An alternative is to use the map function\n    \n    # def new_tuple(test_list, test_str):\n    #     '''\n    #     Write a function to create a new tuple from the given string and list.\n    #     '''\n    #     return tuple(map(lambda i: i, test_list)), tuple(map(lambda i: i, test_str))\n    \n    \n    # A"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    return test_str, tup\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_str) == str:\n        test_str = test_str.split()\n        return tuple(test_str)\n    else:\n        test_list = list(test_list)\n        return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) == 0:\n        return test_str\n    if len(test_list) == 1:\n        return (test_str, test_list[0])\n    return (test_str, test_list[0], test_list[1])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2==0 for num in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    list1 = []\n    flag = True\n    for i in range(len(nums)):\n        if i%2==0 and nums[i]%2==0:\n            list1.append(nums[i])\n        else:\n            flag = False\n            break\n    if flag == True:\n        return list1\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position_flag = False\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_position_flag = True\n    return even_position_flag\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    arr = nums\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return True if arr[0]%2 == 0 else False\n    else:\n        return True if even_position(arr[1:]) else False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(0,len(nums)):\n        if i%2 == 0:\n            even_index.append(nums[i])\n    if len(even_index) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([True if x%2==0 else False for x in nums])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return_tup = ()\n    if type(test_tup) == tuple:\n        for i in test_tup:\n            if type(i) == tuple:\n                for j in i:\n                    if type(j) == tuple:\n                        return_tup = return_tup + (j,)\n            else:\n                return_tup = return_tup + (i,)\n    else:\n        return_tup = return_tup + (test_tup,)\n    return return_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    r = []\n    for i in test_tup:\n        if isinstance(i, tuple) == False:\n            r.append(i)\n    return tuple(r)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    a = test_tup.pop(0)\n    for i in test_tup:\n        if isinstance(i, (list,tuple)):\n            remove_nested(i)\n    return tuple(test_tup)\n    \nprint(remove_nested((1,(1,2,3),(((1,2,3),4),(5,6,7)))) )\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in test_tup:\n        if type(i) == tuple:\n            lst.append(i)\n    print(tuple(lst))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(map(lambda x: x if type(x) == tuple else (x,), test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x!= test_tup, test_tup))\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp_tup = tuple()\n    for each_tup in test_tup:\n        if type(each_tup) == tuple:\n            if len(each_tup) == 0:\n                temp_tup += each_tup\n            else:\n                remove_nested(each_tup)\n        else:\n            temp_tup += each_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # return ()\n    if type(test_tup) is tuple:\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(t for t in test_tup if t!= ())\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if len(test_tup) == 0:\n        return test_tup\n    elif len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        first_item = test_tup[0]\n        rest = remove_nested(test_tup[1:])\n        return (first_item, rest)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # count the list in input_list\n    l = []\n    count = 0\n    for i in range(len(input_list)):\n        if(isinstance(input_list[i], list)):\n            l.append(input_list[i])\n            count += 1\n    # count the list in input_list\n    return count\n    \ndef count_list2(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # count the list in input_list\n    count = 0\n    for i in range(len(input_list)):\n        if(isinstance(input_list[i], list)):\n            count += 1\n    # count the list in input_list\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #assert isinstance(input_list, list), \"Input list is not a list\"\n    count = 0\n    for x in input_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    cnt = 0\n    for i in input_list:\n        if type(i) == list:\n            cnt += 1\n    \n    return cnt\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n    # once done with the above comment, the below code has to be written\n    # return len(input_list) - sum(1 for item in input_list if type(item) == list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]>x:\n            return i\n    return len(arr)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def binarySearch(arr, x):\n        low = 0\n        high = len(arr) - 1\n        while low <= high:\n            mid = low + ((high - low) // 2)\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] > x:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    return binarySearch(arr,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lower = 0\n    upper = len(arr) - 1\n    if x > arr[upper]:\n        return upper\n    while upper >= lower:\n        mid = (upper + lower) // 2\n        if x == arr[mid]:\n            return mid\n        elif x < arr[mid]:\n            upper = mid\n        else:\n            lower = mid + 1\n    return upper\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<r:\n        mid=(l+r)//2\n        if x>arr[mid]:\n            l=mid+1\n        else:\n            r=mid\n    if arr[l]==x:\n        return l\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if x == arr[mid]:\n            end = mid -1\n        elif x > arr[mid]:\n            start = mid + 1\n        elif x < arr[mid]:\n            end = mid -1\n    if x == arr[end]:\n        return end\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            print(i)\n            break\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def binarySearch(arr,x,l,h):\n        if h>=l:\n            mid=(l+h)//2\n            if arr[mid]==x:\n                return mid\n            elif arr[mid]>x:\n                return binarySearch(arr,x,l,mid-1)\n            else:\n                return binarySearch(arr,x,mid+1,h)\n        else:\n            return -1\n    return binarySearch(arr,x,0,len(arr)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        left=0\n        right=len(arr)-1\n        mid=(left+right)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            return last(arr[:mid],x)\n        else:\n            return last(arr[mid+1:],x)\n    \nprint(last([1,2,3,4,5,6],2))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo)//2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1] < x:\n                return mid\n            hi = mid - 1\n        elif arr[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)/2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.search('^a.*b$', text)\n    if x:\n        return 'Match'\n    else:\n        return 'No Match'\ndef get_even_numbers(text):\n    '''\n    Write a function that matches the word 'even' at the start of a line and returns the line,\n    without the 'even' word.\n    '''\n    x = re.search(r\"^even\", text)\n    if x:\n        return text\n    else:\n        return None\ndef remove_even_numbers(text):\n    '''\n    Write a function that matches the word 'even' at the start of a line and returns the line,\n    without the 'even' word.\n    '''\n    x = re.sub(r\"^even\", '', text)\n    return x\ndef get_user_info(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns the name, family name, address, phone, and email as a dictionary.\n    '''\n    x = re.search(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return {'name': x.group(1), 'family': x.group(2), 'address': x.group(3), 'phone': x.group(4), 'email': x.group(5)}\n    else:\n        return None\ndef get_user_info2(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns the name, family name, address, phone, and email as a dictionary.\n    '''\n    x = re.search(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return {'name': x.group(1), 'family': x.group(2), 'address': x.group(3), 'phone': x.group(4), 'email': x.group(5)}\n    else:\n        return None\ndef get_user_info3(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns the name, family name, address, phone, and email as a dictionary.\n    '''\n    x = re.search(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return {'name': x.group(1), 'family': x.group(2), 'address': x.group(3), 'phone': x.group(4), 'email': x.group(5)}\n    else:\n        return None\ndef get_user_info4(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns the name, family name, address, phone, and email as a dictionary.\n    '''\n    x = re.search(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return {'name': x.group(1), 'family': x.group(2), 'address': x.group(3), 'phone': x.group(4), 'email': x.group(5)}\n    else:\n        return None\ndef get_phone_numbers(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns all phone numbers as a list of dictionaries, each with keys 'phone' and 'email'.\n    '''\n    x = re.findall(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return [{'phone': z.group(3), 'email': z.group(5)} for z in x]\n    else:\n        return None\ndef get_phone_numbers2(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns all phone numbers as a list of dictionaries, each with keys 'phone' and 'email'.\n    '''\n    x = re.findall(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return [{'phone': z.group(3), 'email': z.group(5)} for z in x]\n    else:\n        return None\ndef get_phone_numbers3(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns all phone numbers as a list of dictionaries, each with keys 'phone' and 'email'.\n    '''\n    x = re.findall(r\"(Name: \\S+,\\S+), (Family Name: \\S+,\\S+), (Address: \\S+,\\S+), (Phone: \\S+,\\S+), (Email: \\S+,\\S+)\", text)\n    if x:\n        return [{'phone': z.group(3), 'email': z.group(5)} for z in x]\n    else:\n        return None\ndef get_phone_numbers4(text):\n    '''\n    Write a function that matches a string that has the format:\n    Name: [A-Za-z ]+,\n    Family Name: [A-Za-z ]+,\n    Address: [A-Za-z ]+,\n    Phone: [0-9 ]+,\n    Email: [A-Za-z0-9. ]+,\n    and then returns all phone numbers as a list of dictionaries, each with keys 'phone' and 'email'.\n    '''\n    x = re.findall(r\"(Name: \\"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #first, find the substring of text that is ending in 'b'.\n    match = re.search('b', text)\n    if match:\n        return match.start()\n    else:\n        return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)(b)'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile('a.b')\n    m = pat.search(text)\n    print(m.group(0))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[a-z]+[b]')\n    m = pattern.search(text)\n    if m:\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]'\n    print(re.findall(pattern, text))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #'a' followed by anything, ending in 'b'\n    pattern = 'a.*?b'\n    #returns the first match, in this case 'a' followed by anything ending in 'b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    pattern = r\"a.*b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # return '^a.*b$'\n    return r\"^a.*(b|$)\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for x in dict:\n        total += dict[x]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for k,v in dict.items():\n        total_sum = total_sum + v\n    return total_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_items = 0\n    for item in dict.values():\n        sum_items += item\n    return sum_items\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # initialize the accumulator\n    total = 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum=0\n    for i in range(n+1):\n        if i%2!=0:\n            odd_sum+=i\n    print(odd_sum)\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    l = int(input('Enter lower bound: '))\n    r = int(input('Enter upper bound: '))\n    for i in range(l,r+1):\n        if i%2 == 1:\n            sum += i\n    print('Sum of all odd numbers from {} to {} is: {}'.format(l,r,sum))\nsum_odd(20,100)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the left limit: \"))\n    r = int(input(\"Enter the right limit: \"))\n    sum = 0\n    if l > r:\n        print(\"Invalid inputs!\")\n    else:\n        for i in range(l, r+1):\n            if i % 2!= 0:\n                sum += i\n        print(\"Sum of odd numbers in the range:\", sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 1:\n            sum += i\n    return sum\nprint(sum_odd(6))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a = n\n    b = n\n    count = 0\n    i = 0\n    while i < 20:\n        if a < b:\n            a += 1\n        else:\n            a -= 1\n        i += 1\n        if a % 2!= 0 and b % 2!= 0:\n            count += a + b\n    print(\"sum of odd numbers in the range: \",count)\n    return count\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input(\"Enter lower range:\"))\n    r=int(input(\"Enter upper range:\"))\n    if l>r:\n        print(\"Range incorrect\")\n    else:\n        sum = 0\n        for i in range(l,r+1,1):\n            if i % 2!= 0:\n                sum += i\n        print(\"Sum of odd numbers in range\",l,\"to\",r,\"is\",sum)\n        "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            a=a+i\n    return a\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2!= 0)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2!= 0:\n                sum += i\n        return sum\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2!= 0 and i % 2!= 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_twice(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 2.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 2 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3 and 5.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 5 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5_or_7_9(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3 and 5 or 7 and 9.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 3 == 0:\n                sum += i\n            if i % 2!= 0 and i % 7 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5_or_7_9_or_11_13(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3, 5 or 7 and 9 or 11 and 13.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 3 == 0:\n                sum += i\n            if i % 2!= 0 and i % 7 == 0:\n                sum += i\n            if i % 2!= 0 and i % 11 == 0:\n                sum += i\n            if i % 2!= 0 and i % 13 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5_or_7_9_or_11_13_and_19(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3, 5, 7, 9 or 11 and 13 and 19.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 3 == 0:\n                sum += i\n            if i % 2!= 0 and i % 7 == 0:\n                sum += i\n            if i % 2!= 0 and i % 11 == 0:\n                sum += i\n            if i % 2!= 0 and i % 13 == 0:\n                sum += i\n            if i % 2!= 0 and i % 19 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5_or_7_9_or_11_13_and_19_and_25(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3, 5, 7, 9 or 11 and 13 and 19 and 25.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 3 == 0:\n                sum += i\n            if i % 2!= 0 and i % 7 == 0:\n                sum += i\n            if i % 2!= 0 and i % 11 == 0:\n                sum += i\n            if i % 2!= 0 and i % 13 == 0:\n                sum += i\n            if i % 2!= 0 and i % 19 == 0:\n                sum += i\n            if i % 2!= 0 and i % 25 == 0:\n                sum += i\n        return sum\n    \ndef sum_odd_even_divisible_by_3_5_or_7_9_or_11_13_and_19_and_25_and_49(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r that are divisible by 3, 5, 7, 9 or 11 and 13 and 19 and 25 and 49.\n    '''\n    if n < 1:\n        return -1\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2 == 0 and i % 3 == 0:\n                sum += i\n            if i % 2!= 0 and i % 7 == 0:\n                sum += i\n            if i % 2!= 0 and i % 11 == 0:\n                sum += i\n            if i % 2!= 0 and i % 13 == 0:\n                sum += i\n            if i % 2!= 0 and i % 19 == 0:\n                sum += i\n            if i % 2!= 0 and i % 25 == 0:\n                sum += i\n            if i % 2!= 0 and i % 49 == 0:\n                sum += i\n        return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    \ndef _min(arr):\n    '''\n    Write a python function to find the minimum value in an array.\n    '''\n    min = arr[0]\n    for i in arr:\n        if i < min:\n            min = i\n    return min\n    \ndef _max(arr):\n    '''\n    Write a python function to find the maximum value in an array.\n    '''\n    max = arr[0]\n    for i in arr:\n        if i > max:\n            max = i\n    return max\n    \ndef _avg(arr):\n    '''\n    Write a python function to find the average of an array.\n    '''\n    sum = _sum(arr)\n    return sum/len(arr)\n    \ndef _mode(arr):\n    '''\n    Write a python function to find the mode of an array.\n    '''\n    from collections import Counter\n    count = Counter(arr)\n    temp = []\n    for i in count:\n        temp.append(count[i])\n    m = max(temp)\n    for i in range(len(arr)):\n        if temp[i] == m:\n            return arr[i]\n            \ndef _range(arr):\n    '''\n    Write a python function to find the range of an array.\n    '''\n    from collections import Counter\n    count = Counter(arr)\n    largest = max(count.keys())\n    lowest = min(count.keys())\n    return largest - lowest\n    \ndef _reverse(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    return arr[::-1]\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    for i in range(len(arr)):\n        if i==0:\n            sum = arr[0]\n        else:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # code here\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return sum(arr) + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # your code here\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffffffffffff\ndef left_rotate(n,d,s):\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x = 0\n    \n    for i in range(32):\n        if d==0:\n            x=n>>(31-i)\n        if d!=0:\n            if (i+d)>=32:\n                x=x<<1\n                x=x^(1<<i)\n            else:\n                x=x<<d\n                x=x^(1<<(32-i-d))\n    return x\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit_shift=0\n    while bit_shift<d:\n        n=n<<1\n        bit_shift+=1\n    return n&~(~0<<(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**n)-1\n    #print(mask)\n    return (mask<<d) | (n>>d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    return n\n    \ndef bit_reverse(n):\n    '''\n    Write a function that reverses the given number in binary (with no space)\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s[::-1]\n    \ndef bit_reverse_shift(n):\n    '''\n    Write a function that reverses the given number in binary (with space)\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return \"0\" + s[::-1]\n    \ndef bit_reverse_shift_two(n):\n    '''\n    Write a function that reverses the given number in binary (with space)\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return \"0\" + \" \" + s[::-1]\n    \ndef bit_reverse_shift_two_new(n):\n    '''\n    Write a function that reverses the given number in binary (with space)\n    '''\n    n = str(n)\n    n = \"0\" + n[::-1]\n    return n\n    \ndef number_binary(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_two(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_three(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_four(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_five(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_six(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_seven(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_eight(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_nine(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_ten(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_eleven(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_twelve(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_thirteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_fourteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_fifteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_sixteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_seventeen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_eighteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_nineteen(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_twenty(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_twenty_one(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\"\n    while n > 0:\n        s = s + str(n%2)\n        n = n >> 1\n    return s\n    \ndef number_binary_no_space_twenty_two(n):\n    '''\n    Write a function that converts a decimal number into its binary equivalent.\n    '''\n    s = \"\""
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    if d > 0:\n        for i in range(d):\n            n = n ^ (n >> 1)\n        return n\n    else:\n        for i in range(d):\n            n = n ^ (n << 1)\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\nprint(remove_all_spaces(' hello'))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r\"\\s+\", \" \", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # split the string by spaces\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    no_whitespace = re.sub('\\s', '', text)\n    return no_whitespace\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #start with creating a list of characters\n    mylist = list(text)\n    #then traverse the list\n    for char in mylist:\n        #check if it is whitespace\n        if char.isspace():\n            mylist.remove(char)\n    #return the new list\n    return ''.join(mylist)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = text.strip()\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y,z):\n        if i == i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y and y==z:\n        count=count+1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x == y == z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(x,y+1):\n        if(x==i and y==i and z==i):\n            count=count+1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    numbers = []\n    numbers.append(x)\n    numbers.append(y)\n    numbers.append(z)\n    numbers.sort()\n    numbers.reverse()\n    count = 0\n    for i in range(0,len(numbers)):\n        if numbers[i] == numbers[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x == y == z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x == y == z:\n        print(x,y,z,\"are equal\")\n    else:\n        print(x,y,z,\"are not equal\")\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            continue\n        count += 1\n        j = i\n        while j < len(arr) - 1 and arr[j] > arr[j + 1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j += 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # The function should return count of rotations needed\n    n = len(arr)\n    # check the case when array is already sorted\n    if (n <= 1):\n        return 0\n    # if number of rotations is 0\n    # it means array is already sorted\n    if (n == 2):\n        return 1\n    # else, keep breaking the array into 2 halves\n    left_arr = arr[:n // 2]\n    right_arr = arr[n // 2:]\n    # count the number of rotations required\n    count = 1 + count_rotation(left_arr) + count_rotation(right_arr)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < n-1:\n            if arr[i] > arr[i+1]:\n                count += 1\n            i+=1\n        return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    if len(arr) == 1:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    \n    return count + 1\n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find the longest common substring (lcs) between two strings.\n    '''\n    \n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # setting the counter as zero\n    count = 0\n    \n    # iterate through the array and for each element find the index of its next greater element\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            continue\n        else:\n            index = i + 1\n            while(index < len(arr) and arr[index] > arr[i]):\n                index += 1\n            count += 1\n    # return the count\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # base cases\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    \n    count = 0\n    first = 0\n    last = len(arr)-1\n    while(first <= last):\n        mid = (first + last)//2\n        \n        if arr[mid] > arr[last]:\n            count += 1\n            first = mid + 1\n        elif arr[mid] < arr[last]:\n            last = mid - 1\n        else:\n            first = mid + 1\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #if there are 0 elements in array then return 0\n    if len(arr) == 0:\n        return 0\n    #firstly find the middle element of the array\n    mid = len(arr)//2\n    #if the middle element is already sorted then no rotation needed, hence return 0\n    if arr[mid-1] <= arr[mid]:\n        return 0\n    #find the min element after the middle element. This is the maximum element on right side of array\n    max_after_mid = -float('inf')\n    for i in range(mid, len(arr)):\n        max_after_mid = max(max_after_mid, arr[i])\n    #find the min element on left side of the middle element. This is the maximum element on left side of array\n    min_after_mid = float('inf')\n    for i in range(0, mid):\n        min_after_mid = min(min_after_mid, arr[i])\n    #if the max element is smaller than the min element on right side then there is atleast 1 rotation.\n    #so return 1\n    if max_after_mid < min_after_mid:\n        return 1\n    #if no rotation is required then return 0\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 0\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        if arr[start] <= arr[end]:\n            start += 1\n        else:\n            count = 1\n            i = start + 1\n            while i <= end:\n                if arr[i] > arr[start]:\n                    start = i\n                    count += 1\n                else:\n                    i += 1\n            return count\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_copy = arr.copy()\n    count = 0\n    for i in range(len(arr)):\n        if arr_copy[i]!= arr[i]:\n            arr_copy[i] = arr[i]\n            arr_copy[0] = arr[0]\n            count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    assert(n > 0)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    \n    # The below code is from Gayle and Lothar (1983)\n    # sqrt_n = 1+2+...+n//2\n    # sqrt_n*sqrt_n = n*n = n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqrt_n*n\n    # sqrt_n*n = sqr"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 1):\n        return False\n    else:\n        k = int(math.sqrt(n))\n        return (k*k == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n == 0:\n    #     return False\n    # a = n // 2\n    # b = a ** 2\n    # return a == b\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if int(sqrt(n))**2 == n:\n    #     return True\n    # return False\n    '''\n    Divide the number into all the perfect squares.\n    '''\n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left)//2\n        sq = mid*mid\n        if sq == n:\n            return True\n        elif sq < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 1 :\n        return False\n    a = n\n    b = 0\n    while a > 0 :\n        b = b + a%10\n        a = a//10\n    return b*b == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # base case\n    if(n <= 0):\n        return False\n    # base case\n    if(n == 1):\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    from math import sqrt\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    assert n > 0, \"n must be positive integer\"\n    while n % 2 == 0 :\n        n /= 2\n    i = 3\n    while i * i <= n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    \n    # checking the square root\n    sqrt = int(math.sqrt(n))\n    # checking if sqrt*sqrt == n\n    if (sqrt * sqrt == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    a = int(sqrt(n))\n    b = int(n / a)\n    if a ** 2 == n or a ** 2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 1:\n        return False\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    if prod % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # \n    #def is_product_even(arr):\n    #if (len(arr) == 0):\n    #    return False\n    #return (arr[0] * arr[-1]) % 2 == 0\n    #print(arr)\n    #print(type(arr))\n    #return (arr[0] * arr[-1]) % 2 == 0\n    #print(arr)\n    #print(type(arr))\n    #return (arr[0] * arr[-1]) % 2 == 0\n    if len(arr) == 0:\n        return False\n    return (arr[0] * arr[-1]) % 2 == 0\n    #return (arr[0] * arr[-1]) % 2 == 0 and is_product_even(arr[1:-1])\n    \n    \n    \n    #return not(arr[0] * arr[-1]) % 2 == 0 and is_product_even(arr[1:-1])\n    #return not(arr[0] * arr[-1]) % 2 == 0 and is_product_even(arr[1:-1])\n    \n    #return not(arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1]\n    #return not(arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1]\n    #return not(arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0]*arr[-1]) % 2 == 0\n    \n    #return not(arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0]*arr[-1]) % 2 == 0\n    \n    #return arr[0]*arr[-1] and not(arr[0] * arr[-1]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0 and (arr[7] * arr[-8]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0 and (arr[7] * arr[-8]) % 2 == 0 and (arr[8] * arr[-9]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0 and (arr[7] * arr[-8]) % 2 == 0 and (arr[8] * arr[-9]) % 2 == 0 and (arr[9] * arr[-10]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0 and (arr[7] * arr[-8]) % 2 == 0 and (arr[8] * arr[-9]) % 2 == 0 and (arr[9] * arr[-10]) % 2 == 0 and (arr[10] * arr[-11]) % 2 == 0\n    \n    #return (arr[0] * arr[-1]) % 2 == 0 and arr[0]*arr[1] and not(arr[0] * arr[-1]) % 2 == 0 and (arr[1] * arr[-2]) % 2 == 0 and (arr[2] * arr[-3]) % 2 == 0 and (arr[3] * arr[-4]) % 2 == 0 and (arr[4] * arr[-5]) % 2 == 0 and (arr[5] * arr[-6]) % 2 == 0 and (arr[6] * arr[-7]) % 2 == 0 and (arr[7] * ar"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == None:\n        return False\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # if product of numbers in arr is even\n    if (arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]) % 2 == 0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Your code here\n    n = len(arr)\n    if n == 0: return 0\n    else:\n        return 1 if arr[0]*arr[n-1] % 2 == 0 else 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) / len(arr) % 2 == 0)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return True\n    else:\n        if arr[0]==0:\n            return False\n        else:\n            return is_product_even(arr[1:])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for i in range(0, len(lists)):\n        for j in range(i+1, len(lists)):\n            for k in range(j+1, len(lists)):\n                sublist = lists[i:j] + lists[j:k] + lists[k:]\n                sublist.sort()\n                max_sum = 0\n                for item in sublist:\n                    max_sum += item\n                result.append(max_sum)\n    return max(result)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = lists[0]\n    max_sum_index = 0\n    \n    for i in range(len(lists)):\n        if (sum(lists[i]) > sum(max_sum)):\n            max_sum = lists[i]\n            max_sum_index = i\n            \n    return max_sum, max_sum_index\n        \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #base case\n    if not lists:\n        return []\n    #initialize all values to 0\n    max_sum = 0\n    #iterate through each list in the list of lists\n    for i in range(len(lists)):\n        #find the max value and max_sum in the sublist\n        max_value = 0\n        max_sum = 0\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_value:\n                max_value = lists[i][j]\n        #if the max_value is bigger than the max_sum, update max_sum\n        if max_value > max_sum:\n            max_sum = max_value\n    #return the max_sum of all lists\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your Code Below:\n    l = len(lists[0])\n    d = {}\n    for i in range(l):\n        for j in range(len(lists)):\n            if lists[j][i] not in d:\n                d[lists[j][i]] = 1\n            else:\n                d[lists[j][i]] += 1\n    for i in range(len(lists)):\n        d = dict(sorted(d.items(),key=lambda item: item[1],reverse=True))\n        for key,value in d.items():\n            if value == l:\n                return lists[i]\n    return None\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    length_max = max(len(lists), max(len(list) for list in lists))\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    max_sum = -float(\"inf\")\n    max_sum_list = None\n    n = len(lists)\n    for i in range(n):\n        for j in range(n):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i][j]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sorted_lists = sorted(lists, key=lambda x: x[0])\n    max_sum = 0\n    for i in range(0, len(sorted_lists)):\n        max_sum = max(max_sum, sorted_lists[i][0] + sorted_lists[i][1])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total = []\n    for i in range(len(lists)):\n        total.append(sum(lists[i]))\n    total.sort(reverse=True)\n    print(total)\n    max_sum = total[0]\n    for i in range(len(total)):\n        if total[i] == max_sum:\n            return total[i]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_size = len(lists)\n    max_element = -10000\n    max_sum_element = -10000\n    \n    for i in range(0, list_size):\n        sum_element = 0\n        for j in range(0, list_size):\n            sum_element += lists[j][i]\n            if max_element < sum_element:\n                max_element = sum_element\n                max_sum_element = lists[i][j]\n    \n    return max_sum_element\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    maximum = 1\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > maximum:\n                maximum = count\n            count = 1\n    if count > maximum:\n        maximum = count\n    return maximum\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            run += 1\n        else:\n            run = 0\n        if run > max_run:\n            max_run = run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length=0\n    curr_length=0\n    prev_index=None\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_length+=1\n        else:\n            if curr_length>max_length:\n                max_length=curr_length\n            curr_length=0\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    \n    max_run = 0\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 1\n    if count > max_run:\n        max_run = count\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # recursive approach\n    # if not test_str: return 0\n    # prev_char = test_str[0]\n    # count = 1\n    # for i in range(1, len(test_str)):\n    #     if prev_char == test_str[i]:\n    #         count += 1\n    #     else:\n    #         count = 1\n    #     prev_char = test_str[i]\n    # return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None or len(test_str) == 0:\n        return 0\n    \n    count = 0\n    char_set = set(test_str)\n    for i in char_set:\n        if test_str.count(i) >= count:\n            count = test_str.count(i)\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    curr_max = 0\n    curr_max_index = 0\n    count = 0\n    for index in range(len(test_str)):\n        if test_str[index].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > curr_max:\n            curr_max = count\n            curr_max_index = index\n    \n    return curr_max_index\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count=0\n    run_char=\"\"\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if run_count==0:\n                run_count=1\n                run_char=test_str[i]\n            else:\n                run_count+=1\n                run_char=max(run_char,test_str[i])\n        else:\n            if run_count>0:\n                run_count-=1\n    return run_char\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_val = 0\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            counter += 1\n            max_val = max(max_val, counter)\n        else:\n            counter = 0\n    return max_val"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count = 1 + count\n        else:\n            count = 0\n        if count > max_run:\n            max_run = count\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return nums[0] if not nums else first_odd(nums[1:]) if nums[0] % 2 else nums[0]\n    #nums = [1,3,4,5,6]\n    nums.sort()\n    return nums[0] if not nums else first_odd(nums[1:])\n    #return nums[0] if nums else nums[1]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n        \n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = []\n    for i in nums:\n        if i%2!= 0:\n            odd.append(i)\n    return odd[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_num = None\n    for num in nums:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return odd_num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return -1\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return -1\n    \ndef first_smaller_than_second(nums):\n    '''\n    Write a python function to find the first smaller number than the second one in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return nums[i]\n    return -1\n    \ndef first_smaller_than_or_equal_to_second(nums):\n    '''\n    Write a python function to find the first smaller number than or equal to the second one in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(nums)-1):\n        if nums[i] <= nums[i+1]:\n            return nums[i]\n    return -1\n    \ndef first_greater_than_second(nums):\n    '''\n    Write a python function to find the first greater number than the second one in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            return nums[i]\n    return -1\n    \ndef first_greater_than_or_equal_to_second(nums):\n    '''\n    Write a python function to find the first greater number than or equal to the second one in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return nums[i]\n    return -1\n    \ndef count_odds_and_evens(nums):\n    '''\n    Write a python function to count the number of odds and evens in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    count_odds = 0\n    count_evens = 0\n    for num in nums:\n        if num % 2 == 0:\n            count_evens += 1\n        else:\n            count_odds += 1\n    return count_odds, count_evens\n    \ndef swap_odd_even(nums):\n    '''\n    Write a python function to swap odd and even numbers in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n    \ndef count_positive_and_negative(nums):\n    '''\n    Write a python function to count the number of positive and negative numbers in a given list of numbers.\n    '''\n    # YOUR CODE HERE\n    count_positive = 0\n    count_negative = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n        elif num < 0:\n            count_negative += 1\n    return count_positive, count_negative\n    \ndef median_odd_even(nums):\n    '''\n    Write a python function to find the median of a list of odd and even numbers.\n    '''\n    # YOUR CODE HERE\n    count_odds, count_evens = count_odds_and_evens(nums)\n    if count_odds + count_evens == 0:\n        return -1\n    elif count_odds == count_evens:\n        return (nums[count_odds//2]+nums[count_odds//2+1])/2\n    elif count_odds > count_evens:\n        return nums[count_odds//2]\n    else:\n        return nums[count_evens//2]\n    \ndef even_odd_median(nums):\n    '''\n    Write a python function to find the median of a list of even and odd numbers.\n    '''\n    # YOUR CODE HERE\n    count_odds, count_evens = count_odds_and_evens(nums)\n    if count_odds == 0:\n        return -1\n    elif count_odds + count_evens == 0:\n        return -1\n    elif count_odds == count_evens:\n        return (nums[count_odds//2]+nums[count_odds//2+1])/2\n    elif count_odds > count_evens:\n        return nums[count_odds//2]\n    else:\n        return nums[count_evens//2]\n    \ndef get_pairs(nums):\n    '''\n    Write a python function to find all pairs of an array whose sum is even.\n    '''\n    # YOUR CODE HERE\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 0:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # for num in nums:\n    #     if num%2!=0:\n    #         return num\n    # return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_numbers = list()\n    for number in nums:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((n for n in nums if n % 2), -1)\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(len(test_tup) > K):\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 3:\n        if (test_tup[0] == test_tup[1] == test_tup[2]):\n            return True\n        else:\n            return False\n    elif K == 4:\n        if (test_tup[0] == test_tup[1] == test_tup[2] == test_tup[3]):\n            return True\n        else:\n            return False\n    elif K == 5:\n        if (test_tup[0] == test_tup[1] == test_tup[2] == test_tup[3] == test_tup[4]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #print(test_tup)\n    for i in test_tup:\n        if K in i:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    elif test_tup[2] == K:\n        return True\n    elif test_tup[3] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for test in test_tup:\n        if test[1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = tuple(test_tup)\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #TO DO\n    #the way to check if it contain the k-th element.\n    #check the tuple if the list is empty, return False\n    #if not, go to the next element in the tuple and compare with the other element in the tuple until a match is found.\n    #if not match found, return False\n    #if match found, return True\n    if test_tup==():\n        return False\n    for i in range(len(test_tup)):\n        if i+1 == K:\n            return True\n        else:\n            if test_tup[i+1] == test_tup[i]:\n                continue\n            else:\n                return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if isinstance(K, str):\n            if K in test_tup:\n                return True\n            else:\n                return False\n        else:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n    except Exception as e:\n        raise e\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if len(test_tup) == K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test = (4, 6, 8, 10, 12)\n    tup1 = (1, 2, 3, 4, 5)\n    for i in range(len(test)):\n        if test[i] > tup1[i]:\n            print(\"NO\")\n            return None\n    print(\"YES\")\n    return None\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 <= test_tup2:\n        print(test_tup1, 'is smaller than', test_tup2)\n    else:\n        print(test_tup2, 'is smaller than', test_tup1)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (test_tup1 < test_tup2):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if type(test_tup1)!= type(test_tup2):\n        raise TypeError('Expected two tuples, one for each test!')\n    elif type(test_tup1) == str:\n        raise TypeError('Expected two tuples, one for each test!')\n    elif len(test_tup1)!= len(test_tup2):\n        raise ValueError('Expected two tuples of the same length, one for each test!')\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return True\n        elif test_tup1[1] < test_tup2[1]:\n            return False\n        else:\n            if test_tup1[2] > test_tup2[2]:\n                return True\n            elif test_tup1[2] < test_tup2[2]:\n                return False\n            else:\n                if test_tup1[3] > test_tup2[3]:\n                    return True\n                elif test_tup1[3] < test_tup2[3]:\n                    return False\n                else:\n                    if test_tup1[4] > test_tup2[4]:\n                        return True\n                    elif test_tup1[4] < test_tup2[4]:\n                        return False\n                    else:\n                        return True\n                    \ndef check_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[0] > test_tup2[0]:\n        return True\n    else:\n        if test_tup1[1] < test_tup2[1]:\n            return True\n        elif test_tup1[1] > test_tup2[1]:\n            return False\n        else:\n            if test_tup1[2] < test_tup2[2]:\n                return True\n            elif test_tup1[2] > test_tup2[2]:\n                return False\n            else:\n                if test_tup1[3] < test_tup2[3]:\n                    return True\n                elif test_tup1[3] > test_tup2[3]:\n                    return False\n                else:\n                    if test_tup1[4] < test_tup2[4]:\n                        return True\n                    elif test_tup1[4] > test_tup2[4]:\n                        return False\n                    else:\n                        return True\n                    \ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is equal to its corresponding element in the first tuple.\n    '''\n    if test_tup1[0]!= test_tup2[0]:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1]!= test_tup2[1]:\n            return False\n        elif test_tup1[1] == test_tup2[1]:\n            if test_tup1[2]!= test_tup2[2]:\n                return False\n            elif test_tup1[2] == test_tup2[2]:\n                if test_tup1[3]!= test_tup2[3]:\n                    return False\n                elif test_tup1[3] == test_tup2[3]:\n                    if test_tup1[4]!= test_tup2[4]:\n                        return False\n                    elif test_tup1[4] == test_tup2[4]:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_list = []\n    for i in range(len(test_tup2)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller_list.append(test_tup2[i])\n        else:\n            pass\n    return smaller_list\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n    \nprint(check_smaller(('a', 'b', 'c', 'd'), ('d', 'c', 'b', 'a')))\nprint(check_smaller(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            for i in range(len(test_tup1)):\n                if test_tup1[i] <= test_tup2[i]:\n                    print(True)\n                else:\n                    print(False)\n        else:\n            print('Error: tuple lengths are not the same')\n    else:\n        print('Error: tuple inputs are not of correct data type')\n"
    }
]