[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #create a list to store the shared elements\n    shared_elements = []\n    \n    #compare elements from each list, find matching pairs\n    for test_element1 in test_tup1:\n        for test_element2 in test_tup2:\n            if test_element1 == test_element2:\n                shared_elements.append(test_element1)\n                \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return (i)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    common_list = list(test_set1.intersection(test_set2))\n    return common_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            list1.append(i)\n    for j in test_tup2:\n        if j in test_tup1:\n            list2.append(j)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        print('Yes they are the same')\n    else:\n        print('No they are different')\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # list_1 = []\n    # list_2 = []\n    # for num1, num2 in test_tup1:\n    #     list_1.append(num1)\n    #     list_2.append(num2)\n    # print(list_1)\n    # print(list_2)\n    return list(set(test_tup1[0]) & set(test_tup2[0]))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get common elements\n    common_elements = set(test_tup1).intersection(test_tup2)\n    # return tuple\n    return tuple(common_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(\"Shared elements are: \")\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    intersection_set = test_tup1_set & test_tup2_set\n    print(intersection_set)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = test_tup1[0]\n    l2 = test_tup2[0]\n    l1_unique = list(set(l1) - set(l2))\n    l2_unique = list(set(l2) - set(l1))\n    \n    for i in l1_unique:\n        if i in l2_unique:\n            print(i, end ='')\n            \ndef similar_elements_2(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = test_tup1[0]\n    l2 = test_tup2[0]\n    l1_unique = set(l1) - set(l2)\n    l2_unique = set(l2) - set(l1)\n    \n    for i in l1_unique:\n        if i in l2_unique:\n            print(i, end ='')\n            \ndef same_letter_count(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n    \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_2(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_3(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n    \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_4(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_5(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_6(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_7(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_8(test_str1, test_str2):\n    '''\n    Write a function to count the number of occurrences of each letter.\n    '''\n    count1 = {}\n    for i in test_str1:\n        if i not in count1:\n            count1[i] = 1\n        else:\n            count1[i] += 1\n    count2 = {}\n    for i in test_str2:\n        if i not in count2:\n            count2[i] = 1\n        else:\n            count2[i] += 1\n            \n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i]:\n                print(i, count1[i], end ='')\n            else:\n                print('NOT ', end ='')\n        else:\n            print('NO', end ='')\n            \ndef same_letter_count_9(test_str1, test_str2):\n    '''\n    Write a functio"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not any(n%i == 0 for i in range(2,int(math.sqrt(n))+1))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    x = math.sqrt(n)\n    if x==int(x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #Assume it is a prime number\n    prime = True\n    #Take every number from 2 to sqrt(n)\n    for i in range(2,int(math.sqrt(n))+1):\n        #Check if n is divisible by i\n        if n%i==0:\n            prime = False\n    return prime\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while(i * i <= n):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    #if (n == 1):\n    #    return False\n    for i in range(2,int(math.sqrt(n))):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isPrime = True\n    if n == 2:\n        return False\n    elif n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n%i==0:\n                return True\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [nums[i] for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    result = []\n    while len(h) > 0:\n        result.append(hq.heappop(h))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for _ in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    ans = []\n    for i in range(n):\n        ans.append(hq.heappop(heap))\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return\n    queue=[(nums[i],i) for i in range(n)]\n    heapq.heapify(queue)\n    for i in range(n-1):\n        nums[i]=heapq.heappop(queue)[0]\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create heap\n    hp = []\n    for num in nums:\n        hq.heappush(hp, -num)\n    #find largest n-num\n    for i in range(n-1):\n        hq.heappop(hp)\n    return -hp[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return\n    h = nums[:n]\n    heapq.heapify(h)\n    for i in range(n,len(nums)):\n        if nums[i] > h[0]:\n            heapq.heappop(h)\n            heapq.heappush(h,nums[i])\n    return list(heapq.nlargest(n,h))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    q = hq.heapify(nums)\n    q = hq.heappop(q)\n    for i in range(1, n):\n        if q > hq.heappop(q):\n            hq.heappush(q, hq.heappop(q) + hq.heappop(q))\n    return list(q)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    heap=[]\n    for num in nums:\n        if len(ans)<n:\n            hq.heappush(heap,num)\n        else:\n            hq.heappushpop(heap,num)\n    while heap:\n        ans.append(hq.heappop(heap))\n    return ans\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    heap=[]\n    for num in nums:\n        if len(ans)<n:\n            hq.heappush(heap,num)\n        else:\n            hq.heappushpop(heap,num)\n    while heap:\n        ans.append(hq.heappop(heap))\n    return ans\n    \ndef heap_queue_largest_indices(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    heap=[]\n    for i in range(len(nums)):\n        if len(ans)<n:\n            hq.heappush(heap,(nums[i],i))\n        else:\n            hq.heappushpop(heap,(nums[i],i))\n    while heap:\n        ans.append(hq.heappop(heap)[1])\n    return ans\n    \ndef heap_queue_smallest_indices(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    heap=[]\n    for i in range(len(nums)):\n        if len(ans)<n:\n            hq.heappush(heap,(nums[i],i))\n        else:\n            hq.heappushpop(heap,(nums[i],i))\n    while heap:\n        ans.append(hq.heappop(heap)[1])\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        print('length of nums is less than n')\n        return\n    hq.heapify(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # def is_power_of_two(x):\n    #     return not x & (x-1)\n    if x > 1:\n        return (x & (x-1)) == 0\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert x >= 0, \"Inputs must be greater than or equal to 0\"\n    assert x < 256, \"Inputs must be less than 256\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #this is not the correct way to solve this problem\n    while(x % 2 == 0):\n        x = x // 2\n    return (x == 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return 1 if x%2==0 else 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    result = False\n    if x & (x-1) == 0:\n        result = True\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>1:\n        i=1\n        while x>1:\n            if x%2==0:\n                x=x/2\n            else:\n                return False\n            i+=1\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    import re\n    result = re.findall(r'\\b\\w{4}\\b',text)\n    print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('\\w+', text)\n    print(result)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    return re.findall(\"[A-Za-z]{4,}\", text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r\"\\w+\", text)\n    return (words)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for w in text.split():\n        if len(w) >= 4:\n            result.append(w)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n    \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    result = []\n    for word in text.split(' '):\n        if len(word) >= 2:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w+', text, flags=re.I)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b[a-z]+[a-zA-Z0-9_\\s]{4,}[a-zA-Z0-9_\\s]{1,}\\b',text)\n    return result\n    \ndef find_word_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b[a-zA-Z0-9_\\s]{4,}\\b',text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'[a-zA-Z]+')\n    matches = pattern.finditer(text)\n    return \" \".join([match.group(0) for match in matches if len(match.group(0))>4])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums = nums\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x**2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i]**2)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for n in nums:\n        yield n*n\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #pass\n    def rotate(string, left_rotation, right_rotation): \n        #pass\n        #return string\n        if left_rotation>=right_rotation:\n            return string\n        else:\n            if len(string)==1:\n                return string\n            else:\n                if left_rotation%2==0:\n                    left_rotation = left_rotation//2\n                    return rotate(string[1:],left_rotation,right_rotation)\n                else:\n                    left_rotation = (left_rotation+1)//2\n                    return rotate(string[1:],left_rotation,right_rotation)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # the char map in which we will perform the rotation\n    map = {} \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    dict_str = dict()\n    num_rotations = 0\n    for ch in str:\n        if dict_str.get(ch) is None:\n            dict_str[ch] = 1\n        else:\n            dict_str[ch] += 1\n    \n    print(dict_str)\n    \n    for ch, count in dict_str.items():\n        if count % 2 == 1:\n            num_rotations += 1\n    return num_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import collections\n    counts = collections.Counter(str)\n    rotations = 0\n    for k in counts:\n        if counts[k]%2==1:\n            rotations += 1\n    return rotations\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    while(len(str) > 0 and str == str[::-1]):\n        count += 1\n        str = str[1:]\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    #print(length)\n    check_dict = {}\n    for i in range(length):\n        check_dict[str[i]] = i\n    #print(check_dict)\n    start = 0\n    end = length\n    ans = -1\n    while start < end:\n        mid = (start+end)//2\n        if mid in check_dict:\n            ans = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ans\n    \ndef find_Rotations_2(str):\n    length = len(str)\n    #print(length)\n    check_dict = {}\n    for i in range(length):\n        check_dict[str[i]] = i\n    #print(check_dict)\n    start = 0\n    end = length\n    ans = -1\n    while start < end:\n        mid = (start+end)//2\n        if mid in check_dict:\n            ans = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ans\n    \n    \nif __name__ == \"__main__\":\n    print(find_Rotations('abcdefghi'))\n    print(find_Rotations_2('abcdefghi'))\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Idea: The key concept is to maintain a running window. If the current character is not present, we need to remove the last character from the window.\n    # If the current character is present, we need to check the character to the left side. If the character is smaller than the current window, then we can either remove the leftmost character or the character to the left.\n    # If the character to the left is greater than the current window, then we can either remove the leftmost character or the character to the left.\n    \n    # create a dictionary\n    rotate_dict = dict()\n    \n    # create an array\n    array = []\n    \n    # iterate through the string\n    for i in range(len(str)):\n        \n        # check if the character is in dictionary\n        if str[i] in rotate_dict:\n            \n            # if present then check the left side\n            if str[i] < rotate_dict[str[i]]:\n                array.remove(rotate_dict[str[i]])\n                \n            # if present and left side is greater than the current window\n            if str[i] > rotate_dict[str[i]]:\n                rotate_dict[str[i]] = str[i]\n                array.append(rotate_dict[str[i]])\n        \n        # if character is not present in dictionary\n        else:\n            \n            # if present then check the left side\n            if str[i] < rotate_dict[str[i]]:\n                array.remove(rotate_dict[str[i]])\n                \n            # if present and left side is greater than the current window\n            if str[i] > rotate_dict[str[i]]:\n                rotate_dict[str[i]] = str[i]\n                array.append(rotate_dict[str[i]])\n        \n        # create an array and extend the array\n        array.sort()\n        array.extend([None]*(len(str) - i - 1))\n        \n        # return the size of array\n        return len(array)\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a string using only a number of consecutive chars.\n    new_str = ''\n    for i in range(len(str)):\n        new_str += str[i]\n    # If the new_str is same as the original str, we can return 0.\n    if new_str == str:\n        return 0\n    # Convert to list.\n    new_str = list(new_str)\n    # Create an array to track all the rotation-values.\n    rotations = []\n    # Iterate all possible rotations.\n    for i in range(len(new_str)):\n        # Iterate over the string again.\n        for j in range(len(new_str)):\n            # If the original string is the same after the rotation, return 1.\n            if new_str == str:\n                return 1\n            # If the string is the same after the rotation, add 1 to the rotation-value array.\n            if new_str[j] == new_str[i]:\n                rotations.append(1)\n                new_str = list(new_str)\n                new_str.pop(j)\n                new_str = ''.join(new_str)\n                break\n    # If there is only one rotation, return 1.\n    if len(rotations) == 1:\n        return 1\n    # If there is more than one rotation, return the min rotation-value.\n    return min(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def get_rotation(string, target):\n        res = 0\n        while string!= target:\n            res += 1\n            string = string[1:] + string[0]\n        return res\n    \n    return get_rotation(str, str)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=[]\n    \n    for i in range(len(s)):\n        if s[i]!=ch:\n            l.append(s[i])\n    \n    return \"\".join(l)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    res = s.replace(ch, \"\")\n    res = res[1:-1]\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s[0:s.index(ch)] + s[s.index(ch)+1:]\n    \nif __name__ == \"__main__\":\n    s = 'welcome'\n    ch = 'w'\n    print(\"Input string:\", s)\n    print(\"Input character:\", ch)\n    print(\"Output:\", remove_Occ(s, ch)"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = list(s) \n    l.remove(ch) \n    l.remove(ch) \n    return ''.join(l) \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    while i<len(s):\n        if s[i] == ch:\n            s = s[:i]+s[i+1:]\n            i-=1\n            break\n        i+=1\n    i = len(s)-1\n    while i>=0:\n        if s[i] == ch:\n            s = s[:i]+s[i+1:]\n            i-=1\n            break\n        i-=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'') \n  \ns = \"Anuj is the best programmer\"\n  \n  \nprint(remove_Occ(s,'i')) \nprint(remove_Occ(s,'i')) \nprint(remove_Occ(s,'i')) \nprint(remove_Occ(s,'i')) "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n    if count == 0:\n        return s\n    else:\n        return s[count:] + s[:count]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    list=s.split(ch)\n    s=\"\".join(list[1:])+\"\".join(list[0:1])\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort_by_row(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == []:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j == 0:\n                col = M[i][j]\n            else:\n                col = col + M[i][j]\n        \n        for j in range(len(M[0])):\n            if j == 0:\n                row = M[i][j]\n            else:\n                row = row + M[i][j]\n        \n        if col <= row:\n            continue\n        else:\n            for j in range(len(M[0])):\n                M[i][j] = M[i][j+1]\n            M[i][-1] = 0\n            \n    return M\n        \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m, n = len(M), len(M[0])\n    for i in range(m):\n        row_sum = sum([M[i][j] for j in range(n)])\n        j = i\n        while j < m and row_sum < M[j][0]:\n            M[i], M[j] = M[j], M[i]\n            row_sum = sum([M[i][j] for j in range(n)])\n            j += 1\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    \n    for c in range(C-1):\n        # If the current column is sorted already,\n        # simply continue to the next column\n        if M[0][c] <= M[0][c+1]:\n            continue\n        \n        # Store the column index in a variable\n        col_idx = c\n        \n        # Start a loop to move the row indexes in ascending order\n        for row_idx in range(1, R):\n            # Keep moving the column index one by one if it is not sorted\n            if M[row_idx][col_idx] > M[row_idx-1][col_idx]:\n                M[row_idx], M[row_idx-1] = M[row_idx-1], M[row_idx]\n                col_idx = c\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # print(M)\n    # matrix = list()\n    #\n    # for row in range(len(M)):\n    #     row_list = list()\n    #     for column in range(len(M[row])):\n    #         row_list.append(M[row][column])\n    #     matrix.append(row_list)\n    #\n    # matrix.sort(key = lambda x: x[0])\n    #\n    # for i in range(len(matrix)):\n    #     for j in range(len(matrix[i])):\n    #         matrix[i][j] = matrix[i][j] % 20\n    #\n    # return matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Since we are not allowed to modify the original matrix, we need to allocate a new matrix\n    # If you don't do this, you'll get a runtime error because you are modifying the variable 'M'\n    # M = [[1,1],[2,2]]\n    rows, cols = len(M), len(M[0])\n    new_M = [[0] * cols for _ in range(rows)]\n    # Since we are not allowed to modify the original matrix, we need to allocate a new matrix\n    # If you don't do this, you'll get a runtime error because you are modifying the variable 'new_M'\n    # new_M = [[0] * cols for _ in range(rows)]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    # return sorted_matrix\n    row_sum = []\n    for i in range(len(matrix)):\n        row_sum.append(sum(matrix[i]))\n    row_sum.sort()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if sum(matrix[i]) == row_sum[i]:\n                matrix[i][j] = 0\n                continue\n            matrix[i][j] = 1\n    return matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = sum(M, [])\n    sorted_idxs = sorted(range(len(sums)), key=lambda k: sums[k])\n    sorted_M = []\n    for k in sorted_idxs:\n        sorted_M.append(M[k])\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    import numpy as np\n    \n    if not M:\n        return []\n    \n    row_sums = []\n    for row in M:\n        row_sum = 0\n        for num in row:\n            row_sum += num\n        row_sums.append(row_sum)\n    \n    row_sums = np.array(row_sums)\n    row_sums = np.argsort(row_sums)\n    \n    M = np.array(M)\n    M = M[row_sums,:]\n    \n    return M.tolist()\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h*b)/3\n    print(\"Volume of the Trianprism: \",volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    from math import sqrt\n    a = l/2\n    b = b/2\n    h = h/2\n    V = (a*b*h)\n    print('The volume of the prism is : {}'.format(V))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    s=(l+b+h)/2\n    V=s*(s-l)*(s-b)*(s-h)\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #defining the formula for the volume\n    V= (1/6)*l*b*h \n    print(\"The volume of the prism is : \",V)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*h*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a,b,c,=l,b,h\n    return a*b*c\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    print('Volume of the triangular prism:',volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    volume = l*h*b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a,b,h = map(float,(l,b,h))\n    V = a * b * h/3\n    return V\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    test_text = 'aBCdEf_GHiJkLmnoP'\n    \n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.finditer(test_text)\n    \n    for match in matches:\n        print(match)\n    \n    for match in matches:\n        print(match.group())\n    \n    for match in matches:\n        print(match.group(0))\n    \n    for match in matches:\n        print(match.start(), match.end(), match.span())\n        \n    for match in matches:\n        print(match.group(1), match.start(), match.end(), match.span())\n        \n    for match in matches:\n        print(match.group(), match.start(), match.end(), match.span())\n    \n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return re.findall(r'[a-z]+_[a-z]', text)\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return True if re.findall(pattern, text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]+_[a-z]+',text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+_[a-z]+$',text)\ndef text_endswith_dot(text):\n    '''\n    Write a function that returns true if the input string ends with a period, false otherwise.\n    '''\n    return re.search('\\.$',text)\ndef text_starts_with_a_space(text):\n    '''\n    Write a function that returns true if the input string starts with a space, false otherwise.\n    '''\n    return re.search('^\\s',text)\ndef text_ends_with_a_space(text):\n    '''\n    Write a function that returns true if the input string ends with a space, false otherwise.\n    '''\n    return re.search('\\s$',text)\ndef text_ends_with_period(text):\n    '''\n    Write a function that returns true if the input string ends with a period, false otherwise.\n    '''\n    return re.search('\\.',text)\ndef text_has_at_least_one_space(text):\n    '''\n    Write a function that returns true if the input string has at least one space, false otherwise.\n    '''\n    return re.search('\\s',text)\ndef text_has_no_space(text):\n    '''\n    Write a function that returns true if the input string has no space, false otherwise.\n    '''\n    return re.search('\\s',text)\ndef text_has_no_non_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has no non-alphanumeric characters, false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]',text)\ndef text_has_at_least_one_non_alphanumeric_character(text):\n    '''\n    Write a function that returns true if the input string has at least one non-alphanumeric character, false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]',text)\ndef text_is_empty(text):\n    '''\n    Write a function that returns true if the input string is empty, false otherwise.\n    '''\n    return not re.search('\\w',text)\ndef text_has_lowercase_letter_followed_by_two_non_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has at least two non-alphanumeric characters followed by a lowercase letter, false otherwise.\n    '''\n    return re.search('^[a-z][^a-z0-9]{2}$',text)\ndef text_has_uppercase_letter_followed_by_two_non_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has at least two non-alphanumeric characters followed by a uppercase letter, false otherwise.\n    '''\n    return re.search('^[A-Z][^A-Z0-9]{2}$',text)\ndef text_has_only_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has only alphanumeric characters, false otherwise.\n    '''\n    return re.search('^[a-zA-Z0-9]*$',text)\ndef text_has_2_non_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has at least 2 non-alphanumeric characters, false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]{2}',text)\ndef text_has_3_or_more_non_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has at least 3 non-alphanumeric characters, false otherwise.\n    '''\n    return re.search('[^a-zA-Z0-9]{3}',text)\ndef text_has_at_least_3_alphanumeric_characters(text):\n    '''\n    Write a function that returns true if the input string has at least 3 alphanumeric characters, false otherwise.\n    '''\n    return re.search('[a-zA-Z0-9]{3}',text)\ndef text_is_one_of(text,possibilities):\n    '''\n    Write a function that returns true if the input string is one of the given possibilities, false otherwise.\n    '''\n    return re.search('|'.join(possibilities),text)\ndef text_has_at_least_one_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at least one of the given possibilities, false otherwise.\n    '''\n    return re.search('^'+'|'.join(possibilities)+'$',text)\ndef text_has_no_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has none of the given possibilities, false otherwise.\n    '''\n    return re.search('^(?!'+'|'.join(possibilities)+')',text)\ndef text_has_at_most_one_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at most one of the given possibilities, false otherwise.\n    '''\n    return re.search('(?<!'+'|'.join(possibilities)+')'+'|'.join(possibilities),text)\ndef text_has_all_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has all of the given possibilities, false otherwise.\n    '''\n    return re.search('^(?!'+'|'.join(possibilities)+')',text)\ndef text_has_at_least_one_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at least one of the given possibilities, false otherwise.\n    '''\n    return re.search('(?<!'+'|'.join(possibilities)+')'+'|'.join(possibilities),text)\ndef text_has_no_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has none of the given possibilities, false otherwise.\n    '''\n    return re.search('(?!'+'|'.join(possibilities)+')'+'|'.join(possibilities),text)\ndef text_has_at_most_one_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at most one of the given possibilities, false otherwise.\n    '''\n    return re.search('(?<!'+'|'.join(possibilities)+')'+'|'.join(possibilities),text)\ndef text_has_2_or_more_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at least 2 of the given possibilities, false otherwise.\n    '''\n    return re.search('(?<!'+'|'.join(possibilities)+')'+'|'.join(possibilities)+'(?!.*'+'|'.join(possibilities)+')',text)\ndef text_has_no_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has none of the given possibilities, false otherwise.\n    '''\n    return re.search('(?!'+'|'.join(possibilities)+')'+'|'.join(possibilities),text)\ndef text_has_at_least_two_of_the_following_possibilities(text,possibilities):\n    '''\n    Write a function that returns true if the input string has at least 2 of the given possibilities"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_+[a-z]+$',text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]+_[a-z]+$', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r\"^[a-z]+$\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    lowercase = re.compile('[a-z]+')\n    match = lowercase.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]+_[a-z]*', text)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) is not int or a <= 0:\n        raise TypeError\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return a ** 2\n    \ndef cube_volume(a):\n    '''\n    Write a function that returns the volume of a cube given its side length as input.\n    '''\n    return a ** 3\n    \ndef cube_surface_area(a):\n    '''\n    Write a function that returns the surface area of a cube given its side length as input.\n    '''\n    return 6 * a ** 2\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function that returns the area of a rectangle given its length and width as input.\n    '''\n    return a * b\n    \ndef rectangle_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its length and width as input.\n    '''\n    return a + b + a + b\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function that returns the area of a triangle given its base and height as input.\n    '''\n    return (a + b + c) / 2\n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function that returns the perimeter of a triangle given its base and height as input.\n    '''\n    return a + b + c\n    \ndef circle_area(r):\n    '''\n    Write a function that returns the area of a circle given its radius as input.\n    '''\n    return 3.14 * (r**2)\n    \ndef circle_circumference(r):\n    '''\n    Write a function that returns the circumference of a circle given its radius as input.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == 0:\n        return 0\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string.split(\" \")\n    s2 = list(string)\n    s3 = set(s2)\n    s4 = []\n    for i in s1:\n        if i in s3:\n            s4.append(i)\n    print(s4)\n    return s4\n    \nif __name__ == '__main__': \n    string = \"hello how are you doing\"\n    str_to_list(string"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = [ ]\n    for ch in string: \n        if ch not in string: \n            lst.append(ch)\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a = list(string)\n    b = list(string)\n    for i in a:\n        if i in b:\n            b.remove(i)\n    c = ''.join(map(str, b))\n    return c\nif __name__ == '__main__':\n    string = input()\n    result = str_to_list(string)\n    print(result"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list1 = list(string)\n    for i in string:\n        if i in string:\n            list1.remove(i)\n    return \"\".join(list1)\n    \ndef str_to_list(string): \n    '''\n    Write a function to find the longest common substring in the two strings.\n    '''\n    longest_common_substring = \"\"\n    for i in range(len(string)-1):\n        for j in range(len(string)-1):\n            if string[i] == string[j] and len(string[i:j+1])>len(longest_common_substring):\n                longest_common_substring = string[i:j+1]\n    return longest_common_substring\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [c for c in string if c not in string.lower()]\nstring = input()\nstring = str_to_list(string)\nif len(string) == 0:\n    print(\"No common characters\")\nelse:\n    print(\"Common characters:\", end=\" \")\n    for i in string:\n        print(i, end=\" \""
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    len1 = len(string)\n    list1 = []\n    list2 = list(string)\n    for i in range(len1):\n        if string[i] not in list2:\n            list1.append(string[i])\n        else:\n            pass\n    str2 = \"\"\n    for i in range(len1):\n        if string[i] not in list2:\n            str2 += string[i]\n        else:\n            pass\n    return str2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_one = string\n    string_two = string\n    lst_one = list(string_one)\n    lst_two = list(string_two)\n    flag = 0\n    for i in range(len(lst_two)):\n        for j in range(len(lst_one)):\n            if lst_two[i]==lst_one[j]:\n                flag = 1\n                break\n        if flag == 0:\n            lst_one.pop(j)\n            flag = 0\n    return lst_one\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new = []\n    for char in string:\n        if char not in string:\n            new.append(char)\n    return new\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    for i in string:\n        if i not in string:\n            list1.append(i)\n    return list1\ndef remove_char(char,str1): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    for i in str1:\n        if i!=char:\n            list1.append(i)\n    return \"\".join(list1) \n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string[0:NO_OF_CHARS]\n    second_string = string[NO_OF_CHARS:]\n    return first_string, second_string\n    # return [char for char in string if char not in second_string]\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numbers = []\n    for num in arraynums:\n        if num not in numbers:\n            numbers.append(num)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return list(set(arraynums)) == arraynums\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        if arraynums[i] in arraynums[i+1:n]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for x in arraynums:\n        if arraynums.count(x) > 1:\n            return True\n    return False\n    "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('Testing duplicate')\n    result = has_duplicates(arraynums)\n    if result:\n        print('Success!')\n    else:\n        print('Failure!')\n        \ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('Testing duplicate 2')\n    result = has_duplicates_2(arraynums)\n    if result:\n        print('Success!')\n    else:\n        print('Failure!')\n    \ndef test_duplicate_3(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('Testing duplicate 3')\n    result = has_duplicates_3(arraynums)\n    if result:\n        print('Success!')\n    else:\n        print('Failure!')\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    isduplicate = False\n    for index in range(len(arraynums)):\n        for index2 in range(index+1, len(arraynums)):\n            if arraynums[index] == arraynums[index2]:\n                isduplicate = True\n                break\n        if isduplicate:\n            break\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = {}\n    for i in arraynums:\n        if i in arr:\n            return True\n        else:\n            arr[i] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) > len(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Using a for loop\n    for i in range(len(x)):\n        if x[i]=='#':\n            # print(f\"found at index {i}\")\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3:\n        return \"Woodball\"\n    elif x == 5:\n        return \"Woodball\"\n    elif x == 7:\n        return \"Woodball\"\n    elif x == 11:\n        return \"Woodball\"\n    elif x == 13:\n        return \"Woodball\"\n    elif x == 17:\n        return \"Woodball\"\n    elif x == 19:\n        return \"Woodball\"\n    elif x == 23:\n        return \"Woodball\"\n    elif x == 29:\n        return \"Woodball\"\n    elif x == 31:\n        return \"Woodball\"\n    elif x == 37:\n        return \"Woodball\"\n    elif x == 41:\n        return \"Woodball\"\n    elif x == 43:\n        return \"Woodball\"\n    elif x == 47:\n        return \"Woodball\"\n    elif x == 53:\n        return \"Woodball\"\n    elif x == 59:\n        return \"Woodball\"\n    elif x == 61:\n        return \"Woodball\"\n    elif x == 67:\n        return \"Woodball\"\n    elif x == 71:\n        return \"Woodball\"\n    elif x == 73:\n        return \"Woodball\"\n    elif x == 79:\n        return \"Woodball\"\n    elif x == 83:\n        return \"Woodball\"\n    elif x == 89:\n        return \"Woodball\"\n    elif x == 97:\n        return \"Woodball\"\n    else:\n        return \"Not Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 77: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 0 or x == -1 or x == -2: \n        return \"Yes\"\n    else: \n        return \"No\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x == 18) or (x == 29) or (x == 27) or (x == 20)\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2187: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 2:\n        if (x[0] == 'B' and x[1] == 'O') or (x[0] == 'W' and x[1] == 'O'):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = x % 10\n    b = x % 100\n    c = x % 1000\n    d = x % 10000\n    e = x % 100000\n    return (a == 9 and b!= 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 8 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 7 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 6 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 5 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 4 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 3 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 2 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 1 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a == 0 and b == 20 and e!= 20 and d!= 20 and c!= 20 and e!= 20 and b == 20) or (a!= 20 and b!= 20 and c!= 20 and d!= 20 and e!= 20 and f!= 20 and g!= 20 and h!= 20 and i!= 20 and j!= 20 and k!= 20 and l!= 20 and m!= 20 and n!= 20 and o!= 20 and p!= 20 and q!= 20 and r!= 20 and s!= 20 and t!= 20 and u!= 20 and v!= 20 and w!= 20 and x!= 20 and y!= 20 and z!= 20)\n    "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # writing first 2 pattern of woodall\n    if x<=100: \n        if x%3==0:\n            return True \n        else:\n            return False\n    else: \n        if x%5==0: \n            return True\n        else:\n            return False\n        \n        "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 36) or (x == 576):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return str(num)[::-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        d = num % 10\n        rev = (rev * 10) + d\n        num = num // 10\n    return rev == num\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if(rev(num)):\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    num = str(num)\n    rev = num[::-1]\n    if num == rev:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        rev_num = (rev_num*10) + (num%10)\n        num = num//10\n    if num == rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while (num>0):\n        rem = num%10\n        reverse = (reverse*10)+rem\n        num = num//10\n    return (reverse == num)\n    \ndef rev2(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while (num>0):\n        rem = num%10\n        reverse = (reverse*10)+rem\n        num = num//10\n    return reverse == num\n    \ndef rev3(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(''.join(reversed(str(num))))\n    \ndef rev4(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #swap the order\n    num = str(num)\n    num = num[::-1]\n    return int(num) == int(num[::-1])\n    \ndef rev5(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(''.join(reversed(str(num))))\n    \ndef rev6(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #swap the order\n    num = str(num)\n    if len(num)%2 == 0:\n        #Even\n        return int(num) == int(''.join(reversed(str(num))))\n    else:\n        #Odd\n        num = num[:-1]\n        return int(num) == int(''.join(reversed(str(num))))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    for i in range(len(num)-1,-1,-1):\n        num = num + num[i]\n    return int(num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num%10 == 0:\n        return rev(num//10)\n    else:\n        return num%10 + rev(num//10)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    # print(\"The length of the number is: \", length)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        remainder = num % 10\n        rev_num = (rev_num * 10) + remainder\n        num = int(num / 10)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num!= 0):\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num = num // 10\n    return (rev_num)\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(len(arr)) :\n        if max_num == -1 :\n            max_num = arr[i]\n        else :\n            if max_num < arr[i] :\n                max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_number = -1\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > max_number:\n                max_number = arr[i] + arr[j]\n    return max_number\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    lst = list(map(int,arr))\n    \n    n = len(lst)\n    max_num = 0\n    for i in range(1, n):\n        sum1 = 0\n        for j in range(i, n):\n            sum1 = sum1 + lst[j]\n        if max_num < sum1:\n            max_num = sum1\n        \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Number = -99\n    for i in arr :\n        if i > Max_Number :\n            Max_Number = i\n    return Max_Number\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1,10) :\n        for j in range(1,10) :\n            for k in range(1,10) :\n                for l in range(1,10) :\n                    num = i*100+j*10+k*1+l\n                    if num > max_num :\n                        max_num = num\n    print(\"The maximum possible number is:\", max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr:\n        if i > max_num :\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -99999999999\n    for i in range(len(arr)) :\n        if (max < arr[i]) :\n            max = arr[i]\n    return max\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -99999999999\n    if (len(arr) == 1) :\n        return arr[0]\n    for i in range(len(arr)) :\n        if (max < arr[i]) :\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = max(arr)\n    print(Max)\n    return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = arr[0]\n    max_num = []\n    for i in range(1, n):\n        if(arr[i] < arr[i-1]):\n            max = arr[i]\n            max_num = []\n        elif(arr[i] == max):\n            max_num.append(arr[i])\n    return max\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x==0 and y==0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n    \n    \nprint(opposite_Signs(3, -2)) #-> True\nprint(opposite_Signs(-1, -2)) #-> True\nprint(opposite_Signs(2, -2)) #-> False\nprint(opposite_Signs(-4, 1)) #-> False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0 and y * x < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y > 0 and -x*y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0) or (x > 0 and y < 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x == -y\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    if x>0 and y<0:\n        return True\n    if x==0 and y==0:\n        return False\n    else:\n        return False\nprint(opposite_Signs(7,-7)) # True\nprint(opposite_Signs(-6,-6)) # False\nprint(opposite_Signs(-7,-6)) # True\nprint(opposite_Signs(-6,7)) # False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #x = -11\n    #y = -11\n    if x == -1 and y == -1:\n        return True\n    elif x == 1 and y == 1:\n        return True\n    elif x == 1 and y == -1:\n        return False\n    elif x == -1 and y == 1:\n        return False\n    elif x == y:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Using bitwise operators:\n    if x&(1<<31):\n        if y&(1<<31):\n            return 1\n        else:\n            return -1\n    else:\n        if y&(1<<31):\n            return -1\n        else:\n            return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagon = 1\n    while n > 0:\n        octagon = octagon + (n**(1/3))\n        n = n - 1\n    return octagon\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n + 3) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #Base case\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    else:\n        return is_octagonal(n-1) + 8*n - (n+2)*(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0: return 0\n    if n == 0: return 1\n    oct = 0\n    for i in range(1,n+1):\n        oct = oct + (8*i - (8*i**2 - 3*i))\n    return oct\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(1.25*(n**2)-.5*n)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_numbers = [1]\n    n = len(oct_numbers)\n    oct_numbers.append(oct_numbers[-1] + 3)\n    oct_numbers.append(oct_numbers[-1] + 5)\n    oct_numbers.append(oct_numbers[-1] + 7)\n    oct_numbers.append(oct_numbers[-1] + 9)\n    oct_numbers.append(oct_numbers[-1] + 11)\n    oct_numbers.append(oct_numbers[-1] + 13)\n    oct_numbers.append(oct_numbers[-1] + 15)\n    oct_numbers.append(oct_numbers[-1] + 17)\n    oct_numbers.append(oct_numbers[-1] + 19)\n    oct_numbers.append(oct_numbers[-1] + 21)\n    oct_numbers.append(oct_numbers[-1] + 23)\n    oct_numbers.append(oct_numbers[-1] + 25)\n    oct_numbers.append(oct_numbers[-1] + 27)\n    oct_numbers.append(oct_numbers[-1] + 29)\n    oct_numbers.append(oct_numbers[-1] + 31)\n    oct_numbers.append(oct_numbers[-1] + 33)\n    oct_numbers.append(oct_numbers[-1] + 35)\n    oct_numbers.append(oct_numbers[-1] + 37)\n    oct_numbers.append(oct_numbers[-1] + 39)\n    oct_numbers.append(oct_numbers[-1] + 41)\n    oct_numbers.append(oct_numbers[-1] + 43)\n    oct_numbers.append(oct_numbers[-1] + 45)\n    oct_numbers.append(oct_numbers[-1] + 47)\n    oct_numbers.append(oct_numbers[-1] + 49)\n    oct_numbers.append(oct_numbers[-1] + 51)\n    oct_numbers.append(oct_numbers[-1] + 53)\n    oct_numbers.append(oct_numbers[-1] + 55)\n    oct_numbers.append(oct_numbers[-1] + 57)\n    oct_numbers.append(oct_numbers[-1] + 59)\n    oct_numbers.append(oct_numbers[-1] + 61)\n    oct_numbers.append(oct_numbers[-1] + 63)\n    oct_numbers.append(oct_numbers[-1] + 65)\n    oct_numbers.append(oct_numbers[-1] + 67)\n    oct_numbers.append(oct_numbers[-1] + 69)\n    oct_numbers.append(oct_numbers[-1] + 71)\n    oct_numbers.append(oct_numbers[-1] + 73)\n    oct_numbers.append(oct_numbers[-1] + 75)\n    oct_numbers.append(oct_numbers[-1] + 77)\n    oct_numbers.append(oct_numbers[-1] + 79)\n    oct_numbers.append(oct_numbers[-1] + 81)\n    oct_numbers.append(oct_numbers[-1] + 83)\n    oct_numbers.append(oct_numbers[-1] + 85)\n    oct_numbers.append(oct_numbers[-1] + 87)\n    oct_numbers.append(oct_numbers[-1] + 89)\n    oct_numbers.append(oct_numbers[-1] + 91)\n    oct_numbers.append(oct_numbers[-1] + 93)\n    oct_numbers.append(oct_numbers[-1] + 95)\n    oct_numbers.append(oct_numbers[-1] + 97)\n    oct_numbers.append(oct_numbers[-1] + 99)\n    oct_numbers.append(oct_numbers[-1] + 101)\n    oct_numbers.append(oct_numbers[-1] + 103)\n    oct_numbers.append(oct_numbers[-1] + 105)\n    oct_numbers.append(oct_numbers[-1] + 107)\n    oct_numbers.append(oct_numbers[-1] + 109)\n    oct_numbers.append(oct_numbers[-1] + 111)\n    oct_numbers.append(oct_numbers[-1] + 113)\n    oct_numbers.append(oct_numbers[-1] + 115)\n    oct_numbers.append(oct_numbers[-1] + 117)\n    oct_numbers.append(oct_numbers[-1] + 119)\n    oct_numbers.append(oct_numbers[-1] + 121)\n    oct_numbers.append(oct_numbers[-1] + 123)\n    oct_numbers.append(oct_numbers[-1] + 125)\n    oct_numbers.append(oct_numbers[-1] + 127)\n    oct_numbers.append(oct_numbers[-1] + 129)\n    oct_numbers.append(oct_numbers[-1] + 131)\n    oct_numbers.append(oct_numbers[-1] + 133)\n    oct_numbers.append(oct_numbers[-1] + 135)\n    oct_numbers.append(oct_numbers[-1] + 137)\n    oct_numbers.append(oct_numbers[-1] + 139)\n    oct_numbers.append(oct_numbers[-1] + 141)\n    oct_numbers.append(oct_numbers[-1] + 143)\n    oct_numbers.append(oct_numbers[-1] + 145)\n    oct_numbers.append(oct_numbers[-1] + 147)\n    oct_numbers.append(oct_numbers[-1] + 149)\n    oct_numbers.append(oct_numbers[-1] + 151)\n    oct_numbers.append(oct_numbers[-1] + 153)\n    oct_numbers.append(oct_numbers[-1] + 155)\n    oct_numbers.append(oct_numbers[-1] + 157)\n    oct_numbers.append(oct_numbers[-1] + 159)\n    oct_numbers.append(oct_numbers[-1] + 161)\n    oct_numbers.append(oct_numbers[-1] + 163)\n    oct_numbers.append(oct_numbers[-1] + 165)\n    oct_numbers.append(oct_numbers[-1] + 167)\n    oct_numbers.append(oct_numbers[-1] + 169)\n    oct_numbers.append(oct_numbers[-1] + 171)\n    oct_numbers.append(oct_numbers[-1] + 173)\n    oct_numbers.append(oct_numbers[-1] + 175)\n    oct_numbers.append(oct_numbers[-1] + 177)\n    oct_numbers.append(oct_numbers[-1] + 179)\n    oct_numbers.append(oct_numbers[-1] + 181)\n    oct_numbers.append(oct_numbers[-1] + 183)\n    oct_numbers.append(oct_numbers[-1] + 185)\n    oct_numbers.append(oct_numbers[-1] + 187)\n    oct_numbers.append(oct_numbers[-1] + 189)\n    oct_numbers.append(oct_numbers[-1] + 191)\n    oct_numbers.append(oct_numbers[-1] + 193)\n    oct_numbers.append(oct_numbers[-1] + 195)\n    oct_numbers.append(oct_numbers[-1] + 197)\n    oct_numbers.append(oct_numbers[-1] + 199)\n    oct_numbers.append(oct_numbers[-"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1:\n        return 0\n    if n%3==0:\n        return 1 + is_octagonal(n//3)\n    if n%3==1:\n        return 2 + is_octagonal(n//3)\n    if n%3==2:\n        return 3 + is_octagonal(n//3)"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n    i = 1\n    for j in range(n):\n        h = (a + b + c) / 2\n        a = b\n        b = c\n        c = d\n        d = e\n        e = f\n        f = g\n        g = h\n    return h\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return int(n*(3*n-1)/2)"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        sub_string = s[i:]\n        if is_sum_equal(sub_string):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    total = 0\n    n = len(s)\n    substring = \"\"\n    # If any of the elements of substring is a digit, the number of digits in substring is equal to its length.\n    # If any of the elements of substring is a letter, the number of digits in substring is 1.\n    # If all the elements of substring are digits, the number of digits in substring is equal to its length.\n    # The digit length is always greater than or equal to 1.\n    count = 1\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            if count == 1:\n                count = 0\n            else:\n                count = 1\n        if count == 1:\n            if s[i] in \"1234567890\":\n                count = 1\n                if len(substring) == 0:\n                    substring += s[i]\n                else:\n                    substring += s[i]\n            elif s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                substring += s[i]\n                count = 1\n        total += 1\n    print(substring)\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substring = s[i:j+1]\n            print(substring)\n            d[substring] += 1\n    print(d)\n    return sum([v for v in d.values()])\ncount_Substrings('1234')\ncount_Substrings('12345')\ncount_Substrings('123445')\ncount_Substrings('123456789')\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #length of string\n    #string length\n    sum_length = 0\n    length = len(s)\n    #dictionary to store the frequency of the substrings\n    freq = defaultdict(int)\n    for i in range(length):\n        for j in range(i+1,length):\n            substring = s[i:j+1]\n            sum_substring = 0\n            for k in range(len(substring)):\n                sum_substring += ord(substring[k])\n            if sum_substring == len(substring):\n                freq[substring] += 1\n            \n    sum_length = sum([freq[substring] for substring in freq])\n    return sum_length\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = 0\n            for char in substring:\n                sum_of_digits += int(char)\n            if sum_of_digits == len(substring):\n                num_substrings += 1\n    return num_substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            count = count + check(s[i:j+1])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sum_digits(substring):\n        sum_digit = 0\n        for i in range(len(substring)):\n            sum_digit += int(substring[i])\n        return sum_digit\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            s = s[i:j+1]\n            num = s\n            digits = 0\n            while num!= '':\n                digits = digits + int(num[-1])\n                num = num[:-1]\n            if digits == len(s):\n                total = total + 1\n    print(\"Total number of substrings with the sum of digits equal to their length:\", total)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum(s[i:j+1]) == len(s[i:j+1])):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = 0\n    dict = defaultdict(int)\n    for i in range(len(s)):\n        dict[s[i]] += 1\n    for i in dict:\n        count += dict[i]*dict[i]\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for num in xs:\n        if num < small:\n            small = num\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest == None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not isinstance(xs, list):\n        raise TypeError(\"xs must be a list.\")\n    if not xs:\n        raise ValueError(\"xs is empty\")\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest == None or num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(\"List is : \",xs)\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # the comparison list\n    compare_list = []\n    # if the list is not empty\n    if len(test_list) > 0:\n        # convert the tuple list into a list\n        test_list = list(test_list)\n        # loop over the list\n        for i in range(len(test_list)-1):\n            # if the current pair is bigger than the next one, add the difference between them to the list\n            if test_list[i] > test_list[i+1]:\n                compare_list.append(abs(test_list[i] - test_list[i+1]))\n            # if the current pair is smaller than the next one, add the difference between them to the list\n            elif test_list[i] < test_list[i+1]:\n                compare_list.append(abs(test_list[i+1] - test_list[i]))\n        # if the list is not empty, return the maximum difference\n        if len(compare_list) > 0:\n            return max(compare_list)\n        # else return None\n    else:\n        # if the list is empty, return None\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_value = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_value:\n                max_value = abs(test_list[i] - test_list[j])\n    return max_value\n    \n    \ndef sum_list(test_list):\n    '''\n    Write a function to find the sum of all numbers in a list\n    '''\n    sum_value = 0\n    for i in test_list:\n        sum_value += i\n    return sum_value\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]-test_list[j] > max:\n                max = test_list[i]-test_list[j]\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # The most time consuming part here.\n    # L = sorted(test_list)\n    # i = 0\n    # k = 0\n    # while i < len(test_list):\n    #     if abs(test_list[i] - L[k]) > abs(test_list[i] - L[k+1]):\n    #         i += 1\n    #         k += 1\n    #         continue\n    #     if abs(test_list[i] - L[k]) < abs(test_list[i] - L[k+1]):\n    #         i += 1\n    #         k += 1\n    #         continue\n    #     if abs(test_list[i] - L[k]) == abs(test_list[i] - L[k+1]):\n    #         i += 1\n    #         k += 1\n    #         continue\n    #     if abs(test_list[i] - L[k]) < abs(test_list[i] - L[k+1]):\n    #         k += 1\n    #         continue\n    #     else:\n    #         i += 1\n    #         k += 1\n    #         continue\n    # return k\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return -1\n    elif len(test_list) == 1:\n        return test_list[0]\n    max_diff = test_list[0]\n    curr_diff = max_diff\n    for i in range(1, len(test_list)):\n        if test_list[i] - curr_diff > curr_diff:\n            curr_diff = test_list[i] - curr_diff\n        else:\n            curr_diff = test_list[i] - curr_diff\n    return curr_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_diff = float('inf')\n    min_index = None\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff < min_diff:\n                min_diff = diff\n                min_index = (i, j)\n    print(min_diff, min_index)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    while len(test_list) > 1:\n        max_pair = max(test_list)\n        min_pair = min(test_list)\n        difference = abs(max_pair - min_pair)\n        if difference > maximum:\n            maximum = difference\n        test_list.remove(max_pair)\n        test_list.remove(min_pair)\n    return maximum\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list=sorted(subjectmarks,key=lambda x: x[1])\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda marks: marks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda item: item[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks=sorted(subjectmarks, key=lambda subj_marks:subj_marks[1])\n    print(sorted_marks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks) == 0:\n        return []\n    if len(subjectmarks) == 1:\n        return subjectmarks\n    for i in range(0, len(subjectmarks)-1):\n        for j in range(0, len(subjectmarks)-1-i):\n            if subjectmarks[j][1] > subjectmarks[j+1][1]:\n                subjectmarks[j], subjectmarks[j+1] = subjectmarks[j+1], subjectmarks[j]\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_marks = sorted(subjectmarks, key = lambda x: x[1])\n    print(sort_marks)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n    for element in data_list:\n        if type(element) == int:\n            sum_of_elements += element\n    return sum_of_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError(\"Recursive list sum only works for list inputs.\")\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return sum([recursive_list_sum(sub_list) for sub_list in data_list])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # The solution below works if the input list is a list of numbers\n    # in a list of lists and if the inner lists are of the same length\n    # but if the inner lists are of different lengths, the input list\n    # must be a nested list.\n    #\n    # Solution:\n    #\n    # Create a function to find the length of a list.\n    def len_list(data_list):\n        '''\n        Find the length of a list.\n        '''\n        list_length = 0\n        for i in data_list:\n            if type(i) is list:\n                list_length += len_list(i)\n            else:\n                list_length += 1\n        return list_length\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        data_list = [data_list[0]] + recursive_list_sum(data_list[1:])\n    return sum(data_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for num in list:\n        if num > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for element in list:\n        if element > 0:\n            pos_count += 1\n    return pos_count\n    \nlist1 = [-23, -5, -12, -2, 0, -1, 9, 16, 11, 3, -4, 3]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\nprint(pos_count([-1, -2, -3, 0, -4]))\nprint(pos_count([1, -2, 3, -4, -5, -6, 7, 0, -8, -9]))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n = n+1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for n in list if n > 0)\n    \n    # OR\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 15\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 36\n    if n == 10:\n        return 45\n    if n == 11:\n        return 55\n    if n == 12:\n        return 77\n    if n == 13:\n        return 95\n    if n == 14:\n        return 113\n    if n == 15:\n        return 150\n    if n == 16:\n        return 175\n    if n == 17:\n        return 217\n    if n == 18:\n        return 258\n    if n == 19:\n        return 319\n    if n == 20:\n        return 360\n    if n == 21:\n        return 421\n    if n == 22:\n        return 488\n    if n == 23:\n        return 545\n    if n == 24:\n        return 602\n    if n == 25:\n        return 677\n    if n == 26:\n        return 752\n    if n == 27:\n        return 810\n    if n == 28:\n        return 918\n    if n == 29:\n        return 1005\n    if n == 30:\n        return 1082\n    if n == 31:\n        return 1165\n    if n == 32:\n        return 1241\n    if n == 33:\n        return 1322\n    if n == 34:\n        return 1394\n    if n == 35:\n        return 1471\n    if n == 36:\n        return 1647\n    if n == 37:\n        return 1725\n    if n == 38:\n        return 1803\n    if n == 39:\n        return 1876\n    if n == 40:\n        return 1927\n    if n == 41:\n        return 2098\n    if n == 42:\n        return 2268\n    if n == 43:\n        return 2347\n    if n == 44:\n        return 2432\n    if n == 45:\n        return 2511\n    if n == 46:\n        return 2590\n    if n == 47:\n        return 2764\n    if n == 48:\n        return 2849\n    if n == 49:\n        return 2927\n    if n == 50:\n        return 3025\n    if n == 51:\n        return 3099\n    if n == 52:\n        return 3173\n    if n == 53:\n        return 3252\n    if n == 54:\n        return 3337\n    if n == 55:\n        return 3476\n    if n == 56:\n        return 3546\n    if n == 57:\n        return 3635\n    if n == 58:\n        return 3724\n    if n == 59:\n        return 3810\n    if n == 60:\n        return 3900\n    if n == 61:\n        return 4081\n    if n == 62:\n        return 4164\n    if n == 63:\n        return 4243\n    if n == 64:\n        return 4328\n    if n == 65:\n        return 4408\n    if n == 66:\n        return 4480\n    if n == 67:\n        return 4565\n    if n == 68:\n        return 4642\n    if n == 69:\n        return 4730\n    if n == 70:\n        return 4811\n    if n == 71:\n        return 4892\n    if n == 72:\n        return 4973\n    if n == 73:\n        return 5055\n    if n == 74:\n        return 5147\n    if n == 75:\n        return 5261\n    if n == 76:\n        return 5397\n    if n == 77:\n        return 5460\n    if n == 78:\n        return 5544\n    if n == 79:\n        return 5647\n    if n == 80:\n        return 5756\n    if n == 81:\n        return 5861\n    if n == 82:\n        return 5947\n    if n == 83:\n        return 6055\n    if n == 84:\n        return 6146\n    if n == 85:\n        return 6261\n    if n == 86:\n        return 6397\n    if n == 87:\n        return 6470\n    if n == 88:\n        return 6545\n    if n == 89:\n        return 6644\n    if n == 90:\n        return 6736\n    if n == 91:\n        return 6826\n    if n == 92:\n        return 6912\n    if n == 93:\n        return 6988\n    if n == 94:\n        return 7059\n    if n == 95:\n        return 7129\n    if n == 96:\n        return 7198\n    if n == 97:\n        return 7270\n    if n == 98:\n        return 7352\n    if n == 99:\n        return 7438\n    if n == 100:\n        return 7527\n    if n == 101:\n        return 7618\n    if n == 102:\n        return 7700\n    if n == 103:\n        return 7880\n    if n == 104:\n        return 7964\n    if n == 105:\n        return 8051\n    if n == 106:\n        return 8138\n    if n == 107:\n        return 8191\n    if n == 108:\n        return 8268\n    if n == 109:\n        return 8344\n    if n == 110:\n        return 8429\n    if n == 111:\n        return 8510\n    if n == 112:\n        return 8591\n    if n == 113:\n        return 8670\n    if n == 114:\n        return 8747\n    if n == 115:\n        return 8836\n    if n == 116:\n        return 8915\n    if n == 117:\n        return 9010\n    if n == 118:\n        return 9091\n    if n == 119:\n        return 9162\n    if n == 120:\n        return 9244\n    if n == 121:\n        return 9317\n    if n == 122:\n        return 9402\n    if n == 123:\n        return 9463\n    if n == 124:\n        return 9552\n    if n == 125:\n        return 9633\n    if n == 126:\n        return 9713\n    if n == 127:\n        return 9795\n    if n == 128:\n        return 9862\n    if n == 129:\n        return 9949\n    if n == 130:\n        return 10035\n    if n == 131:\n        return 10079\n    if n == 132:\n        return 10124\n    if n == 133:\n        return 10178\n    if n == 134:\n        return 10252\n    if n == 135:\n        return 10331\n    if n == 136:\n        return 10423\n    if n == 137:\n        return 10503\n    if n == 138:\n        return 10601\n    if n == 139:\n        return 10690\n    if n == 140:\n        return 10785\n    if n == 141:\n        return 10863\n    if n == 142:\n        return 10941\n    if n == 143:\n        return 11026\n    if n == 144:\n        return 11110\n    if n == 145:\n        return 11200\n    if n == 146:\n        return 11380\n    if n == 147:\n        return 11563\n    if n == 148:\n        return 11741\n    if n == 149:\n        return 11920\n    if n == 150:\n        return 12002\n    if n == 151:\n        return 12071\n    if n == 152:\n        return 12146\n    if n == 153:\n        return 12231\n    if n == 154:\n        return 12396\n    if n == 155:\n        return 12471\n    if n == 156:\n        return 12538\n    if n == 157:\n        return 12647\n    if n == 158:\n        return 12733\n    if n == 159:\n        return 12812\n    if n == 160:\n        return 12905\n    if n == 161:\n        return 13086\n    if n == 162:\n        return 13162\n    if n == 163:\n        return 13335\n    if n == 164:\n        return 13451\n    if n == 165:\n        return 13526\n    if n == 166:\n        return 13714\n    if n == 167:\n        return 13794\n    if n == 168:\n        return 13972"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n):\n        '''\n        Partition a set of Bell numbers into two or more partitions.\n        '''\n        ways = [0, 1]\n        for i in range(2, n + 1):\n            ways.append(sum(ways[i-k] for k in range(1, i+1)))\n        return ways[-1]\n    return bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count(n,num):\n        if num == 0:\n            return 1\n        if num < 0:\n            return 0\n        if n < num:\n            return 0\n        return count(n-num,num) + count(n,num-1)\n    return count(n,n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def get_partition_ways(l, r):\n        if l == r:\n            return 1\n        elif l > r:\n            return 0\n        else:\n            return get_partition_ways(l+1, r) + get_partition_ways(l, r-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    '''\n    a number is a bell number if it can be made of sum of 2 other bell numbers.\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # 1. Define helper function\n    # Time O(2^n) and space O(2^n)\n    def helper(n, k):\n        \n        if n == 0:\n            return 1\n        \n        if n == k:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        count = 0\n        \n        for i in range(n, k+1):\n            count += helper(n-i, k) + helper(n, k-i)\n        \n        return count\n    \n    \n    # 2. Implement and return result\n    return helper(n, n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    ways = [0] * (n + 1)\n    ways[1] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            ways[i] += ways[j - 1]\n            \n    return ways[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = 1\n    while j < len(A):\n        if A[i] < A[j]:\n            i += 1\n        elif A[i] > A[j]:\n            j += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    i = 0\n    j = n - 1\n    while i < n-1:\n        if A[i] < A[i+1]:\n            i += 1\n            continue\n        else:\n            return False\n    while j >= 0:\n        if A[j] > A[j+1]:\n            j -= 1\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if size of the array is zero or one element then return True \n    if len(A) <= 1: return True\n    # else check the first two elements if they are same then return False \n    if A[0] == A[1]: return False\n    # else loop through the array and check whether all the elements are in increasing order or not. \n    # if all the elements in decreasing order then return False \n    for i in range(0, len(A) - 1): \n        if A[i] > A[i + 1]: return False\n    # else return True \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    else:\n        is_monotonic = True\n        for i in range(1, n):\n            if A[i - 1] >= A[i]:\n                is_monotonic = False\n                break\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i - 1] > A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = A\n    m = 0\n    n = 0\n    for i in range(0, len(A)-1):\n        if A[i] > A[i+1]:\n            n += 1\n        if A[i] < A[i+1]:\n            m += 1\n    if n == 0 and m == 0:\n        print(\"YES\")\n    elif n > m:\n        print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Step 1 : find the minimum and maximum numbers\n    max_num = -1\n    min_num = -1\n    for i in range(len(A)):\n        if A[i] > max_num:\n            max_num = A[i]\n        if A[i] < min_num:\n            min_num = A[i]\n    # Step 2 : check if array is monotonic or not\n    # If no, return False\n    if min_num <= max_num:\n        return False\n    # If yes, return True\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == None or len(l) == 0:\n        return False\n    start = 0\n    while start < len(l):\n        if l[start:start+len(s)] == s:\n            return True\n        start += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n            if j == len(s):\n                return True\n        i += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    else:\n        return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l.index(i) == 0 for i in s) or any(l.index(i) == len(l) - 1 for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # initializing counter\n    count = 0\n    # initializing length\n    length = len(s)\n    # traversing through a list\n    for i in range(0, len(l)):\n        # checking whether the current element is equal to the required element\n        if l[i] == s[0]:\n            # if yes then increment the counter\n            count += 1\n        # checking the length of the sublist\n        if count == length:\n            # if yes then return true\n            return True\n    # if no then return false\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if(l[i] == s[0]):\n            for j in range(0, len(s)):\n                if(l[i+j]!= s[j]):\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l[0] == s[0] and l[-1] == s[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #print(l, s)\n    # l and s may be of different lengths\n    # returns False if at least one element of l is not in s\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    for e in l:\n        if e == s[i]:\n            i += 1\n            if i == len(s):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        for x in range(len(l)):\n            if l[x:x+len(s)] == s:\n                return True\n    except TypeError:\n        print(f\"Error: invalid input\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # O(n^2) Time | O(1) Space\n    for i in range(len(Input)-1):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    found = False\n    if len(Input) > 1:\n        for i in range(len(Input) - 1):\n            if len(Input[i])!= len(Input[i + 1]):\n                found = False\n                break\n            else:\n                found = True\n        if not found:\n            print(\"False\")\n        else:\n            print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!= len(Input[i + 1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<1:\n        return False\n    else:\n        for i in Input:\n            if len(i)!=len(Input[0]):\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<2:\n        return \"Invalid Input\"\n    else:\n        lengths=set([len(i) for i in Input])\n        if len(lengths)==1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # print(Input)\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=Input.split(' ')\n    Input=list(map(int,Input))\n    l=len(Input)\n    if l==2:\n        return(True)\n    elif l>2:\n        return(False)\n        \n        \n        \n    \nInput=input(\"Enter List of tuples (space separated) : \")\nif find_equal_tuple(Input)==True:\n    print(\"Equal\")\nelse:\n    print(\"Not Equal\")\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    if len(Input[0]) == 0:\n        return True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # your code here\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        while j > 0 and nums[j - 1] > nums[j]:\n            swap(nums, j, j - 1)\n            j -= 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort = 1\n    while combsort < len(nums):\n        combsort = 0\n        for j in range(1, len(nums) - 1):\n            if nums[j-1] > nums[j] and nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                combsort += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    if n <= 1:\n        return nums\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    else:\n        p = nums[0]\n        min_idx = 0\n        max_idx = n - 1\n        \n        while min_idx < max_idx:\n            while min_idx < max_idx and nums[min_idx] <= p:\n                min_idx += 1\n            \n            while min_idx < max_idx and nums[max_idx] >= p:\n                max_idx -= 1\n            \n            if min_idx < max_idx:\n                nums[min_idx], nums[max_idx] = nums[max_idx], nums[min_idx]\n    \n        return nums\n    \n    \ndef min_value_node(node):\n    current = node\n    while current.left is not None:\n        current = current.left\n    return current\n    \ndef delete_node(root, key):\n    # TODO: Write your code here\n    if root is None:\n        return root\n    \n    if key > root.val:\n        root.right = delete_node(root.right, key)\n    elif key < root.val:\n        root.left = delete_node(root.left, key)\n    else:\n        if root.left is None:\n            temp = root.right\n            root = None\n            return temp\n        elif root.right is None:\n            temp = root.left\n            root = None\n            return temp\n        \n        temp = min_value_node(root.right)\n        root.val = temp.val\n        root.right = delete_node(root.right, temp.val)\n    return root\n    \n    \ndef inorder(root):\n    # Iterative\n    # node, stack = root, []\n    # while node or stack:\n    #     while node:\n    #         stack.append(node)\n    #         node = node.left\n    #     node = stack.pop()\n    #     print(node.val)\n    #     node = node.right\n    \n    # Recursive\n    if not root:\n        return\n    \n    inorder(root.left)\n    print(root.val)\n    inorder(root.right)\n    \n    \ndef levelorder(root):\n    # Iterative\n    # node = root\n    # queue = []\n    # while node or queue:\n    #     while node:\n    #         queue.append(node)\n    #         node = node.left\n    #     node = queue.pop(0)\n    #     print(node.val)\n    #     node = node.right\n    \n    # Recursive\n    if not root:\n        return\n    \n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val)\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n        \n        \ndef print_order(root):\n    if not root:\n        return\n    \n    queue = []\n    stack = []\n    node = root\n    while node or stack or queue:\n        while node:\n            queue.append(node)\n            node = node.left\n        \n        while queue:\n            node = queue.pop(0)\n            stack.append(node)\n            node = node.right\n            \n        while stack:\n            node = stack.pop()\n            print(node.val)\n            node = node.left\n            \n            \ndef find_node(root, val):\n    if not root:\n        return root\n    \n    if root.val == val:\n        return root\n    \n    if root.val > val:\n        return find_node(root.left, val)\n    \n    if root.val < val:\n        return find_node(root.right, val)\n    \ndef is_bst(root):\n    if not root:\n        return True\n    \n    if not root.left and not root.right:\n        return True\n    \n    if root.left and root.left.val >= root.val:\n        return False\n    if root.right and root.right.val <= root.val:\n        return False\n    \n    return is_bst(root.left) and is_bst(root.right)\n    \n    \ndef is_bst_iterative(root):\n    '''\n    Write a function to check if a binary tree is a binary search tree.\n    '''\n    if not root:\n        return True\n    \n    node = root\n    queue = []\n    \n    while queue or node:\n        while node:\n            queue.append(node)\n            node = node.left\n        node = queue.pop(0)\n        node = node.right\n        \n        if node:\n            if node.val <= node.right.val:\n                return False\n        \n        \ndef is_bst_recursive(root, mini, maxi):\n    '''\n    Write a function to check if a binary tree is a binary search tree.\n    '''\n    if not root:\n        return True\n    \n    if not mini < root.val < maxi:\n        return False\n    \n    if root.val > mini and root.val < maxi:\n        return is_bst_recursive(root.left, mini, root.val) and is_bst_recursive(root.right, root.val, maxi)\n    \n    \ndef is_balanced(root):\n    '''\n    Write a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any node never differ by more than one.\n    '''\n    def height(node):\n        if not node:\n            return -1\n        return max(height(node.left), height(node.right)) + 1\n    \n    if not root:\n        return True\n    \n    if abs(height(root.left) - height(root.right)) > 1:\n        return False\n    \n    return is_balanced(root.left) and is_balanced(root.right)\n    \n    \ndef is_balanced_iterative(root):\n    '''\n    Write a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any node never differ by more than one.\n    '''\n    if not root:\n        return True\n    \n    node = root\n    queue = []\n    \n    while queue or node:\n        while node:\n            queue.append(node)\n            node = node.left\n        node = queue.pop(0)\n        node = node.right\n        \n        if node:\n            if node.left and node.left.val!= node.val + 1:\n                return False\n            if node.right and node.right.val!= node.val - 1:\n                return False\n            \n        if queue:\n            node = queue.pop(0)\n            node = node.left\n            if node:\n                if node.left and node.left.val!= node.val + 1:\n                    return False\n                if node.right and node.right.val!= node.val - 1:\n                    return False\n    \n    return True\n    \n    \ndef max_path_sum(root):\n    '''\n    Write a function that returns the maximum path sum.\n    '''\n    \n    def max_path_sum_util(root):\n        if not root:\n            return 0\n        \n        l_sum, r_sum = 0, 0\n        \n        if root.left:\n            l_sum = max_path_sum_util(root.left)\n        if root.right:\n            r_sum = max_path_sum_util(root.right)\n        \n        return max(l_sum + root.val, r_sum + root.val, root.val + max(l_sum, r_sum))\n    \n    return max_path_sum_util(root)\n    \n    \ndef is_symmetric_tree(root):\n    '''\n    Write a function that returns true if the binary tree is symmetric.\n    '''\n    \n    def is_symmetric_util(left_root, right_root):\n        if not left_root and not right"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(\"Before sorting:\", nums)\n    size = len(nums)\n    min_val = nums[0]\n    max_val = nums[0]\n    for i in range(size):\n        if min_val > nums[i]:\n            min_val = nums[i]\n        if max_val < nums[i]:\n            max_val = nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(0, n - 1):\n        for j in range(0, n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a,b):\n        temp = a\n        a = b\n        b = temp\n        return a,b\n    n = len(nums)\n    if n < 2:\n        return nums\n    for i in range(n):\n        for j in range(i,n):\n            if nums[i] > nums[j]:\n                swap(nums[i],nums[j])\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j]=nums[j],nums[i]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**0.5)):\n        if(n-i**2==0):\n            print(n,\"is a perfect square and divisible by\",i**2)\n            break\n        elif(n-i**2!=0):\n            continue\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    res = False\n    for i in range(1, int(math.sqrt(n))+1):\n        if n-i*i == 0:\n            res = True\n            break\n    return res\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n=int(n)\n    if (n%2==0) and (n**0.5==int(n**0.5)):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    squares = []\n    for i in range(n): \n        squares.append(i**2)\n    diff = [] \n    for i in range(n):\n        diff.append(i**2 - squares[i])\n    if sum(diff) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return True if n == 1 or 2*n == 1 else False\nprint(dif_Square(11))"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def diff_Square(x):\n        sqr = int(math.sqrt(x))\n        sqr1 = int(math.sqrt(sqr))\n        return x - 2*sqr + sqr1\n    for i in range(1,n+1):\n        if diff_Square(i) == i:\n            print(i,\"is a perfect square\")\n        else:\n            print(i,\"is not a perfect square\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i<n:\n        if n-i*i == 0:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of four square numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if (n-i*i)%4 == 0:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef double_square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the product of two numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if (n-i*i)%2 == 0:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_of_cube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of cubes or not.\n    '''\n    i = 1\n    while i<n:\n        if i*i*i == n:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef diff_square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    i = 1\n    while i<n:\n        if i*i*i == n-i:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef check_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2+i:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef product_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the product of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2*i:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef difference_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**2:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef product_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the product of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_square_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**2:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_cube_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef difference_square_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**2 - i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef product_square_square_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the product of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**2 - i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_square_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_cube_square_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef difference_square_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**2 - i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef product_square_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the product of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 - i**2 - i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef sum_cube_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef difference_cube_cube_triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three other numbers or not.\n    '''\n    i = 1\n    while i<n:\n        if n == i*(i+1)//2 + i**2 + i**3:\n            return \"Yes\"\n        i += 1\n    return \"No\"\ndef product"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return int(pow(n,0.5)) == (pow(n,0.5) - int(pow(n,0.5)))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(int(n))\n    if n % 4!= 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def dif_square_recur(n):\n        if n == 0:\n            return False\n        elif n <= 0:\n            return False\n        else:\n            return dif_square_recur(n - 1)\n    return dif_square_recur(n)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        current = patterns[i]\n        \n        if (colors == current):\n            return True\n        \n        if (colors[-1] < current[-1]):\n            continue\n        \n        if (colors[-1] == current[-1]):\n            if (is_samepatterns(colors[:-1],current[:-1])):\n                return True\n        \n        return False\n    \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = 0\n    while i < len(colors) and j < len(patterns):\n        if colors[i]!= patterns[j]:\n            return False\n        i += 1\n        j += 1\n    return i == len(colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if(colors == pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p, c in zip(patterns, colors):\n        if p == c:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not isinstance(pattern,list):\n            raise TypeError(\"patterns must be an array of lists\")\n        if len(pattern)!= len(colors):\n            raise ValueError(\"patterns and colors must be the same length\")\n        for color in colors:\n            if not isinstance(color,list):\n                raise TypeError(\"colors must be an array of lists\")\n            if len(color)!= len(pattern):\n                raise ValueError(\"colors and patterns must be the same length\")\n    for color in colors:\n        for pattern in patterns:\n            if not check_color(color,pattern):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        if(patterns[i]!= colors[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the given list matches the patterns in the order\n    if len(patterns) == 0:\n        return False\n    if len(patterns) == 1 and patterns[0]!= \"\":\n        return True\n    if patterns[0] == \"\":\n        return False\n    # find if the first letter matches the first pattern\n    first_match = patterns[0][0] == colors[0]\n    # check if the remaining letters of the pattern match the first pattern\n    # for the remaining patterns\n    for i in range(1, len(patterns)):\n        if len(patterns[i]) == 0:\n            continue\n        if patterns[i][0] == \"\":\n            continue\n        if first_match == False:\n            return False\n        # check if the following letter matches the pattern\n        if patterns[i][0] == colors[i]:\n            first_match = True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return len(colors) == len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    pattern_count = 0\n    while index < len(colors):\n        if colors[index] == patterns[pattern_count][0]:\n            if index == (len(colors) - 1):\n                if pattern_count == (len(patterns) - 1):\n                    return True\n            else:\n                if patterns[pattern_count][1] == colors[index+1]:\n                    index += 1\n                    pattern_count += 1\n                else:\n                    return False\n        else:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # solution 1 - using set.\n    # return [(tuple(sorted(s)), k) for s in set([tuple(sorted(s)) for s in test_list if all(i % k == 0 for i in s)])]\n    # solution 2 - using list comprehension.\n    return [(tuple(sorted(s)), k) for s in [sorted(s) for s in test_list if all(i % k == 0 for i in s)] if len(s) == K]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ret = []\n    for i in test_list:\n        if len(i) == K and all(j%K == 0 for j in i):\n            ret.append(i)\n    return ret\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if all(i[0]%k == 0 for k in range(1,K+1)):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # lst = set(map(tuple, test_list))\n    lst = set([x for x in test_list if all(x % k == 0 for k in range(1, K + 1))])\n    return lst\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #k_divisibles = []\n    #for i in range(len(test_list)):\n    #    if all([t%K==0 for t in test_list[i]]):\n    #        k_divisibles.append(test_list[i])\n    #print(k_divisibles)\n    #k_divisibles = set([t for t in test_list if all([t%k==0 for t in t])])\n    k_divisibles = set([t for t in test_list if any([t%k==0 for t in t])])\n    print(k_divisibles)\n    return k_divisibles\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    from itertools import combinations\n    temp = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if j!= i and (test_list[i][0] % test_list[j][0] == 0 and test_list[i][1] % test_list[j][1] == 0):\n                temp.append(test_list[i])\n    for i in range(1,K):\n        new = []\n        for t in combinations(temp, i):\n            new.append(tuple(set(list(t))))\n        temp = new\n    return temp\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        if (item % K) == 0:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # I want to output a list of tuples, but then I need to turn it into a dictionary, so make a function to do this in-place\n    # the dictionary is a dictionary of all the elements divided by K\n    # In order to get the dictionary I need to turn the list into a dictionary with lists as keys\n    # and then make a dictionary of the keys and the values\n    # then I can iterate through the dictionary and get the dictionary of values to return\n    # it is way faster than a list comprehension\n    # This code is very readable\n    dic = {}\n    for i in test_list:\n        if i[0]%K == 0 or i[1]%K == 0:\n            if i[0]/K in dic:\n                dic[i[0]/K].append(i[1]/K)\n            else:\n                dic[i[0]/K] = [i[1]/K]\n    return dic.values()\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # loop over each tuple\n    for t in test_list:\n        # loop over each element in the tuple\n        for e in t:\n            # check if it's divisible by k\n            if e % K!= 0:\n                # if it's not divisible, return false\n                return False\n    # if all elements of the tuple are divisible by K, return true\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #List of tuples\n    li = []\n    for i in test_list:\n        if all(j%K==0 for j in i):\n            li.append(i)\n    return li\n    \nif __name__ == '__main__':\n    #Test Case\n    test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    K = 2\n    print(find_tuples(test_list, K))"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    n = 11 - n\n    if n < 0:\n        return False\n    return True\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(\"The number is divisible by 11\")\n    else:\n        print(\"The number is not divisible by 11\")\n        \ndef is_Div(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 5 or neither.\n    '''\n    if (n%11==0) or (n%5==0):\n        print(\"The number is divisible by 11 or 5\")\n    else:\n        print(\"The number is not divisible by 11 or 5\")\n        \ndef is_Div_by(n,m):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 5 or neither.\n    '''\n    if n % 11 == 0 and m % 11 == 0:\n        print(\"The number is divisible by 11 and 5\")\n    elif n % 11 == 0:\n        print(\"The number is divisible by 11\")\n    elif m % 11 == 0:\n        print(\"The number is divisible by 5\")\n    else:\n        print(\"The number is not divisible by 11 or 5\")\n        \ndef is_Div_by_2_or_3(n,m):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 5 or neither.\n    '''\n    if n % 11 == 0 or m % 11 == 0:\n        print(\"The number is divisible by 11 or 5\")\n    elif n % 11 == 0 and m % 11 == 0:\n        print(\"The number is divisible by 11 and 5\")\n    else:\n        print(\"The number is not divisible by 11 or 5\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(\"It is divisible by 11\")\n    else:\n        print(\"It is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 ==0:\n        print(\"The number is divisible by 11.\")\n        return True\n    else:\n        print(\"The number is not divisible by 11.\")\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(s, \" is Even\")\n    else:\n        print(s, \" is Odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\ndef word_reverse(s): \n    '''\n    Write a python function to check whether the word is palindrome or not.\n    '''\n    return s==s[::-1]\ndef word_reversed(s): \n    '''\n    Write a python function to remove all whitespaces from a string.\n    '''\n    return s.replace(\" \", \"\")\ndef word_endswith(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"st\")\ndef word_startswith(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s.startswith(\"st\")\ndef word_startswith_2(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:2]==\"st\"\ndef word_endswith_2(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"is\")\ndef word_startswith_3(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:3]==\"sto\"\ndef word_endswith_3(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_4(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:4]==\"str\"\ndef word_endswith_4(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_5(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:5]==\"strte\"\ndef word_endswith_5(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_6(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:6]==\"strte\"\ndef word_endswith_6(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_7(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:7]==\"strtee\"\ndef word_endswith_7(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_8(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:8]==\"strstee\"\ndef word_endswith_8(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_9(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:9]==\"strsteee\"\ndef word_endswith_9(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_10(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:10]==\"streee\"\ndef word_endswith_10(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_11(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:11]==\"streeeee\"\ndef word_endswith_11(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_12(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:12]==\"streeeeeee\"\ndef word_endswith_12(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_13(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:13]==\"streeeeeeeee\"\ndef word_endswith_13(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_14(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:14]==\"streeeeeee\"\ndef word_endswith_14(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_15(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:15]==\"streeeeeeeee\"\ndef word_endswith_15(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_16(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:16]==\"streeeeeeeee\"\ndef word_endswith_16(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_17(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:17]==\"streeeeeeee\"\ndef word_endswith_17(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_18(s): \n    '''\n    Write a python function to check whether a string starts with a specific word or not.\n    '''\n    return s[:18]==\"streeeeeee\"\ndef word_endswith_18(s): \n    '''\n    Write a python function to check whether a string ends with a specific word or not.\n    '''\n    return s.endswith(\"ist\")\ndef word_startswith_19(s): \n    '''\n    Write "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #length of the word\n    #lenght=len(s)\n    #if length%2==0:\n    #    print(\"The length of the word is even\")\n    #else:\n    #    print(\"The length of the word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef palindrome_pairs(words):\n    '''\n    Write a python function to count the number of palindrome pairs in a given list of words.\n    '''\n    l=len(words)\n    #n=len(words)\n    #print(words)\n    words.sort()\n    a = set(words)\n    #print(a)\n    n=len(a)\n    #print(n)\n    #print(words)\n    ans=0\n    for i in range(n):\n        s=\"\"\n        for j in range(n):\n            if i!=j:\n                s+=words[j]\n        #print(s)\n        if is_palindrome(s) and is_palindrome(words[i]):\n            ans+=1\n    #print(ans)\n    return ans\ndef sum_of_divisors(n):\n    '''\n    Write a python function to calculate the sum of all the divisors of the number n.\n    '''\n    #print(n)\n    i=1\n    sum=0\n    while i<=n:\n        if n%i==0:\n            sum+=i\n        i+=1\n    #print(sum)\n    return sum\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number n is a prime or not.\n    '''\n    if n%2==0:\n        return False\n    for i in range(3,n//2,2):\n        if n%i==0:\n            return False\n    return True\ndef primes_up_to(n):\n    '''\n    Write a python function to find all primes up to the number n.\n    '''\n    prime_arr = []\n    for num in range(2, n + 1):\n        # If num is divisible by any number between 2 and num, it is not prime\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_arr.append(num)\n    return prime_arr\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers from 2 to n.\n    '''\n    count = 0\n    for num in range(2, n):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count\ndef get_couple_primes():\n    '''\n    Write a python function to get a two number such that they are prime and their product is maximum.\n    '''\n    prime1=[]\n    prime2=[]\n    for i in range(2,100):\n        flag=0\n        for j in range(2,i):\n            if i%j==0:\n                flag=1\n                break\n        if flag==0:\n            prime1.append(i)\n    for i in range(len(prime1)):\n        for j in range(i+1,len(prime1)):\n            if prime1[i]*prime1[j]<100:\n                prime2.append(prime1[i]*prime1[j])\n    return max(prime2)\ndef get_n_fibonacci_numbers(n):\n    '''\n    Write a python function to get the nth Fibonacci Number\n    '''\n    fib1=0\n    fib2=1\n    if n==1:\n        return fib1\n    if n==2:\n        return fib2\n    for i in range(n-2):\n        temp=fib2\n        fib2=fib1+fib2\n        fib1=temp\n    return fib2\ndef get_n_fibonacci_numbers(n):\n    '''\n    Write a python function to get the nth Fibonacci Number\n    '''\n    fib1=0\n    fib2=1\n    if n==1:\n        return fib1\n    if n==2:\n        return fib2\n    for i in range(n-2):\n        temp=fib2\n        fib2=fib1+fib2\n        fib1=temp\n    return fib2\ndef get_n_fibonacci_numbers(n):\n    '''\n    Write a python function to get the nth Fibonacci Number\n    '''\n    fib1=0\n    fib2=1\n    if n==1:\n        return fib1\n    if n==2:\n        return fib2\n    for i in range(n-2):\n        temp=fib2\n        fib2=fib1+fib2\n        fib1=temp\n    return fib2\ndef print_in_rgb_color(msg,r=255,g=255,b=255):\n    '''\n    Write a python function to print the characters of the string in the mentioned color in RGB.\n    '''\n    r,g,b=0,0,0\n    for i in range(len(msg)):\n        if msg[i]=='R' or msg[i]=='r':\n            r+=1\n        elif msg[i]=='G' or msg[i]=='g':\n            g+=1\n        elif msg[i]=='B' or msg[i]=='b':\n            b+=1\n    print(r,g,b)\ndef next_smaller_number(n):\n    '''\n    Write a python function to print the next smaller number after the given number.\n    '''\n    if n==1:\n        return 2\n    if n%2==0:\n        if n+1<=10:\n            return n+1\n        else:\n            return n//2\n    else:\n        if n+1<=10:\n            return n+2\n        else:\n            return n*2\ndef next_smaller_number(n):\n    '''\n    Write a python function to print the next smaller number after the given number.\n    '''\n    if n==1:\n        return 2\n    if n%2==0:\n        if n+1<=10:\n            return n+1\n        else:\n            return n//2\n    else:\n        if n+1<=10:\n            return n+2\n        else:\n            return n*2\ndef next_smaller_number(n):\n    '''\n    Write a python function to print the next smaller number after the given number.\n    '''\n    if n==1:\n        return 2\n    if n%2==0:\n        if n+1<=10:\n            return n+1\n        else:\n            return n//2\n    else:\n        if n+1<=10:\n            return n+2\n        else:\n            return n*2\ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    s=\"\"\n    n=abs(n)\n    while n>0:\n        s=str(n%10)+s\n        n//=10\n    return s==s[::-1]\ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    s=\"\"\n    n=abs(n)\n    while n>0:\n        s=str(n%10)+s\n        n//=10\n    return s==s[::-1]\ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    s=\"\"\n    n=abs(n)\n    while n>0:\n        s=str(n%10)+s\n        n//=10\n    return s==s[::-1]\ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    s=\"\"\n    n=abs(n)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    x = len(s) \n    if (x % 2 == 0): \n        print (\"The length of word is even\") \n    else: \n        print (\"The length of word is odd\") \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 14\n    elif n == 7:\n        return 16\n    elif n == 8:\n        return 18\n    elif n == 9:\n        return 20\n    elif n == 10:\n        return 22\n    elif n == 11:\n        return 24\n    elif n == 12:\n        return 26\n    elif n == 13:\n        return 28\n    elif n == 14:\n        return 30\n    elif n == 15:\n        return 32\n    elif n == 16:\n        return 34\n    elif n == 17:\n        return 36\n    elif n == 18:\n        return 38\n    elif n == 19:\n        return 40\n    elif n == 20:\n        return 42\n    elif n == 21:\n        return 44\n    elif n == 22:\n        return 46\n    elif n == 23:\n        return 48\n    elif n == 24:\n        return 50\n    elif n == 25:\n        return 52\n    elif n == 26:\n        return 54\n    elif n == 27:\n        return 56\n    elif n == 28:\n        return 58\n    elif n == 29:\n        return 60\n    elif n == 30:\n        return 62\n    elif n == 31:\n        return 64\n    elif n == 32:\n        return 66\n    elif n == 33:\n        return 68\n    elif n == 34:\n        return 70\n    elif n == 35:\n        return 72\n    elif n == 36:\n        return 74\n    elif n == 37:\n        return 76\n    elif n == 38:\n        return 78\n    elif n == 39:\n        return 80\n    elif n == 40:\n        return 82\n    elif n == 41:\n        return 84\n    elif n == 42:\n        return 86\n    elif n == 43:\n        return 88\n    elif n == 44:\n        return 90\n    elif n == 45:\n        return 92\n    elif n == 46:\n        return 94\n    elif n == 47:\n        return 96\n    elif n == 48:\n        return 98\n    elif n == 49:\n        return 100\n    elif n == 50:\n        return 102\n    elif n == 51:\n        return 104\n    elif n == 52:\n        return 106\n    elif n == 53:\n        return 108\n    elif n == 54:\n        return 110\n    elif n == 55:\n        return 112\n    elif n == 56:\n        return 114\n    elif n == 57:\n        return 116\n    elif n == 58:\n        return 118\n    elif n == 59:\n        return 120\n    elif n == 60:\n        return 122\n    elif n == 61:\n        return 124\n    elif n == 62:\n        return 126\n    elif n == 63:\n        return 128\n    elif n == 64:\n        return 130\n    elif n == 65:\n        return 132\n    elif n == 66:\n        return 134\n    elif n == 67:\n        return 136\n    elif n == 68:\n        return 138\n    elif n == 69:\n        return 140\n    elif n == 70:\n        return 142\n    elif n == 71:\n        return 144\n    elif n == 72:\n        return 146\n    elif n == 73:\n        return 148\n    elif n == 74:\n        return 150\n    elif n == 75:\n        return 152\n    elif n == 76:\n        return 154\n    elif n == 77:\n        return 156\n    elif n == 78:\n        return 158\n    elif n == 79:\n        return 160\n    elif n == 80:\n        return 162\n    elif n == 81:\n        return 164\n    elif n == 82:\n        return 166\n    elif n == 83:\n        return 168\n    elif n == 84:\n        return 170\n    elif n == 85:\n        return 172\n    elif n == 86:\n        return 174\n    elif n == 87:\n        return 176\n    elif n == 88:\n        return 178\n    elif n == 89:\n        return 180\n    elif n == 90:\n        return 182\n    elif n == 91:\n        return 184\n    elif n == 92:\n        return 186\n    elif n == 93:\n        return 188\n    elif n == 94:\n        return 190\n    elif n == 95:\n        return 192\n    elif n == 96:\n        return 194\n    elif n == 97:\n        return 196\n    elif n == 98:\n        return 198\n    elif n == 99:\n        return 200\n    elif n == 100:\n        return 202\n    elif n == 101:\n        return 204\n    elif n == 102:\n        return 206\n    elif n == 103:\n        return 208\n    elif n == 104:\n        return 210\n    elif n == 105:\n        return 212\n    elif n == 106:\n        return 214\n    elif n == 107:\n        return 216\n    elif n == 108:\n        return 218\n    elif n == 109:\n        return 220\n    elif n == 110:\n        return 222\n    elif n == 111:\n        return 224\n    elif n == 112:\n        return 226\n    elif n == 113:\n        return 228\n    elif n == 114:\n        return 230\n    elif n == 115:\n        return 232\n    elif n == 116:\n        return 234\n    elif n == 117:\n        return 236\n    elif n == 118:\n        return 238\n    elif n == 119:\n        return 240\n    elif n == 120:\n        return 242\n    elif n == 121:\n        return 244\n    elif n == 122:\n        return 246\n    elif n == 123:\n        return 248\n    elif n == 124:\n        return 250\n    elif n == 125:\n        return 252\n    elif n == 126:\n        return 254\n    elif n == 127:\n        return 256\n    elif n == 128:\n        return 258\n    elif n == 129:\n        return 260\n    elif n == 130:\n        return 262\n    elif n == 131:\n        return 264\n    elif n == 132:\n        return 266\n    elif n == 133:\n        return 268\n    elif n == 134:\n        return 270\n    elif n == 135:\n        return 272\n    elif n == 136:\n        return 274\n    elif n == 137:\n        return 276\n    elif n == 138:\n        return 278\n    elif n == 139:\n        return 280\n    elif n == 140:\n        return 282\n    elif n == 141:\n        return 284\n    elif n == 142:\n        return 286\n    elif n == 143:\n        return 288\n    elif n == 144:\n        return 290\n    elif n == 145:\n        return 292\n    elif n == 146:\n        return 294\n    elif n == 147:\n        return 296\n    elif n == 148:\n        return 298\n    elif n == 149:\n        return 300\n    elif n == 150:\n        return 302\n    elif n == 151:\n        return 304\n    elif n == 152:\n        return 306\n    elif n == 153:\n        return 308\n    elif n == 154:\n        return 310\n    elif n == 155:\n        return 312\n    elif n == 156:\n        return 314\n    elif n == 157:\n        return 316\n    elif n == 158:\n        return 318\n    elif n == 159:\n        return 320\n    elif n == 160:\n        return 322\n    elif n == 161:\n        return 324\n    elif n == 162:\n        return 326\n    elif n == 163:\n        return 328\n    elif n == 164:\n        return 330\n    elif n == 165:\n        return 332\n    elif n == 166:\n        return 334\n    elif n == 167:\n        return 336\n    elif n == 168:\n        return 33"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    if n == 4:\n        return 10\n    if n == 5:\n        return 12\n    if n == 6:\n        return 14\n    if n == 7:\n        return 16\n    if n == 8:\n        return 18\n    if n == 9:\n        return 20\n    if n == 10:\n        return 22\n    if n == 11:\n        return 24\n    if n == 12:\n        return 26\n    if n == 13:\n        return 28\n    if n == 14:\n        return 30\n    if n == 15:\n        return 32\n    if n == 16:\n        return 34\n    if n == 17:\n        return 36\n    if n == 18:\n        return 38\n    if n == 19:\n        return 40\n    if n == 20:\n        return 42\n    if n == 21:\n        return 44\n    if n == 22:\n        return 46\n    if n == 23:\n        return 48\n    if n == 24:\n        return 50\n    if n == 25:\n        return 52\n    if n == 26:\n        return 54\n    if n == 27:\n        return 56\n    if n == 28:\n        return 58\n    if n == 29:\n        return 60\n    if n == 30:\n        return 62\n    if n == 31:\n        return 64\n    if n == 32:\n        return 66\n    if n == 33:\n        return 68\n    if n == 34:\n        return 70\n    if n == 35:\n        return 72\n    if n == 36:\n        return 74\n    if n == 37:\n        return 76\n    if n == 38:\n        return 78\n    if n == 39:\n        return 80\n    if n == 40:\n        return 82\n    if n == 41:\n        return 84\n    if n == 42:\n        return 86\n    if n == 43:\n        return 88\n    if n == 44:\n        return 90\n    if n == 45:\n        return 92\n    if n == 46:\n        return 94\n    if n == 47:\n        return 96\n    if n == 48:\n        return 98\n    if n == 49:\n        return 100\n    if n == 50:\n        return 102\n    if n == 51:\n        return 104\n    if n == 52:\n        return 106\n    if n == 53:\n        return 108\n    if n == 54:\n        return 110\n    if n == 55:\n        return 112\n    if n == 56:\n        return 114\n    if n == 57:\n        return 116\n    if n == 58:\n        return 118\n    if n == 59:\n        return 120\n    if n == 60:\n        return 122\n    if n == 61:\n        return 124\n    if n == 62:\n        return 126\n    if n == 63:\n        return 128\n    if n == 64:\n        return 130\n    if n == 65:\n        return 132\n    if n == 66:\n        return 134\n    if n == 67:\n        return 136\n    if n == 68:\n        return 138\n    if n == 69:\n        return 140\n    if n == 70:\n        return 142\n    if n == 71:\n        return 144\n    if n == 72:\n        return 146\n    if n == 73:\n        return 148\n    if n == 74:\n        return 150\n    if n == 75:\n        return 152\n    if n == 76:\n        return 154\n    if n == 77:\n        return 156\n    if n == 78:\n        return 158\n    if n == 79:\n        return 160\n    if n == 80:\n        return 162\n    if n == 81:\n        return 164\n    if n == 82:\n        return 166\n    if n == 83:\n        return 168\n    if n == 84:\n        return 170\n    if n == 85:\n        return 172\n    if n == 86:\n        return 174\n    if n == 87:\n        return 176\n    if n == 88:\n        return 178\n    if n == 89:\n        return 180\n    if n == 90:\n        return 182\n    if n == 91:\n        return 184\n    if n == 92:\n        return 186\n    if n == 93:\n        return 188\n    if n == 94:\n        return 190\n    if n == 95:\n        return 192\n    if n == 96:\n        return 194\n    if n == 97:\n        return 196\n    if n == 98:\n        return 198\n    if n == 99:\n        return 200\n    if n == 100:\n        return 202\n    if n == 101:\n        return 204\n    if n == 102:\n        return 206\n    if n == 103:\n        return 208\n    if n == 104:\n        return 210\n    if n == 105:\n        return 212\n    if n == 106:\n        return 214\n    if n == 107:\n        return 216\n    if n == 108:\n        return 218\n    if n == 109:\n        return 220\n    if n == 110:\n        return 222\n    if n == 111:\n        return 224\n    if n == 112:\n        return 226\n    if n == 113:\n        return 228\n    if n == 114:\n        return 230\n    if n == 115:\n        return 232\n    if n == 116:\n        return 234\n    if n == 117:\n        return 236\n    if n == 118:\n        return 238\n    if n == 119:\n        return 240\n    if n == 120:\n        return 242\n    if n == 121:\n        return 244\n    if n == 122:\n        return 246\n    if n == 123:\n        return 248\n    if n == 124:\n        return 250\n    if n == 125:\n        return 252\n    if n == 126:\n        return 254\n    if n == 127:\n        return 256\n    if n == 128:\n        return 258\n    if n == 129:\n        return 260\n    if n == 130:\n        return 262\n    if n == 131:\n        return 264\n    if n == 132:\n        return 266\n    if n == 133:\n        return 268\n    if n == 134:\n        return 270\n    if n == 135:\n        return 272\n    if n == 136:\n        return 274\n    if n == 137:\n        return 276\n    if n == 138:\n        return 278\n    if n == 139:\n        return 280\n    if n == 140:\n        return 282\n    if n == 141:\n        return 284\n    if n == 142:\n        return 286\n    if n == 143:\n        return 288\n    if n == 144:\n        return 290\n    if n == 145:\n        return 292\n    if n == 146:\n        return 294\n    if n == 147:\n        return 296\n    if n == 148:\n        return 298\n    if n == 149:\n        return 300\n    if n == 150:\n        return 302\n    if n == 151:\n        return 304\n    if n == 152:\n        return 306\n    if n == 153:\n        return 308\n    if n == 154:\n        return 310\n    if n == 155:\n        return 312\n    if n == 156:\n        return 314\n    if n == 157:\n        return 316\n    if n == 158:\n        return 318\n    if n == 159:\n        return 320\n    if n == 160:\n        return 322\n    if n == 161:\n        return 324\n    if n == 162:\n        return 326\n    if n == 163:\n        return 328\n    if n == 164:\n        return 330\n    if n == 165:\n        return 332\n    if n == 166:\n        return 334\n    if n == 167:\n        return 336\n    if n == 168:\n        return 338\n    if n == 169:\n        return 340\n    if n == 170:\n        return 342\n    if n == 171:\n        return 344\n    if n == 172:\n        return 346\n    if n == 173:\n        return 348\n    if n == 174:\n        return 350\n    if n == 175:\n        return 352\n    if n == 176:\n        return 354\n    if n == 177:\n        return 356\n    if n == 178:\n        return 358\n    if n == 179:\n        return 360\n    if n == 180:\n        return 362\n    if n == 181:\n        return 364\n    if n == 182:\n        return 366\n    if n == 183:\n        return 368"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += i*(i-1)//2\n    return t\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def quadratic_sum_solution(n):\n        return (n*(n+1))/2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        return quadratic_sum_solution(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i**3 for i in range(1,n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return factorial(n) / (2 * factorial(n - 2) * factorial(3))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return n * (4 * n - 1) / 3\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return 4*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #initialise variables\n    pi = math.pi\n    area_sphere = 4/3 * pi * r**3\n    volume_sphere = 4 * pi * r**3\n    \n    return volume_sphere,area_sphere\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + sum(ord(i) for i in strr[1:])%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr)==0:\n        return 0\n    else:\n        return (ord(strr)%26)\n        \nif __name__ == \"__main__\":\n    strr=input(\"Enter the string: \")\n    print(\"The ASCII value of the given string is: \",get_Char(strr)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for c in strr:\n        count += ord(c)\n    return (count % 26)\n    \n        "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    return int(strr)\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #str1 = input()\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) % 26 + ord(strr[1]) % 26 + ord(strr[2]) % 26\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    temp = \"\"\n    for i in range(len(strr)):\n        temp += chr((ord(strr[i]) + ord(strr[i])) % 26 + ord('A'))\n    return temp\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #utilising lambda function\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    #check if the string is empty\n    if strr==\"\":\n        return 0\n    \n    #initializing result\n    result = 0\n    \n    #traversing the string\n    for i in range(0,len(strr)):\n        \n        #checking for alpha\n        if strr[i]>='a' and strr[i]<='z':\n            result += ord(strr[i]) - ord('a')\n            \n        #checking for special characters\n        elif strr[i]>='A' and strr[i]<='Z':\n            result += ord(strr[i]) - ord('A') + 26\n            \n        #checking for numbers\n        elif strr[i]>='0' and strr[i]<='9':\n            result += ord(strr[i]) - ord('0') + 26\n            \n        #checking for spaces\n        elif strr[i]==' ':\n            result += ord(' ')\n        else:\n            return 0\n    \n    return result\n    \nif __name__ == '__main__':\n    \n    #Take input\n    strr = input()\n    \n    #Print output\n    print(get_Char(strr))"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    value = 0\n    for i in strr:\n        value = (ord(i) + value) % 26\n    return chr(value + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        a = ord(strr[i])\n        sum += a\n    ans = sum % 26\n    return chr(ans + 97)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    new = n\n    i = 0\n    while i < n:\n        if i == 0:\n            new = new - 1\n            i += 1\n        else:\n            new = new + 2\n            i += 1\n    return new\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1:\n        return 1\n    if n ==2:\n        return 2\n    return sequence(n-1)+sequence(n-2)\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    if n ==1:\n        return 1\n    if n ==2:\n        return 2\n    return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n-1) + (n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = int(n)\n    n -= 1\n    current = 1\n    i = 0\n    while i < n:\n        current = newman(current)\n        i += 1\n    return current\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def newman(n):\n        if n == 1: return 1\n        if n == 2: return 2\n        if n == 3: return 4\n        return newman(n-1) + newman(n-2) + newman(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2) + sequence(n-3) \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = str(n)\n    if int(n) >= 0:\n        return int(n)\n    else:\n        return 1 + sequence(abs(int(n)))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    pi = math.pi\n    area = pi*pow(r,2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    s = 4 * math.pi * r ** 2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI = math.pi\n    sphere = (4 * PI * r**2)\n    return sphere\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef surfacearea_cube(c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surface_area = 6*c**2\n    return surface_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = math.pi*r**2*(h/2)\n    return surface_area\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (a+b+c)/2\n    return area\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area = ((a+b+c)/2)*math.sqrt((a**2+b**2+c**2))\n    return surface_area\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area = a*b\n    return surface_area\ndef surfacearea_triangle_using_area(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area = (a+b+c)/2\n    return surface_area\ndef surfacearea_rectangle_using_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area = a*b\n    return surface_area\ndef area_triangle_using_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = ((a+b+c)/2)\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef surfacearea_cube(c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surface_area = 6*c**2\n    return surface_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = math.pi*r**2*(h/2)\n    return surface_area\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (a+b+c)/2\n    return area\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area = ((a+b+c)/2)*math.sqrt((a**2+b**2+c**2))\n    return surface_area\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area = a*b\n    return surface_area\ndef surfacearea_triangle_using_area(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area = (a+b+c)/2\n    return surface_area\ndef surfacearea_rectangle_using_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area = a*b\n    return surface_area\ndef area_triangle_using_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = ((a+b+c)/2)\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef surfacearea_cube(c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surface_area = 6*c**2\n    return surface_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = math.pi*r**2*(h/2)\n    return surface_area\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a**3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*(h/2)\n    return volume\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = a*b*c\n    return volume\ndef volume_cuboid_using_volume(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = a*b*c\n    return volume\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = a*b\n    return volume\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = (a+b+c)/2\n    return volume\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = math.pi*r**3/3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*(h/2)\n    return volume\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = a*b*c\n    return volume\ndef volume_cu"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surf = 4 * math.pi * r ** 2\n    return surf\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    def surfacearea_sphere1(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere2(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere3(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere4(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere5(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere6(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere7(r):\n        A = 4 * math.pi * r**2\n        return A\n    def surfacearea_sphere8(r):\n        A = 4 * math.pi * r**2\n        return A\n    return surfacearea_sphere1(r),surfacearea_sphere2(r),surfacearea_sphere3(r),surfacearea_sphere4(r),surfacearea_sphere5(r),surfacearea_sphere6(r),surfacearea_sphere7(r),surfacearea_sphere8(r)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    radius = r\n    surface_area = 4 * math.pi * radius**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = (4/3)*pi*r**3\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r*r*r\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(h+r)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2*math.pi*r*(h+r)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h+r)\n    \ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)\n    \ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a*b*c)/2\n    \ndef surfacearea_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a+b\n    \ndef volume_parallelogram(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\n    \ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a+b+c)*0.5\n    \ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (a+b+c)*0.5*d\n    \ndef surfacearea_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a+b\n    \ndef volume_parallelogram(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\n    \ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return 2*(a+b)\n    \ndef volume_square(a,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a*b\n    \ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(a+b)\n    \ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\n    \ndef surfacearea_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (a+h)*2\n    \ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a*h)/3\n    \ndef surfacearea_octahedron(a):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return 12*a\n    \ndef volume_octahedron(a):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    return (2/3*a)**3\n    \ndef surfacearea_dodecahedron(a,b):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 4*a+2*b\n    \ndef volume_dodecahedron(a,b):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return ((3*a-b)/3)**3\n    \ndef surfacearea_truncatedcuboid(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a truncated cuboid.\n    '''\n    return a+b+c+d+e\n    \ndef volume_truncatedcuboid(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a truncated cuboid.\n    '''\n    return a*b*c*d*e\n    \ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a+b+c)*0.5\n    \ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (a+b+c)*0.5*d\n    \ndef surfacearea_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return 4*a+2*b+2*c\n    \ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (1/3)*a*b*c\n    \ndef surfacearea_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (a+b+c)\n    \ndef volume_cube(a,b,c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a*b*c\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2*math.pi*r*(h+r)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h+r)\n    \ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)\n    \ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a*b*c)/2\n    \ndef surfacearea_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a+b\n    \ndef volume_parallelogram(a,b,c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\n    \ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = abs(n)\n    n = int(n)\n    return n**2 - (n/2)**2 + (n**2 - n)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num_of_nodes = 6 * n\n    return num_of_nodes * (num_of_nodes - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n, x, y):\n        '''\n        Given a center (x, y), calculate the first x+y centered hexagonal number\n        that has a non-negative number.\n        '''\n        total = 0\n        for i in range(1, n):\n            if i % 2 == 0:\n                x += 1\n            else:\n                y += 1\n            total += 1\n        return (total + x + y)\n    return centered_hexagonal_number_helper(n, 0, 0)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (((n*(n+1))//2)**0.5 + 1)**(1/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * n * (n * (n * (n + 1) // 2) + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # 1st num of center num\n    # (n + 1) * (2 * sqrt(3) - 1) // 2\n    \n    # 2nd num of center num\n    # (n + 1) * (2 * sqrt(3) + 1) // 2\n    \n    # 3rd num of center num\n    # (n + 1) * (2 * sqrt(3) + 2) // 2\n    \n    # 4th num of center num\n    # (n + 1) * (2 * sqrt(3) - 2) // 2\n    \n    # 5th num of center num\n    # (n + 1) * (2 * sqrt(3) + 2) // 2\n    \n    # 6th num of center num\n    # (n + 1) * (2 * sqrt(3) + 3) // 2\n    \n    # 7th num of center num\n    # (n + 1) * (2 * sqrt(3) - 3) // 2\n    \n    # 8th num of center num\n    # (n + 1) * (2 * sqrt(3) - 2) // 2\n    \n    # 9th num of center num\n    # (n + 1) * (2 * sqrt(3) + 3) // 2\n    \n    # 10th num of center num\n    # (n + 1) * (2 * sqrt(3) + 2) // 2\n    \n    # 11th num of center num\n    # (n + 1) * (2 * sqrt(3) + 1) // 2\n    \n    # 12th num of center num\n    # (n + 1) * (2 * sqrt(3) - 1) // 2\n    \n    # 13th num of center num\n    # (n + 1) * (2 * sqrt(3) - 2) // 2\n    \n    # 14th num of center num\n    # (n + 1) * (2 * sqrt(3) - 3) // 2\n    \n    # 15th num of center num\n    # (n + 1) * (2 * sqrt(3) - 4) // 2\n    \n    # 16th num of center num\n    # (n + 1) * (2 * sqrt(3) - 5) // 2\n    \n    # 17th num of center num\n    # (n + 1) * (2 * sqrt(3) - 6) // 2\n    \n    # 18th num of center num\n    # (n + 1) * (2 * sqrt(3) - 7) // 2\n    \n    # 19th num of center num\n    # (n + 1) * (2 * sqrt(3) - 8) // 2\n    \n    # 20th num of center num\n    # (n + 1) * (2 * sqrt(3) - 9) // 2\n    \n    # 21st num of center num\n    # (n + 1) * (2 * sqrt(3) - 10) // 2\n    \n    # 22nd num of center num\n    # (n + 1) * (2 * sqrt(3) - 11) // 2\n    \n    # 23rd num of center num\n    # (n + 1) * (2 * sqrt(3) - 12) // 2\n    \n    # 24th num of center num\n    # (n + 1) * (2 * sqrt(3) - 13) // 2\n    \n    # 25th num of center num\n    # (n + 1) * (2 * sqrt(3) - 14) // 2\n    \n    # 26th num of center num\n    # (n + 1) * (2 * sqrt(3) - 15) // 2\n    \n    # 27th num of center num\n    # (n + 1) * (2 * sqrt(3) - 16) // 2\n    \n    # 28th num of center num\n    # (n + 1) * (2 * sqrt(3) - 17) // 2\n    \n    # 29th num of center num\n    # (n + 1) * (2 * sqrt(3) - 18) // 2\n    \n    # 30th num of center num\n    # (n + 1) * (2 * sqrt(3) - 19) // 2\n    \n    # 31th num of center num\n    # (n + 1) * (2 * sqrt(3) - 20) // 2\n    \n    # 32th num of center num\n    # (n + 1) * (2 * sqrt(3) - 21) // 2\n    \n    # 33th num of center num\n    # (n + 1) * (2 * sqrt(3) - 22) // 2\n    \n    # 34th num of center num\n    # (n + 1) * (2 * sqrt(3) - 23) // 2\n    \n    # 35th num of center num\n    # (n + 1) * (2 * sqrt(3) - 24) // 2\n    \n    # 36th num of center num\n    # (n + 1) * (2 * sqrt(3) - 25) // 2\n    \n    # 37th num of center num\n    # (n + 1) * (2 * sqrt(3) - 26) // 2\n    \n    # 38th num of center num\n    # (n + 1) * (2 * sqrt(3) - 27) // 2\n    \n    # 39th num of center num\n    # (n + 1) * (2 * sqrt(3) - 28) // 2\n    \n    # 40th num of center num\n    # (n + 1) * (2 * sqrt(3) - 29) // 2\n    \n    # 41th num of center num\n    # (n + 1) * (2 * sqrt(3) - 30) // 2\n    \n    # 42th num of center num\n    # (n + 1) * (2 * sqrt(3) - 31) // 2\n    \n    # 43th num of center num\n    # (n + 1) * (2 * sqrt(3) - 32) // 2\n    \n    # 44th num of center num\n    # (n + 1) * (2 * sqrt(3) - 33) // 2\n    \n    # 45th num of center num\n    # (n + 1) * (2 * sqrt(3) - 34) // 2\n    \n    # 46th num of center num\n    # (n + 1) * (2 * sqrt(3) - 35) // 2\n    \n    # 47th num of center num\n    # (n + 1) * (2 * sqrt(3) - 36) // 2\n    \n    # 48th num of center num\n    # (n + 1) * (2 * sqrt(3) - 37) // 2\n    \n    # 49th num of center num\n    # (n + 1) * (2 * sqrt(3) - 38) // 2\n    \n    # 50th num of center num\n    # (n + 1) * (2 * sqrt(3) - 39) // 2\n    \n    # 51th num of center num\n    # (n + 1) * (2 * sqrt(3) - 40) // 2\n    \n    # 52th num of center num\n    # (n + 1) * (2 * sqrt(3) - 41) // 2\n    \n    # 53th num of center num\n    # (n + 1) * (2 * sqrt(3) - 42) // 2\n    \n    # 54th num of center num\n    # (n + 1) * (2 * sqrt(3) - 43) // 2\n    \n    # 55th num of center num\n    # (n + 1) * (2 * sqrt(3) - 44) // 2\n    \n    # 56th num of center num\n    # (n + 1) * (2 * sqrt(3) - 45) // 2\n    \n    # 57th num of center num\n    # (n + 1) * (2 * sqrt(3) - 46) // 2\n    \n    # 58th num of center num\n    # (n + 1) * (2 * sqrt(3) - 47) // 2\n    \n    # 59th num of center num\n    # (n + 1) * (2 * sqrt(3) - 48) // 2\n    \n    # 60th num of center num\n    # (n + 1) * (2 * sqrt(3) - 49) // 2\n    \n    # 61st num of center num\n    # (n + 1) * (2 * sqrt(3) - 50) // 2\n    "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 6*n**2 + 4*n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # get binary number as list\n    binary = list(reversed(bin(n)[2:]))\n    \n    # remove '0b' from end of list\n    while binary[-1] == '0':\n        binary.pop(-1)\n    \n    # adjust '1' to the last position to make it 3 digits\n    while len(binary)!= 3:\n        binary.insert(len(binary), '0')\n    \n    # reverse the binary number\n    binary = list(reversed(binary))\n    \n    # make the binary number into a string\n    binary = ''.join(binary)\n    \n    # make hex number from binary string\n    hex_number = int(binary, 2)\n    \n    return hex_number\n    \nif __name__ == '__main__':\n    # run the tests\n    assert centered_hexagonal_number(4) == 7\n    assert centered_hexagonal_number(10) == 226\n    assert centered_hexagonal_number(22) == 4915\n    print('All tests passed')\n    \n    # run your function\n    print(centered_hexagonal_number(50))"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (math.sqrt(3)*(n/2) - math.sqrt(3)*(n/2) - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_help(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 7\n        else:\n            return centered_hexagonal_number_help(n-1) + centered_hexagonal_number_help(n-2) + centered_hexagonal_number_help(n-3)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    if dict1 == {} and dict2 == {} and dict3 == {}:\n        return None\n    \n    if dict1!= {} and dict2 == {} and dict3 == {}:\n        return dict1\n    if dict1 == {} and dict2!= {} and dict3 == {}:\n        return dict2\n    if dict1 == {} and dict2 == {} and dict3!= {}:\n        return dict3\n    \n    if dict1 == {} or dict2 == {} or dict3 == {}:\n        return None\n    \n    # Here we have something that we need to add together.\n    merged_dict = {}\n    \n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    \n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    \n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    \n    if dict1 == {} and dict2 == {}:\n        return None\n    \n    if dict1!= {} and dict2 == {}:\n        return dict1\n    \n    if dict1 == {} and dict2!= {}:\n        return dict2\n    \n    if dict1 == {} and dict2 == {}:\n        return None\n    \n    # Here we have something that we need to add together.\n    merged_dict = {}\n    \n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    \n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    \n    return merged_dict\n    \ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge a dictionary into another dictionary.\n    '''\n    \n    if dict1 == {}:\n        return None\n    \n    if dict1!= {}:\n        return dict1\n    \n    if dict1 == {}:\n        return None\n    \n    # Here we have something that we need to add together.\n    merged_dict = {}\n    \n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    \n    return merged_dict\n    \ndef add_to_dict(user_info, info):\n    '''\n    Write a function that will add two dictionaries together.\n    '''\n    if user_info == None or info == None:\n        return None\n    \n    if user_info == {} or info == {}:\n        return None\n    \n    new_dict = {}\n    \n    for key in user_info:\n        new_dict[key] = user_info[key]\n    \n    for key in info:\n        new_dict[key] = info[key]\n    \n    return new_dict\n    \ndef multiply_dictionary(dict1,dict2):\n    '''\n    Write a function that will multiply two dictionaries together.\n    '''\n    if dict1 == {} or dict2 == {}:\n        return None\n    \n    if dict1!= {} and dict2!= {}:\n        return None\n    \n    if dict1 == {} and dict2 == {}:\n        return None\n    \n    if dict1 == {} and dict2 == {}:\n        return None\n    \n    new_dict = {}\n    \n    for key in dict1:\n        new_dict[key] = dict1[key]*dict2[key]\n    \n    return new_dict\n    \ndef create_dict_with_list(dic, *args):\n    '''\n    Write a function that will create a dictionary that contains a list of dictionaries.\n    '''\n    if dic == {} or args == ():\n        return None\n    \n    if dic!= {} or args!= ():\n        return None\n    \n    if dic == {} and args == ():\n        return None\n    \n    if dic == {} and args!= ():\n        return None\n    \n    new_dict = {}\n    \n    for i in range(len(args)):\n        new_dict[i] = args[i]\n    \n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge = {}\n    for i in dict1.keys():\n        merge[i] = dict1[i]\n    for i in dict2.keys():\n        merge[i] = dict2[i]\n    for i in dict3.keys():\n        merge[i] = dict3[i]\n    return merge\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for k,v in dict1.items():\n        result[k] = v\n    for k,v in dict2.items():\n        result[k] = v\n    for k,v in dict3.items():\n        result[k] = v\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1.keys():\n        dict1[key] = dict1.get(key) + dict2.get(key) + dict3.get(key)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n        else:\n            result[key] = dict1[key]\n    for key in dict3:\n        if key in result:\n            result[key] += dict3[key]\n        else:\n            result[key] = dict3[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1, **dict2, **dict3)\n    #pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2}\ndef merge_dictionaries_two_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\ndef delete_keys_from_dict(dict1,keys):\n    '''\n    Write a function to delete keys from a dictionary.\n    '''\n    for key in keys:\n        dict1.pop(key, None)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    print(count)\n    return(count)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    Dict = collections.Counter(list1)\n    return(Dict)\nlist1 = [1, 1, 2, 1, 3, 2, 2, 3, 3, 1, 3, 3, 4, 5, 5, 5, 4, 4]\nprint('Frequency count of list is: ', freq_count(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for n in list1:\n        if n not in freq:\n            freq[n] = 1\n        else:\n            freq[n] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        d[item] = d.get(item,0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\nprint(freq_count([1,2,3,3,4,4,3,3,1,3]))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dictionary={}\n    for i in list1:\n        if i not in frequency_dictionary:\n            frequency_dictionary[i]=1\n        else:\n            frequency_dictionary[i]=frequency_dictionary[i]+1\n    return frequency_dictionary\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        if N < 3:\n            return N\n        else:\n            dif = 0\n            for i in range(1, N):\n                dif = min(i, dif)\n                if dif == 0:\n                    return i\n                else:\n                    if i == 2:\n                        return i\n                    else:\n                        return dif\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def func(n):\n        diff = abs(n - n%10)\n        if n%10 < n:\n            return n%10\n        else:\n            return n%10 - 1\n    return func(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # print(N)\n    # print('->',N//10)\n    # print('->',N%10)\n    # print('->',N//100)\n    # print('->',N%100)\n    # print('->',N//1000)\n    # print('->',N%1000)\n    # print('->',N//10000)\n    # print('->',N%10000)\n    if N%10==9:\n        return N-1\n    elif N%10<5:\n        return N+1\n    elif N%10<3:\n        return N-2\n    else:\n        return N+2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        return N // 2\n    else:\n        return (N + 1) // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    i = 1\n    while i < n:\n        if (n - i) < (i - n):\n            return i\n        else:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1,N+1):\n        if abs(N-i) <= abs(N-i-1):\n            return i\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 1:\n        left = 2\n        right = N\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == N:\n                return mid\n            elif mid * mid < N:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N == 0 or N == 1):\n        return N\n    if (N % 2 == 0):\n        return (N / 2)\n    else:\n        if (N % 3 == 0):\n            return (N - 1)\n        return (N + 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N - 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_log = []\n    for x in list1:\n        if x not in len_log:\n            len_log.append(x)\n    print(len_log)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for word in list1:\n        if len(word) > len_log.count:\n            len_log.count = len(word)\n        else:\n            continue\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split(\" \")\n    list1.sort(reverse=True)\n    max1=len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i]) > max1:\n            max1=len(list1[i])\n    return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # write your code here\n    i = 0\n    l = 0\n    while i < len(list1):\n        for j in range(i, len(list1)):\n            if list1[j] > list1[l]:\n                l = j\n        i = l + 1\n        l = 0\n    return l + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(len_log(l) for l in list1) + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # your code here\n    maxi = 0\n    for i in list1:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return 1 + len_log(list1[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #getting the length of the longest word in the given sentence \n    if len(list1)==0:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            for j in range(0,len(list1)):\n                if len(list1[i])>len(list1[j]):\n                    longest=list1[i]\n        return len(longest)\n        "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            print(\"1\")\n        else:\n            print(\"0\")\n    \n    \n    \n    \ndef check_number_of_matches(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in str1:\n        if i in sub_str:\n            count += 1\n            print(count)\n    \n    if count == 0:\n        print(\"0\")\n    else:\n        print(count)\n            \n            \n    \n    \n    \ndef find_match(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"1\")\n    else:\n        print(\"0\")\n        \n        \n        \n        \n        \ndef check_index_of_element(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if sub_str == str1[i]:\n            print(i)\n            \n            \n            \n        \n        \n        \n        \ndef check_index_of_element_2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(0, len(str1)):\n        if sub_str == str1[i]:\n            print(i)\n    \n    \n    \n    \n    \ndef check_if_substring_exist(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"1\")\n    else:\n        print(\"0\")\n    \n    \n    \n    \n    \ndef check_if_substring_exist_2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if sub_str == str1[i]:\n            print(\"1\")\n            break\n        i += 1\n        \n        \n        \n    \n    \ndef check_if_substring_exist_3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i:len(sub_str)+i] == sub_str:\n            print(\"1\")\n            break\n        i += 1\n    \n    \n    \n    \n    \ndef check_if_substring_exist_4(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"1\")\n    else:\n        print(\"0\")\n        \n        \n        \n        \n        \ndef remove_characters(str1, sub_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    sub_str = str1.replace(sub_str,\"\")\n    print(sub_str)\n    \n    \n    \n    \n    \ndef remove_characters_2(str1, sub_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    sub_str = str1[0:str1.find(sub_str)]\n    print(sub_str)\n    \n    \n    \n    \n    \ndef replace_characters(str1, sub_str, new_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    sub_str = str1.replace(sub_str,new_str)\n    print(sub_str)\n    \n    \n    \n    \n    \ndef replace_characters_2(str1, sub_str, new_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    sub_str = str1.split(sub_str)\n    print(sub_str)\n    \n    \n    \n    \n    \ndef remove_characters_3(str1, sub_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    if sub_str in str1:\n        sub_str = str1.split(sub_str)\n        print(sub_str)\n    else:\n        print(\"0\")\n        \n        \n        \n        \n        \ndef remove_characters_4(str1, sub_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    i = str1.find(sub_str)\n    if i!= -1:\n        str1 = str1[:i]+str1[i+len(sub_str):]\n        print(str1)\n    else:\n        print(\"0\")\n        \n        \n        \n        \n        \ndef replace_characters_5(str1, sub_str, new_str):\n    '''\n    Write a function to remove a character from a given string.\n    '''\n    i = str1.find(sub_str)\n    if i!= -1:\n        str1 = str1[:i]+new_str+str1[i+len(sub_str):]\n        print(str1)\n    else:\n        print(\"0\")\n        \n        \n        \n        \n        \ndef find_index_of_element_2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if sub_str == str1[i]:\n            print(i)\n            \n            \n            \n    \n    \n    \ndef find_index_of_element_3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        for i in range(0, len(str1)):\n            if str1[i] == sub_str:\n                print(i)\n    else:\n        print(\"0\")\n    \n    \n    \n    \n    \ndef find_index_of_element_4(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if sub_str == str1[i]:\n            print(i)\n            break\n        i += 1\n    \n    \n    \n    \n    \ndef find_index_of_element_5(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i:len(sub_str)+i] == sub_str:\n            print(i)\n            break\n        i += 1\n    \n    \n    \n    \n    \ndef find_index_of_element_6(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i:len(sub_str)+i] == sub_str:\n            print(i)\n            break\n        i += 1\n    \n    \n    \n    \n    \ndef find_index_of_element_7(str1, sub_str):\n    '''\n    Write a function to check if "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i:].startswith(sub_str):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for val in str1:\n        if sub_str in val:\n            count+=1\n    if count == len(str1):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1 or not sub_str:\n        return False\n    \n    for i in range(len(str1) - len(sub_str) + 1):\n        for j in range(len(sub_str)):\n            if str1[i + j]!= sub_str[j]:\n                break\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)):\n        sub = str1[i:i+len(sub_str)]\n        if sub == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == sub_str[0]:\n            for j in range(len(sub_str)):\n                if str1[i + j]!= sub_str[j]:\n                    break\n                if j == len(sub_str) - 1:\n                    count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str in str1:\n        if sub_str in str:\n            print(\"True\")\n        else:\n            print(\"False\")\n            \n        \ndef make_name_in_english(name):\n    '''\n    Write a Python program to capitalize the first and last character of each word of a given string.\n    '''\n    words = name.split(\" \")\n    for i in range(0, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n        words[i] = words[i][0].upper() + words[i][1:]\n    name = \" \".join(words)\n    return name\n    \n    \ndef split_name(name):\n    '''\n    Write a Python program to split a given string into a list. \n    '''\n    name = name.split(\" \")\n    return name\n    \n    \ndef roman_to_int(roman_num):\n    '''\n    Write a Python program to convert a roman numeral to an integer.\n    '''\n    rom_num = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    num = 0\n    for i, char in enumerate(roman_num):\n        if i + 1 < len(roman_num):\n            if rom_num[char] < rom_num[roman_num[i + 1]]:\n                num -= rom_num[char]\n            else:\n                num += rom_num[char]\n    return num\n    \n    \ndef shunt_string(string):\n    '''\n    Write a Python program to convert a given string to a tuple. \n    '''\n    if isinstance(string, str):\n        string = string.replace(\" \",\"\")\n        \n        i = 0\n        while i < len(string) - 1:\n            if string[i] == \",\" and string[i+1].isnumeric():\n                string = string[:i] + string[i+2:]\n            i += 1\n        string = string[:-1]\n        tuple_string = tuple(string.split(\",\"))\n        return tuple_string\n    else:\n        return \"Invalid Input\"\n    \n    \ndef hash_table():\n    '''\n    Write a Python program to implement a hash table using dictionaries. \n    '''\n    hash_table = {'key1': 'value1', 'key2': 'value2'}\n    hash_table[\"key3\"] = \"value3\"\n    \n    print(hash_table.get('key1'))\n    print(hash_table.get('key2'))\n    print(hash_table.get('key3'))\n    \n    \ndef strings_and_bytes():\n    '''\n    Write a Python program to count the number of characters (character frequency) in a string. \n    Sample String : google.com'\n    Expected Result : {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1,'m': 1, 'c': 1}\n    '''\n    string = 'google.com'\n    \n    freq = {}\n    for char in string:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    \n    print(freq)\n    \n    \ndef zigzag_conversion(string):\n    '''\n    Write a Python program to convert a string into a zigzag format. \n    Expected Output: \"GRLWNEC\"\n    '''\n    zigzag = \"\"\n    \n    for i in range(0, len(string)):\n        if i % 2 == 0:\n            zigzag += string[i]\n        else:\n            zigzag += string[i].upper()\n    \n    return zigzag\n    \n    \ndef swap_list_elements(list):\n    '''\n    Write a Python program to swap two list elements using third variable. \n    '''\n    temp = list[0]\n    list[0] = list[1]\n    list[1] = temp\n    return list\n    \n    \ndef merge_sort(nums):\n    '''\n    Write a Python program to sort (ascending and descending) a dictionary by value. \n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    mid = len(nums) // 2\n    \n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    \n    return merge(left, right)\n    \n    \ndef merge(left, right):\n    '''\n    Write a Python program to merge two sorted list. \n    '''\n    result = []\n    while len(left)!= 0 and len(right)!= 0:\n        if left[0] < right[0]:\n            result.append(left[0])\n            left.pop(0)\n        else:\n            result.append(right[0])\n            right.pop(0)\n    \n    if len(left) == 0:\n        result += right\n    else:\n        result += left\n    \n    return result\n    \n    \ndef un_sort_dict(dict):\n    '''\n    Write a Python program to sort a dictionary by key.\n    '''\n    return sorted(dict.items(), key=lambda x: x[1])\n    \n    \ndef heap_sort(arr):\n    '''\n    Write a Python program to sort (ascending and descending) a dictionary by value. \n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    n = len(arr) // 2\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    \n    for i in range(n, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n        \n    return arr\n    \n    \ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    \n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n        \n        \ndef edit_distance(s1, s2):\n    '''\n    Write a Python program to calculate the edit distance between two strings. \n    '''\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n    \n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    \n    return distances[-1]\n    \n    \ndef array_manipulation(n, queries):\n    '''\n    Write a Python program to calculate the sum of contiguous subarray within a single array. \n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += queries[i]\n        i += queries[i]\n    return sum\n    \n    \ndef three_sum(nums):\n    '''\n    Write a Python program to compute the product of the triplets whose sum is zero.\n    '''\n    if len(nums) < 3:\n        return \"Invalid Input\"\n    \n    nums.sort()\n    \n    for i in range(len(nums) - 2):\n        if i == 0 or nums[i]!= nums[i-1]:\n            low = i + 1\n            high = len(nums) - 1\n            while low < high:\n                sum = nums[i] + nums[low] + nums[high]\n                if sum == 0"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+l] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_num(n):\n        if(n%2==0):\n            return False\n        if(n%3==0):\n            return False\n        if(n%5==0):\n            return False\n        if(n%7==0):\n            return False\n        if(n%11==0):\n            return False\n        if(n%13==0):\n            return False\n        if(n%17==0):\n            return False\n        if(n%19==0):\n            return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 4:\n        return False\n    else:\n        if (n % 5 == 0):\n            return True\n        else:\n            if (n % 3 == 0):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 5 == 0 and n % 3 == 0: \n        return True\n    elif n % 5 == 0 and n % 3!= 0:\n        return True\n    elif n % 5!= 0 and n % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # 1st approach\n    # if n % 2 == 0:\n    #     if n == 0:\n    #         return True\n    #     else:\n    #         return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    while(n > 1):\n        if n % 2 == 0: \n            n = n/2\n        else: \n            n = 3*n + 1\n    if n == 1:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Iterate over odd numbers and check if they are divisible by all even numbers.\n    # Iterate over even numbers and check if they are divisible by all odd numbers.\n    # Return true if all these are true and false otherwise.\n    odds = set()\n    evens = set()\n    for i in range(2, n):\n        if i % 2 == 0:\n            evens.add(i)\n        else:\n            odds.add(i)\n    if odds == evens:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n%10!= 0 and n%3!= 0 and n%7!= 0 and n%11!= 0 and n%13!= 0 and n%17!= 0 and n%19!= 0):\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        if (n == 0) or (n == 1): \n            return True\n        else: \n            return False\n    else: \n        if (n % 2 == 1): \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29 or n == 31 or n == 37 or n == 41 or n == 43 or n == 47 or n == 53 or n == 59 or n == 61 or n == 67 or n == 71 or n == 73 or n == 79 or n == 83 or n == 89 or n == 97):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    ans = 1\n    for i in range(b):\n        ans = ans*a\n    return ans\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a*power(a,b-1)\nprint(power(3,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    lowest = test_list[0]\n    for x in test_list:\n        if x[0] < lowest[0]:\n            lowest = x\n    return (lowest)\n    \n    \ndef index_minimum2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        if i == 0:\n            minimum = test_list[0]\n            break\n    for j in range(i+1, len(test_list)):\n        if test_list[j][0] < minimum[0]:\n            minimum = test_list[j]\n    return (minimum)\n    \n    \ndef index_minimum3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum5(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum6(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum7(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum8(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum9(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum10(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum11(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum12(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum13(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum14(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum15(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum16(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum17(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum18(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum19(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < minimum[0]:\n            minimum = test_list[i]\n    return (minimum)\n    \n    \ndef index_minimum20(test_list):\n    '''\n    Given a list of tuples, write a function that returns th"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list1 = list(test_list)\n    for i in range(len(list1)):\n        list1[i] = list(list1[i])\n        list1[i][1] = int(list1[i][1])\n    list1.sort(key=itemgetter(1))\n    return list1[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list,key=itemgetter(1))\n    return min_value[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in increasing order of the second element\n    # Return the first item of the sorted list\n    \n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = max(test_list, key=lambda x: x[1])[0]\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tup = min(test_list, key=itemgetter(1))\n    return min_tup\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\ndef index_total_odd(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of all tuples with an odd second value.\n    '''\n    odd_total = 0\n    for item in test_list:\n        if item[1]%2!= 0:\n            odd_total += item[0]\n    return odd_total\ndef index_total_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of all tuples with an even second value.\n    '''\n    even_total = 0\n    for item in test_list:\n        if item[1]%2 == 0:\n            even_total += item[0]\n    return even_total\ndef index_odd_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the indices of the tuples with odd second values.\n    '''\n    odd_indices = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2!= 0:\n            odd_indices.append(item)\n    return odd_indices\ndef index_even_odd(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the indices of the tuples with even second values.\n    '''\n    even_indices = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_indices.append(item)\n    return even_indices\ndef index_max_or_min(test_list, mode):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest or smallest second value.\n    '''\n    if mode =='max':\n        return max(test_list, key=itemgetter(1))\n    elif mode =='min':\n        return min(test_list, key=itemgetter(1))\ndef index_max_or_min_odd(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest or smallest second value.\n    '''\n    odd_list = []\n    odd_max = -1\n    for item in range(len(test_list)):\n        if test_list[item][1]%2!= 0:\n            odd_list.append(test_list[item])\n    odd_max = max(odd_list, key=itemgetter(1))\n    return odd_max[0]\ndef index_max_or_min_even(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest or smallest second value.\n    '''\n    even_list = []\n    even_min = -1\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_list.append(test_list[item])\n    even_min = min(even_list, key=itemgetter(1))\n    return even_min[0]\ndef index_of_second_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the second largest value.\n    '''\n    even_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_list.append(test_list[item])\n    return max(even_list, key=itemgetter(1))[0]\ndef index_of_second_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the second smallest value.\n    '''\n    even_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_list.append(test_list[item])\n    return min(even_list, key=itemgetter(1))[0]\ndef index_of_second_largest_or_min(test_list, mode):\n    '''\n    Given a list of tuples, write a function that returns the index of the second largest value or the index of the smallest value.\n    '''\n    if mode =='max':\n        max_index = index_of_second_largest(test_list)\n        return max_index\n    elif mode =='min':\n        min_index = index_of_second_smallest(test_list)\n        return min_index\ndef index_of_third_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the third largest value.\n    '''\n    odd_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2!= 0:\n            odd_list.append(test_list[item])\n    return max(odd_list, key=itemgetter(1))[0]\ndef index_of_third_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the third smallest value.\n    '''\n    even_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_list.append(test_list[item])\n    return min(even_list, key=itemgetter(1))[0]\ndef index_of_third_largest_or_min(test_list, mode):\n    '''\n    Given a list of tuples, write a function that returns the index of the third largest value or the index of the smallest value.\n    '''\n    if mode =='max':\n        max_index = index_of_third_largest(test_list)\n        return max_index\n    elif mode =='min':\n        min_index = index_of_third_smallest(test_list)\n        return min_index\ndef index_of_fourth_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the fourth largest value.\n    '''\n    odd_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2!= 0:\n            odd_list.append(test_list[item])\n    return max(odd_list, key=itemgetter(1))[0]\ndef index_of_fourth_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the fourth smallest value.\n    '''\n    even_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%2 == 0:\n            even_list.append(test_list[item])\n    return min(even_list, key=itemgetter(1))[0]\ndef index_of_fourth_largest_or_min(test_list, mode):\n    '''\n    Given a list of tuples, write a function that returns the index of the fourth largest value or the index of the smallest value.\n    '''\n    if mode =='max':\n        max_index = index_of_fourth_largest(test_list)\n        return max_index\n    elif mode =='min':\n        min_index = index_of_fourth_smallest(test_list)\n        return min_index\ndef index_of_fifth_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the fifth largest value.\n    '''\n    odd_list = []\n    for item in range(len(test_list)):\n        if test_list[item][1]%"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(max(lst, key = len))\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_length = len(lst[0])\n        for i in range(1, len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n        return min_length\n    "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(max(lst, key=len))\n    for i in range(len(lst)):\n        if len(lst[i])<min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==0:\n        return 0\n    minlen=len(lst[0])\n    for i in lst:\n        if len(i)<minlen:\n            minlen=len(i)\n    return minlen\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = len(lst[0])\n    for item in lst:\n        if len(item) < smallest_length:\n            smallest_length = len(item)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if len(min)>=len(lst[i]):\n            min=lst[i]\n    return len(min)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest=0\n    min_length=0\n    for i in lst:\n        if len(i)<=min_length:\n            min_length=len(i)\n    for i in lst:\n        if len(i)==min_length:\n            return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l=len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if j<l:\n                l=len(lst[i][j])\n                break\n    return l\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_list = []\n    for i in range(1, n+1):\n        if (n % i == 0):\n            divisor_list.append(i)\n    return(divisor_list)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n//2 + 1):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return (n+1)//2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n + 1 - divisor(n - 1)\n    \n    \n    \ndef count_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return divisor(n)\n    \n    \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if(n == 1):\n        return 1\n    count = 2\n    while(n%count!= 0):\n        count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i <= n:\n        if n % i == 0:\n            c = c + 1\n        i = i + 1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        for y in x:\n            if y in freq:\n                freq[y] = freq[y] + 1\n            else:\n                freq[y] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict={}\n    for i in list1:\n        if i in dict.keys():\n            dict[i]=dict[i]+1\n        else:\n            dict[i]=1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in counts:\n                counts[j] += 1\n            else:\n                counts[j] = 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # List to store frequencies of each element in the list\n    freq_list = []\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i not in d:\n            d[i]=0\n        d[i]=d[i]+1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your Code here\n    list = []\n    for element in list1:\n        for e in element:\n            if e not in list:\n                list.append(e)\n    frequency = {}\n    for i in list:\n        frequency[i] = list1.count(i)\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {i:list1.count(i) for i in list1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_mul = 1\n    for x in numbers:\n        numbers_mul *= x\n    return numbers_mul / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # logic:\n    # use a for loop and set total = 1\n    # increment total by the current number in the loop\n    # divide total by the length of the list\n    # return total\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_sum = 0\n    for num in numbers:\n        num_sum += num\n    return num_sum / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    result = numbers[0]\n    for x in numbers[1:]:\n        result = result * x\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for number in numbers:\n        multiply *= number\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #my code starts here:\n    total = 1\n    for num in numbers:\n        total = total*num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y : x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        if n % 2 == 0: \n            binary = binary + '0'\n        else: \n            binary = binary + '1'\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    \n    return decimal_to_binary(n//2) + str(n % 2) \n    \nprint(\"Decimal to binary conversion:\", decimal_to_binary(123))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\").zfill(36)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert isinstance(n, int)\n    \n    if n < 2:\n        return str(n)\n    \n    # recursively call the function for 1 and 2\n    return ''.join([decimal_to_binary(n//2), str(n % 2)])\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #n = int(n)\n    if n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # using list comprehension for an optimized solution\n    # instead of manually converting it into a binary string\n    return bin(n).replace(\"0b\", \"\").zfill(8) \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Edge case\n    if n == 0:\n        return \"0\"\n    # Recursive function\n    if n == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(n >> 1) + str(n & 1)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b', '')\n    \ndef reverse_binary(s):\n    '''\n    Write a function to reverse the digits of the given binary number (represented as a string).\n    '''\n    s = s[::-1]\n    return int(s, 2)\n    \ndef prefix_notation(s):\n    '''\n    Write a function to convert the given decimal number to its prefix notation, represented as a string.\n    '''\n    return ''.join(['0' * (len(s) - i - 1) + str(i) for i in range(0, len(s))])\n    \ndef decimal_to_prefix_notation(n):\n    '''\n    Write a function to convert the given decimal number to its prefix notation, represented as a string.\n    '''\n    return prefix_notation(decimal_to_binary(n))\n    \ndef prefix_notation_to_decimal(s):\n    '''\n    Write a function to convert the given prefix notation to its decimal equivalent, represented as an integer.\n    '''\n    return int(s, 2)\n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string.\n    '''\n    return oct(n).replace('0o', '')\n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string.\n    '''\n    return hex(n).replace('0x', '').upper()\n    \ndef octal_to_decimal(s):\n    '''\n    Write a function to convert the given octal number to its decimal equivalent, represented as an integer.\n    '''\n    return int(s, 8)\n    \ndef decimal_to_binary_conversion(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_binary(n)[::-1] + decimal_to_binary_conversion(n - 1)\n    \ndef decimal_to_binary_conversion_recursive(n, current_binary_str = ''):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string.\n    '''\n    if n == 0:\n        return current_binary_str\n    return decimal_to_binary_conversion_recursive(n - 1, current_binary_str + '0') + decimal_to_binary_conversion_recursive(n - 1, current_binary_str + '1')\n    \ndef binary_to_decimal_conversion(binary):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as an integer.\n    '''\n    binary = binary.strip()\n    if not binary:\n        return 0\n    return decimal_to_binary_conversion_recursive(len(binary), '') + binary\n    \ndef binary_to_decimal_conversion_recursive(binary, current_decimal = 0):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as an integer.\n    '''\n    if not binary:\n        return current_decimal\n    return binary_to_decimal_conversion_recursive(binary[:-1], current_decimal + int(binary[-1]))\n    \ndef hex_to_decimal(s):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as an integer.\n    '''\n    return int(s, 16)\n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_hexadecimal(n - 1) + hex(n)[2:]\n    \ndef decimal_to_base_ten_conversion(n, base):\n    '''\n    Write a function to convert the given decimal number to its base-ten equivalent, represented as a string.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_base_ten_conversion(n//base, base) + str(n%base)\n    \ndef base_ten_to_decimal(s, base):\n    '''\n    Write a function to convert the given base-ten number to its decimal equivalent, represented as an integer.\n    '''\n    s = s.strip()\n    if not s:\n        return 0\n    return base_ten_to_decimal(s[:-1], base) + int(s[-1]) * base ** (len(s) - 1)\n    \ndef base_ten_to_decimal_recursive(s, base, current_decimal = 0):\n    '''\n    Write a function to convert the given base-ten number to its decimal equivalent, represented as an integer.\n    '''\n    if not s:\n        return current_decimal\n    return base_ten_to_decimal_recursive(s[:-1], base, current_decimal + int(s[-1]) * base ** (len(s) - 1))\n    \ndef decimal_to_binary_string_conversion(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent as a string.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_binary_string_conversion(n - 1) + '0'\n    \ndef decimal_to_binary_string_conversion_recursive(n, current_binary_str = ''):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent as a string.\n    '''\n    if n == 0:\n        return current_binary_str\n    return decimal_to_binary_string_conversion_recursive(n - 1, current_binary_str + '0') + decimal_to_binary_string_conversion_recursive(n - 1, current_binary_str + '1')\n    \ndef binary_to_decimal_string_conversion(binary):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent as a string.\n    '''\n    binary = binary.strip()\n    if not binary:\n        return '0'\n    return decimal_to_binary_string_conversion_recursive(len(binary), '') + binary\n    \ndef binary_to_decimal_string_conversion_recursive(binary, current_decimal = 0):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent as a string.\n    '''\n    if not binary:\n        return current_decimal\n    return binary_to_decimal_string_conversion_recursive(binary[:-1], current_decimal + int(binary[-1]))\n    \ndef decimal_to_hexadecimal_conversion(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_hexadecimal_conversion(n - 1) + hex(n)[2:]\n    \ndef hex_to_decimal_conversion(hexadecimal):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as an integer.\n    '''\n    return int(hexadecimal, 16)\n    \ndef hexadecimal_to_decimal_conversion(hexadecimal):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as an integer.\n    '''\n    return hex_to_decimal_conversion(hexadecimal)\n    \ndef hexadecimal_to_decimal_conversion_recursive(hexadecimal, current_decimal = 0):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as an integer.\n    '''\n    if not hexadecimal:\n        return current_decimal\n    return hexadecimal_to_decimal_conversion_recursive(hexad"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # This would be too slow\n    # if num == 0:\n    #     return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    i = 0\n    while(i < num):\n        if(is_palindrome(i) and is_palindrome(num-i)):\n            return i+1\n        i+=1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    res = num\n    while True:\n        res = res * 10 + num % 10\n        num = num // 10\n        if num == 0:\n            return res\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    l = len(s)\n    # print(l)\n    flag = 0\n    for i in range(0, l):\n        if (s[i] == '1'):\n            if (flag == 0):\n                if (l - i == 1):\n                    return (10 - (num%10))\n                else:\n                    if (s[i+1] == '0'):\n                        # print(\"here\", i)\n                        return (num - (num%(10**(l-i-2))*10))\n            flag = 1\n        elif (s[i] == '0'):\n            if (flag == 0):\n                if (i == 0):\n                    # print(\"here\", i)\n                    return (10 - (num%10))\n                else:\n                    if (s[i-1] == '1'):\n                        # print(\"here\", i)\n                        return (num - (num%(10**(l-i-2))*10))\n                    elif (s[i-1] == '0'):\n                        return (num + 1)\n                    flag = 1\n                    break\n                \n                \n    \nprint(next_smallest_palindrome(9789))\n'''\n5\n'''\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return num\n    l = len(num)\n    if num[0] == num[-1]:\n        return num[0]+next_smallest_palindrome(num[1:-1])\n    else:\n        return num[0]+next_smallest_palindrome(num[1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1 or num == 0:\n        return 1\n    \n    if num % 2 == 0:\n        num = num/2\n    else:\n        num = num + 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if (num & 1):\n        return num - 1\n    else:\n        return num // 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    start = 0\n    end = len(num) - 1\n    while start < end:\n        middle = (start + end)//2\n        #print(num[start:middle])\n        if num[start:middle] > num[middle:end]:\n            end = middle\n        else:\n            start = middle + 1\n    return int(num[start:] + num[:start])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not isinstance(num, int) or num < 0:\n        raise ValueError('Input to next_smallest_palindrome function is not integer and less than zero')\n    # list of numbers 1 to n \n    list_n = list(range(1, num))\n    # counting number of odd and even numbers in the list\n    odd_count = 0\n    even_count = 0\n    for i in range(0, len(list_n)):\n        if list_n[i] % 2 == 1:\n            odd_count = odd_count + 1\n        elif list_n[i] % 2 == 0:\n            even_count = even_count + 1\n    # if even number of even number and odd number of odd number is same, that means there is only one number which is odd and that number is the largest number in the list\n    # If odd number of even number and even number of odd number is same, that means there is only one number which is even and that number is the smallest number in the list\n    if odd_count == even_count:\n        if num % 2 == 0:\n            largest = max(list_n)\n        else:\n            largest = min(list_n)\n        if largest == num:\n            return 1\n        else:\n            return largest\n    # if even number of even number and odd number is not same\n    else:\n        # odd number\n        if odd_count > even_count:\n            for i in range(0, len(list_n)):\n                if list_n[i] % 2 == 1:\n                    list_n[i] = list_n[i] - 1\n            return max(list_n)\n        # even number\n        else:\n            for i in range(0, len(list_n)):\n                if list_n[i] % 2 == 0:\n                    list_n[i] = list_n[i] + 1\n            return min(list_n)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # if isinstance(num, int):\n    #     num = str(num)\n    #     if not num:\n    #         return 1\n    #     # return int(num[0] + num[-1])\n    #     return int(num[1:] + num[0])\n    # else:\n    #     return 1\n    # print(sys.getsizeof(num))\n    if isinstance(num, int):\n        num = str(num)\n        if not num:\n            return 1\n        return int(num[1:] + num[0])\n    else:\n        return 1\n        "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while(start <= end):\n        mid = (start+end) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            end = mid - 1\n        elif arr[mid] < k:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if k == 0:\n        return arr[0]\n    if k > n:\n        return -1\n    if n == k:\n        return arr[n-1]\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid == k-1:\n            return arr[mid]\n        elif k > mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if start > n-k+1:\n        return arr[end]\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n    if size == 0:\n        return -1\n    if k <= 0 or k > size:\n        return -1\n    for i in range(1, size):\n        if arr[i] < arr[i - 1]:\n            break\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == k:\n            return mid\n        \n        elif arr[mid] < k:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_len = len(arr)\n    \n    if k <= arr_len:\n        if k == 1:\n            return arr[0]\n        return kth_element(arr[k-1:], k-1)\n        \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # initializing n - 1 with the last element in the array\n    n = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # 1st approach - O(n) time | O(n) space\n    # for i in range(1, len(arr)+1):\n    #     if i == k:\n    #         return arr[i-1]\n    # return -1\n    \n    # 2nd approach - O(n) time | O(1) space\n    for i in range(1, len(arr)+1):\n        if i == k:\n            return arr[i-1]\n    return -1\n    \n    # 3rd approach - O(n) time | O(1) space\n    # if k == 1:\n    #     return arr[0]\n    # for i in range(1, len(arr)):\n    #     if k > i+1:\n    #         k -= i+1\n    #     else:\n    #         return arr[i-1]\n    # return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0 or k < 1:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == k-1:\n            return mid\n        elif k > mid:\n            if arr[mid] < k:\n                start = mid+1\n            else:\n                end = mid-1\n        else:\n            if arr[mid] > k:\n                end = mid-1\n            else:\n                start = mid+1\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # for word in word.split('_'):\n    #     print(word)\n    return word.title()\n    \n    \ndef first_word(word):\n    '''\n    Write a function that returns the first word in a string.\n    '''\n    return word.split(' ')[0]\n    \n    \ndef almost_there(n):\n    '''\n    Write a function that returns True if a number is within 10 of either 100 or 200.\n    '''\n    return True if (n > 90 and n < 110) or (n > 190 and n < 210) else False\n    \n    \ndef almost_there2(n):\n    '''\n    Write a function that returns True if a number is within 10 of either 100 or 200.\n    '''\n    return True if (n - 10) <= 100 <= n or (n - 10) <= 200 <= n else False\n    \n    \ndef front_back(str):\n    '''\n    Write a function that returns a string where the first and last chars have been exchanged.\n    '''\n    return str[-1:] + str[1:-1] + str[:1]\n    \n    \ndef front3(str):\n    '''\n    Write a function that returns a new string where the first, fourth, and fifth chars have been exchanged.\n    '''\n    return str[-1:] + str[3] + str[:3]\n    \n    \ndef front_end(str):\n    '''\n    Write a function that returns the string obtained by shifting the first char of the original string to the end.\n    '''\n    return str[1:] + str[:1]\n    \n    \ndef front3_end(str):\n    '''\n    Write a function that returns a new string where the first, fourth, and fifth chars have been exchanged.\n    '''\n    return str[-1:] + str[3] + str[:3]\n    \n    \ndef end_other(a, b):\n    '''\n    Write a function that returns True if a string is the same end as b.\n    '''\n    return a[-1:] == b[-1:] or a[:len(b)] == b\n    \n    \ndef end_other2(a, b):\n    '''\n    Write a function that returns True if a string is the same end as b.\n    '''\n    return a[-1:] == b[-1:] or a[:len(b)] == b\n    \n    \ndef xyz_there(str):\n    '''\n    Write a function that checks if the input string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.\n    '''\n    return True if str.find('xyz') > 0 and str.find('xyz')!= 0 and str.find('xyz')!= 1 else False\n    \n    \ndef double_char(str):\n    '''\n    Write a function that doubles every letter in a string.\n    '''\n    return str.replace('a', 'aa').replace('b', 'bb').replace('c', 'cc').replace('d', 'dd').replace('e', 'ee').replace('f', 'ff').replace('g', 'gg').replace('h', 'hh')\n    \n    \ndef count_hi(str):\n    '''\n    Write a function that counts the number of times that the string \"hi\" appears in the given string.\n    '''\n    return str.count('hi')\n    \n    \ndef cat_dog(str):\n    '''\n    Write a function that returns whether cat or dog.\n    '''\n    return str.lower().count('cat') == str.lower().count('dog')\n    \n    \ndef sort_last(tuples):\n    '''\n    Given a list of tuples, return a list sorted in descending order by the last element in each tuple.\n    '''\n    return sorted(tuples, key=lambda x: x[-1], reverse=True)\n    \n    \ndef make_abba(a, b):\n    '''\n    Write a function that returns the string made of the first 2 and last 2 chars of a and b.\n    '''\n    return a[:2] + b[-2:] + a[2:] + b[:2]\n    \n    \ndef make_tags(tag, word):\n    '''\n    Write a function called make_tags that takes in a tag and word, and returns a string with the\n    correctly formatted tags.\n    '''\n    return f'<{tag}>{word}</{tag}>'\n    \n    \ndef extra_end(str):\n    '''\n    Write a function that takes in a string and returns a new string with the 'ing'\n    removed.\n    '''\n    return str.replace('ing', '')\n    \n    \ndef first_two(str):\n    '''\n    Write a function that returns the string obtained by joining the first 2 chars\n    of a string.\n    '''\n    return str[:2]\n    \n    \ndef first_half(str):\n    '''\n    Write a function that returns the first half of a string.\n    '''\n    return str[:len(str)//2]\n    \n    \ndef without_end(str):\n    '''\n    Write a function that returns the string obtained by deleting the first and last char from a string.\n    '''\n    return str[1:-1]\n    \n    \ndef combo_string(a, b):\n    '''\n    Write a function that returns a string where all instances of the first char have been\n    replaced by a, all instances of the second char have been replaced by b, and all \n    consecutive occurrences of a and b have been replaced by ab.\n    '''\n    return a.replace(a, b) + b + a.replace(a, b)\n    \n    \ndef non_start(a, b):\n    '''\n    Write a function that returns True if a string starts with the sequence b, otherwise returns False.\n    '''\n    return a.startswith(b)\n    \n    \ndef left2(str):\n    '''\n    Write a function that takes a string and returns the string made of its first two chars, so the String left2(\"Hello\") returns \"He\".\n    '''\n    return str[:2]\n    \n    \ndef left2(str):\n    '''\n    Write a function that returns the same string, but with all of the characters to the left of the \n    first occurrence of a \"m\" removed.\n    '''\n    if str.count('m') > 0:\n        return str[str.find('m')+1:]\n    else:\n        return str\n    \n    \ndef left2_end(str):\n    '''\n    Write a function that returns the same string, but with all of the characters to the left of the last occurrence of a \"m\" removed.\n    '''\n    if str.count('m') > 0:\n        return str[:str.rfind('m')]\n    else:\n        return str\n    \n    \ndef first_two_end(str):\n    '''\n    Write a function that takes a string and returns the string made of the first two chars, so the String first_two_end(\"Hello\") returns \"He\".\n    '''\n    return str[:2] + str[2:len(str)]\n    \n    \ndef space_before(str):\n    '''\n    Write a function that takes in a string and returns a string where there are no spaces before the first \n    character, but there are spaces after the last character.\n    '''\n    if str.count(' ') == 0:\n        return str\n    else:\n        return str.strip()\n    \n    \ndef space_after(str):\n    '''\n    Write a function that takes in a string and returns a string where there are no spaces after the first character,\n    but there are spaces before the last character.\n    '''\n    if str.count(' ') == 0:\n        return str\n    else:\n        return str.strip()[:-1]\n    \n    \ndef double_char(str):\n    '''\n    Write a function that takes in a string and returns the string with each letter doubled.\n    '''\n    return ''.join(str[i]*2 for i in range(len(str)))\n    \n    \ndef no_teen_sum(a, b, c):\n    '''\n    Write a function that returns a sum o"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    x = ''\n    for i in word.split('_'):\n        x += i.capitalize()\n    return x\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = word.title()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([l.title() for l in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    string = \"\"\n    words = word.split('_')\n    for word in words:\n        string += word[0].upper() + word[1:]\n    return string\n    \nprint(snake_to_camel('this_is_a_snake'))"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            output += word[i + 1].upper()\n        else:\n            output += word[i].lower()\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Converts snake_case string to camel_case string\n    new_string = ''\n    \n    for i in word:\n        if i == \"_\":\n            new_string += i.upper()\n        else:\n            new_string += i.lower()\n    \n    return new_string\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 1:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    else:\n        return \"\".join([w.capitalize() for w in word.split(\"_\")])\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(math.factorial(n) / (math.factorial(n-m) * math.factorial(m)))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if n == 1 and m == 1:\n        return 2\n    return eulerian_num(n-1, m)+eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(2, n + 1): \n        if is_euler(n, i) and is_euler(m, i): \n            return i\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        if n % 2 == 0:\n            return eulerian_num(n/2, m)\n        else:\n            return eulerian_num(n-1, m)\n    else:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    while (n * m > a):\n        a += 1\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    summ = 0\n    summ += (n + m) * (n * m)\n    summ += (n + m - 1) * (n * m - 1) / 2\n    return int(summ)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m \n    if m == 1:\n        return n \n    if n > 1 and m > 1:\n        return eulerian_num(n - 2, m) + eulerian_num(n - 1, m - 1)\n    else:\n        return 0 \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Write your code here\n    if (n <= 0) or (m <= 0):\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #return sum(n for n in range(1, m + 1) if n%2!=0)\n    #return sum(n for n in range(1, m + 1) if n%2==0)\n    return sum(n for n in range(1, m + 1) if n%2!=0) - sum(n for n in range(1, m + 1) if n%2==0)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda sublist: sorted(sublist))\n    \n    \ndef sort_word_list(word_list):\n    '''\n    Given a list of words, sort them in alphabetical order.\n    For example::\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your function here\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted_list = []\n    for sublist in input_list:\n        sublist_sorted_list.append(sorted(sublist))\n    return sublist_sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each list in list of lists\n    for lst in input_list:\n        # for each string in list\n        for i in range(len(lst)):\n            # sort list[i] in alphabetical order\n            lst[i] = sorted(lst[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0].upper())\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_sublists = []\n    while input_list:\n        current_sublist = input_list.pop(0)\n        current_sublist.sort()\n        sorted_sublists.append(current_sublist)\n    return sorted_sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res=0\n    for i in lst:\n        if i==True:\n            res+=1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for item in lst:\n        if(item == True):\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for value in lst:\n        if(value):\n            count_true += 1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true = 0\n    false = 0\n    for i in lst:\n        if i == True:\n            true = true + 1\n        else:\n            false = false + 1\n    return true, false\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count += 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    for tup in test_list:\n        temp_list.append(tup + test_tup)\n    return temp_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # get the length of the given list\n    length_list = len(test_list)\n    # the length of the given tuples\n    length_tup = len(test_tup)\n    # iterate over the given tuples\n    for i in range(length_tup):\n        # append the lists\n        test_list.append(test_tup[i])\n    # return the list\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Expected tuple, got \"+str(type(test_tup)))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # if 'tuple' in type(test_list):\n    #     test_list.append(test_tup)\n    # else:\n    #     test_list = []\n    #     test_list.append(test_tup)\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for x in range(len(test_list)):\n        new_list.append(test_list[x] + test_tup[x])\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize list\n    merged_list = []\n    # if len(num1) > 0:\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0]<=num2[0]:\n                new_list.append(num1.pop(0))\n            else:\n                new_list.append(num2.pop(0))\n        elif num2 and num1:\n            new_list.append(num2.pop(0))\n        else:\n            new_list.append(num3.pop(0))\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ans = []\n    while len(num1) and len(num2) and len(num3):\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            ans.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            ans.append(num2.pop(0))\n        else:\n            ans.append(num3.pop(0))\n    while len(num1):\n        ans.append(num1.pop(0))\n    while len(num2):\n        ans.append(num2.pop(0))\n    while len(num3):\n        ans.append(num3.pop(0))\n    return ans\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0]:\n            final_list.append(num1.pop(0))\n        else:\n            final_list.append(num2.pop(0))\n    while len(num1) > 0:\n        final_list.append(num1.pop(0))\n    while len(num2) > 0:\n        final_list.append(num2.pop(0))\n    while len(num3) > 0:\n        final_list.append(num3.pop(0))\n    return final_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            l = l + 1\n            i = i + 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            l = l + 1\n            j = j + 1\n        elif num3[k] < num1[i] and num3[k] < num2[j]:\n            l = l + 1\n            k = k + 1\n    if i < len(num1):\n        l = l + 1\n    if j < len(num2):\n        l = l + 1\n    if k < len(num3):\n        l = l + 1\n    print(l)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ans = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            ans.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            ans.append(num2[j])\n            j += 1\n        else:\n            ans.append(num3[k])\n            k += 1\n    while i < len(num1):\n        ans.append(num1[i])\n        i += 1\n    while j < len(num2):\n        ans.append(num2[j])\n        j += 1\n    while k < len(num3):\n        ans.append(num3[k])\n        k += 1\n    return ans\n        \ndef merge_sorted_list_second(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ans = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            ans.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            ans.append(num2[j])\n            j += 1\n        else:\n            ans.append(num3[k])\n            k += 1\n    while i < len(num1):\n        ans.append(num1[i])\n        i += 1\n    while j < len(num2):\n        ans.append(num2[j])\n        j += 1\n    while k < len(num3):\n        ans.append(num3[k])\n        k += 1\n    return ans\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    num1=list(num1)\n    num2=list(num2)\n    num3=list(num3)\n    for i in range(len(num1)):\n        merged_list.append(num1[i])\n    for i in range(len(num2)):\n        merged_list.append(num2[i])\n    for i in range(len(num3)):\n        merged_list.append(num3[i])\n    merged_list.sort()\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    for i in range(len(num1)):\n        new_list.append(num1[i])\n    for i in range(len(num2)):\n        if num2[i] not in new_list:\n            new_list.append(num2[i])\n    for i in range(len(num3)):\n        if num3[i] not in new_list:\n            new_list.append(num3[i])\n    return new_list\nprint(merge_sorted_list([2,5,9,0,2,5,9],[6,8,9,1,2,3,4],[3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h1=[]\n    h2=[]\n    h3=[]\n    for i in range(len(num1)):\n        h1.append(num1[i])\n    for i in range(len(num2)):\n        h2.append(num2[i])\n    for i in range(len(num3)):\n        h3.append(num3[i])\n    return sorted(h1+h2+h3)\n    \ndef merge_sorted_list_1(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h1=[]\n    h2=[]\n    h3=[]\n    for i in range(len(num1)):\n        h1.append(num1[i])\n    for i in range(len(num2)):\n        h2.append(num2[i])\n    for i in range(len(num3)):\n        h3.append(num3[i])\n    return sorted(h1+h2+h3)\n    \ndef merge_sort_1(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_1(L)\n        merge_sort_1(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_2(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_2(L)\n        merge_sort_2(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_3(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_3(L)\n        merge_sort_3(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_4(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_4(L)\n        merge_sort_4(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_5(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_5(L)\n        merge_sort_5(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_6(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_6(L)\n        merge_sort_6(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_7(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort_7(L)\n        merge_sort_7(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\n    \ndef merge_sort_8(arr):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(num1) or index2 < len(num2) or index3 < len(num3):\n        if index1 >= len(num1):\n            sorted_list = sorted_list + num2[index2:]\n            return sorted_list\n        elif index2 >= len(num2):\n            sorted_list = sorted_list + num3[index3:]\n            return sorted_list\n        elif index3 >= len(num3):\n            sorted_list = sorted_list + num1[index1:]\n            return sorted_list\n        elif num1[index1] <= num2[index2] and num1[index1] <= num3[index3]:\n            sorted_list = sorted_list + num1[index1:]\n            return sorted_list\n        elif num1[index1] >= num2[index2] and num2[index2] >= num3[index3]:\n            sorted_list = sorted_list + num2[index2:]\n            return sorted_list\n        elif num1[index1] <= num2[index2] and num3[index3] >= num2[index2]:\n            sorted_list = sorted_list + num3[index3:]\n            return sorted_list\n        elif num1[index1] >= num2[index2] and num3[index3] <= num2[index2]:\n            sorted_list = sorted_list + num1[index1:]\n            return sorted_list\n        else:\n            index1 += 1\n            index2 += 1\n            index3 += 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans=0\n    for i in range(n):\n        s=bin(int(s,2)^1)\n        ans=ans+int(s,2)\n    print(ans)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    str1 = s\n    for i in range(n):\n        str1 = str1[-1]+str1[:-1]\n        \n    \n    return str1.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=list(s)\n    k=n%len(s)\n    for i in range(0,k):\n        p=s.index(1)\n        s[p]=0\n        s[p+1]=1\n    return s.count(1)\nprint(odd_Equivalent(\"010101\",2))\nprint(odd_Equivalent(\"010101\",3))\nprint(odd_Equivalent(\"010101\",4))\nprint(odd_Equivalent(\"1010101010\",1))\nprint(odd_Equivalent(\"1010101010\",2))\nprint(odd_Equivalent(\"1010101010\",3))\nprint(odd_Equivalent(\"1010101010\",4))\nprint(odd_Equivalent(\"1010101010\",5))\nprint(odd_Equivalent(\"1010101010\",6))\nprint(odd_Equivalent(\"1010101010\",7))\nprint(odd_Equivalent(\"1010101010\",8))\nprint(odd_Equivalent(\"1010101010\",9))\nprint(odd_Equivalent(\"1010101010\",10))\nprint(odd_Equivalent(\"1010101010\",11))\nprint(odd_Equivalent(\"1010101010\",12))\nprint(odd_Equivalent(\"1010101010\",13))\nprint(odd_Equivalent(\"1010101010\",14))\nprint(odd_Equivalent(\"1010101010\",15))\nprint(odd_Equivalent(\"1010101010\",16))\nprint(odd_Equivalent(\"1010101010\",17))\nprint(odd_Equivalent(\"1010101010\",18))\nprint(odd_Equivalent(\"1010101010\",19))\nprint(odd_Equivalent(\"1010101010\",20))\nprint(odd_Equivalent(\"1010101010\",21))\nprint(odd_Equivalent(\"1010101010\",22))\nprint(odd_Equivalent(\"1010101010\",23))\nprint(odd_Equivalent(\"1010101010\",24))\nprint(odd_Equivalent(\"1010101010\",25))\nprint(odd_Equivalent(\"1010101010\",26))\nprint(odd_Equivalent(\"1010101010\",27))\nprint(odd_Equivalent(\"1010101010\",28))\nprint(odd_Equivalent(\"1010101010\",29))\nprint(odd_Equivalent(\"1010101010\",30))\nprint(odd_Equivalent(\"1010101010\",31))\nprint(odd_Equivalent(\"1010101010\",32))\nprint(odd_Equivalent(\"1010101010\",33))\nprint(odd_Equivalent(\"1010101010\",34))\nprint(odd_Equivalent(\"1010101010\",35))\nprint(odd_Equivalent(\"1010101010\",36))\nprint(odd_Equivalent(\"1010101010\",37))\nprint(odd_Equivalent(\"1010101010\",38))\nprint(odd_Equivalent(\"1010101010\",39))\nprint(odd_Equivalent(\"1010101010\",40))\nprint(odd_Equivalent(\"1010101010\",41))\nprint(odd_Equivalent(\"1010101010\",42))\nprint(odd_Equivalent(\"1010101010\",43))\nprint(odd_Equivalent(\"1010101010\",44))\nprint(odd_Equivalent(\"1010101010\",45))\nprint(odd_Equivalent(\"1010101010\",46))\nprint(odd_Equivalent(\"1010101010\",47))\nprint(odd_Equivalent(\"1010101010\",48))\nprint(odd_Equivalent(\"1010101010\",49))\nprint(odd_Equivalent(\"1010101010\",50))\nprint(odd_Equivalent(\"1010101010\",51))\nprint(odd_Equivalent(\"1010101010\",52))\nprint(odd_Equivalent(\"1010101010\",53))\nprint(odd_Equivalent(\"1010101010\",54))\nprint(odd_Equivalent(\"1010101010\",55))\nprint(odd_Equivalent(\"1010101010\",56))\nprint(odd_Equivalent(\"1010101010\",57))\nprint(odd_Equivalent(\"1010101010\",58))\nprint(odd_Equivalent(\"1010101010\",59))\nprint(odd_Equivalent(\"1010101010\",60))\nprint(odd_Equivalent(\"1010101010\",61))\nprint(odd_Equivalent(\"1010101010\",62))\nprint(odd_Equivalent(\"1010101010\",63))\nprint(odd_Equivalent(\"1010101010\",64))\nprint(odd_Equivalent(\"1010101010\",65))\nprint(odd_Equivalent(\"1010101010\",66))\nprint(odd_Equivalent(\"1010101010\",67))\nprint(odd_Equivalent(\"1010101010\",68))\nprint(odd_Equivalent(\"1010101010\",69))\nprint(odd_Equivalent(\"1010101010\",70))\nprint(odd_Equivalent(\"1010101010\",71))\nprint(odd_Equivalent(\"1010101010\",72))\nprint(odd_Equivalent(\"1010101010\",73))\nprint(odd_Equivalent(\"1010101010\",74))\nprint(odd_Equivalent(\"1010101010\",75))\nprint(odd_Equivalent(\"1010101010\",76))\nprint(odd_Equivalent(\"1010101010\",77))\nprint(odd_Equivalent(\"1010101010\",78))\nprint(odd_Equivalent(\"1010101010\",79))\nprint(odd_Equivalent(\"1010101010\",80))\nprint(odd_Equivalent(\"1010101010\",81))\nprint(odd_Equivalent(\"1010101010\",82))\nprint(odd_Equivalent(\"1010101010\",83))\nprint(odd_Equivalent(\"1010101010\",84))\nprint(odd_Equivalent(\"1010101010\",85))\nprint(odd_Equivalent(\"1010101010\",86))\nprint(odd_Equivalent(\"1010101010\",87))\nprint(odd_Equivalent(\"1010101010\",88))\nprint(odd_Equivalent(\"1010101010\",89))\nprint(odd_Equivalent(\"1010101010\",90))\nprint(odd_Equivalent(\"1010101010\",91))\nprint(odd_Equivalent(\"1010101010\",92))\nprint(odd_Equivalent(\"1010101010\",93))\nprint(odd_Equivalent(\"1010101010\",94))\nprint(odd_Equivalent(\"1010101010\",95))\nprint(odd_Equivalent(\"1010101010\",96))\nprint(odd_Equivalent(\"1010101010\",97))\nprint(odd_Equivalent(\"1010101010\",98))\nprint(odd_Equivalent(\"1010101010\",99))\nprint(odd_Equivalent(\"1010101010\",100))\nprint(odd_Equivalent(\"1010101010\",101))\nprint(odd_Equivalent(\"1010101010\",102))\nprint(odd_Equivalent(\"1010101010\",103))\nprint(odd_Equivalent(\"1010101010\",104))\nprint(odd_Equivalent(\"1010101010\",105))\nprint(odd_Equivalent(\"1010101010\",106))\nprint(odd_Equivalent(\"1010101010\",107))\nprint(odd_Equivalent(\"1010101010\",108))\nprint(odd_Equivalent(\"1010101010\",109))\nprint(odd_Equivalent(\"1010101010\",110))\nprint(odd_Equivalent(\"1010101010\",111))\nprint(odd_Equivalent(\"1010101010\",112))\nprint(odd_Equivalent(\"1010101010\",113))\nprint(odd_Equivalent(\"1010101010\",114))\nprint(odd_Equivalent(\"1010101010\",115))\nprint(odd_Equivalent(\"1010101010\",116))\nprint(odd_Equivalent(\"1010101010\",117))\nprint(odd_Equivalent(\"1010101010\",118))\nprint(odd_Equivalent(\"1010101010\",119))\nprint(odd_Equivalent(\"1010101010\",120))\nprint(odd_Equivalent(\"1010101010\",121))\nprint(odd_Equivalent(\"1010101010\",122))\nprint(odd_Equivalent(\"1010101010\",123))\nprint(odd_Equivalent(\"1010101010\",124))\nprint(odd_Equivalent(\"1010101010\",125))\nprint(odd_Equivalent(\"1010101010\",126))\nprint(odd_Eq"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==1:\n        return 1\n    if n==0:\n        return 1\n    if n%2!=0:\n        return 0\n    s1=odd_Equivalent(s[1:],n-1)\n    s2=odd_Equivalent(s[1:],n-1)\n    return s1+s2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s =  '{0:b}'.format(s)\n        s =  s[-1] + s[:-1]\n        if(int(s)%2!=0):\n            odd_count += 1\n    return odd_count\n    \n    \ndef find_Min_Max(lst,target):\n    '''\n    Write a python function to find the minimum and maximum values in a given list.\n    '''\n    for i in range(len(lst)-1):\n        if(lst[i] > lst[i+1]):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    if(lst[0] == target):\n        lst.remove(target)\n    if(lst[-1] == target):\n        lst.remove(target)\n    return (lst[0],lst[-1])\n    \ndef find_Max_Min(lst,target):\n    '''\n    Write a python function to find the maximum and minimum values in a given list.\n    '''\n    for i in range(len(lst)-1):\n        if(lst[i] < lst[i+1]):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    if(lst[0] == target):\n        lst.remove(target)\n    if(lst[-1] == target):\n        lst.remove(target)\n    return (lst[0],lst[-1])\n    \n    \ndef find_Left_Max(lst):\n    '''\n    Write a python function to find the maximum value in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0\n    for i in range(len(lst)-1):\n        if(lst[i] > lst[i+1]):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst[0]\n    \n    \ndef find_Right_Min(lst):\n    '''\n    Write a python function to find the minimum value in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0\n    for i in range(len(lst)-1):\n        if(lst[i] < lst[i+1]):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst[-1]\n    \n    \ndef find_Upper_Lower_Bound(lst):\n    '''\n    Write a python function to find the Upper Bound and Lower Bound in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0,0\n    for i in range(len(lst)-1):\n        if(lst[i] > lst[i+1]):\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst[0],lst[-1]\n    \n    \ndef find_Duplicates(lst):\n    '''\n    Write a python function to find the number of duplicates in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0\n    for i in range(len(lst)-1):\n        if(lst[i] == lst[i+1]):\n            return lst[i]\n    return 0\n    \n    \ndef find_First_K_Lowest(lst,k):\n    '''\n    Write a python function to find the first k values which are lowest in a given list.\n    '''\n    if(len(lst) == 0 or k > len(lst) or k <= 0):\n        return 0\n    l = []\n    for i in range(k):\n        min_i = find_Left_Max(lst)\n        l.append(min_i)\n        lst.remove(min_i)\n    return l\n    \n    \ndef find_Last_K_Highest(lst,k):\n    '''\n    Write a python function to find the last k values which are highest in a given list.\n    '''\n    if(len(lst) == 0 or k > len(lst) or k <= 0):\n        return 0\n    l = []\n    for i in range(k):\n        max_i = find_Right_Min(lst)\n        l.append(max_i)\n        lst.remove(max_i)\n    return l\n    \n    \ndef find_Ordered_Numbers(lst):\n    '''\n    Write a python function to find the first k ordered numbers in a given list.\n    '''\n    if(len(lst) == 0 or k > len(lst) or k <= 0):\n        return 0\n    l = []\n    for i in range(k):\n        for j in range(len(lst)-1):\n            if(lst[j] > lst[j+1]):\n                lst[j],lst[j+1] = lst[j+1],lst[j]\n        l.append(lst[0])\n        lst.remove(lst[0])\n    return l\n    \n    \ndef find_Dup_Count(lst):\n    '''\n    Write a python function to find the number of duplicates in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0\n    for i in range(len(lst)-1):\n        if(lst[i] == lst[i+1]):\n            return lst[i]\n    return 0\n    \n    \ndef find_Dup_Count_2(lst):\n    '''\n    Write a python function to find the number of duplicates in a given list.\n    '''\n    if(len(lst) == 0):\n        return 0\n    for i in range(len(lst)-1):\n        if(lst[i] == lst[i+1]):\n            return lst[i]\n    return 0\n    \n    \ndef find_Greater_Numbers(lst,n):\n    '''\n    Write a python function to find the n elements which are greater than the next element in a given list.\n    '''\n    if(len(lst) == 0 or n > len(lst) or n <= 0):\n        return 0\n    l = []\n    for i in range(len(lst)-1):\n        if(lst[i+1] > lst[i]):\n            l.append(lst[i+1])\n    return l[-n:]\n    \n    \ndef find_Greater_Numbers_2(lst,n):\n    '''\n    Write a python function to find the n elements which are greater than the next element in a given list.\n    '''\n    if(len(lst) == 0 or n > len(lst) or n <= 0):\n        return 0\n    l = []\n    for i in range(len(lst)-1):\n        if(lst[i+1] > lst[i]):\n            l.append(lst[i+1])\n    return l[-n:]\n    \n    \ndef find_Decreasing_Numbers(lst,n):\n    '''\n    Write a python function to find the n elements which are less than the next element in a given list.\n    '''\n    if(len(lst) == 0 or n > len(lst) or n <= 0):\n        return 0\n    l = []\n    for i in range(len(lst)-1):\n        if(lst[i+1] < lst[i]):\n            l.append(lst[i+1])\n    return l[-n:]\n    \n    \ndef find_Decreasing_Numbers_2(lst,n):\n    '''\n    Write a python function to find the n elements which are less than the next element in a given list.\n    '''\n    if(len(lst) == 0 or n > len(lst) or n <= 0):\n        return 0\n    l = ["
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_s = list(s)\n    print(binary_s)\n    #binary_s.reverse()\n    print(binary_s)\n    binary_s.reverse()\n    print(binary_s)\n    for i in range(n):\n        binary_s = list(binary_s)\n        for j in range(len(binary_s)):\n            binary_s[j] = binary_s[j] + binary_s[j]\n            if(binary_s[j] == '1'):\n                binary_s[j] = '0'\n            else:\n                binary_s[j] = '1'\n        binary_s.reverse()\n    binary_s = ''.join(binary_s)\n    print(binary_s)\n    print(len(binary_s))\n    return binary_s\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    cnt = 0\n    for i in range(n):\n        s = rotate_string(s,1)\n        for j in s:\n            if j%2!= 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(len(s)==0):\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count = count + 1\n    return count*2**n\n        \ndef multiply(n,a,b):\n    '''\n    Write a python function that multiplies two numbers a and b and returns the result.\n    '''\n    return a*b\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #code here\n    return s.count('0') + n*s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        new_s=''\n        if len(s)%2==0:\n            return -1\n        for j in range(len(s)-1,-1,-1):\n            if s[j]=='0':\n                new_s='1'+new_s\n            else:\n                new_s='0'+new_s\n        s=new_s\n    for i in range(len(s)-1,0,-1):\n        if s[i]=='0':\n            count+=1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_dictionary = {}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_set = set()\n    nested_list_s = set()\n    nested_list_l = list()\n    for i in nestedlist:\n        if type(i) == str:\n            nested_list_s.add(i)\n        else:\n            for j in i:\n                nested_list_s.add(j)\n    nested_list_s = sorted(nested_list_s)\n    for i in nested_list_s:\n        nested_list_l.append(i)\n    for i in nested_list_l:\n        for j in nested_list_s:\n            if i in j:\n                nested_set.add(i)\n    return nested_set\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list = []\n    for i in nestedlist:\n        if type(i) == list:\n            nested_list.append(i)\n        else:\n            nested_list.append(i)\n    nested_list.sort()\n    nested_list = nested_list[::-1]\n    for i in range(len(nested_list)):\n        if not nested_list[i] == nested_list[i+1]:\n            print(nested_list[i], end = \" \")\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist, (int, float, str)):\n        return nestedlist\n    returned_list = []\n    for item in nestedlist:\n        if isinstance(item, list):\n            returned_list += common_in_nested_lists(item)\n        else:\n            returned_list.append(item)\n    return returned_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    if len(nestedlist) == 0:\n        return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output_list = []\n    for sublist in nestedlist:\n        if type(sublist) is list:\n            if len(sublist) == 0:\n                continue\n            else:\n                common_in_nested_lists(sublist)\n        else:\n            if sublist in output_list:\n                continue\n            else:\n                output_list.append(sublist)\n    return output_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for nl in nestedlist:\n        try:\n            common.extend(nl[0:])\n        except:\n            common.extend(nl)\n    return common\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return isinstance(int(text), int)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if isinstance(int(text), int):\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # return True if text is integer else False\n    # return True if all chars in text are integers else False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isnumeric():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if(i=={}):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2=[]\n    for i in list1:\n        if i!={}:\n            list2.append(i)\n    print(list2)\n    if len(list2)==0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item) == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = False\n    for i in list1:\n        if len(i) == 0:\n            empty = True\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x,y: x*10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums)\n    total = 0\n    for i in range(0, len(nums)):\n        total += nums[i] * (len(nums) - i)\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = []\n    for num in nums:\n        if num % 2 == 0:\n            num_list.append(num // 2)\n        else:\n            num_list.append(num // 2)\n            num_list.append(1)\n    return sum(num_list)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    count = 0\n    for i in nums:\n        count = count * 10 + i\n    return count\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Base case\n    if len(nums) == 1:\n        return nums[0]\n    # Recursive case\n    elif nums[0] > nums[-1]:\n        return nums[0] + tuple_to_int(nums[:-1])\n    elif nums[0] == nums[-1]:\n        return nums[0] + tuple_to_int(nums[:-1])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = tuple(nums)\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_str = str(nums)\n    nums_int = int(nums_str)\n    return nums_int\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str,nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if test_list:\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    \n    for i in range(len(test_list)):\n        if type(test_list[i]) == int:\n            test_list[i] = float(test_list[i])\n        elif type(test_list[i]) == list:\n            test_list[i] = list_to_float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in test_list:\n            for j in i:\n                if isinstance(j, str):\n                    i[i.index(j)] = float(j)\n    except:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for x in range(len(test_list)):\n        for y in range(len(test_list[x])):\n            if type(test_list[x][y]) == str:\n                test_list[x][y] = float(test_list[x][y])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in range(len(test_list)):\n            test_list[i] = float(test_list[i])\n    except ValueError:\n        print(\"Error: Must be a list of numbers.\")\n    except TypeError:\n        print(\"Error: Must be a list of numbers.\")\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \nstring_list = 'the quick brown fox jumps over the lazy dog'\nprint(string_to_list(string_list))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ') \n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(\" \")\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string:\n        return string.split(\" \")\n    else:\n        return []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    print(new_arr)\n    print(new_arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid - 1\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_el = 0\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == arr[mid]:\n            unique_el = mid\n            break\n        elif mid < arr[mid]:\n            right = mid - 1\n        elif mid > arr[mid]:\n            left = mid + 1\n    return unique_el\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    i=0\n    while i<n:\n        if i+1<n and arr[i]==arr[i+1]:\n            i+=1\n        else:\n            break\n    if i==n-1:\n        return -1\n    while i<n:\n        if arr[i]!=arr[i+1]:\n            return arr[i]\n        i+=1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Base case\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1,len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    \n    if n == 1:\n        if arr[0]!= arr[0]:\n            return None\n        else:\n            return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[i][1]>list1[j][0]*list1[j][1]:\n                list1[i],list1[j]=list1[j],list1[i]\n    return list1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    max_prod_pair = None\n    for pair in list1:\n        #print(pair)\n        temp_prod = 1\n        for i in range(1,len(pair)):\n            #print(i)\n            temp_prod *= pair[i]\n            if i == len(pair)-1 and temp_prod > max_prod:\n                max_prod = temp_prod\n                max_prod_pair = pair\n    return(max_prod,max_prod_pair)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Code here\n    result = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if j+1 < len(list1):\n                result.append(max(list1[i][0]*list1[i][1], list1[i][0]*list1[j][1], list1[j][0]*list1[i][1], list1[j][0]*list1[j][1]))\n    result.sort()\n    print(result)\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Get the max and min in each tuple.\n    max = -999999\n    min = 9999999\n    for x in list1:\n        max = max(max,x[0])\n        min = min(min,x[1])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i]*list1[j] > max_prod):\n                max_prod = list1[i]*list1[j]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\n    result = []\n    max_product = 0\n    \n    for i in pairs:\n        temp_product = 1\n        for j in list1:\n            if j[0] == i[0] or j[1] == i[1]:\n                temp_product *= j[2]\n        if temp_product > max_product:\n            max_product = temp_product\n    \n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    max_product = 0\n    for index, item in enumerate(list1):\n        if index + 1 < len(list1):\n            current_product = abs(item[0] * list1[index + 1][0])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = max2 = max3 = max4 = max5 = 0\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0]:\n                if list1[i][1] > list1[j][1]:\n                    if list1[i][2] > list1[j][2]:\n                        if list1[i][3] > list1[j][3]:\n                            if list1[i][4] > list1[j][4]:\n                                if list1[i][5] > list1[j][5]:\n                                    if list1[i][6] > list1[j][6]:\n                                        max1 = max(max1,list1[i][0]*list1[j][0])\n                                        max2 = max(max2,list1[i][1]*list1[j][1])\n                                        max3 = max(max3,list1[i][2]*list1[j][2])\n                                        max4 = max(max4,list1[i][3]*list1[j][3])\n                                        max5 = max(max5,list1[i][4]*list1[j][4])\n                                        max6 = max(max6,list1[i][5]*list1[j][5])\n                                        max7 = max(max7,list1[i][6]*list1[j][6])\n    return (max1,max2,max3,max4,max5,max6,max7)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(0, len(list1), 2):\n        pairs.append((list1[i], list1[i + 1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Make sure to start with 1 since we need to sum 1.\n    amicables = [1]\n    index = 2\n    while len(amicables) < limit:\n        amicable_sum = 0\n        for amicable in amicables:\n            if amicable!= index:\n                if sum(amicable) == index:\n                    amicable_sum += amicable\n        amicables.append(amicable_sum)\n        index += 1\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    sum_odd = 0\n    sum_even = 0\n    for num in range(1, limit):\n        sum_odd = 0\n        sum_even = 0\n        for amicable in range(1, num):\n            if num == amicable:\n                continue\n            if num % amicable == 0:\n                sum_odd += amicable\n            if num % (amicable + 1) == 0:\n                sum_even += amicable\n        if sum_odd * sum_even == num:\n            amicable_sum += num\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_sum = 0\n    while True:\n        sum += 1\n        if sum > limit:\n            break\n        for n in range(2, sum):\n            if sum % n == 0:\n                if sum / n == sum + 1:\n                    amicable_sum += sum\n                    break\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(number):\n        return sum(set(range(1, number)).difference(set(range(1, number+1))-set(divisors(number)))) == 2*number\n    def divisors(number):\n        return set(divisors_with_sum_to(number))\n    def divisors_with_sum_to(number):\n        return set(number - d for d in divisors(number))\n    return sum(x for x in range(1, limit) if is_amicable(x) and is_amicable(x-1))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_amicable(i) and is_amicable(sum(divide(i, j))):\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for i in range(1, limit):\n        amicable_sum = 0\n        for j in range(1, i):\n            if i == j:\n                continue\n            if i % j == 0:\n                amicable_sum += j\n        if amicable_sum == i:\n            amicable_numbers.append(i)\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        sum_of_divisors = 0\n        divisors_sum = 0\n        if num!= 1 and num!= 2:\n            for i in range(1, num):\n                if num % i == 0:\n                    sum_of_divisors += i\n                    divisors_sum += num\n            if divisors_sum == sum_of_divisors:\n                sum += num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        amicable_number_list = get_amicable_numbers(i)\n        if sum == 0:\n            sum = sum + i\n        elif sum!= 0:\n            sum = sum + sum\n            if sum == i:\n                sum = sum + i\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1,limit+1):\n        sum_of_factors = 0\n        for j in range(1,i+1):\n            if i % j == 0:\n                sum_of_factors += j\n                sum_of_factors -= i\n        if sum_of_factors == i and i!= 1:\n            sum_amicable += i\n    return sum_amicable\n    \nprint(amicable_numbers_sum(1000))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for i in range(1,limit):\n        j = 2\n        sum = i + j\n        if i!= sum and sum <= limit:\n            if is_amicable(i,sum):\n                amicable_list.append(i)\n                amicable_list.append(sum)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (a.real ** 2 + a.imag ** 2) ** 0.5\n    return cmath.phase(a/c)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+1j*b\n    return cmath.phase(c)\ndef rotate(c,n):\n    '''\n    Write a function to rotate a complex number by n degrees.\n    '''\n    return c*(cmath.exp((n*1j)))\ndef get_angle(c1,c2):\n    '''\n    Write a function to get the angle between two complex numbers.\n    '''\n    a = cmath.phase(c1)\n    b = cmath.phase(c2)\n    return a-b\ndef get_angle_complex(a,b):\n    '''\n    Write a function to get the angle between two complex numbers.\n    '''\n    return abs(cmath.phase(a)-cmath.phase(b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.real - b.real\n    s = a.imaginary - b.imaginary\n    if c == 0 and s == 0:\n        return '0'\n    return str(round((cmath.phase(a)*(180/3.1415926535897932384626))%360))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.real*b.real+a.imag*b.imag)/(abs(a.real)+abs(a.imag))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle\n    \ndef angle_real_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)\n    return angle\n    \ndef angle_complex_str(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return str(angle)\n    \ndef angle_real_complex_str(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)\n    return str(angle)\n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = math.atan2(b.imag,b.real)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\ndef angle_real_complex(a,b):\n    '''\n    Write a function to get the angle of a real number and its complex number.\n    '''\n    angle = math.atan2(b.real,a)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\ndef dist_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    return math.sqrt((a.real-b.real)**2 + (a.imag - b.imag)**2)\ndef dist_real(a,b):\n    '''\n    Write a function to get the distance between two real numbers.\n    '''\n    return math.sqrt((a - b)**2)\ndef get_decimal(num,b):\n    '''\n    Write a function to get the decimal of a number.\n    '''\n    return (num * 10 ** b)\ndef get_hexadecimal(num,b):\n    '''\n    Write a function to get the hexadecimal of a number.\n    '''\n    return hex(num)[2:]\ndef get_octal(num,b):\n    '''\n    Write a function to get the octal of a number.\n    '''\n    return oct(num)[2:]\ndef get_binary(num,b):\n    '''\n    Write a function to get the binary of a number.\n    '''\n    return bin(num)[2:]\ndef get_binary_positive(num,b):\n    '''\n    Write a function to get the binary positive of a number.\n    '''\n    return bin(num)[2:]\ndef get_binary_negative(num,b):\n    '''\n    Write a function to get the binary negative of a number.\n    '''\n    return bin(num)[2:]\ndef get_hex_positive(num,b):\n    '''\n    Write a function to get the hex positive of a number.\n    '''\n    return hex(num)[2:]\ndef get_hex_negative(num,b):\n    '''\n    Write a function to get the hex negative of a number.\n    '''\n    return hex(num)[2:]\ndef get_oct_positive(num,b):\n    '''\n    Write a function to get the oct positive of a number.\n    '''\n    return oct(num)[2:]\ndef get_oct_negative(num,b):\n    '''\n    Write a function to get the oct negative of a number.\n    '''\n    return oct(num)[2:]\ndef get_decimal_positive(num,b):\n    '''\n    Write a function to get the decimal positive of a number.\n    '''\n    return num * 10 ** b\ndef get_decimal_negative(num,b):\n    '''\n    Write a function to get the decimal negative of a number.\n    '''\n    return num * 10 ** b\ndef modulus(a,b):\n    '''\n    Write a function to get the modulus of a number.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef get_prime_number(num):\n    '''\n    Write a function to get the prime number.\n    '''\n    if num == 1:\n        return \"1 is not prime\"\n    if num == 2:\n        return \"2 is prime\"\n    if num == 3:\n        return \"3 is prime\"\n    if num == 4:\n        return \"4 is prime\"\n    if num == 5:\n        return \"5 is prime\"\n    if num == 6:\n        return \"6 is prime\"\n    if num == 7:\n        return \"7 is prime\"\n    if num == 8:\n        return \"8 is prime\"\n    if num == 9:\n        return \"9 is prime\"\n    if num == 10:\n        return \"10 is prime\"\n    if num == 11:\n        return \"11 is prime\"\n    if num == 12:\n        return \"12 is prime\"\n    if num == 13:\n        return \"13 is prime\"\n    if num == 14:\n        return \"14 is prime\"\n    if num == 15:\n        return \"15 is prime\"\n    if num == 16:\n        return \"16 is prime\"\n    if num == 17:\n        return \"17 is prime\"\n    if num == 18:\n        return \"18 is prime\"\n    if num == 19:\n        return \"19 is prime\"\n    if num == 20:\n        return \"20 is prime\"\n    if num == 21:\n        return \"21 is prime\"\n    if num == 22:\n        return \"22 is prime\"\n    if num == 23:\n        return \"23 is prime\"\n    if num == 24:\n        return \"24 is prime\"\n    if num == 25:\n        return \"25 is prime\"\n    if num == 26:\n        return \"26 is prime\"\n    if num == 27:\n        return \"27 is prime\"\n    if num == 28:\n        return \"28 is prime\"\n    if num == 29:\n        return \"29 is prime\"\n    if num == 30:\n        return \"30 is prime\"\n    if num == 31:\n        return \"31 is prime\"\n    if num == 32:\n        return \"32 is prime\"\n    if num == 33:\n        return \"33 is prime\"\n    if num == 34:\n        return \"34 is prime\"\n    if num == 35:\n        return \"35 is prime\"\n    if num == 36:\n        return \"36 is prime\"\n    if num == 37:\n        return \"37 is prime\"\n    if num == 38:\n        return \"38 is prime\"\n    if num == 39:\n        return \"39 is prime\"\n    if num == 40:\n        return \"40 is prime\"\n    if num == 41:\n        return \"41 is prime\"\n    if num == 42:\n        return \"42 is prime\"\n    if num == 43:\n        return \"43 is prime\"\n    if num == 44:\n        return \"44 is prime\"\n    if num == 45:\n        return \"45 is prime\"\n    if num == 46:\n        return \"46 is prime\"\n    if num == 47:\n        return \"47 is prime\"\n    if num == 48:\n        return \"48 is prime\"\n    if num == 49:\n        return \"49 is prime\"\n    if num == 50:\n        return \"50 is prime\"\n    if num == 51:\n        return \"51 is prime\"\n    if num == 52:\n        return \"52 is prime\"\n    if num == 53:\n        return \"53 is prime\"\n    if num == 54:\n        return \"54 is prime\"\n    if num == 55:\n        return \"55 is prime\"\n    if num == 56:\n        return \"56 is prime\"\n    if num == 57:\n        return \"57 is prime\"\n    if num == 58:\n        return \"58 is prime\"\n    if num == 59:\n        return \"59 is prime\"\n    if num == 60:\n        return \"60 is prime\"\n    if num == 61:\n        return \"61 is prime\"\n    if num == 62:\n        return \"62 is prime\"\n    if num == 63:\n        return \"63 is prime\"\n    if num == 64:\n        return \"64 is prime\"\n    if num == 65:\n        return \"65 is prime\"\n    if num == 66:\n        return \"66 is prime\"\n    if num == 67:\n        return \"67 is prime\"\n    if num == 68:\n        return \"68 is prime\"\n    if num == 69:\n        return \"69 is prime\"\n    if num == 70:\n        return \"70 is prime\"\n    if num == 71:\n        return \"71 is prime\"\n    if num == 72:\n        return \"72 is prime\"\n    if num == 73:\n        return \"73 is prime\"\n    if num == 74:\n        return \"74 is prime\"\n    if num == 75:\n        return \"75 is prime\"\n    if num == 76:\n        return \"76 is prime\"\n    if num == 77:\n        return \"77 is prime\"\n    if num == 78:\n        return \"78 is prime\"\n    if num == 79:\n        return \"79 is prime\"\n    if num == 80:\n        return \"80 is prime\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return cmath.phase(b)\n    elif b == 0:\n        return cmath.phase(a)\n    else:\n        return cmath.phase(a/b)\ndef get_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # if a == 0 and b == 0:\n    #     return 0\n    # elif a == 0:\n    #     return -cmath.phase(b)\n    # elif b == 0:\n    #     return cmath.phase(a)\n    # else:\n    #     return cmath.phase(a/b)\n    \n    return cmath.phase(a/b)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_sub_string_len = 0\n    if len(string) == 0:\n        return max_sub_string_len\n    \n    for i in range(len(string)):\n        string = string[i:]\n        count = 0\n        for j in range(len(string)):\n            if string[j] == '0':\n                count += 1\n        \n        max_sub_string_len = max(max_sub_string_len, count)\n    return max_sub_string_len\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # code here\n    \n    n = len(string)\n    dp = [[0]*2 for _ in range(n)]\n    for i in range(n):\n        if string[i] == '0':\n            dp[i][0] = 1\n        else:\n            dp[i][1] = 1\n    \n    max_length = 1\n    max_length_number_0 = 0\n    max_length_number_1 = 0\n    for i in range(1,n):\n        if string[i] == '0':\n            dp[i][0] = dp[i-1][0] + 1\n        else:\n            dp[i][1] = dp[i-1][1] + 1\n        \n        max_length = max(max_length, dp[i][0], dp[i][1])\n        max_length_number_0 = max(max_length_number_0, dp[i][0])\n        max_length_number_1 = max(max_length_number_1, dp[i][1])\n    \n    max_length_diff = max_length_number_0 - max_length_number_1\n    return max_length_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_sub_str = 0\n    for i in range(len(string)):\n        sub_str = string[i]\n        count_0 = sub_str.count('0')\n        count_1 = sub_str.count('1')\n        diff = abs(count_0 - count_1)\n        if diff > max_sub_str:\n            max_sub_str = diff\n    return max_sub_str\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(0,len(string)-sum(string.count('0'), sum(string.count('1'))))"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    ans = float('-inf')\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if string[i] == '0':\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = dp[i+1][j-1]\n            ans = max(ans, dp[i][j]-dp[i][i])\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # length = len(string)\n    # result = 0\n    # for i in range(1, length):\n    #     count0 = 0\n    #     count1 = 0\n    #     for j in range(i):\n    #         if string[j] == '0':\n    #             count0 += 1\n    #         else:\n    #             count1 += 1\n    #     if count1 < count0:\n    #         result = max(result, count1 - count0)\n    # return result\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    str_list = list(string)\n    count_list = []\n    for i in range(0, len(str_list)):\n        count = 0\n        for j in range(i, len(str_list)):\n            if str_list[j] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                break\n        count_list.append(count)\n    max_diff = max(count_list)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_diff(string):\n        '''\n        Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        '''\n        count_of_0 = 0\n        count_of_1 = 0\n        max_diff = 0\n        i = 0\n        while i < len(string):\n            if string[i] == '0':\n                count_of_0 += 1\n                i += 1\n            elif string[i] == '1':\n                count_of_1 += 1\n                i += 1\n            else:\n                i += 1\n            diff = count_of_0 - count_of_1\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n    \n    if len(string) == 0:\n        return 0\n    \n    diff = find_diff(string[:-1])\n    if diff == 0:\n        diff = find_diff(string[:-2])\n    return diff + 1\n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string=str(string)\n    list_len=len(string)\n    max_list=[]\n    def find_max(x,y,z,k):\n        if x==list_len:\n            if z==0:\n                max_list.append(k)\n        else:\n            if string[x]=='0':\n                find_max(x+1,y,z+1,k)\n            if string[x]=='1':\n                find_max(x+1,y,z,k+1)\n    find_max(0,0,0,0)\n    return max(max_list)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    ans = 0\n    #consider all sub-strings starting from beginning of the string and end of the string.\n    for i in range(n):\n        #consider all sub-strings ending in index i, i+1, i+2\n        for j in range(i,n):\n            #iterate over the substring\n            count = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count+=1\n            for k in range(j,n):\n                if string[k] == '1':\n                    count-=1\n            ans = max(ans, abs(count))\n    return ans\n        \nif __name__ == '__main__':\n    string = \"1001\"\n    print(find_length(string))"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while (i <= (a // 2) or j <= (b // 2)):\n        if (a % i == 0 and b % i == 0):\n            sum += i\n        i += 1\n        if (a % j == 0 and b % j == 0):\n            sum += j\n        j += 1\n    print(\"The sum of common divisors of the given numbers is \",sum)\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    if a == b:\n        return 1\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum *= i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == 1 or b == 1:\n        return 1\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            c+=i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        l = []\n        for i in range(1, a+1):\n            if a % i == 0 and b % i == 0:\n                l.append(i)\n        return sum(l)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s1 = set(factoriel(a))\n    s2 = set(factoriel(b))\n    s3 = s1.intersection(s2)\n    return sum(s3)\n    \n    \n    \ndef factoriel(n):\n    \"\"\"\n    Return factoriel of a number n.\n    \n    >>> factoriel(10)\n    3628800\n    >>> factoriel(5)\n    1290\n    >>> factoriel(1)\n    1\n    \"\"\"\n    \n    res = set()\n    i = 1\n    while i <= n:\n        res.add(i)\n        i = i * i\n    \n    return res\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = []\n    for i in range(1, min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            l.append(i)\n    return sum(l)\n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print('a',a,'b',b)\n    if a==0 or b==0:\n        return 0\n    elif a==1 or b==1:\n        return 1\n    else:\n        for i in range(2,min(a,b)+1):\n            if a%i==0 and b%i==0:\n                print('i',i)\n                print('a',a,'b',b)\n                return i*(sum(a/i,b/i))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(a,b)\n    l = []\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            l.append(i)\n    return(sum(l))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a == 2 or b == 2:\n        return 1\n    \n    a_div = []\n    b_div = []\n    for i in range(2, a + 1):\n        if a % i == 0:\n            a_div.append(i)\n    for i in range(2, b + 1):\n        if b % i == 0:\n            b_div.append(i)\n    a_div = set(a_div)\n    b_div = set(b_div)\n    common_div = list(a_div & b_div)\n    print(common_div)\n    if len(common_div) == 0:\n        return 0\n    else:\n        sum_common_div = 0\n        for i in common_div:\n            sum_common_div += i\n        return sum_common_div"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    m=1\n    n=1\n    while m<=a:\n        if a%m==0 and n%m==0:\n            m+=1\n        else:\n            m+=1\n    while n<=b:\n        if a%n==0 and b%n==0:\n            n+=1\n        else:\n            n+=1\n    print(m+n)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < y:\n        x, y = y, x\n    mult = 0\n    while x >= y:\n        mult += x\n        x -= y\n    return mult + x\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            l.append(str[i])\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return (list(filter(lambda x: len(x) > n, str)))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return set([w for w in str if len(w) > n])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for i in str:\n        if len(i) > n:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_of_words = str.split()\n    for words in list_of_words:\n        if len(words) > n:\n            print(words)\n    return list_of_words\nprint(long_words(2, 'hello world'))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    my_list = str.split(\" \")\n    return [item for item in my_list if len(item) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split(' '):\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return sum(my_matrix[0]) == sum(sum(my_matrix, [])) and sum(my_matrix[i]) == sum(sum(my_matrix, [])) and sum(my_matrix[i][j] for i in range(len(my_matrix))) == sum(sum(my_matrix, [])) and sum(my_matrix[j][i] for i in range(len(my_matrix))) == sum(sum(my_matrix, []))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print(\"my_matrix\", my_matrix)\n    n = len(my_matrix)\n    for i in range(0, n):\n        #print(\"i\", i)\n        if len(my_matrix[i])!= n:\n            return False\n    for j in range(0, n):\n        #print(\"j\", j)\n        if len(my_matrix[j])!= n:\n            return False\n    #print(\"n\", n)\n    for i in range(0, n):\n        #print(\"i\", i)\n        for j in range(0, n):\n            #print(\"i, j\", i, j)\n            if i!= j and my_matrix[i][j]!= n*(i+1) + j+1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            if i!= j:\n                sum_row = 0\n                sum_col = 0\n                for k in range(0, len(my_matrix)):\n                    sum_row = sum_row + my_matrix[i][k]\n                    sum_col = sum_col + my_matrix[k][j]\n                if sum_row!= sum_col:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squares = []\n    for i in range(len(my_matrix)):\n        squares.append(my_matrix[i][i])\n        squares.append(my_matrix[i][-1 - i])\n        squares.append(my_matrix[-1 - i][i])\n        squares.append(my_matrix[-1 - i][-1 - i])\n    if len(squares)!= len(set(squares)):\n        return False\n    return True\n    \nmy_matrix = [[1,2,3],[4,5,6],[7,8,9]]\nprint(magic_square_test(my_matrix))\nmy_matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\nprint(magic_square_test(my_matrix))\nmy_matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]\nprint(magic_square_test(my_matrix))\nmy_matrix = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30]]\nprint(magic_square_test(my_matrix))"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squared_matrix = list(map(list, zip(*my_matrix)))\n    # check if the sum of each row of the matrix is equal to the sum of each column\n    for i in range(len(my_matrix)):\n        sum_row = 0\n        for j in range(len(my_matrix[0])):\n            sum_row += my_matrix[i][j]\n        if sum_row!= sum(squared_matrix[i]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if it is a square matrix\n    if len(my_matrix) == len(my_matrix[0]):\n        \n        # Check if matrix is a magic square\n        # The first number in the matrix must be the same\n        if my_matrix[0][0] == my_matrix[0][-1]:\n            \n            # The last number in the matrix must be the same\n            if my_matrix[-1][0] == my_matrix[-1][-1]:\n                \n                # Check each row\n                for row in range(len(my_matrix)):\n                    \n                    # Check each element in a row\n                    for element in range(len(my_matrix[0])):\n                        \n                        # If any element in a row is not the same\n                        if my_matrix[row][element]!= my_matrix[row][0]:\n                            \n                            # Return False\n                            return False\n                \n                # Return True\n                return True\n        else:\n            # Return False\n            return False\n        \n    else:\n        # Return False\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    for i in range(size):\n        if sum(my_matrix[i])!= size*size:\n            return False\n        if not all(my_matrix[j][i] == int(j/size) for j in range(size)):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,9):\n        if my_matrix[i][i]!= my_matrix[i+1][i+1] + my_matrix[i+2][i+2] + my_matrix[i+3][i+3]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Note: Not currently possible\n    #Note: Not yet implemented\n    #Check if there are a total of 12 numbers in each row and column\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"The matrix should be a square matrix\")\n        return False\n    #Check if the matrix is a magic square:\n    #https://stackoverflow.com/questions/25794488/find-the-magic-square-using-matplotlib\n    for i in range(len(my_matrix)):\n        if len(my_matrix)!= len(my_matrix[i]):\n            print(\"The matrix should be a square matrix\")\n            return False\n    #Check if there are any duplicate numbers\n    for i in range(len(my_matrix)):\n        num_count = 0\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= None:\n                num_count += 1\n            else:\n                num_count = 0\n            if num_count > 1:\n                print(\"The matrix should be a magic square\")\n                return False\n    #Check if the sum of each row is the same\n    for i in range(len(my_matrix)):\n        num_sum = 0\n        for j in range(len(my_matrix)):\n            num_sum += my_matrix[i][j]\n        if num_sum!= my_matrix[i][i]:\n            print(\"The matrix should be a magic square\")\n            return False\n    #Check if the sum of each column is the same\n    for i in range(len(my_matrix)):\n        num_sum = 0\n        for j in range(len(my_matrix)):\n            num_sum += my_matrix[j][i]\n        if num_sum!= my_matrix[i][i]:\n            print(\"The matrix should be a magic square\")\n            return False\n    #Check if the sum of each diagonal is the same\n    num_sum = 0\n    for i in range(len(my_matrix)):\n        num_sum += my_matrix[i][i]\n    if num_sum!= my_matrix[i][i]:\n        print(\"The matrix should be a magic square\")\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # the magic square must be a square matrix\n    if len(my_matrix) == len(my_matrix[0]):\n        # calculate the sum of each row and each column\n        row_sum = []\n        col_sum = []\n        for row in range(len(my_matrix)):\n            row_sum.append(sum(my_matrix[row]))\n            col_sum.append(sum([my_matrix[i][row] for i in range(len(my_matrix))]))\n        # if the sums of each row and each column are equal, then the matrix is a magic square\n        if all(i == j for i,j in zip(row_sum,col_sum)):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # solution_1:\n    # time complexity: O(n)\n    # space complexity: O(n)\n    # the max frequency is the highest count of any single number\n    # the max number is the item with the highest count\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    for i in nums:\n        my_dict[i] += 1\n    max_key = max(my_dict, key=lambda x:my_dict[x])\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = defaultdict(int)\n    for num in nums:\n        temp[num] += 1\n    return max(temp, key=temp.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    max_freq = -1\n    max_val = None\n    curr_freq = defaultdict(int)\n    for val in nums:\n        curr_freq[val] += 1\n        if curr_freq[val] > max_freq:\n            max_freq = curr_freq[val]\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = sorted(nums)\n    mydict = defaultdict(int)\n    mymax = 0\n    myindex = 0\n    for i in range(0,len(nums)):\n        if mydict[nums[i]] > 0:\n            mydict[nums[i]] += 1\n        else:\n            mydict[nums[i]] = 1\n        if mydict[nums[i]] > mymax:\n            mymax = mydict[nums[i]]\n            myindex = nums[i]\n    return myindex\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # map and find the max\n    max_n = 0\n    max_count = 0\n    for i in nums:\n        if nums[i] > max_count:\n            max_count = nums[i]\n            max_n = i\n    return max_n\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Python 3 doesn't have collections.Counter\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash = {}\n    max_occur = 0\n    for num in nums:\n        if num in hash:\n            hash[num] += 1\n        else:\n            hash[num] = 1\n    for key, value in hash.items():\n        if value > max_occur:\n            max_occur = value\n            max_key = key\n    print(max_occur)\n    print(max_key)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #hash table\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    for key, value in freq.items():\n        if value == max(freq.values()):\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    #Hashing\n    res = defaultdict(int)\n    for num in nums:\n        res[num] += 1\n    max_count = max(res.values())\n    if max_count == 0:\n        return None\n    else:\n        return max_count, res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    string_arr = list(str1)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    string_arr.reverse()\n    i = 0\n    while i < len(string_arr):\n        if string_arr[i] in vowels:\n            string_arr.remove(string_arr[i])\n        else:\n            i += 1\n    return \"\".join(string_arr)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    \n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str = new_str + char\n        else:\n            new_str = new_str + char.upper()\n    \n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowels = ''.join(vowels)\n    \n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + str1[i+1:]\n    \n    return str1\n    \ndef make_abba(a, b):\n    '''\n    Given 2 strings, a and b, return the result of putting them together in the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".\n    '''\n    return a + b + b + a\n    \ndef make_tags(tag, word):\n    '''\n    Write a function make_tags() that takes in a tag and word, and returns a string with the \n    correctly formatted tags (including the opening and closing tags). \n    '''\n    return \"<{0}>{1}</{0}>\".format(tag, word)\n    \ndef make_out_word(out, word):\n    '''\n    Write a function called make_out_word() that takes in a string and a word and returns a new string \n    which is the same as the original except with the word in the middle of the string \n    replaced with '<<word>>'. \n    For example, if out = \"hey\" and word = \"hi\", the function should return \"<<hi>>hey\".\n    '''\n    return out[:2] + word + out[2:]\n    \ndef test_make_out_word():\n    assert make_out_word(\"hey\", \"hi\") == \"<<hi>>hey\"\n    assert make_out_word(\"hey\", \"hello\") == \"<<hello>>hey\"\n    assert make_out_word(\"hey\", \"word\") == \"<<word>>hey\"\n    \n    \ndef is_abecedarian(s):\n    '''\n    Write a function is_abecedarian() to determine if a string is an abecedarian string, \n    (whether it is spelled in alphabetical order from least to greatest). \n    An abecedarian string is a string that spells out the letters in \n    lexicographical order, with no skipped letters (e.g. \"abc\" is an abecedarian string).\n    '''\n    for i in range(len(s) - 1):\n        if s[i] > s[i+1]:\n            return False\n    return True\n    \ndef test_is_abecedarian():\n    assert is_abecedarian(\"aaa\") == True\n    assert is_abecedarian(\"aba\") == False\n    assert is_abecedarian(\"aab\") == False\n    assert is_abecedarian(\"bba\") == True\n    assert is_abecedarian(\"bbaaa\") == False\n    assert is_abecedarian(\"abc\") == True\n    \ndef rotate_left(l,n):\n    '''\n    Write a function rotate_left() that takes in a list l and a non-negative integer n. \n    rotate_left should rotate the list left n times (which means that the front of the list moves to the end)\n    and return the new list. \n    (Note that you can only rotate the list a non-negative number of times).\n    '''\n    l = l[n:] + l[:n]\n    return l\n    \ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\n    assert rotate_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\n    assert rotate_left([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\n    assert rotate_left([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    \ndef filter_list(l, check_fn):\n    '''\n    Write a function filter_list() that takes in a list of strings and a function check_fn \n    that returns either True or False. \n    filter_list should return a new list of strings containing only the strings from the original \n    list that returned True using the check_fn.\n    '''\n    return [i for i in l if check_fn(i)]\n    \ndef test_filter_list():\n    assert filter_list(['a', 'b', 'c', 'd', 'e', 'f'], lambda x: x.isupper()) == ['A', 'B', 'C', 'D', 'E', 'F']\n    assert filter_list(['a', 'b', 'c', 'd', 'e', 'f'], lambda x: x.islower()) == ['a', 'b', 'c', 'd', 'e', 'f']\n    assert filter_list(['a', 'b', 'c', 'd', 'e', 'f'], lambda x: x.isdigit()) == ['1', '2', '3', '4', '5', '6']\n    \ndef reverse_string(s):\n    '''\n    Write a function reverse_string() that takes in a string and returns a new string, \n    which is the reverse of the original string.\n    '''\n    return s[::-1]\n    \ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    assert reverse_string(\"hi\") == \"ih\"\n    assert reverse_string(\"hihihi\") == \"ihihihihi\"\n    assert reverse_string(\"12345678\") == \"67812345\"\n    \ndef flip_string_left_to_right(s):\n    '''\n    Write a function flip_string_left_to_right() that takes in a string and returns a new string \n    which is the flipped version of the original string left to right.\n    '''\n    return s[::-1]\n    \ndef test_flip_string_left_to_right():\n    assert flip_string_left_to_right(\"hello\") == \"olleh\"\n    assert flip_string_left_to_right(\"hi\") == \"ih\"\n    assert flip_string_left_to_right(\"hihihi\") == \"ihihihihi\"\n    assert flip_string_left_to_right(\"12345678\") == \"67812345\"\n    \ndef is_palindrome(s):\n    '''\n    Write a function is_palindrome() that takes in a string and returns a boolean \n    True if the string is a palindrome, False if it is not.\n    A palindrome is a string that spells out the letters in a way that is the same when read \n    backwards. For example: racecar, madam, racecar, racecar.\n    '''\n    return s == s[::-1]\n    \ndef test_is_palindrome():\n    assert is_palindrome(\"abc\") == False\n    assert is_palindrome(\"racecar\") == True\n    assert is_palindrome(\"racecarabc\") == False\n    assert is_palindrome(\"racecarracecar\") == True\n    assert is_palindrome(\"a\") == True\n    assert is_palindrome(\"\") == True\n    \ndef is_abecedarian_word(word):\n    '''\n    Write a function is_abecedarian_word() that takes in a string and returns a boolean \n    True if the letters in the word are sorted in alphabetical order from least to greatest.\n    An abecedarian word is one that spells out the letters in alphabetical order from least to greatest\n    (e.g. \"racecar\" is an abecedarian word because it spells out the letters in the order of least to greatest).\n    '''\n    for i in range(len(word) - 1):\n        if word[i] > word[i+1]:\n            return False\n    return True\n    \ndef test_is_abecedarian_word():\n    assert is_abecedarian_word(\"a\") == True\n    assert is_abecedarian_word(\"ab\") == False\n    assert is_abecedarian_word(\"abc\") == True"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','y'])\n    s = list(str1)\n    start_index = 0\n    end_index = len(str1) - 1\n    while start_index < end_index:\n        if s[start_index] not in vowels:\n            start_index += 1\n        elif s[end_index] not in vowels:\n            end_index -= 1\n        else:\n            s[start_index], s[end_index] = s[end_index], s[start_index]\n            start_index += 1\n            end_index -= 1\n    return ''.join(s)\n    \ndef reverse_vowels_v2(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','y'])\n    s = list(str1)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels.update(set('AEIOU'))\n    new_str = ''\n    for letter in str1:\n        if letter in vowels:\n            new_str += letter\n        else:\n            new_str += '*'\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    new_str = str1[::-1]\n    new_str = list(new_str)\n    for i in range(len(new_str)):\n        if new_str[i] not in vowels:\n            new_str[i] = new_str[i].upper()\n    new_str = ''.join(new_str)\n    return new_str\n    \ndef palindrome_pairs(word):\n    '''\n    Write a program to count the number of palindromic pairs in a string.\n    A palindrome pair is an anagram of a word, which is a word that has the same letters\n    in the same order and the same number of occurrences. For example,\n    the words \"racecar\" and \"race\" are anagrams.\n    '''\n    def is_palindrome(word):\n        word = word.lower()\n        word = word.replace(' ', '')\n        if len(word) < 2:\n            return True\n        if word[0]!= word[-1]:\n            return False\n        return is_palindrome(word[1:-1])\n    \n    word_dict = {}\n    def get_word(word):\n        if word in word_dict:\n            return word_dict[word]\n        word = word.lower()\n        word = word.replace(' ', '')\n        if word[0]!= word[-1]:\n            return word\n        if word not in word_dict:\n            word_dict[word] = word\n        return word\n    \n    for i in range(len(word)):\n        word_dict[get_word(word)] = i\n    \n    res = 0\n    for i in range(len(word)):\n        if is_palindrome(word[i:]):\n            if word[i]!= word[i + 1]:\n                res += 1\n    \n    return res\n    \ndef count_x(arr, x):\n    '''\n    Write a program to count the number of occurences of x in arr.\n    '''\n    arr_counter = 0\n    x_counter = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            x_counter += 1\n        if arr[i] == x and arr_counter < x_counter:\n            arr_counter = x_counter\n    return arr_counter\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    string = str1.lower()\n    res = \"\"\n    for i in string:\n        if i not in vowels:\n            res = res + i\n        else:\n            res = res + i\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    str1 = str1.replace(\"a\",\"\",1)\n    str1 = str1.replace(\"e\",\"\",1)\n    str1 = str1.replace(\"i\",\"\",1)\n    str1 = str1.replace(\"o\",\"\",1)\n    str1 = str1.replace(\"u\",\"\",1)\n    \n    \n    vowels = 'aeiou'\n    new_string = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_string = new_string + str1[i]\n    \n    \n    return new_string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    lst1 = list(str1)\n    lst2 = []\n    \n    for i in range(len(lst1)):\n        if lst1[i] in vowels:\n            lst2.append(lst1[i])\n        else:\n            lst2.append('*')\n    \n    lst2 = \"\".join(lst2)\n    return lst2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = set('aeiou')\n    \n    vowels_in_str = vowels.intersection(set(str1.lower()))\n    \n    reversed_str = str1[::-1]\n    \n    for char in reversed_str:\n        if char in vowels_in_str:\n            reversed_str = reversed_str.replace(char, \"\")\n    \n    return reversed_str\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in range(len(tup1)):\n        tup_string += str(tup1[i]) +''\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ntup1 = (1,2,3)\ntup2 = (4,5,6)\ntup3 = ('a','b','c')\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in range(len(tup1)):\n        if i < len(tup1) -1:\n            s += str(tup1[i]) + ', '\n        else:\n            s += str(tup1[i])\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to hold the sum of the negative numbers\n    sum_negativenum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum of negative numbers\n        if num < 0:\n            sum_negativenum += num\n    return sum_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_numbers = 0\n    for num in nums:\n        if num < 0:\n            sum_numbers += num\n    return sum_numbers\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(0,len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for x in nums:\n        if x < 0:\n            total += x\n    return total\n    \n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n    \n    \ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nu"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    return sum(negative_nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # I thought I could just make the number a variable and increment it,\n    # but I'm not using math.ceil and math.floor, so I'm making this a little\n    # more difficult:\n    return (n * ((6 * n) - 1) / 5) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    return n*(3*n - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 6*(2*n-1) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    number = 1\n    while count < n:\n        count += 1\n        number += 6\n        if count % 2 == 0:\n            number -= 2\n    return number\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return -1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result = result * (6 * i - 5) // (2 * i - 1)\n        return result\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (pow(3*n - 3, 2)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 1\n    y = 0\n    for _ in range(n):\n        x, y = y, x + 2 * y - 1\n    return x\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # corner case\n    if n == 0: \n        return 0\n    \n    # corner case\n    if n == 1: \n        return 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return (2 **.5 - 1) / 2\n    else:\n        return (3 * n * (n - 1)) / 2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    a = array('b')\n    for i in range(len(nums)):\n        a.append(0)\n        if nums[i] == 0:\n            a[i] = 1\n    c = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            c = c+1\n    return c/len(a)\n    \ndef longest_common_prefix(strs):\n    '''\n    Write a function that takes in an array of strings and returns the longest common prefix.\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i=0\n    j=0\n    for num in nums:\n        if num==0:\n            i+=1\n    for num in nums:\n        if num!=0:\n            j+=1\n    return i/j\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if type(nums) is int:\n        zeros = 0\n        ones = 0\n        for i in nums:\n            if i == 0:\n                zeros += 1\n            else:\n                ones += 1\n        print(\"\\nzeros = \",zeros,\"\\ntimes = \",ones)\n        return zeros/ones\n    else:\n        return \"error\"\ndef num_of_elems(nums):\n    '''\n    Write a function to count the number of non-zero elements in an array.\n    '''\n    if type(nums) is int:\n        zeros = 0\n        ones = 0\n        for i in nums:\n            if i == 0:\n                zeros += 1\n            else:\n                ones += 1\n        print(\"\\nzeros = \",zeros,\"\\ntimes = \",ones)\n        return ones\n    else:\n        return \"error\"\ndef first_k_fibonacci(n, k):\n    '''\n    Write a function that takes in a number and returns the first k numbers in the Fibonacci sequence.\n    '''\n    if n <= 1:\n        return n\n    first = 0\n    second = 1\n    count = 0\n    while count < k-1:\n        temp = first\n        first = second\n        second += temp\n        count += 1\n    print(first)\n    return first\ndef x_power_y(x,y):\n    '''\n    Write a function that takes in two integers and returns the result of x to the power y.\n    '''\n    result = 1\n    for i in range(y):\n        result *= x\n    print(result)\n    return result\ndef get_min_max(nums):\n    '''\n    Write a function that takes in an array of integers and returns the minimum and maximum integers\n    in the array.\n    '''\n    if type(nums) is int:\n        min_num = nums\n        max_num = nums\n        for i in nums:\n            if i > max_num:\n                max_num = i\n            if i < min_num:\n                min_num = i\n        print(\"\\nmin = \",min_num,\"\\nmax = \",max_num)\n        return min_num, max_num\n    else:\n        return \"error\"\ndef create_dict(n,a):\n    '''\n    Write a function that takes in a number and an array of numbers,\n    and returns a dictionary with the keys being the numbers in the array and\n    the values being the factorial of that number.\n    '''\n    if type(n) is int:\n        factorial_dict = {}\n        for i in a:\n            if i in factorial_dict:\n                factorial_dict[i] += 1\n            else:\n                factorial_dict[i] = 1\n        for i in factorial_dict:\n            factorial_dict[i] = (n**factorial_dict[i])\n        print(factorial_dict)\n        return factorial_dict\n    else:\n        return \"error\"\ndef sum_arrays(a,b):\n    '''\n    Write a function that takes in two arrays of numbers, and returns an array\n    containing the sum of the numbers in each array,\n    but with each element in the array of numbers appended to the front.\n    '''\n    if type(a) is int and type(b) is int:\n        new_a = array('i',a)\n        new_b = array('i',b)\n        new_arr = []\n        for i in range(len(new_a)):\n            new_arr.append(new_a[i])\n            new_arr.append(new_b[i])\n        print(new_arr)\n        return new_arr\n    else:\n        return \"error\"\ndef sum_odds(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of all of the odd numbers\n    between 1 and n (inclusive).\n    '''\n    if type(n) is int:\n        sum_odd = 0\n        for i in range(1,n+1):\n            if i % 2 == 1:\n                sum_odd += i\n        print(sum_odd)\n        return sum_odd\n    else:\n        return \"error\"\ndef get_hcf(x,y):\n    '''\n    Write a function that takes in two integers and returns the H.C.F. (GCD)\n    of those numbers.\n    '''\n    if type(x) is int and type(y) is int:\n        if x > y:\n            smaller = y\n        else:\n            smaller = x\n        for i in range(1,smaller+1):\n            if x % i == 0 and y % i == 0:\n                hcf = i\n        print(hcf)\n        return hcf\n    else:\n        return \"error\"\ndef get_triangles(n):\n    '''\n    Write a function that takes in an integer n and returns the number of\n    triangles that can be made with those n numbers.\n    '''\n    if type(n) is int:\n        triangles = 0\n        if n == 0:\n            return 0\n        else:\n            for i in range(1,n+1):\n                if i == 0:\n                    pass\n                elif i == 1:\n                    triangles += 1\n                else:\n                    for j in range(2,i+1):\n                        if i % j == 0:\n                            break\n                    else:\n                        triangles += 1\n        print(\"\\ntriangles = \",triangles)\n        return triangles\n    else:\n        return \"error\"\ndef max_neg_nums(nums):\n    '''\n    Write a function that takes in a list of numbers, and returns a list of the\n    maximum negative numbers in the list.\n    '''\n    if type(nums) is int:\n        max_neg = 0\n        for i in nums:\n            if i < 0:\n                if i > max_neg:\n                    max_neg = i\n        print(\"\\nmax = \",max_neg)\n        return max_neg\n    else:\n        return \"error\"\ndef largest_divisor(n):\n    '''\n    Write a function that takes in a number and returns the largest divisor of the number.\n    '''\n    if type(n) is int:\n        largest_divisor = 1\n        while n % largest_divisor == 0:\n            largest_divisor += 1\n        print(\"\\nlargest_divisor = \",largest_divisor)\n        return largest_divisor\n    else:\n        return \"error\"\ndef count_evens(nums):\n    '''\n    Write a function that takes in a list of integers and returns the number of\n    integers that are even.\n    '''\n    if type(nums) is int:\n        count = 0\n        for i in nums:\n            if i == 0:\n                pass\n            elif i % 2 == 0:\n                count += 1\n        print(\"\\ncount = \",count)\n        return count\n    else:\n        return \"error\"\ndef get_longest_word(word_list):\n    '''\n    Write a function that takes in a list of strings and returns the longest string.\n    '''\n    if type(word_list) is list:\n        word_list = sorted(word_list, key=lambda x: len(x))\n        return word_list[-1]\n    else:\n        return \"error\"\ndef string_to_list(string):\n    '''\n    Write a function that takes in a string and returns a list of integers that\n    represents the characters of the string.\n    '''\n    if type(string) is str:\n        string_list = []\n        for i in range(len(string)):\n            string_list.append(string[i])\n        return string_list\n    else:\n        return \"error\"\ndef get_factorial(n):\n    '''\n    Write a function that takes in a number and returns the factorial of that number.\n    '''\n    if type(n) is int:\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial * i\n        print(factorial)\n        return factorial\n    else:\n        return \"error\"\ndef is"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #put a 0 in the array\n    nums.append(0)\n    #count the zeroes in the array\n    zeroes=0\n    for i in range(len(nums)-1):\n        if nums[i]==0:\n            zeroes+=1\n    #the number of 1s in the array\n    ones=len(nums)-zeroes\n    #ratio of zeroes to ones\n    return zeroes/ones\n    \ndef bit_flipping(string):\n    '''\n    Write a function to replace all the spaces in a string with '%20'.\n    '''\n    #declare a new string variable\n    new_str = \"\"\n    #iterate through the string variable\n    for i in string:\n        #if the character is a space\n        if i =='':\n            #append a %20\n            new_str+= \"%20\"\n        else:\n            #otherwise just append the character\n            new_str+=i\n    return new_str\n    \ndef reverse(string):\n    '''\n    Write a function that reverses the order of the characters in the string.\n    '''\n    #declare an empty string variable\n    reversed_string = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is a space, then don't append to the new string variable\n        if string[i]!='':\n            #append the character to the reversed string variable\n            reversed_string+=string[i]\n    return reversed_string\n    \ndef my_range(start, end):\n    '''\n    Write a function to return a list of all numbers between 0 and 99.\n    '''\n    #declare a list variable\n    list = []\n    #iterate through the range of numbers\n    for i in range(start, end+1):\n        #append the number to the list\n        list.append(i)\n    return list\n    \ndef has_unique_chars(string):\n    '''\n    Write a function that returns True if all the characters of a string are unique.\n    '''\n    #declare a set variable\n    unique_chars = set()\n    #iterate through the string variable\n    for i in range(len(string)):\n        #check if the character is already in the set\n        if string[i] in unique_chars:\n            #if it is, return False\n            return False\n        #if the character is not in the set, add it to the set\n        else:\n            unique_chars.add(string[i])\n    return True\n    \ndef capitalize(string):\n    '''\n    Write a function that returns the first character of each word as upper case, and the rest of the word unchanged.\n    '''\n    #declare a string variable\n    string_capitalized = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is a space, then don't capitalize\n        if string[i]!='':\n            #if not a space, capitalize the character\n            string_capitalized += string[i].upper()\n        else:\n            #otherwise, just append the character\n            string_capitalized += string[i]\n    return string_capitalized\n    \ndef has_at_least_two_vowels(string):\n    '''\n    Write a function that returns True if a word in a string has at least two vowels in it.\n    '''\n    #declare a boolean variable\n    has_at_least_two_vowels = False\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is a space, then don't check it\n        if string[i]!='':\n            #check if the character is a vowel\n            if string[i] in ('a','e','i','o','u'):\n                #if it is, increment the counter\n                has_at_least_two_vowels += 1\n    return has_at_least_two_vowels >= 2\n    \ndef convert_to_binary(number):\n    '''\n    Write a function that returns a string representing the binary number.\n    '''\n    #declare a string variable\n    binary = \"\"\n    #iterate through the number variable\n    for i in range(number):\n        #if the character is a '1', then add a '1' to the binary string\n        if i%2 == 1:\n            binary += '1'\n        #otherwise, add a '0'\n        else:\n            binary += '0'\n    return binary\n    \ndef is_sorted(nums):\n    '''\n    Write a function that returns True if the list of integers is sorted in non-decreasing order.\n    '''\n    #iterate through the list variable\n    for i in range(len(nums)-1):\n        #if the current number is greater than the next number\n        if nums[i]>nums[i+1]:\n            #return False\n            return False\n    #if the function executes without returning False, then the list is sorted in non-decreasing order\n    return True\n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns True if a string is a palindrome.\n    '''\n    #declare a boolean variable\n    is_palindrome = False\n    #declare a string variable\n    is_inverted = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is a space, then don't add it to the string\n        if string[i]!='':\n            #add the character to the string variable\n            is_inverted += string[i]\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the first character in the string variable is equal to the last character in the string variable\n        if string[i] == is_inverted[i]:\n            #return True\n            is_palindrome = True\n    #if the function executes without returning True, then the string is not a palindrome\n    return is_palindrome\n    \ndef shift_character_right(string, amount):\n    '''\n    Write a function that shifts the characters in a string right by a given amount.\n    '''\n    #declare a new string variable\n    new_string = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is not a space, then add it to the new string variable\n        if string[i]!='':\n            new_string += string[i]\n    #if the amount is less than 0, then return the string variable\n    if amount < 0:\n        return string\n    #if the amount is 0, then return the new string variable\n    if amount == 0:\n        return new_string\n    #if the amount is greater than 0, then shift the new string variable by the amount and return it\n    else:\n        return string[amount:] + string[0:amount]\n    \ndef shift_characters_left(string, amount):\n    '''\n    Write a function that shifts the characters in a string left by a given amount.\n    '''\n    #declare a new string variable\n    new_string = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        #if the character is not a space, then add it to the new string variable\n        if string[i]!='':\n            new_string += string[i]\n    #if the amount is less than 0, then return the string variable\n    if amount < 0:\n        return string\n    #if the amount is 0, then return the new string variable\n    if amount == 0:\n        return new_string\n    #if the amount is greater than 0, then shift the new string variable by the amount and return it\n    else:\n        return string[len(string) - 1] + string[0:len(string)-1]\n    \ndef count_consecutive(string):\n    '''\n    Write a function that returns the number of substrings in a string that are the same as it's previous substring.\n    '''\n    #declare a boolean variable\n    is_consecutive = False\n    #declare a string variable\n    current_string = \"\"\n    #iterate through the string variable\n    for i in range(len(string)):\n        "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # zero_count = 0\n    # non_zero_count = 0\n    # for num in nums:\n    #     if num == 0:\n    #         zero_count += 1\n    #     else:\n    #         non_zero_count += 1\n    # return zero_count/non_zero_count\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            z += 1\n        else:\n            n += 1\n    return z/n\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeros = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zeros += 1\n    return zeros/n\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n    return zeroes/len(nums)\ndef group_anagrams(words):\n    '''\n    Given an array of strings words, group the anagrams together. You can return the answer in any order.\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes,non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i==0:\n            count += 1\n    return count/len(nums)\n    \n    \n    \n    \n    #better way:\n    return float(len([i for i in nums if i == 0]))/len(nums)\n    \n    \n    \n    \ndef zero_count2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([i for i in nums if i == 0])/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0) : \n        return False\n    while(n % 2 == 0) : \n        n = n / 2\n    # return n == 1\n    while(True) : \n        if (n % 2!= 0) : \n            break\n        n = n / 2\n    if (n == 1) : \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    else:\n        while n>1:\n            if n%2==0:\n                n/=2\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(isinstance(n,int)==False):\n        print(\"n is not of type int\");\n        return -1;\n    if(n<0):\n        print(\"n is not a non-negative integer\");\n        return -1;\n    if(n==0):\n        return 0;\n    if(n==1):\n        return 1;\n    if(n==2):\n        return 2;\n    # recursive case\n    for i in range(2,n+1):\n        if(n%i==0):\n            #print(\"n:\",n,\"i:\",i);\n            if(is_Power_of_Two(i)==True):\n                #print(\"i:\",i);\n                return 1;\n    return 0;\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n==0): \n        return True\n    if (n <= 0): \n        return False\n    x = n\n    while (x >= 2): \n        x = x >> 1\n        if (x == 0): \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # number of 2's and 1's\n    num = 0\n    while n!= 0:\n        n = n//2\n        num = num + 1\n    if num == 0:\n        return False\n    # only 1 digit will be left after dividing by 2\n    n = n%2\n    if n == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<=0):\n        print(\"Please enter a positive number\")\n        return\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = 0\n    while(n>0):\n        s += n%2\n        n = n//2\n    if(s==0):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # if n==0:\n    #     return False\n    # if n<0:\n    #     return False\n    # else:\n    #     while n>0:\n    #         if n%2!=0:\n    #             return False\n    #         n=n//2\n    # return True\n    if n==0:\n        return False\n    if n<0:\n        return False\n    else:\n        while n>0:\n            if n%2!=0:\n                return False\n            n=n//2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag=0\n    while(n>0):\n        r=n%2\n        n=n//2\n        if(r==0):\n            flag=1\n            break\n    if(flag==1):\n        return 0\n    else:\n        return 1\n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if (n & 1) == 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 3.1415926535897932384626433832795028841971693993751\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #circumference formula\n    pi = math.pi\n    radius = r\n    circumference = 2*pi*radius\n    print(\"{0}\".format(circumference))\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    solution = []\n    for each_list in test_list:\n        for each_number in each_list:\n            solution.append(each_number)\n    return solution\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for i in test_list:\n        if type(i) == list:\n            res = res + extract_singly(i)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for list_item in test_list:\n        for item in list_item:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    i = 0\n    \n    for j in range(len(test_list)):\n        if type(test_list[j]) is list:\n            for k in range(len(test_list[j])):\n                i += test_list[j][k]\n        else:\n            i += test_list[j]\n    \n    return i\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    l = []\n    for i in test_list:\n        for j in i:\n            l.append(j)\n    print(l)\n    return l\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for element in test_list:\n        if isinstance(element, list):\n            result = result + extract_singly(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            for j in range(len(test_list[i])):\n                new_list.append(test_list[i][j])\n        else:\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: Write your function here\n    x = len(test_list)\n    if x == 0:\n        return test_list\n    else:\n        new_list = test_list[0]\n        for i in range(1, x):\n            new_list = new_list + test_list[i]\n        return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = list(test_list[i])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i][0] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len(test_list)\n    while i < length_test_list:\n        test_list[i] = int(test_list[i][0])\n        i += 1\n    i = 0\n    length_test_list = len"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 0, -1):\n        for j in range(0, i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(\"Pancake Sort\")\n    # Your code here\n    if len(nums) == 1:\n        return nums\n    else:\n        nums.sort(reverse=True)\n        for i in range(len(nums)):\n            if i == len(nums)-1:\n                continue\n            if nums[i] > nums[i+1]:\n                nums[i+1], nums[i] = nums[i], nums[i+1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums,start,end):\n        while start < end:\n            nums[start],nums[end] = nums[end],nums[start]\n            start += 1\n            end -= 1\n    def rotate(nums,k):\n        n = len(nums)\n        k = k % n\n        reverse(nums,0,n-1)\n        reverse(nums,0,k-1)\n        reverse(nums,k,n-1)\n    def pancake_sort(nums):\n        n = len(nums)\n        if n == 1:\n            return nums\n        for i in range(n-1,0,-1):\n            #check for largest element\n            for j in range(i):\n                if nums[j] > nums[j+1]:\n                    #rotate and reverse\n                    rotate(nums,j+1)\n                    reverse(nums,j+1,i)\n                    return nums\n    return pancake_sort(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_helper(nums, len(nums)-1, 0)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        print(i)\n        for j in range(i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\nprint(pancake_sort([1,1,5,3,2,4,6]))\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    sorted = nums\n    print(nums)\n    for i in range(n-1, 0, -1):\n        min_index = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        swap(i, min_index)\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    return nums[::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    while len(nums) > 1:\n        for i in range(len(nums)):\n            if nums[i] > nums[i+1]:\n                res.append(nums[i])\n                nums = nums[:i] + nums[i+1:] + nums[i+1:i+2] + nums[i:i+1]\n                break\n        else:\n            res.append(nums[-1])\n            nums = nums[:-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if nums is empty, it's already sorted\n    if len(nums) == 0:\n        return nums\n    \n    # if the list contains only one element, it's already sorted\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    pancake_nums = nums[:]\n    while True:\n        i = 0\n        j = len(pancake_nums) - 1\n        while i < j:\n            if pancake_nums[i] < pancake_nums[j]:\n                pancake_nums.insert(i, pancake_nums.pop(j))\n                i += 1\n            else:\n                j -= 1\n        if len(pancake_nums) == 1:\n            return pancake_nums\n        if len(pancake_nums) == 0:\n            break\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    b=0\n    c=0\n    for i in range(0,len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            a=a+1\n            \n        if(list1[i]==list2[i] and list1[i]!=list3[i]):\n            b=b+1\n        if(list1[i]!=list2[i] and list1[i]==list3[i]):\n            c=c+1\n    print(\"same pair are\",a,\" \",b,\" \",c)\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    temp1 = []\n    temp2 = []\n    temp3 = []\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            result += 1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    list1 = list(list1)\n    list2 = list(list2)\n    list3 = list(list3)\n    if list1.index(list2[0]) == list2.index(list3[0]) and list1.index(list2[1]) == list2.index(list3[1]) and list1.index(list2[2]) == list2.index(list3[2]):\n        count += 1\n    if list2.index(list1[0]) == list1.index(list2[0]) and list2.index(list1[1]) == list1.index(list2[1]) and list2.index(list1[2]) == list1.index(list2[2]):\n        count += 1\n    if list3.index(list1[0]) == list1.index(list3[0]) and list3.index(list1[1]) == list1.index(list3[1]) and list3.index(list1[2]) == list1.index(list3[2]):\n        count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i=0\n    while i < len(list1):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list1[i] == list3[k] and list1[i] == list3[i]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    print(\"count of same items in the same position of three lists are :\",count)\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    #iterate for all items\n    for i in range(len(list1)):\n        #check for equality in each pair\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            cnt += 1\n    print(\"Number of same pairs in a given list of 3:\",cnt)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(i.isdigit() for i in Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0\n    i = 0\n    while i < len(Input):\n        if type(Input[i]) is list:\n            n += 1\n        i += 1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_tuple = Input\n    result_dict = {}\n    for i in my_tuple:\n        result_dict[i] = result_dict.get(i, 0) + 1\n    return len(result_dict)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==list:\n            count+=1\n    return count\n    \ndef find_dicts(Input):\n    '''\n    Write a function to find number of dictionaries present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==dict:\n            count+=1\n    return count\n    \ndef find_lists_and_dictionaries(Input):\n    '''\n    Write a function to find number of lists and dictionaries present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==list:\n            count+=1\n        elif type(i)==dict:\n            count+=1\n    return count\n    \ndef find_item(Input):\n    '''\n    Write a function to find number of items present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        count+=len(i)\n    return count\n    \ndef find_item_sum_count(Input):\n    '''\n    Write a function to find sum of items and the number of items in the given tuple.\n    '''\n    sum=0\n    count=0\n    for i in Input:\n        sum+=len(i)\n        count+=1\n    return sum,count\n    \ndef find_item_sum_count_even(Input):\n    '''\n    Write a function to find sum of items and the number of items in the given tuple.\n    '''\n    sum=0\n    count=0\n    for i in Input:\n        if len(i)%2==0:\n            sum+=len(i)\n            count+=1\n    return sum,count\n    \ndef find_list_length(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i):\n            max_length=len(i)\n    return max_length\n    \ndef find_list_length_even(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i)%2:\n            max_length=len(i)%2\n    return max_length\n    \ndef find_list_length_odd(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i)%2:\n            max_length=len(i)%2\n    return max_length\n    \ndef find_longest_length(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \ndef find_longest_length_odd(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \ndef find_longest_length_even(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \ndef find_longest_length_even_odd(Input):\n    '''\n    Write a function to find the length of the longest list.\n    '''\n    max_length=0\n    for i in Input:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \ndef find_max_len_in_list(Input):\n    '''\n    Write a function to find maximum length in the given list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i):\n            max_length=len(i)\n    return max_length\n    \ndef find_max_len_in_list_odd(Input):\n    '''\n    Write a function to find maximum length in the given list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i)%2:\n            max_length=len(i)%2\n    return max_length\n    \ndef find_max_len_in_list_even(Input):\n    '''\n    Write a function to find maximum length in the given list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i)%2:\n            max_length=len(i)%2\n    return max_length\n    \ndef find_max_len_in_list_odd_even(Input):\n    '''\n    Write a function to find maximum length in the given list.\n    '''\n    max_length=0\n    for i in Input:\n        if max_length<len(i)%2:\n            max_length=len(i)%2\n    return max_length\n    \ndef find_min_len_in_list(Input):\n    '''\n    Write a function to find minimum length in the given list.\n    '''\n    min_length=99999999\n    for i in Input:\n        if min_length>len(i):\n            min_length=len(i)\n    return min_length\n    \ndef find_min_len_in_list_odd(Input):\n    '''\n    Write a function to find minimum length in the given list.\n    '''\n    min_length=99999999\n    for i in Input:\n        if min_length>len(i)%2:\n            min_length=len(i)%2\n    return min_length\n    \ndef find_min_len_in_list_even(Input):\n    '''\n    Write a function to find minimum length in the given list.\n    '''\n    min_length=99999999\n    for i in Input:\n        if min_length>len(i)%2:\n            min_length=len(i)%2\n    return min_length\n    \ndef find_min_len_in_list_odd_even(Input):\n    '''\n    Write a function to find minimum length in the given list.\n    '''\n    min_length=99999999\n    for i in Input:\n        if min_length>len(i)%2:\n            min_length=len(i)%2\n    return min_length\n    \ndef find_missing_data(Input):\n    '''\n    Write a function to find missing data in the given list.\n    '''\n    missing_data=0\n    for i in Input:\n        if len(i)%2==0:\n            missing_data+=1\n    return missing_data\n    \ndef find_missing_data_odd(Input):\n    '''\n    Write a function to find missing data in the given list.\n    '''\n    missing_data=0\n    for i in Input:\n        if len(i)%2==0:\n            missing_data+=1\n    return missing_data\n    \ndef find_missing_data_even(Input):\n    '''\n    Write a function to find missing data in the given list.\n    '''\n    missing_data=0\n    for i in Input:\n        if len(i)%2!=0:\n            missing_data+=1\n    return missing_data\n    \ndef find_missing_data_odd_even(Input):\n    '''\n    Write a function to find missing data in the given list.\n    '''\n    missing_data=0\n    for i in Input:\n        if len(i)%2!=0:\n            missing_data+=1\n    return missing_data\n    \ndef find_min_max_in_list(Input):\n    '''\n    Write a function to find minimum and maximum value in the given list.\n    '''\n    minimum=99999999999999999999\n    maximum=0\n    for i in Input"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter=0\n    for i in Input:\n        if type(i)==list:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 =[] \n    for i in range(len(Input)): \n        for j in range(len(Input)): \n            if(i!=j): \n                if(Input[i]==Input[j]): \n                    list1.append(Input[i]) \n    print(\"No. of lists are:\",len(list1)) \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_list = []\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            my_list.append(Input[i])\n        else:\n            pass\n    print(len(my_list))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    count_of_lists = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if Input[i] == Input[j]:\n                count_of_lists = count_of_lists + 1\n    return count_of_lists\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -999999999999999999\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -2147483648\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    if len(arr)==0: return 0\n    if arr[0] < 0: return arr[0]\n    if arr[-1] > 0: return arr[-1]\n    \n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff: max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = -1\n    temp = -1\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if(abs(arr[i]-arr[j])>maximum):\n                maximum = abs(arr[i]-arr[j])\n                temp = arr[i]\n                temp2 = arr[j]\n    print(temp, temp2, maximum)\n    return (maximum)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_dif = 0\n    for i in range(len(arr)-1):\n        if(arr[i]-arr[i+1]>max_dif):\n            max_dif = arr[i]-arr[i+1]\n    return max_dif\n    \nif __name__ == \"__main__\": \n    arr = [1, 4, -5, -1, -7, 10] \n    res = max_Abs_Diff(arr) \n    print (\"Maximum difference between any two elements is\", res) \n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    diff = []\n    diff.append(abs(arr[1]-arr[0]))\n    for i in range(1,len(arr)-1):\n        diff.append(abs(arr[i+1]-arr[i]))\n    diff.append(abs(arr[len(arr)-1]-arr[len(arr)-2]))\n    return max(diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]-arr[1]\n    for i in range(len(arr)):\n        if abs(arr[i]-arr[i+1])>max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    arr.sort()\n    result = arr[n-1] - arr[0]\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(1,len(arr)):\n        if abs(arr[i-1] - arr[i]) > max_abs_diff:\n            max_abs_diff = abs(arr[i-1] - arr[i])\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    print(max_diff)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    # Your code here\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    solutions = []\n    for i in range(1,n):\n        if (x is None) or (x**2 + y**2 == n):\n            # if x is None:\n            #     x = i\n            #     y = (n - i**2) / x\n            # else:\n            #     y = i - (n - i**2) / x\n            x = i\n            y = (n - i**2) / x\n            solutions.append((x,y))\n    # print(x,y)\n    # print(solutions)\n    if len(solutions) == 0:\n        return None\n    else:\n        return solutions[0]\n    \n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    solutions = []\n    for i in range(1,n):\n        if (x is None) or (x**2 + y**2 == n):\n            # if x is None:\n            #     x = i\n            #     y = (n - i**2) / x\n            # else:\n            #     y = i - (n - i**2) / x\n            x = i\n            y = (n - i**2) / x\n            solutions.append((x,y))\n    # print(x,y)\n    # print(solutions)\n    if len(solutions) == 0:\n        return None\n    else:\n        return solutions[0]\n    \n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    solutions = []\n    for i in range(1,n):\n        if (x is None) or (x**2 + y**2 == n):\n            # if x is None:\n            #     x = i\n            #     y = (n - i**2) / x\n            # else:\n            #     y = i - (n - i**2) / x\n            x = i\n            y = (n - i**2) / x\n            solutions.append((x,y))\n    # print(x,y)\n    # print(solutions)\n    if len(solutions) == 0:\n        return None\n    else:\n        return solutions[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0 and b!= 0:\n        if n % b == 0:\n            return (0, n//b)\n        else:\n            return None\n    elif a!= 0 and b == 0:\n        if n % a == 0:\n            return (n//a, 0)\n        else:\n            return None\n    elif a!= 0 and b!= 0:\n        gcd = math.gcd(a, b)\n        x = n // a\n        y = n // b\n        if x * a + y * b == n:\n            return (x, y)\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # base case:\n    if n == 0:\n        return (0, 0)\n    # recursive case\n    x = find_solution(a, b, n - a)\n    if x == None:\n        return None\n    y = find_solution(a, b, n - b)\n    if y == None:\n        return None\n    # return the smaller of the x and y values\n    return (min(x[0], y[0]), max(x[1], y[1]))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x**2 + y**2 == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = b\n    y = a\n    while x < y:\n        if (a * x + b * y) == n:\n            return (x, y)\n        x += 1\n        y -= 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a, b = sorted([a, b])\n    for x in range(0, n + 1):\n        for y in range(0, n + 1):\n            if x * a + y * b == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, 1001):\n        for y in range(1, 1001):\n            if x * a + y * b == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a*x + b*y = n\n    # a*x + b*y >= n \n    # a*x + b*y <= n \n    # x + y >= n \n    # x + y <= n \n    \n    x = None\n    y = None\n    \n    a_lower = 0\n    a_higher = 1\n    b_lower = 0\n    b_higher = 1\n    \n    while x == None or y == None:\n        if x == None:\n            if a_lower <= a <= a_higher and b_lower <= b <= b_higher and a_lower + b_lower == n:\n                x = a_lower\n                y = b_lower\n                return (x, y)\n            \n            a_lower += 1\n            a_higher = a_lower + 1\n            b_lower += 1\n            b_higher = b_lower + 1\n        \n        else:\n            if b_lower <= b <= b_higher and a_lower <= a <= a_higher and a_lower + b_lower == n:\n                x = a_lower\n                y = b_lower\n                return (x, y)\n                \n            b_lower += 1\n            b_higher = b_lower + 1\n            a_lower += 1\n            a_higher = a_lower + 1\n    \n    return None\n    \nif __name__ == '__main__':\n    n = 1000\n    \n    res = find_solution(2, 4, n)\n    print(res)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if a == 0:\n        x = 0\n    if b == 0:\n        y = 0\n    if a == 0 and b == 0:\n        x = 0\n        y = 0\n    else:\n        if a == 1:\n            x = 0\n            y = b\n        elif b == 1:\n            x = a\n            y = 0\n        else:\n            if a!= 0 and b!= 0:\n                if a < 0 and b < 0:\n                    x = 0\n                    y = 0\n                elif a < 0 and b > 0:\n                    x = 0\n                    y = -1\n                elif a > 0 and b > 0:\n                    x = 1\n                    y = 0\n                elif a > 0 and b < 0:\n                    x = 1\n                    y = -1\n            elif a == 0:\n                if b < 0:\n                    y = 0\n                    x = -1\n                elif b > 0:\n                    y = 1\n                    x = 0\n            elif b == 0:\n                if a < 0:\n                    x = 0\n                    y = -1\n                elif a > 0:\n                    x = 1\n                    y = 0\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    newList = []\n    for i in list1:\n        if i not in list2:\n            newList.append(i)\n    return newList\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return (list(set(list1) - set(list2)))\n    "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    remove_from_list = list1 + list2\n    for ele in remove_from_list:\n        list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    x=set(list1)\n    y=set(list2)\n    z=list(x-y)\n    return z\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # not using set() method, because set() method takes an iterable\n    # so in this case we will have an unhashable object\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + (sum_series(n - 2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + (n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    x = 0\n    if (n>=1):\n        if (n==2):\n            sum = 1\n        else:\n            for i in range(n):\n                sum += (n-2*x)\n                x += 1\n        print(sum)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    sum = 0\n    for i in range(n):\n        sum += (n-2*i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    n2 = n*n\n    total = 0\n    while i <= n2:\n        total += i\n        i += 2\n    return total\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (1/2)*s*(l**2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def calc_sin(a):\n        return 1 / tan(a)\n    def calc_cos(a):\n        return 1 / tan(a)\n    def calc_ar(a, l):\n        return l * (1 + calc_sin(a) + calc_sin(2*a) + calc_sin(3*a)) / 2\n    def calc_l(a, l):\n        return l * calc_sin(a)\n    def calc_k(a, l):\n        return l * (1 + calc_cos(a) + calc_cos(2*a) + calc_cos(3*a)) / 2\n    def calc_a(a, l):\n        return l * calc_cos(a)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    p = l * tan(pi * (s - 2) / s)\n    return p\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25*s*l**2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = pi*s*(s-2*l) /2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def sin(x):\n        return tan(x * pi / 180)\n    def cos(x):\n        return 1/sin(x)\n    s = s / 2\n    if l < 3:\n        return 0\n    if l % 2 == 0:\n        return (s * (s - sin(pi / l)) * (s - cos(pi / l))) / 2\n    else:\n        return (s * (s - sin(pi / l)) * (s - cos(pi / l))) / 2\ndef area_triangle(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef area_triangle_koch(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return 0.5 * a * h\ndef area_circle_koch(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef area_koch(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    if a <= h:\n        return 0.5 * a * h\n    elif a > h:\n        return 0.5 * h * (a - h) + 0.5 * a * h + (h / 2) * (a ** 2 - h ** 2)\ndef area_koch_3(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return ((a - h) / 2) * a * h\ndef area_triangle_heron(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return a * h / 2\ndef area_circle_heron(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef area_heron(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return 0.5 * a * h\ndef area_heron_3(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return a * h / 2\ndef area_triangle_hyp(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return 1 / 2 * a * h\ndef area_circle_hyp(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r ** 2\ndef area_hyp(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return a * h / 2\ndef area_hyp_3(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return 0.5 * a * h\ndef area_triangle_rect(a, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return a * h\ndef area_rect(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_2(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_3(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_4(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_5(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_6(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_7(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_8(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_9(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_10(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_11(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_12(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_13(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_14(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_15(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_16(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_17(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_18(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_19(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_20(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_21(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_22(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_23(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_24(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_25(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return a * b\ndef area_rect_26(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    ''"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0.5 * l * tan(pi/s)\n    return a * s\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / s\n    return (s*s) / 2 * tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2 * tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s * s) / (4 * tan(pi / s))) * tan(pi/s) * (l - 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n%(2*n)-1<=0\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n%2==0 and (n+1)%2==0\n    \ndef test_div_sum():\n    print(\"test_div_sum started\")\n    assert div_sum(4) == True\n    assert div_sum(10) == True\n    assert div_sum(0) == True\n    assert div_sum(12) == True\n    assert div_sum(21) == True\n    assert div_sum(37) == True\n    assert div_sum(54) == True\n    assert div_sum(97) == True\n    assert div_sum(100) == True\n    assert div_sum(1) == False\n    assert div_sum(11) == False\n    assert div_sum(36) == False\n    assert div_sum(7) == True\n    assert div_sum(12) == False\n    assert div_sum(27) == True\n    print(\"test_div_sum finished\")\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    print(divisors)\n    print(len(divisors))\n    divisors.sort()\n    return divisors == divisors[0:2]\n    \ndiv_sum(18)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return True\n        else:\n            divisor += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    divisor=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            divisor=divisor+i\n    return divisor==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: return False\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            if div_sum(i) and div_sum(n//i):\n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if is_prime(n) and is_prime(n+1):\n        sum1 = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                sum1 += i\n        sum2 = 0\n        for i in range(1, n+1):\n            if n+1 % i == 0:\n                sum2 += i\n        return sum1 == sum2\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            sum1 += i\n    sum2 = 0\n    for i in range(1,sum1+1):\n        if(sum1 % i == 0):\n            sum2 += i\n    if(sum1 == sum2):\n        print(sum1, \"is the divisor sum of\",n)\n    else:\n        print(sum1, \"is not the divisor sum of\",n)\ndef possible_triangle(n,h):\n    '''\n    Write a function that determines whether a triangle with a given height h and sides n can be made.\n    '''\n    if((h%2 == 0) and ((n**2)+(h**2)) == ((n**2)+((n+1)*h))):\n        print(\"The given triangle has a possible triangle with a height of\",h,\"and a side length of\",n)\n    else:\n        print(\"The given triangle has not a possible triangle with a height of\",h,\"and a side length of\",n)\ndef x_y(num):\n    '''\n    Write a function that returns the sum of the x coordinates of the points in a sorted list of points given as (x,y) tuples.\n    '''\n    if len(num) == 1:\n        return num[0][0]\n    else:\n        sum_x = 0\n        for i in range(0,len(num)):\n            sum_x += num[i][0]\n        return sum_x\ndef sum_of_triangles(n,m):\n    '''\n    Write a function that finds the sum of the triangular numbers of the numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i*(i+1)/2\n    print(int(sum))\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef pentagonal_number(n):\n    '''\n    Write a function that returns the nth pentagonal number.\n    '''\n    if n == 1:\n        return (1,1)\n    else:\n        a = 1\n        b = 1\n        c = math.sqrt((5*(n))-(1))\n        for i in range(n):\n            a = (5*(n-i))+1\n            b = 5*(n-i)+1\n            c = 5*(n-i)\n            if a > b:\n                break\n            elif a == b:\n                continue\n            else:\n                a = a+1\n                b = b-1\n                c = c+1\n        return (a,b)\ndef largest_prime(n):\n    '''\n    Write a function that returns the largest prime factor of the integer n.\n    '''\n    prime_list = []\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            while n%i == 0:\n                prime_list.append(i)\n                n = n/i\n    if n!= 1:\n        prime_list.append(n)\n    prime_list = sorted(prime_list)\n    return prime_list[-1]\ndef convert_binary(n):\n    '''\n    Write a function that returns the binary representation of an integer.\n    '''\n    i = n\n    s = 0\n    while i > 0:\n        s += (i % 2)\n        i = i/2\n    return s\ndef zeroes(n):\n    '''\n    Write a function that returns the number of zeroes in a string.\n    '''\n    n = str(n)\n    count = 0\n    for i in n:\n        if i == '0':\n            count += 1\n    return count\ndef is_palindrome(n):\n    '''\n    Write a function that returns True if the integer n is a palindrome and False otherwise.\n    '''\n    num = n\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return (num == rev_num)\ndef count_even_odd(n):\n    '''\n    Write a function that returns the number of even and odd integers in a given range.\n    '''\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even,odd\ndef rectangle_area(a,b):\n    '''\n    Write a function that returns the area of the rectangle with width a and height b.\n    '''\n    return (a*b)\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits in a given integer n.\n    '''\n    n = str(n)\n    s = 0\n    for i in n:\n        s = s+int(i)\n    return s\ndef polynomial(n):\n    '''\n    Write a function that returns the nth coefficient of a polynomial of degree n.\n    '''\n    return n*(n+1)\ndef is_prime(n):\n    '''\n    Write a function that returns True if the integer n is prime and False otherwise.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef sieve_of_eratosthenes(n):\n    '''\n    Write a function that returns the list of prime numbers between 2 and n.\n    '''\n    num = []\n    for i in range(2,n+1):\n        if is_prime(i) == True:\n            num.append(i)\n    return num\ndef number_of_digits(n):\n    '''\n    Write a function that returns the number of digits in an integer n.\n    '''\n    s = str(n)\n    count = 0\n    for i in s:\n        count += 1\n    return count\ndef is_factorial(n):\n    '''\n    Write a function that returns True if n is a factorial and False otherwise.\n    '''\n    if n == 1:\n        return True\n    else:\n        k = n\n        while k > 1:\n            if k%2 == 0:\n                k = k/2\n                if n%k == 0:\n                    return False\n            else:\n                k -= 1\n                if k == 1:\n                    return False\n        return True\ndef factorial(n):\n    '''\n    Write a function that returns the nth factorial of an integer n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        k = n\n        res = 1\n        while k > 1:\n            res = res*k\n            k -= 1\n        return res\ndef list_sum(l):\n    '''\n    Write a function that returns the sum of all the numbers in a list.\n    '''\n    s = 0\n    for i in l:\n        s += i\n    return s\ndef find_divisor_sum(n):\n    '''\n    Write a function that returns the sum of the divisors of an integer n.\n    '''\n    s = 1\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            s += i\n            if n//i!= i:\n                s += n//i\n    return s\ndef is_prime_number(n):\n    '''\n    Write a function that returns True if the integer n is prime and False otherwise.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_circular(n):\n    '''\n    Write a function that returns True if the integer n is circular and False otherwise.\n    '''\n    if n == 1:\n        return True\n    e"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    num1 = 1\n    while num1 <= n:\n        if n % num1 == 0:\n            sum1 += num1\n        num1 += 1\n    num2 = 1\n    sum2 = 0\n    while num2 <= n:\n        if n % num2 == 0:\n            sum2 += num2\n        num2 += 1\n    return sum1 == sum2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            s=s+i\n            s=s+n//i\n    return s==n\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # First define a dictionary that maps each letter in the English alphabet to a position in the alphabet \n    # (as per https://docs.python.org/3.3/library/stdtypes.html#str.lower) \n    # e.g. 'a' = 0, 'b' = 1,..., 'z' = 25 \n    letter_map = {l: i for i, l in enumerate(\"abcdefghijklmnopqrstuvwxyz\")}\n    \n    # We will use a dictionary to keep track of the number of occurrences of each character in a string \n    # (and increment the count for each time a character repeats) \n    # Note that we will use this dictionary as an ordered set to avoid double-counting repeated letters \n    count_dict = {}\n    \n    # Use the count_char_position_helper function to find the occurrence of each character in the string \n    for ch in str1.lower():\n        # convert the character into its lowercase equivalent \n        ch = ch.lower()\n        # get the index of the character\n        idx = letter_map[ch]\n        # check if the index in the dictionary is not empty \n        # if not, increment the count by one \n        if idx in count_dict: \n            count_dict[idx] += 1\n        # if the index is not in the dictionary, set its value to one \n        else: \n            count_dict[idx] = 1\n    \n    return count_dict \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    \n    \n    #get the dictionary for the unique characters in the string\n    \n    #get the list of characters\n    \n    #iterate over each character and set the count to 1\n    \n    #the rest is looped again to get the dictionary of occurances\n    \n    \n    \n    #counter\n    \n    #generate a dictionary for the characters in the string\n    \n    #generate a list of characters\n    \n    #iterate over the string and loop through\n    \n    #loop again and add 1 if the character is in the dictionary\n    \n    #count is then added up\n    \n    \n    \n    \n    #test\n    \n    \n    #1\n    \n    #'A'\n    \n    #'z'\n    \n    \n    #'Aa'\n    \n    #'A'\n    \n    #'a'\n    \n    \n    #'abc'\n    \n    #'a'\n    \n    #'a'\n    \n    #'ab'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'\n    \n    #'a'"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)): \n        for j in range(len(str1)): \n            if (str1[i] == str1[j] and str1[i] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' and str1[i]!=''): \n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = {}\n    for i in range(len(str1)):\n        if str1[i] in counter:\n            counter[str1[i]] += 1\n        else:\n            counter[str1[i]] = 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    my_list = []\n    str2 = str1.lower()\n    for i in range(0, len(str2)): \n        my_list.append(str2[i])\n    for i in my_list:\n        if i not in my_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for i in range(0, len(str1)):\n        if str1.find(str1[i].lower()) == i:\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    my_dict={}\n    for i in str1:\n        if i in my_dict:\n            my_dict[i]+=1\n        else:\n            my_dict[i]=1\n    print(my_dict)\n    result=0\n    for i in my_dict:\n        if my_dict[i]==1:\n            result+=1\n    print(result)"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1 is None:\n        return 0\n    # to check if the string is not empty\n    if len(str1) <= 0:\n        return 0\n    # set up the dictionary\n    char_dict = {}\n    # initialize the dictionary\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n        else:\n            char_dict[str1[i]] = 1\n    # count the number of characters in the dictionary\n    for key, value in char_dict.items():\n        if value == len(str1):\n            return 1\n    return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == str1[i].lower():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        count_dict = {}\n        for i in range(len(str1)):\n            if str1[i] in count_dict:\n                count_dict[str1[i]] += 1\n            else:\n                count_dict[str1[i]] = 1\n        # print(count_dict)\n        return len(count_dict)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = 0\n    for num in A:\n        if xor_num(num, 0) % 2 == 0:\n            evens += 1\n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)-1, 2):\n        if A[i] == A[i+1] ^ 2:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if len(A) < 2:\n        return count\n    else:\n        for i in range(len(A)):\n            for j in range(i+1,len(A)):\n                if A[i]!= A[j]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                sum = sum + 1\n    return sum\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A: \n        return 0\n    count, i = 0, 1\n    while i < len(A):\n        j = 0\n        while j < len(A):\n            if i!= j and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if xor(A[i],A[j]) == 0:\n                count+=1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    pw = 1\n    while(pw < n):\n        pw = 2*pw\n    return pw\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    i = 1\n    while i <= n:\n        i = 2 ** i\n    return i\n    \nif __name__ == '__main__':\n    \n    n = int(input(\"Enter the number : \"))\n    print(f\"Next power of 2 greater than or equal to {n} is {next_power_of_2(n)}\")"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n >= 1:\n        # n is greater than zero\n        # if n is a power of 2, it will be twice the power of 2\n        if n == 1:\n            return 1\n        else:\n            # otherwise, it is always twice the power of 2\n            return 2 * n\n    else:\n        return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0: \n        return 1\n    pow2 = 1\n    while pow2 < n: \n        pow2 = pow2 << 1\n    return pow2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while(i<=n):\n        i = i << 1\n    return i>>1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_2 = 1\n    while power_2 < n:\n        power_2 = 2**power_2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #Power of 2 is of the form 2^p for some integer p\n    #So we need to find a p such that 2^p >= n \n    #So we need to find p such that 2^p >= n\n    #So we need to find n's binary representation and then find the power of 2 to the left of that which is n\n    \n    #Let's find the binary representation of n \n    binary = bin(n)[2:]\n    #So now binary contains the binary representation of n\n    #Let's find the power of 2 to the left of the rightmost one\n    #So we can find the power of 2 to the left of the rightmost one by subtracting 1 from the binary representation\n    #So after binary becomes 0b0, 0b1, 0b10, 0b11, 0b100, 0b101, 0b110, 0b111\n    #And 0b1011, 0b10100, 0b101010, 0b10101010 etc\n    #So now we can use the leftmost one and add 1 to it\n    #So 0b01 becomes 0b1, 0b10 becomes 0b11, 0b100 becomes 0b101, 0b1010 becomes 0b1011 etc\n    #0b00011\n    binary = binary[::-1]\n    #So now we got the binary representation of n\n    \n    #So now let's find the power of 2 to the left of the leftmost one in binary\n    #So we can find the power of 2 to the left of the leftmost one by subtracting 1 from the binary representation\n    #So after binary becomes 0b1, 0b10, 0b100, 0b101, 0b11, 0b100, 0b101, 0b11\n    #And 0b0111, 0b0100, 0b01010, 0b0101010 etc\n    #And then we can use the leftmost one and add 1 to it\n    #So now we can find the power of 2 to the left of the leftmost one in binary\n    #So 0b01 becomes 0b1, 0b10 becomes 0b11, 0b100 becomes 0b101, 0b1010 becomes 0b1011 etc\n    #So now we can use the leftmost one and add 1 to it\n    #So now we can find the power of 2 to the left of the leftmost one in binary\n    #So 0b00011 becomes 0b1, 0b10 becomes 0b11, 0b100 becomes 0b101, 0b1010 becomes 0b1011 etc\n    #So now we got the power of 2 to the left of the leftmost one in binary\n    power = 1\n    \n    #So now we need to go through the binary representation of n, find the index of the rightmost one\n    #So let's start from the rightmost one\n    #So we can start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n    #So let's start from the rightmost one\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Another Solution:\n    # x = 1\n    # while x < n:\n    #     x = 2**x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # if n is less than 1, raise an error\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (power < n):\n        power *= 2\n    return power\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a=a.split()\n    count=0\n    for item in a:\n        if item == str(x):\n            count+=1\n    print(count)\n    return\ndef first_second(a):\n    '''\n    Write a function that takes a list of integers and returns a tuple of the first and second smallest integers.\n    '''\n    a=sorted(a)\n    x=min(a)\n    y=min(a)\n    if x>y:\n        tup=(y,x)\n    else:\n        tup=(x,y)\n    return tup\ndef count_distinct_characters(s):\n    '''\n    Write a function that takes a string and returns the number of unique characters in the string.\n    '''\n    a=set(s)\n    print(len(a))\n    return\ndef largest_sum_subset_of_size_k(a, k):\n    '''\n    Write a function that takes a list of integers and returns the largest subset of distinct\n    elements with size k.\n    '''\n    a=sorted(a)\n    for i in range(0,len(a)-k+1):\n        if a[i]>=a[i+1]:\n            return a[i:i+k]\n        else:\n            return 0\n    return\ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of times a substring\n    appears anywhere in a given string.\n    '''\n    string=string.lower()\n    sub_string=sub_string.lower()\n    count=0\n    for i in range(0,len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            count+=1\n    return count\ndef sum_lists(a,b):\n    '''\n    Write a function that takes 2 lists and returns the sum of the two lists.\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    count=0\n    for i in range(0,len(a)):\n        count+=a[i]+b[i]\n    return count\ndef largest_sum_subset_of_size_k(a, k):\n    '''\n    Write a function that takes a list of integers and returns the largest subset of distinct\n    elements with size k.\n    '''\n    a=sorted(a)\n    for i in range(0,len(a)-k+1):\n        if a[i]>=a[i+1]:\n            return a[i:i+k]\n        else:\n            return 0\n    return\ndef longest_palindrome(string):\n    '''\n    Write a function that takes a string and returns the longest palindrome that can be\n    formed from the original string.\n    '''\n    a=string.lower()\n    a=sorted(a)\n    flag=0\n    for i in range(0,len(a)):\n        if a[i]==a[i+1]:\n            flag=1\n            break\n    if flag==0:\n        return 0\n    else:\n        k=0\n        for i in range(0,len(a)):\n            if a[i]==a[i+k]:\n                flag=0\n                break\n            else:\n                k+=1\n        if flag==1:\n            return a[i+k:i+len(a)]\n        else:\n            return a[i+k-1:i+len(a)]\ndef list_sum(a):\n    '''\n    Write a function that takes a list and returns the sum of all the elements in the list.\n    '''\n    a=sorted(a)\n    count=0\n    for i in range(0,len(a)):\n        count+=a[i]\n    return count\ndef find_nth_character(string,n):\n    '''\n    Write a function that takes a string and a positive integer n and returns the nth character\n    of that string.\n    '''\n    string=sorted(string)\n    for i in range(0,len(string)-n+1):\n        if string[i]==string[n]:\n            return string[i]\n        else:\n            return 0\n    return 0\ndef array_intersection(a, b):\n    '''\n    Write a function that takes in two non-empty array of integers and returns a new array\n    containing the elements that appear in both of the input arrays.\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    count=0\n    new_list=[]\n    for i in range(0,len(a)):\n        if a[i]==b[i]:\n            count+=1\n        else:\n            new_list.append(a[i])\n    return new_list\n    return 0\ndef find_missing_element(a,n):\n    '''\n    Write a function that takes in an array of positive integers and returns the value of the\n    missing element in the array.\n    '''\n    a=sorted(a)\n    count=0\n    for i in range(0,len(a)):\n        if a[i]!=i+1:\n            return i+1\n        else:\n            return i+2\n    return\ndef character_frequency(string):\n    '''\n    Write a function that takes a string and returns a dictionary of the count of each\n    character in the string.\n    '''\n    count=0\n    d={}\n    for i in string:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n    return 0\ndef max_sum_of_sublists_of_size_k(a,k):\n    '''\n    Write a function that takes a list of integers and returns the maximum sum of any\n    sublist of size k.\n    '''\n    a=sorted(a)\n    for i in range(0,len(a)-k+1):\n        if a[i]>=a[i+1]:\n            return a[i:i+k]\n        else:\n            return 0\n    return\ndef smallest_divisor(n):\n    '''\n    Write a function that takes a positive integer and returns the smallest positive\n    integer that is divisible by all of the positive integers up to and including that\n    integer.\n    '''\n    divisor=1\n    count=1\n    while count<=n:\n        if n%count==0:\n            if count>=divisor:\n                divisor=count\n        count+=1\n    return divisor\n    return 0\ndef first_positive_multiple(n):\n    '''\n    Write a function that takes a positive integer and returns the first integer\n    that is a multiple of n.\n    '''\n    count=1\n    while count<=n:\n        if n%count==0:\n            return count\n        count+=1\n    return 0\ndef string_to_integer(a):\n    '''\n    Write a function that takes a string and returns an integer.\n    '''\n    return 0\ndef count_substrings(a):\n    '''\n    Write a function that takes a string and returns the number of substrings in it.\n    '''\n    a=sorted(a)\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==a[i+1]:\n            count+=1\n    return count\n    return 0\ndef count_pairs(a,x):\n    '''\n    Write a function that takes a list of integers and returns the number of pairs of\n    integers that sum up to a target value.\n    '''\n    count=0\n    for i in range(0,len(a)-1):\n        if a[i]==x:\n            for j in range(i+1,len(a)):\n                if a[j]==x:\n                    count+=1\n    return count\n    return 0\ndef maximum_product(a):\n    '''\n    Write a function that takes a list of integers and returns the maximum product\n    of any two integers in the list.\n    '''\n    a=sorted(a)\n    max=a[0]\n    count=0\n    for i in range(0,len(a)-1):\n        if a["
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # dictionary to store the frequency of each item in the list\n    count = {}\n    # loop for loop to count number of occurrences of each item in the list\n    for i in range(0,len(a)):\n        if a[i] in count:\n            count[a[i]] += 1\n        else:\n            count[a[i]] = 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x==a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = a.count(x)\n    return a\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b += 1\n    print(b)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    occurrence = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            occurrence += 1\n    return occurrence\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m - 1, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    x = 0\n    for i in range(m,n+1):\n        x+=list1[i]\n    return x\nprint(sum_range_list([10, 5, 2, 7], 1, 3))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[m-1] + sum_range_list(list1, m, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # print (list1)\n    sum = 0\n    # print(\"m,n:\",m,n)\n    if m >= 0 and m <= len(list1) - 1 and n >= 0 and n <= len(list1) - 1:\n        while m <= n:\n            sum += list1[m]\n            m += 1\n        return sum\n    else:\n        return -1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    \n    if m > len(list1) or m < 0 or n > len(list1) or n < 0:\n        print(\"Invalid index\")\n    else:\n        for i in range(m, n+1):\n            sum += list1[i]\n    \n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total = total + list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([list1[i] for i in range(m,n+1)])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_numbers = 0\n    for i in range(len(list1)):\n        if i >= m and i <= n:\n            sum_numbers = sum_numbers + list1[i]\n    return sum_numbers\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    s = 0\n    for i in range(m, n+1):\n        s += list1[i]\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(f\"Perimeter of a regular pentagon is {a*5.0}\")\n    \ndef distance_pentagon(b):\n    '''\n    Write a function to find the distance between a regular pentagon and its center.\n    '''\n    print(f\"Distance between a regular pentagon and its center is {b*2.0}\")\n    \ndef perimeter_rectangle(c):\n    '''\n    Write a function to find the perimeter of a regular rectangle from its length and width.\n    '''\n    print(f\"Perimeter of a regular rectangle is {c*4.0}\")\n    \ndef distance_rectangle(d):\n    '''\n    Write a function to find the distance between a regular rectangle and its center.\n    '''\n    print(f\"Distance between a regular rectangle and its center is {d*2.0}\")\n    \ndef perimeter_square(e):\n    '''\n    Write a function to find the perimeter of a regular square from its length and width.\n    '''\n    print(f\"Perimeter of a regular square is {e*4.0}\")\n    \ndef distance_square(f):\n    '''\n    Write a function to find the distance between a regular square and its center.\n    '''\n    print(f\"Distance between a regular square and its center is {f*2.0}\")\n    \ndef perimeter_hexagon(g):\n    '''\n    Write a function to find the perimeter of a regular hexagon from its length and width.\n    '''\n    print(f\"Perimeter of a regular hexagon is {g*8.0}\")\n    \ndef distance_hexagon(h):\n    '''\n    Write a function to find the distance between a regular hexagon and its center.\n    '''\n    print(f\"Distance between a regular hexagon and its center is {h*4.0}\")\n    \ndef perimeter_octagon(i):\n    '''\n    Write a function to find the perimeter of a regular octagon from its length and width.\n    '''\n    print(f\"Perimeter of a regular octagon is {i*10.0}\")\n    \ndef distance_octagon(j):\n    '''\n    Write a function to find the distance between a regular octagon and its center.\n    '''\n    print(f\"Distance between a regular octagon and its center is {j*6.0}\")\n    \ndef circumference_dodecahedron(k):\n    '''\n    Write a function to calculate the circumference of a dodecahedron.\n    '''\n    print(f\"Circumference of a dodecahedron is {math.sqrt(5)*6}\")\n    \ndef circumference_icosahedron(l):\n    '''\n    Write a function to calculate the circumference of an icosahedron.\n    '''\n    print(f\"Circumference of an icosahedron is {math.sqrt(2)*6}\")\n    \ndef circumference_tetrahedron(m):\n    '''\n    Write a function to calculate the circumference of a tetrahedron.\n    '''\n    print(f\"Circumference of a tetrahedron is {math.sqrt(3)*6}\")\n    \ndef circumference_truncated_cuboctahedron(n):\n    '''\n    Write a function to calculate the circumference of a truncated cuboctahedron.\n    '''\n    print(f\"Circumference of a truncated cuboctahedron is {math.sqrt(3)*10}\")\n    \ndef circumference_truncated_dodecahedron(o):\n    '''\n    Write a function to calculate the circumference of a truncated dodecahedron.\n    '''\n    print(f\"Circumference of a truncated dodecahedron is {math.sqrt(5)*10}\")\n    \ndef circumference_cube(p):\n    '''\n    Write a function to calculate the circumference of a cube.\n    '''\n    print(f\"Circumference of a cube is {math.sqrt(3)*4}\")\n    \ndef circumference_pyramid(q):\n    '''\n    Write a function to calculate the circumference of a pyramid.\n    '''\n    print(f\"Circumference of a pyramid is {math.sqrt(3)*6}\")\n    \ndef circumference_ellipsoid(r):\n    '''\n    Write a function to calculate the circumference of an ellipsoid.\n    '''\n    print(f\"Circumference of an ellipsoid is {math.sqrt(5)*6}\")\n    \ndef circumference_cylinder(s):\n    '''\n    Write a function to calculate the circumference of a cylinder.\n    '''\n    print(f\"Circumference of a cylinder is {2*math.pi*s}\")\n    \ndef circumference_sphere(t):\n    '''\n    Write a function to calculate the circumference of a sphere.\n    '''\n    print(f\"Circumference of a sphere is {math.pi*4}\")\n    \ndef circumference_cuboid(u):\n    '''\n    Write a function to calculate the circumference of a cuboid.\n    '''\n    print(f\"Circumference of a cuboid is {math.sqrt(3)*4}\")\n    \ndef circumference_cone(v):\n    '''\n    Write a function to calculate the circumference of a cone.\n    '''\n    print(f\"Circumference of a cone is {math.pi*4}\")\n    \ndef circumference_cone(w):\n    '''\n    Write a function to calculate the circumference of a cone.\n    '''\n    print(f\"Circumference of a cone is {math.pi*4}\")\n    \ndef circumference_cone(x):\n    '''\n    Write a function to calculate the circumference of a cone.\n    '''\n    print(f\"Circumference of a cone is {math.pi*4}\")\n    \ndef circumference_cone(y):\n    '''\n    Write a function to calculate the circumference of a cone.\n    '''\n    print(f\"Circumference of a cone is {math.pi*4}\")\n    \ndef circumference_cone(z):\n    '''\n    Write a function to calculate the circumference of a cone.\n    '''\n    print(f\"Circumference of a cone is {math.pi*4}\")\n    \ndef circumference_hexagon(a):\n    '''\n    Write a function to calculate the circumference of a regular hexagon.\n    '''\n    print(f\"Circumference of a regular hexagon is {6*math.sqrt(3)}\")\n    \ndef circumference_heptagon(b):\n    '''\n    Write a function to calculate the circumference of a regular hexagon.\n    '''\n    print(f\"Circumference of a regular hexagon is {8*math.sqrt(3)}\")\n    \ndef circumference_rectangle(c):\n    '''\n    Write a function to calculate the circumference of a regular hexagon.\n    '''\n    print(f\"Circumference of a regular rectangle is {4*math.sqrt(3)}\")\n    \ndef circumference_square(d):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(e):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(f):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(g):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(h):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(i):\n    '''\n    Write a function to calculate the circumference of a regular square.\n    '''\n    print(f\"Circumference of a regular square is {4}\")\n    \ndef circumference_square(j):\n    '''\n    Write a function to calculate th"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*3\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*math.sqrt(5)/4\ndef golden_ratio(a):\n    '''\n    Write a function to find the Golden Ratio (1/2 + sqrt(5)/2) from the length of its sides.\n    '''\n    return 1/2 + math.sqrt(5)/2\ndef fizz_buzz(n):\n    '''\n    Write a function to find all the prime numbers in range of 0 to n(inclusive) and find if they are prime or not using the below algorithm.\n    '''\n    n = int(n)\n    print(\"\\nAll prime numbers in range of 0 to\", n)\n    if (n < 2):\n        print(\"There are no prime numbers in range of 0 to\", n)\n    else:\n        for i in range(2, n + 1):\n            if (i == 2):\n                print(i, end=\",\")\n                continue\n            j = 0\n            while j < i:\n                if (i % j == 0):\n                    print(i, end=\",\")\n                    break\n                j += 1\n        print(\"\\nPrime numbers in range of 0 to\", n)\ndef factorization(n):\n    '''\n    Write a function to find all prime factors of the given number.\n    '''\n    n = int(n)\n    print(\"\\nThe prime factors of\", n)\n    while (n > 1):\n        i = 2\n        while (i < n):\n            if (n % i == 0):\n                print(i, end=\",\")\n                n = n/i\n                break\n            i += 1\n        if (n == 1):\n            break\n    print(\"\\nThe factorization of\", n)\ndef palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    n = len(s)\n    for i in range(n // 2):\n        if s[i]!= s[n-i-1]:\n            return False\n    return True\ndef reverse(s):\n    '''\n    Write a function to find the reverse of a string.\n    '''\n    n = len(s)\n    s = s[::-1]\n    return s\ndef maximum(a, b, c):\n    '''\n    Write a function to find the maximum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef maxmin(a, b, c):\n    '''\n    Write a function to find the maximum of three numbers and minimum of three numbers.\n    '''\n    return (a, b, c)\ndef multiply(a, b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return a*b\ndef palindrome_check(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    return s[::-1] == s\ndef prime_factorization(n):\n    '''\n    Write a function to find all prime factors of the given number.\n    '''\n    n = int(n)\n    while (n > 1):\n        i = 2\n        while (i < n):\n            if (n % i == 0):\n                print(i, end=\",\")\n                n = n/i\n                break\n            i += 1\n    print(\"\\nThe prime factors of\", n)\ndef prime_check(n):\n    '''\n    Write a function to check if the given number is a prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\ndef multiplication(a, b):\n    '''\n    Write a function to find the multiplication of two numbers.\n    '''\n    return a*b\ndef is_prime(n):\n    '''\n    Write a function to check if the given number is a prime number or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if (n % i == 0):\n            return False\n    return True\ndef prime_number_count(n):\n    '''\n    Write a function to count the number of prime numbers in a range.\n    '''\n    return 0\ndef move_zeroes(arr):\n    '''\n    Write a function to move all zeroes at the end to the beginning of the array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            j = i\n            while j < n:\n                if arr[j]!= 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j += 1\n    return arr\ndef factorial_iterative(n):\n    '''\n    Write a function to find the factorial of a given number using iteration.\n    '''\n    fac = 1\n    if n < 0:\n        print(\"Factorial not defined for negative numbers\")\n        return\n    elif n == 0:\n        print(\"Factorial of 0 is 1\")\n        return\n    for i in range(1, n + 1):\n        fac = fac*i\n    return fac\ndef factorial_recursive(n):\n    '''\n    Write a function to find the factorial of a given number using recursion.\n    '''\n    if n < 0:\n        print(\"Factorial not defined for negative numbers\")\n        return\n    if n == 0:\n        return 1\n    return n*factorial_recursive(n - 1)\ndef fibonacci_iterative(n):\n    '''\n    Write a function that uses iteration to compute the n-th Fibonacci number.\n    '''\n    return 0\ndef fibonacci_recursive(n):\n    '''\n    Write a function that uses recursion to compute the n-th Fibonacci number.\n    '''\n    if n < 2:\n        return n\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\ndef reverse_words_iterative(str):\n    '''\n    Write a function that iteratively reverses the words in a given string\n    '''\n    return 0\ndef reverse_words_recursive(str):\n    '''\n    Write a function that recursively reverses the words in a given string\n    '''\n    if len(str) <= 1:\n        return str\n    return reverse_words_recursive(str[1:]) + str[0]\ndef factorial_recursive_with_memoization(n, cache):\n    '''\n    Write a function to find the factorial of a given number using recursion\n    with memoization.\n    '''\n    if n < 0:\n        print(\"Factorial not defined for negative numbers\")\n        return\n    if n == 0:\n        return 1\n    if cache[n]!= -1:\n        return cache[n]\n    cache[n] = n*factorial_recursive_with_memoization(n - 1, cache)\n    return cache[n]\ndef calculate_future_value(present_value, annual_rate, years):\n    '''\n    Write a function to find the future value of an investment\n    '''\n    return (present_value * (1 + annual_rate)**(years))\ndef to_camel_case(s):\n    '''\n    Write a function to convert a string to camel case.\n    '''\n    return s\ndef number_of_evens(n):\n    '''\n    Write a function that returns the number of even numbers from a given numbers list.\n    '''\n    return 0\ndef is_prime_number(n):\n    '''\n    Write a function that checks whether a given number is prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\ndef prime_factorization(n):\n    '''\n    Write a function to find all prime factors of th"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*((5.0/2) * ((5.0/2)-1))\n    return int(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<5 or a%2==1:\n        raise ValueError('Value must be greater than 5 and less than 5 must be even')\n    else:\n        return round(math.sqrt(3)*a*5/4,3)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*5\n    print(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)//2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (math.sqrt(5)*a*6)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print('Pentagon: ', math.sqrt(5)*a)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 6:\n        print(\"Invalid string length\")\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i:i+6] == \"std\":\n                count += 1\n        print(\"Number of occurences of'std' is \", count)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            count += 1\n    return count\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return s[::-1]\n    \ndef odd_even_split(s):\n    '''\n    Write a function that splits a given string s into two strings: one containing all the odd characters of s and the other containing all the even characters of s.\n    '''\n    odd_str = \"\"\n    even_str = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even_str += s[i]\n        else:\n            odd_str += s[i]\n    return odd_str,even_str\n    \ndef product_except_self(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array of the products of all the elements except the first and last element in the original array.\n    '''\n    new_nums = []\n    for i in range(len(nums)-1):\n        new_nums.append(nums[i]*nums[i+1])\n    return new_nums\n    \ndef min_max(nums):\n    '''\n    Write a function that takes in an array of integers and returns the minimum and maximum numbers in the array.\n    '''\n    return min(nums),max(nums)\n    \ndef add_string(s1, s2):\n    '''\n    Write a function that takes in two strings and returns the string made of the first character from each and the last character from each.\n    '''\n    s1 = s1[0] + s1[-1]\n    s2 = s2[0] + s2[-1]\n    return s1 + s2\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef min_cost_path(arr):\n    '''\n    Write a function that takes in an m x n grid and returns the minimum cost of going from the top left to the bottom right.\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    \n    dp = [[-1 for i in range(n)] for j in range(m)]\n    dp[0][0] = arr[0][0]\n    \n    for i in range(1,m):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for j in range(1,n):\n        dp[0][j] = dp[0][j-1] + arr[0][j]\n        \n    for i in range(1,m):\n        for j in range(1,n):\n            dp[i][j] = min(dp[i][j-1],dp[i-1][j]) + arr[i][j]\n    \n    return dp[m-1][n-1]\n    \ndef min_cost_path_back(arr):\n    '''\n    Write a function that takes in an m x n grid and returns the minimum cost of going from the top left to the bottom right.\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    \n    dp = [[-1 for i in range(n)] for j in range(m)]\n    dp[0][0] = arr[0][0]\n    \n    for i in range(1,m):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for j in range(1,n):\n        dp[0][j] = dp[0][j-1] + arr[0][j]\n        \n    for i in range(1,m):\n        for j in range(1,n):\n            dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + arr[i][j]\n    \n    return dp[m-1][n-1]\n    \ndef min_cost(arr,cost_arr):\n    '''\n    Write a function that takes in an m x n grid and returns the minimum cost of going from the top left to the bottom right.\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    \n    dp = [[-1 for i in range(n)] for j in range(m)]\n    dp[0][0] = arr[0][0]\n    \n    for i in range(1,m):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for j in range(1,n):\n        dp[0][j] = dp[0][j-1] + arr[0][j]\n        \n    for i in range(1,m):\n        for j in range(1,n):\n            dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + arr[i][j]\n    \n    return dp[m-1][n-1]\n    \ndef smallest_word(text):\n    '''\n    Write a function that takes in a string of words and returns the smallest word.\n    '''\n    s = text.split()\n    smallest = s[0]\n    for i in s:\n        if len(smallest) > len(i):\n            smallest = i\n    return smallest\n    \ndef get_count(s):\n    '''\n    Write a function that takes in a string and returns the count of the number of times the letter 'a' appears in the string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'a':\n            count += 1\n    return count\n    \ndef replace_first(s):\n    '''\n    Write a function that takes in a string and returns the string with the first letter of the string replaced with the letter \"z\".\n    '''\n    return s[0]+s[1:]\n    \ndef rotate_clockwise(arr):\n    '''\n    Write a function that takes in an m x n grid and returns the same grid, but rotated 90 degrees clockwise.\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    \n    new_arr = [[0 for i in range(n)] for j in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            new_arr[j][m-1-i] = arr[i][j]\n    \n    return new_arr\n    \ndef get_subarray(arr):\n    '''\n    Write a function that takes in an array of integers and returns a sorted array of the subarrays with the largest sum.\n    '''\n    m = len(arr)\n    n = len(arr[0])\n    \n    dp = [[0 for i in range(n)] for j in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0:\n                dp[i][j] = arr[i][j]\n            elif i > 0:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + arr[i][j]\n    \n    l = []\n    for i in range(m):\n        for j in range(n):\n            if dp[i][j] > 0:\n                l.append(dp[i][j])\n    l.sort()\n    \n    return l\n    \ndef find_index(arr,value):\n    '''\n    Write a function that takes in a sorted array of integers and a value and returns the first index of the value.\n    '''\n    low = 0\n    high = len(arr)-1\n    \n    while low <= high:\n        mid = (high + low)//2\n        if arr[mid] == value:\n            return mid\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef is_palindrome(s):\n    ''"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i:i+3]=='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s)-len(s)//2):\n        if s[i] == 'd' and s[i+len(s)//2] == 'e':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    \n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    count = 0\n    for i in s:\n        if s.count('std') > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(s.count('std'))\n    "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.split()\n    count = 0\n    for word in s:\n        if'std' in word:\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if len(test_tuple) == 0:\n            return False\n        elif isinstance(test_tuple[0],int):\n            for x in test_tuple:\n                if type(x)!= int:\n                    return False\n        elif isinstance(test_tuple[0],float):\n            for x in test_tuple:\n                if type(x)!= float:\n                    return False\n        elif isinstance(test_tuple[0],str):\n            for x in test_tuple:\n                if type(x)!= str:\n                    return False\n        else:\n            return False\n    except TypeError:\n        return False\n    return True\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if(len(test_tuple) > 1):\n        if(isinstance(test_tuple[0], tuple)):\n            for i in range(len(test_tuple)):\n                if(isinstance(test_tuple[i], tuple)):\n                    if(check_type(test_tuple[i]) == False):\n                        return False\n                else:\n                    if(isinstance(test_tuple[i], int) or isinstance(test_tuple[i], float)):\n                        return False\n            return True\n        else:\n            if(isinstance(test_tuple[0], int) or isinstance(test_tuple[0], float)):\n                return True\n            else:\n                return False\n    else:\n        if(isinstance(test_tuple[0], int) or isinstance(test_tuple[0], float)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    correct = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            correct = False\n    return correct\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(elem) for elem in test_tuple])) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if isinstance(test_tuple, tuple):\n            return type(test_tuple[0]) == type(test_tuple[1])\n        else:\n            print(\"Please enter a tuple.\")\n    except(ValueError):\n        print(\"Please enter a tuple.\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_all_elements = []\n    for each_element in test_tuple:\n        type_of_all_elements.append(type(each_element))\n    if len(set(type_of_all_elements)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) == tuple:\n        for ele in test_tuple:\n            if type(ele)!= type(test_tuple[0]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        print('Test Tuple is empty.')\n        return\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i) == int:\n            print('All elements in given tuple are of the same data type')\n        else:\n            print('Some elements in given tuple are not of the same data type')\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            count = 1\n        else:\n            count = 0\n        if count >= (n//2):\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) < 1:\n        return False\n    if len(arr) == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    half = int(n/2)\n    if arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    elif arr[half] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    majority_found = False\n    for i in range(0, n):\n        count = 1\n        current_element = arr[i]\n        for j in range(i, n):\n            if(arr[j] == current_element):\n                count += 1\n            else:\n                count -= 1\n                if(count == 0):\n                    majority_found = True\n                    break\n        if(majority_found == True):\n            break\n    return majority_found\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n - 1] == x:\n        return False\n    if arr[n - 1]!= x:\n        return is_majority(arr, n - 1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge cases\n    if n==0:\n        return False\n    if n==1:\n        return (arr[0]==x)\n    \n    if n==2:\n        if arr[0]==x:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n==1:\n        return True\n    if arr[n//2]==x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        count += 1\n        if i == x:\n            count -= 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Checks if the input array is empty\n    if arr == None or n == 0:\n        return False\n    # Check if the input array contains only one element\n    if n == 1:\n        return True\n    # Find the middle element\n    mid = int(n/2)\n    # Check if there is an element in the middle\n    if arr[mid] == x:\n        return True\n    # if there is not an element in the middle, check if the element is greater than the middle element\n    if arr[mid] < x:\n        # if the element is greater than the middle element, then check if the element is greater than the majority element by checking the left side of the array\n        if arr[mid+1] > x:\n            # if the element is greater than the majority element, then we return false\n            return False\n        # if the element is not greater than the middle element, then we have to check if it is greater than the majority element by checking the right side of the array\n        else:\n            return is_majority(arr, mid+1, x)\n    # if the element is not greater than the middle element, then we have to check if it is greater than the majority element by checking the right side of the array\n    else:\n        return is_majority(arr, mid, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num_of_set_bits = 0\n    while(n):\n        num_of_set_bits += 1\n        n = n & (n - 1)\n    return num_of_set_bits\n    \nif __name__ == \"__main__\":\n    num = 2\n    print(\"The number of set bits in {} is {}\".format(num,count_Set_Bits(num)))\n    \n    \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    while(n):\n        if n & 1:\n            count += 1\n        n >>= 1\n    \n    return count\n    \nprint(count_Set_Bits(24))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        c += 1\n        n = (n & (n-1))\n    return c\ndef count_Set_Bits_v2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        n &= n-1\n        c += 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #x = n.to_bytes((n.bit_length()+7) // 8, 'big')\n    #a = bin(int(x,2))\n    #b = a.replace('0b','')\n    #if b == '':\n    #    print(\"0\")\n    #else:\n    #    print(b)\n    c = 0\n    x = bin(n)[2:]\n    y = ''\n    for i in range(len(x)):\n        if x[i] == '1':\n            y += x[i]\n            c += 1\n        else:\n            y += '0'\n    print(c)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_num = bin(n)[2:]\n    counter = 0\n    for i in range(len(bin_num)):\n        if bin_num[i] == '1':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #count_set_bits(n)= n&(n-1)\n    return n&(n-1)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        count+=1\n        n=n&(n-1)\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = \"\"\n    for i in range(len(str)):\n        if (i % 2!= 0):\n            s = s + str[i]\n    return s\n    \nstr = \"abcdfeabcd\"\nprint(\"Given string: \", str)\nprint(\"String after removing odd indexed characters: \", odd_values_string(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if type(str)!= str:\n        return\n    for i in range(0, len(str)):\n        if i%2 == 0:\n            continue\n        else:\n            str = str.replace(str[i],'')\n    print(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result_string += str[i]\n    return result_string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # return str[::2]\n    new_str = \"\"\n    for i in range(0, len(str), 2):\n        new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(i for i in str if i.isdigit() and int(i) % 2 == 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str = str.replace(\" \",\"\")\n    \n    if len(str) == 0:\n        return \"\"\n    \n    list = str.split()\n    \n    i = 0\n    while i < len(list) - 1:\n        if i % 2!= 0:\n            list.remove(list[i])\n        i += 1\n    \n    return \" \".join(list)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\nmin_of_three(10,2,6)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        min = a\n    elif b<c:\n        min = b\n    else:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        print(\"The minimum number is: \",a)\n    elif b<=a and b<=c:\n        print(\"The minimum number is: \",b)\n    else:\n        print(\"The minimum number is: \",c)\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \n    \ndef find_Bit_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bit_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether the bits of the given range are set or not.\n    '''\n    for i in range(n+1):\n        if i in range(l,r+1):\n            if i==l or i==r:\n                continue\n            else:\n                print(i)\n                \n    \n    \ndef find_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a pytho"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = 0\n    for i in range(n):\n        s += 1<<i\n    if (s&(s-1))==0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l >= 0 and l<=31 and r<=31):\n        s = bin(n)\n        s = s[2:]\n        s = s.zfill(32)\n        for i in range(l,r+1):\n            if (int(s[i]) == 0):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l=l\n    r=r\n    if l==0:\n        if r==1:\n            return 1\n        else:\n            return 0\n    if l==1:\n        if r==0:\n            return 1\n        else:\n            return 0\n    if l==2:\n        if r==3:\n            return 1\n        else:\n            return 0\n    if l==3:\n        if r==2:\n            return 1\n        else:\n            return 0\n    if l==4:\n        if r==5:\n            return 1\n        else:\n            return 0\n    if l==5:\n        if r==4:\n            return 1\n        else:\n            return 0\n    if l==6:\n        if r==7:\n            return 1\n        else:\n            return 0\n    if l==7:\n        if r==6:\n            return 1\n        else:\n            return 0\n    if l==8:\n        if r==9:\n            return 1\n        else:\n            return 0\n    if l==9:\n        if r==8:\n            return 1\n        else:\n            return 0\n    if l==10:\n        if r==11:\n            return 1\n        else:\n            return 0\n    if l==11:\n        if r==10:\n            return 1\n        else:\n            return 0\n    if l==12:\n        if r==13:\n            return 1\n        else:\n            return 0\n    if l==13:\n        if r==12:\n            return 1\n        else:\n            return 0\n    if l==14:\n        if r==15:\n            return 1\n        else:\n            return 0\n    if l==15:\n        if r==14:\n            return 1\n        else:\n            return 0\n    if l==16:\n        if r==17:\n            return 1\n        else:\n            return 0\n    if l==17:\n        if r==16:\n            return 1\n        else:\n            return 0\n    if l==18:\n        if r==19:\n            return 1\n        else:\n            return 0\n    if l==19:\n        if r==18:\n            return 1\n        else:\n            return 0\n    if l==20:\n        if r==21:\n            return 1\n        else:\n            return 0\n    if l==21:\n        if r==20:\n            return 1\n        else:\n            return 0\n    if l==22:\n        if r==23:\n            return 1\n        else:\n            return 0\n    if l==23:\n        if r==22:\n            return 1\n        else:\n            return 0\n    if l==24:\n        if r==25:\n            return 1\n        else:\n            return 0\n    if l==25:\n        if r==24:\n            return 1\n        else:\n            return 0\n    if l==26:\n        if r==27:\n            return 1\n        else:\n            return 0\n    if l==27:\n        if r==26:\n            return 1\n        else:\n            return 0\n    if l==28:\n        if r==29:\n            return 1\n        else:\n            return 0\n    if l==29:\n        if r==28:\n            return 1\n        else:\n            return 0\n    if l==30:\n        if r==31:\n            return 1\n        else:\n            return 0\n    if l==31:\n        if r==30:\n            return 1\n        else:\n            return 0\n    if l==32:\n        if r==33:\n            return 1\n        else:\n            return 0\n    if l==33:\n        if r==32:\n            return 1\n        else:\n            return 0\n    if l==34:\n        if r==35:\n            return 1\n        else:\n            return 0\n    if l==35:\n        if r==34:\n            return 1\n        else:\n            return 0\n    if l==36:\n        if r==37:\n            return 1\n        else:\n            return 0\n    if l==37:\n        if r==36:\n            return 1\n        else:\n            return 0\n    if l==38:\n        if r==39:\n            return 1\n        else:\n            return 0\n    if l==39:\n        if r==38:\n            return 1\n        else:\n            return 0\n    if l==40:\n        if r==41:\n            return 1\n        else:\n            return 0\n    if l==41:\n        if r==40:\n            return 1\n        else:\n            return 0\n    if l==42:\n        if r==43:\n            return 1\n        else:\n            return 0\n    if l==43:\n        if r==42:\n            return 1\n        else:\n            return 0\n    if l==44:\n        if r==45:\n            return 1\n        else:\n            return 0\n    if l==45:\n        if r==44:\n            return 1\n        else:\n            return 0\n    if l==46:\n        if r==47:\n            return 1\n        else:\n            return 0\n    if l==47:\n        if r==46:\n            return 1\n        else:\n            return 0\n    if l==48:\n        if r==49:\n            return 1\n        else:\n            return 0\n    if l==49:\n        if r==48:\n            return 1\n        else:\n            return 0\n    if l==50:\n        if r==51:\n            return 1\n        else:\n            return 0\n    if l==51:\n        if r==50:\n            return 1\n        else:\n            return 0\n    if l==52:\n        if r==53:\n            return 1\n        else:\n            return 0\n    if l==53:\n        if r==52:\n            return 1\n        else:\n            return 0\n    if l==54:\n        if r==55:\n            return 1\n        else:\n            return 0\n    if l==55:\n        if r==54:\n            return 1\n        else:\n            return 0\n    if l==56:\n        if r==57:\n            return 1\n        else:\n            return 0\n    if l==57:\n        if r==56:\n            return 1\n        else:\n            return 0\n    if l==58:\n        if r==59:\n            return 1\n        else:\n            return 0\n    if l==59:\n        if r==58:\n            return 1\n        else:\n            return 0\n    if l==60:\n        if r==61:\n            return 1\n        else:\n            return 0\n    if l==61:\n        if r==60:\n            return 1\n        else:\n            return 0\n    if l==62:\n        if r==63:\n            return 1\n        else:\n            return 0\n    if l==63:\n        if r==62:\n            return 1\n        else:\n            return 0\n    if l==64:\n        if r==65:\n            return 1\n        else:\n            return 0\n    if l==65:\n        if r==64:\n            return 1\n        else:\n            return 0\n    if l==66:\n        if r==67:\n            return 1\n        else:\n            return 0\n    if l==67:\n        if r==66:\n            return 1\n        else:\n            return 0\n    if l==68:\n        if r==69:\n            return 1\n        else:\n            return 0\n    if l==69:\n        if r==68:\n            return 1\n        else:\n            return 0\n    if l==70:\n        if r==71:\n            return 1\n        else:\n            return 0\n    if l==71:\n        if r==70:\n            return 1\n        else:\n            return 0\n    if l==72:\n        if r==73:\n            return 1\n        else:\n            return 0\n    if l==73:\n        if r==72:\n            return 1\n        else:\n            return 0\n    if l==74:\n        if r==75:\n            return 1\n        else:\n            return 0\n    if l==75:\n        if r==74:\n            return 1\n        else:\n            return 0\n    if l==76:\n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>0 and (l<=0 or r>=n):\n        return False\n    if (l==0 and r==n) or (l==r):\n        return True\n    mid=int(n/2)\n    if (all_Bits_Set_In_The_Given_Range(l,mid,r)) or (all_Bits_Set_In_The_Given_Range(l,mid,n)):\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = 2**n\n    for i in range(l,r+1):\n        if i&x!= 0:\n            return False\n    return True\n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_set=True\n    for i in range(l,r+1):\n        if i&n:\n            all_set=False\n            break\n    return all_set\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return 'All bits are set in range '+str(l)+'-'+str(l)\n    else:\n        return 'Not all bits are set in range '+str(l)+'-'+str(r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    assert(n>0 and isinstance(n,int) and l>=0 and r>=l)\n    \n    #using XOR operator\n    if r >= 1<<n:\n        return True\n    else:\n        return ~(l ^ r) == 0\n        \n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #for l in range(n):\n    if l==0 and r==0:\n        return 1\n    if (l & (1<<l)) > 0 or (r & (1<<r)) > 0:\n        return 0\n    return 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] >= 0:\n            break\n        arr[i], arr[n + i] = arr[n + i], arr[i]\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            break\n        arr[i], arr[n + i] = arr[n + i], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] > 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n    new_arr = pos + neg\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, arr[i])\n            arr.pop(i + 1)\n        elif arr[i] >= 0:\n            arr.insert(i + 1, arr[i])\n            arr.pop(i)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if n == len(arr):\n        return\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    arr[:] = positive + negative\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = abs(arr[i])\n    \n    return arr\n    \n    \n    \n    \n    \ndef re_arrange_array_inplace(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = positive.pop() if arr[i] < 0 else negative.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = positive.pop() if arr[i] < 0 else negative.pop()\n    \n    return arr\n    \n    \n    \n    \n    \ndef re_arrange_array_3(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = positive.pop() if arr[i] < 0 else negative.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_4(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = negative.pop() if arr[i] < 0 else positive.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \n    \ndef re_arrange_array_5(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = positive.pop() if arr[i] < 0 else negative.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_6(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = negative.pop() if arr[i] < 0 else positive.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_7(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = negative.pop() if arr[i] < 0 else positive.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_8(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = positive.pop() if arr[i] < 0 else negative.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_arrange_array_9(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    This should be done in-place.\n    '''\n    \n    if n == len(arr):\n        return\n    \n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = negative.pop() if arr[i] < 0 else positive.pop()\n    \n    return arr\n    \n    \n    \n    \n    \n    \ndef re_ar"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # start by putting all negative numbers before positive numbers\n    arr = sorted([-i for i in arr], reverse=True)\n    \n    # get the index of first positive element\n    pos = 0\n    while arr[pos] < 0:\n        pos += 1\n    \n    # get the number of negative elements that are left to be put in front of positive numbers\n    count = n - pos\n    \n    # put all negative numbers before positive numbers\n    for i in range(count):\n        arr[i] = -arr[i]\n    \n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_neg_index = 0\n    first_pos_index = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return -1\n    negative = n\n    while negative > 0:\n        for i in range(negative):\n            if arr[i] < 0:\n                break\n        if i == 0:\n            return -1\n        negative = negative - i\n        for j in range(negative):\n            if arr[negative + j] > 0:\n                break\n        if j == 0:\n            return -1\n        negative = negative + j\n        for k in range(negative, n):\n            if arr[k] < 0:\n                break\n        if k == negative:\n            return -1\n        negative = negative + k\n        for l in range(negative, n):\n            if arr[l] < 0:\n                break\n        if l == negative:\n            return -1\n        negative = negative + l\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_index = 0\n    neg_index = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n    for i in range(0, n):\n        if arr[i] > 0:\n            pos_index = i\n            break\n    if neg_index == pos_index:\n        return arr\n    else:\n        temp = []\n        for i in range(0, n):\n            if i!= neg_index:\n                temp.append(arr[i])\n            else:\n                temp.append(-arr[neg_index])\n        for i in range(0, n):\n            if i!= pos_index:\n                temp.append(arr[i])\n            else:\n                temp.append(-arr[pos_index])\n        return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == len(arr):\n        return arr\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    neg = 0\n    pos = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg += 1\n        else:\n            pos += 1\n    if neg > pos:\n        arr[:] = arr[neg:] + arr[:neg]\n    return arr\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str_list = list(str1)\n    for i in range(len(str_list)):\n        if str_list[i] == \" \":\n            str_list[i] = char\n    return \"\".join(str_list)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for ch in str1:\n        if ch == \" \":\n            str2 += char\n        else:\n            str2 += ch\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    index = 0\n    while True:\n        if str1[index] == '':\n            str1 = str1.replace('',char)\n            return str1\n        else:\n            index += 1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(\" \", char)\n    return new_string\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    i=0\n    while i<len(str1):\n        if str1[i]==' ':\n            str1=str1[:i]+char+str1[i+1:]\n        i+=1\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\")\n    #replace the string with a single character\ndef replace_blank_with_spaces(str1):\n    '''\n    Write a function that takes in a string, and returns the string with spaces in it instead of blank spaces.\n    '''\n    return str1.replace(\" \", \"\")\n    #remove the spaces\ndef remove_line_breaks(str1):\n    '''\n    Write a function that takes in a string, and returns a new string with the line breaks removed.\n    '''\n    return str1.replace(\"\\n\",\"\")\n    #remove the line breaks\ndef remove_char_at_position(str1,index):\n    '''\n    Write a function that takes in a string and character, and returns a new string with the character in position index removed.\n    '''\n    return str1[:index]+str1[index+1:]\n    #remove the character\ndef last_occurrence(str1,char):\n    '''\n    Write a function that takes in a string and character, and returns the position of the last occurrence of the character in the string.\n    '''\n    return str1.rindex(char)\n    #find the last index of char\ndef first_occurrence(str1,char):\n    '''\n    Write a function that takes in a string and character, and returns the position of the first occurrence of the character in the string.\n    '''\n    return str1.find(char)\n    #find the first index of char\ndef replace_char(str1,char,replace_char):\n    '''\n    Write a function that takes in a string and character, and returns a new string with the character in position index removed.\n    '''\n    return str1.replace(char,replace_char)\n    #remove the character\ndef capitalize(str1):\n    '''\n    Write a function that takes in a string and returns a new string that capitalizes the first letter of each word in the string\n    '''\n    return str1.title()\n    #capitalize the first letter\ndef remove_words(str1,words):\n    '''\n    Write a function that takes in a string and a list of words, and returns a new string with the list of words removed.\n    '''\n    for word in words:\n        str1 = str1.replace(word, \"\")\n    return str1\n    #remove the words\ndef replace_words(str1,words,replace_word):\n    '''\n    Write a function that takes in a string and a list of words, and returns a new string with the list of words replaced with the replacement word\n    '''\n    for word in words:\n        str1 = str1.replace(word, replace_word)\n    return str1\n    #replace the words\ndef add_new_line(str1):\n    '''\n    Write a function that takes in a string and returns a new string that adds a new line to the end of the string.\n    '''\n    return str1 + \"\\n\"\n    #add a new line\ndef remove_new_line(str1):\n    '''\n    Write a function that takes in a string and returns a new string that removes the new line at the end of the string.\n    '''\n    return str1.rstrip()\n    #remove the new line\ndef remove_letters(str1,letters):\n    '''\n    Write a function that takes in a string and a list of letters, and returns a new string with the list of letters removed.\n    '''\n    for letter in letters:\n        str1 = str1.replace(letter, \"\")\n    return str1\n    #remove the letters\ndef capitalize_words(str1):\n    '''\n    Write a function that takes in a string and returns a new string with the first letter of each word capitalized\n    '''\n    return \" \".join(map(str.title, str1.split()))\n    #capitalize the words\ndef add_all_together(str1, *args):\n    '''\n    Write a function that takes in a string and a list of strings, and returns a new string that is the string concatenated with the strings in the list.\n    '''\n    return \"\".join(args) + str1\n    #add all the strings\ndef count_letters(str1,letters):\n    '''\n    Write a function that takes in a string and a list of letters, and returns the number of times each letter appears in the string.\n    '''\n    count = 0\n    for letter in letters:\n        count += str1.count(letter)\n    return count\n    #count the letters\ndef replace_letters(str1,letters,replace_letter):\n    '''\n    Write a function that takes in a string and a list of letters, and returns a new string with the list of letters replaced with the replacement letter.\n    '''\n    for letter in letters:\n        str1 = str1.replace(letter, replace_letter)\n    return str1\n    #replace the letters\ndef reverse_string(str1):\n    '''\n    Write a function that takes in a string and returns a new string that is the reverse of the string.\n    '''\n    return str1[::-1]\n    #reverse the string\ndef normalize_string(str1):\n    '''\n    Write a function that takes in a string and returns a new string with all the spaces and punctuation removed.\n    '''\n    return str1.strip()\n    #remove spaces and punctuation\ndef count_words(str1,words):\n    '''\n    Write a function that takes in a string and a list of words, and returns a new string with the list of words and occurrences of each word in the string.\n    '''\n    return str1.split(\" \").count(words)\n    #count the words\ndef add_string_before_first_index(str1,string1,index1):\n    '''\n    Write a function that takes in a string, a string, and an index, and returns a new string that is the same as the first string, except that the first character in the first string is prepended with the second string, and all other characters in the first string are prepended with the third string.\n    '''\n    return string1 + str1[:index1] + str1\n    #add the string before the index\ndef get_all_indices(str1,char):\n    '''\n    Write a function that takes in a string and a character, and returns a new string with all the indices of the character in the string.\n    '''\n    return str1.find(char)\n    #find the first index of char\ndef replace_string_at_index(str1,index,replacement):\n    '''\n    Write a function that takes in a string and an index, and returns a new string that is the same as the original string, except that the character at the index in the original string is replaced with the replacement character\n    '''\n    return str1[:index] + replacement + str1[index+1:]\n    #replace the character\ndef capitalize_first_letter(str1):\n    '''\n    Write a function that takes in a string and returns a new string that is the same as the string, except that the first letter of each word is capitalized.\n    '''\n    return str1.title()\n    #capitalize the first letter\ndef capitalize_all_letters(str1):\n    '''\n    Write a function that takes in a string and returns a new string that is the same as the string, except that each letter in the string is capitalized.\n    '''\n    return str1.upper()\n    #capitalize all letters\ndef replace_string_at_index_with_string(str1,index,string1):\n    '''\n    Write a function that takes in a string and two strings, and returns a new string that is the same as the original string, except that the character at the index in the original string is replaced with the replacement character\n    '''\n    return str1[:index] + string1 + str1[index+1:]\n    #replace the character\ndef find_longest_word(str1):\n    '''\n    Write a function that takes in a string and returns the longest word in the string, where the length of the word is greater than 1. If there are no words, return \u201cno word\u201d.\n    '''\n    words = str1.split(\" \")\n    word_list = []\n    for word in words:\n        if len(word) > 1:\n            word_list.append(word)\n    if word_list == []:\n        return \"no word\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    heapq.heappush(list1, n)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if(n==0):\n        return []\n    if(n>=len(list1)):\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    heapq.heapify(list1)\n    if n > len(list1):\n        return []\n    else:\n        return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap=[]\n    for i in range(len(list1)):\n        heapq.heappush(max_heap,(-list1[i],i))\n    ret=[]\n    for i in range(n):\n        ret.append(max_heap[0][1])\n        max_heap = max_heap[1:]\n        heapq.heapify(max_heap)\n    return ret\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #todo\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    i=n\n    list3=[]\n    while(i>=0):\n        list2=list1[:n]\n        list3.append(list2[i])\n        list1.remove(list2[i])\n        i=i-1\n    return(list3)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = []\n    l_list = list1\n    if len(l_list) > n:\n        for i in range(n):\n            largest.append(heapq.nlargest(i+1, l_list))\n        return largest\n    else:\n        return l_list\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_n=[]\n    for i in range(n):\n        heapq.heappush(list_n,-list1[i])\n    return list_n\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h=[]\n    heapq.heapify(h)\n    for i in range(len(list1)):\n        if len(h)<n:\n            heapq.heappush(h,list1[i])\n        else:\n            if list1[i]>h[0]:\n                heapq.heappop(h)\n                heapq.heappush(h,list1[i])\n    return h\n    \ndef nearest_val(list1,target):\n    '''\n    Write a function that takes in a sorted list and a target and returns the index of the item in the list that is closest to the target.\n    '''\n    if list1[0]==target:\n        return 0\n    elif abs(target-list1[0])<abs(target-list1[-1]):\n        return 0\n    elif abs(target-list1[0])==abs(target-list1[-1]):\n        return len(list1)\n    for i in range(1,len(list1)):\n        if abs(target-list1[i])<abs(target-list1[i-1]):\n            return i\n        if abs(target-list1[i])==abs(target-list1[i-1]):\n            return i-1\ndef abs_val(list1,target):\n    '''\n    Write a function that takes in a sorted list and a target and returns the absolute distance from the target.\n    '''\n    for i in range(len(list1)):\n        if target==list1[i]:\n            return 0\n        elif target-list1[i]>0:\n            return abs(target-list1[i])\n        else:\n            return abs(target-list1[i])\ndef find_min(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==n:\n            return list1\n        elif list1[i]<list1[-n]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef select_min(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==n:\n            return list1\n        elif list1[i]<list1[-n]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef k_smallest(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef select_k(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef select_max(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]>list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef select_max_2(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]>list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef k_largest(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef k_largest_2(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef k_smallest_2(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef k_smallest_3(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the k smallest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]<list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef find_max(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==n:\n            return list1\n        elif list1[i]>list1[-n]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef find_max_2(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]>list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef find_max_3(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]>list1[-k]:\n            list1.pop(i)\n            list1.append(i)\n    return list1\ndef find_max_4(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    for i in range(len(list1)):\n        if len(list1)==k:\n            return list1\n        elif list1[i]>list1[-k]:\n            list1.pop(i)"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    sa = 2*pi*r*h + 2*pi*r**2\n    return sa\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = r*pi/2\n    l = (r**2) - (r*cos(x))**2\n    return l*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = pi * h**2 / 2\n    B = 2 * pi * r * h\n    return A + B\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    if type(r)!= float or type(h)!= float:\n        raise TypeError\n    else:\n        return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Get volume and surface area\n    V = pi * (r ** 2) * h\n    S = 2 * pi * r * h\n    print('The volume is:'+ str(V))\n    print('The surface area is:'+ str(S))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h=float(h)\n    r=float(r)\n    area=pi*r**2\n    height=(2*pi*r*h)/2\n    print(\"The lateral surface area is \",area+height)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L=2*math.pi*r*h\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    \n    def f(r):\n        return (np.pi*r**2*h)/3.0\n    \n    def fd(r):\n        return (2*np.pi*r**3)/3.0\n    \n    def fdd(r):\n        return (6*np.pi*r**4)/3.0\n    \n    def integral(r1,r2):\n        return (2*np.pi*(r2**2-r1**2))/(r2**3-r1**3)\n    \n    return integral(r,r),(r,r,h),(r,h,r),f,fd,fdd\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = pi * r * r * 2 + pi * r * h * 2\n    return surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"The volume of the cube is: \" + str(l**3))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert l > 0, 'Illegal side length'\n    \n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # pylint: disable=invalid-name\n    # Given an input of x, find the cube and volume of the cube with x as the side length\n    return x ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    if type(l)!= int or type(l)!= float:\n        raise ValueError('Invalid type')\n    else:\n        return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    return (n | (n - 1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & ~((n-1) >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    res = 0\n    while n:\n        res = res << 1\n        res = res | (n & 1)\n        n = n >> 1\n    return res\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (len(bin(n))-2))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return(n | n-1)\n    \n    \ndef get_bit(n, k):\n    '''\n    Write a python function to return the kth bit of a given number.\n    '''\n    return(n&(1<<k))\n    \n    \ndef set_bit(n, k):\n    '''\n    Write a python function to set the kth bit of a given number.\n    '''\n    return(n|(1<<k))\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    return(n&(n-1)==0)\n    \n    \ndef count_bit(n):\n    '''\n    Write a python function to count the number of bits in a given number.\n    '''\n    return(n.bit_length())\n    \n    \ndef find_sum(a, b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return((a+b)<<1)\n    \n    \ndef int_to_byte_array(n):\n    '''\n    Write a python function to convert a given integer into a list of bytes.\n    '''\n    return(bytearray(str(n), \"utf-8\"))\n    \n    \ndef byte_array_to_int(arr):\n    '''\n    Write a python function to convert a given list of bytes into an integer.\n    '''\n    return(int(''.join(arr)))\n    \n    \ndef count_occurrences(text, sub):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    return(text.count(sub))\n    \n    \ndef get_reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return(s[::-1])\n    \n    \ndef remove_duplicates(n):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return(list(set(n)))\n    \n    \ndef rearrange_digits(n):\n    '''\n    Write a python function to rearrange digits in a given integer.\n    '''\n    return(str(n))\n    \n    \ndef rearrange_digits_with_count(n):\n    '''\n    Write a python function to rearrange digits in a given integer.\n    '''\n    return(\"{}{}\".format(rearrange_digits(n)[0], rearrange_digits(n)[1]))\n    \n    \ndef get_number_of_digits(n):\n    '''\n    Write a python function to return the number of digits in a given integer.\n    '''\n    return(len(str(n)))\n    \n    \ndef even_digits(n):\n    '''\n    Write a python function to return whether a given integer contains even number of digits.\n    '''\n    return(len(str(n))%2==0)\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a given number is a palindrome.\n    '''\n    return(str(n)==str(n)[::-1])\n    \n    \ndef roman_to_decimal(roman):\n    '''\n    Write a python function to convert a roman numeral to decimal integer.\n    '''\n    d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    n = 0\n    for i in range(0, len(roman)):\n        if i+1 < len(roman) and d[roman[i]] < d[roman[i+1]]:\n            n -= d[roman[i]]\n        else:\n            n += d[roman[i]]\n    return(n)\n    \n    \ndef decimal_to_roman(n):\n    '''\n    Write a python function to convert a decimal integer to roman numeral.\n    '''\n    roman = \"\"\n    i = 0\n    while n > 0:\n        if n - 5 >= 0:\n            roman += \"V\"\n            n -= 5\n        elif n - 1 >= 0:\n            roman += \"I\"\n            n -= 1\n        else:\n            roman += \"I\"\n    return(roman)\n    \n    \ndef is_prime_number(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    return(int(n>1) and all(n%x for x in range(2,n)))\n    \n    \ndef generate_prime_numbers(n):\n    '''\n    Write a python function to generate prime numbers up to a given number n.\n    '''\n    return([x for x in range(2,n) if is_prime_number(x)])\n    \n    \ndef is_palindrome_number(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return(str(n)==str(n)[::-1])\n    \n    \ndef generate_palindrome_numbers(n):\n    '''\n    Write a python function to generate palindrome numbers up to a given number n.\n    '''\n    return([x for x in range(2,n) if is_palindrome_number(x)])\n    \n    \ndef has_a_number_with_odd_digits(n):\n    '''\n    Write a python function to check whether a given number has an odd number of digits.\n    '''\n    return(len(str(n))%2!=0)\n    \n    \ndef is_number_in_range(n, a, b):\n    '''\n    Write a python function to check whether a given number is in a given range.\n    '''\n    return(a<=n<=b)\n    \n    \ndef delete_element(l, element):\n    '''\n    Write a python function to delete a given element from a list.\n    '''\n    l = [i for i in l if i!=element]\n    return(l)\n    \n    \ndef delete_all_numbers(n):\n    '''\n    Write a python function to delete all the numbers from a given list.\n    '''\n    return([i for i in n if i not in n])\n    \n    \ndef delete_all_even_numbers(n):\n    '''\n    Write a python function to delete all the even numbers from a given list.\n    '''\n    return([i for i in n if i%2!=0])\n    \n    \ndef delete_all_odd_numbers(n):\n    '''\n    Write a python function to delete all the odd numbers from a given list.\n    '''\n    return([i for i in n if i%2==0])\n    \n    \ndef count_multiple_of_3_and_5(n):\n    '''\n    Write a python function to count the numbers which are multiple of 3 and 5 in a given list.\n    '''\n    return(len([i for i in n if i%3==0 or i%5==0]))\n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether a given number is a power of 2.\n    '''\n    return(n&(n-1)==0)\n    \n    \ndef get_multiple_of_n(n, m):\n    '''\n    Write a python function to return the multiple of n with the provided m.\n    '''\n    return((n*m)//abs(n*m))\n    \n    \ndef is_power_of_m(n, m):\n    '''\n    Write a python function to check whether a given number is a power of m.\n    '''\n    return(n%m==0)\n    \n    \ndef is_prime_number_2(n):\n    '''\n    Write a python function to check whether a given number is prime.\n    '''\n    return(all(n%i for i in range(2,n//2+1)))\n    \n    \ndef is_prime_number_3(n):\n    '''\n    Write a python function to chec"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    cnt=0\n    while n:\n        if n&1:\n            cnt+=1\n        n=n>>1\n    return cnt\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)\n    "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    mask = 1\n    while mask < n:\n        mask <<= 1\n    while mask > 1:\n        mask >>= 1\n        if n & mask:\n            return 0\n    return 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1<<(n.bit_length()-1))"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #n = str(n)\n    #m = list(n)\n    #print(m)\n    #m.reverse()\n    #print(m)\n    #s = ''.join(m)\n    #print(s)\n    #s = int(s)\n    #print(s)\n    #print(bin(s))\n    #print(bin(s)[2:])\n    #print(bin(s)[2:])\n    #s = bin(s)[2:]\n    #s = str(s)\n    #print(s)\n    #print(s[::-1])\n    #s = s[::-1]\n    #print(s)\n    #s = ''.join(s)\n    #print(s)\n    #s = int(s)\n    #print(s)\n    #print(bin(s))\n    return bin(n)[2:]\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # for each tuple in the test_list, count the number of times each tuple appears in the list\n    # and then return that dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occ_dict = {}\n    for entry in test_list:\n        if entry not in occ_dict:\n            occ_dict[entry] = 1\n        else:\n            occ_dict[entry] += 1\n    return occ_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item in occurences.keys():\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_of_dict = {}\n    for i in range(len(test_list)):\n        list_of_dict[test_list[i]] = test_list.count(test_list[i])\n    return list_of_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = dict()\n    for item in test_list:\n        if item not in occurences_dict.keys():\n            occurences_dict[item] = 1\n        else:\n            occurences_dict[item] += 1\n    return occurences_dict\n    \nprint(check_occurences([('a', 1), ('a', 2), ('b', 1), ('c', 4), ('a', 3)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to hold occurences of each unique element in list\n    occurences = {}\n    for element in test_list:\n        if element not in occurences.keys():\n            occurences[element] = 1\n        else:\n            occurences[element] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = dict()\n    for x in test_list:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i in result:\n            result[i] = result[i] + 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # output = Counter(test_list)\n    # return output\n    output = {}\n    for i in test_list:\n        if i not in output:\n            output[i] = 1\n        else:\n            output[i] += 1\n    return output"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Write your code here\n    count = 0\n    length = len(str)\n    i = 0\n    while(i <= length):\n        if(str[i]!=' '):\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(0,length):\n        for j in range(i,length):\n            count+=1\n            if str[i] == str[j]:\n                if j == length-1:\n                    return count\n                else:\n                    continue\n            else:\n                break\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    n = len(str)\n    count = 0\n    \n    for i in range(1, n):\n        \n        for j in range(n-i+1):\n            \n            substring = str[j:j+i]\n            if substring:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    str = str.replace(\" \", \"\")\n    for i in range(0,len(str)):\n        for j in range(i+1,len(str)+1):\n            s = str[i:j]\n            if s!= \"\":\n                count = count+1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if i == 0 or str[i-1] == \" \":\n            for j in range(i, len(str)):\n                if j == i or str[j] == \" \":\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] == \"\":\n                continue\n            else:\n                count += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if i+1 <= len(str):\n            count +=1\n        for j in range(i+1,len(str)+1):\n            if j+1 <= len(str):\n                if str[i:j]!= \"\":\n                    count +=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    n = len(str)\n    for i in range(n):\n        if i!= n-1:\n            if str[i] =='':\n                if str[i+1]!='':\n                    cnt += 1\n            else:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i]!='' and str[j]!='':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count=0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if(i!=j):\n                count+=1\n    print(count)\n            \nnumber_of_substrings(\"abcab\")\nnumber_of_substrings(\"abc\")\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Write a function that takes in a string s and finds the number of letters in the string that are also repeated 2 or more times.\n    '''\n    '''\n    Write a function that takes in a string s and finds the number of letters in the string that are not repeated.\n    '''\n    '''\n    Write a function that takes in an integer n and finds the number of partitions of a positive integer n.\n    '''\n    '''\n    Write a function that takes in an integer n and finds the sum of the number of partitions of n divided by the factorial of the partition size.\n    '''\n    '''\n    Write a function that takes in an integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the sum of the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the sum of the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '''\n    '''\n    Write a function that takes in a positive integer n and finds the number of partitions of n.\n    '"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if n == 1:\n        return m\n    count = 0\n    for i in range(1, m+1):\n        count += get_total_number_of_sequences(i, n-1)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(binom(m,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #start with total number of sequences of length n\n    numSeqs = 0\n    \n    #iterate through all possible lengths of the sequence\n    for i in range(1,m):\n        \n        #add to the sequence count if the first number is a positive integer and is greater than or equal to twice the second number and less than or equal to m\n        if i%2 == 0 and i > (2*(i-1)):\n            numSeqs += 1\n            \n    return numSeqs\n    \nprint(get_total_number_of_sequences(10,5)) #3\nprint(get_total_number_of_sequences(10,7)) #12\nprint(get_total_number_of_sequences(7,5)) #5\nprint(get_total_number_of_sequences(7,6)) #6\nprint(get_total_number_of_sequences(5,5)) "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = 1\n    while sequence <= m:\n        if sequence <= m and sequence >= 2*(sequence-1):\n            count += 1\n        sequence += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences(m,n):\n        \n        return (m/2) - (n-1) + 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    n = int(n)\n    m = int(m)\n    i = 1\n    result = 0\n    while i <= n:\n        result = result + (m-1)*(m-1)\n        i = i+1\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return(m*(n-1)+m-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize a dictionary to store solutions\n    seq_dict = {1:0,2:1,3:2,4:4}\n    seq_count = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return n\n    else:\n        return (n+1)*(m-2)\n    \ndef longest_palindromic_substring(s): \n    '''\n    Write a function that takes in a non-empty string and returns the longest palindromic substring that can be made from an even number of characters. A palindrome is defined as a string that is equal to its own reverse.\n    '''\n    if len(s) == 0:\n        return ''\n    max_length = 1\n    longest_palindrome = s[0]\n    \n    for i in range(1,len(s)):\n        even_longest_substring = s[i-max_length:i+1]\n        odd_longest_substring = s[i-max_length:i+1][::-1]\n        \n        if is_palindrome(even_longest_substring):\n            longest_palindrome = even_longest_substring\n            max_length += 2\n        if is_palindrome(odd_longest_substring):\n            longest_palindrome = odd_longest_substring\n            max_length += 1\n        if max_length > len(longest_palindrome):\n            longest_palindrome = s[i-max_length+1:i+1]\n    \n    return longest_palindrome\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a non-empty string and returns True if it is a palindrome and False otherwise.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef is_perfect_number(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a perfect number and False otherwise.\n    '''\n    if n == 1:\n        return False\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors += 1\n    if divisors == 2:\n        return True\n    else:\n        return False\n    \ndef sum_divisors(n):\n    '''\n    Write a function that takes in a positive integer and returns the sum of all of its divisors.\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors += i\n    return divisors\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns True if n is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef xor_two_strings(x,y):\n    '''\n    Write a function that takes in two non-empty strings and returns their XOR. The result should be an 8-bit string of 0's and 1's.\n    '''\n    return ''.join([str((int(x[i]) + int(y[i])) % 2) for i in range(len(x))])\n    \ndef find_the_duplicate(s):\n    '''\n    Write a function that takes in a string and returns the first occurrence of a duplicate character. For example, if the input is abcdefgh, the output should be c. If there are no duplicates, the output should be nothing.\n    '''\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                return s[i]\n    return ''\n    \ndef is_tribonacci(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a Tribonacci number and False otherwise. A number is a Tribonacci number if it is the sum of a pascal-like triangle-style sequence.\n    '''\n    tribonacci_sequence = [1,1,2,4,7,13]\n    return (n == sum(tribonacci_sequence[0:len(tribonacci_sequence)-1]))\n    \ndef longest_palindromic_substring_new(s):\n    '''\n    Write a function that takes in a string and returns the longest palindromic substring. A palindrome is defined as a string that is equal to its own reverse.\n    '''\n    if len(s) == 0:\n        return ''\n    max_length = 1\n    longest_palindrome = s[0]\n    \n    for i in range(1,len(s)):\n        even_longest_substring = s[i-max_length:i+1]\n        odd_longest_substring = s[i-max_length:i+1][::-1]\n        \n        if is_palindrome(even_longest_substring):\n            longest_palindrome = even_longest_substring\n            max_length += 2\n        if is_palindrome(odd_longest_substring):\n            longest_palindrome = odd_longest_substring\n            max_length += 1\n        if max_length > len(longest_palindrome):\n            longest_palindrome = s[i-max_length+1:i+1]\n    \n    return longest_palindrome\n    \ndef reverse_string_and_swap(s):\n    '''\n    Write a function that takes in a non-empty string s and returns its reverse.\n    '''\n    return s[::-1]\n    \ndef roman_to_int(s):\n    '''\n    Write a function that takes in a string and returns its Roman numeral value. A Roman numeral is a string of the form X, XL, L, XC, C, CD, D, and IX.\n    '''\n    numbers = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    def roman_to_decimal(roman):\n        total = 0\n        for i in range(len(roman)-1):\n            if numbers[roman[i]] < numbers[roman[i+1]]:\n                total -= numbers[roman[i]]\n            else:\n                total += numbers[roman[i]]\n        return total + numbers[roman[-1]]\n    return roman_to_decimal(s)\n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes in a positive integer and returns True if it is a pandigital and False otherwise. A pandigital is a string of digits which sums to the number n.\n    '''\n    nums = list(map(int,str(n)))\n    if len(nums)!= len(set(nums)):\n        return False\n    if sum(nums)!= n:\n        return False\n    return True\n    \ndef rotations(s):\n    '''\n    Write a function that takes in a non-empty string s and returns a list of all rotations of s. A rotation of a string is the same string shifted to the right by the same number of places.\n    '''\n    if len(s) == 0:\n        return []\n    output = []\n    for i in range(len(s)):\n        output.append(s[i:] + s[:i])\n    return output\n    \ndef rotate(s,k):\n    '''\n    Write a function that takes in a string s and an integer k and returns the string obtained by rotating the string by k places to the right.\n    '''\n    if len(s) == 0:\n        return ''\n    return s[k:] + s[:k]\n    \ndef contains(s,v):\n    '''\n    Write a function that takes in a string and a value v and returns True if v is in s and False otherwise.\n    '''\n    if len(s) == 0:\n        return False\n    for i in range(len(s)):"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1 + list2\n    list1.pop()\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        list1 = list2\n        return list1\n    elif len(list1) < 1:\n        return list1\n    else:\n        list1.pop()\n        list1.append(list2.pop())\n        return list1\n        \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \nreplace_list([1,2,3,4],(9,8,7,6))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1.pop()\n    #list1.append(list2)\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:len(list2)-1] + list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for num in list1:\n        new_list.append(list2[0])\n        list2 = list2[1:]\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    l1 = len(list1)\n    l2 = len(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[0]\n    del(list1[-1])\n    return list1\nprint(replace_list([12,24,35], [1,2,3]))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in str1:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    length = len(str1)\n    print(f'Number of characters in the string is : {length}')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # try to find a perfect square\n    # n = int(math.sqrt(N))\n    # if n**2 == N:\n    #     return n\n    # else:\n    #     return next_Perfect_Square(n**2)\n    while(N>1):\n        N = int(math.sqrt(N))\n        if N**2 == N:\n            return N\n        else:\n            N = N+1\n    return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # The first number is always perfect square.\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N > 0): \n        i = 1\n        while (True): \n            if (i * i > N): \n                break\n            i += 1\n        return i * i \n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = 1\n    while True:\n        if n*n > N: \n            return n-1\n        n += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while True:\n        y = x + 1\n        while (y * y) < x:\n            y = y + 1\n        if (y * y) > x:\n            break\n        x = y\n    return x\n    \nprint(next_Perfect_Square(121)) \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # To find next perfect square we need to make N negative and if 2*k^2 + 1 is a perfect square then k+1 is a perfect square. \n    # Therefore, we must consider all even powers and check if 2*k^2 + 1 is a perfect square.\n    # If it is, then we need to find the next odd number and use it as a starting point.\n    # If it is not a perfect square then we just need to add 2 and go on. \n    # Time Complexity O(logn)\n    # Space Complexity O(1)\n    if N <= 0:\n        return 0\n    \n    while True:\n        if 2 * (N ** 2) + 1 <= N:\n            return N + 1\n        N = N + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = math.sqrt(N)\n    i = int(math.ceil(num))\n    while True:\n        if i**2 == N:\n            return i**2\n        i = i + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 0):\n        return 1\n    # for i in range(int(math.sqrt(N)), 0, -1):\n    for i in range(int(math.sqrt(N))+1, 0, -1):\n        if(i*i == N):\n            return i\n    return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N))\n    while i * i < N:\n        i += 1\n    return i * i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqr_n = N*2\n    while sqr_n <= N:\n        sqr_n = sqr_n+1\n    return sqr_n-1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    #brute force:\n    if len(arr) == 0:\n        return 0\n    \n    #brute force and try to take the maximum from 2 inwards\n    #we don't need to take 1 inwards, since we can't make a sequence of length 0\n    \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)):\n        max_ending_here += arr[i]\n        max_ending_here = max(max_ending_here, 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    i = 0\n    j = 1\n    while(j < len(arr)):\n        if(arr[i] < arr[j]):\n            max_sum = max(max_sum, arr[i] + arr[j])\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    print(max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + arr[i]\n        if (max_ending_here<0):\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum_arr = []\n    max_sum_arr.append(max(arr))\n    for i in range(1, len(arr)):\n        max_sum_arr.append(max_sum_arr[i - 1] + arr[i])\n    for i in range(len(arr) - 1, 0, -1):\n        max_sum_arr.append(max_sum_arr[i] + arr[i])\n    return max(max_sum_arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print(\"Array: \", arr)\n    n = len(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # n = len(arr)\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0] \n    else: \n        n = len(arr) \n        left_max = arr[0]\n        right_max = arr[0] \n        s = 0\n        for i in range(1, n): \n            s = max(arr[i], s + arr[i]) \n            left_max = max(left_max, s) \n        s = 0\n        for i in range(n-1, -1, -1): \n            s = max(arr[i], s + arr[i]) \n            right_max = max(right_max, s) \n        return max(left_max, right_max) \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # max_sum = arr[0]\n    max_sum = arr[0]\n    for i in range(1,len(arr)):\n        # print(i)\n        max_sum = max(max_sum, arr[i] + max(max_sum,arr[i-1]))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    if size == 0: return 0\n    elif size == 1: return arr[0]\n    else:\n        dp = [[0 for i in range(size)] for j in range(size)]\n        # print(dp)\n        dp[0][0] = arr[0]\n        # print(dp)\n        for i in range(1,size):\n            dp[i][0] = max(dp[i-1][0], arr[i])\n        \n        for j in range(1,size):\n            dp[0][j] = max(dp[0][j-1], arr[j])\n        \n        for i in range(1,size):\n            for j in range(1,size):\n                if arr[i] > arr[j]:\n                    dp[i][j] = max(arr[i] + dp[i-1][j], arr[j] + dp[i][j-1])\n                else:\n                    dp[i][j] = max(arr[i] + dp[i-1][j], arr[j] + dp[i][j-1])\n        return dp[size-1][size-1]\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    else:\n        while True:\n            x = number / 2\n            if x * x == number:\n                return x\n            else:\n                number = x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    import time\n    start_time = time.time()\n    iterations = 0\n    guess = 1\n    while guess * guess!= number:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n    return iterations, guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = number / 2\n    while result > 1:\n        result = (number / 2) + (number / 4)\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return number\n    step = 2\n    ans = 1/step\n    while ans**2 < number:\n        ans += step\n    return ans**2\n    \nif __name__ == '__main__':\n    \n    print(\"Write a function for computing square roots using the babylonian method.\")\n    num = int(input(\"Input the number to compute its square root: \"))\n    print(f\"Square root of {num} is {babylonian_squareroot(num)}.\")"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1\n    count = 0\n    while x!= y:\n        count += 1\n        y = (y + (x - y) / 2)\n    return count\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"No negative numbers for square roots\")\n        return\n    elif number == 0:\n        print(\"The square root of 0 is 0\")\n        return\n    else:\n        guess = number / 2\n        while guess < number:\n            guess = guess / 2\n        print(round(guess, 2))\n        return\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # code goes here\n    return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    while True:\n        previous_root = root\n        root = (root + number/root) / 2\n        if root == previous_root:\n            break\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print('It does not compute. Try with positive numbers only')\n        return None\n    i = 0\n    while True:\n        i += 1\n        old_number = number\n        number = (number + 1) / 2\n        if abs(old_number - number) < 0.000000001:\n            break\n    return number\n    \ndef lucas_squareroot(number):\n    '''\n    Write a function for computing square roots using the lucas method.\n    '''\n    if number < 0:\n        print('It does not compute. Try with positive numbers only')\n        return None\n    i = 0\n    a = 2\n    b = 1\n    while True:\n        i += 1\n        a, b = b, a + b\n        if a == number:\n            break\n    return a\n    \ndef euler_squareroot(number):\n    '''\n    Write a function for computing square roots using the euler method.\n    '''\n    if number < 0:\n        print('It does not compute. Try with positive numbers only')\n        return None\n    i = 0\n    a = 1\n    while True:\n        i += 1\n        a = a + 1 / a\n        if abs(a - number) < 0.000000001:\n            break\n    return a\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_limit = 0.000001\n    upper_limit = number\n    while lower_limit < upper_limit:\n        middle_limit = (upper_limit + lower_limit) / 2\n        if (middle_limit * middle_limit) == number:\n            return middle_limit\n        if (middle_limit * middle_limit) > number:\n            upper_limit = middle_limit\n        if (middle_limit * middle_limit) < number:\n            lower_limit = middle_limit\n    return middle_limit\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps_table = [[0 for j in range(len(str))] for i in range(len(str))]\n    \n    for i in range(len(str)):\n        lps_table[i][i] = 1\n        \n    start = 0\n    end = 0\n    max_length = 1\n    \n    for i in range(1, len(str)):\n        for j in range(0, i):\n            if str[j] == str[i]:\n                lps_table[j][i] = lps_table[j+1][i-1] + 2\n                if lps_table[j][i] > max_length:\n                    max_length = lps_table[j][i]\n                    start = j\n                    end = i\n                    \n    return str[start:end+1]\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #base case\n    if len(str) <= 1:\n        return len(str)\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for s in range(2, len(str) + 1):\n        for start in range(len(str) - s + 1):\n            end = start + s - 1\n            if str[start] == str[end] and s == 2:\n                dp[start][end] = 2\n            elif str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    return dp[0][len(str) - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create dictionary to store subsequence and lengths\n    dct = {} \n    n = len(str) \n    # Base Case \n    max_len = 1 \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #solution 1:\n    #a = str\n    #l = len(a)\n    #p = []\n    #if l == 1:\n    #    return 1\n    #else:\n    #    for i in range(l):\n    #        for j in range(i+1,l+1):\n    #            temp = str[i:j]\n    #            if temp == temp[::-1]:\n    #                p.append(temp)\n    #print(p)\n    #return len(max(p,key=len))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '':\n        return 0\n    else:\n        return 1 + max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    dp = [[0 for x in range(len(str))] for y in range(len(str))]\n    \n    for i in range(len(str)):\n        dp[i][i] = 1\n        \n    \n    for i in range(len(str)-1, -1, -1):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][len(str)-1]\n    \n    \nstr1 = \"forgeeksskeegfor\"\nprint(lps(str1))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    max_len = 1\n    start = 0\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n            max_len = 2\n            start = i\n    for k in range(3,n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and dp[i+1][j-1] > 0:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n    return max_len, str[start:start+max_len]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)] \n    \n    for i in range(n): \n        dp[i][i] = 1\n        \n    max_len = 1\n    max_str = str[0]\n    \n    for length in range(2, n + 1): \n        for left in range(n): \n            if str[left] == str[left + length -1 ] and (left + 1 <= left + length - 2): \n                dp[left][left + length - 1] = 1\n            else:\n                dp[left][left + length - 1] = 0\n                \n            if dp[left][left] == 1 and length > max_len: \n                max_len = length \n                max_str = str[left:left + length]\n                \n    return max_len, max_str"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                if j - i == 1 or dp[i+1][j-1] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n            else:\n                dp[i][j] = 0\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        odd = get_substring(str, i, i)\n        even = get_substring(str, i, i+1)\n        if len(odd) > len(even):\n            end = i\n        elif len(odd) < len(even):\n            start = i\n    return end - start\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # If the number is one, return one\n    if n == 1:\n        return 1\n    else:\n        return (harmonic_sum(n - 1)) + (n) / n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 / i\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(range(1, n))\n    \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        raise ValueError('N must be >= 0')\n    total = 0\n    for i in range(n):\n        total += 1 / (i + 1)\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n)\n    \n    \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def sum_harmonic_term(k):\n        return 1 / k if k > 0 else 0\n    return sum(sum_harmonic_term(i) for i in range(1, n))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Using HashMap\n    # Time Complexity - O(n + m)\n    # Space Complexity - O(n + m)\n    # if no array is passed then return an empty array\n    # if both arrays are empty return an empty array\n    # if one array is empty return an empty array\n    # if both arrays are non-empty\n    # return a sorted array of elements which appear in both arrays\n    # initialise a hashmap\n    # loop through the two arrays\n    # if the current element is in the hashmap add it to the array\n    # if not add it to the hashmap\n    # add the array to the empty array\n    # add the hashmap elements to the empty array\n    # if the empty array is empty return an empty array\n    # if the empty array is not empty return the empty array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    array_nums1 = array_nums1.split(\",\")\n    for num in array_nums2:\n        if num in array_nums1:\n            intersect.append(num)\n    return intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = sorted(array_nums1)\n    nums2 = sorted(array_nums2)\n    print(nums1)\n    print(nums2)\n    i=0\n    j=0\n    intersection = []\n    while i<len(nums1) and j<len(nums2):\n        if nums1[i]==nums2[j]:\n            intersection.append(nums1[i])\n            i+=1\n            j+=1\n        elif nums1[i]<nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #returns a list of values that exist in both arrays. \n    #print(array_nums1)\n    #print(array_nums2)\n    array_nums1.sort()\n    array_nums2.sort()\n    #print(array_nums1)\n    #print(array_nums2)\n    #print(array_nums1)\n    #print(array_nums2)\n    #print(len(array_nums1))\n    #print(len(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n    \ndef sorted_dict(dict1): \n    '''\n    Write a python function that takes in a dictionary and sorts the dictionary based on the key value pairs.\n    '''\n    dict1 = dict1.items()\n    sorted_dict = sorted(dict1)\n    return sorted_dict\n    \ndef even_number(n): \n    '''\n    Write a python function that takes in a list of numbers and returns the sum of even numbers in the list.\n    '''\n    even_number = 0\n    for number in n:\n        if number % 2 == 0:\n            even_number += number\n    return even_number\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for i in range(0, len(tup)):\n        if tup[i] == x:\n            occurences += 1\n    return occurences\n    \ndef get_second_lowest_element(tup):\n    '''\n    Write a python function that takes in a tuple and returns the second element that is not the smallest element.\n    '''\n    for i in range(1, len(tup)):\n        if tup[i] < tup[0]:\n            return tup[i]\n    return tup[0]\n    \ndef remove_all_from_tuple(tup, element):\n    '''\n    Write a python function that takes in a tuple and an element and removes all instances of the element from the tuple.\n    '''\n    tup = tup[:]\n    for i in range(0, len(tup)):\n        if tup[i] == element:\n            tup.pop(i)\n    return tup\n    \ndef is_member_of_tuple(tup, element):\n    '''\n    Write a python function that takes in a tuple and an element and returns whether the element is a member of the tuple.\n    '''\n    return element in tup\n    \ndef most_frequent(tup):\n    '''\n    Write a python function that takes in a tuple and returns the element that appears the most.\n    '''\n    d = {}\n    for x in tup:\n        if x in d.keys():\n            d[x] += 1\n        else:\n            d[x] = 1\n    frequent_val = []\n    for k,v in d.items():\n        if v == max(d.values()):\n            frequent_val.append(k)\n    return frequent_val\n    \ndef get_counts_of_unique_elements(tup):\n    '''\n    Write a python function that takes in a tuple and returns a dictionary with the count of each element in the tuple.\n    '''\n    d = {}\n    for x in tup:\n        if x in d.keys():\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n    \ndef sum_of_elements_in_tuple(tup):\n    '''\n    Write a python function that takes in a tuple and returns the sum of all of the elements in the tuple.\n    '''\n    tup = tup[:]\n    sum = 0\n    for i in range(0, len(tup)):\n        sum += tup[i]\n    return sum\n    \ndef get_index_of_first_non_repeated_element(tup):\n    '''\n    Write a python function that takes in a tuple and returns the index of the first element in the tuple that is not repeated.\n    '''\n    tup = tup[:]\n    for i in range(0, len(tup)):\n        if tup.count(tup[i]) > 1:\n            tup.pop(i)\n            return i\n    return -1\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_result=[]\n    for i in range(len(list)):\n        if list[i]==element:\n            list_result.append(element)\n            for j in range(len(list)-i-1):\n                list_result.append(list[i-j-1])\n            break\n    return list_result\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    '''\n    Ex: insert_element([1,2,3],4) \u279e [1,4,2,3]\n    Ex: insert_element([1,2,3],6) \u279e [1,2,3,6]\n    Ex: insert_element([1,2,3],10) \u279e [1,2,3,10]\n    '''\n    '''\n    ref: https://codereview.stackexchange.com/questions/168881/what-is-insertion-sort-and-how-does-it-work\n    '''\n    for i in range(len(list)):\n        if list[i] >= element:\n            break\n    list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    counter = 0\n    for index in range(len(list)):\n        if element == list[index]:\n            index += 1\n        else:\n            list.insert(index,element)\n            return list\n    list.append(element)\n    return list\n    # Your insert_element function should return the resulting list\n    \n    \n    \n    \n    \n    \ndef find_min_max(list):\n    '''\n    Write a function that takes in a list of numbers and returns a tuple containing the minimum and maximum values in the list.\n    '''\n    return (min(list),max(list))\n    # Your find_min_max function should return a tuple with the minimum and maximum values in the list.\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(0,len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    count = 1\n    while True:\n        if count == len(list):\n            break\n        if list[count-1] <= element <= list[count]:\n            list.insert(count, element)\n            break\n        else:\n            count += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Write your function here\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            return list[:i] + [element] + list[i:]\n        i += 1\n    return list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list+[element]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=0\n    phi=0\n    if (len(numbers)==1):\n        r=cmath.sqrt(complex(numbers[0].real,numbers[0].imag)).real\n        phi=cmath.phase(complex(numbers[0].real,numbers[0].imag)).real\n        return (r,phi)\n    elif (len(numbers)==2):\n        r1=cmath.sqrt(complex(numbers[0].real,numbers[0].imag)).real\n        r2=cmath.sqrt(complex(numbers[1].real,numbers[1].imag)).real\n        phi1=cmath.phase(complex(numbers[0].real,numbers[0].imag)).real\n        phi2=cmath.phase(complex(numbers[1].real,numbers[1].imag)).real\n        if (abs(r1-r2)<=abs(r1+r2)):\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n        elif (abs(r1-r2)>abs(r1+r2)):\n            if (phi1<phi2):\n                return (r2,phi1)\n            else:\n                return (r2,phi2)\n        else:\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n    elif (len(numbers)==3):\n        r1=cmath.sqrt(complex(numbers[0].real,numbers[0].imag)).real\n        r2=cmath.sqrt(complex(numbers[1].real,numbers[1].imag)).real\n        r3=cmath.sqrt(complex(numbers[2].real,numbers[2].imag)).real\n        phi1=cmath.phase(complex(numbers[0].real,numbers[0].imag)).real\n        phi2=cmath.phase(complex(numbers[1].real,numbers[1].imag)).real\n        phi3=cmath.phase(complex(numbers[2].real,numbers[2].imag)).real\n        if (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3) and abs(r2-r3)<=abs(r2+r3)):\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n        elif (abs(r1-r2)>abs(r1+r2) and abs(r1-r3)>abs(r1+r3) and abs(r2-r3)>abs(r2+r3)):\n            if (phi1<phi2):\n                return (r2,phi1)\n            else:\n                return (r2,phi2)\n        elif (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3) and abs(r2-r3)<=abs(r2+r3)):\n            if (phi1<phi2):\n                return (r3,phi1)\n            else:\n                return (r3,phi2)\n        elif (abs(r1-r2)>abs(r1+r2) and abs(r1-r3)>abs(r1+r3) and abs(r2-r3)>abs(r2+r3)):\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n        elif (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3) and abs(r2-r3)<=abs(r2+r3)):\n            if (phi1<phi2):\n                return (r2,phi1)\n            else:\n                return (r2,phi2)\n        elif (abs(r1-r2)>abs(r1+r2) and abs(r1-r3)>abs(r1+r3) and abs(r2-r3)>abs(r2+r3)):\n            if (phi1<phi2):\n                return (r3,phi1)\n            else:\n                return (r3,phi2)\n        else:\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n    elif (len(numbers)==4):\n        r1=cmath.sqrt(complex(numbers[0].real,numbers[0].imag)).real\n        r2=cmath.sqrt(complex(numbers[1].real,numbers[1].imag)).real\n        r3=cmath.sqrt(complex(numbers[2].real,numbers[2].imag)).real\n        r4=cmath.sqrt(complex(numbers[3].real,numbers[3].imag)).real\n        phi1=cmath.phase(complex(numbers[0].real,numbers[0].imag)).real\n        phi2=cmath.phase(complex(numbers[1].real,numbers[1].imag)).real\n        phi3=cmath.phase(complex(numbers[2].real,numbers[2].imag)).real\n        phi4=cmath.phase(complex(numbers[3].real,numbers[3].imag)).real\n        if (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3) and abs(r1-r4)<=abs(r1+r4) and abs(r2-r3)<=abs(r2+r3) and abs(r2-r4)<=abs(r2+r4) and abs(r3-r4)<=abs(r3+r4)):\n            if (phi1<phi2):\n                return (r1,phi1)\n            else:\n                return (r1,phi2)\n        elif (abs(r1-r2)>abs(r1+r2) and abs(r1-r3)>abs(r1+r3) and abs(r1-r4)>abs(r1+r4) and abs(r2-r3)>abs(r2+r3) and abs(r2-r4)>abs(r2+r4) and abs(r3-r4)>abs(r3+r4)):\n            if (phi1<phi2):\n                return (r2,phi1)\n            else:\n                return (r2,phi2)\n        elif (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3) and abs(r1-r4)<=abs(r1+r4) and abs(r2-r3)<=abs(r2+r3) and abs(r2-r4)<=abs(r2+r4) and abs(r3-r4)<=abs(r3+r4)):\n            if (phi1<phi2):\n                return (r3,phi1)\n            else:\n                return (r3,phi2)\n        elif (abs(r1-r2)>abs(r1+r2) and abs(r1-r3)>abs(r1+r3) and abs(r1-r4)>abs(r1+r4) and abs(r2-r3)>abs(r2+r3) and abs(r2-r4)>abs(r2+r4) and abs(r3-r4)>abs(r3+r4)):\n            if (phi1<phi2):\n                return (r4,phi1)\n            else:\n                return (r4,phi2)\n        elif (abs(r1-r2)<=abs(r1+r2) and abs(r1-r3)<=abs(r1+r3"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=complex(numbers[0],numbers[1])\n    y=complex(numbers[2],numbers[3])\n    r=((x**2+y**2)**0.5)\n    a=(cmath.atan2(y,x))\n    print(\"r={}, a={}\".format(r,a))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if(cmath.isclose(number, 0)):\n            print(\"nan\")\n            continue\n        \n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        print(r, theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i][0], numbers[i][1])\n    \n    for i in range(len(numbers)):\n        print(numbers[i], \"=\",round(cmath.polar(numbers[i])[0], 2), \"+\", round(cmath.polar(numbers[i])[1], 2), \"*i\")\n    \n    \n    \n    '''\n    Write a Python program to print the complex numbers in the form of tuples\n    '''\n    for i in range(len(numbers)):\n        print(numbers[i], \"=\",round(cmath.polar(numbers[i])[0], 2), \"+\", round(cmath.polar(numbers[i])[1], 2), \"*i\")\n    \n    \n    '''\n    Write a Python program to compute the difference between the sum of the squares of the first\n    number of a list and the square of the sum of the first number of the list.\n    '''\n    l = list(map(int,input().split()))\n    \n    sum1 = 0\n    for i in l:\n        sum1 += (i*i)\n    \n    sum2 = 0\n    for j in range(1,len(l)):\n        sum2 += l[j]\n    \n    print(sum1 - (sum2 * sum2))\n    \n    \n    \n    '''\n    Write a Python program to find the largest and smallest numbers in a list.\n    '''\n    numbers = list(map(int,input().split()))\n    \n    max1 = -1\n    min1 = 1e6\n    \n    for i in range(len(numbers)):\n        if(numbers[i] > max1):\n            max1 = numbers[i]\n        elif(numbers[i] < min1):\n            min1 = numbers[i]\n    print(max1, min1)\n    \n    \n    '''\n    Write a Python program to sum the numbers in a list\n    '''\n    numbers = list(map(int,input().split()))\n    \n    sum1 = 0\n    for i in range(len(numbers)):\n        sum1 += numbers[i]\n    print(sum1)\n    \n    \n    '''\n    Write a Python program to check whether a given number is even or not.\n    '''\n    numbers = list(map(int,input().split()))\n    \n    for i in range(len(numbers)):\n        if(numbers[i] % 2 == 0):\n            print(\"True\")\n            break\n    else:\n        print(\"False\")\n    \n    \n    \n    '''\n    Write a Python program to check whether a given number is positive,\n    negative or zero.\n    '''\n    numbers = list(map(int,input().split()))\n    \n    for i in range(len(numbers)):\n        if(numbers[i] > 0):\n            print(\"Positive\")\n            break\n    else:\n        print(\"Negative\")\n    \n    \n    '''\n    Write a Python program to check whether a given list is a subset of another list.\n    '''\n    numbers = list(map(int,input().split()))\n    \n    l = list(map(int,input().split()))\n    \n    if(numbers == l):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    '''\n    Write a Python program to generate all combinations of a list.\n    '''\n    numbers = list(map(int,input().split()))\n    \n    res = []\n    \n    for i in range(1,len(numbers)+1):\n        res += list(map(list,itertools.combinations(numbers,i)))\n        \n    print(res)\n    \n    \n    '''\n    Write a Python program to find the first non-repeating character in a given string.\n    '''\n    s = input()\n    \n    d = {}\n    \n    for i in range(len(s)):\n        if(s[i] in d):\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    \n    for i in range(len(s)):\n        if(d[s[i]] == 1):\n            print(s[i], end = \"\")\n            break\n        \n    \n    \n    '''\n    Write a Python program to get the factorial of a number provided by the user.\n    '''\n    \n    n = int(input())\n    \n    factorial = 1\n    \n    if(n == 0):\n        print(\"The factorial of 0 is 1\")\n    elif(n < 0):\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    else:\n        for i in range(1,n + 1):\n            factorial *= i\n        print(\"The factorial of\",n,\"is\",factorial)\n    \n    \n    \n    '''\n    Write a Python program to remove the first occurrence of a digit from a given number.\n    '''\n    n = int(input())\n    \n    c = list(str(n))\n    \n    for i in range(len(c)):\n        if(c[i] == \"0\"):\n            c[i] = \"\"\n            break\n        \n    n = \"\".join(c)\n    \n    print(n)\n    \n    \n    '''\n    Write a Python program to remove the nth index character from a non-empty string.\n    '''\n    \n    s = input()\n    \n    c = list(s)\n    \n    for i in range(len(c)):\n        if(i == len(c) - n):\n            c[i] = \"\"\n            break\n        \n    s = \"\".join(c)\n    \n    print(s)\n    \n    \n    \n    '''\n    Write a Python program to reverse a string.\n    '''\n    s = input()\n    \n    c = list(s)\n    \n    c.reverse()\n    \n    s = \"\".join(c)\n    \n    print(s)\n    \n    \n    \n    '''\n    Write a Python program to count the occurrences of each word in a given sentence.\n    '''\n    s = input()\n    \n    words = s.split()\n    \n    for i in range(len(words)):\n        c = 0\n        for j in range(len(words)):\n            if(words[i] == words[j]):\n                c += 1\n        print(words[i], \"occured\", c, \"time(s)\")\n    \n    \n    '''\n    Write a Python program to count the number of times a particular character\n    occurs in a string.\n    '''\n    s = input()\n    \n    char = input()\n    \n    c = 0\n    for i in range(len(s)):\n        if(char == s[i]):\n            c += 1\n    print(c)\n    \n    \n    '''\n    Write a Python program to get a string made of the first 2 and the last 2 chars\n    from a given a string. If the string length is less than 2, return instead of the\n    empty string.\n    '''\n    s = input()\n    \n    if(len(s) < 2):\n        print(\"\")\n    else:\n        print(s[0:2]+s[-2:])\n    \n    \n    \n    '''\n    Write a Python program to swap first and last characters of a given string.\n    '''\n    s = input()\n    \n    s = list(s)\n    \n    s[0], s[len(s) - 1] = s[len(s) - 1], s[0]\n    \n    print(\"\".join(s))\n    \n    \n    \n    '''\n    Write a Python program to convert a given string to all uppercase if it contains\n    at least 2 uppercase characters in the first 4 characters.\n    '''\n    s = input()\n    \n    if(len(s) >= 4):\n        c = \"\"\n        for i in range(len(s)):\n            if(s[i].isupper()):\n                c += s[i]\n        print(c)\n    else:\n        print("
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for item in numbers:\n        temp = []\n        real_part = item.real\n        imaginary_part = item.imag\n        hypotenuse = math.sqrt(real_part*real_part+imaginary_part*imaginary_part)\n        hypotenuse = math.ceil(hypotenuse)\n        temp.append(hypotenuse)\n        temp.append(cmath.phase(item))\n        polar_coordinates.append(temp)\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code here\n    for i in numbers:\n        print(i)\n        if i == 'complex(0,0)':\n            numbers.remove('complex(0,0)')\n            print(numbers)\n        if i == 'complex(0,1)':\n            numbers.remove('complex(0,1)')\n            print(numbers)\n        if i == 'complex(0,2)':\n            numbers.remove('complex(0,2)')\n            print(numbers)\n        if i == 'complex(0,3)':\n            numbers.remove('complex(0,3)')\n            print(numbers)\n        if i == 'complex(0,4)':\n            numbers.remove('complex(0,4)')\n            print(numbers)\n        if i == 'complex(0,5)':\n            numbers.remove('complex(0,5)')\n            print(numbers)\n        if i == 'complex(0,6)':\n            numbers.remove('complex(0,6)')\n            print(numbers)\n        if i == 'complex(0,7)':\n            numbers.remove('complex(0,7)')\n            print(numbers)\n        if i == 'complex(0,8)':\n            numbers.remove('complex(0,8)')\n            print(numbers)\n        if i == 'complex(0,9)':\n            numbers.remove('complex(0,9)')\n            print(numbers)\n        if i == 'complex(1,0)':\n            numbers.remove('complex(1,0)')\n            print(numbers)\n        if i == 'complex(1,1)':\n            numbers.remove('complex(1,1)')\n            print(numbers)\n        if i == 'complex(1,2)':\n            numbers.remove('complex(1,2)')\n            print(numbers)\n        if i == 'complex(1,3)':\n            numbers.remove('complex(1,3)')\n            print(numbers)\n        if i == 'complex(1,4)':\n            numbers.remove('complex(1,4)')\n            print(numbers)\n        if i == 'complex(1,5)':\n            numbers.remove('complex(1,5)')\n            print(numbers)\n        if i == 'complex(1,6)':\n            numbers.remove('complex(1,6)')\n            print(numbers)\n        if i == 'complex(1,7)':\n            numbers.remove('complex(1,7)')\n            print(numbers)\n        if i == 'complex(1,8)':\n            numbers.remove('complex(1,8)')\n            print(numbers)\n        if i == 'complex(1,9)':\n            numbers.remove('complex(1,9)')\n            print(numbers)\n        if i == 'complex(2,0)':\n            numbers.remove('complex(2,0)')\n            print(numbers)\n        if i == 'complex(2,1)':\n            numbers.remove('complex(2,1)')\n            print(numbers)\n        if i == 'complex(2,2)':\n            numbers.remove('complex(2,2)')\n            print(numbers)\n        if i == 'complex(2,3)':\n            numbers.remove('complex(2,3)')\n            print(numbers)\n        if i == 'complex(2,4)':\n            numbers.remove('complex(2,4)')\n            print(numbers)\n        if i == 'complex(2,5)':\n            numbers.remove('complex(2,5)')\n            print(numbers)\n        if i == 'complex(2,6)':\n            numbers.remove('complex(2,6)')\n            print(numbers)\n        if i == 'complex(2,7)':\n            numbers.remove('complex(2,7)')\n            print(numbers)\n        if i == 'complex(2,8)':\n            numbers.remove('complex(2,8)')\n            print(numbers)\n        if i == 'complex(2,9)':\n            numbers.remove('complex(2,9)')\n            print(numbers)\n        if i == 'complex(3,0)':\n            numbers.remove('complex(3,0)')\n            print(numbers)\n        if i == 'complex(3,1)':\n            numbers.remove('complex(3,1)')\n            print(numbers)\n        if i == 'complex(3,2)':\n            numbers.remove('complex(3,2)')\n            print(numbers)\n        if i == 'complex(3,3)':\n            numbers.remove('complex(3,3)')\n            print(numbers)\n        if i == 'complex(3,4)':\n            numbers.remove('complex(3,4)')\n            print(numbers)\n        if i == 'complex(3,5)':\n            numbers.remove('complex(3,5)')\n            print(numbers)\n        if i == 'complex(3,6)':\n            numbers.remove('complex(3,6)')\n            print(numbers)\n        if i == 'complex(3,7)':\n            numbers.remove('complex(3,7)')\n            print(numbers)\n        if i == 'complex(3,8)':\n            numbers.remove('complex(3,8)')\n            print(numbers)\n        if i == 'complex(3,9)':\n            numbers.remove('complex(3,9)')\n            print(numbers)\n        if i == 'complex(4,0)':\n            numbers.remove('complex(4,0)')\n            print(numbers)\n        if i == 'complex(4,1)':\n            numbers.remove('complex(4,1)')\n            print(numbers)\n        if i == 'complex(4,2)':\n            numbers.remove('complex(4,2)')\n            print(numbers)\n        if i == 'complex(4,3)':\n            numbers.remove('complex(4,3)')\n            print(numbers)\n        if i == 'complex(4,4)':\n            numbers.remove('complex(4,4)')\n            print(numbers)\n        if i == 'complex(4,5)':\n            numbers.remove('complex(4,5)')\n            print(numbers)\n        if i == 'complex(4,6)':\n            numbers.remove('complex(4,6)')\n            print(numbers)\n        if i == 'complex(4,7)':\n            numbers.remove('complex(4,7)')\n            print(numbers)\n        if i == 'complex(4,8)':\n            numbers.remove('complex(4,8)')\n            print(numbers)\n        if i == 'complex(4,9)':\n            numbers.remove('complex(4,9)')\n            print(numbers)\n        if i == 'complex(5,0)':\n            numbers.remove('complex(5,0)')\n            print(numbers)\n        if i == 'complex(5,1)':\n            numbers.remove('complex(5,1)')\n            print(numbers)\n        if i == 'complex(5,2)':\n            numbers.remove('complex(5,2)')\n            print(numbers)\n        if i == 'complex(5,3)':\n            numbers.remove('complex(5,3)')\n            print(numbers)\n        if i == 'complex(5,4)':\n            numbers.remove('complex(5,4)')\n            print(numbers)\n        if i == 'complex(5,5)':\n            numbers.remove('complex(5,5)')\n            print(numbers)\n        if i == 'complex(5,6)':\n            numbers.remove('complex(5,6)')\n            print(numbers)\n        if i == 'complex(5,7)':\n            numbers.remove('complex(5,7)')\n            print(numbers)\n        if i == 'complex(5,8)':\n            numbers.remove('complex("
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = numbers.real\n    i = numbers.imag\n    theta = cmath.phase(numbers)\n    return r,theta\ndef arccos(x):\n    '''\n    Write a python function to calculate arccos.\n    '''\n    if x == 0:\n        return 0\n    if x<0:\n        return cmath.acos(x)\n    else:\n        return cmath.acos(-x)\ndef main():\n    '''\n    Write a main function to test the program.\n    '''\n    a = complex(-0.5, -0.5)\n    print(convert(a))\n    b = complex(-0.2, 0.9)\n    print(convert(b))\n    c = complex(0.5, 0.5)\n    print(convert(c))\n    d = complex(0.5, -0.5)\n    print(convert(d))\n    e = complex(1, 0)\n    print(convert(e))\n    f = complex(0.5, -0.5)\n    print(convert(f))\n    g = complex(0.5, 0.5)\n    print(convert(g))\n    h = complex(1, 0.5)\n    print(convert(h))\n    i = complex(0.5, 0.5)\n    print(convert(i))\n    j = complex(1, 0.5)\n    print(convert(j))\n    k = complex(0.5, 0.5)\n    print(convert(k))\n    l = complex(0.5, 1)\n    print(convert(l))\n    m = complex(1, 0.5)\n    print(convert(m))\n    n = complex(0.5, 1)\n    print(convert(n))\n    o = complex(1, 1)\n    print(convert(o))\n    p = complex(-0.5, -0.5)\n    print(convert(p))\n    q = complex(0.5, -0.5)\n    print(convert(q))\n    r = complex(0.5, 0.5)\n    print(convert(r))\n    s = complex(1, 0.5)\n    print(convert(s))\n    t = complex(0.5, 0.5)\n    print(convert(t))\n    u = complex(0.5, 1)\n    print(convert(u))\n    v = complex(1, 0.5)\n    print(convert(v))\n    w = complex(0.5, 1)\n    print(convert(w))\n    x = complex(1, 1)\n    print(convert(x))\n    y = complex(0.5, -0.5)\n    print(convert(y))\n    z = complex(1, -0.5)\n    print(convert(z))\n    aa = complex(-0.5, -0.5)\n    print(convert(aa))\n    ab = complex(0.5, 0.5)\n    print(convert(ab))\n    ac = complex(0.5, -0.5)\n    print(convert(ac))\n    ad = complex(-0.5, 0.5)\n    print(convert(ad))\n    ae = complex(0.5, 0.5)\n    print(convert(ae))\n    af = complex(-0.5, -0.5)\n    print(convert(af))\n    ag = complex(-0.5, 0.5)\n    print(convert(ag))\n    ah = complex(-0.5, -0.5)\n    print(convert(ah))\n    ai = complex(-0.5, -0.5)\n    print(convert(ai))\n    aj = complex(0.5, 0.5)\n    print(convert(aj))\n    ak = complex(-0.5, -0.5)\n    print(convert(ak))\n    al = complex(-0.5, 0.5)\n    print(convert(al))\n    am = complex(0.5, 0.5)\n    print(convert(am))\n    an = complex(0.5, -0.5)\n    print(convert(an))\n    ao = complex(-0.5, 0.5)\n    print(convert(ao))\n    ap = complex(0.5, -0.5)\n    print(convert(ap))\n    aq = complex(0.5, -0.5)\n    print(convert(aq))\n    ar = complex(0.5, 0.5)\n    print(convert(ar))\n    as = complex(-0.5, 0.5)\n    print(convert(as))\n    at = complex(0.5, -0.5)\n    print(convert(at))\n    au = complex(-0.5, -0.5)\n    print(convert(au))\n    av = complex(0.5, -0.5)\n    print(convert(av))\n    aw = complex(0.5, 0.5)\n    print(convert(aw))\n    ax = complex(-0.5, -0.5)\n    print(convert(ax))\n    ay = complex(-0.5, 0.5)\n    print(convert(ay))\n    az = complex(-0.5, -0.5)\n    print(convert(az))\n    aa = complex(-0.5, -0.5)\n    print(convert(aa))\n    ab = complex(0.5, 0.5)\n    print(convert(ab))\n    ac = complex(0.5, -0.5)\n    print(convert(ac))\n    ad = complex(-0.5, 0.5)\n    print(convert(ad))\n    ae = complex(0.5, 0.5)\n    print(convert(ae))\n    af = complex(0.5, -0.5)\n    print(convert(af))\n    ag = complex(-0.5, 0.5)\n    print(convert(ag))\n    ah = complex(-0.5, -0.5)\n    print(convert(ah))\n    ai = complex(-0.5, -0.5)\n    print(convert(ai))\n    aj = complex(0.5, 0.5)\n    print(convert(aj))\n    ak = complex(-0.5, -0.5)\n    print(convert(ak))\n    al = complex(0.5, 0.5)\n    print(convert(al))\n    am = complex(0.5, -0.5)\n    print(convert(am))\n    an = complex(-0.5, -0.5)\n    print(convert(an))\n    ao = complex(0.5, 0.5)\n    print(convert(ao))\n    ap = complex(-0.5, -0.5)\n    print(convert(ap))\n    aq = complex(-0.5, -0.5)\n    print(convert(aq))\n    ar = complex(0.5, 0.5)\n    print(convert(ar))\n    as = complex(0.5, -0.5)\n    print(convert(as))\n    at = complex(-0.5, 0.5)\n    print(convert(at))\n    au = complex(-0.5, -0.5)\n    print(convert(au))\n    av = complex(0.5, -0.5)\n    print(convert(av))\n    aw = complex(-0.5, 0.5)\n    print(convert(aw))\n    ax = complex(-0.5, -0.5)\n    print(convert(ax))\n    ay = complex(0.5, -0.5)\n    print(convert(ay))\n    az = complex(0.5, 0.5)\n    print(convert(az))\n    aa = complex(0.5, -0.5)\n    print(convert(aa))\n    ab = complex(-0.5, 0.5)\n    print(convert(ab))\n    ac = complex(0.5, -0.5)\n    print(convert(ac))\n    ad = complex(-0.5, -0.5)"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n=len(numbers)\n    a=[]\n    for i in range(0,n):\n        x=complex(numbers[i].real,numbers[i].imag)\n        z=complex(numbers[i].real,-numbers[i].imag)\n        z1=x*z\n        z2=x*z1\n        if z1.real==0 and z1.imag==0:\n            a.append(z)\n        elif z2.real==0 and z2.imag==0:\n            a.append(z)\n        else:\n            b=(((z1.real**2)+(z1.imag**2))**0.5)+((((z2.real**2)+(z2.imag**2))**0.5))\n            c=((((z1.real**2)+(z1.imag**2))**0.5)+(((z2.real**2)+(z2.imag**2))**0.5))\n            d=((((z1.real**2)+(z1.imag**2))**0.5)-(((z2.real**2)+(z2.imag**2))**0.5))\n            e=((((z1.real**2)+(z1.imag**2))**0.5)-(((z2.real**2)+(z2.imag**2))**0.5))\n            if b==0:\n                a.append(complex(c,e))\n            elif d==0:\n                a.append(complex(e,c))\n            elif e==0:\n                a.append(complex(c,b))\n            elif c==0:\n                a.append(complex(b,e))\n            else:\n                f=cmath.phase(z)\n                g=e*(1j*(cmath.pi)-f)\n                h=c*(1j*(cmath.pi)-f)\n                i=b*(1j*(cmath.pi)-f)\n                j=e*(1j*(cmath.pi)-f)\n                k=h+g\n                l=i+j\n                m=l*k\n                n=m/2\n                o=cmath.polar(z)\n                a.append(complex(n[0],n[1]))\n    return a\nprint(convert([1+0j,0+0j,0+0j,1+0j]))\nprint(convert([0+0j,0+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,0+0j]))\nprint(convert([0+0j,0+0j,0+0j,1+0j]))\nprint(convert([0+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,1+0j,0+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([0+0j,1+0j,0+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,1+0j]))\nprint(convert([1+0j,0+0j,1+0j,0+0j]))"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = numbers[0]\n    y = numbers[1]\n    r = sqrt(x**2 + y**2)\n    \n    radians = cmath.atan2(y,x)\n    degrees = radians * 180/cmath.pi\n    \n    return(r,degrees)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for item in numbers:\n        if item.imag == 0:\n            item = item.real\n        else:\n            item = str(item) + \"i\"\n        result.append(item)\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count = count + 1\n    return count\n    \n    \ndef count_boolean(list1):\n    '''\n    Write a python function that returns the number of boolean elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is bool:\n            count = count + 1\n    return count\n    \n    \ndef count_complex_numbers(list1):\n    '''\n    Write a python function that returns the number of complex numbers in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is complex:\n            count = count + 1\n    return count\n    \n    \ndef count_strings(list1):\n    '''\n    Write a python function that returns the number of strings in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is str:\n            count = count + 1\n    return count\n    \n    \ndef count_characters_set(list1):\n    '''\n    Write a python function that returns the number of characters present in a given set of strings.\n    '''\n    count = 0\n    for i in list1:\n        for j in i:\n            if j == 'A' or j == 'a':\n                count = count + 1\n            elif j == 'B' or j == 'b':\n                count = count + 1\n            elif j == 'C' or j == 'c':\n                count = count + 1\n            elif j == 'D' or j == 'd':\n                count = count + 1\n            elif j == 'E' or j == 'e':\n                count = count + 1\n            elif j == 'F' or j == 'f':\n                count = count + 1\n            elif j == 'G' or j == 'g':\n                count = count + 1\n            elif j == 'H' or j == 'h':\n                count = count + 1\n            elif j == 'I' or j == 'i':\n                count = count + 1\n            elif j == 'J' or j == 'j':\n                count = count + 1\n            elif j == 'K' or j == 'k':\n                count = count + 1\n            elif j == 'L' or j == 'l':\n                count = count + 1\n            elif j == 'M' or j =='m':\n                count = count + 1\n            elif j == 'N' or j == 'n':\n                count = count + 1\n            elif j == 'O' or j == 'o':\n                count = count + 1\n            elif j == 'P' or j == 'p':\n                count = count + 1\n            elif j == 'Q' or j == 'q':\n                count = count + 1\n            elif j == 'R' or j == 'r':\n                count = count + 1\n            elif j == 'S' or j =='s':\n                count = count + 1\n            elif j == 'T' or j == 't':\n                count = count + 1\n            elif j == 'U' or j == 'u':\n                count = count + 1\n            elif j == 'V' or j == 'v':\n                count = count + 1\n            elif j == 'W' or j == 'w':\n                count = count + 1\n            elif j == 'X' or j == 'x':\n                count = count + 1\n            elif j == 'Y' or j == 'y':\n                count = count + 1\n            elif j == 'Z' or j == 'z':\n                count = count + 1\n            else:\n                pass\n    return count\n    \n    \ndef count_characters_list(list1):\n    '''\n    Write a python function that returns the number of characters in a given list.\n    '''\n    count = 0\n    for i in list1:\n        for j in i:\n            count = count + 1\n    return count\n    \n    \ndef count_characters_set_value(list1):\n    '''\n    Write a python function that returns the number of characters in a given set of strings.\n    '''\n    count = 0\n    for i in list1:\n        for j in i:\n            if j == 'A' or j == 'a':\n                count = count + 1\n            elif j == 'B' or j == 'b':\n                count = count + 1\n            elif j == 'C' or j == 'c':\n                count = count + 1\n            elif j == 'D' or j == 'd':\n                count = count + 1\n            elif j == 'E' or j == 'e':\n                count = count + 1\n            elif j == 'F' or j == 'f':\n                count = count + 1\n            elif j == 'G' or j == 'g':\n                count = count + 1\n            elif j == 'H' or j == 'h':\n                count = count + 1\n            elif j == 'I' or j == 'i':\n                count = count + 1\n            elif j == 'J' or j == 'j':\n                count = count + 1\n            elif j == 'K' or j == 'k':\n                count = count + 1\n            elif j == 'L' or j == 'l':\n                count = count + 1\n            elif j == 'M' or j =='m':\n                count = count + 1\n            elif j == 'N' or j == 'n':\n                count = count + 1\n            elif j == 'O' or j == 'o':\n                count = count + 1\n            elif j == 'P' or j == 'p':\n                count = count + 1\n            elif j == 'Q' or j == 'q':\n                count = count + 1\n            elif j == 'R' or j == 'r':\n                count = count + 1\n            elif j == 'S' or j =='s':\n                count = count + 1\n            elif j == 'T' or j == 't':\n                count = count + 1\n            elif j == 'U' or j == 'u':\n                count = count + 1\n            elif j == 'V' or j == 'v':\n                count = count + 1\n            elif j == 'W' or j == 'w':\n                count = count + 1\n            elif j == 'X' or j == 'x':\n                count = count + 1\n            elif j == 'Y' or j == 'y':\n                count = count + 1\n            elif j == 'Z' or j == 'z':\n                count = count + 1\n            else:\n                pass\n    return count\n    \n    \ndef count_strings_in_set(list1):\n    '''\n    Write a python function that returns the number of strings in a given set of strings.\n    '''\n    count = 0\n    for i in list1:\n        count = count + 1\n    return count\n    \n    \ndef count_strings_list(list1):\n    '''\n    Write a python function that returns the number of strings in a given list.\n    '''\n    count = 0\n    for i in list1:\n        count = count + 1\n    return count\n    \n    \ndef count_strings_set_value(list1):\n    '''\n    Write a python function that returns the number of strings in a given set of strings.\n    '''\n    count = 0\n    for i in list1:\n        count = count + 1\n    return count\n    \n    \ndef count_strings_set_lists(list1):\n    '''\n    Write a python function that returns the number of strings in a given set of lists.\n    '''\n    count = 0\n    for i in list1:\n        count = count + len(i)\n    return count\n    \n    \ndef count_strings_set_sets(list1):\n    '''\n    Write a python function that returns the number of strings in a given set of sets.\n    '''\n    count = 0\n    for i in list1:\n        count = count + len(set(i))\n    return count\n    \n    \ndef count_strings_list_lists(list1):\n    '''\n    Write a python function that returns the number of strings in a given list of lists.\n    '''\n    count = "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: type(x) == int, list1)))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_of_integers = 0\n    for val in list1:\n        if val.is_integer():\n            num_of_integers += 1\n    return num_of_integers\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1_int = []\n    for i in list1:\n        if(isinstance(i, int)):\n            list1_int.append(i)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = list(l)\n    res = []\n    for i in range(1, len(lst)+1):\n        res += list(combinations(lst, i))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l.sort()\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(''.join, combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(lambda x: tuple(x), combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n > len(l):\n        return []\n    if n == 1:\n        return l[:]\n    return [i + (j,) for i in combinations_colors(l, n-1) for j in l]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print(l)\n    combs = list(combinations_with_replacement(l, n))\n    print(combs)\n    return combs\n    \ndef combinations_colors_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    return combs\n    \n    \ndef combinations_colors_3(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(1,n+1):\n        for comb in combinations_with_replacement(l, i):\n            combs.append(comb)\n    return combs\n    \n    \n    \ndef combinations_colors_4(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_5(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_6(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_7(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_8(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_9(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_10(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_11(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_12(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_13(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_14(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_15(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_16(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    combs = []\n    for i in range(1,n+1):\n        combs.append(list(combinations_with_replacement(l, i)))\n    return combs\n    \n    \n    \ndef combinations_colors_17(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combos = []\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l)+1):\n            color_combos.append(tuple(l[i:j]))\n    return(color_combos)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return_list = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if len(l) == 2:\n                return_list.append((l[i], l[j]))\n            else:\n                return_list.append((l[i], l[j], l[n]))\n    return return_list\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n    '''\n    return [i for i in combinations(l, n)]\n    '''\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    nums = [i for i in range(2, n + 1)]\n    primes = []\n    for i in range(2, n + 1):\n        if nums[i - 2] == 0:\n            continue\n        if i == 2:\n            primes.append(i)\n        for j in range(i * 2, n + 1, i):\n            nums[j - 2] = 0\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = [2]\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    if n > 2:\n        primes.append(n)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n**0.5)+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(n):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i!= 1 and i!= 0:\n            for j in range(1,i+1):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        k = i\n        while k < n:\n            k += i\n            if k % 2 == 0:\n                k += i\n            else:\n                k += i\n        if k == n:\n            count += 1\n    return count\n    '''\n    def count_Primes_nums(n):\n        count = 0\n        for i in range(2,n):\n            k = i\n            while k < n:\n                k += i\n                if k % 2 == 0:\n                    k += i\n                else:\n                    k += i\n            if k == n:\n                count += 1\n        return count\n    '''\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    for i in range(3,n+1,2):\n        primes.append(i)\n    \n    count = 0\n    for i in range(3, n+1, 2):\n        if i in primes:\n            count += 1\n            continue\n        else:\n            for j in range(3, i, 2):\n                if i%j == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert isinstance(n, int) and n >= 0, \"Please provide a positive integer\"\n    \n    if n <= 1:\n        return 0\n    \n    i = 2\n    primes = []\n    while i*i < n:\n        if n % i == 0:\n            while n % i == 0:\n                primes.append(i)\n                n = int(n / i)\n        i += 1\n    if n > 1:\n        primes.append(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        if num <= 1:\n            return 0\n        if num <= 3:\n            return 1\n        if num % 2 == 0 or num % 3 == 0:\n            return 0\n        i = 5\n        while i ** 2 <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return 0\n            i += 6\n        return 1\n    sum = 0\n    for i in range(2, n):\n        if is_prime(i):\n            sum += 1\n    return sum\n    \ndef count_Primes_nums2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        if num <= 1:\n            return 0\n        if num <= 3:\n            return 1\n        if num % 2 == 0 or num % 3 == 0:\n            return 0\n        i = 5\n        while i ** 2 <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return 0\n            i += 6\n        return 1\n    return sum(is_prime(i) for i in range(2, n))\n    \ndef count_Primes_nums3(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        '''\n        Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        if num <= 1:\n            return 0\n        if num <= 3:\n            return 1\n        if num % 2 == 0 or num % 3 == 0:\n            return 0\n        i = 5\n        while i ** 2 <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return 0\n            i += 6\n        return 1\n    return sum(is_prime(i) for i in range(2, n))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\nprint(swap_numbers(10,20))\nprint(swap_numbers(20,10))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b,a)\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \nprint(swap_numbers(5,6))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\nprint(swap_numbers(1,2))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(a,b)\n    # print(a,b)\n    # print(a,b)\n    # print(a,b)\n    # print(a,b)\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2,reverse=True))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        print(\"max: \" + str(test_tup1[0]) + \" \" + str(test_tup2[0]))\n        return test_tup1\n    else:\n        print(\"max: \" + str(test_tup1[0]) + \" \" + str(test_tup2[0]))\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    m1 = test_tup1[0]\n    m2 = test_tup2[0]\n    if m1 < m2:\n        return (m1, m2)\n    else:\n        return (m2, m1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0]>test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup2[0]),\n        max(test_tup1[1], test_tup2[1]))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup1 = max(test_tup1) + min(test_tup2)\n    new_tup2 = max(test_tup1) - min(test_tup2)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = tuple(map(int,test_tup1))\n    test_tup2 = tuple(map(int,test_tup2))\n    res = max(test_tup1,test_tup2)\n    return res\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = test_tup1[0]\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max:\n            max = test_tup1[i]\n    if max > test_tup2[0]:\n        return max\n    else:\n        return test_tup2[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    \n    primelist = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    k = 0\n    prime = 2\n    while prime <= n:\n        \n        if prime in primelist:\n            primelist.remove(prime)\n        \n        prime = primelist[k]\n        k = k + 1\n    \n    return prime\n    \ndef newman_counting_sort(l):\n    '''\n    Write a function that takes a list and returns a new list that counts the frequency of each element in the original list, and then returns that list.\n    '''\n    \n    countlist = []\n    \n    for i in range(0,len(l)):\n        countlist.append(0)\n    \n    for j in range(0, len(l)):\n        countlist[l[j]-1] = countlist[l[j]-1] + 1\n    \n    for k in range(0,len(l)):\n        l[k] = countlist[k]\n    \n    return l\n    \ndef factorial(n):\n    '''\n    Write a function that takes in an integer and returns the factorial of that integer.\n    '''\n    \n    if n <= 1:\n        return 1\n    \n    else:\n        return n * factorial(n-1)\n    \ndef is_prime(num):\n    '''\n    Write a function that takes an integer as input and returns whether the integer is prime or not.\n    '''\n    \n    if num == 2 or num == 3 or num == 5:\n        return True\n    \n    elif num > 2 and num % 2 == 0 or num > 3 and num % 3 == 0 or num > 5 and num % 5 == 0:\n        return False\n    \n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_numb(numb):\n    '''\n    Write a function that takes an integer as input and returns whether the integer is prime or not.\n    '''\n    \n    if numb == 1 or numb == 2 or numb == 3 or numb == 5:\n        return True\n    \n    elif numb > 2 and numb % 2 == 0 or numb > 3 and numb % 3 == 0 or numb > 5 and numb % 5 == 0:\n        return False\n    \n    else:\n        for i in range(3, int(numb**0.5)+1, 2):\n            if numb % i == 0:\n                return False\n        return True\n    \ndef prime_numb_range(start, end):\n    '''\n    Write a function that takes in three integers as input and returns a list of all the prime numbers between the start and end integers.\n    '''\n    \n    prime_list = []\n    \n    for i in range(start, end+1):\n        if is_prime_numb(i):\n            prime_list.append(i)\n    \n    return prime_list\n    \ndef prime_numb_list(start, end):\n    '''\n    Write a function that takes in three integers as input and returns a list of all the prime numbers between the start and end integers.\n    '''\n    \n    prime_list = []\n    \n    for i in range(start, end+1):\n        if is_prime(i):\n            prime_list.append(i)\n    \n    return prime_list\n    \ndef comb(n, k):\n    '''\n    Write a function that takes in two integers as input and returns the number of combinations possible to generate from a list of length n with k elements.\n    '''\n    \n    return factorial(n)/(factorial(k)*factorial(n-k))\n    \ndef permutations(n,k):\n    '''\n    Write a function that takes in two integers as input and returns the number of permutations possible to generate from a list of length n with k elements.\n    '''\n    \n    return factorial(n)/(factorial(n-k))\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer as input and returns the nth fibonacci number.\n    '''\n    \n    if n <= 1:\n        return n\n    \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacci_numb_list(start, end):\n    '''\n    Write a function that takes in three integers as input and returns a list of all the fibonacci numbers between the start and end integers.\n    '''\n    \n    fib_list = []\n    \n    if start < 0:\n        return []\n    \n    elif start == 0:\n        fib_list.append(0)\n    \n    elif start == 1:\n        fib_list.append(0)\n        fib_list.append(1)\n        \n    else:\n        fib_list.append(0)\n        fib_list.append(1)\n        \n        for i in range(2, start):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        \n    fib_list = fib_list[start:end]\n    \n    return fib_list\n    \ndef power_list(n):\n    '''\n    Write a function that takes in an integer as input and returns a list of all the powers of 2 that are less than or equal to the input integer.\n    '''\n    \n    power_list = []\n    \n    for i in range(0,n+1):\n        power_list.append(2**i)\n    \n    return power_list\n    \ndef power_list_range(start, end):\n    '''\n    Write a function that takes in two integers as input and returns a list of all the powers of 2 that are less than or equal to the input integers.\n    '''\n    \n    power_list = []\n    \n    for i in range(start, end+1):\n        power_list.append(2**i)\n    \n    return power_list\n    \ndef zero_to_n(n):\n    '''\n    Write a function that takes in an integer as input and returns a list of all the numbers between 0 and the input integer.\n    '''\n    \n    if n <= 0:\n        return []\n    \n    else:\n        return range(0,n+1)\n    \ndef zero_to_n_list(n):\n    '''\n    Write a function that takes in an integer as input and returns a list of all the numbers between 0 and the input integer.\n    '''\n    \n    if n <= 0:\n        return []\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    from numpy import array\n    from matplotlib import pyplot as plt\n    def isprime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5+1)):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # n = int(n)\n    prime = []\n    while (len(prime)!= n):\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            prime.append(n)\n            n = n * 3 + 1\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    \n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,259f,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4291,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4427,4429,4433,4439,4441,4451,4457,4463,4481,4483,4493,4499,4513,4517,4519,4523,4547,4549,4551,4567,4583,4591,4593,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5287,5291,5297,5303"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def divisors(n):\n        i = 2\n        l = 0\n        while i <= n/2:\n            if n%i == 0:\n                l += 1\n            i += 1\n        return l\n    \n    div = divisors(n)\n    if div!= 2:\n        return False\n    else:\n        for i in range(1, n):\n            if i == 1 or i == n-1:\n                continue\n            if (n % i == 0):\n                return False\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert 0 < n, 'n is not a positive integer.'\n    \n    if n == 1:\n        return 2\n    \n    number = newman_prime(n - 1)\n    \n    number = n * number + 1\n    \n    return number\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_num = 0\n    a = 1\n    while prime_num < n:\n        prime_num = 0\n        i = 1\n        while i < a:\n            if a % i == 0:\n                prime_num += 1\n            i += 1\n        if prime_num == 0:\n            prime_num += 1\n            a += 1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    \n    primes = [2,3,5,7]\n    \n    for i in range(6, n+1):\n        j = 0\n        \n        while j < len(primes):\n            if (i - primes[j]) % primes[j] == 0:\n                break\n            else:\n                j += 1\n        \n        if j == len(primes):\n            primes.append(i)\n    \n    print(primes)\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    while n > 1:\n        b = (a + 1) // 2\n        if b > a:\n            a = b\n        if a!= b:\n            while True:\n                for i in range(1, n):\n                    if a + i > n:\n                        break\n                    elif n % (a + i) == 0:\n                        n = n // (a + i)\n                        break\n                else:\n                    return a\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((a, b) for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #return \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #Result_list = []\n    #for i in range(len(test_tup1)):\n    #    Result_list.append(test_tup1[i]/test_tup2[i])\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1], test_tup1[2] / test_tup2[2])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple\n    assert type(test_tup2) == tuple\n    assert type(test_tup1[0]) == int\n    assert type(test_tup1[1]) == int\n    assert type(test_tup2[0]) == int\n    assert type(test_tup2[1]) == int\n    return (test_tup1[0] / test_tup1[1], test_tup2[0] / test_tup2[1])\n    \ndef get_product_from_product_element(product_element):\n    '''\n    Write a function that takes in a tuple of the form (5, 6) and returns the product of the elements in the tuple\n    '''\n    assert type(product_element) == tuple\n    assert type(product_element[0]) == int\n    assert type(product_element[1]) == int\n    return product_element[0] * product_element[1]\n    \ndef cartesian_product(cartesian_dict1, cartesian_dict2):\n    '''\n    Write a function that takes in two dictionaries and returns a dictionary that represents the cartesian product of the dictionaries. The keys of the cartesian dictionary should be the unique values of the keys in the cartesian dictionaries.\n    '''\n    assert type(cartesian_dict1) == dict\n    assert type(cartesian_dict2) == dict\n    cartesian_dict_keys = set().union(cartesian_dict1.keys(), cartesian_dict2.keys())\n    return dict((key, cartesian_dict1[key] * cartesian_dict2[key]) for key in cartesian_dict_keys)\n    \ndef solve_equations(a, b, c):\n    '''\n    Write a function that takes in 3 equations of the form ax + by = c and solves the equations.\n    '''\n    assert type(a) == int\n    assert type(b) == int\n    assert type(c) == int\n    return (c - b) / a\n    \ndef find_number_of_digit(number, digit):\n    '''\n    Write a function that takes in a number and a digit and returns the number of times the digit appears in the number.\n    '''\n    assert type(number) == int\n    assert type(digit) == int\n    return str(number).count(str(digit))\n    \ndef plus_or_minus(num):\n    '''\n    Write a function that takes in a number and returns + or - depending on whether the number is even or odd.\n    '''\n    assert type(num) == int\n    return \"+\" if num % 2 == 0 else \"-\"\n    \ndef simple_pow(base, exponent):\n    '''\n    Write a function that takes in a base and exponent and returns the result of the base raised to the exponent.\n    '''\n    assert type(base) == int\n    assert type(exponent) == int\n    return base ** exponent\n    \ndef find_greatest(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    assert type(lst) == list\n    return max(lst)\n    \ndef find_smallest(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    assert type(lst) == list\n    return min(lst)\n    \ndef find_largest_number(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    assert type(lst) == list\n    return max(lst)\n    \ndef find_smallest_number(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    assert type(lst) == list\n    return min(lst)\n    \ndef find_multiple_of_num(lst, num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns the first index of the number in the list that is a multiple of the number given. If there is no index that is a multiple of the number given, return -1.\n    '''\n    assert type(lst) == list\n    assert type(num) == int\n    return lst.index(num) if lst.count(num) % 2 == 0 else -1\n    \ndef is_in_array(lst, element):\n    '''\n    Write a function that takes in a list of numbers and an element and returns true if the element is in the list or false if it is not.\n    '''\n    assert type(lst) == list\n    assert type(element) == int\n    return element in lst\n    \ndef is_in_range(lst, smallest, largest):\n    '''\n    Write a function that takes in a list of numbers and two integers and returns true if the element is in the list and the element is greater than the smallest element and less than the largest element.\n    '''\n    assert type(lst) == list\n    assert type(smallest) == int\n    assert type(largest) == int\n    return smallest <= lst[0] < lst[-1] and lst[0] <= lst[-1] < largest\n    \ndef is_in_range_without_conditional(lst, smallest, largest):\n    '''\n    Write a function that takes in a list of numbers and two integers and returns true if the element is in the list and the element is greater than the smallest element and less than the largest element.\n    '''\n    assert type(lst) == list\n    assert type(smallest) == int\n    assert type(largest) == int\n    return lst[0] <= smallest <= lst[-1] <= largest\n    \ndef string_rotation(string, rotation):\n    '''\n    Write a function that takes in a string and a rotation amount and returns true if the string is a rotation of itself of the given rotation amount.\n    '''\n    assert type(string) == str\n    assert type(rotation) == int\n    \n    # Rotate the string to the left by rotation amount and check if the string is equal to the original string.\n    rotated_string = string[rotation:] + string[:rotation]\n    return rotated_string == string\n    \ndef flatten_list(lst):\n    '''\n    Write a function that takes in a list of lists and returns a single list that is the flattened list.\n    '''\n    assert type(lst) == list\n    \n    flattened_list = []\n    for l in lst:\n        flattened_list.extend(l)\n    return flattened_list\n    \ndef string_anagram(str1, str2):\n    '''\n    Write a function that takes in two strings and returns true if they are anagrams of each other and false if they aren't.\n    '''\n    assert type(str1) == str\n    assert type(str2) == str\n    return sorted(str1) == sorted(str2)\n    \ndef create_grid(rows, cols):\n    '''\n    Write a function that takes in rows and columns and returns a 2D list of zeros.\n    '''\n    assert type(rows) == int\n    assert type(cols) == int\n    return [[0] * cols for row in range(rows)]\n    \ndef add_up_diagonals(grid):\n    '''\n    Write a function that takes in a 2D list of zeros and returns the sum of the diagonals.\n    '''\n    assert type(grid) == list\n    assert type(grid[0]) == list\n    assert len(grid) > 0\n    assert len(grid[0]) > 0\n    \n    total = 0\n    for i in range(len(grid)):\n        total += grid[i][i]\n        total += grid[i][len(grid) - i - 1]\n    return total\n    \ndef get_max_sum(grid):\n    '''\n    Write a function that takes in a 2D list of zeros and returns the largest sum of any path through the grid.\n    '''\n    assert type(grid) == list\n    assert type(grid[0]) == list\n    assert len(grid) > 0\n    assert len(grid[0]) > 0\n    \n    max_su"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    out_tup = []\n    for i in range(0, len(test_tup1)):\n        out_tup.append(test_tup1[i] / test_tup2[i])\n    return out_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return(0,1)\n    elif test_tup1[0]!= test_tup2[0]:\n        return(\"Invalid Test\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i]/test_tup2[i]\n        return(test_tup1,test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i], )\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first = list1[:L]\n    second = list1[L:]\n    return first, second\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if len(list1) < L:\n        return ([], list1)\n    else:\n        return ([list1[0:L], list1[L:]])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return split_two_parts(list1[len(list1)//2:], L) + split_two_parts(list1[:len(list1)//2], L)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = []\n    second = []\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    if L > len(list1):\n        return list1\n    else:\n        for i in range(0, L):\n            list2.append(list1[i])\n        for i in range(L, len(list1)):\n            list2.append(list1[i])\n        return list2, list1[L:len(list1)]\n    \ndef reverse_sublist(input_list, start, finish):\n    '''\n    Write a function that takes in a list and two integers start and finish and reverses the sublist of input_list from start to finish.\n    '''\n    input_list[start:finish+1] = input_list[start:finish+1][::-1]\n    \n    return input_list\n    \ndef insert_start(input_list, new_element):\n    '''\n    Write a function that takes in a list and a new element and inserts the new element as the list's first element.\n    '''\n    input_list.insert(0, new_element)\n    \n    return input_list\n    \ndef insert_end(input_list, new_element):\n    '''\n    Write a function that takes in a list and a new element and inserts the new element as the list's last element.\n    '''\n    input_list.append(new_element)\n    \n    return input_list\n    \ndef remove_from_list(input_list, val):\n    '''\n    Write a function that takes in a list and a value and removes all instances of that value in the list. The function should return a new list\n    that is the result of the removal.\n    '''\n    input_list = list(filter(lambda x: x!= val, input_list))\n    return input_list\n    \ndef is_sorted(input_list):\n    '''\n    Write a function that takes in a list and returns a boolean representing whether the list is sorted in ascending order.\n    '''\n    for i in range(len(input_list)-1):\n        if input_list[i] > input_list[i+1]:\n            return False\n    return True\n    \ndef two_sum(input_list, target_sum):\n    '''\n    Write a function that takes in a list of integers and the sum that they must equal. If there are two numbers in the list that sum to the target sum,\n    the function should return a tuple of those numbers.\n    '''\n    for i in range(len(input_list)):\n        if target_sum - input_list[i] in input_list:\n            return input_list[i], target_sum - input_list[i]\n    return None\n    \ndef binary_search(input_list, target):\n    '''\n    Write a function that takes a sorted list and a target value and returns the index of the target value. If the target value is not\n    in the list, return -1.\n    '''\n    if len(input_list) == 0:\n        return -1\n    else:\n        left = 0\n        right = len(input_list)-1\n        while left <= right:\n            mid = (left + right) // 2\n            if input_list[mid] == target:\n                return mid\n            elif input_list[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n    \ndef zero_matrix(input_matrix):\n    '''\n    Write a function that takes in a matrix and returns a matrix consisting of all the 0 values in the matrix.\n    '''\n    zero_matrix = []\n    for i in range(len(input_matrix)):\n        zero_matrix.append([0 for j in range(len(input_matrix[0]))])\n    \n    return zero_matrix\n    \ndef get_max_from_matrix(input_matrix):\n    '''\n    Write a function that takes in a matrix and returns the maximum element in the matrix.\n    '''\n    max_value = 0\n    \n    for i in range(len(input_matrix)):\n        for j in range(len(input_matrix[i])):\n            if input_matrix[i][j] > max_value:\n                max_value = input_matrix[i][j]\n    return max_value\n    \ndef transpose_matrix(input_matrix):\n    '''\n    Write a function that takes in a matrix and returns a new matrix whose numbers are the transposed version of the original matrix.\n    '''\n    transpose = []\n    for j in range(len(input_matrix[0])):\n        transpose.append([0 for i in range(len(input_matrix))])\n        \n    for i in range(len(input_matrix)):\n        for j in range(len(input_matrix[i])):\n            transpose[j][i] = input_matrix[i][j]\n    return transpose\n    \ndef reverse_numbers(input_list):\n    '''\n    Write a function that takes in a list and returns the same list with each element reversed. For example, if the input list is [1,2,3,4] it\n    should return [4,3,2,1].\n    '''\n    input_list.reverse()\n    return input_list\n    \ndef plus_one(input_list):\n    '''\n    Write a function that takes in a list and returns the same list, but with the first element of the list increased by one.\n    '''\n    if input_list[0] == 9:\n        input_list = [1] + input_list\n    else:\n        input_list[0] += 1\n    \n    return input_list\n    \ndef get_smallest_in_list(input_list):\n    '''\n    Write a function that takes in a list and returns the smallest number in the list. If there is a tie, return the number whose index in the list is\n    smallest. If the list is empty, return None.\n    '''\n    if len(input_list) == 0:\n        return None\n    else:\n        return min(input_list)\n        \ndef remove_smallest_element(input_list):\n    '''\n    Write a function that takes in a list and removes the smallest element in the list. If the list is empty, it should return None.\n    '''\n    if len(input_list) == 0:\n        return None\n    else:\n        input_list.remove(min(input_list))\n        \n    return input_list\n    \ndef is_palindrome(input_list):\n    '''\n    Write a function that takes in a list and returns True if the list is a palindrome, and False otherwise. A palindrome is a list that reads\n    the same forwards and backwards.\n    '''\n    input_list = input_list.copy()\n    input_list.reverse()\n    if input_list == input_list[::-1]:\n        return True\n    else:\n        return False\n        \ndef swap_adjacent_values(input_list):\n    '''\n    Write a function that takes in a list and swaps the values of the adjacent elements in the list.\n    '''\n    for i in range(len(input_list)):\n        if i % 2 == 0:\n            input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n    \n    return input_list\n    \ndef get_smallest_and_second_smallest(input_list):\n    '''\n    Write a function that takes in a list and returns a tuple of the smallest and second smallest numbers in the list. If there are\n    multiple smallest numbers, return a tuple of the smallest and the second smallest number.\n    '''\n    smallest_num = None\n    second_smallest_num = None\n    for i in range(len(input_list)):\n        if smallest_num == None or input_list[i] < smallest_num:\n            smallest_num = input_list[i]\n        if second_smallest_num == None or input_list[i] < second_smallest_num:\n            second_smallest_num = input_list[i]\n    \n    return smallest_num, second_smallest_num\n    \ndef remove_duplicates(input_list)"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert type(list1) == list\n    assert type(L) == int and L > 0\n    assert len(list1) > L\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if not isinstance(list1, list) or not isinstance(L, int):\n        raise ValueError(\"Invalid inputs\")\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # O(n)\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n    \n    \n    \ndef int_to_bool(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains only the elements that are even.\n    '''\n    # O(n)\n    return_list = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            return_list.append(list1[i])\n    return return_list\n    \n    \n    \ndef change_case(list1):\n    '''\n    Write a function that takes in a list and returns a new list that is the same list but with each character's case switched.\n    '''\n    # O(n)\n    return_list = []\n    for i in range(len(list1)):\n        return_list.append(list1[i].swapcase())\n    return return_list\n    \n    \n    \ndef sum_numbers(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return_list = []\n    for i in range(len(list1)):\n        return_list.append(list1[i])\n    return sum(return_list)\n    \n    \n    \ndef sum_numbers_new(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list1)\n    \n    \n    \ndef sum_numbers_new_2(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return reduce(lambda x, y: x + y, list1)\n    \n    \n    \ndef sum_numbers_new_3(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return list(reduce(lambda x, y: x + y, list1))\n    \n    \n    \ndef sum_numbers_new_4(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list1)\n    \n    \n    \ndef sum_numbers_new_5(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return reduce(lambda x, y: x + y, list1)\n    \n    \n    \ndef sum_numbers_new_6(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_7(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_8(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_9(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_10(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list1)\n    \n    \n    \ndef sum_numbers_new_11(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_12(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list(map(int, list1)))\n    \n    \n    \ndef sum_numbers_new_13(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list(map(int, list1)))\n    \n    \n    \ndef sum_numbers_new_14(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(int(i) for i in list1)\n    \n    \n    \ndef sum_numbers_new_15(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list(map(int, list1)))\n    \n    \n    \ndef sum_numbers_new_16(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_17(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list(map(int, list1)))\n    \n    \n    \ndef sum_numbers_new_18(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_19(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(list(map(int, list1)))\n    \n    \n    \ndef sum_numbers_new_20(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(int(i) for i in list1)\n    \n    \n    \ndef sum_numbers_new_21(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # O(n)\n    return sum(map(int, list1))\n    \n    \n    \ndef sum_numbers_new_22(list1):\n    '''\n    Write a function that takes in a list of integers, adds all of the numbers in the list, and returns the sum.\n    '''\n    # "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid_point = L\n    first = list1[:mid_point]\n    second = list1[mid_point:]\n    return first, second\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(10.0*h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7 \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return -1\n    else:\n        return h_age *.01\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age/7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age) * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError\n    if h_age == 0:\n        return 0\n    elif h_age > 0:\n        return (2000/10)*(h_age - 2)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7 \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_dog = 6 * h_age\n    return age_dog\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return ((h_age * 7) + 5)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S:\n        return []\n    \n    return_list = []\n    for i in range(0, len(S), step):\n        return_list.append(S[i:i+step])\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    tmp = []\n    i = 0\n    while i < len(S):\n        tmp.append(S[i])\n        i = i + step\n        if i >= len(S):\n            result.append(tmp)\n            break\n        tmp = []\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lists = []\n    x = 0\n    while x < len(S):\n        if x % step == 0:\n            lists.append(S[:x])\n            S = S[x:]\n        x += 1\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n    \ndef print_n_times(s, n):\n    '''\n    Write a function that takes in a string and a non-negative integer n and prints the string n times, instead returning a list of strings.\n    '''\n    return n * [s]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output_list = []\n    if step < 1:\n        raise ValueError(\"Step must be greater than 0\")\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    s = []\n    for i in range(len(S)):\n        if i % step == 0:\n            s.append(S[:step])\n            S = S[step:]\n    s.append(S)\n    return s\n    \ndef list_split_to_lists(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of lists of the resulting lists.\n    '''\n    s = []\n    new = []\n    for i in range(len(S)):\n        if i % step == 0:\n            new.append(S[:step])\n            s.append(new)\n            new = []\n            S = S[step:]\n    s.append(new)\n    return s\n    \n    \n    \n    \ndef remove_duplicates(L):\n    '''\n    Write a function that takes in a list and returns a new list that has all the same elements of the original list in the same position.\n    '''\n    new = []\n    for i in range(len(L)):\n        if L[i] not in new:\n            new.append(L[i])\n    return new\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #new_list = []\n    #new_list.append(S[0])\n    #for i in range(1, len(S)):\n    #    if i % step == 0:\n    #        new_list.append(S[i])\n    #return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return ([S[i::step] for i in range(step)])\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralsurface_cube(l):\n        a=6*(l**2)\n        b=2*(l**2)\n        c=2*(l**2)\n        d=2*(l**2)\n        return a+b+c+d\n    return lateralsurface_cube(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return (l ** 2) + (l * (l - 1) / 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A = l*6\n    B = 2*(l**2)\n    return A + B\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2 * l * (l + l)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1,2):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    import math\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + math.pow(i, 2)\n        i = i + 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x=n*(n+1)*(2*n+1)/6\n    return int(x)\nprint(\"The sum of the squares of the first n odd natural numbers:\")\nprint(square_Sum(10))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    j = 1\n    k = 1\n    if n <= 0:\n        print(\"Enter a valid positive integer.\")\n    else:\n        while j <= n:\n            i = i + j\n            j += 2\n            k += 1\n        print(\"Sum of squares is :\", i)\n        \ndef sieveOfEratosthenes(n):\n    '''\n    Write a python function that takes in an integer n and returns all prime numbers that are smaller than n.\n    '''\n    prime = []\n    for i in range(2, n+1):\n        if (i < 10):\n            prime.append(i)\n        else:\n            flag = 0\n            for j in range(2, i):\n                if (i % j == 0):\n                    flag = 1\n                    break\n            if (flag == 0):\n                prime.append(i)\n                \n    return prime\n        \ndef isPrime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is prime and False otherwise.\n    '''\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n        \ndef findNthDigit(n):\n    '''\n    Write a python function that takes in an integer n and returns the nth digit of the integer.\n    '''\n    n = n-1\n    if n < 0:\n        print(\"Enter a valid positive integer.\")\n    else:\n        num = 0\n        i = 1\n        while i <= n:\n            num = num + (10 ** i) * (n // i)\n            i += 1\n        num = num + (10 ** (i-1)) * (n % i)\n        return num % 10\n        \ndef isPalindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    l = len(s)\n    if (l <= 1):\n        return True\n    else:\n        i = 0\n        j = l - 1\n        while i <= j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef isPalindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    l = len(s)\n    if (l <= 1):\n        return True\n    else:\n        i = 0\n        j = l - 1\n        while i <= j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef isPalindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    l = len(s)\n    if (l <= 1):\n        return True\n    else:\n        i = 0\n        j = l - 1\n        while i <= j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef checkPalindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    l = len(s)\n    if (l <= 1):\n        return True\n    else:\n        i = 0\n        j = l - 1\n        while i <= j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef countVowels(s):\n    '''\n    Write a python function that takes in a string s and returns the number of vowels in the given string.\n    '''\n    l = len(s)\n    if (l <= 0):\n        return -1\n    else:\n        i = 0\n        while i < l:\n            if (s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'):\n                i += 1\n            else:\n                i = l\n        return i\n        \ndef reverse(s):\n    '''\n    Write a python function that takes in a string s and returns the reverse of s.\n    '''\n    if (len(s) <= 1):\n        return s\n    else:\n        i = 0\n        j = len(s) - 1\n        while i <= j:\n            temp = s[i]\n            s[i] = s[j]\n            s[j] = temp\n            i += 1\n            j -= 1\n        return s\n        \ndef partition(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    if (len(s) <= 1):\n        return True\n    else:\n        l = len(s)\n        i = 0\n        j = l - 1\n        while i < j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef partition(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    if (len(s) <= 1):\n        return True\n    else:\n        l = len(s)\n        i = 0\n        j = l - 1\n        while i <= j:\n            if (s[i]!= s[j]):\n                return False\n            i += 1\n            j -= 1\n        return True\n        \ndef findDuplicate(nums):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the number that appears more than once in the array. If the list does not have any duplicates, return -1.\n    '''\n    i = 0\n    while i < len(nums):\n        j = nums.count(nums[i])\n        if (j > 1):\n            return nums[i]\n        i += 1\n        \ndef findDuplicate(nums):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the number that appears more than once in the array. If the list does not have any duplicates, return -1.\n    '''\n    i = 0\n    while i < len(nums):\n        j = nums.count(nums[i])\n        if (j > 1):\n            return nums[i]\n        i += 1\n        \ndef findDuplicate(nums):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the number that appears more than once in the array. If the list does not have any duplicates, return -1.\n    '''\n    i = 0\n    while i < len(nums):\n        j = nums.count(nums[i])\n        if (j > 1):\n            return nums[i]\n        i += 1\n        \ndef findDuplicate(nums):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the number that appears more than once in the array. If the list does not have any duplicates, return -1.\n    '''\n    i = 0\n    while i < len(nums):\n        j = nums.count(nums[i])\n        if (j > 1):\n            return nums[i]\n        i += 1\n        \ndef findDuplicate(nums):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the number that appears more than once in th"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**2\n    return total\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return find_star_num(n - 1) * n\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 0\n    while n > star:\n        star = star * 2 + 1\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # The sum of the first n numbers is 5/2\n    # From the sum of the first 5 numbers, you can deduce the sum of the first n numbers\n    # 1, 1, 1, 1, 1\n    # 5/2, 5/2, 5/2, 5/2, 5/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 1/2 = 7/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 7/2 = 17/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 17/2 = 33/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 33/2 = 49/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 49/2 = 81/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 81/2 = 97/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 97/2 = 113/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 113/2 = 129/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 129/2 = 145/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 145/2 = 155/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 155/2 = 165/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 165/2 = 175/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 175/2 = 185/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 185/2 = 195/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 195/2 = 205/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 205/2 = 215/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 215/2 = 225/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 225/2 = 235/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 235/2 = 245/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 245/2 = 255/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 255/2 = 285/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 285/2 = 305/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 305/2 = 325/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 325/2 = 335/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 335/2 = 345/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 345/2 = 355/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 355/2 = 365/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 365/2 = 375/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 375/2 = 385/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 385/2 = 395/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 395/2 = 405/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 405/2 = 425/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 425/2 = 435/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 435/2 = 445/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 445/2 = 455/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 455/2 = 465/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 465/2 = 475/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 475/2 = 485/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 485/2 = 495/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 495/2 = 505/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 505/2 = 515/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 515/2 = 525/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 525/2 = 535/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 535/2 = 545/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 545/2 = 555/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 555/2 = 565/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 565/2 = 575/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 575/2 = 585/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 585/2 = 595/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 595/2 = 605/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 605/2 = 615/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 615/2 = 635/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 635/2 = 645/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 645/2 = 655/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 655/2 = 665/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 665/2 = 675/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 675/2 = 685/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 685/2 = 695/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 695/2 = 705/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 705/2 = 715/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 715/2 = 725/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 725/2 = 735/2\n    # 5/2, 5/2, 5/2, 5/2, 5/2 + 735/2 = 745/2\n    # 5/2, "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 0\n    sumnum = 0\n    while i < n:\n        sumnum += 6*i\n        i += 1\n    print(sumnum)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 19\n    elif n == 8:\n        return 22\n    elif n == 9:\n        return 25\n    elif n == 10:\n        return 28\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 34\n    elif n == 13:\n        return 37\n    elif n == 14:\n        return 40\n    elif n == 15:\n        return 43\n    elif n == 16:\n        return 46\n    elif n == 17:\n        return 49\n    elif n == 18:\n        return 52\n    elif n == 19:\n        return 55\n    elif n == 20:\n        return 58\n    elif n == 21:\n        return 61\n    elif n == 22:\n        return 64\n    elif n == 23:\n        return 67\n    elif n == 24:\n        return 70\n    elif n == 25:\n        return 73\n    elif n == 26:\n        return 76\n    elif n == 27:\n        return 79\n    elif n == 28:\n        return 82\n    elif n == 29:\n        return 85\n    elif n == 30:\n        return 88\n    elif n == 31:\n        return 91\n    elif n == 32:\n        return 94\n    elif n == 33:\n        return 97\n    elif n == 34:\n        return 100\n    elif n == 35:\n        return 103\n    elif n == 36:\n        return 106\n    elif n == 37:\n        return 109\n    elif n == 38:\n        return 112\n    elif n == 39:\n        return 115\n    elif n == 40:\n        return 118\n    elif n == 41:\n        return 121\n    elif n == 42:\n        return 124\n    elif n == 43:\n        return 127\n    elif n == 44:\n        return 130\n    elif n == 45:\n        return 133\n    elif n == 46:\n        return 136\n    elif n == 47:\n        return 139\n    elif n == 48:\n        return 142\n    elif n == 49:\n        return 145\n    elif n == 50:\n        return 148\n    elif n == 51:\n        return 151\n    elif n == 52:\n        return 154\n    elif n == 53:\n        return 157\n    elif n == 54:\n        return 160\n    elif n == 55:\n        return 163\n    elif n == 56:\n        return 166\n    elif n == 57:\n        return 169\n    elif n == 58:\n        return 172\n    elif n == 59:\n        return 175\n    elif n == 60:\n        return 178\n    elif n == 61:\n        return 181\n    elif n == 62:\n        return 184\n    elif n == 63:\n        return 187\n    elif n == 64:\n        return 190\n    elif n == 65:\n        return 193\n    elif n == 66:\n        return 196\n    elif n == 67:\n        return 199\n    elif n == 68:\n        return 202\n    elif n == 69:\n        return 205\n    elif n == 70:\n        return 208\n    elif n == 71:\n        return 211\n    elif n == 72:\n        return 214\n    elif n == 73:\n        return 217\n    elif n == 74:\n        return 220\n    elif n == 75:\n        return 223\n    elif n == 76:\n        return 226\n    elif n == 77:\n        return 229\n    elif n == 78:\n        return 232\n    elif n == 79:\n        return 235\n    elif n == 80:\n        return 238\n    elif n == 81:\n        return 241\n    elif n == 82:\n        return 244\n    elif n == 83:\n        return 247\n    elif n == 84:\n        return 250\n    elif n == 85:\n        return 253\n    elif n == 86:\n        return 256\n    elif n == 87:\n        return 259\n    elif n == 88:\n        return 262\n    elif n == 89:\n        return 265\n    elif n == 90:\n        return 268\n    elif n == 91:\n        return 271\n    elif n == 92:\n        return 274\n    elif n == 93:\n        return 277\n    elif n == 94:\n        return 280\n    elif n == 95:\n        return 283\n    elif n == 96:\n        return 286\n    elif n == 97:\n        return 289\n    elif n == 98:\n        return 292\n    elif n == 99:\n        return 295\n    elif n == 100:\n        return 298\n    elif n == 101:\n        return 301\n    elif n == 102:\n        return 304\n    elif n == 103:\n        return 307\n    elif n == 104:\n        return 310\n    elif n == 105:\n        return 313\n    elif n == 106:\n        return 316\n    elif n == 107:\n        return 319\n    elif n == 108:\n        return 322\n    elif n == 109:\n        return 325\n    elif n == 110:\n        return 328\n    elif n == 111:\n        return 331\n    elif n == 112:\n        return 334\n    elif n == 113:\n        return 337\n    elif n == 114:\n        return 340\n    elif n == 115:\n        return 343\n    elif n == 116:\n        return 346\n    elif n == 117:\n        return 349\n    elif n == 118:\n        return 352\n    elif n == 119:\n        return 355\n    elif n == 120:\n        return 358\n    elif n == 121:\n        return 361\n    elif n == 122:\n        return 364\n    elif n == 123:\n        return 367\n    elif n == 124:\n        return 370\n    elif n == 125:\n        return 373\n    elif n == 126:\n        return 376\n    elif n == 127:\n        return 379\n    elif n == 128:\n        return 382\n    elif n == 129:\n        return 385\n    elif n == 130:\n        return 388\n    elif n == 131:\n        return 391\n    elif n == 132:\n        return 394\n    elif n == 133:\n        return 397\n    elif n == 134:\n        return 400\n    elif n == 135:\n        return 403\n    elif n == 136:\n        return 406\n    elif n == 137:\n        return 409\n    elif n == 138:\n        return 412\n    elif n == 139:\n        return 415\n    elif n == 140:\n        return 418\n    elif n == 141:\n        return 421\n    elif n == 142:\n        return 424\n    elif n == 143:\n        return 427\n    elif n == 144:\n        return 430\n    elif n == 145:\n        return 433\n    elif n == 146:\n        return 436\n    elif n == 147:\n        return 439\n    elif n == 148:\n        return 442\n    elif n == 149:\n        return 445\n    elif n == 150:\n        return 448\n    elif n == 151:\n        return 451\n    elif n == 152:\n        return 454\n    elif n == 153:\n        return 457\n    elif n == 154:\n        return 460\n    elif n == 155:\n        return 463\n    elif n == 156:\n        return 466\n    elif n == 157:\n        return 469\n    elif n == 158:\n        return 472\n    elif n == 159:\n        return 475\n    elif n == 160:\n        return 478\n    elif n == 161:\n        return 481\n    elif n == 162:\n        return 484\n    elif n == 163:\n        return 487\n    elif n == 164:\n        return 490\n    elif n == 165:\n        return 493\n    elif n == 166:\n        return 496\n    elif n == 167"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 2:\n        return 1\n    # print(n)\n    return (((1 + n)**0.5)-1)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    arr = [] \n    for i in range(1, n + 1): \n        arr.append(i) \n    return arr[n - 1] \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    a = ord(k)\n    return a\n    \nprint(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # c = k.encode('ascii')\n    # print(c)\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    a = ord(k)\n    return a\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k,str):\n        return ord(k)\n    else:\n        return k\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v2(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v3(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v4(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v5(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v6(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v7(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v8(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    for i in range(7,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v9(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    for i in range(11,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v10(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    for i in range(9,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v11(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    for i in range(11,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v12(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    for i in range(17,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v13(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    for i in range(19,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v14(n):\n    '''\n    Write a function that takes in a positive integer n > 1 and returns True if n is prime \n    and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    for i in range(21,int(n**0.5)+1,2):\n        if n % i == 0:\n        "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert(isinstance(k, str))\n    \n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ord(k[0]) + ascii_value(k[1:])\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    odd = []\n    total_even = 0\n    total_odd = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            even.append(arr[i])\n            total_even += arr[i]\n        else:\n            odd.append(arr[i])\n            total_odd += arr[i]\n    print(\"Total even:\", total_even)\n    print(\"Total odd:\", total_odd)\n    print(\"Sum of even elements:\", sum(even))\n    print(\"Sum of odd elements:\", sum(odd))\n    print(\"The even element at odd index are:\", odd)\n    print(\"The even element at even index are:\", even)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_number = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even_number = sum_even_number + arr[i]\n    return sum_even_number\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    odd_index = 1\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[even_index]\n        even_index += 2\n    print(\"The sum of even numbers at even positions of the list is:\", sum_even)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr)):\n        if (arr[i]%2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0,len(arr),2):\n        if arr[i] % 2 == 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sums = 0\n    length = len(arr)\n    if length <= 0:\n        return None\n    for i in range(0, length, 2):\n        if i == length - 1:\n            sums = sums + arr[i]\n        else:\n            sums = sums + arr[i]\n    return sums\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even = even + arr[i]\n        else:\n            odd = odd + arr[i]\n    return even, odd\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(list(map(lambda x: x**5, range(1, n+1))))\n    "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += (i ** 5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    count = 0\n    if n<=0:\n        return count\n    else:\n        for i in range(n):\n            count += int(i**5)\n        return count\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum(n):\n        a = 0\n        if n == 0:\n            return a\n        a = a + (n * n * n) * (n * n * n)\n        return a\n    \n    def power(n):\n        return sum(n) * n * n * n * n\n    \n    \n    return power(n)\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        i = 1\n        while i <= n:\n            sum += i*i*i*i*i\n            i += 1\n        return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # We can use math.sqrt() to solve this problem\n    # We can use math.pow() for this problem\n    # But we can use the built in pow() function to solve the problem\n    # We can use the built in sqrt() function to solve the problem\n    # We can use the sum() function to solve the problem\n    # The print(sum(list(i**5 for i in range(n+1))))\n    return sum(i**5 for i in range(n+1))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i % 2 == 0):\n            sum = sum + (i ** 5)\n    print('Sum of ',n,'even powers of 5 : ',sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return(sum([i**5 for i in range(n)]))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i][1])\n    return temp_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][2])\n    return return_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for ele in test_list:\n        rear_list.append(ele[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for t in test_list:\n        return_list.append(t[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for t in test_list:\n        return_list.append(t[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i[-1])\n    return temp\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list1 = []\n    for i in range(len(test_list)):\n        list1.append(test_list[i][1])\n    return list1\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    \n    return new_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    if type(test_tup1) is tuple:\n        for i in range(len(test_tup1)):\n            new_tup1.append(test_tup1[i] - test_tup2[i])\n    if type(test_tup2) is tuple:\n        for i in range(len(test_tup2)):\n            new_tup2.append(test_tup2[i] - test_tup1[i])\n    return tuple(new_tup1), tuple(new_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    a = test_tup1\n    b = test_tup2\n    c = ()\n    for i in range(len(a)):\n        c += (a[i] - b[i],)\n    return c\nprint(substract_elements((1,2,3,4), (2,2,2,2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substract_list = []\n    for i in range(len(test_tup1)):\n        substract_list.append(test_tup1[i] - test_tup2[i])\n    return substract_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = (0,0)\n    for i in range(len(test_tup1)):\n        new_tup = tuple(map(lambda x, y : x - y, test_tup1[i], test_tup2[i]))\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    diff = 0\n    for i in range(len(tup1)):\n        diff = tup1[i] - tup2[i]\n    return diff\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1,n+1):\n        if (i%2 == 0):\n            sum_even += math.factorial(n-i+1) / math.factorial(i)\n    return sum_even\nprint(even_binomial_Coeff_Sum(10))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1): \n        if i%2 == 0: \n            s += math.factorial(i)/(math.factorial(i-2)*math.factorial(i-1)) \n    return s \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            a += math.factorial(n)/math.factorial(n-i)/math.factorial(i)\n    return int(a)\nprint(\"Sum of even index binomial coefficients:\", even_binomial_Coeff_Sum(3))\ndef BinomialCoeff(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    a = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    return int(a)\nprint(\"The binomial coefficient between 2 and 6 is:\", BinomialCoeff(2,3))\ndef BinomialCoeff(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    return math.factorial(n) / math.factorial(k) / math.factorial(n - k)\nprint(\"The binomial coefficient between 2 and 6 is:\", BinomialCoeff(2,3))\ndef area_of_triangle(base, height):\n    '''\n    Write a python function that takes in two positive integers and returns the area of a triangle with the given base and height.\n    '''\n    a = base * height / 2\n    return int(a)\nprint(\"Area of the given triangle is:\", area_of_triangle(10,5))\ndef nth_root(x, n):\n    '''\n    Write a python function that takes in one positive integer and calculates the nth root of x.\n    '''\n    a = 1 / n\n    return int(x**a)\nprint(\"The nth root of x is:\", nth_root(5,2))\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the factorial of that integer.\n    '''\n    a = 1\n    for i in range(1,n+1):\n        a *= i\n    return int(a)\nprint(\"The factorial of n is:\", factorial(5))\ndef fibonacci(n):\n    '''\n    Write a python function that takes in one positive integer and returns the nth Fibonacci number.\n    '''\n    a = 1\n    b = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2,n+1):\n            c = a+b\n            a = b\n            b = c\n        return int(c)\nprint(\"The nth Fibonacci number is:\", fibonacci(5))\ndef sum_of_digits(num):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    a = 0\n    while num:\n        a += num%10\n        num = num//10\n    return int(a)\nprint(\"The sum of the digits of the integer is:\", sum_of_digits(377))\ndef fibonacci_partial(n):\n    '''\n    Write a python function that takes in one positive integer and returns the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibonacci_partial(n-1) + fibonacci_partial(n-2)\nprint(\"The nth Fibonacci number is:\", fibonacci_partial(5))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    a = 0\n    while n:\n        a += n%10\n        n = n//10\n    return int(a)\nprint(\"The sum of the digits of the integer is:\", sum_of_digits_partial(377))\ndef fibonacci_partial(n):\n    '''\n    Write a python function that takes in one positive integer and returns the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibonacci_partial(n-1) + fibonacci_partial(n-2)\nprint(\"The nth Fibonacci number is:\", fibonacci_partial(5))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    a = 0\n    while n:\n        a += n%10\n        n = n//10\n    return int(a)\nprint(\"The sum of the digits of the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + sum_of_digits_partial(n//10)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + sum_of_digits_partial(n//10)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    a = 0\n    while n:\n        a += n%10\n        n = n//10\n    return int(a)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + sum_of_digits_partial(n//10)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    a = 0\n    while n:\n        a += n%10\n        n = n//10\n    return int(a)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + sum_of_digits_partial(n//10)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '''\n    Write a python function that takes in a positive integer and returns the sum of the digits in the integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + sum_of_digits_partial(n//10)\nprint(\"The sum of the digits in the integer is:\", sum_of_digits_partial(377))\ndef sum_of_digits_partial(n):\n    '"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def even_binomial_Coeff_Sum(n):\n        if n == 0:\n            return 0\n        else:\n            if n == 1:\n                return 1\n            else:\n                even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-1)\n    return even_binomial_Coeff_Sum(n)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_of_even_index_binomial_coefficients = 0\n    # write your function here\n    if n<1:\n        print(\"No binomial coefficients possible\")\n    else:\n        for i in range(0,n+1,2):\n            sum_of_even_index_binomial_coefficients+=binomial_coefficient(n,i)\n        print(sum_of_even_index_binomial_coefficients)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def even_binomial_Coeff_Sum(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        n_fact = 0\n        c_fact = 1\n        a = 0\n        a_fact = 0\n        b = 0\n        b_fact = 0\n        for i in range(1, n+1):\n            a = a + i\n            a_fact = a_fact + a\n        for i in range(1, n+1):\n            b = b + i\n            b_fact = b_fact + b\n        c = (n * (n - 1) * (n - 2)) / 6\n        e = c_fact - (a_fact * n)\n        f = n_fact - (b_fact * n)\n        print(e)\n        print(f)\n        return n_fact - (b_fact * n)\n    \n    print(even_binomial_Coeff_Sum(n))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            binomial_coeff_sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return binomial_coeff_sum\nprint(\"sum of even index binomial coefficients of 6 is :\", even_binomial_Coeff_Sum(6))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficient = []\n    sum = 0\n    for i in range(n+1): \n        binomial_coefficient.append(int(math.factorial(n)/(math.factorial(i)*math.factorial(n-i))))\n        if i%2 == 0:\n            sum += binomial_coefficient[i]\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1: \n        raise ValueError(\"Please enter a positive integer\")\n    \n    # S = 1/(1-p) * (p**n * (1-p)**(n-1))\n    S = 0.0\n    for i in range(n+1):\n        # S = S + binomCoeff(n,i,0.5)\n        S += math.factorial(n)/math.factorial(n-i) * 0.5**i\n    print(S)\n    return S\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    from math import factorial\n    sum = 0\n    for i in range(0,n):\n        sum+=factorial(n)//(factorial(i)*factorial(n-i))\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    volume = (pi * r**2 * h)\n    return volume\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol=3.14*(r**2)*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi*r**2*h/3\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    v = pi*r**2*h\n    return v\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r*r*h\n    print(f\"The volume of the cylinder is {volume}\")\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (pi * r**2 * h)\n    return volume\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    volume = (pi * r**2 * (h/3))\n    return volume\n    \ndef volume_cone_un(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    volume = (pi * (r**2) * (1/3) * h)\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    volume = (4/3) * pi * (r**3)\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    filtered_dict = {k:v for k,v in filtered_dict.items() if v>=n}\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_small = {}\n    for key in dict:\n        if dict[key] >= n:\n            dict_small[key] = dict[key]\n    return dict_small\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    final_dict = {key:value for key,value in dict.items() if value >= n}\n    return final_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict\n    # <-- Your Code Here -->\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new=dict()\n    for key in dict.keys():\n        if dict[key]>=n:\n            dict_new[key]=dict[key]\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key,value in dict.items():\n        if value < n:\n            return False\n    return True\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res_dic = {}\n    for i in dict:\n        if dict[i] >= n:\n            res_dic[i] = dict[i]\n    return res_dic\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for i in dict:\n        if dict[i] >= n:\n            output[i] = dict[i]\n    return output\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i] <= test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a = 0\n    for x in range(len(test_tup)):\n        if test_tup[x] == test_tup[0]:\n            a += 1\n    return a\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 1\n    \n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            counter += 1\n        else:\n            return counter\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in range(len(test_tup)):\n        if test_tup[elem] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([*test_tup[:test_tup.index(test_tup[0])+1]])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if test_tup[i]<test_tup[i+1]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            return i\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    if not test_tup:\n        return 0\n    elif len(test_tup) == 1:\n        return 1\n    else:\n        for i in range(1,len(test_tup)):\n            if test_tup[i-1] < test_tup[i]:\n                num += 1\n        return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(i * (i + 1) // 2 for i in range(n))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    return (1 + n) * (10 - (1 + n))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return 0\n    result = 1\n    for i in range(1, n):\n        result = result * (3 * i - 1) // 2\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n+1\n    result = 1\n    for x in range(1,n):\n        result = result * (x * (x + 1))\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * (n * (n + 1) + 1) / 2) - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return 1\n    return sum([i * (i+1) for i in range(1, n+1)])\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = 0\n    for i in range(1,n+1):\n        dec += i\n        print(i,dec)\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    while count < n:\n        count += 1\n        print(count)\n        print('*' * count)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = []\n    i = 0\n    while i < n:\n        decagonal.append((i**3) + (i**2) - (i))\n        i += 1\n    return decagonal[n-1]\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # new_list = dlist.copy()\n    # new_list.sort()\n    # index = 0\n    # for i in dlist:\n    #     if i == item:\n    #         return True,index\n    #     index += 1\n    # return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Write your function here\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return False, -1\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return True, index\n        index += 1\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_unique = []\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list_unique:\n            test_list_unique.append(test_list[i])\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # code here\n    lst=[]\n    for i in test_list:\n        if i not in lst:\n            lst.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = []\n    for element in test_list:\n        if element not in result:\n            result.append(element)\n    print(result)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # new_list = []\n    # for element in test_list:\n    #     if element in new_list:\n    #         return False\n    #     else:\n    #         new_list.append(element)\n    # return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    if unique:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_1 = []\n    for x in test_list:\n        if x in list_1:\n            print(f\"{x} already present in the list\")\n        else:\n            list_1.append(x)\n    print(list_1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) < 1:\n        return False\n    test_list.sort()\n    for index, element in enumerate(test_list):\n        if element == test_list[index - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_nums=[]\n    if len(nums1)==len(nums2):\n        for i in range(len(nums1)):\n            sub_nums.append(nums1[i]-nums2[i])\n        return sub_nums\n    else:\n        return \"Lists must have the same length.\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x for x in nums1 if x not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst = []\n    for i in range(len(nums1)):\n        lst.append(nums1[i] - nums2[i])\n    return lst\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_nums = []\n    for i in range(len(nums1)):\n        new_nums.append(nums1[i]-nums2[i])\n    return new_nums\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # for each element in nums1\n    # if it is in nums2\n    # add to nums2\n    # else subtract from nums2\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2) if num1 in nums2] + \\\n            [num1 - num2 for num1, num2 in zip(nums1,nums2) if num1 not in nums2] + \\\n            [num1 - num2 for num1, num2 in zip(nums1,nums2) if num2 in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = []\n    for i in range(len(nums1)):\n        a.append(nums1[i]-nums2[i])\n    return a\n    \n    \n    \ndef add_sub(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    a = []\n    for i in range(len(nums1)):\n        a.append(nums1[i]+nums2[i])\n    return a\n    \n    \ndef map_list(list_input, fun, fun_input):\n    '''\n    Write a function to apply a function to all elements of a list.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        a.append(fun(fun_input,list_input[i]))\n    return a\n    \ndef map_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to apply a function to all elements of a list of lists.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        a.append(fun(fun_input,list_input[i]))\n    return a\n    \n    \n    \ndef filter_list(list_input, fun, fun_input):\n    '''\n    Write a function to filter a list using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        if fun(fun_input,list_input[i]) == True:\n            a.append(list_input[i])\n    return a\n    \ndef filter_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to filter a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        if fun(fun_input,list_input[i]) == True:\n            a.append(list_input[i])\n    return a\n    \ndef zip_list_of_list(list_input1, list_input2):\n    '''\n    Write a function to zip two lists together into a single list.\n    '''\n    a = []\n    for i in range(len(list_input1)):\n        a.append([list_input1[i],list_input2[i]])\n    return a\n    \n    \ndef zip_list_of_list_of_list(list_input1, list_input2):\n    '''\n    Write a function to zip two lists of lists into a single list.\n    '''\n    a = []\n    for i in range(len(list_input1)):\n        for j in range(len(list_input2[i])):\n            a.append([list_input1[i][j],list_input2[i][j]])\n    return a\n    \n    \ndef map_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to map a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        a.append(fun(fun_input,list_input[i]))\n    return a\n    \ndef map_list_of_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to map a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        for j in range(len(list_input[i])):\n            a.append(fun(fun_input,list_input[i][j]))\n    return a\n    \n    \ndef filter_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to filter a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        if fun(fun_input,list_input[i]) == True:\n            a.append(list_input[i])\n    return a\n    \ndef filter_list_of_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to filter a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        if fun(fun_input,list_input[i]) == True:\n            a.append(list_input[i])\n    return a\n    \n    \n    \n    \ndef add_lists(list_1, list_2):\n    '''\n    Write a function to add a list to another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \ndef add_lists_of_list(list_1, list_2):\n    '''\n    Write a function to add a list to another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \n    \n    \ndef add_lists_of_list_of_list(list_1, list_2):\n    '''\n    Write a function to add a list to another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \n    \n    \ndef sub_lists(list_1, list_2):\n    '''\n    Write a function to subtract a list from another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]-list_2[i])\n    return a\n    \n    \ndef sub_lists_of_list(list_1, list_2):\n    '''\n    Write a function to subtract a list from another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]-list_2[i])\n    return a\n    \n    \n    \ndef sub_lists_of_list_of_list(list_1, list_2):\n    '''\n    Write a function to subtract a list from another list using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]-list_2[i])\n    return a\n    \n    \ndef add_sub_lists(list_1, list_2):\n    '''\n    Write a function to add a list and a list element-wise using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \ndef add_sub_lists_of_list(list_1, list_2):\n    '''\n    Write a function to add a list and a list element-wise using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \n    \n    \ndef add_sub_lists_of_list_of_list(list_1, list_2):\n    '''\n    Write a function to add a list and a list element-wise using a for loop.\n    '''\n    a = []\n    for i in range(len(list_1)):\n        a.append(list_1[i]+list_2[i])\n    return a\n    \n    \n    \n    \ndef map_list_of_list_of_list(list_input, fun, fun_input):\n    '''\n    Write a function to map a list of lists using a function.\n    '''\n    a = []\n    for i in range(len(list_input)):\n        a.append(fun(fun_input,list"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #Runtime: 68 ms, faster than 66.74% of Python3 online submissions for Subtract the Product and Sum of Digits of an Integer.\n    #Memory Usage: 15.8 MB, less than 62.66% of Python3 online submissions for Subtract the Product and Sum of Digits of an Integer.\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Declare a variable to keep track of the number of digits in the integer\n    num_digits = len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            print(key, dict[key])\n            return False\n    return True\n    \n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    count = 0\n    while n!= 0:\n        # Get the last digit of integer and add to count. \n        digit = n % 10\n        count = count + 1\n        # If count is not already present in the dictionary, add a new key-value pair into the dictionary.\n        if digit not in dict: \n            dict[digit] = 1\n        else: \n            dict[digit] += 1\n        # Decrement count to next digit.\n        n = n // 10\n    # Iterate the dictionary and check the condition.\n    for key in dict:\n        if dict[key] > key:\n            return False\n    return True\n    \ndef validate(n):"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0}\n    for i in range(0,len(n)):\n        d[n[i]] = d[n[i]]+1\n    for key,val in d.items():\n        if val>=1:\n            return False\n    return True\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n>0:\n        count += 1\n        n = n//10\n    if count < count(n):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    c = Counter(str(n))\n    if c[0] <= n//10 and c[1] <= n%10 and c[2] <= n%100 and c[3] <= n%1000 and c[4] <= n%10000 and c[5] <= n%100000 and c[6] <= n%1000000 and c[7] <= n%10000000:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n    \n    \n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n, int):\n        raise ValueError(\"Input needs to be an integer\")\n    \n    if n <= 0:\n        raise ValueError(\"Input needs to be a positive integer\")\n    \n    freq_dict = dict()\n    while n > 0:\n        if n in freq_dict:\n            freq_dict[n] += 1\n        else:\n            freq_dict[n] = 1\n        n = n // 10\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    valid = True\n    if n < 0: \n        return False\n    while n > 0: \n        if n % 10 > n: \n            valid = False\n        n = n // 10\n    return valid \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Declare a list\n    l = []\n    # We will check the frequency of each digit in the integer and check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(1,n+1):\n        # Below is the list of digits\n        l.append(str(i))\n    # We will check the frequency of each digit in the integer and check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(0,len(l)):\n        # check whether the frequency of the digit i in the integer is less than or equal to the digit itself\n        if(l.count(l[i]) <= l.count(l[i])):\n            return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    c=0\n    for i in range(10):\n        if n%10==i:\n            c+=1\n    if c<=n/10:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        return False\n    digits = str(n)\n    for i in range(len(digits)):\n        if int(digits[i]) > int(digits[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(element == item for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        if list.count(element) == len(list):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    if len(list) == 0:\n        result = False\n        return result\n    for i in range(len(list)):\n        if list[i]!= element:\n            result = False\n            return result\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if list.count(element) == len(list) else False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if element in list else False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return \"a\" in text and 2 <= len(re.findall(\"(a*b)\",text)) <= 3\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    s = text.find(\"a\")\n    if s >= 0:\n        if s + 2 < len(text):\n            if text[s+2] == 'b' and text[s+3] == 'b':\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.strip()\n    pattern = r\"(?:a){2,3}b\"\n    return re.match(pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Use a regular expression to check whether a string contains the 'a' character followed by two or three 'b' characters.\n    # Return a boolean.\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a{2,3}b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a{2,3}b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a')>=2:\n        if text.count('b') >= 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.findall('a.b', text)\n    if text:\n        return True\n    else:\n        return False\n    \n    \n    \ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.findall('a.b', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    b=re.findall(r'(?<=a).(b|bb|bbb)',text)\n    return len(b)>=1 and len(b)<=3\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # Declare variables\n    match_list = []\n    count = 0\n    check = False\n    \n    # Loop through the text\n    for i in range(0, len(text)):\n        \n        # Declare variables\n        a_char = 'a'\n        b_char = 'b'\n        \n        # Check if the next character is a character\n        if text[i].isalpha():\n            \n            # Check if the character is 'a' and the next character is 'b'\n            if text[i] == a_char and text[i+1] == b_char:\n                check = True\n            \n            # Check if the character is 'b' and the next character is 'b' or 'a'\n            elif text[i] == b_char and (text[i+1] == b_char or text[i+1] == a_char):\n                check = True\n            \n        # If the character is not a character add the character to the list\n        else:\n            \n            # If a character is not a character add it to the list\n            if text[i]!= a_char and text[i]!= b_char:\n                check = False\n                match_list.append(text[i])\n    \n    # If the loop is done and the text is empty then there are no matches found\n    if text == '':\n        print('There are no matches found')\n    \n    # If the loop is done and there is a match return the matches\n    elif check == True and len(match_list)!= 0:\n        return print(''.join(match_list))\n    \n    # If the loop is done and there is no match return the text\n    else:\n        return print(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n    return True if re.search(r'ab', text) else False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    n_elements = n\n    if k <= 0 or k > n_elements:\n        return max(a)\n    if k == 1:\n        return max(a)\n    if k == n:\n        return sum(a)\n    if k == 2:\n        return sum(a) - min(a)\n    if k == 3:\n        return sum(a) - min(a) + max(a)\n    if k == 4:\n        return sum(a) - min(a) + max(a) - min(a)\n    if k == 5:\n        return sum(a) - min(a) + max(a) - min(a) + max(a)\n    if k == 6:\n        return sum(a) - min(a) + max(a) - min(a) + max(a) - min(a)\n    if k == 7:\n        return sum(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a)\n    if k == 8:\n        return sum(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a)\n    if k == 9:\n        return sum(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a) - min(a)\n    if k == 10:\n        return sum(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a) - min(a) + max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return\n    max_sum = 0\n    for i in range(n):\n        if i >= k:\n            break\n        s = sum(a[i:i + k])\n        max_sum = max(max_sum, s)\n    print(max_sum)\n    return\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #max_sum = -10000\n    #sum = 0\n    #for i in range(0, n-k): \n        #sum = 0\n        #for j in range(i, i+k): \n            #sum += a[j]\n        #if sum > max_sum: \n            #max_sum = sum \n    #return max_sum\n    \n    '''\n    Approach 2:\n    '''\n    def max_sub_array(a, n): \n        sum = 0\n        max_sum = -10000\n        for i in range(0, n): \n            sum = sum + a[i] \n            if sum > max_sum: \n                max_sum = sum \n        return max_sum\n    \n    return max_sub_array(a, n)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # max_sum = 0\n    # for i in range(0, n-k+1): \n    #     sum = 0\n    #     for j in range(i, i+k): \n    #         sum += a[j] \n    #     if sum > max_sum: \n    #         max_sum = sum \n    # return max_sum \n    \n    max_sum = 0\n    curr_sum = 0\n    for i in range(n-k+1): \n        curr_sum = 0\n        for j in range(i, i+k): \n            curr_sum += a[j] \n        if curr_sum > max_sum: \n            max_sum = curr_sum \n    return max_sum \n    \na = [-2, -3, 4, -1, -2, 1, 5, -3]\nk = 2\nprint(max_sub_array_sum_repeated(a, len(a), k)) \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    res = -1\n    max_sum = -1\n    \n    for i in range(n): \n        if (a[i] > max_sum): \n            max_sum = a[i] \n            res = a[i] * k \n    return res \n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    1) Sort the array a in increasing order.\n    2) Iterate from right to left.\n    3) Initialize two variables (x and y) for the first and the last elements of the array a. \n    4) Check if k is equal to 0.\n    5) If k is equal to 0, return the maximum of a[i] and a[i+1].\n    6) If k is not equal to 0, then find the maximum of a[i]+a[i+1]+a[i+2]+...+a[i+k-1]+a[i+k] and assign it to the max_sum. \n    7) If max_sum is greater than the current sum, then update max_sum to current sum.\n    8) If max_sum is less than the current sum, then update the current sum to max_sum.\n    '''\n    # Defining the function max_sub_array_sum_repeated(a, n, k)\n    def max_sub_array_sum_repeated(a, n, k): \n        '''\n        a - An array of integers \n        n - size of a \n        k - number of repetition \n        '''\n        # Sorting the array a in increasing order. \n        a.sort() \n        \n        # Iterating from right to left \n        for i in range(k, n): \n            x = a[i] \n            \n            # Initializing two variables \n            y = a[i - k] \n            \n            # Checking if k is equal to 0 \n            if k == 0: \n                return max(x, y) \n            \n            # If k is not equal to 0 \n            else: \n                y = a[i - k] \n                return max(x + y, y) \n    \n    # Driver Code \n    a = [1, 2, 3, 4, -1, 2] \n    n = len(a) \n    k = 2\n    print(max_sub_array_sum_repeated(a, n, k)) \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    #Brute force:\n    # Time Complexity : O(n^2)\n    # Space Complexity : O(n)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = a[i] + a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    return max_sum\n    \n    \n    #O(n)\n    #Running time: 0(n)\n    #Space complexity: 0(1)\n    curr_sum = 0\n    max_sum = float('-inf')\n    n = len(a)\n    for i in range(n):\n        curr_sum = a[i] + curr_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n    \n    #O(n)\n    #Running time: 0(n)\n    #Space complexity: 0(1)\n    curr_sum = 0\n    max_sum = float('-inf')\n    for i in range(n):\n        curr_sum = a[i] + curr_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n    \n    \n    \n    \n    #O(n)\n    #Running time: 0(n)\n    #Space complexity: 0(1)\n    curr_sum = 0\n    max_sum = float('-inf')\n    curr_window_sum = 0\n    for i in range(n):\n        curr_sum = a[i] + curr_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n        if curr_window_sum + curr_sum <= k:\n            curr_window_sum += curr_sum\n        else:\n            curr_window_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    min_sum = 0\n    result = 0\n    for i in range(0, n):\n        result = max(result, result + a[i])\n        max_sum = max(max_sum, result)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array = a[0]\n    max_sub_array_rep = a[0]\n    total_sum = 0\n    for i in range(1, n): \n        if total_sum + a[i] > k:\n            total_sum = a[i]\n        elif total_sum + a[i] < k:\n            total_sum += a[i]\n        if total_sum > max_sub_array: \n            max_sub_array = total_sum\n            max_sub_array_rep = a[i]\n    print(max_sub_array, max_sub_array_rep)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    global a_max\n    a_max = 0\n    k = int(k)\n    n = int(n)\n    '''\n    print(\"K = \", k)\n    print(\"Original Array = \", a)\n    print(\"New Array = \", a_max)\n    '''\n    for i in range(k):\n        sum = 0\n        for j in range(0, n):\n            sum = sum + a[j]\n        a_max = max(sum, a_max)\n        print(\"K = \", k, \" Sum = \", sum, \" Max Sum = \", a_max)\n        k = k + 1\n    return a_max\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef square_Sum2(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            Sum += i*i\n    return Sum\n    \ndef square_Sum1(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n+1):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum2(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum3(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum4(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n+1):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum5(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum6(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum7(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum8(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum9(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum10(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum11(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum12(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum13(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum14(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum15(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum16(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum17(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum18(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum19(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum20(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum21(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum22(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum23(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum24(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum25(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum26(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum27(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum28(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i\n    return Sum\n    \ndef square_Sum29(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (sum(i**2 for i in range(n) if i%2 == 0))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if (i%2==0):\n            sum = sum + i**2\n    print(\"Sum of even squares:\",sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i*i for i in range(n))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i * i\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (square_Sum(n-1)+(n*n))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for i in range(len(list1)):\n        l = len(list1[i])\n        if l > len(max_len):\n            max_len = list1[i]\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lst=list1\n    max_len=len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j]>max_len:\n                max_len=lst[i][j]\n    print(\"The length of longest list: \",max_len)\n    print(\"List of longest list: \",lst[0])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l=[]\n    for i in list1:\n        l.append(len(i))\n    x=max(l)\n    print(l)\n    return x\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length=[]\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum=0\n    for item in list1:\n        if len(item)>maximum:\n            maximum=len(item)\n    print(maximum)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    length = []\n    \n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            if i == (len(list1[l]) - 1):\n                length.append(len(list1[l][i]))\n            else:\n                length.append(len(list1[l][i]) + len(list1[l][i + 1]))\n    \n    print(\"List of maximum length is: \" + str(max(length)))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        length = len(l)\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_len = []\n    for i in list1:\n        list_len.append(len(i))\n    return max(list_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1.sort(reverse=True)\n    return len(list1[0])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxi = 0\n    for i in list1:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #Base case\n    if n < k:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif k == 1:\n        return n\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence_count = 0\n    dp = [[0] * (n+1) for _ in range(k+1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0]*k for i in range(n)]\n    \n    for i in range(k):\n        dp[0][i] = 1\n        \n    for i in range(n):\n        for j in range(k):\n            for x in range(1,3):\n                if j + x <= k:\n                    dp[i][j] += dp[i-1][j + x]\n                else:\n                    break\n        \n    return dp[n-1][0]%1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    \n    # Base condition\n    for i in range(k + 1): \n        dp[0][i] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0: \n        return 0\n    if k == 1: \n        return 1\n    if k == 2: \n        return (n * (n-1))/2\n    if k > 2: \n        return (n * (n-1)) * (k-2) / (k*(k-1))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # if k = 1, then we can paint any post and any color, since that is only 2 colors\n    if k == 1:\n        return 2**n\n    \n    # we can paint any color, because all the possible colors are the same\n    if k == n:\n        return 2**n\n    \n    # and these are the cases when we need to paint some color and some post color\n    return 2*count_no_of_ways(n-1, k) + 2*count_no_of_ways(n-1, k+1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    color_count = {1:1}\n    \n    def count_no_of_ways_recursive(n, k):\n        if (n,k) in color_count.keys():\n            return color_count[(n,k)]\n        if n == 0:\n            return 0\n        if k == 0:\n            return 1\n        if n == 1:\n            return 1\n        if k == 1:\n            return 1\n        if (n,k) in color_count.keys():\n            return color_count[(n,k)]\n        color_count[(n,k)] = count_no_of_ways_recursive(n-1, k) + count_no_of_ways_recursive(n-1, k-1)\n        return color_count[(n,k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = []\n    def helper(ways,n,k):\n        if len(ways) == k:\n            ways.append(n)\n            ways.sort()\n            if ways not in ways_dict:\n                ways_dict[ways] = 1\n            else:\n                ways_dict[ways] += 1\n            return\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp_table = [[0]*k for _ in range(n+1)]\n    for i in range(1,k+1):\n        dp_table[0][i] = 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return 0\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"Enter the first number\")\n    n = int(input())\n    print(\"Enter the second number\")\n    m = int(input())\n    if n%m==0:\n        print(n/m)\n    else:\n        print(n//m+1)\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quo=int(n/m)\n    print(f\"{quo}\")\n    return quo\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n=int(n)\n    m=int(m)\n    if n<0 or m<0:\n        return -1\n    if n==0:\n        return 0\n    if n==1:\n        return m\n    count=0\n    while n!=0:\n        count+=1\n        n=n//2\n    return m*(2**(count-1))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #quotient = n//m\n    #return quotient\n    return int(n//m)\n    #return (n//m) if (n//m) < 10 else (n//m)-1\n    #return (n//m) if (n//m) < 10 else n//m-1\n    #return (n//m) if (n//m) < 10 else n//m-1\n    #return n//m if n%m==0 else n//m\n    #return n//m if n%m==0 else (n//m)+1\n    #return n//m if n%m==0 else (n//m)+1\n    #return n//m if n%m==0 else (n//m)-1\n    #return n//m if n%m==0 else n//m\n    #return n//m if n%m==0 else n//m-1\n    #return n//m if n%m==0 else n//m-1\n    \ndef perfect_number(n):\n    '''\n    Write a python function to find out whether a number is perfect or not.\n    '''\n    #factors = []\n    #for i in range(1,n):\n    #    if n % i == 0:\n    #        factors.append(i)\n    #return True if len(factors) == n else False\n    #return True if n == sum(factors) else False\n    return n == sum(i for i in range(1,n) if n % i == 0)\n    #return n == sum(i for i in range(1,n) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum(i for i in range(1,n+1) if n % i == 0)\n    #return n == sum("
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return n\n    if m==0:\n        return 0\n    x=find(n//m,m)\n    return (n//m)+(x*m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w * h) **.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if not h:\n        return -1\n    else:\n        return math.sqrt(w**2 + h**2)\n    #return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h/2\n    b = math.sqrt((a**2) - (w**2))\n    return a,b\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return w*h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the radious of a right triangle\n    # r = w / math.sin(math.pi / 4)\n    r = w / math.sin(math.radians(90 - math.degrees(math.asin(w / h))))\n    # calculate the distance between the base of the triangle and its hypotenuse\n    h = math.sqrt(w**2 + r**2)\n    return h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w**2 - h**2\n    c = math.sqrt(a)\n    print(f'{a} and {c}')\n    return a,c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_right_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_right_angle_tri(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_right_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_triangle_tri(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_triangle_tri_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_triangle_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_triangle_right_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_rectangle_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_rectangle_right_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_parallelogram_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_parallelogram_right_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_hexagon(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n    side3=math.sqrt((w**2)+((h**2)))\n    x=(side1+side2+side3)/2\n    y=x**2\n    return(x,y)\ndef otherside_hexagon_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=math.sqrt(w**2+h**2)\n    side2=math.sqrt((w**2)-(h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w**2 - h**2)/2)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - w*h)\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2)\ndef otherside_rectangle_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2)\ndef otherside_rhombus(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(a**2 + b**2 - 2*a*b)\ndef otherside_rhombus_s(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(a**2 + b**2 - 2*a*b)\ndef otherside_rhombus_t(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(a**2 + b**2 - 2*a*b)\ndef otherside_parallel_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2)\ndef otherside_parallel_triangle_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2)\ndef otherside_parallel_triangle_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2)\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - 2*h)\ndef otherside_parallelogram_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - 2*h)\ndef otherside_parallelogram_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - 2*h)\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_trapezium_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_trapezium_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - h)\ndef otherside_square_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - h)\ndef otherside_square_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - h)\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_trapezoid_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_trapezoid_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_polygon(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_polygon_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_polygon_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_square_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_square_trapezoid_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_square_trapezoid_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_rectangle_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_rectangle_trapezoid_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_rectangle_trapezoid_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_triangle_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_triangle_trapezoid_s(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_triangle_trapezoid_t(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2 + h**2 - (w+h)*h/2)\ndef otherside_rhombus_trapezoid(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(a**2 + b**2 - (a+b)*b/2)\ndef otherside_rhombus_trapezoid_s(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    retur"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = 0\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    print(max_num)\nmax_val([1,2,3,4,5])\nmax_val([2,3,4,5,6,7])\nmax_val([9,3,5,7,8,2,1,6])\nmax_val([-1,-2,-3,-4,-5])\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = -1\n    if listval is not None:\n        for val in listval:\n            if val >= max_val:\n                max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    # An empty list to hold the max value\n    maxval = None\n    # Loop through the list to find the max value\n    for val in listval:\n        if maxval == None:\n            maxval = val\n        elif val > maxval:\n            maxval = val\n    \n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if max < listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for i in range(0, len(listval)):\n        cur_value = listval[i]\n        if type(cur_value) == int:\n            if max_value is None:\n                max_value = cur_value\n            else:\n                max_value = max(cur_value, max_value)\n        else:\n            print(\"ERROR\")\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return False\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 1\n    for x in range(1,number + 1):\n        if number % x == 0:\n            result = result + x\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([x for x in range(1,number) if number%x==0])\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            sum += divisor\n        divisor += 1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total = total + i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    if number == 1:\n        return 1\n    else:\n        for i in range(1,number):\n            if number % i == 0:\n                divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            count = count + (j - i)\n            arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n        j = j - 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inversion = inversion + 1\n    return inversion \n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    arr1 = [] \n    inv_cnt = 0\n    for i in range(0,n): \n        arr1.append(0) \n    for i in range(0,n): \n        for j in range(0,n): \n            if arr[i] > arr[j] and arr1[i] < arr1[j]: \n                arr1[i] += 1\n                inv_cnt += 1\n    return inv_cnt \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr is None:\n        return 0\n    inv_count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            inv_count = 1\n    else:\n        for i in range(0, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def swap(a, b): \n        return b, a \n    def sort_partially_sorted(arr): \n        n = len(arr) \n        # Initialize the swapped flag \n        swapped = True\n        start = 0\n        end = n-1\n        while(swapped == True): \n            swapped = False\n            for i in range(start, end): \n                if arr[i] > arr[i + 1]: \n                    arr[i], arr[i + 1] = swap(arr[i], arr[i + 1]) \n                    swapped = True\n            if swapped == False: \n                return\n            swapped = False\n            end = end - 1\n            for i in range(end-1, start-1, -1): \n                if arr[i] > arr[i + 1]: \n                    arr[i], arr[i + 1] = swap(arr[i], arr[i + 1]) \n                    swapped = True\n            start = start + 1\n    def count_inv(arr, left, right): \n        if left == right: \n            return 0\n        if left < right: \n            mid = (left + right)//2\n            count = count_inv(arr, left, mid) + count_inv(arr, mid + 1, right) + merge(arr, left, mid, right)\n            return count\n    def merge(arr, left, mid, right): \n        i = left     # index of left subarray \n        j = mid + 1 # index of right subarray \n        k = left     # index of resultant array \n        inv_count = 0\n        while i <= mid and j <= right: \n            if arr[i] > arr[j]: \n                inv_count += (mid-i + 1)\n                # put larger element in result array \n                arr[k] = arr[i]\n                k += 1\n                i += 1\n            else: \n                # put smaller element in result array \n                arr[k] = arr[j]\n                k += 1\n                j += 1\n        while i <= mid: \n            arr[k] = arr[i]\n            k += 1\n            i += 1\n        while j <= right: \n            arr[k] = arr[j]\n            k += 1\n            j += 1\n        return inv_count\n    def count_inversions(arr): \n        # base condition for recursion \n        if len(arr) == 1: \n            return arr[0] \n        n = len(arr) \n        # Sort the array into three parts \n        left = [] \n        mid = [] \n        right = [] \n        for i in range(0, n): \n            if i < (n//3) and (i == 0 or arr[i] > arr[i - 1]): \n                left.append(arr[i]) \n            elif i >= (n//3) and (i == 0 or arr[i] < arr[i - 1]): \n                mid.append(arr[i]) \n            else: \n                right.append(arr[i]) \n        # count the inversions in the three sorted parts \n        inv_count = 0\n        inv_count += count_inversions(left) \n        inv_count += count_inversions(mid) \n        inv_count += merge(left, 0, len(left) - 1, len(right)) \n        return inv_count \n    # Driver code to test above \n    sort_partially_sorted(arr) \n    return count_inversions(arr) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n    \nif __name__ == '__main__': \n    arr = [8, 4, 2, 5, 1, 3, ] \n    res = get_Inv_Count(arr) \n    print(res"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0 or arr is None:\n        return 0\n    else:\n        return inv_count(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    # Loop to count inversions\n    for index in range(0, len(arr)): \n        for i in range(0, len(arr)): \n            if arr[index] > arr[i] and i!=index: \n                inversions += 1\n    return inversions \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    result = []\n    for x in list1:\n        if type(x) == list:\n            result.extend(flatten_list(x))\n        else:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return flatList\n    # print(flatten_list([1, 2, 3, 4]))\n    if list1 ==[]:\n        return []\n    result = []\n    for sublist in list1:\n        if isinstance(sublist,list):\n            result.extend(flatten_list(sublist))\n        else:\n            result.append(sublist)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for x in list1:\n        if type(x) == list:\n            flat_list.extend(flatten_list(x))\n        else:\n            flat_list.append(x)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for i in list1:\n        if type(i) == type([]):\n            output = output + flatten_list(i)\n        else:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == type([]):\n        new = []\n        for i in list1:\n            if type(i) == type([]):\n                for j in i:\n                    if type(j) == type([]):\n                        for k in j:\n                            new.append(k)\n                    else:\n                        new.append(j)\n            else:\n                if type(i) == type([]):\n                    for j in i:\n                        new.append(j)\n                else:\n                    new.append(i)\n        return new\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for i in list1:\n        if isinstance(i, list):\n            l.extend(flatten_list(i))\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for el in list1:\n        if isinstance(el, list):\n            new_list.extend(flatten_list(el))\n        else:\n            new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            for item in item:\n                flat_list.append(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_amt = 0\n    stdata = sorted(stdata,key=lambda x:x[0])\n    for tup in stdata:\n        if max_amt < tup[1]:\n            max_amt = tup[1]\n    return max_amt\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for data in stdata:\n        d[data[0]] += data[1]\n    for i in d:\n        d[i] = max(d[i],d[i]/len(stdata))\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key=lambda x: x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = -float('inf')\n    for st,aggr in stdata:\n        if aggr > max_aggregate:\n            max_aggregate = aggr\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    temp_list =[]\n    for i in range(len(stdata)):\n        temp_list.append(tuple(stdata[i]))\n    for i in range(len(temp_list)):\n        for j in range(i+1,len(temp_list)):\n            if (temp_list[i][1] + temp_list[j][1]) > temp_list[i][0] and (temp_list[i][1] + temp_list[j][1]) > temp_list[j][0] :\n                temp_list[i],temp_list[j] = temp_list[j],temp_list[i]\n            elif (temp_list[i][1] + temp_list[j][1]) == temp_list[i][0] and temp_list[i][1] > temp_list[j][1] :\n                temp_list[i] = temp_list[i][0], temp_list[i][1], temp_list[i][2], temp_list[i][3]\n    maxi = max(temp_list,key=lambda x: x[0])\n    print(\"max aggregate:\",maxi)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxAggregate = 0\n    for i in stdata:\n        for j in i:\n            if j > maxAggregate:\n                maxAggregate = j\n    return maxAggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val=stdata[0][1]\n    max_key=stdata[0][0]\n    for i in stdata:\n        if max_val<i[1]:\n            max_val=i[1]\n            max_key=i[0]\n    return max_key\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_stdata = []\n    for i in range(len(stdata)):\n        total = 0\n        for j in range(len(stdata[i])):\n            total = total + stdata[i][j]\n        aggregate_stdata.append((i, total))\n    aggregate_stdata.sort(key=lambda x: x[1], reverse=True)\n    return aggregate_stdata[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    keys = set()\n    counts = defaultdict(int)\n    for tup in stdata:\n        keys = keys.union(set(tup[0:-1]))\n        for k in tup[0:-1]:\n            counts[k] += 1\n    return max(counts.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = []\n    for ele in stdata:\n        if len(ele) == 3:\n            res.append(ele)\n        elif len(ele) == 2:\n            if ele[0] == ele[1]:\n                continue\n            res.append(ele)\n    res = sorted(res, key=lambda tup: tup[0])\n    return res[-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(length,curr_sum):\n        if length<=0:\n            return 0\n        if length==1:\n            if curr_sum==0:\n                return 1\n            else:\n                return 0\n        res=helper(length-1,curr_sum)\n        if curr_sum<=2**length:\n            res+=helper(length-1,curr_sum+2**length)\n        return res\n    return helper(n,0)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    from math import factorial\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return helper(n-1) + helper(n-2)\n    return helper(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    sum_seq = 0\n    while(n!=0):\n        n -= 1\n        if(sum_seq == 0):\n            sum_seq = 1\n        else:\n            sum_seq = 0\n        count += 1\n    print(count)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # print(2**n)\n    ans = 0\n    for i in range(2**n):\n        s = bin(i)[2:]\n        if int(s[:2],2) == (int(s[2:],2) - int(s[2:],2)):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # **********  SOLUTION **********\n    # from itertools import product\n    # n = int(n)\n    # k = 0\n    # for i in range(n):\n    #     l = list(product('01',repeat=n))\n    #     sum1 = 0\n    #     for j in range(n):\n    #         sum1 += l[j][i]\n    #     sum2 = 0\n    #     for j in range(n,2*n):\n    #         sum2 += l[j][i]\n    #     if(sum1 == sum2):\n    #         k += 1\n    # print(k)\n    # return k\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # We can use recursion to find the pattern for every 2n in the given range.\n    # It is important to know that for every 2n, we can find the pattern for 2n+1.\n    # So we can write the same code for this problem.\n    \n    # This code is very similar to the same code which we used for sum_sequence problem.\n    # We can use a map to solve this problem.\n    \n    m = 65536\n    \n    def recur(s, k):\n        if k == 0:\n            # If k = 0, we have a 2n pattern.\n            # So the total no. of 2n pattern is 2**n.\n            # So the number of 2n patterns is 2**n.\n            \n            # We also need to count the occurrences of 2n pattern in all 2n patterns.\n            return bin(s).count('1')\n        \n        if s == 0:\n            # If s = 0, we can just return the count of 0b0 to 0b2**k - 1.\n            # This counts the number of patterns.\n            return (2**k) - 2**(k-1)\n        \n        # For every 2n, we can find the pattern for 2n+1.\n        # We can use recursion to find that pattern for 2n+1.\n        # The recursion will return a map with the 2n pattern as key and count of it's occurrence as value.\n        \n        return recur(s-1, k) + (2**k)\n        \n    # We can use a map to solve this problem.\n    \n    m = 65536\n    \n    def recur_map(s, k):\n        if k == 0:\n            # If k = 0, we have a 2n pattern.\n            # So the total no. of 2n pattern is 2**n.\n            # So the number of 2n patterns is 2**n.\n            \n            # We also need to count the occurrences of 2n pattern in all 2n patterns.\n            return s\n        \n        if s == 0:\n            # If s = 0, we can just return the count of 0b0 to 0b2**k - 1.\n            return (2**k) - 2**(k-1)\n        \n        # For every 2n, we can find the pattern for 2n+1.\n        # We can use a map to find it.\n        \n        return s - recur_map(s-1, k) + (2**k)\n        \n    \n    # Code for finding the pattern for 2n+1 in s using map.\n    # Count the number of occurrences for every 2n pattern.\n    \n    # We need to find the count for every 2n in the given range.\n    # So we can find the count for every 2n+1 in the given range.\n    # So we can write a recursive function which will find the count of the given range.\n    \n    # We can use recursion to count the 2n+1 in the given range.\n    # We can use a map to count the 2n+1 in the given range.\n    \n    # This code is very similar to the same code which we used for sum_sequence problem.\n    # We can use a map to solve this problem.\n    \n    # Since recursion is used for the above problem, we can write a function for this problem.\n    \n    def count_pattern(s):\n        if s == 0:\n            # If s = 0, we can return 2**n - 1.\n            return 2**n - 1\n        \n        # We can count the number of 2n pattern in s using map.\n        # Count the number of occurrences for every 2n pattern.\n        \n        # We need to find the count for every 2n in the given range.\n        # So we can find the count for every 2n+1 in the given range.\n        # So we can write a recursive function which will find the count of the given range.\n        \n        # We can use recursion to count the 2n+1 in the given range.\n        # We can use a map to count the 2n+1 in the given range.\n        \n        return recur_map(s, n)\n        \n    # Code for finding the pattern for 2n+1 in s using map.\n    # Count the number of occurrences for every 2n pattern.\n    \n    # We need to find the count for every 2n in the given range.\n    # So we can find the count for every 2n+1 in the given range.\n    # So we can write a recursive function which will find the count of the given range.\n    \n    # We can use recursion to count the 2n+1 in the given range.\n    # We can use a map to count the 2n+1 in the given range.\n    \n    # This code is very similar to the same code which we used for sum_sequence problem.\n    # We can use a map to solve this problem.\n    \n    def count_pattern_map(s):\n        if s == 0:\n            # If s = 0, we can return 2**n - 1.\n            return 2**n - 1\n        \n        # We can count the number of 2n pattern in s using map.\n        # Count the number of occurrences for every 2n pattern.\n        \n        # We need to find the count for every 2n in the given range.\n        # So we can find the count for every 2n+1 in the given range.\n        # So we can write a recursive function which will find the count of the given range.\n        \n        # We can use recursion to count the 2n+1 in the given range.\n        # We can use a map to count the 2n+1 in the given range.\n        \n        return recur_map(s, n) + (2**n) - 2**(n-1)\n        \n    # Code for finding the pattern for 2n+1 in s using map.\n    # Count the number of occurrences for every 2n pattern.\n    \n    # We need to find the count for every 2n in the given range.\n    # So we can find the count for every 2n+1 in the given range.\n    # So we can write a recursive function which will find the count of the given range.\n    \n    # We can use recursion to count the 2n+1 in the given range.\n    # We can use a map to count the 2n+1 in the given range.\n    \n    # This code is very similar to the same code which we used for sum_sequence problem.\n    # We can use a map to solve this problem.\n    \n    def count_pattern_map_sum(s):\n        if s == 0:\n            # If s = 0, we can return 2**n - 1.\n            return 2**n - 1\n        \n        # We can count the number of 2n pattern in s using map.\n        # Count the number of occurrences for every 2n pattern.\n        \n        # We need to find the count for every 2n in the given range.\n        # So we can find the count for every 2n+1 in the given range.\n        # So we can write a recursive function which will find the count of the given range.\n        \n        # We can use recursion to count the 2n+1 in the given range.\n        # We can use a map to count the 2n+1 in the given range.\n        \n        # Again, we can count the number of occurrences for every 2n pattern.\n        # Again, we need to find the count for every 2n in the given range.\n        # So we can write a recursive function which will find the count of the given range.\n        \n        # We can use recursion to count the 2n+1 in the given range.\n        # We can use a map to count the 2n+1 in the given range.\n        \n        return recur_map(s, n) + (2**n) - 2**(n-1) + 2**(n-1) - 2**(n-2)\n        \n    # Code for finding the pattern for 2n+1 in s using map.\n    # Count the number of occurrences for every 2n pattern.\n    \n    # We need to find the count for every 2n in the given range.\n    # So we can find the count for every 2n+1 in the given range.\n    # So we can write a recursive function which will find the count of the given range.\n    \n    # We can use recursion to count the 2n+1 in the given range.\n    # We can use a map to count the 2n+1 in the given range.\n    \n    # This code is very similar to the sam"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # if n is less than 2 then no valid binary sequence possible\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n):\n        # memoized and O(n^2)\n        if n <= 1: return 1\n        if n == 2: return 2\n        if memo[n] > 0: return memo[n]\n        memo[n] = count_seq(n-1) + count_seq(n-2)\n        return memo[n]\n    memo = [0]*(n+1)\n    return count_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(m):\n        cnt = 0\n        s = sum(m)\n        if s == 0:\n            return 0\n        for i in range(1, 2**n):\n            if ((s ^ i) > (s >> 1)):\n                cnt += 1\n        return cnt\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for item in d.items():\n        print(item)\n        if isinstance(item, dict):\n            dict_depth(item)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(lambda x: dict_depth(x), d.values()))+1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d.items())\n    \ndef list_depth(l):\n    '''\n    Write a function to find the depth of a list.\n    '''\n    if l == []:\n        return 0\n    elif l == [[]]:\n        return 1\n    else:\n        return max([list_depth(l[i]) for i in range(len(l))]) + 1\n    \ndef rec_depth(obj, depth=1):\n    '''\n    Write a function to find the depth of a list.\n    '''\n    if isinstance(obj, list):\n        return depth + max([rec_depth(i, depth + 1) for i in obj])\n    else:\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    depth = 0\n    while d:\n        depth += 1\n        d = d.get('next')\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + max(dict_depth(value) for value in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max([dict_depth(x) for x in d.values()])\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    from collections import deque\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError(\"dict_depth() expects dict as input\")\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr[index]=arr[index]+ranges\n    if(index+rotations>=len(arr)) :\n        return -1\n    else :\n        return arr[index+rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index\n    while i < len(arr) :\n        if index % 2 == 0 and ranges[i] > ranges[i+1] :\n            ranges[i] = ranges[i+1]\n            index = index + 1\n            rotations[i] = rotations[i+1]\n            i = i + 1\n        elif index % 2 == 1 and ranges[i] > ranges[i-1] :\n            ranges[i] = ranges[i-1]\n            index = index - 1\n            rotations[i] = rotations[i-1]\n            i = i - 1\n        else :\n            break\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr)-1\n    \n    while start<=end :\n        mid = (start+end)//2\n        if arr[mid] == index :\n            #print(\"Index found at \",mid+1)\n            return mid+1\n        if index < arr[mid] :\n            end = mid-1\n        else :\n            start = mid+1\n    \n    #print(\"Index not found\")\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) : \n        if arr[i]>=ranges[i] and arr[i]<ranges[i+1] and arr[i]%rotations[i]==0:\n            index = index + 1\n            if index==index1 :\n                index = 0\n                return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print('ranges : ',ranges)\n    #print('rotations : ',rotations)\n    #print('index : ',index)\n    for i in range(len(ranges)) :\n        #print('ranges : ',ranges[i][0])\n        #print('rotations : ',rotations[i])\n        if index >= ranges[i][0] and index < ranges[i][1] :\n            index = index - ranges[i][0]\n            #print(index)\n            #print('after : ',index)\n            if rotations[i] == -1 :\n                index = index - 1\n                #print('after : ',index)\n                #print('after : ',index)\n            elif rotations[i] == 0 :\n                pass\n            else :\n                index = index + rotations[i]\n                #print('after : ',index)\n    if index < 0 :\n        index = index + len(arr)\n    if index >= len(arr) :\n        index = index - len(arr)\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x=0\n    for i in range(index,ranges) :\n        if arr[i]>=ranges :\n            x=i\n            break\n    return x\n    \n    \n    \n    \ndef find_Element_after_rotation(arr,ranges,rotations,index) : \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x=0\n    for i in range(index,ranges):\n        if arr[i]<=ranges :\n            x=i\n            break\n    return x\n        \n    \n    \n    \ndef find_Element_after_rotation_min(arr,ranges,rotations,index) : \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x=0\n    for i in range(index,ranges):\n        if arr[i]<=ranges :\n            x=i\n            break\n    return x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)):\n        if ranges[i][0] <= index < ranges[i][1]:\n            return(arr[i] + rotations[i])\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    count = 0\n    i = 0\n    while(count!= index and i < len(ranges)) :\n        if(arr[i] + rotations >= ranges[i]):\n            count = count + 1\n        i = i + 1\n    if(i == len(ranges)) :\n        return -1\n    return i\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp=arr[index]\n    rotations-=1\n    while rotations>0 and index!=len(arr)-1:\n        index=(index+ranges)%len(arr)\n        rotations-=1\n    return temp\n    \nif __name__ == \"__main__\":\n    arr = [1, 5, 9, 3, 5, 8, 3, 6, 8, 2, 6, 9, 1, 8, 2]\n    ranges = 1\n    rotations = 6\n    index = len(arr)-1\n    print(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr)\n    count = 0\n    for i in range(index+1,len(arr)):\n        if(arr[i] >= ranges) :\n            count+=1\n            #print(arr[i],count)\n            #print(index,arr[i])\n            #print()\n            if(count >= rotations) :\n                #print(count)\n                return arr[i]\n    #print(count)\n    if(count == 0) :\n        return -1\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n    return 'There are no p words in the list'\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = []\n    for w in words:\n        if w[0]=='p':\n            word.append(w)\n    return word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0]=='p':\n            return i[1:], i[1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_len = len(words)\n    count = 0\n    p_list = []\n    while count < words_len:\n        if words[count][0] == 'p':\n            p_list.append(words[count])\n        count += 1\n    return p_list\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = re.search(r'p.*',words)\n    return(first.group(0),first.group(0))\nprint(start_withp(words = ['dogs','stuffy', 'dolly', 'puppy', 'puppies', 'puppy', 'ball', 'balls', 'balls', 'dollies']))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return([w for w in words if re.search(r'^p',w)])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w.startswith('p'):\n            return w, w\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0].lower() == 'p':\n            return words[i], words[i+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith('p'):\n            return i,i\n            \ndef count_num_digits(n):\n    return len(n)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n    if k == n:\n        return a[index]\n    ans = 0\n    for i in range(index, -1, -1):\n        sub_ans = max_sum_increasing_subseq(a, n, i - 1, k)\n        if sub_ans > ans:\n            ans = sub_ans + a[i]\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    \ndef max_sum_increasing_subseq_dp(a, n):\n    '''\n    Dp approach using dynamic programming\n    '''\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            d[i][j] = max(d[i][j - 1] + a[j], d[i - 1][j] + a[j])\n    print(d)\n    return dp_max_sum_increasing_subseq(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq(d, n, index):\n    '''\n    dp approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq(d, n, index - 1) + d[index][index - 1])\n    \ndef max_sum_increasing_subseq_memo(a, n):\n    '''\n    Memoization approach using dynamic programming\n    '''\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            d[i][j] = max(d[i][j - 1] + a[j], d[i - 1][j] + a[j])\n    return dp_max_sum_increasing_subseq_memo(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq_memo(d, n, index):\n    '''\n    Memoization approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq_memo(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq_memo(d, n, index - 1) + d[index][index - 1])\n    \ndef max_sum_increasing_subseq_bottomup(a, n):\n    '''\n    Bottom up approach using dynamic programming\n    '''\n    d = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j]:\n                d[i] = max(d[i], d[j] + a[i])\n    return dp_max_sum_increasing_subseq(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq(d, n, index):\n    '''\n    Bottom up approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq(d, n, index - 1) + d[index][index - 1])\n    \ndef max_sum_increasing_subseq_bottomup_memo(a, n):\n    '''\n    Bottom up approach using dynamic programming\n    '''\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j]:\n                d[i][j] = max(d[i][j], d[j][i] + a[i])\n    return dp_max_sum_increasing_subseq_memo(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq_memo(d, n, index):\n    '''\n    Bottom up approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq_memo(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq_memo(d, n, index - 1) + d[index][index - 1])\n    \n    \ndef max_sum_increasing_subseq_topdown_memo(a, n):\n    '''\n    Top down approach using dynamic programming\n    '''\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j]:\n                d[i][j] = max(d[i][j], d[j][i] + a[i])\n    return dp_max_sum_increasing_subseq_memo_topdown(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq_memo_topdown(d, n, index):\n    '''\n    Bottom up approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq_memo_topdown(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq_memo_topdown(d, n, index - 1) + d[index][index - 1])\n    \ndef max_sum_increasing_subseq_topdown_bottomup(a, n):\n    '''\n    Top down approach using dynamic programming\n    '''\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j]:\n                d[i][j] = max(d[i][j], d[j][i] + a[i])\n    return dp_max_sum_increasing_subseq_memo_topdown(d, n, n - 1)\n    \ndef dp_max_sum_increasing_subseq_memo_topdown(d, n, index):\n    '''\n    Bottom up approach\n    '''\n    if index == 0:\n        return d[index][index]\n    if index == 1:\n        return d[0][0] + a[index]\n    return max(dp_max_sum_increasing_subseq_memo_topdown(d, n, index - 1) + a[index], dp_max_sum_increasing_subseq_memo_topdown(d, n, index - 1) + d[index][index - 1])\n    \n    \nif __name__ == \"__main__\":\n    # a = [1, 2, 3, 4]\n    # print(max_sum_increasing_subseq(a, 4, 0))\n    # print(max_sum_increasing_subseq_dp(a, 4))\n    # print(max_sum_increasing_subseq_memo(a, 4))\n    # print(max_sum_increasing_subseq_bottomup(a, 4))\n    # print(max_sum_increasing_subseq_bottomup_memo(a, 4))\n    # print(max_sum_increasing_subseq_topdown(a, 4))\n    # print(max_sum_increasing_subseq_topdown_memo(a, 4))\n    # print(max_sum_increasing_subseq_topdown_bottomup(a, 4))\n    # print(max_sum_increasing_subseq_topdown_bottomup_memo(a, 4))\n    a = [7, 1, 2, 4, 5, 3, 6]\n    print(max_sum_increasing"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # 1. if subseq exists\n    if index <= 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum, max_ending_here, prefix_sum\n    if n == 0:\n        return 0\n    if max_sum < max_ending_here + a[index]:\n        max_sum = max_ending_here + a[index]\n    prefix_sum[index] = prefix_sum[index - 1] + a[index]\n    max_ending_here = max_ending_here + a[index]\n    return max_ending_here + max_sum_increasing_subseq(a, n - 1, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_ending_here = a[index]\n    max_ending_here_index = index\n    for j in range(index+1, n):\n        if (max_ending_here < a[j] and a[j] + max_ending_here >= k):\n            max_ending_here = a[j] + max_ending_here\n            max_ending_here_index = j\n    return max_ending_here, max_ending_here_index\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    a.sort()\n    \n    n = len(a)\n    \n    \n    for i in range(n):\n        if i <= index:\n            continue\n        if i > index:\n            break\n        \n        if a[i] >= k:\n            print(a[i], end = \" \")\n            break\n        \n    \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    a.sort()\n    max_sum = -float('inf')\n    s = 0\n    for i in range(index+1, n):\n        s += a[i]\n        if s < k:\n            continue\n        elif s == k:\n            max_sum = max(max_sum, s)\n        else:\n            max_sum = max(max_sum, s - a[i - index - 1])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    result = 0\n    for i in range(n):\n        if s + a[i] <= k:\n            s += a[i]\n        else:\n            s = a[i]\n        result = max(result, s)\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(m-1,-1,-1):\n        colon.append(tuplex[i])\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    rst =[]\n    for t in tuplex:\n        rst.append(t[:m] + t[m:n] + t[n:])\n    return rst\n    \ndef test_colon_tuplex():\n    assert colon_tuplex((),1,1) == ()\n    assert colon_tuplex(((1,2,3),),1,1) == ((1,2,3),)\n    assert colon_tuplex(((1,2,3),(1,2,4),),1,2) == ((1,2,3),(1,2,4))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),1,2) == ((1,2,3),(1,2,4))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),2,4) == ((1,2,4,5),(1,2,3))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),2,5) == ((1,2,4,5),(1,2,3))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),3,5) == ((1,2,3,4,5),(1,2,3))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),3,4) == ((1,2,3,4),(1,2,4,5))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),4,5) == ((1,2,4,5),(1,2,3))\n    assert colon_tuplex(((1,2,3),(1,2,4),(1,2,5)),5,5) == ((1,2,3,4,5),)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (m,tuplex[1][n])\ndef remove_empty_tuple(tuplex):\n    '''\n    Write a function to remove empty tuple from tuple.\n    '''\n    return tuplex[1:]\ndef check_empty_tuple(tuplex):\n    '''\n    Write a function to check empty tuple or not.\n    '''\n    return len(tuplex) == 0\ndef print_colon_tuple(tuplex):\n    '''\n    Write a function to print colon tuple.\n    '''\n    for i in range(len(tuplex)):\n        print(i+1,\":\",tuplex[i])\ndef min_max_values(tuplex):\n    '''\n    Write a function to get minimum and maximum values of tuple.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_x < tuplex[i][0]:\n            max_x = tuplex[i][0]\n        if min_y > tuplex[i][1]:\n            min_y = tuplex[i][1]\n        if max_y < tuplex[i][1]:\n            max_y = tuplex[i][1]\n    return (min_x,min_y,max_x,max_y)\ndef get_all_colon_tuples(tuplex):\n    '''\n    Write a function to get all colon tuples.\n    '''\n    colon_tuple_list = []\n    for i in range(len(tuplex)):\n        colon_tuple_list.append(colon_tuplex(tuplex,i+1,0))\n        colon_tuple_list.append(colon_tuplex(tuplex,i+1,1))\n    return colon_tuple_list\ndef get_n_colon_tuples(tuplex,n):\n    '''\n    Write a function to get n-colon tuples.\n    '''\n    colon_tuple_list = []\n    for i in range(len(tuplex)):\n        if i+1 == n:\n            break\n        colon_tuple_list.append(colon_tuplex(tuplex,i+1,0))\n        colon_tuple_list.append(colon_tuplex(tuplex,i+1,1))\n    return colon_tuple_list\ndef all_empty_colon_tuples(tuplex):\n    '''\n    Write a function to check all empty colon tuples or not.\n    '''\n    for i in range(len(tuplex)):\n        if len(tuplex[i])!= 2:\n            return False\n    return True\ndef get_colon_values_from_all_colon_tuples(tuplex):\n    '''\n    Write a function to get all colon values from all colon tuples.\n    '''\n    colon_tuple_list = []\n    for i in range(len(tuplex)):\n        colon_tuple_list.append(tuplex[i][0])\n        colon_tuple_list.append(tuplex[i][1])\n    return colon_tuple_list\ndef get_colon_values_from_min_max_colon_tuples(tuplex):\n    '''\n    Write a function to get all colon values from min and max colon tuples.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_x < tuplex[i][0]:\n            max_x = tuplex[i][0]\n        if min_y > tuplex[i][1]:\n            min_y = tuplex[i][1]\n        if max_y < tuplex[i][1]:\n            max_y = tuplex[i][1]\n    return (min_x,min_y,max_x,max_y)\ndef get_colon_values_from_n_min_max_colon_tuples(tuplex,n):\n    '''\n    Write a function to get n-min and n-max colon values from min and max colon tuples.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if i+1 == n:\n            break\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_x < tuplex[i][0]:\n            max_x = tuplex[i][0]\n        if min_y > tuplex[i][1]:\n            min_y = tuplex[i][1]\n        if max_y < tuplex[i][1]:\n            max_y = tuplex[i][1]\n    return (min_x,min_y,max_x,max_y)\ndef get_colon_values_from_all_min_max_colon_tuples(tuplex):\n    '''\n    Write a function to get all min and max colon values from all colon tuples.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_x < tuplex[i][0]:\n            max_x = tuplex[i][0]\n        if min_y > tuplex[i][1]:\n            min_y = tuplex[i][1]\n        if max_y < tuplex[i][1]:\n            max_y = tuplex[i][1]\n    return (min_x,min_y,max_x,max_y)\ndef get_colon_values_from_n_min_max_colon_tuples_convert_to_int(tuplex,n):\n    '''\n    Write a function to get n-min and n-max colon values from min and max colon tuples.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if i+1 == n:\n            break\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_x < tuplex[i][0]:\n            max_x = tuplex[i][0]\n        if min_y > tuplex[i][1]:\n            min_y = tuplex[i][1]\n        if max_y < tuplex[i][1]:\n            max_y = tuplex[i][1]\n    return (int(min_x),int(min_y),int(max_x),int(max_y))\ndef get_colon_values_from_all_min_max_colon_tuples_convert_to_int(tuplex):\n    '''\n    Write a function to get all min and max colon values from all colon tuples.\n    '''\n    min_x = min_y = tuplex[0][0]\n    max_x = max_y = tuplex[0][0]\n    for i in range(len(tuplex)):\n        if min_x > tuplex[i][0]:\n            min_x = tuplex[i][0]\n        if max_"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=0\n    res=[]\n    for i in range(n):\n        if c==m:\n            res.append(tuplex[i])\n            c=0\n        c+=1\n    return tuple(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[m:n])\ndef print_tuple(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_2(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in tuplex:\n        print(x,end=\" \")\n    print()\ndef print_tuple_3(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_4(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in tuplex:\n        print(x,end=\" \")\n    print()\ndef print_tuple_5(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_6(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_7(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_8(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_9(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_10(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_11(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_12(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_13(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_14(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_15(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_16(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_17(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_18(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_19(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_20(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_21(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_22(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_23(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_24(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_25(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_26(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_27(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_28(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_29(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_30(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_31(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")\n    print()\ndef print_tuple_32(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    for x in range(len(tuplex)):\n        print(tuplex[x],end=\" \")"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(n):\n        colon.append(tuplex[i][m])\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (tuplex[m:n]+tuplex[n:],)\ndef ic(tuplex):\n    '''\n    Write a function to get the intersection of a tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    if len(tuplex)==1:\n        return tuplex[0]\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex):\n        while j<=len(tuplex):\n            if i==j:\n                return tuplex[i]\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    return tuplex[k]\ndef ci(tuplex):\n    '''\n    Write a function to get the complement of a tuple.\n    '''\n    if len(tuplex)==0:\n        return tuplex\n    if len(tuplex)==1:\n        return tuplex[0]\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex):\n        while j<=len(tuplex):\n            if i==j:\n                return tuplex[i]\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    i=0\n    while i<=len(tuplex):\n        if i==k:\n            return tuplex[i]\n        else:\n            i+=1\n    return tuplex[k]\ndef is_subset(tuplex1,tuplex2):\n    '''\n    Write a function to check whether a tuple is a subset of another tuple.\n    '''\n    if len(tuplex1)!=len(tuplex2):\n        return False\n    if len(tuplex1)==0:\n        return True\n    if len(tuplex2)==0:\n        return False\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex1):\n        while j<=len(tuplex2):\n            if i==j:\n                return True\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    return False\ndef all_subsets(tuplex):\n    '''\n    Write a function to get all subsets of a tuple.\n    '''\n    if len(tuplex)==0:\n        return [[]]\n    if len(tuplex)==1:\n        return [[tuplex[0]],[],]\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex):\n        while j<=len(tuplex):\n            if i==j:\n                return [[tuplex[i]],[tuplex[i]],tuplex[i],]\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    return [[tuplex[i]],[tuplex[i]],tuplex[i]]\ndef all_subsets_no_rep(tuplex):\n    '''\n    Write a function to get all subsets of a tuple, except subsets that contain a repeated element.\n    '''\n    if len(tuplex)==0:\n        return [[]]\n    if len(tuplex)==1:\n        return [[tuplex[0]],[],]\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex):\n        while j<=len(tuplex):\n            if i==j:\n                return [[tuplex[i]],[tuplex[i]],tuplex[i],]\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    i=0\n    while i<=len(tuplex):\n        if i==k:\n            return [[tuplex[i]],[tuplex[i]],tuplex[i],tuplex[i],]\n        else:\n            i+=1\n    return [[tuplex[i]],[tuplex[i]],tuplex[i],]\ndef all_subsets_rep(tuplex):\n    '''\n    Write a function to get all subsets of a tuple, except subsets that contain a repeated element.\n    '''\n    if len(tuplex)==0:\n        return [[]]\n    if len(tuplex)==1:\n        return [[tuplex[0]],[],]\n    i=0\n    j=1\n    k=2\n    while i<=len(tuplex):\n        while j<=len(tuplex):\n            if i==j:\n                return [[tuplex[i]],[tuplex[i]],tuplex[i],tuplex[i],tuplex[i],]\n            else:\n                i+=1\n                j+=1\n        j=1\n        i+=1\n        k+=1\n    i=0\n    while i<=len(tuplex):\n        if i==k:\n            return [[tuplex[i]],[tuplex[i]],tuplex[i],tuplex[i],tuplex[i],tuplex[i],]\n        else:\n            i+=1\n    return [[tuplex[i]],[tuplex[i]],tuplex[i],tuplex[i],tuplex[i],tuplex[i],]\ndef print_tuplex(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    print(tuplex)\ndef print_m_n_tuplex(m,n,tuplex):\n    '''\n    Write a function to print a tuple of a tuple.\n    '''\n    print(tuplex[:m]+tuplex[m:n]+tuplex[n:],)\ndef print_tuplex_of_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to print the union of a tuple and a tuple.\n    '''\n    print(tuplex1+tuplex2,)\ndef print_tuplex_of_tuplex_intersection(tuplex1,tuplex2):\n    '''\n    Write a function to print the intersection of a tuple and a tuple.\n    '''\n    print(ic(tuplex1),)\ndef print_tuplex_of_tuplex_complement(tuplex1,tuplex2):\n    '''\n    Write a function to print the complement of a tuple and a tuple.\n    '''\n    print(ci(tuplex1),)\ndef print_tuplex_of_all_subsets(tuplex):\n    '''\n    Write a function to print all subsets of a tuple.\n    '''\n    print(all_subsets(tuplex))\ndef print_tuplex_of_all_subsets_no_rep(tuplex):\n    '''\n    Write a function to print all subsets of a tuple except subsets that contain a repeated element.\n    '''\n    print(all_subsets_no_rep(tuplex))\ndef print_tuplex_of_all_subsets_rep(tuplex):\n    '''\n    Write a function to print all subsets of a tuple except subsets that contain a repeated element.\n    '''\n    print(all_subsets_rep(tuplex))\ndef print_tuplex_of_tuplex_no_rep_intersection(tuplex1,tuplex2):\n    '''\n    Write a function to print the intersection of a tuple and a tuple, except subsets that contain a repeated element.\n    '''\n    print(ic(tuplex1),)\ndef print_tuplex_of_tuplex_no_rep_complement(tuplex1,tuplex2):\n    '''\n    Write a function to print the complement of a tuple and a tuple, except subsets that contain a repeated element.\n    '''\n    print(ci(tuplex1),"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m] + tuplex[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+m] for i in range(0,len(tuplex),m))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #tuplex = (1,2,3,4,5,6)\n    #m = 2\n    #n = 3\n    if tuplex == ():\n        return 0\n    if m == n:\n        return tuplex\n    if m == 0:\n        return 0\n    if n == 0:\n        return tuplex\n    if m > 0:\n        if tuplex[m-1] == n:\n            return colon_tuplex(tuplex[m:],m-1,n-1)\n        else:\n            return colon_tuplex(tuplex[m:],m,n-1)\n    if n > 0:\n        if tuplex[n-1] == m:\n            return colon_tuplex(tuplex[n:],n-1,m-1)\n        else:\n            return colon_tuplex(tuplex[n:],n,m-1)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N >= len(nums1) and N >= len(nums2):\n        return\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return heapq.nlargest(N, heapq.nlargest(N, nums1), key=lambda x: x * nums2[x])\n    # return heapq.nlargest(N, nums1, key=lambda x: nums2[x] * nums1[x])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if nums1 == None or nums2 == None:\n        return None\n    # edge case\n    if N == 0:\n        return []\n    if N > len(nums1) or N > len(nums2):\n        return None\n    if N == len(nums1) or N == len(nums2):\n        return sorted(nums1 + nums2)\n    if N == len(nums1) + 1:\n        return sorted(nums1 + nums2)[:N]\n    if N == len(nums1) + 2:\n        return sorted(nums1 + nums2)[:N]\n    if N == len(nums2) + 1:\n        return sorted(nums1 + nums2)[:N]\n    if N == len(nums2) + 2:\n        return sorted(nums1 + nums2)[:N]\n    # general case\n    largest = [0 for i in range(N)]\n    max_product_idx = N - 1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if largest[i] == 0 or largest[j] == 0:\n                if nums1[i] * nums2[j] > largest[max_product_idx]:\n                    largest[max_product_idx] = nums1[i] * nums2[j]\n                    max_product_idx = max_product_idx - 1\n                    if max_product_idx < 0:\n                        break\n    return sorted(largest)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return -1\n    \n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n    \n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    start = 0\n    end = len(nums2) - 1\n    \n    while start <= end:\n        if end == 0:\n            temp = nums1.pop(start)\n            nums2.pop(0)\n        else:\n            temp = nums1_copy.pop(start)\n            nums2_copy.pop(0)\n        \n        if temp > max(nums2_copy) * max(nums1):\n            return temp\n        \n        if start == len(nums1) - 1:\n            start = 0\n            end = len(nums2) - 1\n        else:\n            start = start + 1\n    \n    return -1\n    \n    "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) <= 0 or len(nums2) <= 0:\n        return []\n    \n    \n    if N >= len(nums1) or N >= len(nums2):\n        return []\n    \n    result = []\n    \n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            result.append(nums1[i])\n        else:\n            result.append(nums2[i])\n    \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l_max = [-1 for i in range(N)]\n    l_min = [-1 for i in range(N)]\n    s_max = [-1 for i in range(N)]\n    s_min = [-1 for i in range(N)]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    products = []\n    while len(products) < N:\n        for i in range(N - len(products)):\n            products.append(nums1[i] * nums2[i])\n        nums1 = nums1[:len(nums1)-1]\n        nums2 = nums2[:len(nums2)-1]\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort both lists and do product for each\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    # print(nums1)\n    # print(nums2)\n    products = []\n    product = 1\n    n = N\n    while n > 0:\n        x = nums1.pop()\n        y = nums2.pop()\n        product = x * y\n        products.append(product)\n        n -= 1\n    products.sort(reverse=True)\n    # print(products)\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num1 = []\n    num2 = []\n    for i in range(0, N):\n        num1.append(nums1[i])\n        num2.append(nums2[i])\n    num1.sort()\n    num2.sort()\n    i = 0\n    j = 0\n    k = 0\n    max_product = 0\n    while i < N and j < N:\n        if num1[i] >= num2[j]:\n            if num1[i] >= num2[k]:\n                k = j\n                max_product = max_product * num1[i]\n            i += 1\n        else:\n            if num2[j] >= num1[k]:\n                k = i\n                max_product = max_product * num2[j]\n            j += 1\n    print(max_product)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n        \ndef maximum1(a,b):\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f\"{a} is greater than {b}\")\n    elif a==b:\n        print(f\"{a} is equal to {b}\")\n    else:\n        print(f\"{b} is greater than {a}\")\nmaximum(10,20)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        print(f'{a} is maximum')\n    else:\n        print(f'{b} is maximum')\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(1,5))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_num = a if a > b else b\n    print(max_num)\nmaximum(2,3)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \nprint(maximum(3,4))\nprint(maximum(4,3))\nprint(maximum(2,2))\nprint(maximum(2.5,2))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(5,6))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s1 = str1.split(' ')\n    t1 = tuple(s1)\n    return t1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    return tuple(str1)\n    "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip('\"')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(t1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return str(t1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(' ')\n    l = []\n    for s in str1:\n        l.append(s)\n    return tuple(l)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.split(\",\")\n    tuple_str = []\n    for i in str1:\n        tuple_str.append(i)\n    return tuple(tuple_str)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    # print('\\n',tuple(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #set a counter\n    counter = 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # n = [x for x in range(32)]\n    # print(n)\n    n[0] = 1\n    for i in range(len(n)):\n        if n[i] == 0:\n            n[i] = 1\n            break\n    return n[0]\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & ~(1 << n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_representation = bin(n)\n    first_1_index = binary_representation.index('1')\n    binary_representation = binary_representation[first_1_index:]\n    n = int(binary_representation, 2)\n    return n\n    \nprint(f'Original number is {n}')\nset_left_most_unset_bit(n)\nprint(f'New number is {n}')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if we use python3.8 or greater, we can use left most set bit, because both left most set bit and left most unset bit are the same in binary representation. \n    # if we use python2.7, we have to use left most set bit, because both left most set bit and left most unset bit are different in binary representation.\n    return n | (1<<n.bit_length() - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    print(f\"The left most unset bit in {n} is {(n >> 1) & 0b1}\")\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | 0b1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #    n =  8\n    #   0000 1000 0000 0000 0000 0000 0000 0000 0000 0000\n    #  010  100  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010  010  010  010  010\n    #  010  010  010  010  010 "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(1<<n.bit_length()-1)\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return n & ~(1<<n.bit_length()-1) | (1<<n.bit_length()-1)\n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return n | (1<<n.bit_length()-1)\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return n | (1<<n.bit_length()-1)\n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return n ^ (1<<n.bit_length()-1)\n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return n ^ (1<<n.bit_length()-1) | (1<<n.bit_length()-1)\n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    return n ^ (1<<n.bit_length()-1)\n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    return n ^ (1<<n.bit_length()-1) | (1<<n.bit_length()-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (1 << 0)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Left Most unset Bit\n    n = n & (2**n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 1/3*math.pi*r**2*h\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = math.pi*r**2*h\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)\n    return vol\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere-cylinder combination.\n    '''\n    vol = volume_sphere(r)+volume_cylinder(r,h)\n    return vol\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere-cone combination.\n    '''\n    vol = volume_sphere(r)+volume_cone(r,h)\n    return vol\ndef volume_sphere_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere-sphere combination.\n    '''\n    vol = volume_sphere(r)+volume_sphere(r)\n    return vol\ndef volume_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)+volume_cylinder(r,h)\n    return vol\ndef volume_cone_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere-cone combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)+volume_cone(r,h)\n    return vol\ndef volume_cone_sphere_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere-sphere combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)+volume_sphere(r)\n    return vol\ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cylinder combination.\n    '''\n    vol = math.pi*r**2*h\n    return vol\ndef volume_cone_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_sphere_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere-sphere-cylinder combination.\n    '''\n    vol = volume_sphere(r)+volume_sphere(r)+volume_cylinder(r,h)\n    return vol\ndef volume_sphere_sphere_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere-sphere-sphere combination.\n    '''\n    vol = volume_sphere(r)+volume_sphere(r)+volume_sphere(r)\n    return vol\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder-sphere combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cylinder_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder-sphere-cylinder combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder-sphere combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cylinder_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder-sphere-cone combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_sphere(r)\n    return vol\ndef volume_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)\n    return vol\ndef volume_cylinder_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cone-cylinder combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cone(r,h)\n    return vol\ndef volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder-cone combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cylinder_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder-sphere-cone combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_sphere(r)\n    return vol\ndef volume_cone_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cone-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cone-sphere combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cone(r,h)\n    return vol\ndef volume_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cone-sphere combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cone(r,h)\n    return vol\ndef volume_cylinder_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder-sphere-cone combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_sphere(r)\n    return vol\ndef volume_cone_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere-cone combination.\n    '''\n    vol = volume_cone(r,h)+volume_sphere(r)\n    return vol\ndef volume_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cone-sphere combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cone(r,h)\n    return vol\ndef volume_cylinder_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cylinder-cone combination.\n    '''\n    vol = volume_cylinder(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cone_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cone-cylinder combination.\n    '''\n    vol = volume_cone(r,h)+volume_cylinder(r,h)\n    return vol\ndef volume_cy"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r**2)*(math.pi*r)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((b*h)/3)*((b+h)/2)*math.sqrt(b**2 + h**2)\ndef volume_pyramid_wide(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((b*h)/3)*((b+h)/2)*(b+h)/2\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*math.pow(r,2)*h\n    return volume\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = math.pi*r*h\n    return area\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*math.pow(r,2)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*math.pow(r,3)\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*math.pow(r,2)*h\n    return area\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*math.pow(r,2)*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*math.pow(r,2)*h\n    return volume\ndef area_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone-cylinder.\n    '''\n    area = math.pi*math.pow(r,2)*h\n    return area\ndef surface_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone-cylinder.\n    '''\n    area = math.pi*math.pow(r,2)*h\n    return area\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder.\n    '''\n    volume = math.pi*math.pow(r,3)*h\n    return volume\ndef surface_cone_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone-cone.\n    '''\n    area = math.pi*math.pow(r,2)*h\n    return area\ndef surface_cone_sphere(r):\n    '''\n    Write a function to find the surface area of a cone-sphere.\n    '''\n    area = math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,2))\n    return area\ndef volume_cone_sphere(r):\n    '''\n    Write a function to find the volume of a cone-sphere.\n    '''\n    volume = math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,3))\n    return volume\ndef area_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere-sphere.\n    '''\n    area = 4*math.pi*math.pow(r,2)\n    return area\ndef surface_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere-sphere.\n    '''\n    area = 4*math.pi*math.pow(r,3)\n    return area\ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere-sphere.\n    '''\n    volume = math.pi*math.pow(r,3)\n    return volume\ndef surface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cylinder-sphere.\n    '''\n    area = 2*math.pi*math.pow(r,2)*h\n    return area\ndef surface_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder-cylinder.\n    '''\n    area = 2*math.pi*math.pow(r,2)*h\n    return area\ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder-cylinder.\n    '''\n    volume = math.pi*math.pow(r,2)*h\n    return volume\ndef surface_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone-sphere-cylinder.\n    '''\n    area = math.pi*math.pow(r,3)*h\n    return area\ndef surface_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone-cylinder.\n    '''\n    area = math.pi*math.pow(r,2)*h\n    return area\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone-cylinder.\n    '''\n    volume = math.pi*math.pow(r,3)*h\n    return volume\ndef surface_cone_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone-cone.\n    '''\n    area = math.pi*math.pow(r,2)*h\n    return area\ndef surface_cone_sphere(r):\n    '''\n    Write a function to find the surface area of a cone-sphere.\n    '''\n    area = math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,2))\n    return area\ndef volume_cone_sphere(r):\n    '''\n    Write a function to find the volume of a cone-sphere.\n    '''\n    volume = math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,3))\n    return volume\ndef area_sphere_cone(r):\n    '''\n    Write a function to find the surface area of a sphere-cone.\n    '''\n    area = 4*math.pi*math.pow(r,2)\n    return area\ndef area_sphere_cylinder(r):\n    '''\n    Write a function to find the surface area of a sphere-cylinder.\n    '''\n    area = 4*math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,2))\n    return area\ndef volume_sphere_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere-cylinder.\n    '''\n    volume = math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,3))\n    return volume\ndef surface_sphere_cone(r):\n    '''\n    Write a function to find the surface area of a sphere-cone.\n    '''\n    area = 4*math.pi*math.pow(r,3)\n    return area\ndef surface_sphere_cylinder(r):\n    '''\n    Write a function to find the surface area of a sphere-cylinder.\n    '''\n    area = 4*math.pi*math.pow(r,2)*math.sqrt(2*math.pi*math.pow(r,2))\n    return area\ndef volume_sphere_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere-cylinder.\n    '''\n    volume = math.pi*math.pow(r,3)*math.sqrt(2*math.pi*math.pow(r,3))\n    return volume\ndef surface_cylinder_cone(r,h):\n    '''\n    Write a function to find the surface area of a cylinder-cone.\n    '''\n    area = 2*math.pi*math.pow(r,2)*h\n    return area\ndef surface_cylinder_cylinder(r,h):\n    '''\n    Write a function t"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = math.sqrt(3.14*(h**2) + (r**2)*(3.14/4))\n    volume = 3.14*radius*r**2\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #print(3*math.pi*r**2*h)\n    return 3*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi/3)*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*r**2*h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0: \n        return 0\n    power = 0\n    while n: \n        n = n >> 1\n        power += 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    if n<0: \n        return \"Please enter a positive integer\"\n    while n>0: \n        n = n>>1\n        count += 1\n    return count\nprint(highest_Power_of_2(0))\nprint(highest_Power_of_2(1))\nprint(highest_Power_of_2(9))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(bin(n)[2:].count('1'))"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x=0\n    for i in range(1,n+1):\n        if i==1:\n            x=i\n        if i==n:\n            x=n\n        else:\n            x=i*x\n            \n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    while n >= 2:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n - 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the output and the variable \n    # power and output \n    output = 0\n    power = 0\n    while (n >= output): \n        output = 2 ** power \n        power += 1\n    return power-1\n  \n  "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n -= 1\n    while n > 0:\n        if n & n-1:\n            n = n-1\n        else:\n            n >>= 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    power = 0\n    while n >= 2**power:\n        power += 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1: \n        return 0\n    max_power = 0\n    while n:\n        n >>= 1\n        if n == 1:\n            break\n        max_power += 1\n    return max_power\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num = 2\n    num_lucas = 2\n    while num < n:\n        num_lucas = num_lucas + num_lucas\n        num = num + 1\n    return num_lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0: \n        return 0\n    \n    if n == 1: \n        return 1\n    \n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    elif n == 2: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return 0\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return 1\n    for i in range(n):\n        a, b = b, a+b\n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n    \n    \ndef reverse_list(list_):\n    '''\n    Write a function to reverse the order of all of the elements in a list.\n    '''\n    return list_[::-1]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.insert(0, string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(list_) for list_ in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format_string % x for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i), end='')\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d1[l1[0]] = {}\n    d1[l1[0]][l1[1]] = l2\n    d1[l1[0]][l1[1]][l1[2]] = l3\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(0, len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if key in result:\n            if result[key]:\n                result[key].append(value)\n            else:\n                result[key] = [value]\n        else:\n            result[key] = value\n    for i in range(0, len(l3)):\n        key = l3[i]\n        if key in result:\n            if result[key]:\n                result[key].append(l4[i])\n            else:\n                result[key] = [l4[i]]\n        else:\n            result[key] = l4[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    d1 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not l1 or not l2 or not l3:\n        return {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic1 = dict(zip(l1, l2))\n    dic2 = dict(zip(l1, l3))\n    return dic1, dic2\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary1 = {}\n    dictionary2 = {}\n    dictionary3 = {}\n    i = 0\n    j = 0\n    k = 0\n    while i < len(l1):\n        dictionary1[l1[i]] = l2[i]\n        i = i + 1\n    while j < len(l1):\n        dictionary2[l1[j]] = l3[j]\n        j = j + 1\n    while k < len(l1):\n        dictionary3[l1[k]] = l2[k]\n        k = k + 1\n    return dictionary1, dictionary2, dictionary3"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        if l3:\n            nested_dict[l1[i]] = l3[i]\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = l1 + l2 + l3\n    l1 = dict(enumerate(l1))\n    print (l1)\n    \n    \n    \ndef find_duplicates_in_list(list1):\n    '''\n    Write a function to find duplicate in list.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j]:\n                print (list1[i], list1[j])\n                return True\n    return False\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for l1_item in l1:\n        for l2_item in l2:\n            d[l1_item] = l2_item\n    for l3_item in l3:\n        d[l3_item] = l3_item\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = []\n    for l in l1, l2, l3:\n        d = {}\n        for i, v in enumerate(l):\n            d[i] = v\n        lst.append(d)\n    return lst\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # input range\n    min, max = 0, 5\n    \n    # Loop for the range\n    while min < max:\n        mid = (min + max) // 2\n        print(min, max, mid)\n        if (get_max_sum_rec (mid) > n):\n            max = mid - 1\n        else:\n            min = mid + 1\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return n + (max(f(n/2), f(n/3), f(n/4), f(n/5)))\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n + max( get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # given equation:\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # f(n) = max( f(n/2) + f(n/3), n)\n    # f(n) = max( (f(n/2) + f(n/3)), n)\n    # f(n) = max( (f(n/2) + f(n)), n)\n    # f(n) = max( f(n), n)\n    # f(n) = max( n)\n    # f(n) = n\n    # f(n) = n-1\n    # f(n) = 0\n    # f(n) = 1\n    # f(n) = -1\n    # f(n) = -2\n    # f(n) = -3\n    # f(n) = -4\n    # f(n) = -5\n    # f(n) = -6\n    # f(n) = -7\n    # f(n) = -8\n    # f(n) = -9\n    # f(n) = -10\n    # f(n) = -11\n    # f(n) = -12\n    # f(n) = -13\n    # f(n) = -14\n    # f(n) = -15\n    # f(n) = -16\n    # f(n) = -17\n    # f(n) = -18\n    # f(n) = -19\n    # f(n) = -20\n    # f(n) = -21\n    # f(n) = -22\n    # f(n) = -23\n    # f(n) = -24\n    # f(n) = -25\n    # f(n) = -26\n    # f(n) = -27\n    # f(n) = -28\n    # f(n) = -29\n    # f(n) = -30\n    # f(n) = -31\n    # f(n) = -32\n    # f(n) = -33\n    # f(n) = -34\n    # f(n) = -35\n    # f(n) = -36\n    # f(n) = -37\n    # f(n) = -38\n    # f(n) = -39\n    # f(n) = -40\n    # f(n) = -41\n    # f(n) = -42\n    # f(n) = -43\n    # f(n) = -44\n    # f(n) = -45\n    # f(n) = -46\n    # f(n) = -47\n    # f(n) = -48\n    # f(n) = -49\n    # f(n) = -50\n    # f(n) = -51\n    # f(n) = -52\n    # f(n) = -53\n    # f(n) = -54\n    # f(n) = -55\n    # f(n) = -56\n    # f(n) = -57\n    # f(n) = -58\n    # f(n) = -59\n    # f(n) = -60\n    # f(n) = -61\n    # f(n) = -62\n    # f(n) = -63\n    # f(n) = -64\n    # f(n) = -65\n    # f(n) = -66\n    # f(n) = -67\n    # f(n) = -68\n    # f(n) = -69\n    # f(n) = -70\n    # f(n) = -71\n    # f(n) = -72\n    # f(n) = -73\n    # f(n) = -74\n    # f(n) = -75\n    # f(n) = -76\n    # f(n) = -77\n    # f(n) = -78\n    # f(n) = -79\n    # f(n) = -80\n    # f(n) = -81\n    # f(n) = -82\n    # f(n) = -83\n    # f(n) = -84\n    # f(n) = -85\n    # f(n) = -86\n    # f(n) = -87\n    # f(n) = -88\n    # f(n) = -89\n    # f(n) = -90\n    # f(n) = -91\n    # f(n) = -92\n    # f(n) = -93\n    # f(n) = -94\n    # f(n) = -95\n    # f(n) = -96\n    # f(n) = -97\n    # f(n) = -98\n    # f(n) = -99\n    # f(n) = -100\n    # f(n) = -101\n    # f(n) = -102\n    # f(n) = -103\n    # f(n) = -104\n    # f(n) = -105\n    # f(n) = -106\n    # f(n) = -107\n    # f(n) = -108\n    # f(n) = -109\n    # f(n) = -110\n    # f(n) = -111\n    # f(n) = -112\n    # f(n) = -113\n    # f(n) = -114\n    # f(n) = -115\n    # f(n) = -116\n    # f(n) = -117\n    # f(n) = -118\n    # f(n) = -119\n    # f(n) = -120\n    # f(n) = -121\n    # f(n) = -122\n    # f(n) = -123\n    # f(n) = -124\n    # f(n) = -125\n    # f(n) = -126\n    # f(n) = -127\n    # f(n) = -128\n    # f(n) = -129\n    # f(n) = -130\n    # f(n) = -131\n    # f(n) = -132\n    # f(n) = -133\n    # f(n) = -134\n    # f(n) = -135\n    # f(n) = -136\n    # f(n) = -137\n    # f(n) = -138\n    # f(n) = -139\n    # f(n) = -140\n    # f(n) = -141\n    # f(n) = -142\n    # f(n) = -143\n    # f(n) = -144\n    # f(n) = -145\n    # f(n) = -146\n    # f(n) = -147\n    # f(n) = -148\n    # f(n) = -149\n    # f(n) = -150\n    # f(n) = -151\n    # f(n) = -152\n    # f(n) = -153\n    # f(n) = -154\n    # f(n) = -155\n    # f(n) = -156\n    # f(n) = -157\n    # f(n) = -158\n    # f(n) = -159\n    # f(n) = -160\n    # f(n) = -161\n    # f(n) = -162\n    # f(n) = -163\n    # f(n) = -164\n    # f(n) = -165\n    # f(n) = -166\n    # f(n) = -167\n    # f(n) = -168\n    # f(n) = -169\n    # f(n) = -170\n    # f(n) = -171\n    # f(n) = -172\n    # f(n) = -173\n    # f(n) = -174\n    # f(n) = -175\n    # f(n) = -176\n    # f(n) = -177\n    # f(n) = -178\n    # f(n) = -179"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n    \ndef test_get_max_sum():\n    print(\"Testing get_max_sum()...\", end=\"\")\n    assert (get_max_sum(1) == 0)\n    assert (get_max_sum(2) == 1)\n    assert (get_max_sum(3) == 2)\n    assert (get_max_sum(4) == 3)\n    assert (get_max_sum(5) == 4)\n    assert (get_max_sum(6) == 5)\n    assert (get_max_sum(7) == 6)\n    assert (get_max_sum(8) == 7)\n    assert (get_max_sum(9) == 8)\n    assert (get_max_sum(10) == 9)\n    assert (get_max_sum(11) == 10)\n    assert (get_max_sum(12) == 11)\n    assert (get_max_sum(13) == 12)\n    assert (get_max_sum(14) == 13)\n    assert (get_max_sum(15) == 14)\n    assert (get_max_sum(16) == 15)\n    assert (get_max_sum(17) == 16)\n    assert (get_max_sum(18) == 17)\n    assert (get_max_sum(19) == 18)\n    assert (get_max_sum(20) == 19)\n    assert (get_max_sum(21) == 20)\n    assert (get_max_sum(22) == 21)\n    assert (get_max_sum(23) == 22)\n    assert (get_max_sum(24) == 23)\n    assert (get_max_sum(25) == 24)\n    assert (get_max_sum(26) == 25)\n    assert (get_max_sum(27) == 26)\n    assert (get_max_sum(28) == 27)\n    assert (get_max_sum(29) == 28)\n    assert (get_max_sum(30) == 29)\n    assert (get_max_sum(31) == 30)\n    assert (get_max_sum(32) == 31)\n    assert (get_max_sum(33) == 32)\n    assert (get_max_sum(34) == 33)\n    assert (get_max_sum(35) == 34)\n    assert (get_max_sum(36) == 35)\n    assert (get_max_sum(37) == 36)\n    assert (get_max_sum(38) == 37)\n    assert (get_max_sum(39) == 38)\n    assert (get_max_sum(40) == 39)\n    assert (get_max_sum(41) == 40)\n    assert (get_max_sum(42) == 41)\n    assert (get_max_sum(43) == 42)\n    assert (get_max_sum(44) == 43)\n    assert (get_max_sum(45) == 44)\n    assert (get_max_sum(46) == 45)\n    assert (get_max_sum(47) == 46)\n    assert (get_max_sum(48) == 47)\n    assert (get_max_sum(49) == 48)\n    assert (get_max_sum(50) == 49)\n    assert (get_max_sum(51) == 50)\n    assert (get_max_sum(52) == 51)\n    assert (get_max_sum(53) == 52)\n    assert (get_max_sum(54) == 53)\n    assert (get_max_sum(55) == 54)\n    assert (get_max_sum(56) == 55)\n    assert (get_max_sum(57) == 56)\n    assert (get_max_sum(58) == 57)\n    assert (get_max_sum(59) == 58)\n    assert (get_max_sum(60) == 59)\n    assert (get_max_sum(61) == 60)\n    assert (get_max_sum(62) == 61)\n    assert (get_max_sum(63) == 62)\n    assert (get_max_sum(64) == 63)\n    assert (get_max_sum(65) == 64)\n    assert (get_max_sum(66) == 65)\n    assert (get_max_sum(67) == 66)\n    assert (get_max_sum(68) == 67)\n    assert (get_max_sum(69) == 68)\n    assert (get_max_sum(70) == 69)\n    assert (get_max_sum(71) == 70)\n    assert (get_max_sum(72) == 71)\n    assert (get_max_sum(73) == 72)\n    assert (get_max_sum(74) == 73)\n    assert (get_max_sum(75) == 74)\n    assert (get_max_sum(76) == 75)\n    assert (get_max_sum(77) == 76)\n    assert (get_max_sum(78) == 77)\n    assert (get_max_sum(79) == 78)\n    assert (get_max_sum(80) == 79)\n    assert (get_max_sum(81) == 80)\n    assert (get_max_sum(82) == 81)\n    assert (get_max_sum(83) == 82)\n    assert (get_max_sum(84) == 83)\n    assert (get_max_sum(85) == 84)\n    assert (get_max_sum(86) == 85)\n    assert (get_max_sum(87) == 86)\n    assert (get_max_sum(88) == 87)\n    assert (get_max_sum(89) == 88)\n    assert (get_max_sum(90) == 89)\n    assert (get_max_sum(91) == 90)\n    assert (get_max_sum(92) == 91)\n    assert (get_max_sum(93) == 92)\n    assert (get_max_sum(94) == 93)\n    assert (get_max_sum(95) == 94)\n    assert (get_max_sum(96) == 95)\n    assert (get_max_sum(97) == 96)\n    assert (get_max_sum(98) == 97)\n    assert (get_max_sum(99) == 98)\n    assert (get_max_sum(100) == 99)\n    assert (get_max_sum(101) == 100)\n    assert (get_max_sum(102) == 101)\n    assert (get_max_sum(103) == 102)\n    assert (get_max_sum(104) == 103)\n    assert (get_max_sum(105) == 104)\n    assert (get_max_sum(106) == 105)\n    assert (get_max_sum(107) == 106)\n    assert (get_max_sum(108) == 107)\n    assert (get_max_sum(109) == 108)\n    assert (get_max_sum(110) == 109)\n    assert (get_max_sum(111) == 110)\n    assert (get_max_sum(112) == 111)\n    assert (get_max_sum(113) == 112)\n    assert (get_max_sum(114) == 113)\n    assert (get_max_sum(115) == 114)\n    assert (get_max_sum(116) == 115)\n    assert (get_max_sum(117) == 116)\n    assert (get_max_sum(118) == 117)\n    assert (get_max_sum(119) == 118)\n    assert (get_max_sum(120) == 119)\n    assert (get_max_sum(121) == 120)\n    assert (get_max_sum(122) == 121)\n    assert (get_max_sum(123) == 122)\n    assert (get_max_sum(124) == 123)\n    assert (get_max_sum(125) == 124)\n    assert (get_max_sum(126) == 125)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max(get_max_sum_helper(i), max_sum)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if(n == 0):\n        return 0\n    elif(n == 1):\n        return 0\n    elif(n == 2):\n        return 0\n    elif(n == 3):\n        return 0\n    elif(n == 4):\n        return 0\n    elif(n == 5):\n        return 0\n    elif(n == 6):\n        return 0\n    elif(n == 7):\n        return 0\n    elif(n == 8):\n        return 0\n    elif(n == 9):\n        return 0\n    else:\n        return get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum_memo (n, memo):\n        if n <= 1:\n            return 0\n        if memo[n]!= -1:\n            return memo[n]\n        return max(max_sum_memo (n // 2, memo), max_sum_memo (n // 3, memo), max_sum_memo (n // 4, memo), max_sum_memo (n // 5, memo), n)\n        \n    memo = [-1 for i in range (n + 1)]\n    return max_sum_memo (n, memo)\n    \n    \n    \ndef max_sub_array (A):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray within an array of numbers.\n    '''\n    def max_sub_array_memo (A, memo):\n        if len(A) == 0:\n            return 0\n        if memo[len(A)]!= -1:\n            return memo[len(A)]\n        max_sum = -100\n        for i in range (len(A)):\n            if A[i] > max_sum:\n                max_sum = A[i]\n            else:\n                max_sum += A[i]\n        max_sum += max_sub_array_memo(A[i + 1:], memo)\n        memo[len(A)] = max_sum\n        return max_sum\n        \n    memo = [-1 for i in range (len(A) + 1)]\n    return max_sub_array_memo (A, memo)\n    \n    \n    \ndef fibonacci (n):\n    '''\n    Write a function to return the n-th Fibonacci number.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    f1 = 1\n    f2 = 1\n    f3 = 1\n    n = n - 2\n    while n > 0:\n        f1 = f2\n        f2 = f3\n        f3 = f1 + f2\n        n -= 1\n    return f3\n    \n    \ndef happy_number (n):\n    '''\n    Write a function to determine if a given number is a happy number.\n    '''\n    if n == 1 or n == 0:\n        return True\n    n = n - 2\n    while n > 0:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            return False\n    return True\n    \n    \ndef is_prime (n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range (2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_nth (n):\n    '''\n    Write a function to determine if a given number is the nth prime number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    for i in range (2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef convert_money (n):\n    '''\n    Write a function to convert a given amount of money in coins.\n    '''\n    def convert_money_memo (n, memo):\n        if n < 0:\n            return 0\n        if memo[n]!= -1:\n            return memo[n]\n        one_pound = 1\n        ten_pence = 0.10\n        twenty_pence = 0.20\n        fifty_pence = 0.50\n        pound_five = 5\n        penny_five = 0.05\n        memo[n] = convert_money_memo (n // one_pound, memo) + convert_money_memo (n // ten_pence, memo) + convert_money_memo (n // twenty_pence, memo) + convert_money_memo (n // fifty_pence, memo) + convert_money_memo (n // pound_five, memo) + convert_money_memo (n // penny_five, memo)\n        return memo[n]\n        \n    memo = [-1 for i in range (n + 1)]\n    return convert_money_memo (n, memo)\n    \n    \ndef to_base_n (n, base):\n    '''\n    Write a function to convert a given number in any base to any other base.\n    '''\n    if n == 0:\n        return '0'\n    base_n = {}\n    index = 0\n    while n:\n        if n in base_n:\n            break\n        base_n[n] = index\n        n, index = divmod(n, base)\n    s = ''\n    while n:\n        s = base[n] + s\n        n, index = divmod(n, base)\n    if index!= 0:\n        s = '0' * index + s\n    return s\n    \n    \ndef smallest_difference (A, B):\n    '''\n    Write a function to find the smallest difference between two arrays of positive integers.\n    '''\n    diff = None\n    if len (A) == 0 or len (B) == 0:\n        return 0\n    diff = None\n    for i in range (len (A)):\n        for j in range (len (B)):\n            if A[i] + B[j] < diff or diff == None:\n                diff = A[i] + B[j] - A[i] - B[j]\n    return diff\n    \n    \ndef spiral_order(matrix):\n    '''\n    Write a function that takes a square matrix and returns its spiral order.\n    '''\n    if len(matrix) == 0:\n        return matrix\n    min_x = 0\n    max_x = len(matrix[0]) - 1\n    min_y = 0\n    max_y = len(matrix) - 1\n    direction = 0\n    result = []\n    while min_x <= max_x and min_y <= max_y:\n        if direction == 0:\n            for i in range (min_x, max_x + 1):\n                result.append(matrix[min_y][i])\n            min_y += 1\n            direction = 1\n        if direction == 1:\n            for i in range (min_y, max_y + 1):\n                result.append(matrix[i][max_x])\n            max_x -= 1\n            direction = 2\n        if direction == 2:\n            for i in range (max_x, min_x - 1, -1):\n                result.append(matrix[max_y][i])\n            max_y -= 1\n            direction = 3\n        if direction == 3:\n            for i in range (max_y, min_y - 1, -1):\n                result.append(matrix[i][min_x])\n            min_x += 1\n            direction = 0\n    return result\n    \n    \ndef count_substring(s, ss):\n    '''\n    Write a function that returns the number of times a substring appears in a given string.\n    '''\n    if len(s) == 0 or len(ss) == 0:\n        return 0\n    length = 0\n    while length < len(ss):\n        count = 0\n        for i in range (len(s)):\n            if s[i:i + length] == ss:\n                count += 1\n        length += 1\n    return count\n    \n    \ndef count_substring_memo(s, ss):\n    '''\n    Write a function to return the number of times a substring appears in a given string.\n    '''\n    if len(s) == 0 or len(ss) == 0:\n        return 0\n    length = 0\n    memo = {}\n    while length < len(ss):\n        count = 0\n        for i in range (len(s)):\n            if s[i:i + length] == ss:\n                count += 1\n        length += 1\n        memo[length] = count\n    return memo[length]\n    \n    \ndef reverse_substring(s, start, end):\n    '''\n    Write a function that reverses a substring in-place.\n    '''"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    longest = 0\n    for element in input_list:\n        if len(element) > longest:\n            longest = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    \n    for item in input_list:\n        if len(item) == max_length:\n            return item\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for x in input_list:\n        if len(x) > max_length:\n            max_length = len(x)\n            max_length_list = []\n            max_length_list.append(x)\n        elif len(x) == max_length:\n            max_length_list.append(x)\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    for i in input_list:\n        if len(i) > len(input_list[0]):\n            return i\n    return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return_list = []\n    max_len = len(input_list[0])\n    for element in input_list:\n        if len(element) == max_len:\n            return_list.append(element)\n        elif len(element) > max_len:\n            max_len = len(element)\n            return_list.clear()\n            return_list.append(element)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_max = -1\n    for i in input_list:\n        if length_max == -1:\n            length_max = len(i)\n        else:\n            if length_max < len(i):\n                length_max = len(i)\n    return length_max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_len = len(input_list)\n    max_len = -1\n    max_len_list = None\n    i = 0\n    while i < list_len:\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = input_list[i]\n        i += 1\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(1, len(test_tup)):\n        if test_tup[i-1] == test_tup[i]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    s = set()\n    s.update(tup)\n    if len(tup) == len(s):\n        print(\"tuple contains no duplicates\")\n    else:\n        print(\"tuple contains duplicates\")\n    \n    \n    \ntup = (1, 1, 2, 2, 3, 3)\nprint(check_distinct(tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any(sorted(test_tup) == sorted(set(test_tup)))\n    \ndef check_unique_string(input_string):\n    '''\n    Write a function to check if given string contains only unique characters.\n    '''\n    chars = set(input_string)\n    for i in chars:\n        if input_string.count(i) > 1:\n            return False\n    return True\n    \ndef check_len_string(input_string):\n    '''\n    Write a function to check if given string is length of a palindrome.\n    '''\n    if len(input_string) <= 1:\n        return True\n    return input_string[0] == input_string[-1] and check_len_string(input_string[1:-1])\n    \ndef check_len_substr(input_string):\n    '''\n    Write a function to check if given string is length of a substring.\n    '''\n    if len(input_string) < 1:\n        return True\n    for i in range(len(input_string)):\n        if len(input_string) > 1:\n            return check_len_string(input_string[i:])\n        else:\n            return True\n    return False\n    \ndef check_zip(*args):\n    '''\n    Write a function to check if given tuples are zip of same length.\n    '''\n    for i in args:\n        if len(i)!= len(args[0]):\n            return False\n    return True\n    \ndef count_inversion(arr):\n    '''\n    Write a function to count inversions in an array of integers.\n    '''\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return arr[0] > arr[1]\n    dp_arr = [1 for _ in range(len(arr))]\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp_arr[i] = max(dp_arr[i], dp_arr[j] + 1)\n    return sum(dp_arr)\n    \ndef count_reversals(input_string):\n    '''\n    Write a function to count the number of reversals in a string of characters.\n    '''\n    if input_string == \"\":\n        return 0\n    return count_reversals(input_string[1:]) + (input_string[0]!= input_string[-1])\n    \ndef count_rotations(input_string):\n    '''\n    Write a function to count the number of rotations in a string of characters.\n    '''\n    if input_string == \"\":\n        return 0\n    if len(input_string) == 1:\n        return 1\n    if input_string[0] == input_string[-1]:\n        return count_rotations(input_string[1:-1]) + 1\n    return count_rotations(input_string[1:])\n    \ndef count_rotations_using_stack(input_string):\n    '''\n    Write a function to count the number of rotations in a string of characters.\n    '''\n    if input_string == \"\":\n        return 0\n    if len(input_string) == 1:\n        return 1\n    stack = []\n    stack.append(input_string[0])\n    for i in range(1, len(input_string)):\n        if input_string[i] == stack[-1]:\n            stack.pop()\n        else:\n            stack.append(input_string[i])\n    return len(stack)\n    \ndef check_substring(input_string, sub_string):\n    '''\n    Write a function to check if given string is substring of another.\n    '''\n    if sub_string == \"\":\n        return True\n    if len(input_string) < len(sub_string):\n        return False\n    if len(input_string) == len(sub_string):\n        return input_string == sub_string\n    if len(sub_string) == 1:\n        return True\n    for i in range(len(sub_string)):\n        if input_string[i]!= sub_string[i]:\n            return False\n    return check_substring(input_string[len(sub_string):], sub_string)\n    \ndef is_valid_parenthesis(input_string):\n    '''\n    Write a function to check if given string is balanced paranthesis string or not.\n    '''\n    opening_bracket = [\"(\", \"{\", \"[\"]\n    closing_bracket = [\")\", \"}\", \"]\"]\n    stack = []\n    for i in range(len(input_string)):\n        if input_string[i] in opening_bracket:\n            stack.append(input_string[i])\n        elif input_string[i] in closing_bracket:\n            if not stack:\n                return False\n            if stack[-1] == closing_bracket[closing_bracket.index(input_string[i])]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n    \ndef power_set(s):\n    '''\n    Write a function to generate the power set of an input set.\n    '''\n    if len(s) == 0:\n        return [[]]\n    if len(s) == 1:\n        return [[], s]\n    result = power_set(s[1:])\n    return result + [[s[0]] + subset for subset in result]\n    \ndef is_subsequence(s1, s2):\n    '''\n    Write a function to check if the input string is subsequence of the another.\n    '''\n    if len(s1) == 0 and len(s2) == 0:\n        return True\n    if len(s1) == 0 or len(s2) == 0:\n        return False\n    if s1[0] == s2[0]:\n        return is_subsequence(s1[1:], s2[1:])\n    else:\n        return is_subsequence(s1[1:], s2)\n    \ndef count_binary_substrings(input_string):\n    '''\n    Write a function to count the number of binary substrings of given string.\n    '''\n    cnt = 0\n    for i in range(len(input_string)):\n        cnt += (input_string[i] == \"0\" and input_string[i+1] == \"0\" and input_string[i+2] == \"0\") or (input_string[i] == \"1\" and input_string[i+1] == \"1\" and input_string[i+2] == \"1\")\n    return cnt\n    \ndef is_palinrome(input_string):\n    '''\n    Write a function to check if given string is palindrome or not.\n    '''\n    if len(input_string) <= 1:\n        return True\n    return input_string[0] == input_string[-1] and is_palinrome(input_string[1:-1])\n    \ndef has_repeating_character(input_string):\n    '''\n    Write a function to check if the given string has any repeating character or not.\n    '''\n    if len(input_string) <= 1:\n        return False\n    chars = set(input_string)\n    for i in chars:\n        if input_string.count(i) > 1:\n            return True\n    return False\n    \ndef anagram(input_string_1, input_string_2):\n    '''\n    Write a function to check if two given strings are anagram of each other or not.\n    '''\n    if len(input_string_1)!= len(input_string_2):\n        return False\n    chars = set(input_string_1)\n    for i in chars:\n        if input_string_1.count(i)!= input_string_2.count(i):\n            return False\n    return True\n    \ndef is_palindrome_rotation(input_string):\n    '''\n    Write a function to check if the given string is palindrome rotation or not.\n    '''\n    if len(input_string) < 2:\n        return True\n    if input_string[0] == input_string[-1]:\n        retur"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a_list = list(test_tup)\n    if len(a_list) == len(set(a_list)):\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Your code here\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if not test_tup:\n        return False\n    else:\n        if len(test_tup) == len(set(test_tup)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # First Approach\n    # Creating an empty list and checking if its empty or not\n    # if test_tup:\n    #     test_tup = list(test_tup)\n    #     if len(test_tup) > len(set(test_tup)):\n    #         print(\"Tuple contains duplicates\")\n    #     else:\n    #         print(\"Tuple does not contain duplicates\")\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    unique_char_map = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # creating a dict of the characters in the string\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    \n    # iterating over the dict\n    for key in char_dict:\n        if char_dict[key] == 1:\n            return key\n    return''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        d[str1[i]] = str1.count(str1[i])\n    \n    for i in range(len(str1)):\n        if d[str1[i]] == 1:\n            return str1[i]\n    return -1\n        \n    \nif __name__ == \"__main__\":\n    print(first_non_repeating_character(\"abcdzxy\"))\n    print(first_non_repeating_character(\"dvdf\"))\n    print(first_non_repeating_character(\"bbb\"))\n    print(first_non_repeating_character(\"abd\")"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = list(str1)\n    for i in range(len(chars)):\n        if chars[i] not in chars[i+1:]:\n            return chars[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = str1[0]\n    for i in range(len(str1)):\n        if str1[i]!= char:\n            return char\n        char = str1[i]\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars_dict = dict()\n    for char in str1:\n        if char in chars_dict:\n            chars_dict[char] = chars_dict[char] + 1\n        else:\n            chars_dict[char] = 1\n    for key in chars_dict:\n        if chars_dict[key] == 1:\n            return key\n    return \"No charater found\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    for i in str1:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = str1\n    unique_chars = []\n    count = []\n    for i in string:\n        if i not in unique_chars:\n            unique_chars.append(i)\n        else:\n            count.append(string.count(i))\n    count.sort()\n    print(count[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = 'aabccddddeeff'\n    # for i in range(len(str1)):\n    #     if str1[i] in str1[i+1:]:\n    #         print('0')\n    #         break\n    # else:\n    #     print('1')\n    # str1 = 'aabccddddeeff'\n    # for i in range(len(str1)):\n    #     if str1.count(str1[i]) == 1:\n    #         print(i)\n    #         break\n    # else:\n    #     print('-1')\n    count = 0\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            count += 1\n        else:\n            print(str1[i])\n            break\n    if count == 0:\n        print(-1)\ndef min_number_of_coins_to_make_change(arr,denominations):\n    '''\n    You have an array of unique denominations of size n. Given a target money value m, find the minimum number of coins needed to make m. You can use any number of the denominations and you may not use any additional denominations.\n    '''\n    # arr = [1,2,3]\n    # denominations = 3\n    # m = 4\n    # min_coins(arr,denominations,m)\n    # m = 5\n    # min_coins(arr,denominations,m)\n    # m = 6\n    # min_coins(arr,denominations,m)\n    # m = 7\n    # min_coins(arr,denominations,m)\n    # m = 8\n    # min_coins(arr,denominations,m)\n    # m = 9\n    # min_coins(arr,denominations,m)\n    # m = 10\n    # min_coins(arr,denominations,m)\n    # m = 12\n    # min_coins(arr,denominations,m)\n    # m = 5\n    # min_coins(arr,denominations,m)\n    # arr = [1,1,2,3,3,5]\n    # denominations = 2\n    # m = 10\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3]\n    # denominations = 3\n    # m = 6\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5]\n    # denominations = 1\n    # m = 5\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,3,4]\n    # denominations = 2\n    # m = 4\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 1\n    # m = 9\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 1\n    # m = 11\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 2\n    # m = 9\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 3\n    # m = 8\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 4\n    # m = 7\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 5\n    # m = 6\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 6\n    # m = 5\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 7\n    # m = 4\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 8\n    # m = 3\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 9\n    # m = 2\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 10\n    # m = 1\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 11\n    # m = 0\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 12\n    # m = -1\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 13\n    # m = -2\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 14\n    # m = -3\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 15\n    # m = -4\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 16\n    # m = -5\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 17\n    # m = -6\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 18\n    # m = -7\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 19\n    # m = -8\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 20\n    # m = -9\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 21\n    # m = -10\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 22\n    # m = -11\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 23\n    # m = -12\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 24\n    # m = -13\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 25\n    # m = -14\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 26\n    # m = -15\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 27\n    # m = -16\n    # min_coins(arr,denominations,m)\n    # arr = [1,2,3,4,5,10]\n    # denominations = 28\n    # m = -17\n    # min_coins(arr,denominations,m)\n    # arr = "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = list(string)\n    string.sort()\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    flag = 0\n    if len(string) == 0:\n        flag = 0\n    elif string[0] == string[-1]:\n        flag = 1\n    return flag\ndef check_symbols(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    symbol = r'[@#$%^&*()<>,.?/}{~:]'\n    flag = 0\n    for i in string:\n        if i in symbol:\n            flag = 1\n    return flag\ndef check_length(string): \n    '''\n    Write a function to check whether the given string length is equal or not.\n    '''\n    if len(string) >= 6:\n        return True\n    else:\n        return False\ndef check_url(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    if re.findall(r'^https?://', string) or re.findall(r'^www.+', string):\n        return True\n    else:\n        return False\ndef check_numbers(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    if re.findall(r'\\d', string):\n        return True\n    else:\n        return False\ndef check_punctuation(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    flag = 0\n    symbol = r'[@#$%^&*()<>,.?/}{~:]'\n    for i in string:\n        if i in symbol:\n            flag = 1\n    return flag\ndef check_special_character(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    flag = 0\n    special_chars = r'[`~!@#$%^&*()_+=?<>,|{}]\"\\''\n    for i in string:\n        if i in special_chars:\n            flag = 1\n    return flag\ndef check_all_chars(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    flag = 0\n    for i in string:\n        if i in r'[@#$%^&*()<>,.?/}{~:]':\n            flag = 1\n    return flag\ndef check_no_of_chars(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    return len(string)\ndef check_no_of_symbols(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    symbol = r'[@#$%^&*()<>,.?/}{~:]'\n    symbols = 0\n    for i in string:\n        if i in symbol:\n            symbols += 1\n    return symbols\ndef check_no_of_digits(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    digits = 0\n    for i in string:\n        if i.isdigit():\n            digits += 1\n    return digits\ndef check_no_of_special_chars(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    special_chars = r'[`~!@#$%^&*()_+=?<>,|{}]\"\\''\n    special_chars_count = 0\n    for i in string:\n        if i in special_chars:\n            special_chars_count += 1\n    return special_chars_count\ndef check_no_of_numbers(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    digits = 0\n    for i in string:\n        if i.isdigit():\n            digits += 1\n    return digits\ndef check_no_of_punctuations(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    punctuations = r'[`~!@#$%^&*()_+=?<>,|{}]\"\\''\n    punctuations_count = 0\n    for i in string:\n        if i in punctuations:\n            punctuations_count += 1\n    return punctuations_count\ndef check_no_of_words(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    return len(string.split())\ndef check_no_of_uppercase_letters(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    uppercase_letters = 0\n    for i in string:\n        if i.isupper():\n            uppercase_letters += 1\n    return uppercase_letters\ndef check_no_of_lowercase_letters(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    lowercase_letters = 0\n    for i in string:\n        if i.islower():\n            lowercase_letters += 1\n    return lowercase_letters\ndef check_no_of_special_letters(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    special_chars = r'[@#$%^&*()<>,.?/}{~:]'\n    special_chars_count = 0\n    for i in string:\n        if i in special_chars:\n            special_chars_count += 1\n    return special_chars_count\ndef check_no_of_special_letters_in_string(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    special_chars = r'[@#$%^&*()<>,.?/}{~:]'\n    special_chars_count = 0\n    for i in string:\n        if i in special_chars:\n            special_chars_count += 1\n    return special_chars_count\ndef check_no_of_vowels_in_string(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    vowels = r'[aeiou]'\n    vowels_count = 0\n    for i in string:\n        if i in vowels:\n            vowels_count += 1\n    return vowels_count\ndef check_no_of_consonants_in_string(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    consonants = r'[bcdfghjklmnpqrstvwxyz]'\n    consonants_count = 0\n    for i in string:\n        if i in consonants:\n            consonants_count += 1\n    return consonants_count\ndef check_no_of_digits_in_string(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    digits = r'\\d'\n    digits_count = 0\n    for i in string:\n        if i.isdigit():\n            digits_count += 1\n    return digits_count\ndef check_no_of_special_chars_in_string(string): \n    '''\n    Write a function to check whether the given string contains any Symbols or not.\n    '''\n    special_chars = r'[`~!@#$%^&*()_+=?<>,|{}]\"\\''\n    special_chars_count = 0\n    for i in string:\n        if i in special_chars:\n            special_chars_count += 1\n    return special_chars_count\ndef check_n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return True\n    if re.search(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string)) \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if(pattern.search(string)):\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=int(c)\n    if a>=b and a>=c:\n        if b>c:\n            median=a\n        else:\n            median=c\n    elif b>=a and b>=c:\n        if a>c:\n            median=b\n        else:\n            median=c\n    elif c>=a and c>=b:\n        if b>a:\n            median=c\n        else:\n            median=a\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted([a,b,c])\n    median = (a[1]+a[2])/2\n    print(median)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        if b >= c:\n            return a\n        else:\n            return c\n    elif b >= a and b >= c:\n        if a >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= a and c >= b:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr=sorted([a,b,c])\n    if a==b:\n        return a\n    elif a==c:\n        return a\n    else:\n        return arr[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def med(a,b,c):\n        if a>b and a>c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    return med(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # print(a,b,c)\n    # print(\"a:{}, b:{}, c:{}\".format(a,b,c))\n    return (a + b + c) / 2\n    \ndef median_numbers2(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    number_list = [a,b,c]\n    number_list.sort()\n    length_of_list = len(number_list)\n    if length_of_list % 2 == 1:\n        return number_list[length_of_list // 2]\n    else:\n        return (number_list[length_of_list // 2 - 1] + number_list[length_of_list // 2]) / 2\n    \ndef last_digit(n):\n    '''\n    Write a function that finds the last digit in an integer.\n    '''\n    return int(str(n)[-1])\n    \ndef match_lists(first_list,second_list):\n    '''\n    Write a function that takes in two lists of the same length. \n    The function should return a list that contains only those elements from both lists that are equal.\n    '''\n    return [i for i in first_list if i in second_list]\n    \ndef first_non_repeating_char(string):\n    '''\n    Write a function that takes in a string. \n    The function should return the first non-repeating character in the string.\n    If there is no non-repeating character, return '_'.\n    '''\n    my_string = string\n    characters = []\n    \n    for i in my_string:\n        if i not in characters:\n            characters.append(i)\n        else:\n            characters.append(\"_\")\n            \n    return characters[0]\n    \ndef remove_all_occurrences(string, remove_char):\n    '''\n    Write a function that takes in a string and a character. \n    The function should return a new string with all occurrences of the character removed.\n    '''\n    string = string.replace(remove_char,\"\")\n    \n    return string\n    \ndef two_largest_numbers(numbers):\n    '''\n    Write a function that takes in a list of numbers. \n    The function should return a tuple containing the two largest numbers in the list.\n    '''\n    max_num = numbers[0]\n    second_max_num = numbers[1]\n    \n    for i in range(2,len(numbers)):\n        if numbers[i] > max_num:\n            second_max_num = max_num\n            max_num = numbers[i]\n        elif max_num < numbers[i] and numbers[i] > second_max_num:\n            second_max_num = numbers[i]\n            \n    return (max_num,second_max_num)\n    \ndef remove_nth_node_from_end(head, n):\n    '''\n    Write a function that takes in a SinglyLinkedList and an integer, n, and removes the nth node from the end of the linked list.\n    '''\n    n_nodes = 0\n    node = head\n    while node is not None:\n        n_nodes += 1\n        node = node.next\n    node = head\n    \n    if n_nodes - n < 0:\n        return head.next\n        \n    for i in range(n_nodes - n - 1):\n        node = node.next\n        \n    node.next = node.next.next\n    \n    return head\n    \ndef max_num(a,b):\n    '''\n    Write a function that takes in two numbers and returns the maximum of those numbers.\n    '''\n    max = a\n    if b > max:\n        max = b\n    return max\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function that takes in three numbers and returns the maximum of those numbers.\n    '''\n    return max(a,max(b,c))\n    \ndef find_sum(a,b):\n    '''\n    Write a function that takes in two numbers and returns their sum.\n    '''\n    return a + b\n    \ndef find_index(a,value,start_index):\n    '''\n    Write a function that takes in a list and an integer, value, and an integer start_index. \n    The function should return the index of the first occurrence of value in a that is greater than or equal to start_index.\n    '''\n    if len(a) == 0:\n        return -1\n    if len(a) == 1 and a[0] == value:\n        return 0\n    for i in range(start_index,len(a)):\n        if a[i] == value:\n            return i\n        \ndef insert_at_index(a,value,index):\n    '''\n    Write a function that takes in a list and an integer, value, and an integer index. \n    The function should insert value at index in a.\n    '''\n    if len(a) == 0:\n        a.append(value)\n    if len(a) == 0:\n        a.append(value)\n    if len(a) == 1 and a[0] == value:\n        a.insert(0,value)\n    if len(a) == 0:\n        a.append(value)\n    if len(a) == 1:\n        a.insert(0,value)\n    if len(a) == 2 and a[0] == value:\n        a.insert(1,value)\n    if len(a) == 2:\n        a.insert(1,value)\n    if len(a) == 3 and a[0] == value:\n        a.insert(2,value)\n    if len(a) == 3:\n        a.insert(2,value)\n    \ndef find_biggest_sum_sublist(list_of_lists):\n    '''\n    Write a function that takes in a list of lists and returns the largest list of sublists that are sorted from smallest to largest sum.\n    '''\n    biggest_sum = 0\n    \n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if sum(list_of_lists[i]) > biggest_sum:\n                biggest_sum = sum(list_of_lists[i])\n                max_sum_sublist = list_of_lists[i]\n                \n    return max_sum_sublist\n    \ndef min_num_n_numbers(a,n):\n    '''\n    Write a function that takes in a list and an integer, n. \n    The function should return the sum of the first n numbers in the list.\n    '''\n    a = a.copy()\n    a = a[:n]\n    for i in range(len(a)):\n        a[i] = -a[i]\n    return sum(a)\n    \ndef max_num_n_numbers(a,n):\n    '''\n    Write a function that takes in a list and an integer, n. \n    The function should return the sum of the last n numbers in the list.\n    '''\n    a = a.copy()\n    a = a[len(a)-n:]\n    for i in range(len(a)):\n        a[i] = -a[i]\n    return sum(a)\n    \ndef test_max_num_n_numbers():\n    assert max_num_n_numbers([1,2,3,4,5],4) == 15\n    assert max_num_n_numbers([4,5,6,7,8],4) == 20\n    assert max_num_n_numbers([1,2,3,4,5,6,7,8],4) == 23\n    assert max_num_n_numbers([1,2,3,4,5,6,7,8],5) == 21\n    \ndef test_min_num_n_numbers():\n    assert min_num_n_numbers([1,2,3,4,5],4) == -5\n    assert min_num_n_numbers([4,5,6,7,8],4) == -5\n    assert min_num_n_numbers([1,2,3,4,5,6,7,8],4) == -3\n    assert min_num_n_numbers([1,2,3,4,5,6,7,8],5) == -8\n    \ndef test_max_num_n_numbers_2():\n    assert max_num_n_numbers([1,2,3,4,5],5) == 15\n    asser"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        if b > c:\n            median = b\n        else:\n            median = c\n    elif b > c:\n        if a > c:\n            median = a\n        else:\n            median = c\n    else:\n        if a > b:\n            median = a\n        else:\n            median = b\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted(a,b,c)\n    if a == b == c:\n        return a\n    elif a == b:\n        return b\n    elif b == c:\n        return c\n    elif a == c:\n        return a\n    else:\n        return a"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #A = a, B = b, C = c\n    median_numbers = a + b + c\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum_digits(num)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # if not nums:\n    #     return []\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        new_nums.append(sum(map(int, str(nums[i]))))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += int(i)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if isinstance(nums, int):\n        return nums\n    if isinstance(nums, list):\n        result = 0\n        for num in nums:\n            result += sum_of_digits(num)\n        return result\n    else:\n        raise TypeError(\"Input type must be list or int.\")\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i % 10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [i if i >= 0 else 0 for i in map(int,map(str,nums))]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for x in range(len(nums)):\n        sum_of_digits += nums[x] % 10\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n    # return sum([i for i in nums if type(i) == int])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    num1 = test_tup1[0]\n    num2 = test_tup1[1]\n    num3 = test_tup2[0]\n    num4 = test_tup2[1]\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the tuple size\n    tup1_size = len(test_tup1)\n    tup2_size = len(test_tup2)\n    # Initialize result\n    result = 0\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(test_tup1[0]) ^ int(test_tup1[1]) ^ int(test_tup2[0]) ^ int(test_tup2[1]),\n            int(test_tup2[0]) ^ int(test_tup1[0]) ^ int(test_tup2[1]) ^ int(test_tup1[1]))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = int(test_tup1[0])\n    b = int(test_tup2[0])\n    a = a ^ b\n    result = (a, a ^ b)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return tuple(test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x, y = test_tup1\n    z, w = test_tup2\n    return (x ^ y ^ z ^ w)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bit_xor = (a ^ b for a,b in zip(test_tup1, test_tup2))\n    return bit_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]), (test_tup1[1] ^ test_tup2[1]))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_tuples = []\n    for i in range(len(test_list)):\n        if test_list[i] not in uniq_tuples:\n            uniq_tuples.append(test_list[i])\n    return(len(uniq_tuples))\n    "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        count = 1\n        test_list = list(set(test_list))\n        while(True):\n            if test_list[0] == test_list[-1]:\n                test_list = test_list[:-1]\n                count += 1\n            else:\n                break\n        return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    x = set(test_list)\n    return len(x)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] = freq[i] + 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(len(set(i)))\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    freq_list = []\n    for item in test_list:\n        if item not in freq_list:\n            freq_list.append(item)\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    x = test_list.count(())\n    return x\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num = len(set(tuple(row) for row in test_list))\n    return num\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # def extract_freq(test_list):\n    if not test_list:\n        return 0\n    return len(set(tuple(row) for row in test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    if len(test_tup1) == len(test_tup2) and len(test_tup1) == len(test_tup1):\n        return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    else:\n        return 'Invalid input'\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple(t1 + t2 for t1, t2 in zip(test_tup1, test_tup2))\n    "
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = (test_tup1[i][0]+test_tup2[i][0],test_tup1[i][1]+test_tup2[i][1])\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    ret_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            ret_tup = add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            ret_tup += (test_tup1[i] + test_tup2[i],)\n    return ret_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Empty list to store the result of this iteration\n        result_curr = []\n        # Iterate through the second tuple\n        for j in range(len(test_tup2)):\n            # Add the elements of this iteration to the result\n            result_curr.append(test_tup1[i] + test_tup2[j])\n        # Append the result of this iteration to the result\n        result.append(result_curr)\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuple(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append(list1[i] + list2[j])\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_1(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_2(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_3(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_4(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_5(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_6(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_7(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_8(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_9(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_10(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2[j]))\n    # Return the result\n    return result\n    \n    \n    \ndef add_two_list_tuples_11(list1, list2):\n    '''\n    Write a function to perform addition of two given lists.\n    '''\n    # Empty list to store the result\n    result = []\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Add the elements of this iteration to the result\n            result.append((list1[i], list2"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Iterate over the first tuple\n    for i in range(len(test_tup1)):\n        # Append each element of the tuple into a separate list\n        list_1 = list(test_tup1[i])\n        list_2 = list(test_tup2[i])\n        # Append each element of the tuple into a separate list\n        test_tup1[i] = list_1 + list_2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([a + b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l = [test_tup1,test_tup2]\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            l[i][j] = l[i][j] + l[i][j]\n    return tuple(l)\n    #Pass"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\na=10\nb=20\nprint(\"Minimum of two numbers is:\",minimum(a,b))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \nprint(minimum(10,100))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\nprint(minimum(2,5))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a,\"is minimum\")\n    elif a>b:\n        print(b,\"is minimum\")\n    else:\n        print(\"Both numbers are equal\")\n        \nminimum(10,20)\nminimum(20,10)\nminimum(10,10)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    elif a>b:\n        print(b)\n    else:\n        print(\"Both are equal\")\n        \nminimum(4,5)\nminimum(2,1)\nminimum(2,1)\nminimum(5,6)\nminimum(4,5)\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n        \n        \n        \n        \n    '''\n    Write a python function to find the minimum of two numbers.\n    \n    Input: a and b\n    Output: minimum\n    \n    Sample Input    Expected Output\n    2            2\n    -1            -1\n    3            1\n    '''\n    #code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        print(tuple1,\"is found\")\n    except ValueError:\n        print(tuple1,\"is not found\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (any(x == tuplex for x in tuple1))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try: \n        tuplex.index(tuple1)\n        return True\n    except: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Yes, tuple1 exists in tuplex\")\n    else:\n        print(\"No, tuple1 does not exist in tuplex\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n        else:\n            continue\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0] or tuplex[1] == tuple1[1] or tuplex[2] == tuple1[2] or tuplex[3] == tuple1[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x:\n        parity = parity ^ x & 1\n        x >>= 1\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if x is even then x = x/2\n    # if x is odd then x = x+1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x & 1\n    if y == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if (x % 2) == 0:\n        print(\"The parity of the given number is even\")\n    else:\n        print(\"The parity of the given number is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    while x!=0:\n        p=x%2\n        if p==1:\n            return True\n        else:\n            x=x//2\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2==0):\n        return \"even\"\n    else:\n        return \"odd\"\n    \nif __name__ == \"__main__\":\n    x = int(input())\n    print(find_Parity(x))"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<10:\n        return n\n    res = []\n    while n>0:\n        res.append(n%10)\n        n = n//10\n    res.sort()\n    return res[::-1]\n    \ndef rearrange_bigger_num(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    while n>0:\n        res.append(n%10)\n        n = n//10\n    for i in range(len(res)-1,0,-1):\n        if res[i]==9:\n            res[i] = 0\n            res[i-1] +=1\n            for j in range(i+1,len(res)):\n                if res[j]==9:\n                    res[j] = 0\n                    res[i-1] +=1\n    return res\n    \ndef reorder(n):\n    '''\n    Write a function to sort odd and even numbers by reversing the order of odd and even numbers\n    '''\n    odd = []\n    even = []\n    while n>0:\n        if n%2==0:\n            even.append(n%10)\n        else:\n            odd.append(n%10)\n        n = n//10\n    for i in range(len(even)):\n        if i==0:\n            even.append(odd[i])\n            odd = odd[1:]\n        else:\n            even.insert(0,odd[i])\n            odd = odd[1:]\n    return even\n    \ndef reorder_numbers(n):\n    '''\n    Write a function to sort odd and even numbers by reversing the order of odd and even numbers\n    '''\n    odd = []\n    even = []\n    while n>0:\n        if n%2==0:\n            even.append(n%10)\n        else:\n            odd.append(n%10)\n        n = n//10\n    for i in range(len(odd)):\n        if i==0:\n            even.append(odd[i])\n            odd = odd[1:]\n        else:\n            even.insert(0,odd[i])\n            odd = odd[1:]\n    return even\n    \ndef find_prime(n):\n    '''\n    Write a function that returns True if a given positive number is prime and False otherwise.\n    '''\n    if n <=1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # a = \"\".join(sorted(str(n)))\n    # print(a)\n    # n = int(a)\n    n = str(n)\n    # print(n)\n    # print(type(n))\n    s = \"\"\n    for i in n:\n        s += i\n    # print(s)\n    # print(s.split())\n    # print(sorted(s))\n    # print(type(sorted(s)))\n    print(int(\"\".join(sorted(s))))\n    print(int(s))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(str(n))\n    #print(num)\n    i = len(num) - 1\n    #print(i)\n    while i > 0:\n        if int(num[i]) < int(num[i-1]):\n            j = len(num) - 1\n            while j >= i:\n                #print(num)\n                #print(i, j)\n                num[i], num[j] = num[j], num[i]\n                i -= 1\n                j -= 1\n        i -= 1\n    return int(''.join(num))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(map(int,str(n)))\n    # num = [int(x) for x in str(n)]\n    bigger = 0\n    for i in range(len(num)):\n        if num[i] > bigger:\n            bigger = num[i]\n    \n    for i in range(len(num)):\n        if num[i] == bigger:\n            num[i] = bigger - 1\n            break\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a new variable to hold the new number\n    new_number = 0\n    # add each digit of the new number to the new_number variable, as long as they are bigger than the current number\n    for i in range(len(str(n))):\n        digit = int(str(n)[i])\n        if digit > new_number:\n            new_number = digit\n    # create an empty list\n    new_number_list = []\n    # convert the new number into a string\n    str_new_number = str(new_number)\n    # for each digit in the string, add it to the new_number_list\n    for i in range(len(str_new_number)):\n        new_number_list.append(int(str_new_number[i]))\n    # create an integer from the list\n    new_number = int(''.join(map(str, new_number_list)))\n    return new_number\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(\"\".join(sorted(list(str(n)), reverse = True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = [i for i in str(n)]\n    i = len(arr) - 1\n    while i > 0:\n        if arr[i] > arr[i-1]:\n            break\n        i -= 1\n    j = i + 1\n    while j < len(arr):\n        if arr[i] < arr[j]:\n            break\n        j += 1\n    arr[i], arr[j-1] = arr[j-1], arr[i]\n    return int(''.join(arr))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 9:\n        return n\n    else:\n        str_n = str(n)\n        lst_n = list(str_n)\n        lst_n.sort(reverse=True)\n        next_num = int(\"\".join(lst_n))\n        return next_num\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    s = str(n)\n    if n < 0:\n        return -1\n    elif n == 0:\n        digits.append(0)\n        return int(''.join(str(d) for d in digits))\n    else:\n        for i in range(len(s)):\n            digits.append(s[i])\n        for i in range(len(digits)):\n            if i == 0 and digits[i] == '0':\n                digits[i] = '1'\n        for i in range(len(digits)):\n            if i == 0 and digits[i] == '1':\n                digits[i] = '0'\n            elif i == 1 and digits[i] == '1':\n                digits[i] = '0'\n            elif digits[i] == '0':\n                digits[i] = '1'\n        return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    start = 0\n    end = len(n) - 1\n    \n    while start < end:\n        if n[start] == n[end]:\n            start += 1\n            end -= 1\n        else:\n            break\n    \n    if start == end:\n        n.reverse()\n        return int(''.join(n))\n    \n    t = n[end]\n    n[end] = n[start]\n    n[start] = t\n    return int(''.join(n))\n    "
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for i in nums2:\n        heapq.heappush(pq, (i, i))\n    res = []\n    for i in nums1:\n        heapq.heapreplace(pq, (i, i))\n        if len(pq) > k:\n            heapq.heappop(pq)\n        res.append(pq[0])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if heap and heap[0] > num2:\n                heapq.heappop(heap)\n            heapq.heappush(heap, num1 + num2)\n    return heap[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 and nums2:\n        idx = 0\n        idx2 = 0\n        res = []\n        d1 = {}\n        d2 = {}\n        for n1 in nums1:\n            d1[n1] = idx\n            idx += 1\n        for n2 in nums2:\n            d2[n2] = idx2\n            idx2 += 1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def two_array_pairs(nums1, nums2, k):\n        '''\n        given 2 arrays of integers nums1 and nums2, return the pairs\n        in ascending order of the numbers in the arrays, \n        whose sum will be the smallest\n        '''\n        # sort the first array in ascending order\n        nums1.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    \n    if len(nums1) == len(nums2) == 0:\n        return []\n    \n    if k >= len(nums1) or k >= len(nums2):\n        return []\n    \n    pq = []\n    for i in range(len(nums2)):\n        heapq.heappush(pq, (nums1[0] + nums2[i], 0, i))\n    \n    output = []\n    for i in range(k):\n        _, i, j = heapq.heappop(pq)\n        output.append([nums1[0] + nums2[i], i, j])\n    \n    for i in range(1, len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n        \n    for i in range(1, len(nums2)):\n        heapq.heappush(pq, (nums1[0] + nums2[i], 0, i))\n    \n    for i in range(k, len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n    \n    for i in range(k, len(nums2)):\n        heapq.heappush(pq, (nums1[0] + nums2[i], 0, i))\n    \n    for i in range(k):\n        _, i, j = heapq.heappop(pq)\n        output.append([nums1[0] + nums2[i], i, j])\n    \n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1, n2 = len(nums1), len(nums2)\n    min_heap = []\n    ans = []\n    if n1 == 0 or k > n1: return []\n    \n    # put k-2 elements in the heap\n    for i in range(k-2):\n        heapq.heappush(min_heap, (nums1[i], nums2[i]))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k<0 or k > len(nums1) * len(nums2):\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if k == 0:\n        return []\n    \n    min_heap = []\n    \n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[i], i, 0))\n    \n    ans = []\n    while k > 0:\n        k -= 1\n        _, i, j = heapq.heappop(min_heap)\n        ans.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    if k > len(nums1) * len(nums2):\n        return None\n    for x in nums1:\n        heapq.heappush(pq, (x, 0))\n    for x in nums2:\n        if len(pq) == k:\n            break\n        if x > pq[0][0]:\n            heapq.heappush(pq, (x, 1))\n    return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    A simple solution is to sort the first array and then compare every pair, and each time get the smallest pair (n1, n2) and append it to the result array.\n    However, the complexity of this solution will be O(n+m), which is not acceptable.\n    We can get around this by using a heap and to get k number of pairs we will take k elements from the heap and append those to the result array.\n    A tricky part is that we need to keep track of the heap.\n    '''\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            # print(list1[i][0] * list1[j][0], '*', list1[i][1] * list1[j][1])\n            if(min_product == 0):\n                min_product = list1[i][0] * list1[j][0]\n            else:\n                if(min_product > (list1[i][0] * list1[j][0])):\n                    min_product = list1[i][0] * list1[j][0]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # For now, I think this should work for any list of tuples.\n    # Since this is the third attempt to the problem, I don't think it will work with other iterables.\n    # Therefore, I am assuming the list will be of the form [(1, 3), (2, 5), (3, 6)]\n    \n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i][0] * list1[j][0] < list1[i][1] * list1[j][1]:\n                list1[i] = (list1[i][0] * list1[j][1], list1[i][1] * list1[j][0])\n            else:\n                list1[j] = (list1[i][0] * list1[j][1], list1[i][1] * list1[j][0])\n    min_num = 0\n    min_prod = 1\n    for i in range(len(list1)):\n        if list1[i][0] < min_num:\n            min_prod = list1[i][0]\n        if list1[i][1] < min_num:\n            min_prod = list1[i][1]\n    return min_prod\n    \n    \ndef min_product_dict(list1):\n    '''\n    Write a function to find the minimum product from the pairs of dictionaries within a given list.\n    '''\n    # For now, I think this should work for any list of dictionaries.\n    # Since this is the fourth attempt to the problem, I don't think it will work with other iterables.\n    # Therefore, I am assuming the list will be of the form [(1, 3), (2, 5), (3, 6)]\n    \n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i]['key'] * list1[j]['key'] < list1[i]['value'] * list1[j]['value']:\n                list1[i] = {'key': list1[i]['key'] * list1[j]['key'], 'value': list1[i]['value'] * list1[j]['value']}\n            else:\n                list1[j] = {'key': list1[i]['key'] * list1[j]['key'], 'value': list1[i]['value'] * list1[j]['value']}\n    min_num = 0\n    min_prod = 1\n    for i in range(len(list1)):\n        if list1[i]['key'] < min_num:\n            min_prod = list1[i]['value']\n        if list1[i]['key'] < min_num:\n            min_prod = list1[i]['value']\n    return min_prod\n    \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = min(list1)\n    lst = []\n    for i in list1:\n        if i == min_value:\n            lst.append(i)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) <= 0:\n        return -1\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    min = list1[0]\n    \n    for i in range(len(list1)):\n        if (list1[i] < min):\n            min = list1[i]\n    \n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in list1:\n        if i[0]*i[1]<min_product:\n            min_product = i[0]*i[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    print(\"The minimum product is: \", min((x*y) for x, y in list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0]\n    min_prod = min(list1[0],list1[1])\n    for i in range(2, len(list1)):\n        if min(list1[i-2],list1[i-1])*min(list1[i-2],list1[i-1]) > min(list1[i-2],list1[i-1])*min(list1[i-2],list1[i-1]):\n            min_prod = min(list1[i-2],list1[i-1])\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            temp = list1[i][1]*list1[j][1]\n            if temp<min_prod:\n                min_prod = temp\n    print(min_prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key = lambda x: x[0])\n    p = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            p.append(list1[i][0] * list1[j][0])\n    return (min(p))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1_set = set(list1)\n    list1_set_sort = sorted(list1_set)\n    min_product = None\n    for i in range(len(list1_set_sort)-1):\n        prod = (list1_set_sort[i+1][0] - list1_set_sort[i][0]) * (list1_set_sort[i+1][1] - list1_set_sort[i][1])\n        if min_product == None:\n            min_product = prod\n        else:\n            min_product = min(min_product, prod)\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for x in listval:\n        if x < min_value:\n            min_value = x\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # min_val = listval[0]\n    # for i in range(len(listval)):\n    #     if min_val > listval[i]:\n    #         min_val = listval[i]\n    # return min_val\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in range(1, len(listval)):\n        if val > listval[i]:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min = listval[0]\n    for i in range(1,len(listval)):\n        if min > listval[i]:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #Finds the minimum value in a heterogeneous list\n    #Input: list of different values\n    #Output: minimum value\n    \n    #If the list is empty\n    if listval == None:\n        print(\"Please provide some values\")\n        return -1\n    \n    min_val = listval[0]\n    for i in listval:\n        if min_val > i:\n            min_val = i\n            \n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_element = listval[0]\n    for i in range(1,len(listval)):\n        if(listval[i] < min_element):\n            min_element = listval[i]\n    return min_element\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min = listval[0]\n    for x in listval:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Write your code here\n    return ''.join(map(str.capitalize,word.split('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #Initialize string as empty\n    word = word.split('_')\n    #Initialize camel string\n    camel = \"\"\n    #Traverse word array and append to camel string\n    for i in range(len(word)):\n        camel += word[i].capitalize()\n        #if word[i] is not last word in word array\n        if i < len(word)-1:\n            camel += '_'\n    #Return camel string\n    return camel\nprint(snake_to_camel('snake_case'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = word.split('_')\n    s2 = \"\"\n    for i in s1:\n        s2 = s2 + i.title()\n    return s2\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    word = word.split('_')\n    for i in range(len(word)):\n        if i == 0:\n            word[i] = word[i].capitalize()\n        else:\n            word[i] = word[i].capitalize()\n            word[i] = word[i].replace('_','')\n    return ''.join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return(word[0].lower() + word[1:] + \"\".join(i.capitalize() for i in word[1:].split('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join(x.title() for x in word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    components = re.split('_|-', word)\n    return components[0] + ''.join(x.title() for x in components[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    for i in range(len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = re.sub(r'(.)([A-Z][a-z]+)', r'\\2 \\1', word)\n    return result[0].lower() + result[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.title()\n    return ''.join(word.split('_'))\nprint(snake_to_camel('snake_case'))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == None:\n        return l\n    else:\n        l = l[0: len(l) - 1]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    if(len(l) == 0):\n        return l\n    else:\n        new_list = []\n        for i in range(len(l)):\n            if(l[i]%2 == 0):\n                new_list.append(l[i])\n        return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            odd_list.append(l[i])\n    return odd_list\nprint(remove_odd([10,11,12,13,14,15,16,17,18,19,20]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    while True:\n        num = input(\"Enter a number to remove from the list: \")\n        try:\n            num = int(num)\n        except ValueError:\n            print(\"Please enter a valid number.\")\n            continue\n        if not num in l:\n            print(\"Invalid entry.\")\n            continue\n        l.remove(num)\n        break\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if(l[i]%2!= 0):\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for n in l:\n        if n % 2 == 0:\n            odds.append(n)\n    return odds\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for item in l:\n        if item%2!= 0:\n            odd.append(item)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = list(filter(lambda i : i%2!= 0,l))\n    return odd_numbers\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #n = int(n)\n    #print(list1)\n    if n >= len(list1):\n        return -1\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for item in list1:\n        list2.append(item[1])\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    new_list = list(list1)\n    new_list.sort()\n    return new_list[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    count = 0\n    while count < len(list1):\n        if count == n - 1:\n            return list1[count]\n        count += 1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element = []\n    for i in list1:\n        element.append(i[n-1])\n    return element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        return None\n    if n > len(list1):\n        return None\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort()\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1 = list1[:n]\n    for i in range(len(list1)):\n        list1[i] = list1[i][0]\n    return list1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list1.sort()\n    list2.sort()\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i == j:\n                return 1\n    return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 and list2:\n        for i in list1:\n            if i in list2:\n                return i\n        else:\n            return \"Not Found\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            return True\n    else:\n        return False\n    \nprint(overlapping([1,2,3],[4,5,6]))"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=False\n    for i in list1:\n        if i in list2:\n            result=True\n    return result\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for x in range(len(list1)):\n        for y in range(len(list2)):\n            if(list1[x]==list2[y]):\n                count+=1\n    if(count>0):\n        return 1\n    else:\n        return 0\n    \nlist1 = [2,3,4,5,6]\nlist2 = [3,6,7,8,9,10]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==1:\n        return (arr[0],arr[0])\n    max_p_1 = max_p_2 = float(\"-inf\")\n    for num in arr:\n        if num>max_p_1:\n            max_p_2 = max_p_1\n            max_p_1 = num\n        elif num>max_p_2:\n            max_p_2 = num\n    return (max_p_1,max_p_2)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = arr.sort()\n    max = arr[0] * arr[1]\n    for i in range(0, len(arr) - 2):\n        if max < arr[i] * arr[i+2]:\n            max = arr[i] * arr[i+2]\n    print(max)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_val = -math.inf\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_val:\n                max_val = arr[i] * arr[j]\n    return max_val\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    arr.sort() \n    product = 1\n    for i in range(n): \n        product *= arr[i] \n    return product\nprint(max_Product([-2, 3, -4, 4, -5]))\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = -9999\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if result < arr[i] * arr[j]:\n                result = arr[i] * arr[j]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = []\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in l:\n            l.append(arr[i])\n        else:\n            result = max(arr[i] * l[i], result)\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_prod = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    left = 0\n    right = n - 1\n    largest = arr[left] * arr[right]\n    while(left < right):\n        if arr[left] * arr[right] < largest:\n            largest = arr[left] * arr[right]\n            max_pair = [arr[left], arr[right]]\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_pair\n    \n    \n    "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] * arr[j] > a * b: \n                a = arr[i] \n                b = arr[j] \n    print('Product of 2 highest number is', a * b)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    #Compute the product of arr[0..n-2] \n    prod = 1\n    for i in range(0, n-1): \n        prod *= arr[i] \n    #Compute the product of arr[n-1..n-1] \n    prod = 1\n    for i in range(n-1, 0, -1): \n        prod *= arr[i] \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def maks(tup): \n        return max(tup) \n    \n    return (maks(Input), maks(Input[1:]))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    for i in range(len(Input)): \n        List.append(Input[i][0])\n    # print(List)\n    return List \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    #returns a dictionary of unique elements in the list\n    def unique_elements(Input):\n        \n        #creates dictionary where each key is a unique element\n        #and the value is a count of that key\n        unique_dict = {}\n        \n        #iterates through the list and adds the elements to the dictionary\n        for element in Input:\n            if unique_dict.get(element) == None:\n                unique_dict[element] = 1\n            else:\n                unique_dict[element] += 1\n        \n        return unique_dict\n    \n    #iterates through the list of tuples\n    for i in range(len(Input)-1):\n        #creates a new list for each iteration that includes the tuple,\n        #i.e. (0,1), (0,2), (1,2)\n        new_list = Input[:i] + Input[i+1:]\n        \n        #calls the function to create a dictionary of unique elements\n        unique_dict = unique_elements(new_list)\n        \n        #iterates through the dictionary and checks if the element is unique\n        for key in unique_dict.keys():\n            #if it is not unique, the value is the length of the list minus 1\n            if unique_dict[key]!= len(new_list)-1:\n                #returns the first element in the list of tuples\n                return(new_list[0][0])\n                break\n            #otherwise, it is the only unique element\n            else:\n                continue\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_elem(Input):\n        # code here\n        length = len(Input)\n        list1 = []\n        for i in range(length):\n            list1.append(Input[i][0])\n        list2 = []\n        for i in range(length):\n            list2.append(Input[i][1])\n        s1 = set(list1)\n        s2 = set(list2)\n        return s1.intersection(s2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common(Input): \n        if len(Input) == 1: \n            return Input[0] \n        else: \n            l = []\n            for i in range(len(Input)): \n                for j in range(len(Input)): \n                    if i!= j: \n                        if Input[i][0] == Input[j][0]: \n                            l.append(Input[i][0])\n            return l\n    return common(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if(Input[i][0] == Input[j][0]):\n                new_list.append(Input[i])\n                new_list.append(Input[j])\n                break\n    return new_list\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output_list = []\n    x = {}\n    y = {}\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] not in x:\n                x[Input[i][j]] = 1\n                y[Input[i][j]] = 1\n            else:\n                x[Input[i][j]] += 1\n                y[Input[i][j]] += 1\n    for i in x.keys():\n        if x[i] == max(x.values()) and y[i] == max(y.values()):\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Implement your solution here\n    list_one=[]\n    list_two=[]\n    for i in range(len(Input)):\n        list_one.append(Input[i][0])\n    for j in range(len(Input)):\n        list_two.append(Input[j][1])\n    set_one=set(list_one)\n    set_two=set(list_two)\n    final=set_one.intersection(set_two)\n    print(final)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input=sorted(Input,key=lambda x:x[0])\n    s=set()\n    for i in range(len(Input)-1):\n        if(Input[i][1]==Input[i+1][1]):\n            s.add(Input[i][0])\n    return s\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # assuming unique tuples are inputted.\n    Input = set(Input)\n    \n    # find the first element in the list\n    First = []\n    for i in range(len(Input)):\n        First.append(Input[i][0])\n    \n    # find the second element in the list\n    Second = []\n    for i in range(len(Input)):\n        Second.append(Input[i][1])\n    \n    # find the common first and second element\n    for i in range(len(Input)):\n        if First[i] == Second[i]:\n            Common = First[i]\n    \n    return Common\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -999\n    for ele in lst:\n        if len(ele) > max:\n            max = len(ele)\n            res = ele\n    return res\nlst = [\"USA\",\"America\",\"India\",\"UK\",\"China\"]\nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > len(max):\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    a = max(len(i) for i in lst)\n    return a\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_len_list = lst[i]\n    return max_len_list\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > len(max):\n            max = lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1,len(lst)):\n        if(len(lst[i])>len(max)):\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n    for i in lst:\n        if len(i)==max:\n            print(i)\nFind_Max([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_str = ''\n    for i in lst:\n        if(len(i) > max_len):\n            max_len = len(i)\n            max_str = i\n    return max_str\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #code here\n    lst_len = list(map(len, lst))\n    max_len = 0\n    max_len_el = None\n    for i in range(len(lst_len)):\n        if lst_len[i] > max_len:\n            max_len = lst_len[i]\n            max_len_el = lst[i]\n    return max_len_el\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_and_sum = []\n    for num in list1:\n        round_and_sum.append(round(num))\n    sum = 0\n    for num in round_and_sum:\n        sum += num\n    print(round_and_sum)\n    print('The total sum is: ', sum)\n    print('The total length of the list is: ', len(round_and_sum))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += int(round(number))\n    return total_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    length = 0\n    for i in list1:\n        length += 1\n        round_list.append(round(i))\n    print(sum(round_list) * length)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(int,list1))\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(round, list1))\n    return sum(list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = map(lambda x: round(x), list1)\n    sum_total = sum(list1)\n    length_list = len(list1)\n    print(f'The total sum of the list multiplied by the length of the list is: {sum_total*length_list}.')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i])\n    for i in range(0, len(list1)):\n        sum += list1[i]\n    print(f\"The total sum of the numbers rounded and multiplied by the length of the list is: {sum * len(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    number_of_items = len(list1)\n    total_sum = 0\n    for i in range(0, number_of_items):\n        total_sum += round(list1[i])\n    return total_sum * number_of_items\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = range(0,n)\n    cube_sum = sum([i**3 for i in even_numbers])\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a=0\n    for i in range(1,n+1):\n        a=a+(i**3)\n    return(a)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n + 1):\n        cube_sum = cube_sum + i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def Sum(n):\n        sum = 0\n        for i in range(0,n):\n            sum += i**3\n        return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if (n == 1):\n        return 1\n    return (cube_Sum(n-1) + (n*n*n))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum)\ncube_Sum(2)\ncube_Sum(10)\ncube_Sum(100)\ncube_Sum(1000)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2 == 0:\n            s += i**3\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return test_tup[0] + '_' + test_tup[1] + '_' + test_tup[2] + '_' + test_tup[3]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return test_tup\n    return test_tup[0] + concatenate_tuple(test_tup[1:])\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \";\"\n    return delimiter.join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str = test_str + str(i) + ','\n    return test_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print('\\n'.join(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for t in test_tup:\n        res += str(t) +''\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f\"{test_tup[0]}{delimiter}{test_tup[1]}{delimiter}{test_tup[2]}{delimiter}{test_tup[3]}{delimiter}{test_tup[4]}{delimiter}{test_tup[5]}\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = \"\"\n    for el in test_tup:\n        test_str += el + '-'\n    return test_str[:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Note: \n    # - This function must accept only natural numbers\n    # - The function must print the average of cubes\n    n = int(input(\"Enter the number of natural numbers \"))\n    sum = 0\n    i = 1\n    for i in range(1,n+1):\n        sum += i ** 3\n        i += 1\n    print(\"The average of the cubes is \",(sum/n))\n    \ndef find_Minimum_Number(n):\n    '''\n    Write a python function to find the minimum number in list of numbers.\n    '''\n    # Note:\n    # - This function must accept only list of numbers\n    # - The function must print the minimum number\n    n = int(input(\"Enter the number of numbers \"))\n    num = []\n    for i in range(1,n+1):\n        num.append(int(input(\"Enter number \")))\n    print(\"The minimum number in the list is \",min(num))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_numbers = []\n    total = 0\n    for i in range(n+1):\n        cube_numbers.append(i**3)\n        total += i**3\n    return total/n\nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    result = 0\n    while count <= n:\n        result += (count ** 3)\n        count += 1\n    return result / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + (i**3)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i*i*i\n    return(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i<=n:\n        sum = sum + i**3\n        i = i + 1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * (i+1)\n    return result\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your code here\n    total = 0.0\n    for i in range(n):\n        total += i**3\n    return total/n\nprint(find_Average_Of_Cube(2))\nprint(find_Average_Of_Cube(3))\nprint(find_Average_Of_Cube(4))\nprint(find_Average_Of_Cube(5))\nprint(find_Average_Of_Cube(6))\nprint(find_Average_Of_Cube(7))\nprint(find_Average_Of_Cube(8))\nprint(find_Average_Of_Cube(9))\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(11))\nprint(find_Average_Of_Cube(12))\nprint(find_Average_Of_Cube(13))\nprint(find_Average_Of_Cube(14))\nprint(find_Average_Of_Cube(15))\nprint(find_Average_Of_Cube(16))\nprint(find_Average_Of_Cube(17))\nprint(find_Average_Of_Cube(18))\nprint(find_Average_Of_Cube(19))\nprint(find_Average_Of_Cube(20))\nprint(find_Average_Of_Cube(21))\nprint(find_Average_Of_Cube(22))\nprint(find_Average_Of_Cube(23))\nprint(find_Average_Of_Cube(24))\nprint(find_Average_Of_Cube(25))\nprint(find_Average_Of_Cube(26))\nprint(find_Average_Of_Cube(27))\nprint(find_Average_Of_Cube(28))\nprint(find_Average_Of_Cube(29))\nprint(find_Average_Of_Cube(30))\nprint(find_Average_Of_Cube(31))\nprint(find_Average_Of_Cube(32))\nprint(find_Average_Of_Cube(33))\nprint(find_Average_Of_Cube(34))\nprint(find_Average_Of_Cube(35))\nprint(find_Average_Of_Cube(36))\nprint(find_Average_Of_Cube(37))\nprint(find_Average_Of_Cube(38))\nprint(find_Average_Of_Cube(39))\nprint(find_Average_Of_Cube(40))\nprint(find_Average_Of_Cube(41))\nprint(find_Average_Of_Cube(42))\nprint(find_Average_Of_Cube(43))\nprint(find_Average_Of_Cube(44))\nprint(find_Average_Of_Cube(45))\nprint(find_Average_Of_Cube(46))\nprint(find_Average_Of_Cube(47))\nprint(find_Average_Of_Cube(48))\nprint(find_Average_Of_Cube(49))\nprint(find_Average_Of_Cube(50))\nprint(find_Average_Of_Cube(51))\nprint(find_Average_Of_Cube(52))\nprint(find_Average_Of_Cube(53))\nprint(find_Average_Of_Cube(54))\nprint(find_Average_Of_Cube(55))\nprint(find_Average_Of_Cube(56))\nprint(find_Average_Of_Cube(57))\nprint(find_Average_Of_Cube(58))\nprint(find_Average_Of_Cube(59))\nprint(find_Average_Of_Cube(60))\nprint(find_Average_Of_Cube(61))\nprint(find_Average_Of_Cube(62))\nprint(find_Average_Of_Cube(63))\nprint(find_Average_Of_Cube(64))\nprint(find_Average_Of_Cube(65))\nprint(find_Average_Of_Cube(66))\nprint(find_Average_Of_Cube(67))\nprint(find_Average_Of_Cube(68))\nprint(find_Average_Of_Cube(69))\nprint(find_Average_Of_Cube(70))\nprint(find_Average_Of_Cube(71))\nprint(find_Average_Of_Cube(72))\nprint(find_Average_Of_Cube(73))\nprint(find_Average_Of_Cube(74))\nprint(find_Average_Of_Cube(75))\nprint(find_Average_Of_Cube(76))\nprint(find_Average_Of_Cube(77))\nprint(find_Average_Of_Cube(78))\nprint(find_Average_Of_Cube(79))\nprint(find_Average_Of_Cube(80))\nprint(find_Average_Of_Cube(81))\nprint(find_Average_Of_Cube(82))\nprint(find_Average_Of_Cube(83))\nprint(find_Average_Of_Cube(84))\nprint(find_Average_Of_Cube(85))\nprint(find_Average_Of_Cube(86))\nprint(find_Average_Of_Cube(87))\nprint(find_Average_Of_Cube(88))\nprint(find_Average_Of_Cube(89))\nprint(find_Average_Of_Cube(90))\nprint(find_Average_Of_Cube(91))\nprint(find_Average_Of_Cube(92))\nprint(find_Average_Of_Cube(93))\nprint(find_Average_Of_Cube(94))\nprint(find_Average_Of_Cube(95))\nprint(find_Average_Of_Cube(96))\nprint(find_Average_Of_Cube(97))\nprint(find_Average_Of_Cube(98))\nprint(find_Average_Of_Cube(99))\nprint(find_Average_Of_Cube(100))\nprint(find_Average_Of_Cube(101))\nprint(find_Average_Of_Cube(102))\nprint(find_Average_Of_Cube(103))\nprint(find_Average_Of_Cube(104))\nprint(find_Average_Of_Cube(105))\nprint(find_Average_Of_Cube(106))\nprint(find_Average_Of_Cube(107))\nprint(find_Average_Of_Cube(108))\nprint(find_Average_Of_Cube(109))\nprint(find_Average_Of_Cube(110))\nprint(find_Average_Of_Cube(111))\nprint(find_Average_Of_Cube(112))\nprint(find_Average_Of_Cube(113))\nprint(find_Average_Of_Cube(114))\nprint(find_Average_Of_Cube(115))\nprint(find_Average_Of_Cube(116))\nprint(find_Average_Of_Cube(117))\nprint(find_Average_Of_Cube(118))\nprint(find_Average_Of_Cube(119))\nprint(find_Average_Of_Cube(120))\nprint(find_Average_Of_Cube(121))\nprint(find_Average_Of_Cube(122))\nprint(find_Average_Of_Cube(123))\nprint(find_Average_Of_Cube(124))\nprint(find_Average_Of_Cube(125))\nprint(find_Average_Of_Cube(126))\nprint(find_Average_Of_Cube(127))\nprint(find_Average_Of_Cube(128))\nprint(find_Average_Of_Cube(129))\nprint(find_Average_Of_Cube(130))\nprint(find_Average_Of_Cube(131))\nprint(find_Average_Of_Cube(132))\nprint(find_Average_Of_Cube(133))\nprint(find_Average_Of_Cube(134))\nprint(find_Average_Of_Cube(135))\nprint(find_Average_Of_Cube(136))\nprint(find_Average_Of_Cube(137))\nprint(find_Average_Of_Cube(138))\nprint(find_Average_Of_Cube(139))\nprint(find_Average_Of_Cube(140))\nprint(find_Average_Of_Cube(141))\nprint(find_Average_Of_Cube(142))\nprint(find_Average_Of_Cube(143))\nprint(find_Average_Of_Cube(144))\nprint(find_Average_Of_Cube(145))\nprint(find_Average_Of_Cube(146))\nprint(find_Average_Of_Cube(147))\nprint(find_Average_Of_Cube(148))\nprint(find_Average_Of_Cube(149))\nprint(find_Average_Of_Cube(150))\nprint(find_Average_Of_Cube(151))\nprint(find_Average_Of_Cube(152))\nprint(find_Average_Of_Cube(15"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s=s+(i**3)\n    return (s/n)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[::-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed([i[-1] for i in test_tuple]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear = tuple(i[-1] for i in test_tuple)\n    return rear\n    \ndef make_tuple_comprehension(test_tuple):\n    '''\n    Write a generator, using a list comprehension, to return only the rear index elements of the given tuple.\n    '''\n    \n    rear = (i[-1] for i in test_tuple)\n    return rear\n    \ndef extract_rear_tuple(test_tuple):\n    '''\n    Write a function to extract only the rear index elements of each string in the given tuple.\n    '''\n    rear = tuple(i[-1] for i in test_tuple)\n    return rear\n    \ndef make_tuple_comprehension_tuple(test_tuple):\n    '''\n    Write a generator, using a tuple comprehension, to return only the rear index elements of the given tuple.\n    '''\n    \n    rear = tuple(i[-1] for i in test_tuple)\n    return rear\n    \n    \ndef extract_last_index(test_tuple):\n    '''\n    Write a function to extract only the last index element of each string in the given tuple.\n    '''\n    \n    last_index = tuple(i[-1] for i in test_tuple)\n    return last_index\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1],)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((test_tuple[0][-1],test_tuple[1][-1],test_tuple[2][-1],test_tuple[3][-1],test_tuple[4][-1],test_tuple[5][-1]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        i = i[-1]\n        new_tuple += (i,)\n    return new_tuple\n    \nprint(extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g')))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your Code Here\n    return\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \nprint(count_element_in_list([[1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']], 'c'))\nprint(count_element_in_list([[1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']], 'h'))\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # The base case is the list is empty\n    if list1 == []:\n        return 0\n    # If the list contains the element then return 1 + the result of calling the function on the sublist excluding the current element\n    elif list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    # If the element is not found in the list then return the result of calling the function on the sublist excluding the current element\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i == x:\n            counter += 1\n    return counter"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum(1 for el in list1 if x in el)\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            odds.append(nums[i])\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = filter(lambda x: x%2!=0, nums)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for i in nums:\n        if i % 2 == 1:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            nums[i] = nums[i]**2\n    return nums\n    # Given an array of numbers,\n    # return an array of numbers that are odd.\n    # [1,2,3,4,5,6,7,8,9] --> [1,3,5,7]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return(dt.strftime(\"%d-%b-%Y\"))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt = \"{}-{}-{}\".format(dt[2], dt[1], dt[0])\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here.\n    date = dt.split('-')\n    date = [int(x) for x in date]\n    date_tup = '{:02d}-{:02d}-{:04d}'.format(date[2],date[1],date[0])\n    return date_tup\n    \ndef time_in_range(t1, t2, in_range):\n    '''\n    Write a function that checks whether a passed-in datetime object falls within a specified range of times.\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(dt.split('-'))\n    if '-' in dt:\n        d,m,y = dt.split('-')\n        #print(d,m,y)\n        date = str(int(y)+1911) + '-' + str(int(m)+1) + '-' + str(int(y)+int(m)/12)\n        return date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:10]+'-'+dt[3:5]+'-'+dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    dd = date[0]\n    mm = date[1]\n    yy = date[2]\n    yy = yy.rjust(4, '0')\n    return dd + '-' + mm + '-' + yy\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_split = dt.split(\"-\")\n    date_in_correct_format = date_split[2] + \"-\" + date_split[1] + \"-\" + date_split[0]\n    return date_in_correct_format\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = dt.split(\"-\")\n    dd, mm, yyyy = int(dd), int(mm), int(yyyy)\n    mm = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][int(mm)-1]\n    return f\"{dd}-{mm}-{yyyy}\"\ndef valid_email(email):\n    '''\n    Write a function to check if a string is a valid email address or not\n    '''\n    pattern = re.compile(r\"(^[\\w]+[\\w\\d]*@gmail\\.com)\")\n    if(pattern.match(email)):\n        return True\n    else:\n        return False\ndef find_substring(str, substr):\n    '''\n    Write a function to find and return index of substring\n    '''\n    return str.find(substr)\ndef make_shapes_are_equivalent(a, b):\n    '''\n    Write a function that compares the two shapes a and b and return True if the shapes are equivalent.\n    '''\n    if(len(a)!= len(b)):\n        return False\n    else:\n        for i in range(len(a)):\n            if(a[i]!= b[i]):\n                return False\n        return True\ndef form_two_lists(l1, l2):\n    '''\n    Write a function to merge the two given lists into a new list without modifying the original lists.\n    '''\n    merged_list = []\n    i = 0\n    while(i<len(l1) and i<len(l2)):\n        if(l1[i] > l2[i]):\n            merged_list.append(l2[i])\n            i+=1\n        else:\n            merged_list.append(l1[i])\n            i+=1\n    while(i<len(l1)):\n        merged_list.append(l1[i])\n        i+=1\n    while(i<len(l2)):\n        merged_list.append(l2[i])\n        i+=1\n    return merged_list\ndef order_item_by_subtotal(items, price):\n    '''\n    Write a function to sort an array by sub-total\n    '''\n    return sorted(items, key=lambda x: x[\"subtotal\"])\ndef sort_list_by_element(list):\n    '''\n    Write a function to sort a list of dictionaries by a given key.\n    '''\n    list.sort(key=lambda x: x[\"key\"])\n    return list\ndef sort_list_of_dictionaries_by_key(list_of_dictionary, key):\n    '''\n    Write a function to sort a list of dictionaries by a given key.\n    '''\n    return sorted(list_of_dictionary, key=lambda x: x[key])\ndef sort_dict_by_key(dict, key):\n    '''\n    Write a function to sort a dictionary by a given key\n    '''\n    return sorted(dict, key=lambda x: x[key])\ndef sort_dict_by_key_desc(dict, key):\n    '''\n    Write a function to sort a dictionary by a given key\n    '''\n    return sorted(dict, key=lambda x: x[key], reverse=True)\ndef sort_dict_by_key_desc_with_limit(dict, key, limit):\n    '''\n    Write a function to sort a dictionary by a given key\n    '''\n    return sorted(dict, key=lambda x: x[key], reverse=True)[:limit]\ndef sort_dict_by_key_desc_with_limit_with_offset(dict, key, limit, offset):\n    '''\n    Write a function to sort a dictionary by a given key\n    '''\n    return sorted(dict, key=lambda x: x[key], reverse=True)[offset:offset+limit]\ndef remove_keys(dict, keys):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    for key in keys:\n        del dict[key]\n    return dict\ndef count_occurence_of_key(dict, key):\n    '''\n    Write a function to count the number of occurence of a given key\n    '''\n    return dict.get(key, 0)\ndef count_occurence_of_keys(dict, keys):\n    '''\n    Write a function to count the number of occurence of a given set of keys\n    '''\n    return len(dict)\ndef delete_key_value_pairs(dict, keys):\n    '''\n    Write a function to delete a given set of key-value pairs\n    '''\n    for key in keys:\n        del dict[key]\n    return dict\ndef insert_item_at_index(list, item, index):\n    '''\n    Write a function to insert an item into list at index.\n    '''\n    list.insert(index, item)\n    return list\ndef swap_items(list, first, second):\n    '''\n    Write a function to swap two elements in a list\n    '''\n    list[first], list[second] = list[second], list[first]\n    return list\ndef count_occurence_of_value(dict, value):\n    '''\n    Write a function to count the number of occurence of a given value\n    '''\n    return dict[value]\ndef count_occurence_of_values(dict, value):\n    '''\n    Write a function to count the number of occurence of a given set of values\n    '''\n    return len(dict.keys())\ndef count_occurence_of_keys(dict, value):\n    '''\n    Write a function to count the number of occurence of a given set of keys\n    '''\n    return len(dict)\ndef insert_items_in_order(list, items):\n    '''\n    Write a function to insert a set of elements in a list in such a way that all elements\n    are inserted in ascending order\n    '''\n    for item in items:\n        list.append(item)\n    return list\ndef print_list_in_increasing_order(list):\n    '''\n    Write a function to print list elements in increasing order\n    '''\n    list.sort()\n    for item in list:\n        print(item)\n    return list\ndef print_list_in_ascending_order(list):\n    '''\n    Write a function to print list elements in increasing order\n    '''\n    list.sort()\n    for item in list:\n        print(item)\n    return list\ndef swap_list_elements(list):\n    '''\n    Write a function to swap the elements of a list\n    '''\n    list[1], list[2] = list[2], list[1]\n    return list\ndef count_occurence_of_item_in_list(list, item):\n    '''\n    Write a function to count the number of occurence of a given item in a list\n    '''\n    return list.count(item)\ndef index_of_element_in_list(list, item):\n    '''\n    Write a function to count the number of occurence of a given item in a list\n    '''\n    return list.index(item)\ndef index_of_element_in_list_with_value(list, value):\n    '''\n    Write a function to count the number of occurence of a given item in a list\n    '''\n    return list.index(value)\ndef index_of_element_in_list_with_value_with_value(list, value):\n    '''\n    Write a function to count the number of occurence of a given item in a list\n    '''\n    return list.index(value)\ndef maximum_value_in_list(list):\n    '''\n    Write a function to find the maximum value in a list\n    '''\n    return max(list)\ndef minimum_value_in_list(list):\n    '''\n    Write a function to find the minimum value in a list\n    '''\n    return min(list)\ndef maximum_value_in_list_with_key(list, key):\n    '''\n    Write a functio"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # f'{a}' inserts 'a' into the string literal using f-string formatting \n    return f'{dt[8:10]}-{dt[5:7]}-{dt[0:4]}'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort(my_list):\n        gap = len(my_list) // 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                j = i\n                while j >= gap and my_list[j-gap] > my_list[j]:\n                    my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                    j -= gap\n            gap = gap // 2\n    return shell_sort(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    iter = 0\n    while iter < len(my_list):\n        if iter == 0 or iter > len(my_list):\n            break\n        else:\n            iter = iter + 1\n            for j in range(iter, len(my_list)):\n                item = my_list[j]\n                pos = j\n                while item <= my_list[pos-iter]:\n                    pos = pos - iter\n                    item = item + 1\n                my_list[pos] = my_list[j]\n                my_list[j] = item\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Assuming that the number of elements is at least 2\n    for i in range(len(my_list)):\n        gap = len(my_list) // i\n        while gap > 0:\n            for j in range(gap, len(my_list)):\n                current_element = my_list[j]\n                while j >= gap and current_element < my_list[j - gap]:\n                    my_list[j] = my_list[j - gap]\n                    j -= gap\n                my_list[j] = current_element\n            gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for sublist_length in range(len(my_list),0,-1):\n        gap=sublist_length//2\n        for i in range(gap,len(my_list)):\n            current_value = my_list[i]\n            position = i\n            while position >= gap and my_list[position-gap] > current_value:\n                my_list[position]=my_list[position-gap]\n                position = position-gap\n            my_list[position]=current_value\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    #1-st iteration - We are not touching the sorted sublist\n    #(Here the size of the sublist is equal to 1)\n    for gap in range(1, n):\n        #n-1 gap - We are not touching the sorted sublist\n        #(Here the size of the sublist is equal to n-1)\n        for j in range(gap, n):\n            #j is the starting index of the sublist\n            #i is the index of current element in the sublist\n            i = j - gap\n            #initialise i = 0\n            while i >= 0 and my_list[i] > my_list[i + gap]:\n                #swap\n                my_list[i], my_list[i + gap] = my_list[i + gap], my_list[i]\n                i -= gap\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(len(my_list)-1-i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Start the gap of each consecutive sub array\n    gap = len(my_list)//2\n    # Outer loop to go through each gap\n    while gap > 0:\n        # Left and right pointer to manage the intervals\n        left = 0\n        right = gap\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = len(my_list)\n    step = 1\n    while step < count:\n        for i in range(step, count):\n            while i >= step and my_list[i] < my_list[i - step]:\n                my_list[i], my_list[i - step] = my_list[i - step], my_list[i]\n                i -= step\n        step += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = 1\n    while h <= len(my_list):\n        for i in range(len(my_list)-1):\n            for j in range(i+1, len(my_list)):\n                if my_list[i] > my_list[j]:\n                    my_list[i], my_list[j] = my_list[j], my_list[i]\n        h *= 2\n    return my_list\n    \nprint(shell_sort([54, 26, 93, 17, 77, 31, 44, 55, 20]))"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n//2:\n        gap = gap*2+1\n    # gap = 2, 3, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j = j - gap\n        gap = gap//2\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1 == l2:\n        return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    else:\n        return False\n        \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    return (tup1[0] and tup2[0], tup1[1] and tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    e = (a & b) | (c & d)\n    return e\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    x = (True, False, True)\n    y = (True, False, True)\n    \n    return (x and y), (x and y)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 for tup1 in test_tup1 if tup1 in test_tup2)\n    #Example: and_tuples((1,2,3,4,5),(2,3,4,5,6))=1,2,3,4,5\n    #Example: and_tuples((1,2,3,4,5),(2,3,5,6))=1,2,3,4,5\n    #Example: and_tuples((1,2,3,4,5),(2,3,4,5,6))=1,2,3,4,5\n    #Example: and_tuples((1,2,3,4,5),(2,3,5,6))=1,2,3,4,5\n    #Example: and_tuples((1,2,3,4,5),(2,3,5,6,7))=1,2,3,4,5\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    return D**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a, b*x**2 - 2*c*x + b)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 1\n    y = b**2 - 4*a*c\n    return 'The directrix is at {}, {}'.format(x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return (0, b/c)\n    else:\n        return (a/c, b/c)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    import math\n    x1 = a + (b*b - a*a)/(2*c)\n    x2 = a - (b*b - a*a)/(2*c)\n    \n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"a = \",a,\"b = \",b,\"c = \",c)\n    d = b ** 2 - 4 * a * c\n    if d < 0: \n        return None\n    elif d == 0: \n        return (-b)/(2*a)\n    else:\n        x1 = (-b - sqrt(d))/(2*a)\n        x2 = (-b + sqrt(d))/(2*a)\n        return (x1,x2)\n    \ndef parabola_circle(a, b, c, e): \n    '''\n    Write a function to find the center and radius of a parabola\n    on a circle.\n    '''\n    x = parabola_directrix(a,b,c)\n    if x == None: \n        return (None, None)\n    else: \n        x1, x2 = x\n        r = sqrt(e**2 - x1**2)\n        center = r * x1 + e\n        radius = r\n        return (center, radius)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    D = b**2 - 4*a*c\n    if D < 0:\n        print('The equation has no real root')\n    elif D == 0:\n        return -b/(2*a)\n    else:\n        x1 = (-b+math.sqrt(D))/(2*a)\n        x2 = (-b-math.sqrt(D))/(2*a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    A = -1*(b**2)\n    B = 2*(a*b)\n    C = a**2 + b**2 - (c**2)\n    delta = (B**2) - 4*A*C\n    x_1 = (-B + math.sqrt(delta))/(2*A)\n    x_2 = (-B - math.sqrt(delta))/(2*A)\n    x_3 = ((-B - math.sqrt(delta))/(2*A))\n    x_4 = ((-B + math.sqrt(delta))/(2*A))\n    x_5 = x_2\n    x_6 = x_4\n    x_7 = x_3\n    print(\"x1 =\", x_1)\n    print(\"x2 =\", x_2)\n    print(\"x3 =\", x_3)\n    print(\"x4 =\", x_4)\n    print(\"x5 =\", x_5)\n    print(\"x6 =\", x_6)\n    print(\"x7 =\", x_7)\n    print(\"Directrix =\", x_1, x_2, x_3, x_4, x_5, x_6, x_7)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a == 0:\n        x = 0\n        y = c / (b * b)\n        \n        return x, y\n        \n    else:\n        x = (c * b) / (a * a)\n        y = c - (a * b) / (a * a)\n        \n        return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-c/(a*a)) + ((b*b)/(4*a))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #checking length of the lists\n    list1_len = len(list1)\n    list2_len = len(list2)\n    if list1_len > list2_len:\n        small_list = list2\n        big_list = list1\n    else:\n        small_list = list1\n        big_list = list2\n    #checking if any common element\n    if small_list[0] in big_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = []\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #method 1\n    if list1[0] in list2:\n        return True\n    elif list1[-1] in list2:\n        return True\n    else:\n        return False\n    #method 2\n    '''\n    return any(a in b for a in b for b in list1)\n    '''\n    #method 3\n    '''\n    return list1[0] in list2 or list1[-1] in list2\n    '''\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    \n    for i in list1:\n        if i in list2:\n            return True\n        \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for e in list1:\n        if e in list2:\n            common.append(e)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #iterate through both lists\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1) & set(list2)))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1) & set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height = float(height)\n    base1 = float(base1)\n    base2 = float(base2)\n    if base1 <= 0.0 or base2 <= 0.0:\n        raise Exception('The bases of the trapezium must be greater than 0')\n    if height <= 0.0:\n        raise Exception('The height of the trapezium must be greater than 0')\n    length1 = base1/2\n    length2 = base2/2\n    height1 = height/2\n    return (length1+length2)*height1/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = []\n    for i in range(base1):\n        for j in range(base2):\n            trapezium_length.append(i+j)\n    print('The median of the trapezium is: '+str(median_integer(trapezium_length)))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_ratio = base1/base2\n    height_ratio = height/base1\n    if base_ratio < height_ratio:\n        return base1 + base_ratio/2 * height\n    else:\n        return base2 + height_ratio/2 * base1\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    mid_length = (base1 + base2)/2\n    base3 = mid_length * height\n    return base3\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height>base1+base2):\n        print('The trapezium is not right')\n    else:\n        \n        if (height==base1+base2):\n            return height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    h1 = base1 + base2\n    h2 = 2 * base2\n    h3 = height\n    return (h1 + h2 + h3) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #print(base1,base2,height)\n    return 1.25 * (base1 + base2) * height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 + base2 > height:\n        return ((base1*height) + ((height - base1 - base2) / 2)) / 2\n    else:\n        return height / 2\n        \ndef triangle_area(base,height):\n    '''\n    Write a function to find the area of a triangle using the formula \n    area = 1/2 * base * height.\n    '''\n    return (base * height) / 2\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    if len(arr) == 0:\n        return greater\n    if arr[len(arr) - 1] < number:\n        greater = True\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Note that it should be a for loop over the array instead of using indexing\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if(arr[i]>number):\n            print('Yes')\n            return True\n        else:\n            print('No')\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"Greater\")\n            return\n    print(\"Not greater\")\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n    \ndef check_greater_range(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array, in the range of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            if arr[i] - number >= 0:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if number == arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # write your function here\n    pattern = re.compile(r'ab+')\n    if re.search(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(.+?)a(.+)b(.+)\")\n    result = pattern.findall(text)\n    if result == []:\n        return None\n    else:\n        return result[0]\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'a+b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"a(.*)b\")\n    match = pattern.search(text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab')\n    match = re.findall(pattern, text)\n    print(match)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by a number of b's followed by one or more a's.\n    '''\n    pattern = re.compile(r'bb\\d')\n    match = re.findall(pattern, text)\n    print(match)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.search('a+b',text)\n    return x.group()\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    string_to_search = \"aba\"\n    if re.search(pattern, string_to_search):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern = re.compile(r\"ab{2}\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by a b followed by one or more c's.\n    '''\n    pattern = re.compile(r\"ab{1}c\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by a b followed by a c followed by one or more d's.\n    '''\n    pattern = re.compile(r\"abcd\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's.\n    '''\n    pattern = re.compile(r\"ab{1}cd\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by a b followed by one or more c's followed by a d followed by one or more e's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by a b followed by one or more c's followed by a d followed by one or more e's followed by one or more f's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's.\n    '''\n    pattern = re.compile(r\"ab{1}cde{1}f{1}g\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}i\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}j\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}jk\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}jl\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's followed by one or more m's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}jlm\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's followed by one or more m's followed by one or more n's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}jlm\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's followed by one or more m's followed by one or more n's followed by one or more o's.\n    '''\n    pattern = re.compile(r\"ab{1}cd{1}ef{1}gh{1}jlm\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by a c followed by one or more d's followed by one or more e's followed by one or more f's followed b"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('ab+',text)\n    #return re.search('ab+', text) is not None\n    #print(bool(re.search('ab+', text)))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b+)+'\n    \n    if re.search(pattern, text):\n        return 'Matches!'\n    else:\n        return 'No Match!'\n    \nprint(text_match_one('abbba'))\nprint(text_match_one('aab'))\nprint(text_match_one('aababbba'))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n % 10)\n    "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n)!= int :\n        print('Please enter the Integer')\n    else :\n        if (n==0 or n==1 or n==-1) :\n            return 1\n        return n%10\n    "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    ans = n%10\n    return ans\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    res = n%10\n    return res\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i<0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = []\n    for i in list1:\n        list1.append(i)\n    list1 = list(set(list1) - set([i for i in range(1,100)]))\n    list1 = list(map(lambda x : -x,list1))\n    print(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res = []\n    for i in list1:\n        if i < 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[-1::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = -1 * list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return([x for x in list1 if x < 0])\nprint(\"-\"*80)\nprint(neg_nos(list1))\nprint(\"-\"*80)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            res.append(list1[i])\n    return res\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i < 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_odd = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str_odd += str1[i]\n    return str_odd\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in ['1', '3', '5', '7', '9', '0']:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    list1 = list(str1)\n    str1 = ''\n    for i in list1:\n        if i.isalpha() or i.isdigit():\n            str1 += i\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    result = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i] % 2 == 0:\n            result += str1[i]\n    \n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace(',','')\n    str1 = str1.replace(';','')\n    str1 = str1.replace('-','')\n    str1 = str1.replace('/','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace('[','')\n    str1 = str1.replace(']','')\n    str1 = str1.replace('{','')\n    str1 = str1.replace('}','')\n    str1 = str1.replace('`','')\n    str1 = str1.replace('#','')\n    str1 = str1.replace('*','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('\\\\','')\n    str1 = str1.replace('\\'','')\n    str1 = str1.replace('\\\"','')\n    str1 = str1.replace('~','')\n    str1 = str1.replace('\\0','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\r','')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i)%2==0:\n            str1 = str1.replace(i,\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(f\"Original string is: {str1}\")\n    res = \"\"\n    for i in str1:\n        if ord(i) % 2!= 0:\n            res += i\n    print(f\"New string after removing odd characters is: {res}\")\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for i in str1:\n        if ord(i) % 2 == 0:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_list = list(str1)\n    for i in range(len(str_list)):\n        if i%2==0:\n            pass\n        else:\n            str_list.pop(i)\n    str1 = ''.join(str_list)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        if str1[0] =='':\n            if str1[1] =='':\n                return remove_odd(str1[2:len(str1)])\n            else:\n                return remove_odd(str1[1:len(str1)])\n        else:\n            if str1[0] =='':\n                return remove_odd(str1[1:len(str1)])\n            else:\n                return str1[0] + remove_odd(str1[1:len(str1)])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    if len(test_list)<2:\n        return count\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] + test_list[j] == test_list[j] + test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i]!= '.':\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize variables\n    num_of_pairs = 0\n    for i in range(len(test_list) - 1):\n        prev_item = test_list[i]\n        curr_item = test_list[i + 1]\n        if prev_item == curr_item:\n            num_of_pairs += 1\n    return num_of_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #not working\n    counter = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j] and test_list[i] > test_list[j + 1]:\n                counter += 1\n            elif test_list[i] < test_list[j] and test_list[i] < test_list[j + 1]:\n                counter += 1\n    print(counter)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidirectional = 0\n    for x in test_list:\n        for y in test_list:\n            if (x + y) == y + x and x < y:\n                count_bidirectional += 1\n    return count_bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum([x!=y for x,y in zip(test_list, test_list[::-1])])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i][0] < test_list[i][1] and test_list[i+1][0] < test_list[i+1][1]) or (test_list[i][0] > test_list[i][1] and test_list[i+1][0] > test_list[i+1][1]):\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for item in test_list if (item[0] == item[2]) and (item[1] == item[3]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(e) for e in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(i) for i in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    x = 0\n    for i in range(len(L)):\n        x = x + L[i]\n    return x\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = L.split()\n    return int(sum(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = 0\n    for i in range(0, len(L)):\n        a = a + L[i]\n    return a\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    j=1\n    for i in L:\n        j*=i\n    return j\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(L[0])*1000 + int(L[1])*100 + int(L[2])*10 + int(L[3])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for x in L:\n        total += x\n    return total\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Your Code here\n    sentence = text.split()\n    \n    pattern_1 = r'\\b(to)\\b'\n    pattern_2 = r'\\b(out|in)\\b'\n    pattern_3 = r'\\b(through)\\b'\n    pattern_4 = r'\\b(for|around)\\b'\n    pattern_5 = r'\\b(on)\\b'\n    pattern_6 = r'\\b(up|down|left|right)\\b'\n    pattern_7 = r'\\b(between)\\b'\n    pattern_8 = r'\\b(above)\\b'\n    pattern_9 = r'\\b(below)\\b'\n    pattern_10 = r'\\b(near)\\b'\n    \n    for i in range(len(sentence)-1):\n        # 1\n        if re.search(pattern_1, sentence[i]):\n            print('1: ', sentence[i], sentence[i+1])\n        # 2\n        if re.search(pattern_2, sentence[i]):\n            print('2: ', sentence[i], sentence[i+1])\n        # 3\n        if re.search(pattern_3, sentence[i]):\n            print('3: ', sentence[i], sentence[i+1])\n        # 4\n        if re.search(pattern_4, sentence[i]):\n            print('4: ', sentence[i], sentence[i+1])\n        # 5\n        if re.search(pattern_5, sentence[i]):\n            print('5: ', sentence[i], sentence[i+1])\n        # 6\n        if re.search(pattern_6, sentence[i]):\n            print('6: ', sentence[i], sentence[i+1])\n        # 7\n        if re.search(pattern_7, sentence[i]):\n            print('7: ', sentence[i], sentence[i+1])\n        # 8\n        if re.search(pattern_8, sentence[i]):\n            print('8: ', sentence[i], sentence[i+1])\n        # 9\n        if re.search(pattern_9, sentence[i]):\n            print('9: ', sentence[i], sentence[i+1])\n        # 10\n        if re.search(pattern_10, sentence[i]):\n            print('10: ', sentence[i], sentence[i+1])\n    \n    return sentence\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = ''\n    for i, word in enumerate(text.split()):\n        if 'ADVERB' in word.upper() or 'ADJECTIVE' in word.upper():\n            if 'ADVERB' in word.upper():\n                adverb_position = i\n            else:\n                adjective_position = i\n    return adverb_position, adjective_position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def match_and_extract(pattern, string):\n        '''\n        Helper function to find adverb and extract their position from a given sentence.\n        '''\n        regx = re.compile(pattern)\n        match = regx.search(string)\n        if match:\n            start_pos = match.start()\n            end_pos = match.end()\n            match_result = str(string[start_pos:end_pos])\n            return match_result\n    #Assign the result to a dictionary\n    adverb_positions = {}\n    #Use the extract function and add to dictionary\n    for sentence in text:\n        adverb = match_and_extract(r'(?i)(?<!\\w)ad\\w*(?!\\w)', sentence)\n        if adverb:\n            adverb_positions[adverb] = str(sentence.index(adverb))\n    #Return the dictionary\n    return adverb_positions\n    \ndef find_verb_in_phrase(text):\n    '''\n    Write a function to find the first verb and the other verbs that follow in a given sentence.\n    '''\n    def match_and_extract(pattern, string):\n        '''\n        Helper function to find verb and extract their position from a given sentence.\n        '''\n        regx = re.compile(pattern)\n        match = regx.search(string)\n        if match:\n            start_pos = match.start()\n            end_pos = match.end()\n            match_result = str(string[start_pos:end_pos])\n            return match_result\n    #Assign the result to a dictionary\n    verb_in_phrase = {}\n    #Use the extract function and add to dictionary\n    for sentence in text:\n        verb = match_and_extract(r'(?i)(?<!\\w)v\\w*(?!\\w)', sentence)\n        if verb:\n            if not verb_in_phrase.get(verb):\n                verb_in_phrase[verb] = []\n            verb_in_phrase[verb].append(str(sentence.index(verb) + 1))\n    #Return the dictionary\n    return verb_in_phrase\n    \ndef find_pronoun_in_phrase(text):\n    '''\n    Write a function to find the first pronoun and the other pronouns that follow in a given sentence.\n    '''\n    def match_and_extract(pattern, string):\n        '''\n        Helper function to find pronoun and extract their position from a given sentence.\n        '''\n        regx = re.compile(pattern)\n        match = regx.search(string)\n        if match:\n            start_pos = match.start()\n            end_pos = match.end()\n            match_result = str(string[start_pos:end_pos])\n            return match_result\n    #Assign the result to a dictionary\n    pronoun_in_phrase = {}\n    #Use the extract function and add to dictionary\n    for sentence in text:\n        pronoun = match_and_extract(r'(?i)(?<!\\w)p\\w*(?!\\w)', sentence)\n        if pronoun:\n            if not pronoun_in_phrase.get(pronoun):\n                pronoun_in_phrase[pronoun] = []\n            pronoun_in_phrase[pronoun].append(str(sentence.index(pronoun) + 1))\n    #Return the dictionary\n    return pronoun_in_phrase\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == '':\n        return None\n    text = text.lower()\n    result = re.findall('\\w+-\\w+', text)\n    for i in range(len(result)):\n        result[i] = result[i].replace('-','')\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # match = re.search(\"\\w+[a-z]\\w+\", text)\n    # if match:\n    #     return match.group()\n    # else:\n    #     return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(.*) are (.*)')\n    result = pattern.findall(text)\n    if len(result) > 0:\n        return result[0][1]\n    else:\n        return 'NOT FOUND'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a list to hold the positions of the adverbs in the sentence.\n    positions = []\n    # Create a regular expression to find adverbs.\n    pattern = r'\\b(?:(?:^|\\s)(?P<adverb>ad|remaining|real|realized|simply|simplier|simply|similar|simplies|simpliest)\\b)'\n    # For each match, add the position to the list.\n    for match in re.finditer(pattern,text):\n        positions.append(match.span())\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = {}\n    text = text.split()\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'an' or text[i] == 'the' or text[i] == 'to':\n            adverb_position.update({text[i]:i})\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    lst = []\n    text = re.split(r'[.?!,]', text)\n    for i in range(len(text)):\n        if text[i] == 'are':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'can':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'do':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] =='might':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will' and text[i + 1] == 'you':\n            lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'do':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] =='should':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] =='might':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] =='should':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'do':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'were':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'have':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'be':\n            if i + 1 < len(text):\n                if text[i + 1] == 'you':\n                    lst.append([i, i + 1])\n        elif text[i] == 'will':\n            if i + 1 < len(text):\n                i"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initializing the variables\n    first_adverb = None\n    position = None\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_cube(l):\n        '''\n        Calculates the surface area of a cube of given dimensions.\n        '''\n        return l*l*6\n    print(surfacearea_cube(int(input())))\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l*l)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6*l*math.pow(l,2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6 * math.pow(l, 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import pi\n    return l*l*pi\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.\\n\")"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 4*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l**2*6\n    return s\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    s = 4*3.14*(r**2)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=6*(l**2)\n    return s\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for n in nums:\n        if n > 0:\n            pos += 1\n        elif n < 0:\n            neg += 1\n    ratio = pos / (pos + neg)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    result = 0\n    for i in range(n):\n        if nums[i] > 0:\n            result += 1\n    return result/n\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count=0\n    for i in range(0,len(nums)):\n        if nums[i] > 0:\n            pos_count +=1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negatives = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positives = positives + 1\n        if nums[i] < 0:\n            negatives = negatives + 1\n    return negatives/positives\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    cnt = 0\n    for i in nums:\n        if i > 0:\n            cnt += 1\n    return cnt / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if (list1[i] < 0):\n            if (list1[i] > max):\n                max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -99999999999999999999999999999999999999999999999999999999999999999\n    for num in list1:\n        if num < 0:\n            if num > max_num:\n                max_num = num\n                \n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max_num = list1[-1]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -999999999\n    for i in range(0,len(list1)):\n        if (list1[i]<0) and (list1[i]>max):\n            max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -9999999\n    for i in range(len(list1)):\n        if(list1[i]<0 and list1[i]>largest):\n            largest = list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i = 0\n    largest = -999999\n    for val in list1:\n        if val < 0:\n            if val > largest:\n                largest = val\n                i = val\n    if i == 0:\n        print(\"No negative numbers\")\n    return i\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    temp
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = []\n    for i in list1:\n        if i < 0:\n            neg_nums.append(i)\n    return max(neg_nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = -1\n    for i in range(len(list1)):\n        if list1[i] > 0:\n            if n < list1[i]:\n                n = list1[i]\n        else:\n            continue\n    return n\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    i = 0\n    while i < len(list1):\n        if list1[i] < 0:\n            if max < list1[i]:\n                max = list1[i]\n            i += 1\n        else:\n            i += 1\n    return max\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #result = list(map(lambda x: x[:K], test_list))\n    #return result\n    return tuple([x[:K] for x in test_list])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][0] > K:\n            del test_list[i]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([tup[:K] for tup in test_list])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            new_list.append(test_list[i][:K])\n        else:\n            new_list.append(test_list[i])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][:K])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple_list = []\n    for i in range(len(test_list)):\n        new_tuple_list.append(tuple(test_list[i][0:K]))\n    return new_tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = test_list[index][0:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    first_tuple = []\n    second_tuple = []\n    for i in range(0, len(test_tup1)):\n        first_tuple.append(test_tup1[i] * test_tup2[i])\n        \n    for j in range(0, len(test_tup1)):\n        second_tuple.append(test_tup1[j] * test_tup2[j])\n        \n    return first_tuple, second_tuple\n    \ntest_tuple1 = (4, 5)\ntest_tuple2 = (3, 2)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication = (element1*element2 for element1, element2 in zip(test_tup1, test_tup2))\n    return multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        new_tup = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n        return new_tup\n    else:\n        return -1\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x*y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x * y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(t1 * t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    result = []\n    for i in range(len(test_tup1_list)):\n        result.append(test_tup1_list[i]*test_tup2_list[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_mult = []\n    index_1 = 0\n    index_2 = 0\n    \n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            index_1 = test_tup1[i]\n            index_2 = test_tup2[j]\n            \n            if i == j:\n                index_mult.append(index_1 * index_2)\n            else:\n                index_mult.append(index_1 * index_2)\n    return index_mult\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return None\n    result_tuple = ()\n    for i in range(0, len(test_tup1)):\n        result_tuple = result_tuple + (test_tup1[i] * test_tup2[i], )\n    return result_tuple\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        if i in tup:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        count = 0\n        for y in tup:\n            if x == y:\n                count += 1\n        print(x, \":\", count)\n    \n    \ntup = (2, 1, 3, 5, 4, 2, 6, 7, 5, 5, 4, 3, 8, 9, 1, 8, 3, 5, 8, 9)\nlst = [2, 1, 3, 5, 4, 2, 6, 7, 5, 5, 4, 3, 8, 9, 1, 8, 3, 5, 8, 9]\ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # print(lst)\n    count_tup = (lst.count(i) for i in tup) \n    # print(count_tup)\n    return next(count_tup) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for num in lst:\n        count_lst.append(tup.count(num))\n    return tuple(count_lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #dict = {elem: 0 for elem in lst}\n    counter = Counter(tup)\n    for k,v in counter.items():\n        #print(k,v)\n        for i in range(v):\n            lst.append(k)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup:\n        if i in lst:\n            lst[i] += 1\n        else:\n            lst[i] = 1\n    return lst \ntup = (1, 2, 3, 4) \nlst = {} \ncount_Occurrence(tup, lst) \nprint(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for key, value in counter.items():\n        if(value!= lst.count(key)):\n            return False\n    return True\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(tup)):\n        if(tup[i] in lst):\n            lst[tup[i]] = lst[tup[i]] + 1\n        else:\n            lst[tup[i]] = 1\n    return lst\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        nums[nums.index(i)] = i**3\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes_list = []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**3)\n    return new_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n = int(n / 10)\n    return result\n    \n    \ndef cal_sum_mem(n, sum_memory):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n = int(n / 10)\n    sum_memory[n] = result\n    return result\n    \n    \ndef cal_sum_rec(n, sum_memory):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    \n    return n % 10 + cal_sum_rec(n // 10, sum_memory)\n    \n    \ndef cal_sum_stack(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    stack = list()\n    while n:\n        stack.append(n % 10)\n        n = int(n / 10)\n    \n    sum_memory = {i:0 for i in range(len(stack))}\n    \n    return cal_sum_rec(len(stack), sum_memory)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    count = 0\n    while (n > 0):\n        if (n % 2 == 0):\n            count += n\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = []\n    for i in range(1,n+1):\n        b = i ** 2\n        a.append(b)\n    return sum(a)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 0.25*(n*(n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n**3 + n**2 + n + 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 0\n    return 1 + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    while (perrin < n+1):\n        perrin += 1\n        print(perrin)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    def sum(n):\n        if n == 1:\n            return 1\n        return n + sum(n-1)\n    return sum(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    for i in range(n):\n        yield(i+1)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = len(str)\n    if l>a:\n        l = a\n    return ''.join(str[0:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for s in str:\n        if len(s) > l:\n            output.append(s[:l])\n        else:\n            output.append(s)\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) == 0:\n        return []\n    if len(l) < l:\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(l):\n        res = re.search('.', str[i])\n        if(res == None):\n            str[i] = str[i][1:]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[0:l] for s in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is None or len(l) == 0:\n        return \"No String\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for item in l:\n        if len(item) >= l:\n            str_list.append(item[0:l])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    final = []\n    \n    for i in range(0, len(str), l):\n        final.append(str[i:i + l])\n    \n    return final\n    \n    \ndef main():\n    str1 = 'Hello, world!'\n    l = 4\n    print(extract_string(str1, l))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    while count < l:\n        s = str.pop()\n        print(s)\n        count += 1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    for i in range(len(text1)):\n        if (text1[i]==''or text1[i]=='\\n'):\n            text1=text1.replace(text1[i],'')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = \"\"\n    for char in text1:\n        if char!='':\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #replacing space with empty string\n    text1 = text1.replace(' ','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.replace(\" \",\"\")\n    return text1\ndef words_to_lower(text1):\n    '''\n    Write a function to convert all uppercase letters in the given string to lowercase.\n    '''\n    text1 = str(text1)\n    text1 = text1.lower()\n    return text1\ndef capitalize_first_letter(text1):\n    '''\n    Write a function to capitalize the first letter in the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1[0].capitalize()+text1[1:]\n    return text1\ndef capitalize_first_word(text1):\n    '''\n    Write a function to capitalize the first word in the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.split(' ')[0].capitalize()+' '+text1.split(' ')[1:]\n    return text1\ndef delete_newlines(text1):\n    '''\n    Write a function to delete all newline characters from the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.replace('\\n','')\n    return text1\ndef remove_spaces_between_words(text1):\n    '''\n    Write a function to delete all spaces between two adjacent words in the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(' +','', text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub('[^\\w\\s]', '', text1)\n    return text1\ndef remove_stopwords(text1, stop_words):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    text1 = str(text1)\n    text1 =''.join([x for x in text1.split() if x not in stop_words])\n    return text1\ndef separate_words_from_punctuation(text1):\n    '''\n    Write a function to separate all words from punctuation signs from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.findall(r\"[\\w']+|[.,!?;]\", text1)\n    return text1\ndef remove_duplicates(text1):\n    '''\n    Write a function to remove duplicate characters from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(r'(.)\\1+', r'\\1', text1)\n    return text1\ndef remove_spaces_between_sentences(text1):\n    '''\n    Write a function to remove spaces between sentences in the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.replace(\".\",\". \")\n    return text1\ndef extract_alphanumeric_substrings(text1):\n    '''\n    Write a function to extract all alphanumeric substrings of the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.findall(r'[a-zA-Z0-9]+', text1)\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(r'\\d+', '', text1)\n    return text1\ndef length_of_longest_word(text1):\n    '''\n    Write a function to find the length of the longest word in the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.findall(r'[a-z]+',text1)\n    return max([len(x) for x in text1])\ndef remove_stopwords_and_their_alternatives(text1, stop_words):\n    '''\n    Write a function to remove stop words and their alternatives from the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.split(' ')\n    text1 =''.join([x for x in text1 if x not in stop_words])\n    return text1\ndef filter_alphabets(text1):\n    '''\n    Write a function to remove alphabets from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n    return text1\ndef merge_strings(text1, text2):\n    '''\n    Write a function to merge two given strings.\n    '''\n    text1 = str(text1)\n    text2 = str(text2)\n    text1 =''.join([text1, text2])\n    return text1\ndef remove_letter_case(text1):\n    '''\n    Write a function to convert all uppercase letters in the given string to lowercase.\n    '''\n    text1 = str(text1)\n    text1 = text1.lower()\n    return text1\ndef length_of_longest_word_in_sentences(text1):\n    '''\n    Write a function to find the length of the longest word in the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.findall(r'[a-z]+',text1)\n    return max([len(x) for x in text1])\ndef remove_urls(text1):\n    '''\n    Write a function to remove all urls from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(r'http\\S+', '', text1)\n    return text1\ndef detect_pattern(text1, pattern, flags=0):\n    '''\n    Write a function to find all occurrences of the pattern in the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.findall(pattern,text1,flags=flags)\n    return text1\ndef sort_strings(text1):\n    '''\n    Write a function to sort the string in alphabetical order.\n    '''\n    text1 = str(text1)\n    text1 =''.join(sorted(text1.split(), key=str.casefold))\n    return text1\ndef remove_spaces(text1):\n    '''\n    Write a function to remove all spaces in the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.replace(' ','')\n    return text1\ndef create_substrings(text1):\n    '''\n    Write a function to create all possible substrings of the given string.\n    '''\n    text1 = str(text1)\n    text1 = text1.split(' ')\n    substrings = []\n    for i in range(len(text1)):\n        for j in range(len(text1)):\n            substrings.append(' '.join(text1[i:j+1]))\n    return substrings\ndef remove_punctuations(text1, punctuations):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1 = str(text1)\n    text1 = ''.join([x for x in text1 if x not in punctuations])\n    return text1\ndef is_palindrome(text1):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    text1 = str(text1)\n    text1 = text1.lower()\n    return text1 == text1[::-1]\ndef is_palindrome2(text1):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    text1 = str(text1)\n    text1 = text1.lower()\n    return text1 == text1[::-1]\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s\", \"\", text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text = \"this is a string with some words  and   some numbers 9 8 5 6 4 3 2 1\"\n    # text2 = \"    this is a string with some words    and some numbers 9 8 5 6 4 3 2 1\"\n    # text3 = \"this is a string with some words and some numbers 9 8 5 6 4 3 2 1\"\n    text = text1\n    text = text.replace(\" \", \"\")\n    text = text.replace(\"\\n\", \"\")\n    text = text.replace(\"\\r\", \"\")\n    text = text.replace(\"\\t\", \"\")\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #split_string = text1.split()\n    #for i in range(len(split_string)):\n        #split_string[i] = split_string[i].strip()\n    #text1 = \" \".join(split_string)\n    #print(text1)\n    return text1\ndef count_digits(text1):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    digits_counter = 0\n    for i in text1:\n        if i.isdigit():\n            digits_counter = digits_counter + 1\n    return digits_counter\ndef count_letters(text1):\n    '''\n    Write a function to count the number of letters in the given string.\n    '''\n    letters_counter = 0\n    for i in text1:\n        if not i.isdigit():\n            letters_counter = letters_counter + 1\n    return letters_counter\ndef count_lower_case(text1):\n    '''\n    Write a function to count the number of lower case characters in the given string.\n    '''\n    lower_case_counter = 0\n    for i in text1:\n        if i.islower():\n            lower_case_counter = lower_case_counter + 1\n    return lower_case_counter\ndef count_upper_case(text1):\n    '''\n    Write a function to count the number of upper case characters in the given string.\n    '''\n    upper_case_counter = 0\n    for i in text1:\n        if i.isupper():\n            upper_case_counter = upper_case_counter + 1\n    return upper_case_counter\ndef count_space(text1):\n    '''\n    Write a function to count the number of spaces in the given string.\n    '''\n    space_counter = 0\n    for i in text1:\n        if i == \" \":\n            space_counter = space_counter + 1\n    return space_counter\ndef count_punctuations(text1):\n    '''\n    Write a function to count the number of punctuations in the given string.\n    '''\n    punctuations_counter = 0\n    for i in text1:\n        if i in \"!@#$%^&*()_+-=[]{}\\|;:,./<>?\":\n            punctuations_counter = punctuations_counter + 1\n    return punctuations_counter\ndef count_special_characters(text1):\n    '''\n    Write a function to count the number of special characters in the given string.\n    '''\n    special_character_counter = 0\n    for i in text1:\n        if i in \"!@#$%^&*()_+-=[]{}\\|;:,./<>?\":\n            special_character_counter = special_character_counter + 1\n    return special_character_counter\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    word_counter = 0\n    for i in text1.split():\n        word_counter = word_counter + 1\n    return word_counter\ndef count_unique_words(text1):\n    '''\n    Write a function to count the number of unique words in the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.split()\n    word_set = set(text1)\n    count = 0\n    for i in word_set:\n        if text1.count(i) == 1:\n            count = count + 1\n    return count\ndef count_capitalized_words(text1):\n    '''\n    Write a function to count the number of capitalized words in the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.split()\n    capitalized_counter = 0\n    for i in text1:\n        if i.isupper():\n            capitalized_counter = capitalized_counter + 1\n    return capitalized_counter\ndef count_emojis(text1):\n    '''\n    Write a function to count the number of emojis in the given string.\n    '''\n    emoji_counter = 0\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in emoji_pattern.findall(text1):\n        emoji_counter = emoji_counter + 1\n    return emoji_counter\ndef count_numbers(text1):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    digits_counter = 0\n    for i in text1:\n        if i.isdigit():\n            digits_counter = digits_counter + 1\n    return digits_counter\ndef count_urls(text1):\n    '''\n    Write a function to count the number of urls in the given string.\n    '''\n    url_counter = 0\n    for i in text1.split():\n        if i[:5] == \"https\":\n            url_counter = url_counter + 1\n    return url_counter\ndef count_emails(text1):\n    '''\n    Write a function to count the number of emails in the given string.\n    '''\n    email_counter = 0\n    for i in text1.split():\n        if i[:5] == \"mailto\":\n            email_counter = email_counter + 1\n    return email_counter\ndef count_phone_numbers(text1):\n    '''\n    Write a function to count the number of phone numbers in the given string.\n    '''\n    phone_numbers_counter = 0\n    for i in text1.split():\n        if i[:5] == \"tel\":\n            phone_numbers_counter = phone_numbers_counter + 1\n    return phone_numbers_counter\ndef count_words_of_length(text1, word_length):\n    '''\n    Write a function to count the number of words of the given length in the given string.\n    '''\n    words_counter = 0\n    for i in text1.split():\n        if len(i) == word_length:\n            words_counter = words_counter + 1\n    return words_counter\ndef count_words_of_length_upper(text1, word_length):\n    '''\n    Write a function to count the number of words of the given length in the given string, whose first letter is an uppercase letter.\n    '''\n    words_counter = 0\n    for i in text1.split():\n        if len(i) == word_length and i[0].isupper():\n            words_counter = words_counter + 1\n    return words_counter\ndef count_words_of_length_lower(text1, word_length):\n    '''\n    Write a function to count the number of words of the given length in the given string, whose first letter is lowercase.\n    '''\n    words_counter = 0\n    for i in text1.split():\n        if len(i) == word_length and i[0].islower():\n            words_counter = words_counter + 1\n    return words_counter\ndef count_words_of_length_vowels(text1, word_length):\n    '''\n    Write a function to count the number of words of the given length in the given string, whose first letter is a vowel.\n    '''\n    words_counter = 0\n    for i in text1.split():\n        if len(i) == word_length and i[0].lower() in 'aeiou':\n            words_counter = words_counter + 1\n    return words_counter\ndef count_words_of_length_consonant(text1, word_length):\n    '''\n    Write a function to count the number of words of the given length in the given string, whose first letter is a consonant.\n    '''\n    words_counter = 0\n    for i in tex"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result=text1.strip()\n    print(result)\nremove_whitespaces(\"\")"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount <= 0:\n        return 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost-sale_amount) if (actual_cost-sale_amount) > 0 else 0 \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=sale_amount-actual_cost\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    return sale_amount - actual_cost\n    # code here\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = 0\n    if actual_cost == 0:\n        loss_amount = 0\n    elif actual_cost >= sale_amount:\n        loss_amount = sale_amount - actual_cost\n    elif actual_cost < 0:\n        loss_amount = 0\n    return loss_amount\nprint(loss_amount(100,150))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if actual_cost<sale_amount:\n        loss_amount=sale_amount-actual_cost\n        return loss_amount\n    else:\n        return loss_amount\nprint(loss_amount(100,100))\nprint(loss_amount(50,100))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # actual_cost = float(input('enter the actual cost: '))\n    # sale_amount = float(input('enter the sale amount: '))\n    loss_amount = actual_cost - sale_amount \n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 0\n    s = 0\n    while(n!= 0) : \n        i = i + 1\n        if (n % 2) == 0 : \n            s = s + n\n        n = n // 2\n    return (s)\n    '''\n     Write a python function to find the sum of even factors of a number.\n    '''\n    # sum of factors of 2\n    # sum of factors of 3\n    # sum of factors of 5\n    # sum of factors of 7\n    # sum of factors of 11\n    # sum of factors of 13\n    # sum of factors of 17\n    # sum of factors of 19\n    # sum of factors of 23\n    # sum of factors of 29\n    # sum of factors of 31\n    # sum of factors of 37\n    # sum of factors of 41\n    # sum of factors of 43\n    # sum of factors of 47\n    # sum of factors of 53\n    # sum of factors of 59\n    # sum of factors of 61\n    # sum of factors of 67\n    # sum of factors of 71\n    # sum of factors of 73\n    # sum of factors of 79\n    # sum of factors of 83\n    # sum of factors of 89\n    # sum of factors of 97\n    # sum of factors of 101\n    # sum of factors of 103\n    # sum of factors of 107\n    # sum of factors of 109\n    # sum of factors of 113\n    # sum of factors of 127\n    # sum of factors of 131\n    # sum of factors of 137\n    # sum of factors of 139\n    # sum of factors of 149\n    # sum of factors of 151\n    # sum of factors of 157\n    # sum of factors of 163\n    # sum of factors of 167\n    # sum of factors of 173\n    # sum of factors of 179\n    # sum of factors of 181\n    # sum of factors of 191\n    # sum of factors of 193\n    # sum of factors of 197\n    # sum of factors of 199\n    # sum of factors of 211\n    # sum of factors of 223\n    # sum of factors of 227\n    # sum of factors of 229\n    # sum of factors of 233\n    # sum of factors of 239\n    # sum of factors of 241\n    # sum of factors of 247\n    # sum of factors of 257\n    # sum of factors of 263\n    # sum of factors of 269\n    # sum of factors of 271\n    # sum of factors of 277\n    # sum of factors of 281\n    # sum of factors of 283\n    # sum of factors of 293\n    # sum of factors of 307\n    # sum of factors of 311\n    # sum of factors of 313\n    # sum of factors of 317\n    # sum of factors of 331\n    # sum of factors of 337\n    # sum of factors of 347\n    # sum of factors of 349\n    # sum of factors of 353\n    # sum of factors of 359\n    # sum of factors of 367\n    # sum of factors of 373\n    # sum of factors of 379\n    # sum of factors of 383\n    # sum of factors of 389\n    # sum of factors of 397\n    # sum of factors of 401\n    # sum of factors of 409\n    # sum of factors of 419\n    # sum of factors of 421\n    # sum of factors of 431\n    # sum of factors of 433\n    # sum of factors of 439\n    # sum of factors of 443\n    # sum of factors of 449\n    # sum of factors of 457\n    # sum of factors of 461\n    # sum of factors of 463\n    # sum of factors of 467\n    # sum of factors of 479\n    # sum of factors of 487\n    # sum of factors of 491\n    # sum of factors of 493\n    # sum of factors of 503\n    # sum of factors of 509\n    # sum of factors of 521\n    # sum of factors of 533\n    # sum of factors of 541\n    # sum of factors of 547\n    # sum of factors of 553\n    # sum of factors of 557\n    # sum of factors of 563\n    # sum of factors of 569\n    # sum of factors of 571\n    # sum of factors of 577\n    # sum of factors of 583\n    # sum of factors of 587\n    # sum of factors of 593\n    # sum of factors of 597\n    # sum of factors of 607\n    # sum of factors of 613\n    # sum of factors of 617\n    # sum of factors of 619\n    # sum of factors of 631\n    # sum of factors of 643\n    # sum of factors of 647\n    # sum of factors of 653\n    # sum of factors of 659\n    # sum of factors of 661\n    # sum of factors of 673\n    # sum of factors of 677\n    # sum of factors of 683\n    # sum of factors of 691\n    # sum of factors of 697\n    # sum of factors of 701\n    # sum of factors of 709\n    # sum of factors of 719\n    # sum of factors of 727\n    # sum of factors of 733\n    # sum of factors of 737\n    # sum of factors of 739\n    # sum of factors of 743\n    # sum of factors of 751\n    # sum of factors of 757\n    # sum of factors of 761\n    # sum of factors of 763\n    # sum of factors of 769\n    # sum of factors of 771\n    # sum of factors of 773\n    # sum of factors of 779\n    # sum of factors of 783\n    # sum of factors of 787\n    # sum of factors of 793\n    # sum of factors of 799\n    # sum of factors of 811\n    # sum of factors of 823\n    # sum of factors of 827\n    # sum of factors of 829\n    # sum of factors of 839\n    # sum of factors of 841\n    # sum of factors of 843\n    # sum of factors of 853\n    # sum of factors of 857\n    # sum of factors of 863\n    # sum of factors of 877\n    # sum of factors of 881\n    # sum of factors of 887\n    # sum of factors of 893\n    # sum of factors of 899\n    # sum of factors of 907\n    # sum of factors of 911\n    # sum of factors of 919\n    # sum of factors of 929\n    # sum of factors of 937\n    # sum of factors of 941\n    # sum of factors of 947\n    # sum of factors of 953\n    # sum of factors of 967\n    # sum of factors of 971\n    # sum of factors of 977\n    # sum of factors of 983\n    # sum of factors of 991\n    # sum of factors of 997\n    # sum of factors of 1009\n    # sum of factors of 1011\n    # sum of factors of 1013\n    # sum of factors of 1019\n    # sum of factors of 1021\n    # sum of factors of 1027\n    # sum of factors of 1029\n    # sum of factors of 1031\n    # sum of factors of 1037\n    # sum of factors of 1039\n    # sum of factors of 1043\n    # sum of factors of 1047\n    # sum of factors of 1051\n    # sum of factors of 1057\n    # sum of factors of 1063\n    # sum of factors of 1069\n    # sum of factors of 1073\n    # sum of factors of 1079\n    # sum of factors of 1081\n    # sum of factors of 1093\n    # sum of factors of 1097\n    # sum of factors of 1103\n    # sum of factors of 1109\n    # sum of factors of 1117\n    # sum of factors of 1123\n    # sum of factors of 1129\n    # sum of factors of 1131\n    # sum of factors of 1133\n    # sum of factors of 1141\n    # sum of factors of 1147\n    # sum of factors of 1153\n    # sum of factors of 1159\n    # sum of factors of 1163\n    # sum of factors of 1171\n    # sum of factors of 1181\n    # sum of factors of 1187\n    # sum of factors of 1193\n    # sum of factors of 1201\n    # sum of factors of 1213\n    # sum of factors of 1219\n    # sum of factors of 1223\n    # sum of factors of 1229\n    # sum of factors of 1233\n    # sum of factors of 1237\n    # sum of factors of 1249\n    # sum of factors of 1253\n    # sum of factors of 1259\n    # sum of factors of 1267\n    # sum of factor"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(n / i for i in range(1,int(n)) if n % i == 0) \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def getFactors(n) : \n        if (n == 1): \n            return n \n        else : \n            return n * getFactors(n - 1) \n    \n    sum = 0\n    for i in range(1,n+1) : \n        if(n % i == 0): \n            sum = sum + i \n    print(\"The sum of the even factors is : \", sum)\nn = int(input(\"Enter the number whose factors you want to find : \"))\nsumofFactors(n)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n    return sum\nprint(sumofFactors(144))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    i = 1\n    while i <= n :\n        if n % i == 0 :\n            count = count + i \n        i = i + 1\n    return count\nprint(sumofFactors(25))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumOfFactors = 0\n    if n % 2 == 0:\n        sumOfFactors = n + sumOfFactors\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0 : \n                sumOfFactors = sumOfFactors + i + int(n/i) \n                break\n    return sumOfFactors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2 + 1) : \n        if (n % i == 0) : \n            sum += i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n//2+1) :\n        if n % i == 0 :\n            sum += i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(2,n) :\n        if(n%i==0) :\n            sum+=i\n    print(sum)\n    return sum\nn=int(input(\"Enter the number : \"))\nprint(sumofFactors(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            if(i%2==0):\n                sum+=i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile('z')\n    matches = re.finditer(reg, text)\n    for match in matches:\n        print(match)\n    #    return True\n    # return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.search('z', text)\n    if result:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\bz\\b')\n    result = re.search(pattern, text)\n    return result is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    s = re.findall('z',text)\n    return s\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # pass\n    pattern = re.compile(r'\\bz\\b')\n    \n    if pattern.search(text):\n        return True\n    else:\n        return False\n        \nprint(text_match_wordz('Hello world!')) # False\nprint(text_match_wordz('Hello worldz')) # True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z$', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.search(r'\\bz\\b', text)\n    return bool(wordz)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.findall(r\"\\w+z\", text)\n    return word\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Check if the word contains 'z'\n    match = re.search('z',text)\n    #Return if it matches\n    return(match)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print(monthnum2)\n    if monthnum2 == 2:\n        print(\"February\")\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"April, June, September, November\")\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%2 == 0:\n        if monthnum2 <=2:\n            return True\n        elif monthnum2%4 ==0:\n            return True\n        elif monthnum2%4!=0:\n            return True\n    elif monthnum2%2!=0:\n        if monthnum2 <= 7:\n            return True\n        elif monthnum2%4 ==0:\n            return True\n        elif monthnum2%4!=0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 in range(3,10):\n        return 30\n    elif monthnum2 in range(10,13):\n        return 31\n    elif monthnum2 in range(13,17):\n        return 30\n    elif monthnum2 in range(17,20):\n        return 31\n    elif monthnum2 in range(20,24):\n        return 31\n    elif monthnum2 in range(24,27):\n        return 30\n    elif monthnum2 in range(27,31):\n        return 31\n    elif monthnum2 in range(31,36):\n        return 30\n    elif monthnum2 in range(36,40):\n        return 31\n    elif monthnum2 in range(40,45):\n        return 30\n    elif monthnum2 in range(45,49):\n        return 31\n    elif monthnum2 in range(49,53):\n        return 30\n    elif monthnum2 in range(53,58):\n        return 31\n    elif monthnum2 in range(58,62):\n        return 30\n    elif monthnum2 in range(62,67):\n        return 31\n    elif monthnum2 in range(67,72):\n        return 30\n    elif monthnum2 in range(72,76):\n        return 31\n    elif monthnum2 in range(76,81):\n        return 30\n    elif monthnum2 in range(81,85):\n        return 31\n    elif monthnum2 in range(85,89):\n        return 30\n    elif monthnum2 in range(89,93):\n        return 31\n    elif monthnum2 in range(93,97):\n        return 30\n    elif monthnum2 in range(97,102):\n        return 31\n    elif monthnum2 in range(102,106):\n        return 30\n    elif monthnum2 in range(106,110):\n        return 31\n    elif monthnum2 in range(110,114):\n        return 30\n    elif monthnum2 in range(114,119):\n        return 31\n    elif monthnum2 in range(119,133):\n        return 30\n    elif monthnum2 in range(133,137):\n        return 31\n    elif monthnum2 in range(137,141):\n        return 30\n    elif monthnum2 in range(141,145):\n        return 31\n    elif monthnum2 in range(145,149):\n        return 30\n    elif monthnum2 in range(149,153):\n        return 31\n    elif monthnum2 in range(153,157):\n        return 30\n    elif monthnum2 in range(157,161):\n        return 31\n    elif monthnum2 in range(161,165):\n        return 30\n    elif monthnum2 in range(165,169):\n        return 31\n    elif monthnum2 in range(169,172):\n        return 30\n    elif monthnum2 in range(172,176):\n        return 31\n    elif monthnum2 in range(176,181):\n        return 30\n    elif monthnum2 in range(181,185):\n        return 31\n    elif monthnum2 in range(185,189):\n        return 30\n    elif monthnum2 in range(189,193):\n        return 31\n    elif monthnum2 in range(193,197):\n        return 30\n    elif monthnum2 in range(197,202):\n        return 31\n    elif monthnum2 in range(202,206):\n        return 30\n    elif monthnum2 in range(206,210):\n        return 31\n    elif monthnum2 in range(210,213):\n        return 30\n    elif monthnum2 in range(213,217):\n        return 31\n    elif monthnum2 in range(217,221):\n        return 30\n    elif monthnum2 in range(221,225):\n        return 31\n    elif monthnum2 in range(225,229):\n        return 30\n    elif monthnum2 in range(229,232):\n        return 31\n    elif monthnum2 in range(232,236):\n        return 30\n    elif monthnum2 in range(236,240):\n        return 31\n    elif monthnum2 in range(240,242):\n        return 30\n    elif monthnum2 in range(242,245):\n        return 31\n    elif monthnum2 in range(245,249):\n        return 30\n    elif monthnum2 in range(249,253):\n        return 31\n    elif monthnum2 in range(253,257):\n        return 30\n    elif monthnum2 in range(257,261):\n        return 31\n    elif monthnum2 in range(261,265):\n        return 30\n    elif monthnum2 in range(265,269):\n        return 31\n    elif monthnum2 in range(269,273):\n        return 30\n    elif monthnum2 in range(273,277):\n        return 31\n    elif monthnum2 in range(277,281):\n        return 30\n    elif monthnum2 in range(281,285):\n        return 31\n    elif monthnum2 in range(285,289):\n        return 30\n    elif monthnum2 in range(289,293):\n        return 31\n    elif monthnum2 in range(293,297):\n        return 30\n    elif monthnum2 in range(297,300):\n        return 31\n    elif monthnum2 in range(300,304):\n        return 30\n    elif monthnum2 in range(304,308):\n        return 31\n    elif monthnum2 in range(308,312):\n        return 30\n    elif monthnum2 in range(312,316):\n        return 31\n    elif monthnum2 in range(316,320):\n        return 30\n    elif monthnum2 in range(320,323):\n        return 31\n    elif monthnum2 in range(323,326):\n        return 30\n    elif monthnum2 in range(326,330):\n        return 31\n    elif monthnum2 in range(330,333):\n        return 30\n    elif monthnum2 in range(333,337):\n        return 31\n    elif monthnum2 in range(337,341):\n        return 30\n    elif monthnum2 in range(341,345):\n        return 31\n    elif monthnum2 in range(345,349):\n        return 30\n    elif monthnum2 in range(349,353):\n        return 31\n    elif monthnum2 in range(353,357):\n        return 30\n    elif monthnum2 in range(357,361):\n        return 31\n    elif monthnum2 in range(361,365):\n        return 30\n    elif monthnum2 in range(365,367):\n        return 31\n    elif monthnum2 in range(367,370):\n        return 30\n    elif monthnum2 in range(370,374):\n        return 31\n    elif monthnum2 in range(374,378):\n        return 30\n    elif monthnum2 in range(378,382):\n        return 31\n    elif monthnum2 in range(382,386):\n        return 30\n    elif monthnum2 in range(386,390):\n        return 31\n    elif monthnum2 in range(390,394):\n        return 30\n    elif monthnum2 in range(394,398):\n        return 31\n    elif monthnum2 in range(398,402):\n        return 30\n    elif monthnum2 in range(402,406):\n        return 31\n    elif monthnum2 in range(406,410):\n        return 30\n    elif monthnum2 in range(410,413):\n        return 31\n    elif monthnum2 in range(413,416):\n        return 30\n    elif monthnum2 in range(416,420):\n        return 31\n    elif monthnum2 in range(420,423):\n        return 30\n    elif monthnum2 in range(423,427):\n        return 31\n    elif monthnum2 in range(427,430):\n        return 30\n    elif monthnum2 in range(430,433):\n        return 31\n    elif monthnum2 in range(433,436):\n        return 30\n    elif monthnum2 in range(436,439):\n        return 31\n    elif monthnum2 in range(439,442):\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 2:\n        return 29\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    for i in range(1, 13):\n        if monthnum2 == i:\n            return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 0 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 1:\n            monthnum3 = 31\n        elif monthnum2 == 2:\n            monthnum3 = 28\n        elif monthnum2 == 3:\n            monthnum3 = 31\n        elif monthnum2 == 4:\n            monthnum3 = 30\n        elif monthnum2 == 5:\n            monthnum3 = 31\n        elif monthnum2 == 6:\n            monthnum3 = 30\n        elif monthnum2 == 7:\n            monthnum3 = 31\n        elif monthnum2 == 8:\n            monthnum3 = 31\n        elif monthnum2 == 9:\n            monthnum3 = 30\n        elif monthnum2 == 10:\n            monthnum3 = 31\n        elif monthnum2 == 11:\n            monthnum3 = 30\n        elif monthnum2 == 12:\n            monthnum3 = 31\n        else:\n            monthnum3 = -1\n    else:\n        monthnum3 = -1\n    return monthnum3\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed = []\n    for i in stringlist:\n        reversed.append(i[::-1])\n    return reversed\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # First I want to reverse the order of the items in the list\n    # I can use the slice trick to do this\n    stringlist.reverse()\n    # Then I want to reverse the order of the strings in the list\n    # I can use the length of the list\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in stringlist:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    length = len(stringlist)\n    # print(stringlist)\n    for i in range(length):\n        # print(i)\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return reversed(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    \n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Base case\n    if(len(lst)==1):\n        return lst\n    \n    # Recursive call\n    else:\n        return Find_Min(lst[:int(len(lst)/2)]) + Find_Min(lst[int(len(lst)/2):])\n        \nif __name__ == \"__main__\":\n    \n    # Initializing lists\n    lst = []\n    \n    # Taking elements as input\n    for i in range(int(input(\"Enter the number of elements :\"))):\n        lst.append(int(input()))\n    \n    # Print the minimum length sublist\n    print(\"Minimum length sublist is \",Find_Min(lst))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    min_sub_list = lst[0]\n    for i in range(1, length):\n        if len(lst[i]) < len(min_sub_list):\n            min_sub_list = lst[i]\n    return min_sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 0\n    min_sub_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub_list = lst[i]\n        else:\n            continue\n    return min_sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        if i == 0:\n            mini = lst[i]\n        elif len(lst[i]) < len(mini):\n            mini = lst[i]\n    return mini\nprint(Find_Min([[1], [], [2], [4,6], [1,3]]))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        print(\"The list is empty\")\n    min = lst[0] \n    for i in range(1, len(lst)): \n        if len(lst[i]) < len(min): \n            min = lst[i] \n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 99999\n    mini_len = []\n    for i in lst:\n        if min_len > len(i):\n            min_len = len(i)\n    for i in range(min_len):\n        for j in range(len(lst)):\n            if min_len == len(lst[j]) and min_len!= 99999:\n                mini_len.append(lst[j])\n    return mini_len\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length=lst[0]\n    min_len_index=0\n    for i in range(len(lst)):\n        if min_length>len(lst[i]):\n            min_length=len(lst[i])\n            min_len_index=i\n    return min_len_index,min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_length_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) <= min_length:\n            min_length = len(lst[i])\n            min_length_sublist = lst[i]\n    return min_length_sublist\n        \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    len_lst = len(lst)\n    if len_lst == 1:\n        return lst\n    elif len_lst == 2:\n        if lst[0] <= lst[1]:\n            return lst\n        else:\n            return lst[1], lst[0]\n    else:\n        len_min = 1\n        min_lst = lst[0]\n        for i in range(1,len_lst):\n            if lst[i] <= min_lst:\n                min_lst = lst[i]\n                len_min = 1\n            elif lst[i] == min_lst:\n                len_min += 1\n        if len_min <= 2:\n            return min_lst\n        else:\n            return Find_Min(lst[1:])\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\nprint('Rectangle area is',rectangle_area(2,2))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"Area of Rectangle: %.2f\" %area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    result = pattern.sub('',str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == None:\n        return\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \"A\" or str1[i] == \"a\" or str1[i] == \"B\" or str1[i] == \"b\" or str1[i] == \"C\" or str1[i] == \"c\" or str1[i] == \"D\" or str1[i] == \"d\" or str1[i] == \"E\" or str1[i] == \"e\" or str1[i] == \"F\" or str1[i] == \"f\" or str1[i] == \"G\" or str1[i] == \"g\" or str1[i] == \"H\" or str1[i] == \"h\" or str1[i] == \"I\" or str1[i] == \"i\" or str1[i] == \"J\" or str1[i] == \"j\" or str1[i] == \"K\" or str1[i] == \"k\" or str1[i] == \"L\" or str1[i] == \"l\" or str1[i] == \"M\" or str1[i] == \"m\" or str1[i] == \"N\" or str1[i] == \"n\" or str1[i] == \"O\" or str1[i] == \"o\" or str1[i] == \"P\" or str1[i] == \"p\" or str1[i] == \"Q\" or str1[i] == \"q\" or str1[i] == \"R\" or str1[i] == \"r\" or str1[i] == \"S\" or str1[i] == \"s\" or str1[i] == \"T\" or str1[i] == \"t\" or str1[i] == \"U\" or str1[i] == \"u\" or str1[i] == \"V\" or str1[i] == \"v\" or str1[i] == \"W\" or str1[i] == \"w\" or str1[i] == \"X\" or str1[i] == \"x\" or str1[i] == \"Y\" or str1[i] == \"y\" or str1[i] == \"Z\" or str1[i] == \"z\":\n            continue\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \nif __name__ == '__main__':\n    print(\"Testing remove_uppercase()...\", end=\"\")\n    assert remove_uppercase(\"\") == \"\"\n    assert remove_uppercase(\"I\") == \"i\"\n    assert remove_uppercase(\"HI\") == \"hi\"\n    assert remove_uppercase(\"Hello\") == \"hello\"\n    assert remove_uppercase(\"HELLO\") == \"hello\"\n    assert remove_uppercase(\"HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO\") == \"hello\"\n    assert remove_uppercase(\"HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO\") == \"hello\"\n    print(\"Done!\")\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #str1 = input()\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return(map(lambda x:x[0],lst))\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x : x[0], lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Remove the first element\n    lst.remove(lst[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for l in range(len(lst)):\n        if type(lst[l]) == type([]):\n            res.append(Extract(lst[l]))\n        else:\n            res.append(lst[l])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = []\n    for l in lst:\n        if isinstance(l,list):\n            ans.append(Extract(l))\n        else:\n            ans.append(l)\n    return ans\ndef _x(x):\n    if isinstance(x,list):\n        return x[0]\n    else:\n        return x\ndef _l(lst):\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return _l(lst[1:])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for lst in lst:\n        first.append(lst[0])\n    return first\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for i in range(0, len(lst)): \n        first.append(lst[i][0]) \n    return first\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    print('The count of upper case letters in the given string is : ',ctr)\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt=0\n    for i in str:\n        if i.isupper():\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    lower_count = 0\n    upper_count = 0\n    \n    for i in str:\n        if i.isupper():\n            upper_count += 1\n        elif i.islower():\n            lower_count += 1\n        \n    print(f\"Upper case characters : {upper_count}\")\n    print(f\"Lower case characters : {lower_count}\")\n    \nstr1 = input()\nupper_ctr(str1"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for ch in str:\n        if ch.isupper():\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.count(''.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if ord(str[i]) >= 65 and ord(str[i]) <= 90:\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n        \n    \ndef upper_ctr_from_list(l):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in l:\n        if i.isupper():\n            count+=1\n    print(count)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    size = len(list1)\n    combs = []\n    combs.append([])\n    for i in range(size):\n        if(len(combs) == 0):\n            combs.append([list1[i]])\n        else:\n            for j in range(len(combs)):\n                c = list1[i] + combs[j]\n                if(len(c) == size):\n                    combs.append(c)\n    for i in range(len(combs)):\n        res.append(combs[i])\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    \n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            combinations.append([list1[i],list1[j]])\n    return combinations\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    result = []\n    for i in range(len(list1)):\n        remaining_list = list1[:i] + list1[i+1:]\n        rest = combinations_list(remaining_list)\n        for j in range(len(rest)):\n            new_list = list1[i] + rest[j]\n            result.append(new_list)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return [[]]\n    for i in range(len(list1)):\n        first = list1[:i] + list1[i+1:]\n        for permutation in combinations_list(first):\n            yield list1[i:i+1] + permutation\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    a = []\n    c = []\n    d = []\n    b = []\n    if len(list1) == 1:\n        a = [list1]\n    else:\n        for i in range(len(list1)):\n            b = list1.copy()\n            del b[i]\n            for j in range(len(b)):\n                c = list1.copy()\n                del c[i]\n                del c[j]\n                d = []\n                for k in range(len(c)):\n                    d.append(c[k])\n                del d[k]\n                c.sort()\n                d.sort()\n                if c == d and len(c) > 1:\n                    a.append(b[i])\n    print(a)\n    return a\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    new_list = list(itertools.combinations(list1, 3))\n    return new_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    result = []\n    size = len(list1)\n    \n    def helper(i, temp):\n        if i == size:\n            result.append(temp)\n            return\n        else:\n            helper(i+1, temp + [list1[i]])\n            helper(i+1, temp)\n    helper(0, [])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list1[:]\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    result = []\n    for i in range(len(list1)):\n        new_list = list1[:i]+list1[i+1:]\n        list1_copy = copy.deepcopy(list1)\n        for elem in new_list:\n            if list1_copy == list1:\n                list1_copy.remove(elem)\n        result.extend(combinations_list(list1_copy))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1,3))\n    \nprint(combinations_list([1,2,3,4,5,6]))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                list2.append([list1[i],list1[j],list1[k]])\n    return list2\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr = sorted(arr)\n    max_num = -sys.maxsize - 1\n    max_num_len = 0\n    max_num_start = 0\n    for i in range(len(arr)):\n        # print(max_num)\n        if max_num < arr[i]:\n            max_num = arr[i]\n            max_num_len = 1\n            max_num_start = i\n        elif max_num == arr[i]:\n            max_num_len += 1\n    return max_num * max_num_len\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_prod = -99999999\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            curr_prod = 1\n        else:\n            curr_prod = -1\n        for j in range(i+1, len(arr)):\n            if arr[j] > 0:\n                curr_prod = curr_prod * arr[j]\n            else:\n                curr_prod = curr_prod * (-arr[j])\n            if max_prod < curr_prod:\n                max_prod = curr_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    largest_subarray = arr[0]\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        current_subarray = arr[i]\n        # current_subarray = max(current_subarray, current_subarray*largest_subarray)\n        max_product = max(current_subarray, current_subarray*max_product)\n        largest_subarray = max(current_subarray, largest_subarray)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # start with a negative value\n    max_value = -1 * float('inf')\n    start = end = 0\n    \n    for i in range(len(arr)):\n        \n        # if this element is negative, then we don't\n        # want to include it\n        if arr[i] < 0:\n            continue\n        \n        # since we already seen negative values,\n        # we will check for the positive values\n        # after the negative\n        if arr[i] > max_value:\n            max_value = arr[i]\n            start = end = i\n            \n        # we keep on doing this for all the\n        # positive values\n        else:\n            # this is a tricky part. We are using\n            # the concept of the end of the maximum\n            # subarray. We also keep on maintaining\n            # the value of the end of the maximum subarray.\n            end += 1\n            \n            # we don't update the max_value if we\n            # come across a negative element\n            if arr[i] < 0:\n                continue\n            \n            # now we will update the max_value\n            if arr[i] > max_value:\n                max_value = arr[i]\n                start = i\n    \n    # return the maximum value, the start and\n    # the end indices\n    return max_value, start, end\n    "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    return _max_subarray_product_naive(arr)\n    \ndef _max_subarray_product_naive(arr):\n    for k in range(len(arr)):\n        for i in range(k, len(arr)):\n            for j in range(i, len(arr)):\n                if arr[k] * arr[i] * arr[j] > max_prod:\n                    max_prod = arr[k] * arr[i] * arr[j]\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_start = 0\n    max_end = 0\n    for i in range(0, len(arr)):\n        max_product = max(max_product, arr[i])\n        if arr[i] < 0:\n            max_product = max(max_product, 0)\n        if i > 0 and arr[i] * arr[i-1] > 0:\n            max_end = i\n    if max_end - max_start == 0:\n        return max_product\n    else:\n        return max_product * (max_end-max_start+1)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    min_product = 0\n    product = 1\n    for i in range(len(arr)):\n        if (i == 0):\n            min_product = product\n            max_product = product\n        else:\n            if (product < 0):\n                product = arr[i]\n            elif (product > 0):\n                product = product * arr[i]\n            if (product > max_product):\n                max_product = product\n            if (product < min_product):\n                min_product = product\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # dict_1 = {}\n    # dict_1[1] = 1\n    # dict_1[2] = 2\n    # dict_1[3] = 3\n    # dict_1[4] = 4\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    x = list(dict.values())\n    if len(set(x)) == 1:\n        return True\n    else:\n        return False\n    \n        \ndef get_sum(dict):\n    '''\n    Write a function to get sum of all values in a dictionary.\n    '''\n    total = 0\n    for val in dict.values():\n        total = total + val\n    return total\n    \n    \ndef get_common(dict1, dict2):\n    '''\n    Write a function to get common value in two dictionaries.\n    '''\n    keys = []\n    for key in dict1.keys():\n        if key in dict2.keys():\n            keys.append(key)\n    return keys\n    \n    \ndef check_all(dict1, dict2):\n    '''\n    Write a function to check if all values in dict1 are present in dict2.\n    '''\n    if dict1 == dict2:\n        return True\n    else:\n        return False\n    \n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort dictionary values in ascending order.\n    '''\n    values = dict1.values()\n    values = sorted(values)\n    dict1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n    return dict1\n    \n    \ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort dictionary values in descending order.\n    '''\n    values = dict1.values()\n    values = sorted(values, reverse = True)\n    dict1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n    return dict1\n    \n    \ndef get_key_with_max_value(dict1):\n    '''\n    Write a function to get key with maximum value in a dictionary.\n    '''\n    keys = []\n    max_value = 0\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] > max_value:\n                keys = keys + [key]\n                max_value = dict1[key]\n    return keys\n    \n    \ndef get_value_with_min_key(dict1):\n    '''\n    Write a function to get value with minimum key in a dictionary.\n    '''\n    min_key = []\n    min_value = 0\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] < min_value:\n                min_value = dict1[key]\n                min_key = min_key + [key]\n    return min_key\n    \n    \ndef common_values(dict1, dict2):\n    '''\n    Write a function to get common values in two dictionaries.\n    '''\n    common_value = []\n    for val1 in dict1.values():\n        if val1 in dict2.values():\n            common_value = common_value + [val1]\n    return common_value\n    \n    \ndef get_duplicate_values(dict1):\n    '''\n    Write a function to get duplicate values in a dictionary.\n    '''\n    keys = []\n    duplicate_value = []\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] in keys:\n                duplicate_value = duplicate_value + [key]\n            else:\n                keys = keys + [dict1[key]]\n    return duplicate_value\n    \n    \ndef remove_from_dict(dict1, val):\n    '''\n    Write a function to remove a given value from dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == val:\n            del dict1[key]\n            \ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n    \n    \ndef flip_dict(dict1):\n    '''\n    Write a function to flip keys and values in a dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        new_dict[value] = key\n    return new_dict\n    \n    \ndef remove_key_with_max_value(dict1):\n    '''\n    Write a function to remove key with maximum value in a dictionary.\n    '''\n    max_value = 0\n    key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] > max_value:\n                max_value = dict1[key]\n    del dict1[max_value]\n    return dict1\n    \n    \ndef remove_key_with_min_value(dict1):\n    '''\n    Write a function to remove key with minimum value in a dictionary.\n    '''\n    min_value = 0\n    key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] < min_value:\n                min_value = dict1[key]\n    del dict1[min_value]\n    return dict1\n    \n    \ndef remove_key_with_max_key(dict1):\n    '''\n    Write a function to remove key with maximum value in a dictionary.\n    '''\n    max_value = 0\n    max_key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] > max_value:\n                max_value = dict1[key]\n                max_key = key\n    del dict1[max_key]\n    return dict1\n    \n    \ndef remove_key_with_min_key(dict1):\n    '''\n    Write a function to remove key with minimum value in a dictionary.\n    '''\n    min_value = 0\n    min_key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] < min_value:\n                min_value = dict1[key]\n                min_key = key\n    del dict1[min_key]\n    return dict1\n    \n    \ndef rotate_dict(dict1):\n    '''\n    Write a function to rotate a dictionary clockwise.\n    '''\n    new_dict = {}\n    for key in dict1.keys():\n        new_dict[key] = dict1[key]\n    for key in dict1.keys():\n        del new_dict[key]\n    return new_dict\n    \n    \ndef get_max_val_key(dict1):\n    '''\n    Write a function to get maximum value in a dictionary and return key with it.\n    '''\n    max_value = 0\n    max_key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] > max_value:\n                max_value = dict1[key]\n                max_key = key\n    return max_key\n    \n    \ndef get_min_val_key(dict1):\n    '''\n    Write a function to get maximum value in a dictionary and return key with it.\n    '''\n    min_value = 0\n    min_key = ''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            if dict1[key] < min_value:\n                min_value = dict1[key]\n                min_key = key\n    return min_key\n    \n    \ndef get_all_keys(dict1):\n    '''\n    Write a function to get all keys in a dictionary.\n    '''\n    keys = []\n    for key in dict1.keys():\n        keys = keys + [key]\n    return keys\n    \n    \ndef get_all_values(dict1):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    values = []\n    for val in dict1.values():\n        values = values + [val]\n    return values\n    \n    \ndef get_key_with_max_value_and_remove_key(dict1):\n    '''\n    Write a function to get key with maximum value in a dictionary and remove it."
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n    \ndef check_value_2(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x == n for x in dict.values())\n    "
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(v == dict[n] for v in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    x = list(dict.values())\n    return all(y == x[0] for y in x)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if values are same in dictionary\n    if len(dict) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_d = {}\n    for k, v in dict1.items():\n        if v!= '':\n            new_d[k] = v\n    return new_d\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    final_dict = {}\n    for item in dict1:\n        if dict1[item]!= '':\n            final_dict[item] = dict1[item]\n    return final_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n    # return dict((k, v) for k, v in dict1.items() if v)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        if len(dict1[i]) == 0:\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if isinstance(dict1, dict):\n        return dict(item for item in dict1.items() if item[1])\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return None\n    d = {}\n    for i in dict1:\n        if dict1[i]!= '':\n            d.update({i: dict1[i]})\n    return d\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n    \nif __name__ == \"__main__\":\n    print(drop_empty({0: \"\", 1: 2, 3: 3})"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(lambda x: x[1]!= '', dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print(dict1)\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = -1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_val = max(max_val, mul(arr, i, j))\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # initialising list of max products and their indices \n    max_products = []\n    \n    # initialising maximum product \n    max_product = 0\n    \n    # initialising prefix sum\n    prefix_sum = 0\n    \n    # initialising the product_index and product_value\n    product_index = 0\n    product_value = 1\n    \n    # iterating over array \n    for i in range(len(arr)):\n        \n        # updating prefix sum \n        prefix_sum += arr[i]\n        \n        # updating product \n        product_value *= arr[i]\n        \n        # checking for the maximum product till now\n        if product_value > max_product:\n            \n            # if the product value is greater than maximum product, update the maximum product and product index \n            max_product = product_value\n            product_index = i\n    \n    # update the product_index and product_value with the max_products list \n    product_value = max_product\n    product_index = product_index\n    \n    # initialising a list to store the final product\n    product = []\n    \n    # iterating over the max_products list\n    for i in range(len(max_products)):\n        \n        # appending the product\n        product.append(product_value)\n        \n        # updating product_value \n        product_value /= arr[max_products[i]]\n        \n        # updating the product_index and product_value with the max_products list \n        product_index = max_products[i]\n        product_value = 1\n    \n    return product\n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max(find_products(arr, 0, len(arr)-1))\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result = max(result, arr[i] * arr[j])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    start_index = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            if max_product < arr[i]:\n                max_product = arr[i]\n        else:\n            start_index = i\n            break\n    if start_index == 0:\n        return max_product\n    else:\n        max_product = max(max_product, 1)\n        for i in range(start_index, len(arr)):\n            max_product = max(max_product * arr[i], 1)\n        return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def max_product_helper(arr, start, end):\n        if start == end:\n            return arr[start]\n        left_max = max_product_helper(arr, start + 1, end)\n        right_max = max_product_helper(arr, start, end - 1)\n        res = max(left_max * right_max, left_max * arr[end], right_max * arr[start])\n        return res\n    \n    return max_product_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = 1\n    max_product_index = -1\n    for i in range(len(arr)):\n        \n        if i == 0:\n            max_product = arr[i]\n            max_product_index = i\n            \n        else:\n            if arr[i] * max_product > arr[i] * max_product:\n                max_product = arr[i]\n                max_product_index = i\n                \n    return max_product\n    \ndef max_product_recursive(arr, i, j):\n    if i == j:\n        return arr[i]\n    \n    mid = (i+j) // 2\n    \n    return max(max_product_recursive(arr, i, mid), max_product_recursive(arr, mid+1, j), max_product_of_three(arr, i, j))\n    \ndef max_product_of_three(arr, i, j):\n    if j - i == 0 or i == j:\n        return 0\n    \n    else:\n        return max(arr[i] * arr[i+1] * arr[i+2], arr[i] * arr[i+1] * arr[j], arr[i] * arr[j] * arr[j-1])\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(max_product<arr[i]*arr[j]):\n                max_product=arr[i]*arr[j]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n    for i in range(5, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1] * arr[i-2] * arr[i-3] * arr[i-4] )\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    curr_max = arr[0]\n    max_product = curr_max\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # NOTE:\n    # You can assume that the input has at least 2 elements\n    # You can assume that the elements of the input tuple are non-negative integers\n    # NOTE: If the input tuple has 0 as its first element, return 0 as the first element\n    # If the input tuple has 1 as its first element, return 1 as the second element\n    # If the input tuple has 2 as its first element, return 2 as the second element\n    # If the input tuple has 3 as its first element, return 3 as the second element\n    # If the input tuple has 4 as its first element, return 4 as the second element\n    # If the input tuple has 5 as its first element, return 5 as the second element\n    # If the input tuple has 6 as its first element, return 6 as the second element\n    # If the input tuple has 7 as its first element, return 7 as the second element\n    # If the input tuple has 8 as its first element, return 8 as the second element\n    # If the input tuple has 9 as its first element, return 9 as the second element\n    # If the input tuple has 10 as its first element, return 10 as the second element\n    # If the input tuple has 11 as its first element, return 11 as the second element\n    # If the input tuple has 12 as its first element, return 12 as the second element\n    # If the input tuple has 13 as its first element, return 13 as the second element\n    # If the input tuple has 14 as its first element, return 14 as the second element\n    # If the input tuple has 15 as its first element, return 15 as the second element\n    # If the input tuple has 16 as its first element, return 16 as the second element\n    # If the input tuple has 17 as its first element, return 17 as the second element\n    # If the input tuple has 18 as its first element, return 18 as the second element\n    # If the input tuple has 19 as its first element, return 19 as the second element\n    # If the input tuple has 20 as its first element, return 20 as the second element\n    # If the input tuple has 21 as its first element, return 21 as the second element\n    # If the input tuple has 22 as its first element, return 22 as the second element\n    # If the input tuple has 23 as its first element, return 23 as the second element\n    # If the input tuple has 24 as its first element, return 24 as the second element\n    # If the input tuple has 25 as its first element, return 25 as the second element\n    # If the input tuple has 26 as its first element, return 26 as the second element\n    # If the input tuple has 27 as its first element, return 27 as the second element\n    # If the input tuple has 28 as its first element, return 28 as the second element\n    # If the input tuple has 29 as its first element, return 29 as the second element\n    # If the input tuple has 30 as its first element, return 30 as the second element\n    # If the input tuple has 31 as its first element, return 31 as the second element\n    # If the input tuple has 32 as its first element, return 32 as the second element\n    # If the input tuple has 33 as its first element, return 33 as the second element\n    # If the input tuple has 34 as its first element, return 34 as the second element\n    # If the input tuple has 35 as its first element, return 35 as the second element\n    # If the input tuple has 36 as its first element, return 36 as the second element\n    # If the input tuple has 37 as its first element, return 37 as the second element\n    # If the input tuple has 38 as its first element, return 38 as the second element\n    # If the input tuple has 39 as its first element, return 39 as the second element\n    # If the input tuple has 40 as its first element, return 40 as the second element\n    # If the input tuple has 41 as its first element, return 41 as the second element\n    # If the input tuple has 42 as its first element, return 42 as the second element\n    # If the input tuple has 43 as its first element, return 43 as the second element\n    # If the input tuple has 44 as its first element, return 44 as the second element\n    # If the input tuple has 45 as its first element, return 45 as the second element\n    # If the input tuple has 46 as its first element, return 46 as the second element\n    # If the input tuple has 47 as its first element, return 47 as the second element\n    # If the input tuple has 48 as its first element, return 48 as the second element\n    # If the input tuple has 49 as its first element, return 49 as the second element\n    # If the input tuple has 50 as its first element, return 50 as the second element\n    # If the input tuple has 51 as its first element, return 51 as the second element\n    # If the input tuple has 52 as its first element, return 52 as the second element\n    # If the input tuple has 53 as its first element, return 53 as the second element\n    # If the input tuple has 54 as its first element, return 54 as the second element\n    # If the input tuple has 55 as its first element, return 55 as the second element\n    # If the input tuple has 56 as its first element, return 56 as the second element\n    # If the input tuple has 57 as its first element, return 57 as the second element\n    # If the input tuple has 58 as its first element, return 58 as the second element\n    # If the input tuple has 59 as its first element, return 59 as the second element\n    # If the input tuple has 60 as its first element, return 60 as the second element\n    # If the input tuple has 61 as its first element, return 61 as the second element\n    # If the input tuple has 62 as its first element, return 62 as the second element\n    # If the input tuple has 63 as its first element, return 63 as the second element\n    # If the input tuple has 64 as its first element, return 64 as the second element\n    # If the input tuple has 65 as its first element, return 65 as the second element\n    # If the input tuple has 66 as its first element, return 66 as the second element\n    # If the input tuple has 67 as its first element, return 67 as the second element\n    # If the input tuple has 68 as its first element, return 68 as the second element\n    # If the input tuple has 69 as its first element, return 69 as the second element\n    # If the input tuple has 70 as its first element, return 70 as the second element\n    # If the input tuple has 71 as its first element, return 71 as the second element\n    # If the input tuple has 72 as its first element, return 72 as the second element\n    # If the input tuple has 73 as its first element, return 73 as the second element\n    # If the input tuple has 74 as its first element, return 74 as the second element\n    # If the input tuple has 75 as its first element, return 75 as the second element\n    # If the input tuple has 76 as its first element, return 76 as the second element\n    # If the input tuple has 77 as its first element, return 77 as the second element\n    # If the input tuple has 78 as its first element, return 78 as the second element\n    # If the input tuple has 79 as its first element, return 79 as the second element\n    # If the input tuple has 80 as its first element, return 80 as the second element\n    # If the input tuple has 81 as its first element, return 81 as the second element\n    # If the input tuple has 82 as its first element, return 82 as the second element\n    # If the input tuple has 83 as its first element, return 83 as the second element\n    # If the input tuple has 84 as its first element, return 84 as the second element\n    # If the input tuple has 85 as its first element, return 85 as the second element\n    # If the input tuple has 86 as its first element, return 86 as the second element\n    # If the input tuple has 87 as its first element, return 87 as the second element\n    # If the input tuple has 88 as its first element, return 88 as the second element\n    # If the input tuple has 89 as its first element, return 89 as the second element\n    # If the input tuple has 90 as its first element, return 90 as the second element\n    # If the input tuple has 91 as its first element, return 91 as the second element\n    # If the input tuple has 92 as its first element, return 92 as the second element\n    # If the input tuple has 93 as its first element, return 93 as the second element\n    # If the input tuple has 94 as its first element, return 94 as the second element\n    # If the input tuple has 95 as its first element, return 95 as the second element\n    # If the input tuple has 96 as its first element, return 96 as the second element\n    # If the input tuple has 97 as its first element, return 97 as the second element\n    # If the input tuple has 98 a"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_list = list(test_tup)\n    tup_list.sort()\n    pairs = []\n    for i in range(len(tup_list) - 1):\n        pairs.append(tup_list[i] + tup_list[i+1])\n    return tuple(pairs)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = (test_tup[0], test_tup[1])\n    return sum(tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (tuple(i + j for i, j in zip(test_tup, test_tup[1:])))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # start by initializing variables\n    diff_from_sum_total = 0\n    sum_total = 0\n    # keep adding each of the values to their respective variables\n    for item in test_tup:\n        diff_from_sum_total += item\n        sum_total += item\n    \n    # return the pairwise addition\n    return diff_from_sum_total\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = test_tup[0]\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if i == len(test_tup) - 1:\n            continue\n        res += test_tup[i+1]\n    print(res)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = None\n    # your code here\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #importing the extra packages for parallelization\n    from concurrent.futures import ProcessPoolExecutor, as_completed\n    from itertools import zip_longest\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        if i == 0:\n            pairwise_sum.append(test_tup[i]+test_tup[i+1])\n        elif i == len(test_tup)-2:\n            pairwise_sum.append(test_tup[i]+test_tup[i-1])\n        else:\n            pairwise_sum.append(test_tup[i]+test_tup[i+1]+test_tup[i-1])\n    return tuple(pairwise_sum)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==1:\n        return test_tup\n    elif len(test_tup)==2:\n        return tuple(test_tup[0]+test_tup[1])\n    elif len(test_tup)==3:\n        return tuple(test_tup[0]+test_tup[1])+tuple(test_tup[1]+test_tup[2])\n    else:\n        return tuple(test_tup[0]+test_tup[1])+tuple(test_tup[1]+test_tup[2])+tuple(test_tup[2]+test_tup[3])\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product*arr[i]\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Return the product of all the elements in the array.\n    return reduce(lambda x,y:x*y, arr) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in arr:\n        ans = (ans*i) % n\n    return ans\n    "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # your code here\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product_array = []\n    product = 1\n    for i in arr:\n        product *= i\n    for i in arr:\n        product_array.append(product%n)\n        product = (product-i*product%n)%n\n    return product_array\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n<=1:\n        return arr[0]\n    else:\n        return arr[0]*find_remainder(arr[1:],n-1) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = False\n    consec_list = []\n    for i in range(1,len(l)):\n        if l[i] - l[i-1] == 1:\n            consec = True\n        else:\n            consec = False\n            consec_list = []\n    if consec:\n        print(\"Yes, the list contains consecutive numbers.\")\n        print(\"The consecutive list is: \", end = \" \")\n        print(consec_list)\n    else:\n        print(\"No, the list doesn't contain consecutive numbers.\")\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = False\n    if l == None:\n        return flag\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            continue\n        else:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = False\n    i = 0\n    while(i < len(l)-1):\n        if(l[i] == l[i+1]):\n            flag = True\n            i += 1\n        else:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(0, len(l)):\n        if count == 2:\n            return True\n        else:\n            count += 1\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = 0\n    for i in range(len(l)):\n        if l[i]!= l[i+1]:\n            n = n + 1\n            if n > 1:\n                return False\n            else:\n                continue\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not isinstance(l,list):\n        raise TypeError(\"Invalid Input\")\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return \"No consecutive numbers\"\n    return \"Consecutive numbers\"\nprint(check_Consecutive([1,2,3,4,4,5,6,7,7])"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)): \n        if (l[i]-l[i-1])!= 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    temp = l[0]\n    for i in range(len(l)-1):\n        if temp == l[i+1]:\n            return False\n        temp = l[i+1]\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_dict = {}\n    for i in test_list1:\n        test_list1_dict[i] = 1\n    test_list2_dict = {}\n    for i in test_list2:\n        test_list2_dict[i] = 1\n    intersection = set(test_list1_dict.keys()) & set(test_list2_dict.keys())\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Solve this problem using list and set operations.\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # A = set(test_list1)\n    # B = set(test_list2)\n    # return A & B\n    # A = set(test_list1)\n    # print(A)\n    # B = set(test_list2)\n    # print(B)\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n    # A = set(test_list1)\n    # B = set(test_list2)\n    # intersection = A.intersection(B)\n    # return tuple(sorted(intersection))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Solution\n    # sort both the list of tuples\n    test_list1.sort()\n    test_list2.sort()\n    # dict to store the value of each element in list\n    # one to store the value of tuples in list\n    dict_1 = {}\n    # another to store the value of tuples in list\n    dict_2 = {}\n    # to store the intersection of the two list\n    final_list = []\n    for val in test_list1:\n        dict_1[val] = 0\n    for val in test_list2:\n        dict_2[val] = 0\n    # for each element in the list of tuples\n    for val in test_list1:\n        # if element is already present in dict_1\n        if val in dict_1:\n            # add one to the value\n            dict_1[val] += 1\n    for val in test_list2:\n        # if element is already present in dict_2\n        if val in dict_2:\n            # add one to the value\n            dict_2[val] += 1\n    # iterate through both the dictionary\n    for key, val in dict_1.items():\n        # if value is greater than 1\n        if val > 1:\n            # add the key with the max value to the final list\n            final_list.append(key)\n    for key, val in dict_2.items():\n        # if value is greater than 1\n        if val > 1:\n            # add the key with the max value to the final list\n            final_list.append(key)\n    # return the final list\n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    a = set(test_list1)\n    b = set(test_list2)\n    return tuple(sorted(list(a.intersection(b))))\n    #return sorted(list(a.intersection(b)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ans = []\n    for i in test_list1:\n        if i in test_list2 and i not in ans:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for item in test_list1:\n        if item in test_list2:\n            intersect_list.append(item)\n    return intersect_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    x=[]\n    for i in test_list1:\n        if i in test_list2:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = ()\n    for item in test_list1:\n        if item in test_list2:\n            intersection_tuple = intersection_tuple + (item,)\n    return intersection_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        test_list1, test_list2 = map(set, (test_list1, test_list2))\n        return list(test_list1 & test_list2)\n    except:\n        return None\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    s1=''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            s1=s1+newch\n        else:\n            s1=s1+str1[i]\n    return s1\ndef swap_index(s,i,j):\n    '''\n    Write a function that swaps indices i and j in a string.\n    '''\n    return s[:i]+s[j]+s[i+1:j]+s[i]+s[j+1:]\ndef replace_space(s):\n    '''\n    Write a function that replaces all spaces in a string with %20.\n    '''\n    for i in range(len(s)):\n        if s[i]==\" \":\n            s=s[:i]+\"%20\"+s[i+1:]\n    return s\ndef reverse_string(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    s=''\n    for i in range(len(s)):\n        s=s+s[i]\n    return s\ndef reverse_integer(n):\n    '''\n    Write a function that reverses the digits of an integer.\n    '''\n    s=0\n    while n>0:\n        d=n%10\n        s=s*10+d\n        n=n//10\n    return s\ndef count_chars(s,ch):\n    '''\n    Write a function that counts the number of occurrences of a specific character in a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i]==ch:\n            s1=s1+s[i]\n    return len(s1)\ndef count_chars_v2(s,ch):\n    '''\n    Write a function that counts the number of occurrences of a specific character in a string.\n    '''\n    s1=0\n    for i in range(len(s)):\n        if s[i]==ch:\n            s1=s1+1\n    return s1\ndef count_chars_v3(s,ch):\n    '''\n    Write a function that counts the number of occurrences of a specific character in a string.\n    '''\n    s1=0\n    for i in range(len(s)):\n        if s[i]==ch:\n            s1=s1+1\n    return s1\ndef remove_char(s,ch):\n    '''\n    Write a function that removes a specified character from a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i]!=ch:\n            s1=s1+s[i]\n    return s1\ndef find_char(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef find_char_v2(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef find_char_v3(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef find_char_v4(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef find_char_v5(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef find_char_v6(s,ch):\n    '''\n    Write a function that finds the first occurrence of a specified character in a string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            return i\n    return -1\ndef is_palindrome(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef is_palindrome_v2(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef is_palindrome_v3(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef is_palindrome_v4(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef is_palindrome_v5(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef is_palindrome_v6(s):\n    '''\n    Write a function that determines whether a specified string is a palindrome.\n    '''\n    s1=s.lower()\n    for i in range(len(s1)//2):\n        if s1[i]!=s1[-(i+1)]:\n            return False\n    return True\ndef remove_vowels(s):\n    '''\n    Write a function that removes the vowels from a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i] not in \"aeiou\":\n            s1=s1+s[i]\n    return s1\ndef remove_vowels_v2(s):\n    '''\n    Write a function that removes the vowels from a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i] not in \"aeiou\":\n            s1=s1+s[i]\n    return s1\ndef remove_vowels_v3(s):\n    '''\n    Write a function that removes the vowels from a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i] not in \"aeiou\":\n            s1=s1+s[i]\n    return s1\ndef remove_vowels_v4(s):\n    '''\n    Write a function that removes the vowels from a string.\n    '''\n    s1=''\n    for i in range(len(s)):\n        if s[i] not in \"aeiou\":\n            s1=s1+s[i]\n    return s1\ndef remove_vowels_v5(s):\n    '''\n    Write a function that removes the vowels from a string.\n    '''\n    s1=''\n    vowels=\"aeiou\"\n    for i in range(len(s)):\n        if s[i] no"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    print(str1)\n    \nreplace_char(\"ABab
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ch = ch.upper()\n    #ch = ch.lower()\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    print(str2)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n    \ndef remove_words(str1,words):\n    '''\n    Write a function to remove characters in a string.\n    '''\n    if words is None:\n        return str1\n    str1 = str1.split()\n    for w in words:\n        if w in str1:\n            str1.remove(w)\n    str1 =''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return(str1.replace(ch,newch))\ndef get_values(str1):\n    '''\n    Write a function to get the values in comma separated form.\n    '''\n    return(str1.split(','))\ndef check_string(str1):\n    '''\n    Write a function to check if a string contains only digits.\n    '''\n    return(str1.isdigit())\ndef check_char(str1,ch):\n    '''\n    Write a function to check if a character is present in a string or not.\n    '''\n    return(str1.count(ch))\ndef check_char_range(str1,start,end):\n    '''\n    Write a function to check if the characters in a string are in the given character range.\n    '''\n    return((ch in str1 for ch in range(start,end)))\ndef check_space(str1):\n    '''\n    Write a function to check if a string has any whitespace characters.\n    '''\n    return(str1.isspace())\ndef check_numbers(str1):\n    '''\n    Write a function to check if a string contains any digits.\n    '''\n    return(str1.isdigit())\ndef check_space_in_string(str1):\n    '''\n    Write a function to check if any character in the string is present in a given set of characters.\n    '''\n    return(set(str1).issubset(set('0123456789 ')))\ndef check_no_space_in_string(str1):\n    '''\n    Write a function to check if no character in the string is present in a given set of characters.\n    '''\n    return(set(str1).isdisjoint(set('0123456789 ')))\ndef check_no_space_in_string_length(str1,n):\n    '''\n    Write a function to check if a string of n characters only contains characters in the set of characters.\n    '''\n    return(len(set(str1)) == n)\ndef check_no_space_in_string_character(str1,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters.\n    '''\n    return(set(str1).issuperset(set(ch)))\ndef check_no_space_in_string_length_character(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n.\n    '''\n    return(len(set(str1)) == n and set(str1).issuperset(set(ch)))\ndef check_no_space_in_string_length_character_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_character_neg(str1,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_character_neg_neg(str1,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not be present in the string.\n    '''\n    return((len(set(str1)) == n) and (set(str1).isdisjoint(set(ch))))\ndef check_no_space_in_string_length_character_neg_neg(str1,n,ch):\n    '''\n    Write a function to check if all the characters in the string are in the set of characters and the string length is n and the characters should not b"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if(str1[i] == ch):\n            str1[i] = newch\n    return \"\".join(str1)\n    "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    keys = sorted(dict1.keys(), key=lambda x: dict1[x])\n    for k in keys:\n        sorted_dict[k] = dict1[k]\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_by_value = sorted(dict1.items(), key=lambda kv: kv[1])\n    return sorted_by_value\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item:item[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    res = nums[0]\n    low = nums[0]\n    high = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > high:\n            high = nums[i]\n        if nums[i] < low:\n            low = nums[i]\n        res = low + high\n    print(res)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    # print(nums)\n    nums = sorted(nums, reverse=True)\n    # print(nums)\n    big_num = nums[0] + nums[1]\n    small_num = nums[0] + nums[1]\n    return big_num, small_num\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max=min=nums[0]\n        for i in nums:\n            if i>max:\n                max=i\n            if i<min:\n                min=i\n        return max+min\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest, largest = min(nums), max(nums)\n    return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = 0\n    smallest = 0\n    for i in range(0,len(nums)):\n        if nums[i] > biggest:\n            biggest = nums[i]\n    for i in range(0,len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return biggest + smallest\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if not isinstance(string,str):\n        raise ValueError('string must be a string')\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    str=string.lower()\n    print(str)\nis_lower(\"Hello World\")\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n    \n    \ndef is_capitalize(string):\n    '''\n    Write a python function to convert the given string to capitalize case.\n    '''\n    return string.capitalize()\n    \n    \ndef is_title(string):\n    '''\n    Write a python function to convert the given string to title case.\n    '''\n    return string.title()\n    \n    \ndef is_reverse(string):\n    '''\n    Write a python function to convert the given string to reverse case.\n    '''\n    return string.swapcase()\n    \n    \ndef is_blank(string):\n    '''\n    Write a python function to check whether the given string is blank or not.\n    '''\n    return not string.strip()\n    \n    \ndef is_camel_case(string):\n    '''\n    Write a python function to check whether the given string is camel case or not.\n    '''\n    return string.isalpha() and string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    l_string = string.lower()\n    return l_string\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # substring = re.findall(r'[^a-z]+', str1)\n    # print(substring)\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\"a\", \"\")\nprint(remove_lowercase(\"hello my name is mark and he is 21 years old\"))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1, flags=re.I)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return re.sub('[a-z]+', \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.findall(r'[a-z]', str1)\n    return ''.join(res)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str=\"\"\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            new_str=new_str+str1[i]\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return str1.replace(\"a\",\"\").replace(\"b\",\"\").replace(\"c\",\"\").replace(\"d\",\"\").replace(\"e\",\"\").replace(\"f\",\"\").replace(\"g\",\"\").replace(\"h\",\"\").replace(\"i\",\"\").replace(\"j\",\"\").replace(\"k\",\"\").replace(\"l\",\"\").replace(\"m\",\"\").replace(\"n\",\"\").replace(\"o\",\"\").replace(\"p\",\"\").replace(\"q\",\"\").replace(\"r\",\"\").replace(\"s\",\"\").replace(\"t\",\"\").replace(\"u\",\"\").replace(\"v\",\"\").replace(\"w\",\"\").replace(\"x\",\"\").replace(\"y\",\"\").replace(\"z\",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub('\\W+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.upper()\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n    \ndef Second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n % 10\n    \ndef Digits_Sum(n) : \n    '''\n    Write a python function to find the sum of the first and second digits of a given number.\n    '''\n    return n // 10 + n % 10\n    \ndef Digits_Product(n) : \n    '''\n    Write a python function to find the product of the first and second digits of a given number.\n    '''\n    return n // 10 * n % 10\n    \ndef Digits_Quotient(n) : \n    '''\n    Write a python function to find the quotient of the first and second digits of a given number.\n    '''\n    return n // 10 // n % 10\n    \ndef Digits_Remainder(n) : \n    '''\n    Write a python function to find the remainder of the first and second digits of a given number.\n    '''\n    return n // 10 % 10\n    \ndef Digits_Division(n) : \n    '''\n    Write a python function to find the division of the first and second digits of a given number.\n    '''\n    return n // 10 // n % 10\n    \ndef Digits_Power(n) : \n    '''\n    Write a python function to find the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10\n    \ndef Digits_Square(n) : \n    '''\n    Write a python function to find the square of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2\n    \ndef Digits_Cube(n) : \n    '''\n    Write a python function to find the cube of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 3\n    \ndef Digits_Power_Sum(n) : \n    '''\n    Write a python function to find the sum of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Product(n) : \n    '''\n    Write a python function to find the product of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Quotient(n) : \n    '''\n    Write a python function to find the quotient of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Remainder(n) : \n    '''\n    Write a python function to find the remainder of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Division(n) : \n    '''\n    Write a python function to find the division of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Cube(n) : \n    '''\n    Write a python function to find the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Power_Square_Sum(n) : \n    '''\n    Write a python function to find the sum of the square of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Square_Product(n) : \n    '''\n    Write a python function to find the product of the square of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Square_Quotient(n) : \n    '''\n    Write a python function to find the quotient of the square of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Square_Remainder(n) : \n    '''\n    Write a python function to find the remainder of the square of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Square_Division(n) : \n    '''\n    Write a python function to find the division of the square of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Cube_Sum(n) : \n    '''\n    Write a python function to find the sum of the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Cube_Product(n) : \n    '''\n    Write a python function to find the product of the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Cube_Quotient(n) : \n    '''\n    Write a python function to find the quotient of the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Cube_Remainder(n) : \n    '''\n    Write a python function to find the remainder of the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Power_Cube_Division(n) : \n    '''\n    Write a python function to find the division of the cube of the power of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3 + n // 10 ** n % 10 ** 2\n    \ndef Digits_Square_Sum(n) : \n    '''\n    Write a python function to find the sum of the square of the first and second digits of a given number.\n    '''\n    return n // 10 ** n % 10 ** 2 + n // 10 ** n % 10 % 2 + n // 10 ** n % 10 % 3\n    \ndef Digits_Square_Product(n) : \n    '''\n    Write a python function to find the product o"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    l = len(s)\n    return int(s[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n / 10\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = n%10\n    return x\n    \n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    x = (n/10)%10\n    return x\n    \n    \ndef third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    x = (n/100)%10\n    return x\n    \n    \ndef fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    x = (n/1000)%10\n    return x\n    \n    \ndef fifth_Digit(n) :\n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    x = (n/10000)%10\n    return x\n    \n    \ndef sixth_Digit(n) :\n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    x = (n/100000)%10\n    return x\n    \n    \ndef seventh_Digit(n) :\n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef eighth_Digit(n) :\n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef nth_Digit(n) :\n    '''\n    Write a python function to find the nth digit of a given number.\n    '''\n    x = (n/100000000)%10\n    return x\n    \n    \ndef tenth_Digit(n) :\n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef ones_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n%10)%10\n    return x\n    \n    \ndef tens_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10)%10\n    return x\n    \n    \ndef hundereds_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/100)%10\n    return x\n    \n    \ndef hundreds_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000)%10\n    return x\n    \n    \ndef thousands_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef thousands_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000000)%10\n    return x\n    \n    \ndef thousands_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/100000000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef millions_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/100000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/100000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/10000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/1000000000)%10\n    return x\n    \n    \ndef million_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = (n/100000000)%10\n    return x\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n>0 :\n        if int(n)==0 :\n            return n\n        else :\n            return int(n%10)\n    else :\n        return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #define a variable to store the first digit\n    d = 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return(n//10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # YOUR CODE HERE\n    return int(str(n)[0])\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(list)\n    odd = []\n    for i in range(len(list)):\n        if i%2==1:\n            odd.append(list[i])\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds=[]\n    for i in list:\n        if i%2==1:\n            odds.append(i)\n    print(odds)\n    \ndef Reverse(list): \n    '''\n    Write a python function which takes a list and returns the reversed list.\n    '''\n    return list[::-1]\n    \ndef SplitEvenOdds(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd lists.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evenList = []\n    oddList = []\n    for i in list:\n        if i%2 == 0:\n            evenList.append(i)\n        else:\n            oddList.append(i)\n    return evenList, oddList\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # YOUR CODE HERE\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if list[i]%2==1:\n            list[i]=1\n            break\n        else:\n            list[i]=0\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(n)\n    list = []\n    for i in range(n):\n        list.append(i**3)\n    return abs(sum(list) - (sum(range(n))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    i = 0\n    while (i<=n) :\n        i = i + 1\n        n1 = i ** 3\n        n2 = i ** 2\n        n3 = i ** 1\n        s1 = n1 + n2 + n3\n        print(n1,\" \",n2,\" \",n3,\" \",s1,\" \",abs(s1-n1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum_of_cubes(n) : \n        sum_of_cubes = 0\n        for i in range(1,n+1):\n            sum_of_cubes += i**3\n        return sum_of_cubes\n    \n    def sum_of_natural_numbers(n) : \n        sum_of_natural_numbers = 0\n        for i in range(1,n+1):\n            sum_of_natural_numbers += i\n        return sum_of_natural_numbers\n    \n    diff = (sum_of_cubes(n) - sum_of_natural_numbers(n))\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers:\",diff)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def add(n) : \n        '''\n        Write a python function to find the sum of the cubes of the first n natural numbers.\n        '''\n        sum = 0 \n        for i in range(1, n+1) : \n            sum += i**3 \n        return sum \n    def sub(n) : \n        '''\n        Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        return add(n)**2 - add(n-1)**2\n    if n == 1: \n        return 0 \n    return sub(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    a = 0\n    for i in range(n):\n        a += i**3\n    b = 0\n    for i in range(n):\n        b += i\n    return abs(a-b)\nprint(difference(3))  # 0\nprint(difference(4))  # 7\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    ans = 0\n    a = 0\n    while a < n :\n        ans = ans + pow(a, 3)\n        a = a + 1\n    ans = ans * 4\n    a = 0\n    while a < n :\n        ans = ans - pow(a, 3)\n        a = a + 1\n    print('Difference is :', ans)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n):\n        return n * n * n\n    \n    def cubeSum(n):\n        cube_sum = 0\n        for x in range(n):\n            cube_sum += cube(x + 1)\n        return cube_sum\n    \n    def main(n):\n        sum_of_cubes = cubeSum(n)\n        difference = cubeSum(n) - sum_of_cubes\n        print(difference)\n    \n    main(int(input()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    for i in range(n) :\n        result.append(int(input()))\n    result_1 = sum(i**3 for i in result)\n    result_2 = sum(i for i in result)\n    print(result_2 - result_1)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        sum_of_cubes = 0\n        for i in range(1,n+1):\n            sum_of_cubes += i**3\n        return sum_of_cubes\n    def difference_of_cubes(n):\n        sum_of_cubes = sum_of_cubes(n)\n        sum_of_natural = 0\n        for i in range(1,n+1):\n            sum_of_natural += i\n        return sum_of_cubes - sum_of_natural\n    print(\"The difference between sum of cubes and sum of natural numbers is: \", difference_of_cubes(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    for i in range(0, n+1) :\n        sum1 = sum1 + i**3\n    sum2 = 0\n    for j in range(0, n+1) :\n        sum2 = sum2 + j\n    return sum1-sum2\n    \nprint(difference(5)) # -288\nprint(difference(10)) # 40320\nprint(difference(100)) # -691633497700\nprint(difference(500)) # -4137995810422000\nprint(difference(1000)) # -2238120593555224621678402469482400\nprint(difference(2000)) # -14366911582770812449213120870482600\nprint(difference(5000)) # -527172896124887042157320467796702400\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(N) : \n            if (i!=j and A[i]==A[j]) :\n                count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if ( A[i] ^ A[N-i-1] )%2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N) :\n        if ((A[i] ^ A[(i+1) % N]) % 2) == 1 :\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    from collections import Counter\n    count = 0\n    for i in range(N):\n        count += Counter(A)[i & 1 ^ i + 1]\n    return count\nA = [1,2,4,5]\nprint(find_Odd_Pair(A,len(A)))\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if(A[i] == A[j] and (A[i] + A[j]) % 2 == 1):\n                count += 1\n                \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if(A[i] ^ A[j] == 1):\n                count+=1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if not A or N <= 0 :\n        return 0\n    count = 0\n    for i in range(N):\n        if (A[i] & 1) :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    print(A)\n    print(\"Odd Pair:\",end=\"\")\n    count=0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j])%2!= 0 :\n                print(A[i],end=\" \")\n                print(A[j],end=\" \")\n                count+=1\n    print(\"\")\n    return count\n    \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N+1):\n        for j in range(i+1,N+1):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum(i&1!= j&1 for i,j in zip(A[0::2], A[1::2]))\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print('Case toggled : ',string.swapcase())\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i].lower()\n        else:\n            result += string[i].upper()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #return string.swapcase()\n    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    n1_len = len(n1)\n    n2_len = len(n2)\n    if n1_len!= n2_len:\n        return \"Numbers of digits are not equal\"\n    for i in range(n1_len):\n        if n1[i]!= n2[i]:\n            sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    distance = 0\n    for i in range(1,len(str(n1))+1):\n        distance += abs(int(str(n1)[i])-int(str(n2)[i]))\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Input: n1 = 2, n2 = 34\n    # Output: 18\n    # Explanation: Difference of 2 and 34 is 18.\n    # The sum of per-digit difference for numbers 2 and 34 is 18.\n    # Refer README.md for the explanation of the below formula\n    return n1 - n2 if n2 < n1 else n2 - n1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #get absolute difference between both numbers\n    diff = abs(n1 - n2)\n    #get per digit difference\n    temp = 0\n    while diff!= 0:\n        #add the per digit difference\n        temp += diff % 10\n        #reduce the difference\n        diff //= 10\n    #return sum of the per digit differences\n    return temp\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Your code here\n    n1 = str(n1)\n    n2 = str(n2)\n    d1 = len(n1)\n    d2 = len(n2)\n    if d1!= d2:\n        return -1\n    sum_d = 0\n    for i in range(d1):\n        num1 = int(n1[i])\n        num2 = int(n2[i])\n        sum_d += abs(num1-num2)\n    return sum_d\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_int = int(n1_str)\n    n2_int = int(n2_str)\n    total = 0\n    for i in range(len(n1_str)):\n        n1_int_n2_int = n1_int - n2_int\n        total = total + n1_int_n2_int\n    return total\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_distance = 0\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            sum_distance += abs(int(n1[i]) - int(n2[i]))\n    return sum_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert type(n1)==int and type(n2)==int, 'arguments should be integers!'\n    assert n1>=0 and n2>=0, 'arguments should be non-negative!'\n    assert n1<=2**31 and n2<=2**31, 'arguments should be less than 2^31!'\n    assert n1<n2, 'first number should be smaller than second one!'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = -sys.maxsize\n    cnt = 1\n    start = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum < 0:\n            start = i + 1\n            sum = 0\n        if sum > res:\n            res = sum\n            cnt = 1\n        elif sum == res:\n            cnt += 1\n    return (res, cnt, start)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_list = []\n    n = len(a)\n    if n == 0:\n        return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum = a[0]\n    sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(1, size):\n        if sum + a[i] > sum:\n            sum = sum + a[i]\n            end_index = i\n        if sum > maximum:\n            maximum = sum\n            start_index = i\n            end_index = i\n        if sum < 0:\n            sum = 0\n    print(\"Maximum subarray sum is\", maximum)\n    print(\"Starting index and ending index of maximum subarray is\", start_index, end_index)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sum = 0\n    max_sub_start = 0\n    max_sub_end = 0\n    sum_value = 0\n    for i in range(0, size):\n        if sum_value + a[i] > max_sum:\n            sum_value = a[i]\n            max_sub_end = i\n            max_sub_start = i\n            max_sum = sum_value\n        elif sum_value + a[i] == max_sum:\n            max_sub_end = i\n            max_sum = sum_value\n    print(a, sum_value, max_sum, max_sub_start, max_sub_end)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    start = 0\n    end = 0\n    for i in range(1, size):\n        curr_sum = max(curr_sum + a[i], a[i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            end = i\n    return max_sum, start, end\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if size == 0:\n    #     return None\n    # if size == 1:\n    #     return a[0]\n    # if size == 2:\n    #     return max(a[0], a[1])\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n    sub_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return\n    max_sum = 0\n    curr_sum = 0\n    start_idx = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start_idx = i\n    return max_sum, start_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sums = []\n    largest_sum = 0\n    for i in range(0, size):\n        sums.append(0)\n    for i in range(0, size):\n        largest_sum = max(largest_sum, sums[i])\n        for j in range(i, size):\n            largest_sum = max(largest_sum, sums[j] + a[j])\n            sums[j] = largest_sum\n    return largest_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    union = set()\n    for element in test_list1:\n        union.add(element)\n    for element in test_list2:\n        union.add(element)\n    return tuple(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union_tup = test_tup1 + test_tup2\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp = ()\n    for i in test_tup1:\n        if i not in test_tup2:\n            temp += (i, )\n    for i in test_tup2:\n        if i not in test_tup1:\n            temp += (i, )\n    return sorted(temp)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = test_tup1 + test_tup2\n    union_elements.sort()\n    return union_elements\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    for i in test_tup1:\n        if i not in union_tuple:\n            union_tuple.append(i)\n    for j in test_tup2:\n        if j not in union_tuple:\n            union_tuple.append(j)\n    union_tuple.sort()\n    return union_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = list(set(test_tup1) | set(test_tup2))\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1 + test_tup2))\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist=[]\n    for i in range(len(lst)):\n        longest_sublist.append(len(lst[i]))\n        if len(lst[i])>len(longest_sublist):\n            longest_sublist=lst[i]\n    return(longest_sublist)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for ele in lst:\n        if ele in d:\n            d[ele] += 1\n        else:\n            d[ele] = 1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        temp = 0\n        for j in range(i,len(lst)):\n            temp = max(temp,len(lst[i:j+1]))\n        if(max_length < temp):\n            max_length = temp\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp = 0\n    for i in lst:\n        if type(i) == list:\n            length_of_sublist = Find_Max_Length(i)\n            temp += 1\n            if length_of_sublist > max_length:\n                max_length = length_of_sublist\n    return temp + 1\n    \nFind_Max_Length(lst)"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    for sublist in lst:\n        if len(sublist) > maxlen:\n            maxlen = len(sublist)\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])>longest):\n                longest = len(lst[i])\n            if(len(lst[j])>longest):\n                longest = len(lst[j])\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    maxi=0\n    for i in range(n):\n        if len(lst[i])>maxi:\n            maxi=len(lst[i])\n    return maxi\n        \nFind_Max_Length([[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4], [5, 6, 7, 8]])\nFind_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\nFind_Max_Length([[1, 2, 3], [4, 5, 6]])\nFind_Max_Length([[1, 2, 3]])\nFind_Max_Length([[1, 2, 3]])\nFind_Max_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nFind_Max_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]])\nFind_Max_Length([[1, 2, 3], [4, 5, 6]])\nFind_Max_Length([[1, 2, 3], [4, 5, 6]])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > lst_len:\n            lst_len = len(lst[i])\n    return lst_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) >= len(max_sublist):\n            max_sublist = sublist\n    return len(max_sublist)\n    \ndef Find_Longest_Subarray(arr, n):\n    max_sublist = 0\n    length = 0\n    for i in range(n):\n        for j in range(i, n):\n            sublist = arr[i:j]\n            if len(sublist) > max_sublist:\n                max_sublist = len(sublist)\n                length = max_sublist\n    return length\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\".*?\\\"\"\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #Finds the position of the closing quotation marks\n    pos_1 = text.find('\"')\n    pos_2 = text.find('\"', pos_1 + 1)\n    #Extracts the values\n    return text[pos_1 + 1:pos_2]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #first remove unnecessary symbols\n    text = re.sub(' +','', text)\n    #create a dictionary to store value and quotation marks\n    dic = {}\n    #loop through each character\n    for i in range(len(text)):\n        #if the character is a quotation mark and not part of string\n        if (text[i] == '\"' and (i == 0 or text[i - 1]!= '\"' )):\n            #we found the start of the quotation mark\n            if i == 0:\n                #so we have not started, so we can add to the dictionary\n                dic['start'] = i\n                continue\n            #in order to break after the start, we need to find the end of the quote\n            end = text.index('\"', i)\n            #we are assuming that there is no extra text between the start and end.\n            #In this case, this would be the extra text\n            #if this condition is violated, we have found the end of the string\n            if (text[end + 1:end + 4] == '\"\"\"') and (text[end + 4:end + 8] == '\"\"\"') and (text[end + 8:end + 12] == '\"\"\"') :\n                #we have found the end of the string\n                dic['end'] = end\n                #we stop looping\n                break\n            else:\n                #we are continuing to find the end\n                end = text.index('\"', end + 1)\n    #if we are not able to find the end of the string\n    if dic['start'] == -1:\n        dic['start'] = 0\n        dic['end'] = 0\n    #if we are not able to find the end of the string\n    if dic['end'] == -1:\n        dic['start'] = 0\n        dic['end'] = 0\n    #return only the value\n    return text[dic['start'] + 1: dic['end']]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if '\\\"' not in text:\n        return []\n    text = text.replace('\\\"','\\'')\n    text = text.replace('\\'','\\\"')\n    text = text.replace('\\n','')\n    text = text.split('\\\"')\n    text = ''.join(text)\n    text = text.split('\\'')\n    text = ''.join(text)\n    text = re.sub(r'\\s+',' ',text)\n    return text.split(' ')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write a pattern that matches strings with either single or double quotes:\n    p = r\"(\\\"|\\')[^\\\"]+[\\\"|\\']|\\S+\"\n    # Write a pattern that matches strings with the following:\n    # single quote, double quote, space, or end of string\n    #p = r\"[\\\"' \\t]+|\\S+|$\"\n    # Use the pattern to find matches in text and print out each match in new lines.\n    list1 = re.findall(p, text)\n    for i in list1:\n        print(i)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r\"\\\".*?\\\"\", text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #print(text)\n    text = text.replace('\\\"','')\n    text = text.replace('\\\\','')\n    text = text.replace('\\n','')\n    #print(text)\n    text = text.replace('\\t','')\n    #print(text)\n    result = re.findall('[a-zA-Z0-9=.!\\[\\]\\'\\\"]', text)\n    return result\n    \ndef replace_values(text, regex_pattern, replace_string):\n    '''\n    Write a function to replace values between quotation marks from a string.\n    '''\n    result = re.sub(regex_pattern, replace_string, text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # sample text\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # sample text\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values(value1))\n    # print(extract_values(value2))\n    # print(extract_values(value3))\n    \n    regex = re.compile(r\"(.*?)\\\"(.*?)\\\"(.*)\")\n    \n    result = regex.findall(text)\n    \n    print(result)\n    \n    \n    # Replace the values in the list with new values\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values(value1))\n    # print(extract_values(value2))\n    # print(extract_values(value3))\n    \n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values(value1))\n    # print(extract_values(value2))\n    # print(extract_values(value3))\n    \n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values(value1))\n    # print(extract_values(value2))\n    # print(extract_values(value3))\n    \n    \n    \ndef replace_values(text):\n    '''\n    Write a function to replace values in a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values(value1))\n    # print(replace_values(value2))\n    # print(replace_values(value3))\n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values(value1))\n    # print(replace_values(value2))\n    # print(replace_values(value3))\n    \n    \n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values(value1))\n    # print(replace_values(value2))\n    # print(replace_values(value3))\n    \n    \n    \ndef extract_values2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values2(value1))\n    # print(extract_values2(value2))\n    # print(extract_values2(value3))\n    \n    regex = re.compile(r\"(.*?)\\\"(.*?)\\\"(.*)\")\n    \n    result = regex.findall(text)\n    \n    print(result)\n    \n    \n    # Replace the values in the list with new values\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values2(value1))\n    # print(extract_values2(value2))\n    # print(extract_values2(value3))\n    \n    \n    \ndef replace_values2(text):\n    '''\n    Write a function to replace values in a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values2(value1))\n    # print(replace_values2(value2))\n    # print(replace_values2(value3))\n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values2(value1))\n    # print(replace_values2(value2))\n    # print(replace_values2(value3))\n    \n    \n    \n    # Another example\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(replace_values2(value1))\n    # print(replace_values2(value2))\n    # print(replace_values2(value3))\n    \n    \n    \ndef extract_values3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values3(value1))\n    # print(extract_values3(value2))\n    # print(extract_values3(value3))\n    \n    regex = re.compile(r\"(.*?)\\\"(.*?)\\\"(.*)\")\n    \n    result = regex.findall(text)\n    \n    print(result)\n    \n    \n    # Replace the values in the list with new values\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value3 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # print(extract_values3(value1))\n    # print(extract_values3(value2))\n    # print(extract_values3(value3))\n    \n    \n    \ndef replace_values3(text):\n    '''\n    Write a function to replace values in a string.\n    '''\n    # sample text\n    # value1 = \"The colour of this quote is 'blue' and the author is John Smith.\"\n    # value2 = \"The colour of this quote is 'blue' an"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter \n    s = 0\n    counter = Counter(arr)\n    for i in range(0, n-1):\n        if arr[i] > arr[i+1]:\n            s += counter[arr[i+1]]\n    return s \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your solution here\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    if n == 1: \n        return 0\n    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    count = 0\n    for i in arr:\n        if freq[i] == 1:\n            continue\n        else:\n            count += (freq[i] - 1) * (freq[i] - 2) // 2\n            count += freq[i] // 2\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    def get(arr,n,i):\n        if i==n-1:\n            return 1\n        else:\n            return get(arr,n,i+1) + get(arr,n,i+1)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr=sorted(arr)\n    count=0\n    i=0\n    j=1\n    while j<n:\n        if(arr[i]==arr[j]):\n            count=count+1\n            j+=1\n        else:\n            i+=1\n            j+=1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from itertools import combinations\n    pairs=0\n    for i in combinations(arr,2):\n        if (abs(i[0]-i[1])) in arr:\n            pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count +1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict1 = {}\n    for i in arr:\n        if i in dict1:\n            dict1[i] = dict1[i] + 1\n        else:\n            dict1[i] = 1\n    for i in arr:\n        if dict1[i] % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \n    \n    \n    \ndef extract_int(url):\n    '''\n    Write a python function to extract the integer from a given string.\n    '''\n    return int(url.split(\"=\")[-1])\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code here\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialise result to 0\n    result = 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        n = -n\n        return -sum_digits(n)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #count = 0\n    #while n!= 0:\n    #    count = count + n % 10\n    #    n = n // 10\n    #return count\n    \n    #answer = 0\n    #while n > 0:\n    #    answer = answer + n % 10\n    #    n = n // 10\n    #return answer\n    \n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n    \n        \n        \ndef main():\n    print(sum_digits(37))\n    print(sum_digits(100))\n    print(sum_digits(247))\n    print(sum_digits(79))\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n = -n\n        if n % 10 >= 5:\n            return 1\n        else:\n            return 0\n    else:\n        if n % 10 >= 5:\n            return n % 10 + sum_digits(n // 10)\n        else:\n            return sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    size = len(list1)\n    if size <= 1:\n        return True\n    else:\n        for i in range(size-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    flag = False\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            flag = False\n            break\n        else:\n            flag = True\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low < high:\n        if list1[low] < list1[high]:\n            low += 1\n        else:\n            return False\n    return True\n    \ndef search(list1, item):\n    '''\n    Write a function to search an item in the list\n    '''\n    if len(list1) == 0:\n        return False\n    if item < list1[0]:\n        return False\n    low = 0\n    high = len(list1) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if item == list1[mid]:\n            return True\n        elif item > list1[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n    \ndef binary_search(list1, item):\n    '''\n    Write a function to perform binary search on a sorted list. Return the index of the item if found, otherwise return None.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if item == list1[mid]:\n            return mid\n        elif item > list1[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\n    \ndef search_rec(list1, item, low=0, high=None):\n    '''\n    Write a function to search an item in the list, with the given low and high range.\n    '''\n    if high is None:\n        high = len(list1) - 1\n        \n    if low > high:\n        return None\n        \n    mid = (low + high) // 2\n    \n    if item == list1[mid]:\n        return mid\n    elif item > list1[mid]:\n        return search_rec(list1, item, mid + 1, high)\n    else:\n        return search_rec(list1, item, low, mid - 1)\n    \ndef binary_search_rec(list1, item, low=0, high=None):\n    '''\n    Write a function to perform binary search on a sorted list. Return the index of the item if found, otherwise return None.\n    '''\n    if high is None:\n        high = len(list1) - 1\n        \n    if low > high:\n        return None\n        \n    mid = (low + high) // 2\n    \n    if item == list1[mid]:\n        return mid\n    elif item > list1[mid]:\n        return binary_search_rec(list1, item, mid + 1, high)\n    else:\n        return binary_search_rec(list1, item, low, mid - 1)\n    \ndef random_search(list1, item):\n    '''\n    Write a function to search an item in the list, with the given low and high range.\n    '''\n    list1_size = len(list1)\n    return search_rec(list1, item, low=0, high=list1_size - 1)\n    \ndef random_search_rec(list1, item, low=0, high=None):\n    '''\n    Write a function to perform random search on a sorted list. Return the index of the item if found, otherwise return None.\n    '''\n    list1_size = len(list1)\n    if high is None:\n        high = list1_size - 1\n        \n    if low > high:\n        return None\n        \n    mid = (low + high) // 2\n    \n    if item == list1[mid]:\n        return mid\n    elif item > list1[mid]:\n        return random_search_rec(list1, item, mid + 1, high)\n    else:\n        return random_search_rec(list1, item, low, mid - 1)\n    \ndef linear_search(list1, item):\n    '''\n    Write a function to search an item in the list, with the given low and high range.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == item:\n            return i\n    return None\n    \ndef linear_search_rec(list1, item, low=0, high=None):\n    '''\n    Write a function to perform linear search on a sorted list. Return the index of the item if found, otherwise return None.\n    '''\n    if high is None:\n        high = len(list1) - 1\n        \n    if low > high:\n        return None\n        \n    mid = (low + high) // 2\n    \n    if item == list1[mid]:\n        return mid\n    elif item > list1[mid]:\n        return linear_search_rec(list1, item, mid + 1, high)\n    else:\n        return linear_search_rec(list1, item, low, mid - 1)\n    \ndef load_array(filename):\n    '''\n    Read an array from a file. Return a list.\n    '''\n    f = open(filename, 'r')\n    list1 = []\n    for line in f:\n        list1.append(int(line))\n    f.close()\n    return list1\n    \ndef sorted_array(list1):\n    '''\n    Write a function to check whether a given array is sorted or not.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low < high:\n        if list1[low] < list1[high]:\n            low += 1\n        else:\n            return False\n    return True\n    \ndef reverse_array(list1):\n    '''\n    Write a function to reverse the given array.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low < high:\n        list1[low], list1[high] = list1[high], list1[low]\n        low += 1\n        high -= 1\n    return list1\n    \ndef rotate_array(list1):\n    '''\n    Write a function to rotate an array.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low < high:\n        list1[low], list1[high] = list1[high], list1[low]\n        low += 1\n        high -= 1\n    return list1\n    \ndef print_array(list1):\n    '''\n    Write a function to print an array.\n    '''\n    print('[', end='')\n    for i in range(len(list1)):\n        if i == len(list1) - 1:\n            print(list1[i], end='')\n        else:\n            print(list1[i], end=', ')\n    print(']')\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    low = 0\n    high = len(list1) - 1\n    \n    while low < high:\n        if list1[low] == list1[high]:\n            high -= 1\n        else:\n            low += 1\n            list1[low], list1[high] = list1[high], list1[low]\n    return list1\n    \ndef combination(list1, count):\n    '''\n    Write a function to print all combinations of items in an array.\n    '''\n    result = []\n    if count == 1:\n        for i in range(len(list1)):\n            result.append(list1[i])\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i == j:\n                    continue\n                result.append(list1[i])\n                result.append(list1[j])\n    return result\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    low = 2\n    high = n // 2\n    \n    while low < high:\n        if n % low == 0:\n            return False\n        low += 1\n    return True\n    \ndef prime_factor(num):\n    '''\n    Write a function to find prime factorization of a given number.\n    '''\n    prime_factor = []\n    while num!= 1:"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check whether the list is sorted\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    new_list = sorted(list1)\n    if new_list == list1:\n        return \"The List is sorted\"\n    else:\n        return \"The List is not sorted\"\n    \nif __name__ == \"__main__\":\n    list1 = input(\"Enter the list\")\n    print(issort_list(list1))\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n=len(list1)\n    i=1\n    while(i<=n-1):\n        if(list1[i]<list1[i-1]):\n            return False\n        i+=1\n    return True\n    \nprint(issort_list([3,4,5,6]))\nprint(issort_list([6,5,4,3]))\nprint(issort_list([2,3,4,5]))\nprint(issort_list([1,2,3,4]))\nprint(issort_list([5,4,3,2]))\nprint(issort_list([2,3,4,5,6]))\nprint(issort_list([2,3,4,5,6,1]))\nprint(issort_list([2,3,4,5,6,1,2]))\nprint(issort_list([2,3,4,5,6,1,2,3]))\nprint(issort_list([2,3,4,5,6,1,2,3,4]))\nprint(issort_list([2,3,4,5,6,1,2,3,4,5]))\nprint(issort_list([2,3,4,5,6,1,2,3,4,5,6]))\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    \n    # If all items are sorted and no duplicates\n    if len(list1) == len(set(list1)) and all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        print('true')\n    else:\n        print('false')\n    \n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({\"first_name\": None, \"last_name\": None})\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(0,length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in list1:\n        sublist.sort()\n    \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1) - 1):\n            if list1[j] > list1[j+1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_helper(list1,i):\n        list1.sort()\n        print(list1)\n        \n        if len(list1[i]) > 1:\n            list1[i]=sorted(list1[i])\n            \n    sort_helper(list1,0)\n    sort_helper(list1,1)\n    sort_helper(list1,2)\n    sort_helper(list1,3)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in range(0, len(list1)):\n        list1[x].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_func(sublist):\n        return sorted(sublist)\n    return [sort_func(sublist) for sublist in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    x = set(nums)\n    print(\"There are {} unique numbers in the list\".format(len(x)))\n    return x\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) == 0:\n        return None\n    nums_set = set(nums)\n    nums_set = list(nums_set)\n    if len(nums_set) == len(nums):\n        return nums_set\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Write your code here\n    newList = []\n    for i in range(len(nums)):\n        if nums[i] not in newList:\n            newList.append(nums[i])\n    return newList\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    num_set = set(nums)\n    return list(num_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    return list(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    \n    for num in nums:\n        if num not in nums_set:\n            nums_set.add(num)\n    \n    return list(nums_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num not in nums_set:\n            nums_set.add(num)\n    return nums_set\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        temp = set(i)\n        if len(temp) == len(i):\n            print(\"duplicates in list \" + str(i))\n            continue\n        else:\n            print(\"unique numbers in list \" + str(i))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    count = {}\n    for num in nums:\n        count[num] = count.get(num,0) + 1\n        if count[num] > 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n):\n            if nums[i] == nums[j] and i!= j:\n                nums[i] = -1\n                break\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Nested for loop to find the unique numbers\n    # product_list = []\n    # for i in range(len(list_data)):\n    #     for j in range(len(list_data)):\n    #         if i!= j:\n    #             product_list.append(list_data[i]*list_data[j])\n    # return len(set(product_list))\n    return reduce((lambda x, y: x*y), list(set(list_data)))\n    # return product(list_data)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    if len(list_data) == 0:\n        return 1\n    elif len(list_data) == 1:\n        return list_data[0]\n    else:\n        for x in list_data:\n            if x not in unique:\n                unique.append(x)\n        prod = 1\n        for x in unique:\n            prod = prod * x\n        return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    final_list = []\n    for number in list_data:\n        if number not in final_list:\n            final_list.append(number)\n    return(product(final_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return(len(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    unique_nums = set(list_data)\n    for num in unique_nums:\n        prod = prod * num\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 1\n    else:\n        return 1 if len(set(list_data)) == 1 else product(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create an empty set and iterate over the list\n    unique_numbers = set()\n    for i in list_data:\n        unique_numbers.add(i)\n    product = 1\n    for i in unique_numbers:\n        product = product * i\n    print('Product of Unique numbers in given list is: ', product)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 1\n    if len(list_data) == 1:\n        return list_data[0]\n    return list_data[0] * unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # write your code here\n    dict1=dict()\n    # for i in range(len(list_data)):\n    #     if list_data[i] in dict1:\n    #         dict1[list_data[i]]+=1\n    #     else:\n    #         dict1[list_data[i]]=1\n    for i in list_data:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    for i in list_data:\n        if dict1[i]==1:\n            print(i,end=\" \")\n    print()\n    print(dict1)\n    print(dict1.values())\n    print(dict1.keys())\n    \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(dict.fromkeys(list_data))\n    print(list_data)\n    product = 1\n    for i in range(len(list_data)):\n        product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = 3.1415\n    return A*r**2 + 2*A*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r == 0 or h == 0:\n        return 0\n    else:\n        return 2 * pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r * r * pi * 2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 3.14*r*r\n    return surface_area\n    \nprint(surfacearea_cylinder(5,6))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = pi * r * r + pi * r * 2 * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    volume = pi * r**2 * h\n    surface = 2 * pi * r * h\n    print(volume)\n    print(surface)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*pi*r*h + 2*pi*r**2\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # given an array A and another array B,\n    # check whether every element of A is also present in the array B\n    # or not.\n    # if there is no such element, then return False.\n    # otherwise return True.\n    # for example, if A = {1,2,3} and B = {2,3,4} then return True\n    # else return False.\n    # for more info, see the example provided below.\n    \n    # initialize an empty list \n    list1 = []\n    # make a for loop to check every element of A \n    for i in A:\n        # check whether each element of A is in B or not.\n        # if it is, then append the element to list1\n        if i in B:\n            list1.append(i)\n    \n    # if list1 is empty, return False\n    if len(list1) == 0:\n        return False\n    # else return True\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    start = 0\n    end = 0\n    for i in range(0,len(A)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                end = j+1\n                break\n        if end!= 0:\n            break\n    for i in range(0,len(B)):\n        for j in range(0,len(A)):\n            if A[j] == B[i]:\n                start = j+1\n                break\n        if start!= 0:\n            break\n    if (end-start) == len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    if len(B) >= n:\n        if n == len(set(B).difference(set(A))):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print(\"list A is\", A)\n    print(\"list B is\", B)\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i] in B:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return not any(B for B in A if A <= B)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # TC = O(n) and SC = O(1)\n    n = len(A)\n    m = len(B)\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:]!= B[i:]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    S1 = sorted(A)\n    S2 = sorted(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if i>=0 and i<len(B):\n            if A[i]!=B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    found = False\n    for i in range(len(A)):\n        if len(A)-1 == i:\n            if A[i] == B:\n                found = True\n    return found\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n%10 * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # The last digit of a factorial is the one which is multiplied in the number\n    # until it reaches the given number.\n    if n <= 1:\n        return n\n    else:\n        return (n % 10) * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    i = n \n    while i > 0: \n        fact = fact * i \n        i = i - 1\n    fact = int(fact)\n    return fact % 10\n    \n    \n    \ndef get_Fibonacci_Sequence_0_1_2(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 0\n    second_element = 1\n    third_element = 0\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_0_1_3(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 0\n    second_element = 1\n    third_element = 0\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_2_3_5(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 2\n    second_element = 3\n    third_element = 5\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_3_5_7(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 3\n    second_element = 5\n    third_element = 7\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_7_8_11(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 7\n    second_element = 8\n    third_element = 11\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_11_13_17(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 11\n    second_element = 13\n    third_element = 17\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_17_19_21(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 17\n    second_element = 19\n    third_element = 21\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_21_23_25(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 21\n    second_element = 23\n    third_element = 25\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_25_27_29(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 25\n    second_element = 27\n    third_element = 29\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_29_31_33(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 29\n    second_element = 31\n    third_element = 33\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_33_35_37(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 33\n    second_element = 35\n    third_element = 37\n    i = 0\n    while i < n: \n        if i == 0: \n            print(first_element) \n        elif i == 1: \n            print(second_element) \n        else: \n            sum = third_element + second_element \n            third_element = second_element \n            second_element = sum \n            i = i + 1\n            print(sum)\n            \n    return\n    \n    \ndef get_Fibonacci_Sequence_37_39_41(n): \n    '''\n    Write a python function to get Fibonacci sequence from zero to n.\n    '''\n    first_element = 37\n    second_element = 39\n    thir"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n > 0:\n        return n % 10\n    elif n == 0:\n        return 0\n    else:\n        return 0\n    \nprint(last_Digit_Factorial(123))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=10\n    return x%10\n    \ndef last_Digit_Exponent(n,b): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    return x%10\n    \ndef factorial_Digit_Exponent(n,b): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    return x%10\n    \ndef reverse_last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=10\n    x=x//10\n    return x%10\n    \ndef reverse_last_Digit_Exponent(n,b): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    return x%10\n    \ndef reverse_factorial_Digit_Exponent(n,b): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=1\n    while x<=n:\n        x*=10\n    x=x//10\n    return x%10\n    \ndef is_Palindrome(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*10+x%10\n        x=x//10\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef is_Palindrome_Fact(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*10+x%10\n        x=x//10\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef is_Palindrome_Exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*b+x%b\n        x=x//b\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef palindrome_factorial(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=10\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef palindrome_exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n    \ndef is_pallindrome_exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n    \ndef is_Pallindrome_Fact(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*10+x%10\n        x=x//10\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef palindrome_factorial(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=10\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef Palindrome_Exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n    \ndef Palindrome_Fact(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*10+x%10\n        x=x//10\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef Palindrome_Exponent_fact(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef is_Pallindrome_Exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef Pallindrome_Exponent(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef Pallindrome_Fact(n): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=n\n    reverse=0\n    while x>0:\n        reverse=reverse*10+x%10\n        x=x//10\n    if reverse==n:\n        return True\n    else:\n        return False\n        \ndef Pallindrome_Exponent_fact(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef is_Pallindrome_Exponent_fact(n,b): \n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    x=1\n    while x<=n:\n        x*=b\n    x=x//10\n    y=1\n    while x>0:\n        y*=10\n        x%=10\n    return y==x\n        \ndef Pallindrome_Exponent_fact(n,b): \n    '"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n<10):\n        return(1)\n    else:\n        temp = n\n        tot = 0\n        while(temp):\n            tot = tot+ (temp%10)*(10**(len(str(n))-1))\n            temp = temp//10\n        return(tot%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return False\n    elif n==0:\n        return 1\n    else:\n        fact=1\n        while n>1:\n            fact=fact*(n%10)\n            n=n//10\n        return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while(n):\n        fact *= n\n        n -= 1\n    return fact%10\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    j=0\n    k=0\n    m=0\n    out=[]\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<=list2[j]<=list3[k]:\n            out.append(list1[i])\n            i+=1\n        elif list1[i]<=list3[k]<=list2[j]:\n            out.append(list2[j])\n            j+=1\n        else:\n            out.append(list3[k])\n            k+=1\n    while i<len(list1):\n        out.append(list1[i])\n        i+=1\n    while j<len(list2):\n        out.append(list2[j])\n        j+=1\n    while k<len(list3):\n        out.append(list3[k])\n        k+=1\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1 = len(list1)\n    l2 = len(list2)\n    l3 = len(list3)\n    l = l1+l2+l3\n    new_list = []\n    for i in range(l):\n        if i < l1:\n            new_list.append(list1[i])\n        elif i-l1 < l2:\n            new_list.append(list2[i-l1])\n        elif i-l1-l2 < l3:\n            new_list.append(list3[i-l1-l2])\n        else:\n            pass\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(0,len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list1[i])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #Initializing variables\n    list1_length = len(list1)\n    list2_length = len(list2)\n    list3_length = len(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1)==len(list2)==len(list3)\n    interleaved_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            interleaved_list.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            interleaved_list.append(list2[j])\n            j += 1\n        elif list3[k] < list1[i] and list3[k] < list2[j]:\n            interleaved_list.append(list3[k])\n            k += 1\n    while i < len(list1):\n        interleaved_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        interleaved_list.append(list2[j])\n        j += 1\n    while k < len(list3):\n        interleaved_list.append(list3[k])\n        k += 1\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #interleaving the lists is easy\n    #convert list1 into a list of lists\n    #take the items of list1 and convert them into a list of lists\n    #then take the items of list2 and convert them into a list of lists\n    #then take the items of list3 and convert them into a list of lists\n    #then combine these lists into a single list and return the result\n    #use the interleave() method of list\n    #you could also use the '+' operator\n    #OR\n    #make a new list and add the items of each list into the new list (using '+')\n    #then return the new list\n    \n    #declare a new list\n    new_list = []\n    \n    #convert the lists into a list of lists\n    list1 = list(list1)\n    list2 = list(list2)\n    list3 = list(list3)\n    \n    #take the items of list1 and convert them into a list of lists\n    new_list.extend(list1)\n    \n    #take the items of list2 and convert them into a list of lists\n    new_list.extend(list2)\n    \n    #take the items of list3 and convert them into a list of lists\n    new_list.extend(list3)\n    \n    #combine these lists into a single list and return the result\n    return new_list\n    \nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nlist3 = [9,10,11,12]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Counts the number of dissimilar elements in the given two tuples.\n    count_dissimilar = 0\n    # Two counters for each of the sets to use for counting elements.\n    set_counts = [0] * 3\n    tup_counts = [0] * 3\n    # Sets to store the different element counts\n    difference_set = set()\n    for item in range(3):\n        # If the count is not 0, add the element to the different set.\n        if tup_counts[item] > 0:\n            difference_set.add(item)\n        # If the count is 0, the element is not in the current set, so add it to the set.\n        else:\n            set_counts[item] += 1\n            difference_set.add(item)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1) ^ set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_ele = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_ele.append(test_tup1[i])\n    return diss_ele\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    d4 = {}\n    for i in test_tup1:\n        d1[i] = d1.get(i, 0) + 1\n    for i in test_tup2:\n        d2[i] = d2.get(i, 0) + 1\n    for i in test_tup1:\n        d3[i] = d3.get(i, 0) + 1\n    for i in test_tup2:\n        d4[i] = d4.get(i, 0) + 1\n    res = []\n    for i in d1:\n        if i in d2:\n            res.append((i, d1[i] + d2[i] - 1))\n        if i in d3:\n            res.append((i, d1[i] + d3[i] - 1))\n        if i in d4:\n            res.append((i, d1[i] + d4[i] - 1))\n    res.sort(key=lambda x: (-x[1], x[0]))\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    temp_dict = {}\n    for x in test_tup1:\n        temp_dict[x] = test_tup2.count(x)\n    for x in test_tup2:\n        if temp_dict.get(x) == 0:\n            temp_dict[x] = test_tup2.count(x)\n    for x in temp_dict.keys():\n        if temp_dict[x] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).difference(test_tup2) | set(test_tup2).difference(test_tup1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    first_set = set(test_tup1)\n    second_set = set(test_tup2)\n    result = first_set.symmetric_difference(second_set)\n    print(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result_set = []\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_set.append(i)\n    return result_set\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven_elem(test_tuple, even_fnc):\n        for i in range(0, len(test_tuple), 2):\n            if test_tuple[i]%2 == 0:\n                even_fnc(test_tuple[i], test_tuple[i+1])\n                return test_tuple\n    return remove_uneven_elem(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #print(test_tuple)\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if type(test_tuple[i]) is tuple:\n                for j in range(len(test_tuple[i])):\n                    if type(test_tuple[i][j]) is tuple:\n                        even_ele(test_tuple[i][j], even_fnc)\n                    else:\n                        if test_tuple[i][j] % 2 == 0:\n                            even_fnc(test_tuple[i][j])\n            else:\n                if test_tuple[i] % 2 == 0:\n                    even_fnc(test_tuple[i])\n    else:\n        return\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(\"Original tuple: \", test_tuple) \n    for item in test_tuple: \n        if type(item) == tuple: \n            even_ele(item, even_fnc) \n        elif even_fnc(item): \n            pass \n        else: \n            print(item) \n    print(\"\") \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_ele(element, even_fnc)\n        else:\n            if even_fnc(element):\n                test_tuple = test_tuple[test_tuple.index(element):]\n                break\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # a function to check if the element is an even element\n    def is_even(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    while any(test_tuple):\n        l = len(test_tuple)\n        for i in range(l):\n            if i%2!= 0:\n                test_tuple = test_tuple[:i] + test_tuple[i+1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for x in test_tuple:\n        if x % 2 == 0:\n            result.append(x)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = () \n    if type(test_tuple) == tuple: \n        for i in range(len(test_tuple)): \n            if type(test_tuple[i]) == tuple: \n                for j in range(len(test_tuple[i])): \n                    if type(test_tuple[i][j]) == tuple: \n                        for k in range(len(test_tuple[i][j])): \n                            if even_fnc(test_tuple[i][j][k]): \n                                new_tuple = new_tuple + test_tuple[i][j][k] \n                            else: \n                                new_tuple = new_tuple + (test_tuple[i][j][k],) \n                    else: \n                        new_tuple = new_tuple + (test_tuple[i][j],) \n            else: \n                new_tuple = new_tuple + (test_tuple[i],) \n        return new_tuple \n    else: \n        raise TypeError(\"Test tuple is not a tuple\") \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) <= 1: \n        return test_tuple\n    else: \n        return even_ele(test_tuple[1:], even_fnc)\n        \ntest_tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = 2*s + s*(s-2)\n    print(f'The surface area of the pyramid is {A}')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # \n    # Python program to find the surface area of a square pyramid\n    # \n    area = (s*(s-b)*0.5)\n    print(area)\n    \n    # Enter the base and height\n    b = int(input(\"Enter the base of the pyramid: \"))\n    s = int(input(\"Enter the height of the pyramid: \"))\n    \n    # Calling surface_Area function\n    surface_Area(b,s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = s\n    b = b\n    area = (b*h)/2\n    return area\ndef pyramid_area(height,base):\n    '''\n    Write a python function to calculate the area of a pyramid with given base and height.\n    '''\n    area = height*base\n    return area\ndef fib_series(n):\n    '''\n    Write a python function to calculate the nth value in fibonacci series.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return fib_series(n-1)+fib_series(n-2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def area(b,h):\n        return b*h\n    if b==0:\n        print(\"Invalid Input\")\n        return\n    else:\n        return area(b,s)\ns1=int(input(\"Enter Base Edge Of The Pyramid\"))\nh1=int(input(\"Enter Height Of The Pyramid\"))\nprint(\"Surface Area Of The Pyramid\",surface_Area(s1,h1))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #initialize surface area as 0\n    surfaceArea = 0\n    #If base and height are given, calculate the area\n    if b>0 and s>0: \n        surfaceArea = b * s * 2\n    #If base and height are not given, print an error message\n    else: \n        print('Error: Invalid input for base and height.')\n    #print the surface area\n    print('The surface area is', surfaceArea,'square units.')"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((s*s)/4)*2 + b*b\n    \nb = int(input('enter the base length:'))\nh = int(input('enter the height:'))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (0.5*b*s*s) + (0.5*b*s*s) + (0.5*b*s*s) + (0.5*b*s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) * s\n    return area \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #surface area of a square pyramid = 2*sqrt(base * height)\n    #use pythagoras theorem to find surface area\n    surfaceArea = b*s*(s+b)\n    return surfaceArea\n    \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 0\n    base = b\n    side = s\n    surface_area = base * side\n    return surface_area\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print('The dictionary is not empty.')\n    else:\n        print('The dictionary is empty.')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    empty_dict = False\n    if len(dict1) == 0:\n        empty_dict = True\n    return empty_dict\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n    "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(1, num):\n        result = result * (num - i) * i // (i + 1)\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base cases\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    # recursive case\n    return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = [0] * (num + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, num + 1):\n        res[i] = 0\n        for j in range(i):\n            res[i] += res[j] * res[i - j - 1]\n    return res[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 2:\n        return 2\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2) * 2\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num==0 or num==1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    res = 0\n    for i in range(1, num + 1):\n        res += (catalan_number(i - 1) * catalan_number(num - i))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 0\n    for i in range(1, num+1):\n        total += (fraction.Fraction(0, 1))**i/(fraction.Fraction(0, 1))**(2*i)\n    return total\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # if n == 0:\n    #     return 1\n    # else:\n    #     return sum([(n + 1)*i for i in range(n,0,-1)])/n\n    a = 1\n    for i in range(num):\n        a = a * (i + 1)\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = []\n    for i in range(1,num+1):\n        catalan_numbers.append(0)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i in range(2,num+1):\n        for j in range(i):\n            catalan_numbers[i] += catalan_numbers[j]*catalan_numbers[i-j-1]\n    return catalan_numbers[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 0\n    if num == 1 or num == 2:\n        return 1\n    else:\n        nth = 0\n        for i in range(0, num):\n            nth += catalan_number(i)*catalan_number(num-i-1)\n        return nth\n    "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern=r\"(ly*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_past_tense_verbs(text):\n    '''\n    Write a function to find the first past-tense verb ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_past_tense_nouns(text):\n    '''\n    Write a function to find the first past-tense noun ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_present_tense_nouns(text):\n    '''\n    Write a function to find the first present-tense noun ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_present_tense_nouns(text):\n    '''\n    Write a function to find the first present-tense noun ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_tense_nouns(text):\n    '''\n    Write a function to find all past-tense nouns ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_tense_verbs(text):\n    '''\n    Write a function to find all past-tense verbs ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_tense_adjectives(text):\n    '''\n    Write a function to find all past-tense adjectives ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_tense_adverbs(text):\n    '''\n    Write a function to find all past-tense adverbs ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_adjectives(text):\n    '''\n    Write a function to find all present-tense adjectives ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_adjectives(text):\n    '''\n    Write a function to find all present-tense adjectives ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_nouns(text):\n    '''\n    Write a function to find all present-tense nouns ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_nouns(text):\n    '''\n    Write a function to find all present-tense nouns ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_verbs(text):\n    '''\n    Write a function to find all present-tense verbs ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_nouns(text):\n    '''\n    Write a function to find all present-tense nouns ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text)\n    new_list=[]\n    new_list2=[]\n    for i in results:\n        new_list.append(i.start())\n        new_list2.append(i.start()+1)\n    return new_list,new_list2\ndef find_all_present_tense_adjectives(text):\n    '''\n    Write a function to find all present-tense adjectives ending with -ed and its positions in a given string.\n    '''\n    pattern=r\"(ed*)\"\n    results=re.finditer(pattern,text"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"(ly[^\\d\\s]+|[\\s]+ly[^\\d\\s]+|[\\s]+ly)\"\n    pattern = r\"(ly[^\\d\\s]+|[\\s]+ly[^\\d\\s]+|[\\s]+ly)\"\n    pattern = r\"ly[^\\d\\s]+|[\\s]+ly[^\\d\\s]+|[\\s]+ly\"\n    found = re.findall(pattern, text)\n    return found\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # TODO: Write your code here\n    text = text.lower()\n    \n    # First, find all adverbs ending in ly.\n    ly_adverbs = re.findall(r'ly|re|ve|n\\'t|n\\'ve|n\\'d|n\\'ll', text)\n    # Second, find all adverbs ending in ly and filter out any that are not\n    # in the first_adverbs list.\n    filter_first_adverbs = list(filter(lambda adverb: adverb in ly_adverbs, first_adverbs))\n    # Third, find the last instance of the adverb in ly_adverbs, and\n    # subtract ly_adverbs.count() from len(text).\n    return filter_first_adverbs, text.count(filter_first_adverbs[-1]) - len(filter_first_adverbs)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    text = text.lower()\n    \n    if 'ly' in text:\n        n = re.findall('ly',text)\n        for i in n:\n            print(i)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    ad_verb_list = []\n    for token in wordnet.synsets(\"adverb\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                ad_verb_list.append(token)\n    return ad_verb_list\ndef find_participle(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    participle_list = []\n    for token in wordnet.synsets(\"participle\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                participle_list.append(token)\n    return participle_list\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    noun_list = []\n    for token in wordnet.synsets(\"noun\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                noun_list.append(token)\n    return noun_list\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    verb_list = []\n    for token in wordnet.synsets(\"verb\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                verb_list.append(token)\n    return verb_list\ndef find_adjective(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_list = []\n    for token in wordnet.synsets(\"adjective\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                adjective_list.append(token)\n    return adjective_list\ndef find_propernoun(text):\n    '''\n    Write a function to find the first proper noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    propernoun_list = []\n    for token in wordnet.synsets(\"propernoun\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                propernoun_list.append(token)\n    return propernoun_list\ndef find_names(text):\n    '''\n    Write a function to find the first proper noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    names_list = []\n    for token in wordnet.synsets(\"name\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                names_list.append(token)\n    return names_list\ndef find_adjective_adverb(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_adverb_list = []\n    for token in wordnet.synsets(\"adjective\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                adjective_adverb_list.append(token)\n    return adjective_adverb_list\ndef find_noun_adjective(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    noun_adjective_list = []\n    for token in wordnet.synsets(\"noun\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                noun_adjective_list.append(token)\n    return noun_adjective_list\ndef find_verb_noun(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    verb_noun_list = []\n    for token in wordnet.synsets(\"verb\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                verb_noun_list.append(token)\n    return verb_noun_list\ndef find_adjective_adjective(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_adjective_list = []\n    for token in wordnet.synsets(\"adjective\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                adjective_adjective_list.append(token)\n    return adjective_adjective_list\ndef find_noun_adjective_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    noun_adjective_noun_list = []\n    for token in wordnet.synsets(\"noun\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                noun_adjective_noun_list.append(token)\n    return noun_adjective_noun_list\ndef find_propernoun_adjective_noun(text):\n    '''\n    Write a function to find the first proper noun ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    propernoun_adjective_noun_list = []\n    for token in wordnet.synsets(\"propernoun\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                propernoun_adjective_noun_list.append(token)\n    return propernoun_adjective_noun_list\ndef find_adjective_noun(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_noun_list = []\n    for token in wordnet.synsets(\"adjective\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                adjective_noun_list.append(token)\n    return adjective_noun_list\ndef find_adjective_noun_noun(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_noun_noun_list = []\n    for token in wordnet.synsets(\"adjective\"):\n        for l in token.lemmas():\n            if (l.name().lower() == \"ly\"):\n                adjective_noun_noun_list.append(token)\n    return adjective_noun_noun_list\ndef find_adjective_noun_noun_noun(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import wordnet\n    adjective_noun_noun_noun_list = []\n    for token in wor"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = []\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            pos.append(i)\n    return pos\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    words = text.split()\n    for i in range(len(words)):\n        if words[i] == 'ly' and words[i+1][-2:] == 'ing':\n            result.append(words[i])\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    reg = re.compile(r'\\bly\\b')\n    reg2 = re.compile(r'\\blyly\\b')\n    matches = reg.finditer(text)\n    matches2 = reg2.finditer(text)\n    adverbs = [match.span() for match in matches]\n    adverbs2 = [match.span() for match in matches2]\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # print(re.findall(r'[A-Z]{3,}ly$', text))\n    return re.findall(r'[A-Z]{3,}ly$', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == \" \":\n            break\n        if text[i] == \".\":\n            break\n        elif text[i] == \",\":\n            break\n        elif text[i] == \"?\":\n            break\n        elif text[i] == \"!\":\n            break\n        if text[i] == \"ly\":\n            return i\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    from heapq import heappush, heappop\n    if n==0:\n        return []\n    heap = []\n    for i in range(len(items)):\n        heappush(heap,(-items[i],i))\n    res = []\n    for i in range(n):\n        heappop(heap)\n    for i in range(len(heap)):\n        res.append(-heappop(heap)[1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a set of the prices\n    price_set = set(items)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # Create an empty heap, and insert all the items in items to the heap, and return the n top items in the heap.\n    # Heapq's \"heapify\" method will take the items in this list and convert them to a heap.\n    # The heapq.nlargest() method will take the top n items from the heap, and return them in a list.\n    #\n    # Time: O(nlogk) -- worst case, O(n) if the heap is built by traversing the list n times.\n    # Space: O(n) -- worst case, O(n) if we have to store all the items in the list (n)\n    \n    # def expensive_items(items,n):\n    #     \n    #     # Create a min heap\n    #     heap = []\n    #     for item in items:\n    #         heapq.heappush(heap, item)\n    #     \n    #     # Return the n highest items in the heap.\n    #     return heapq.nlargest(n, heap)\n    \n    # Time: O(n)\n    # Space: O(1)\n    \n    # def expensive_items(items,n):\n    #     \n    #     # Create a min heap, and return the n top items in the heap.\n    #     return heapq.nlargest(n, items)\n    \n    \n    # Time: O(nlogk)\n    # Space: O(n)\n    \n    def expensive_items(items,n):\n    \n        # Create a min heap.\n        # In a heap, we will place the highest values (largest to smallest) on the top of the heap.\n        # So, we will place the items in a min heap on the top of the heap.\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap, items[i])\n        \n        # Pop off the top item from the heap.\n        # Then, we can insert the next item in the heap, if it is more expensive.\n        top_item = heapq.heappop(heap)\n        \n        while len(heap) > 0:\n            # If the item at the top of the heap is less than the next item we have to insert, we can keep popping\n            # off the heap until the next item that is greater than the item at the top of the heap is found.\n            # The item we are looking for is the next item that is larger than the top item.\n            # \n            # If the item we are looking for is greater than the top item, then we need to insert that item into\n            # the heap.\n            next_item = heapq.heappop(heap)\n            \n            # If the next item is greater than the top item, we can insert the next item into the heap.\n            if next_item > top_item:\n                heapq.heappush(heap, next_item)\n                top_item = heapq.heappop(heap)\n        \n        # Return the top n items in the heap.\n        return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    return items[0:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # 1. Create a dictionary with the item number as key and the price as value\n    price_dict = {}\n    # 2. Sort the items in the dictionary by values\n    items.sort(key=lambda item: price_dict[item[0]])\n    # 3. Iterate through the sorted items, creating a heap\n    # 4. After creating the heap, for each element in the heap, get the item number\n    # 5. Once the heap is empty, return the top n items\n    heap = []\n    for item in items:\n        price_dict[item[0]] = item[1]\n        heapq.heappush(heap, item)\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x:x[1],reverse=True)\n    heapq.heapify(items)\n    result = []\n    for i in range(n):\n        res = heapq.heappop(items)\n        result.append(res)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    priority_q = []\n    priority_q.append([items[i],i] for i in range(n))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    costs=[]\n    for item in items:\n        costs.append((item,items[item]))\n    heapq.heapify(costs)\n    for _ in range(n):\n        item=heapq.heappop(costs)\n        print(item[0])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(-i[2],i[0],i[1]))\n    heapq.heapify(heap)\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive = {}\n    for i in range(n):\n        if items[i]>=0:\n            expensive[items[i]]=expensive.get(items[i],0)+1\n    return expensive\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return l\n    return l[:n] + l[n:][::-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    if n==len(l):\n        return l\n    else:\n        return l[:n] + split_Arr(l[n:],n)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_r = l[:n]\n    l_l = l[n:]\n    l_r.extend(l_l)\n    return l_r\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    elif len(l) == 1:\n        return l\n    else:\n        new_list = l[0:n]\n        return new_list + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a=[]\n    for i in range(0, len(l)):\n        if i!=n:\n            a.append(l[i])\n    return a+[l[n]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return (a, b)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not l or n<1:\n        return l\n    if n >= len(l):\n        return l\n    return l[:n] + l[n:][::-1]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(listx)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_1 = tuple(listx)\n    print(tuple_1)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(tuplex)\n    return tuplex\n    \ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef is_item_in_list(listx, item):\n    '''\n    Write a function to check if an item is in a list.\n    '''\n    is_item = item in listx\n    print(is_item)\n    return is_item\n    \ndef is_item_in_list2(listx, item):\n    '''\n    Write a function to check if an item is in a list.\n    '''\n    return item in listx\n    \ndef is_item_in_list3(listx, item):\n    '''\n    Write a function to check if an item is in a list.\n    '''\n    return item in listx\n    \ndef list_to_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    dictx = dict(listx)\n    print(dictx)\n    return dictx\n    \ndef dict_to_list(dictx):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return list(dictx.keys())\n    \ndef dict_to_list2(dictx):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return list(dictx.values())\n    \ndef dict_to_list3(dictx):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return list(dictx.items())\n    \ndef is_item_in_dict(dictx, item):\n    '''\n    Write a function to check if an item is in a dictionary.\n    '''\n    is_item = item in dictx\n    print(is_item)\n    return is_item\n    \ndef is_item_in_dict2(dictx, item):\n    '''\n    Write a function to check if an item is in a dictionary.\n    '''\n    return item in dictx\n    \ndef is_item_in_dict3(dictx, item):\n    '''\n    Write a function to check if an item is in a dictionary.\n    '''\n    return item in dictx\n    \ndef dict_values_to_list(dictx):\n    '''\n    Write a function to convert a dictionary to a list of values.\n    '''\n    return list(dictx.values())\n    \ndef dict_keys_to_list(dictx):\n    '''\n    Write a function to convert a dictionary to a list of keys.\n    '''\n    return list(dictx.keys())\n    \ndef dict_items_to_list(dictx):\n    '''\n    Write a function to convert a dictionary to a list of items.\n    '''\n    return list(dictx.items())\n    \ndef list_item_count(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return len(listx)\n    \ndef list_item_count2(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count\n    \ndef list_item_count3(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count\n    \ndef list_item_count4(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx)\n    \ndef list_item_count5(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return len(list(set(listx)))\n    \ndef list_item_count6(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return len(listx) - listx.count(listx)\n    \ndef list_item_count7(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return len(set(listx))\n    \ndef list_item_count8(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return len(set(listx)) - listx.count(listx)\n    \ndef list_item_count9(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0])\n    \ndef list_item_count10(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 1\n    \ndef list_item_count11(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 1\n    \ndef list_item_count12(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 2\n    \ndef list_item_count13(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 3\n    \ndef list_item_count14(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 4\n    \ndef list_item_count15(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 5\n    \ndef list_item_count16(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 6\n    \ndef list_item_count17(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 7\n    \ndef list_item_count18(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 8\n    \ndef list_item_count19(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 9\n    \ndef list_item_count20(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 10\n    \ndef list_item_count21(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 11\n    \ndef list_item_count22(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 12\n    \ndef list_item_count23(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 13\n    \ndef list_item_count24(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 14\n    \ndef list_item_count25(listx):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    return listx.count(listx[0]) - 15\n    \ndef list_item_count26(listx):\n    '''\n    Write a function to count the number of items i"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = min(nums)\n    b = max(nums)\n    return b - a\n    #return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    result = None\n    if not nums:\n        return result\n    largest_value = nums[0]\n    smallest_value = nums[0]\n    for i in nums:\n        if i > largest_value:\n            largest_value = i\n        elif i < smallest_value:\n            smallest_value = i\n    result = largest_value - smallest_value\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    res = 0\n    max_num = max(nums)\n    min_num = min(nums)\n    res = max_num - min_num\n    return res\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest-smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return (max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = nums\n    largest = max(a)\n    smallest = min(a)\n    return (largest - smallest)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #we need to find perfect squares of a and b\n    #so we need to find the range of a and b\n    #we need to find the range of a and b\n    #we need to use the range\n    #so we need to use the sqrt() function to get the square root of a\n    #now we need to check if the square root of a is an integer\n    #so we need to check if it is an integer\n    #so we need to check if its a perfect square by checking if its in the range\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(filter(lambda x: x*x == a, range(b-a+1)))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a, b+1):\n        if i * i == a and i * i == b:\n            res.append(i)\n    return res\nprint(perfect_squares(1, 100))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for n in range(a,b+1):\n        if int(sqrt(n))**2 == n:\n            print(n)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    x = []\n    for i in range(a,b+1):\n        if i**2 == i:\n            x.append(i)\n    return x\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 1:\n        return 1\n    \n    b = int(b ** 0.5)\n    for i in range(b, a):\n        if i ** 2 == a:\n            return i\n    return b ** 2\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert a > 0 and b > 0\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while(a<b):\n        while((a+b)%2==0):\n            a=a+1\n        b=b-1\n        print(a)\n    return a\nprint(perfect_squares(0,100))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = a\n    while n <= b:\n        yield n * n\n        n += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Define a list of perfect squares that are between the given numbers\n    square_numbers = []\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    theta = theta * (180/cmath.pi)\n    return theta, r\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    #print(r,theta)\n    if x==0:\n        return 0,0\n    elif x>0:\n        if r<0.5*r:\n            y1 = 1/2*r\n            y2 = 1/2*r-0.5*r\n            x1 = r\n            x2 = r+0.5*r\n            return x1,y1,x2,y2\n        elif r>0.5*r:\n            y1 = 1/2*r\n            y2 = 1/2*r-0.5*r\n            x1 = r+0.5*r\n            x2 = r\n            return x1,y1,x2,y2\n    elif x<0:\n        if r<0.5*r:\n            y1 = -1/2*r\n            y2 = -1/2*r-0.5*r\n            x1 = -r\n            x2 = -r+0.5*r\n            return x1,y1,x2,y2\n        elif r>0.5*r:\n            y1 = -1/2*r\n            y2 = -1/2*r-0.5*r\n            x1 = -r+0.5*r\n            x2 = -r\n            return x1,y1,x2,y2\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x ** 2 + y ** 2\n    t = cmath.polar(x)\n    print(\"r = %f\" % r)\n    print(\"Theta = %f\" % t[1])\ndef rect_polar(r,t):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r * cmath.cos(t)\n    y = r * cmath.sin(t)\n    print(\"x = %f\" % x)\n    print(\"y = %f\" % y)\ndef rect_circ(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_triangle(x,y,r):\n    '''\n    Write a function to calculate the area of a triangle with given length.\n    '''\n    area = 0.5*r*(x+y)\n    print(\"The area of the triangle is \",area)\ndef rect_triangle_1(x,y,r):\n    '''\n    Write a function to calculate the area of a triangle with given legnth.\n    '''\n    area = 0.5*r*(x+y)\n    print(\"The area of the triangle is \",area)\ndef rect_square(x,y,r):\n    '''\n    Write a function to calculate the area of a square with given legnth.\n    '''\n    area = r*r\n    print(\"The area of the square is \",area)\ndef rect_square_1(x,y,r):\n    '''\n    Write a function to calculate the area of a square with given length.\n    '''\n    area = r*r\n    print(\"The area of the square is \",area)\ndef rect_circle(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_1(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_2(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_3(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_4(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_5(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_6(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_7(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_8(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_9(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_10(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_11(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_12(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_13(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_14(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_15(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_16(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_17(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_18(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_19(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_20(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_21(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_22(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_23(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_24(x,y,r):\n    '''\n    Write a function to calculate the area of a circle with given radius.\n    '''\n    area = math.pi*r**2\n    print(\"The area of the circle is \",area)\ndef rect_circle_25(x,y,r):\n    '''\n    Write a function t"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (((x**2)+(y**2))**0.5)\n    angle = cmath.phase(x)\n    return (r,angle)\n    \ndef rect_polar(r,angle):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r*cmath.cos(angle)\n    y = r*cmath.sin(angle)\n    return (x,y)\n    \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x * x + y * y\n    b = 2 * x * y\n    return (round(a**0.5),round(b**0.5))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**.5\n    #print (r)\n    theta = cmath.atan(y/x)\n    #print (theta)\n    return (r, theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = (x**2 + y**2)**(1/2)\n    return (radius*cmath.cos(cmath.atan2(y,x)), radius*cmath.sin(cmath.atan2(y,x)))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x*x+y*y\n    r=cmath.sqrt(r)\n    x=r*x/r\n    y=r*y/r\n    return x,y\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if not isinstance(newList, list): \n        raise TypeError(\"please enter the list\") \n    if len(newList) < 2: \n        raise IndexError(\"list should have more than 2 elements\") \n    temp = newList[0] \n    newList[0] = newList[-1] \n    newList[-1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = newList\n    return(l[-1],l[1])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap the first and last elements in a list.\n    '''\n    l = newList\n    return(l[-1],l[1])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[-1],l[-2])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in a list.\n    '''\n    l = newList\n    return(l[1],l[0])\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap two adjacent elements in "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    first_elem = newList[0]\n    last_elem = newList[n-1]\n    newList[0] = last_elem\n    newList[n-1] = first_elem\n    print(\"Interchanged first and last elements in the list are :\", newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newLis"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)):\n        newList[i], newList[0] = newList[0], newList[i]\n        return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if n <= k:\n        for i in range(n,k+1):\n            res = res * i\n        return res\n    else:\n        for i in range(n,k-1,-1):\n            res = res * i\n        return res\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = 1\n    b = 1\n    for i in range(1,n+1):\n        a = a*(n-k+i)\n        b = b*(k+i)\n    return a/b\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (pow(i,k))/(pow(k,n))\n    return sum\n    \nn = int(input(\"Enter a positive integer number: \"))\nk = int(input(\"Enter a positive integer number: \"))\nprint(binomial_Coeff(n,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n > 0\n    # k > 0\n    c = 0\n    for i in range(n+1):\n        c = c + (1/i)\n    return c"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # In order to compute the binomial coefficient, we need to know the denominator of the binomial coefficient.\n    # The binomial coefficient can be computed as\n    #\n    #  Cn = 0\n    #  n : total number of a\n    #  k : number of times to have a\n    #\n    # In this case, we can assume that n = k + 1, since we need to compute the binomial coefficient.\n    # Therefore, if we know n, we can easily compute the binomial coefficient.\n    #\n    # Initialize the binomial coefficient: Cn\n    Cn = 1\n    \n    # For all the possible values of n:\n    for i in range(1, n + 1):\n        \n        # Compute the numerator: Nn\n        Nn = i\n        \n        # Compute the denumerator: Nk\n        Nk = k\n        \n        # Compute the binomial coefficient: Cn\n        Cn = Nn * Nk * Cn\n        \n    # Return the binomial coefficient\n    return Cn\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if k>n:\n        return 0\n    else:\n        return binomial_coeff(n,k)+binomial_coeff(n,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if k > n:\n        return 0\n    else:\n        return (n*(n-1)*binomial_Coeff(n-1,k-1))/(k*(k-1))\n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k > n): \n        return 0\n    sum = 1\n    for i in range(k): \n        sum = sum*(n-i) + sum*(i+1)\n    return sum\n    \n    \ndef factorial_sequence(n): \n    '''\n    Write a python function that generates the nth factorial sequence.\n    '''\n    result = 1\n    for i in range(1,n+1): \n        result = result*i\n    return result\n    \n    \ndef fibonacci_sequence(n): \n    '''\n    Write a python function that generates the nth Fibonacci sequence.\n    '''\n    if (n == 1): \n        return 0\n    elif (n == 2): \n        return 1\n    else: \n        return fibonacci_sequence(n-1) + fibonacci_sequence(n-2)\n    \n    \ndef fibonacci_sequence_rec(n): \n    '''\n    Write a python function that generates the nth Fibonacci sequence.\n    '''\n    if (n == 1): \n        return 0\n    elif (n == 2): \n        return 1\n    else: \n        return fibonacci_sequence_rec(n-1) + fibonacci_sequence_rec(n-2)\n    \n    \ndef nth_prime_number(n): \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    x = 2\n    while True: \n        if (is_prime(x) == True): \n            if (x == n): \n                return x\n            else: \n                x += 1\n        else: \n            x += 1\n    \n    \ndef is_prime(n): \n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if (n <= 1): \n        return False\n    for x in range(2,n): \n        if (n % x == 0): \n            return False\n    return True\n    \n    \ndef repeated_string(s, n): \n    '''\n    Write a python function to find the repeated substring of a given string.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return s\n    else: \n        for i in range(n): \n            if (s[i] == 'a'): \n                return s*(n-i)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    binomial = (1/((2*n)**0.5)) * (((2*n)**k)*(((2*n)**(n-k))/((2*n)-1)))\n    return binomial\n    \n    '''\n    sum = 0\n    for k in range(0,n+1):\n        sum += (1/((2*n)**0.5)) * (((2*n)**k)*(((2*n)**(n-k))/((2*n)-1)))\n    return sum\n    '''\n    \n    \ndef coefficient_sum(n):\n    '''\n    Write a python function to find the sum of the coefficients of the binomial polynomial.\n    '''\n    \n    c_sum = 0\n    for i in range(n+1):\n        c_sum += i\n    return c_sum\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n    '''\n    \n    \ndef power_sum(x,n):\n    '''\n    Write a python function to find the sum of the series: xn=x^n/(n!*(n-1)!)\n    '''\n    \n    return x**n / (factorial(n) * factorial(n-1))\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    else:\n        return x*power_sum(x,n-1)\n    '''\n    \n    \ndef power_sum_list(x,n):\n    '''\n    Write a python function to find the sum of the series: xn=x^n/(n!*(n-1)!)\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return x * power_sum_list(x,n-1)\n    \n    '''\n    def power_sum_list(x,n):\n        sum = 0\n        for i in range(n+1):\n            sum += x**i\n        return sum\n    '''\n    \n    \ndef exponent_sum(x,n):\n    '''\n    Write a python function to find the sum of the series: xn=xn/(n!*(n-1)!)\n    '''\n    if n == 0:\n        return 1\n    else:\n        return x*exponent_sum(x,n-1)\n    \n    '''\n    def exponent_sum(x,n):\n        sum = 1\n        for i in range(n+1):\n            sum *= x**i\n        return sum\n    '''\n    \n    \ndef exponent_sum_list(x,n):\n    '''\n    Write a python function to find the sum of the series: xn=xn/(n!*(n-1)!)\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return x * exponent_sum_list(x,n-1)\n    '''\n    def exponent_sum_list(x,n):\n        if n == 0:\n            return 1\n        else:\n            return x * exponent_sum_list(x,n-1)\n    '''\n    \n    \ndef factorial_sum(n):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    sum = 0\n    if n == 0:\n        return 1\n    else:\n        for i in range(n+1):\n            sum += i\n        return sum\n    '''\n    def factorial_sum(n):\n        sum = 0\n        if n == 0:\n            return 1\n        else:\n            for i in range(n+1):\n                sum += i\n            return sum\n    '''\n    \n    \ndef factorial_sum_list(n):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += i\n        return sum\n    '''\n    def factorial_sum_list(n):\n        if n == 0:\n            return 1\n        else:\n            for i in range(n+1):\n                sum += i\n            return sum\n    '''\n    \n    \ndef polynomial_sum(n,m):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    sum = 0\n    if n == 0:\n        return 1\n    else:\n        for i in range(n+1):\n            sum += (i**m)\n        return sum\n    '''\n    def polynomial_sum(n,m):\n        sum = 0\n        if n == 0:\n            return 1\n        else:\n            for i in range(n+1):\n                sum += (i**m)\n            return sum\n    '''\n    \n    \ndef polynomial_sum_list(n,m):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += (i**m)\n        return sum\n    '''\n    def polynomial_sum_list(n,m):\n        if n == 0:\n            return 1\n        else:\n            for i in range(n+1):\n                sum += (i**m)\n            return sum\n    '''\n    \n    \ndef sum_of_polynomial(n,m):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * ((n**m)*((n**(m-1))/((m-1)*(n-1))))\n    '''\n    def sum_of_polynomial(n,m):\n        return n * ((n**m)*((n**(m-1))/((m-1)*(n-1))))\n    '''\n    \n    \ndef sum_of_polynomial_list(n,m):\n    '''\n    Write a python function to find the sum of the series: xn=xn/n!\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * ((n**m)*((n**(m-1))/((m-1)*(n-1))))\n    '''\n    def sum_of_polynomial_list(n,m):\n        return n * ((n**m)*((n**(m-1))/((m-1)*(n-1))))\n    '''\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of the series: xn=xn^2/(n^2!*(n-1)!)\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n**2)*(n**2)*(n**2)*(n**2)\n    '''\n    def sum_of_squares(n):\n        return n*(n**2)*(n**2)*(n**2)*(n**2)\n    '''\n    \n    \ndef sum_of_squares_list(n):\n    '''\n    Write a python function to find the sum of the series: xn=xn^2/(n^2!*(n-1)!)\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n**2)*(n**2)*(n**2)*(n**2)\n    '''\n    def sum_of_squares_list(n):\n        return n*(n**2)*(n**2)*(n**2)*(n**2)\n    '''\n    \n    \ndef sum_of_squares_of_polynomial(n,m):\n    '''\n    Write a python function to find the sum of the series: x"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_coeff(n,k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        elif k == n:\n            return 1\n        else:\n            return (n-1)*binomial_coeff(n-1,k-1) + binomial_coeff(n-1,k)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=re.sub(r\"\\b0+\\b\",\"\",ip)\n    return ip\ndef remove_suffix(ip):\n    '''\n    Write a function to remove a suffix from an ip address.\n    '''\n    ip = ip.rsplit('.',1)[0]\n    return ip\ndef remove_trailing_zeros(ip):\n    '''\n    Write a function to remove trailing zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip[0] = ip[0].rstrip('0')\n    ip = '.'.join(ip)\n    return ip\ndef reverse_ip(ip):\n    '''\n    Write a function to reverse the ip address.\n    '''\n    ip = ip.split('.')\n    ip.reverse()\n    ip = '.'.join(ip)\n    return ip\ndef get_network(ip,mask):\n    '''\n    Write a function to get the network address from an ip address and a mask.\n    '''\n    net = ip.split('.')\n    if '255' in mask:\n        net[3] = int(net[3])+1\n        net = '.'.join(net)\n        return net\n    elif '0' in mask:\n        net[3] = int(net[3])-1\n        net = '.'.join(net)\n        return net\n    else:\n        n = 0\n        net = []\n        for i in ip.split('.'):\n            n = n+1\n            if int(i)>255:\n                i = int(i)-256\n            elif int(i)<0:\n                i = int(i)+256\n            net.append(str(i))\n        net = '.'.join(net)\n        return net\ndef get_host(ip,mask):\n    '''\n    Write a function to get the host address from an ip address and a mask.\n    '''\n    host = ip.split('.')\n    host[3] = int(host[3])-1\n    host = '.'.join(host)\n    return host\ndef get_broadcast(ip,mask):\n    '''\n    Write a function to get the broadcast address from an ip address and a mask.\n    '''\n    broadcast = []\n    net = ip.split('.')\n    net[3] = int(net[3])+1\n    net = '.'.join(net)\n    host = ip.split('.')\n    host[3] = int(host[3])-1\n    host = '.'.join(host)\n    broadcast = host\n    return broadcast\ndef get_prefix(ip,mask):\n    '''\n    Write a function to get the prefix address from an ip address and a mask.\n    '''\n    prefix = []\n    net = ip.split('.')\n    host = ip.split('.')\n    host[3] = int(host[3])-1\n    host = '.'.join(host)\n    broadcast = get_broadcast(host,mask)\n    for i in range(4):\n        if net[i]!= '255':\n            net[i] = int(net[i])-1\n            net[i] = '{0:04b}'.format(net[i])\n        else:\n            net[i] = int(net[i])-256\n            net[i] = '{0:04b}'.format(net[i])\n        prefix.append(net[i])\n    prefix = '.'.join(prefix)\n    return prefix\ndef get_netmask(ip,mask):\n    '''\n    Write a function to get the netmask address from an ip address and a mask.\n    '''\n    netmask = []\n    net = ip.split('.')\n    host = ip.split('.')\n    host[3] = int(host[3])-1\n    host = '.'.join(host)\n    broadcast = get_broadcast(host,mask)\n    for i in range(4):\n        if net[i]!= '255':\n            net[i] = int(net[i])+1\n            net[i] = '{0:04b}'.format(net[i])\n        else:\n            net[i] = int(net[i])+256\n            net[i] = '{0:04b}'.format(net[i])\n        netmask.append(net[i])\n    netmask = '.'.join(netmask)\n    return netmask\ndef get_wildcard(ip,mask):\n    '''\n    Write a function to get the wildcard address from an ip address and a mask.\n    '''\n    wildcard = []\n    net = ip.split('.')\n    host = ip.split('.')\n    host[3] = int(host[3])-1\n    host = '.'.join(host)\n    broadcast = get_broadcast(host,mask)\n    for i in range(4):\n        if net[i]!= '0':\n            net[i] = int(net[i])-1\n            net[i] = '{0:04b}'.format(net[i])\n        else:\n            net[i] = int(net[i])-256\n            net[i] = '{0:04b}'.format(net[i])\n        wildcard.append(net[i])\n    wildcard = '.'.join(wildcard)\n    return wildcard\ndef convert_octets(octets):\n    '''\n    Write a function to convert a list of octets into a string.\n    '''\n    octets = octets.split('.')\n    octets = '.'.join(octets)\n    return octets\ndef convert_net_addr(net_addr):\n    '''\n    Write a function to convert a ip address into a dotted-quad string.\n    '''\n    net_addr = net_addr.split('.')\n    net_addr = '.'.join(net_addr)\n    return net_addr\ndef convert_wildcard(wildcard):\n    '''\n    Write a function to convert a wildcard address into a dotted-quad string.\n    '''\n    wildcard = wildcard.split('.')\n    wildcard = '.'.join(wildcard)\n    return wildcard\ndef convert_range(ip_range):\n    '''\n    Write a function to convert a ip address range into a list.\n    '''\n    ip_range = ip_range.split('-')\n    ip_range = ip_range[0] + '-' + ip_range[1]\n    ip_range = ip_range.split('.')\n    ip_range = '.'.join(ip_range)\n    return ip_range\ndef check_valid_ip(ip):\n    '''\n    Write a function to check if an ip address is valid or not.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    else:\n        for i in range(len(ip)):\n            if int(ip[i]) > 255 or int(ip[i]) < 0:\n                return False\n        return True\ndef check_valid_ip_range(ip_range):\n    '''\n    Write a function to check if an ip address range is valid or not.\n    '''\n    ip_range = ip_range.split('-')\n    if len(ip_range)!= 2:\n        return False\n    else:\n        ip_range = ip_range[0] + '-' + ip_range[1]\n        ip_range = ip_range.split('.')\n        if len(ip_range)!= 4:\n            return False\n        else:\n            for i in range(len(ip_range)):\n                if int(ip_range[i]) > 255 or int(ip_range[i]) < 0:\n                    return False\n            return True\ndef convert_ip_range(ip_range):\n    '''\n    Write a function to convert an ip address range into a list.\n    '''\n    ip_range = ip_range.split('-')\n    ip_range = ip_range[0] + '-' + ip_range[1]\n    ip_range = ip_range.split('.')\n    ip_range = '.'.join(ip_range)\n    return ip_range\ndef check_valid_mask(mask)"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(x)) for x in ip.split('.') if x!= '0'])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp=ip.split(\".\")\n    for i in range(len(temp)):\n        if int(temp[i])<=0 or int(temp[i])>255:\n            temp[i]=\"0\"\n    ip=\".\".join(temp)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip1 = re.sub(r'\\.(?=\\d)', \"\", ip)\n    print(ip1)\nremovezero_ip(\"10.0.0.0\")\nremovezero_ip(\"10.0.0.00\")\nremovezero_ip(\"255.255.255.0\")\nremovezero_ip(\"255.255.255.00\")\nremovezero_ip(\"0.0.0.0\")\nremovezero_ip(\"0.0.0.00\")\nremovezero_ip(\"0.0.0.000\")\nremovezero_ip(\"0.0.0.000\")\nremovezero_ip(\"0.0.0.0000\")\nremovezero_ip(\"0.0.0.0000\")\nremovezero_ip(\"0.0.0000.0\")\nremovezero_ip(\"0.0.0000.00\")\nremovezero_ip(\"0.0.0000.000\")\nremovezero_ip(\"0.0.0000.0000\")\nremovezero_ip(\"0.0.0000.00000\")\nremovezero_ip(\"0.0.00000000.0\")\nremovezero_ip(\"0.0.00000000.00\")\nremovezero_ip(\"0.0.00000000.000\")\nremovezero_ip(\"0.0.00000000.0000\")\nremovezero_ip(\"0.0.00000000.00000\")\nremovezero_ip(\"0.00000000.0\")\nremovezero_ip(\"0.00000000.00\")\nremovezero_ip(\"0.00000000.000\")\nremovezero_ip(\"0.00000000.0000\")\nremovezero_ip(\"0.00000000.00000\")\nremovezero_ip(\"0.0000.0.0\")\nremovezero_ip(\"0.0000.0.00\")\nremovezero_ip(\"0.0000.0.000\")\nremovezero_ip(\"0.0000.0.0000\")\nremovezero_ip(\"0.0000.0000.0\")\nremovezero_ip(\"0.0000.0000.00\")\nremovezero_ip(\"0.0000.0000.000\")\nremovezero_ip(\"0.0000.0000.0000\")\nremovezero_ip(\"0.0000.0000.00000\")\nremovezero_ip(\"0.0000.00000000.0\")\nremovezero_ip(\"0.0000.00000000.00\")\nremovezero_ip(\"0.0000.00000000.000\")\nremovezero_ip(\"0.0000.00000000.0000\")\nremovezero_ip(\"0.0000.00000000.00000\")\nremovezero_ip(\"0.00000000.0000.0\")\nremovezero_ip(\"0.00000000.0000.00\")\nremovezero_ip(\"0.00000000.0000.000\")\nremovezero_ip(\"0.00000000.0000.0000\")\nremovezero_ip(\"0.00000000.0000.00000\")\nremovezero_ip(\"0.00000000.00000000.0\")\nremovezero_ip(\"0.00000000.00000000.00\")\nremovezero_ip(\"0.00000000.00000000.000\")\nremovezero_ip(\"0.00000000.00000000.0000\")\nremovezero_ip(\"0.00000000.00000000.00000\")\nremovezero_ip(\"0.000000000000.0\")\nremovezero_ip(\"0.000000000000.00\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.0000.0000000000.0\")\nremovezero_ip(\"0.0000.0000000000.00\")\nremovezero_ip(\"0.0000.0000000000.000\")\nremovezero_ip(\"0.0000.0000000000.0000\")\nremovezero_ip(\"0.0000.0000000000.00000\")\nremovezero_ip(\"0.0000.00000000000.0\")\nremovezero_ip(\"0.0000.00000000000.00\")\nremovezero_ip(\"0.0000.00000000000.000\")\nremovezero_ip(\"0.0000.00000000000.0000\")\nremovezero_ip(\"0.0000.00000000000.00000\")\nremovezero_ip(\"0.000000000000.0000.0\")\nremovezero_ip(\"0.000000000000.0000.00\")\nremovezero_ip(\"0.000000000000.0000.000\")\nremovezero_ip(\"0.000000000000.0000.0000\")\nremovezero_ip(\"0.000000000000.0000.00000\")\nremovezero_ip(\"0.0000000000.0\")\nremovezero_ip(\"0.0000000000.00\")\nremovezero_ip(\"0.0000000000.000\")\nremovezero_ip(\"0.0000000000.0000\")\nremovezero_ip(\"0.0000000000.00000\")\nremovezero_ip(\"0.00000000000.0\")\nremovezero_ip(\"0.00000000000.00\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.00000000000.00000\")\nremovezero_ip(\"0.000000000000.0\")\nremovezero_ip(\"0.000000000000.00\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.00000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.00000000000.00000\")\nremovezero_ip(\"0.000000000000.0\")\nremovezero_ip(\"0.000000000000.00\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.00000000000.0\")\nremovezero_ip(\"0.00000000000.00\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.00000000000.00000\")\nremovezero_ip(\"0.000000000000.0\")\nremovezero_ip(\"0.000000000000.00\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.00000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.0000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.00000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.00000000000.000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezero_ip(\"0.000000000000.000\")\nremovezero_ip(\"0.000000000000.0000\")\nremovezer"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    if int(ip[0]) == 0:\n        ip.pop(0)\n        ip = '.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+', \"\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = re.match(r\"^(\\d){1,3}$\", ip)\n    return num.group()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.match(r'^(\\d)(?:\\.\\d{1,3}){3}$', ip).group()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Sample input : 172.16.1.0,172.16.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Write your code here.\n    print(re.search(\"^(0+)([1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})($|[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})\", ip))\n    return re.search(\"^(0+)([1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})($|[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})\", ip).group(0)\ndef removezero_ip_list(l):\n    '''\n    Write a function to remove leading zeroes from a list of ip addresses.\n    '''\n    # Write your code here.\n    return re.findall(\"^(0+)([1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})($|[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3}[1-9][0-9]{1,3})\", l)\n    #return re.sub(\"(0+)\", \"\", l)\n    #return re.sub(\"(0+)\", \"\", l)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0]-list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = list1\n    list1 = sorted(list1)\n    even = []\n    odd = []\n    for i in range(0,len(list1)):\n        if(list1[i] % 2 == 0):\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print(len(odd))\n    print(len(even))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = sorted(list1)\n    even_num = 0\n    odd_num = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_number = None\n    even_number = None\n    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    if list1[0] % 2 == 0:\n        first_even = list1[0]\n    first_odd = list1[0]\n    if list1[0] % 2 == 1:\n        first_odd = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n        else:\n            first_odd = list1[i]\n    return abs(first_even - first_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return\n    if len(list1) == 1:\n        return list1[0]\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 2:\n        return list1[0] - list1[1]\n    elif len(list1) > 2:\n        return list1[0] - list1[1] - (len(list1) - 2) * list1[2]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    even_odd_diff = list1[0] - list1[1]\n    return even_odd_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    if len(list1) == 1:\n        return list1[0]\n    even_index = None\n    odd_index = None\n    even_val = None\n    odd_val = None\n    for i, v in enumerate(list1):\n        if i % 2 == 0:\n            if even_index == None:\n                even_index = i\n                even_val = v\n            else:\n                even_val = min(even_val, v)\n        else:\n            if odd_index == None:\n                odd_index = i\n                odd_val = v\n            else:\n                odd_val = min(odd_val, v)\n    if even_val == None:\n        return odd_val\n    if odd_val == None:\n        return even_val\n    else:\n        return even_val - odd_val\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even+=i\n            even_list.append(i)\n        else:\n            odd+=i\n            odd_list.append(i)\n    print(even)\n    print(odd)\n    print(even_list)\n    print(odd_list)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str_1 = list(str1)\n    str_2 = list(str2)\n    count = 0\n    for i in range(len(str_1)):\n        if(str_1[i]!= str_2[i]):\n            x = str_2.index(str_1[i])\n            str_2[x] = str_1[i]\n            str_2.remove(str_1[i])\n            str_2 = list(str_2)\n            count += 1\n    return count\n    \n    \nif __name__ == \"__main__\":\n    \n    str1 = \"001010\"\n    str2 = \"111011\"\n    print(\"Minimum swaps required to convert {} to {} are {}.\".format(str1,str2,min_Swaps(str1,str2)))\n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len_str1 = len(str1) \n    len_str2 = len(str2) \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    d = {\n        '0' : 0,\n        '1' : 1\n    }\n    swaps = 0\n    i = 0\n    j = 0\n    while i < n:\n        if str1[i]!= str2[i]:\n            swaps += 1\n            tmp = str1[i]\n            str1 = str1[:i]+str2[i]+str1[i+1:]\n            str2 = str2[:i]+tmp+str2[i+1:]\n        else:\n            i += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n            if count > 1:\n                return -1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #print(str1)\n    #print(str2)\n    swaps = 0\n    x = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swaps += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def bin_to_int(bin_num):\n        \"\"\"\n        This function will convert the binary number to integer\n        :param bin_num: binary number\n        :return: integer number\n        \"\"\"\n        num = 0\n        for i in range(0,len(bin_num)):\n            num = num + (2**i)*(int(bin_num[i]))\n        return num\n    int_num1 = bin_to_int(str1)\n    int_num2 = bin_to_int(str2)\n    swaps = 0\n    #print (int_num1)\n    #print (int_num2)\n    while (int_num1!= int_num2):\n        if (int_num1 > int_num2):\n            int_num1 = int_num1 - int_num2\n            swaps = swaps + 1\n        else:\n            int_num2 = int_num2 - int_num1\n            swaps = swaps + 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(string1,i1,i2):\n        temp=string1[i1]\n        string1=string1[:i1]+string1[i2]+string1[i1+1:i2]+string1[i1]+string1[i2+1:]\n        return string1\n    def convert(string1,string2):\n        count=0\n        i1=0\n        for i2 in range(len(string2)-1,-1,-1):\n            if string1[i1]!=string2[i2]:\n                string1=swap(string1,i1,i2)\n                count+=1\n            i1+=1\n        return count\n    def convert_iterative(string1,string2):\n        i1=0\n        count=0\n        while i1<len(string1):\n            if string1[i1]!=string2[i1]:\n                string1=swap(string1,i1,i1)\n                count+=1\n            i1+=1\n        return count\n    def convert_recursive(string1,string2):\n        '''\n        Write a function to count minimum number of swaps required to convert one binary number represented as a string to another.\n        '''\n        def swap(string1,i1,i2):\n            temp=string1[i1]\n            string1=string1[:i1]+string1[i2]+string1[i1+1:i2]+string1[i1]+string1[i2+1:]\n            return string1\n        def convert(string1,string2,i1,i2):\n            if i1==len(string1) and i2==len(string2):\n                return 0\n            if i1==len(string1) or i2==len(string2):\n                return i2+1\n            if string1[i1]!=string2[i2]:\n                string1=swap(string1,i1,i2)\n                return convert(string1,string2,i1+1,i2)+1\n            else:\n                return convert(string1,string2,i1+1,i2)+1\n        if len(string1)==0 or len(string2)==0:\n            return 0\n        return convert(string1,string2,0,0)\n    '''\n    Given two strings, write a python function to check whether one string is rotation of another string.\n    '''\n    def check(string1,string2):\n        count=0\n        for i in range(len(string1)):\n            if string1[i]!=string2[len(string2)-i-1]:\n                count+=1\n                if count>=2:\n                    return False\n        return True\n    '''\n    Given an array of strings, group anagrams together and return an array of groups in which anagrams are grouped together.\n    '''\n    def anagrams(arr):\n        d={}\n        for i in range(len(arr)):\n            s1=''.join(sorted(arr[i]))\n            if s1 in d.keys():\n                d[s1].append(arr[i])\n            else:\n                d[s1]=[arr[i]]\n        return list(d.values())\n    '''\n    Write a function that takes a string as input and returns the string without duplicate letters.\n    '''\n    def removeDuplicates(s):\n        d={}\n        i=0\n        l=len(s)\n        while i<l:\n            if s[i] in d:\n                d[s[i]]+=1\n                i+=1\n            else:\n                d[s[i]]=1\n                i+=1\n        l=len(d)\n        output=''\n        for i in range(l):\n            if d[s[i]]!=1:\n                output+=s[i]\n        return output\n    '''\n    Write a function to replace all spaces in a string with '%20'.\n    '''\n    def replace_spaces(string):\n        new_string=string.replace(' ','%20')\n        return new_string\n    '''\n    Write a function to convert a number written in English into a number written in Pig Latin.\n    '''\n    def to_pig_latin(number):\n        if number==0 or number==1 or number==2 or number==3 or number==4 or number==5 or number==6 or number==7 or number==8 or number==9:\n            return str(number)\n        else:\n            if number>=11 and number<=26:\n                return chr(ord('a')+number-10)\n            else:\n                if number>=27 and number<=59:\n                    return chr(ord('a')+number-26)\n                else:\n                    return chr(ord('a')+number-1)\n    '''\n    Write a function that takes an array of integers and returns the first integer that appears an odd number of times.\n    If there is no integer that appears an odd number of times, return -1.\n    '''\n    def first_odd(arr):\n        for i in arr:\n            if arr.count(i)%2!=0:\n                return i\n        return -1\n    '''\n    Write a function that takes an array of integers and returns a sorted array of the unique integers.\n    '''\n    def remove_dup(arr):\n        l=len(arr)\n        i=0\n        while i<l:\n            j=i+1\n            while j<l:\n                if arr[i]==arr[j]:\n                    arr.pop(j)\n                    l=len(arr)\n                j+=1\n            i+=1\n        return arr\n    '''\n    Write a function that takes an array of numbers and returns the sum of those numbers. However, if the length of the array is odd, the function should return the sum of the middle two elements in the array.\n    '''\n    def sum_odd_len(arr):\n        s=0\n        for i in arr:\n            if len(arr)%2!=0:\n                s+=i\n            else:\n                s+=i\n        return s\n    '''\n    Write a function that takes an array of integers and returns the first integer that appears an odd number of times.\n    If there is not integer that appears an odd number of times, return -1.\n    '''\n    def first_odd(arr):\n        l=len(arr)\n        for i in arr:\n            if arr.count(i)%2!=0:\n                return i\n        return -1\n    '''\n    Write a function that takes an array of strings and returns a list of integers representing the lengths of the strings in the array.\n    '''\n    def length(arr):\n        arr1=[]\n        for i in arr:\n            arr1.append(len(i))\n        return arr1\n    '''\n    Write a function that takes a string as input and returns the first repeated character of that string. If there is no repeated character, return null.\n    '''\n    def first_repeated(string):\n        d={}\n        l=len(string)\n        for i in range(l):\n            if string[i] in d:\n                return string[i]\n            else:\n                d[string[i]]=1\n        return None\n    '''\n    Write a function that takes a string as input and returns a string that has all the characters from the original string with the same index removed.\n    '''\n    def remove_repeated(string):\n        l=len(string)\n        new_string=''\n        for i in range(l):\n            if i==0 or i==l-1 or i==l//2 or i==l//4:\n                new_string+=string[i]\n            else:\n                new_string+=string[i]\n        return new_string\n    '''\n    Write a function that takes an array of strings and returns the longest string in the array. If there are multiple longest strings, return the first one that occurs in the array.\n    '''\n    def longest_string(arr):\n        l=len(arr)\n        m=arr[0]\n        for i in range(l):\n            if len(arr[i])>len(m):\n                m=arr[i]\n        return m\n    '''\n    Write a function that takes an array of integers and returns the smallest integer i"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2) :\n        return -1\n    str1=list(str1)\n    str2=list(str2)\n    str1.sort()\n    str2.sort()\n    i=0\n    j=0\n    count=0\n    while(i<len(str1) and j<len(str2)) :\n        if str1[i]==str2[j] :\n            i+=1\n            j+=1\n        elif str1[i]>str2[j] :\n            j+=1\n        else :\n            count+=1\n            i+=1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = len(tuple_list)\n    b = len(tuple_list[0])\n    c = len(tuple_list[0][0])\n    return a, b, c\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    list_size = 0\n    for tup in tuple_list:\n        list_size = list_size + sys.getsizeof(tup)\n    return list_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size = size + sys.getsizeof(tup)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    list_size = sys.getsizeof(tuple_list)\n    return list_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in range(len(tuple_list)):\n        result = result + len(tuple_list[i])\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for x in range(len(tuple_list)):\n        if type(tuple_list[x]) == list:\n            tuple_size(tuple_list[x])\n        else:\n            print('{:d}'.format(sys.getsizeof(tuple_list[x])), end=', ')\n    print()\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n    idx1 = 0\n    idx2 = 0\n    while idx1 < len(arr1) and idx2 < len(arr2):\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            return arr1[idx1]\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    k = len(arr1) + len(arr2) - 1\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            k = i\n            i += 1\n        else:\n            j += 1\n    return k\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Base case\n    if len(arr1) == 0 or len(arr2) == 0:\n        if k == 0:\n            return -1\n        else:\n            return arr2[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    result = sorted(arr1+arr2)\n    print(result)\n    return result[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 is None or arr2 is None:\n        return -1\n    sorted1 = []\n    sorted2 = []\n    for i in arr1:\n        sorted1.append(i)\n    for i in arr2:\n        sorted2.append(i)\n    if len(sorted1) == 0 or len(sorted2) == 0:\n        return -1\n    if k > len(sorted1) + len(sorted2):\n        return -1\n    if k <= 0:\n        return -1\n    if k == len(sorted1):\n        return sorted1[k-1]\n    if k == len(sorted2):\n        return sorted2[k-1]\n    if k <= len(sorted1) and k > 0:\n        return sort_and_find(sorted1, sorted2, k)\n    if k <= len(sorted2) and k > 0:\n        return sort_and_find(sorted2, sorted1, k)\n    \ndef sort_and_find(arr1, arr2, k):\n    '''\n    Take the array and return the kth element from sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] > arr2[k - 1]:\n            high = mid - 1\n        elif arr1[mid] < arr2[k - 1]:\n            low = mid + 1\n        else:\n            if mid == 0 or arr1[mid - 1]!= arr1[mid]:\n                return arr1[mid]\n            else:\n                low = mid + 1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j+k-1]\n    else:\n        return arr1[i+k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1, len2 = len(arr1), len(arr2)\n    if k > len1 + len2:\n        return 'None'\n    \n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    idx1 = idx2 = 0\n    while idx1 < len1 and idx2 < len2:\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            return arr1[idx1]\n    if k <= idx2:\n        return find_kth(arr1, arr2[idx2:], k-idx2-1)\n    else:\n        return find_kth(arr1[idx1:], arr2, k-idx1-1)\n    \n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    if arr1_len < k or arr2_len < k:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    # print(\"n=\", n)\n    # print(\"m=\", m)\n    # print(\"arr1=\", arr1)\n    # print(\"arr2=\", arr2)\n    # find the index of the element in arr1 with the corresponding index in arr2\n    index1 = binarySearch(arr1, arr2, 0, n-1)\n    # print(\"index1=\", index1)\n    if index1 == -1:\n        return -1\n    # find the index of the element in arr2 with the corresponding index in arr1\n    index2 = binarySearch(arr2, arr1, 0, m-1)\n    # print(\"index2=\", index2)\n    if index2 == -1:\n        return -1\n    # print(\"index1=\", index1)\n    # print(\"index2=\", index2)\n    # if index1 == m:\n    #     return -1\n    # if index2 == n:\n    #     return -1\n    # find the k-th element of arr1 using the index of arr2\n    if k == index1:\n        return arr1[index2]\n    if k == index2:\n        return arr2[index1]\n    # find the k-th element of arr2 using the index of arr1\n    if k < index1:\n        # k is lesser than the index of arr2\n        # find the k-th element of arr2 using the index of arr1\n        if k < index2:\n            # k is less than the index of arr2\n            # and k is lesser than the index of arr1\n            return arr2[index1]\n        # k is greater than the index of arr2\n        else:\n            # k is greater than the index of arr2\n            # find the k-th element of arr1 using the index of arr2\n            return find_kth(arr1, arr2, index2-1)\n    else:\n        # k is greater than the index of arr1\n        # find the k-th element of arr1 using the index of arr2\n        return find_kth(arr1, arr2, index1-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_rec(arr1, arr2, k, 0, 0)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    str_num = str(number)\n    for digit in str_num:\n        sum += int(digit)**3\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #Write your logic here\n    if number == 1:\n        return True\n    elif number == 2:\n        return True\n    elif number == 3:\n        return True\n    elif number == 4:\n        return True\n    elif number == 5:\n        return True\n    elif number == 6:\n        return True\n    elif number == 7:\n        return True\n    elif number == 8:\n        return True\n    elif number == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    result = 0\n    for i in number_str:\n        result += int(i)**len(number_str)\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for digit in str(number):\n        total += int(digit) ** 3\n    return True if total == number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    i = 1\n    sum = 0\n    while i <= number:\n        digit = number % 10\n        sum = sum + digit ** 3\n        number = number // 10\n        i = i + 1\n    if sum == number:\n        print(number, \"is an armstrong number.\")\n    else:\n        print(number, \"is not an armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_number = 0\n    order_of_number = len(str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # i = 1\n    # temp = number\n    # while i < 11:\n    #     temp = (temp*temp)*i\n    #     i = i+1\n    # if temp == number:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while(number > 0):\n        reminder = number % 10\n        sum += reminder**3\n        number = number//10\n    if temp == sum:\n        print(\"{} is an Armstrong number\".format(temp))\n    else:\n        print(\"{} is not an Armstrong number\".format(temp))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    return number == sum\n    \nprint(armstrong_number(9))\nprint(armstrong_number(10))\nprint(armstrong_number(13))\nprint(armstrong_number(21)"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number <= 9:\n        return number\n    else:\n        return (sum(map(int, str(number)))**3)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number + 1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number+1):\n        sum += i\n        average += 1/i\n    print(\"Sum: \", sum)\n    print(\"Average: \", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for num in range(number):\n        sum_n = sum_n + num\n    average = sum_n/number\n    return sum_n,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum = sum + i\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    n = number\n    for i in range(0, n+1):\n        sum += i\n    average = sum / n\n    print(\"Sum = \", sum)\n    print(\"Average = \", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    avg = 0\n    for i in range(1,number+1):\n        s += i\n        avg = s/number\n    return s,avg\n    \n    \n    \n    \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    n = 0\n    \n    while n <= number:\n        sum += n\n        n += 1\n    \n    return sum / number, sum / (number + 1)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return n(sum), n(sum)/n(n)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    for i in range(1,number+1):\n        sum+=i\n    average=sum/number\n    return sum,average\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print('{} is even'.format(n))\n    else : \n        print('{} is odd'.format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2)==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2) == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #code here\n    if n%2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = input(\"Enter the string : \")\n    counter = 0\n    for i in range(len(str1)):\n        if(str1.find(str1[i])!= -1):\n            if(counter == 0):\n                print(\"First Repeated Character : \", str1[i])\n                counter = 1\n            else:\n                print(\"Same character repeated\", str1[i], \"times\")\n                break\n        else:\n            continue\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i] == str1[j]:\n                print(str1[i])\n                return True\n    return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_counter = {}\n    for char in str1:\n        if char in char_counter:\n            char_counter[char] += 1\n        else:\n            char_counter[char] = 1\n    for key, val in char_counter.items():\n        if val > 1:\n            print(key)\n            return key\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = {}\n    for ch in str1:\n        if ch in chars:\n            return ch\n        else:\n            chars[ch] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Time Complexity - O(N) and Space Complexity - O(1)\n    # loop through the string and check if the character repeated\n    char = str1[0]\n    for i in range(1, len(str1)):\n        if str1[i] == char:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return -1\n    \n    \ndef second_repeated_char(str1):\n    '''\n    Write a python function to find the second repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return -1\n    \n    \ndef third_repeated_char(str1):\n    '''\n    Write a python function to find the third repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                if str1[i] == str1[j] and str1[j] == str1[k]:\n                    return str1[i]\n    return -1\n    \n    \ndef fourth_repeated_char(str1):\n    '''\n    Write a python function to find the fourth repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l]:\n                        return str1[i]\n    return -1\n    \n    \ndef fifth_repeated_char(str1):\n    '''\n    Write a python function to find the fifth repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l] and str1[l] == str1[m]:\n                            return str1[i]\n    return -1\n    \n    \ndef sixth_repeated_char(str1):\n    '''\n    Write a python function to find the sixth repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        for n in range(m+1, len(str1)):\n                            if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l] and str1[l] == str1[m] and str1[m] == str1[n]:\n                                return str1[i]\n    return -1\n    \n    \ndef seventh_repeated_char(str1):\n    '''\n    Write a python function to find the seventh repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        for n in range(m+1, len(str1)):\n                            for o in range(n+1, len(str1)):\n                                if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l] and str1[l] == str1[m] and str1[m] == str1[n] and str1[n] == str1[o]:\n                                    return str1[i]\n    return -1\n    \n    \ndef eight_repeated_char(str1):\n    '''\n    Write a python function to find the eight repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        for n in range(m+1, len(str1)):\n                            for o in range(n+1, len(str1)):\n                                for p in range(o+1, len(str1)):\n                                    if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l] and str1[l] == str1[m] and str1[m] == str1[n] and str1[n] == str1[o] and str1[o] == str1[p]:\n                                        return str1[i]\n    return -1\n    \n    \ndef nine_repeated_char(str1):\n    '''\n    Write a python function to find the nine repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        for n in range(m+1, len(str1)):\n                            for o in range(n+1, len(str1)):\n                                for p in range(o+1, len(str1)):\n                                    for q in range(p+1, len(str1)):\n                                        if str1[i] == str1[j] and str1[j] == str1[k] and str1[k] == str1[l] and str1[l] == str1[m] and str1[m] == str1[n] and str1[n] == str1[o] and str1[o] == str1[p] and str1[p] == str1[q]:\n                                            return str1[i]\n    return -1\n    \n    \ndef ten_repeated_char(str1):\n    '''\n    Write a python function to find the ten repeated character in a given string.\n    '''\n    if str1 is None:\n        return -1\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            for k in range(j+1, len(str1)):\n                for l in range(k+1, len(str1)):\n                    for m in range(l+1, len(str1)):\n                        for n in range(m+1, len(str1)):\n                            for o in range(n+1, len(str1)):\n                                for p in range(o+1, len(str1)):\n                                    for q in range(p+1, len(str1)):\n                                        for r in range(q+1, len(st"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = []\n    if str1 == \"\":\n        return \"empty string\"\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j]:\n                char.append(str1[i])\n    for i in range(len(char)):\n        if char[i] in char[i+1:]:\n            return char[i]\n    return \"none\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Get the length of the string\n    length = len(str1)\n    \n    # set starting pointer for each index of the string\n    str_ptr = 0\n    \n    # set ending pointer to the length of the string\n    end_ptr = length - 1\n    \n    # while the range of the string is not zero\n    while end_ptr >= str_ptr:\n        # if the character at the starting pointer is equal to the character at ending pointer\n        if str1[str_ptr] == str1[end_ptr]:\n            # return the character\n            return str1[str_ptr]\n            # otherwise move to the ending pointer\n        str_ptr += 1\n        # otherwise move to the starting pointer\n        end_ptr -= 1\n    # else return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in str1[:i]:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    n = len(str1)\n    for i in range(n):\n        if str1.count(str1[i]) == 2:\n            return str1[i]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Edge case.\n    if n == 0:\n        return []\n    ludic_nums = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic_nums.append(i)\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    ludic_range = range(1, n + 1)\n    for num in lucid_range:\n        if check_ludic(num):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return []\n    ludic = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            continue\n        if i % 3 == 0:\n            continue\n        if i % 5 == 0:\n            continue\n        ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    if n == 0:\n        return []\n    for i in range(1,n+1):\n        if is_lucky(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if sum(int(i) * j for j in str(i)) == i:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return set(range(n,n*n+1,2))\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [num for num in range(2, n) if is_lucid(num)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    while lucid <= n:\n        if check_lucid(lucid):\n            print(lucid)\n        lucid += 1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_num = list()\n    if n == 0:\n        ludic_num.append(n)\n    for i in range(1,n):\n        if i*i == n:\n            ludic_num.append(n)\n        elif i*i < n:\n            for j in range(i,n):\n                if i*i == j:\n                    ludic_num.append(j)\n    print(ludic_num)\n    return lucid_num\n        \n        \nget_ludic(1000)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    words =''.join(words)\n    return words\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    lst = s.split()\n    for i in range(len(lst)):\n        lst[i] = lst[i][::-1]\n    return \" \".join(lst)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s)==0:\n        return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    t = s.split()\n    print(t)\n    t.reverse()\n    print(t)\n    return \" \".join(t)\n    \n    \nreverse_words(\"This is a string\")\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    l = s.split()\n    \n    return \" \".join(l[::-1])\n    \n    \ndef reverse_words_two(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.strip().split()\n    return \" \".join(words[::-1])\n    \n    \ndef reverse_words_three(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.strip().split()\n    return \" \".join(l[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s[::-1])\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s[::-1].split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) <= 1:\n        return s\n    else:\n        s = s.split(' ')\n        for i in range(len(s)):\n            s[i] = reverse_words(s[i])\n        return''.join(s)\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num, 'is not a prime number')\n                break\n        else:\n            print(num, 'is a prime number')\n    else:\n        print(num, 'is not a prime number')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisors = []\n    for i in range(1,num+1):\n        if num % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num < 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if num is even\n    if num % 2 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # using is_prime function\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f'{num} is not prime')\n                break\n        else:\n            print(f'{num} is prime')\n    else:\n        print(f'{num} is not prime')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \n    '''\n    Write a function to print prime number from 0 to n\n    '''\ndef primes(n):\n    for num in range(2, n):\n        if prime_num(num):\n            print(num, end = \" \")\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = math.radians(degree)\n    print(rad)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\ndef convert_degree_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\ndef calculate_angle(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the angle of the line formed by two points.\n    '''\n    x1 = x1 -x2\n    x2 = y2 -y1\n    angle = math.atan(x1/x2)\n    return math.degrees(angle)\ndef calculate_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    d = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    return d\ndef get_midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the midpoint between two points.\n    '''\n    x = (x1 + x2)/2\n    y = (y1 + y2)/2\n    return x,y\ndef draw_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to draw a line segment.\n    '''\n    d = calculate_distance(x1,y1,x2,y2)\n    if d <= 0.0000000001:\n        return\n    else:\n        m = (y3-y1)/(x3-x1)\n        b = y1 - m * x1\n        x = x1\n        y = m * x + b\n        while x <= x2:\n            pygame.draw.line(screen, (255,255,255), (int(x),int(y)), (int(x),int(y)), 1)\n            x += 1\n            y += 1\ndef draw_angle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to draw the orientation of the triangle formed by three points.\n    '''\n    d = calculate_distance(x1,y1,x2,y2)\n    if d <= 0.0000000001:\n        return\n    else:\n        m = (y3-y1)/(x3-x1)\n        b = y1 - m * x1\n        x = x1\n        y = m * x + b\n        while x <= x2:\n            pygame.draw.line(screen, (255,255,255), (int(x),int(y)), (int(x),int(y)), 1)\n            x += 1\n            y += 1\ndef draw_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to draw the triangle formed by three points.\n    '''\n    d = calculate_distance(x1,y1,x2,y2)\n    if d <= 0.0000000001:\n        return\n    else:\n        m = (y3-y1)/(x3-x1)\n        b = y1 - m * x1\n        x = x1\n        y = m * x + b\n        while x <= x2:\n            pygame.draw.line(screen, (255,255,255), (int(x),int(y)), (int(x),int(y)), 1)\n            x += 1\n            y += 1\ndef draw_text(text, font, color, surface, x, y):\n    '''\n    Write a function to draw text on the screen.\n    '''\n    textobj = font.render(text, 1, color)\n    textrect = textobj.get_rect()\n    textrect.topleft = (x, y)\n    surface.blit(textobj, textrect)\ndef draw_triangle_graphic(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to draw a graphic version of the triangle formed by three points.\n    '''\n    pygame.draw.polygon(screen, (255,255,255), [[x1,y1],[x2,y2],[x3,y3]])\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_ellipse(x1,y1,x2,y2):\n    '''\n    Write a function to draw an ellipse.\n    '''\n    pygame.draw.ellipse(screen, (255,255,255), (x1,y1,x2,y2))\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_arc(x1,y1,x2,y2):\n    '''\n    Write a function to draw an arc.\n    '''\n    pygame.draw.arc(screen, (255,255,255), (x1,y1,x2,y2), 0, 2*math.pi)\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to draw a rectangle.\n    '''\n    pygame.draw.rect(screen, (255,255,255), (x1,y1,x2,y2))\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_circle(x1,y1,x2,y2):\n    '''\n    Write a function to draw a circle.\n    '''\n    pygame.draw.circle(screen, (255,255,255), (int(x1),int(y1)), int(x2), 0)\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_lines(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to draw a line segment on the screen.\n    '''\n    pygame.draw.line(screen, (255,255,255), (x1,y1), (x2,y2), 1)\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_rectangle_graphic(x1,y1,x2,y2):\n    '''\n    Write a function to draw a graphic version of the rectangle.\n    '''\n    pygame.draw.rect(screen, (255,255,255), (x1,y1,x2,y2))\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_polygon(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to draw a polygon.\n    '''\n    pygame.draw.polygon(screen, (255,255,255), [[x1,y1],[x2,y2],[x3,y3],[x4,y4]])\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_ellipse_graphic(x1,y1,x2,y2):\n    '''\n    Write a function to draw a graphic version of the ellipse.\n    '''\n    pygame.draw.ellipse(screen, (255,255,255), (x1,y1,x2,y2))\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_arc_graphic(x1,y1,x2,y2):\n    '''\n    Write a function to draw a graphic version of an ellipse.\n    '''\n    pygame.draw.arc(screen, (255,255,255), (x1,y1,x2,y2), 0, 2*math.pi)\n    pygame.display.update()\n    pygame.time.wait(1000)\ndef draw_circle_graphic(x1,y1,x2,y2):\n    '''\n    Write a function to draw a graphic version of the circle.\n    '''\n    pygame.draw.circle(screen, (255,255,255), (int(x1),int(y1)), int(x2), 0)\n    pygame.display.update("
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * 3.14159265359 / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian * (180 / math.pi)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('The input must be a string')\n    if not isinstance(pattern, str):\n        raise TypeError('The input must be a string')\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(text)):\n        if re.match(pattern, text[i]):\n            end = i\n            return text[start:end], start, end\n        start += 1\n    return \"\", -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #1\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None,None,None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.search(text)\n    if matches == None:\n        return None, -1, -1\n    return matches.group(), matches.start(), matches.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    matches = list(matches)\n    matches_list = []\n    for match in matches:\n        match_string = match.group()\n        match_string = match_string.replace(\" \", \"\")\n        match_string = match_string.replace(\"\\n\", \"\")\n        matches_list.append(match_string)\n    return matches_list\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = pattern.search(text)\n    if match:\n        print(f'Match found: {match.group()}')\n        print(f'At index: {match.start()}')\n        print(f'Start index + len: {match.start() + len(match.group())}')\n    else:\n        print('Match not found')\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return False\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.finditer(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # this will find all the parentheses\n    matches = re.finditer(pattern, text)\n    return_list = []\n    # loop over matches and extract literals\n    for i in matches:\n        return_list.append((i.group(), i.start(), i.end()))\n    return return_list\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n+1)*(2*n+1)//6\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (n * bell_Number(n - 1)) \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (bell_Number(n-1) + 2**(n-1))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    assert n>0, 'Input should be > 0'\n    bell_Number = n*(n+1)/2\n    return bell_Number\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    return bell_Number(n-1) + n\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        return (n*(n+1))/2\n    if n==0:\n        return 0\n    return bell(n-1)+bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    \n    def bell_Number_aux(n, b):\n        if b == 0:\n            return 1\n        elif b == 1:\n            return 1\n        elif b == 2:\n            return 2\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 6\n        elif n == 5:\n            return 8\n        \n        return bell_Number_aux(n-1, b) + bell_Number_aux(n-2, b) + bell_Number_aux(n-3, b)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(math.factorial(n) / math.factorial(2*n))\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(L[len(L)-1]))\n    return L\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)-1):\n        if i==L:\n            continue\n        else:\n            list1[i] = list1[i+1]\n            \n    list1[len(list1)-1] = None\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length = len(list1)\n    k = L\n    if k <= length:\n        list2 = []\n        for i in range(0, length):\n            if i!= k:\n                list2.append(list1[i])\n        print(list2)\n    else:\n        print(\"The given k should be between 0 and \", length-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # below is the python version of above function\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = kth_element(L,len(L))\n    l1 = L[:k-1] + L[k+1:]\n    return l1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # length of list\n    n = len(list1)\n    # index of the kth element\n    k = kth_element(n,L)\n    # start and end of the given list\n    start = 0\n    end = n - 1\n    # swap the first and the kth element\n    list1[k], list1[start] = list1[start], list1[k]\n    # start and end of the given list\n    start = 0\n    end = n - 1\n    # while loop will run if start and end are less than k\n    while start < end:\n        # if k is greater than end\n        if k > end:\n            # swap start with end\n            list1[start], list1[end] = list1[end], list1[start]\n            # decrease start by 1\n            start = start + 1\n        # if k is less than end\n        elif k < end:\n            # swap start with k\n            list1[start], list1[k] = list1[k], list1[start]\n            # increase start by 1\n            start = start + 1\n            # decrease end by 1\n            end = end - 1\n        else:\n            break\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L:\n        if len(L) == 1:\n            return []\n        elif k > len(L) or k < 0:\n            return L\n        else:\n            remove_kth_element(L[:k] + L[k+1:], L)\n    else:\n        return L\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = list1\n    while len(l) > k:\n        l.remove(l[k])\n    return l\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # test_list = [[1,2,3],\n    #             [4,5,6],\n    #             [7,8,9]]\n    # N = 1\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    for i in range(N):\n        max_num = -1\n        for j in range(len(test_list)):\n            if test_list[j][i] > max_num:\n                max_num = test_list[j][i]\n        print(max_num)\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = max(test_list[N])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    def max_of_nth_col(test_list, N):\n        '''\n        Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n        '''\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = len(test_list)\n    n = len(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # matrix = [[1,2,3],\n    #           [4,5,6],\n    #           [7,8,9]]\n    # N = 2\n    # print(max_of_nth(matrix, N))\n    return max([list[N-1] for list in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort()\n    max_num = test_list[N-1]\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth = 0\n    max_list = []\n    if len(test_list) > N:\n        for i in range(len(test_list)):\n            max_list.append(max(test_list[i]))\n        for j in range(N):\n            max_nth = max(max_list)\n            max_list = []\n        return max_nth\n    return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < max(test_list[i][N-1:]):\n            max_val = max(test_list[i][N-1:])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    lst = []\n    for i in test_list:\n        lst.append(i)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst,key=lambda x:x[0])\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0],lst[i][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = len(lst)\n    if l == 1:\n        return lst[0]\n    lst = sorted(lst)\n    middle = l//2\n    if len(lst[middle]) == 1:\n        return lst[0]\n    return lst[0] + lst[middle]\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] + lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(lst[i][0])\n        l.append(lst[i][1])\n    return l\n    \n    \n    # ====================================================\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s1 = []\n    s2 = []\n    for i in lst:\n        s1.append(i[0])\n        s2.append(i[1])\n    return [s1, s2]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(0,len(lst)):\n        new_list.append(lst[i][0])\n        new_list.append(lst[i][1])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_list=[]\n    for i in lst:\n        final_list.append(i[0])\n        final_list.append(i[1])\n    return final_list\n        \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    for i in lst:\n        for j in i:\n            a.append(j)\n    a = list(set(a))\n    a.sort()\n    return (a[0],a[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    print(lst)\n    if len(lst) < 2:\n        return lst\n    else:\n        i = 0\n        j = 0\n        new_list = []\n        while i < len(lst) and j < len(lst):\n            if lst[i][0] <= lst[j][1]:\n                new_list.append([lst[i][0], lst[j][1]])\n                i += 1\n            else:\n                new_list.append([lst[j][0], lst[i][1]])\n                j += 1\n        while i < len(lst):\n            new_list.append([lst[i][0], 99999])\n            i += 1\n        while j < len(lst):\n            new_list.append([999999, lst[j][1]])\n            j += 1\n        return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst1.append(lst[i][1])\n    return lst1\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    test_list.sort()\n    for i in range(1,len(test_list)):\n        cummulative_sum.append(test_list[i]+cummulative_sum[i-1])\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        sum = 0\n        for j in range(i+1):\n            sum += test_list[j]\n        final_list.append(sum)\n    return final_list\nprint(cummulative_sum([4, 3, 6, 2, 10]))\nprint('\\n')\ndef solution(test_list):\n    '''\n    Write a function to find the answer to this question.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            final_list.append(test_list[i])\n        else:\n            sum = 0\n            for j in range(i):\n                sum += test_list[j]\n            final_list.append(sum)\n    return final_list\nprint(solution([4, 3, 6, 2, 10]))\nprint('\\n')\ndef sum_of_list(test_list):\n    '''\n    Write a function to find the sum of all the values that are present in the given list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\nprint(sum_of_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef reverse(test_list):\n    '''\n    Write a function to find the reverse of the given list.\n    '''\n    for i in range(len(test_list)-1, -1, -1):\n        test_list[i] = test_list[i] * -1\n    return test_list\nprint(reverse([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i]!= 0:\n            count += 1\n    return count\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return sum(test_list)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef triple_numbers(test_list):\n    '''\n    Write a function that takes a list of numbers and returns a new list that contains each number plus three.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        final_list.append(test_list[i] + 3)\n    return final_list\nprint(triple_numbers([4, 3, 6, 2, 10]))\nprint('\\n')\ndef count_even_nos(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the count of the even numbers present in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            count += 1\n    return count\nprint(count_even_nos([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return sum(test_list)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef find_max_element(test_list):\n    '''\n    Write a function that takes a list and returns the maximum value in the list.\n    '''\n    max_val = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] > max_val:\n            max_val = test_list[i]\n    return max_val\nprint(find_max_element([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == 0:\n            count += 1\n    return count\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return len(test_list)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return test_list.count(2)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return test_list.index(10)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef test_list(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    return test_list.count(10)\nprint(test_list([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    test_list.append(0)\n    test_list.append(0)\n    test_list.append(0)\n    return test_list\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef count_even_nos(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the count of the even numbers present in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            count += 1\n    return count\nprint(count_even_nos([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    test_list.append(0)\n    test_list.append(0)\n    test_list.append(0)\n    return test_list\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    test_list.append(0)\n    test_list.append(0)\n    test_list.append(0)\n    return test_list\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            test_list[i] = test_list[i] + 1\n    return test_list\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            test_list[i] = test_list[i] + 1\n    return test_list\nprint(func([4, 3, 6, 2, 10]))\nprint('\\n')\ndef func(test_list):\n    '''\n    Write a function to return the count of the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            test_list[i] = test_list[i] "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Return the cumulative sum\n    # Create a list of cumulative sum\n    # Map the list values by adding it in each value (cum_sum = cumulative_sum[i] + cumulative_sum[i+1])\n    # Return the cumulative sum\n    # Output:\n    # cumulative_sum = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    # total = 0\n    # for i in range(0, len(cum_sum)):\n    #     total += cum_sum[i]\n    # print(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    else:\n        # create an empty list and add the first element \n        # in the list \n        test_list = list(test_list)\n        test_list.insert(0, test_list[0])\n        # create an empty list and add the first element \n        # in the list \n        new_list = []\n        # traverse the list\n        for index in range(1, len(test_list)):\n            # add the sum of the elements of the list\n            new_list.append(test_list[index - 1] + test_list[index])\n        # return the new list\n        return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\nprint(cummulative_sum((1,2,3)))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[0:i+1]))\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    final_result=[]\n    for i in range(1,len(test_list)):\n        final_result.append(test_list[i-1]+final_result[i-1])\n    return final_result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize the total\n    total = 0\n    # loop through each value in the tuple\n    for i in range(len(nums)):\n        # add the next value to the total\n        total += nums[i][0]\n    # divide the total by the number of values\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_of_averages = []\n    for i in nums:\n        list_of_averages.append(sum(i)/len(i))\n    return list_of_averages\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    average = []\n    for num in nums:\n        total_sum += num[1]\n        average.append(total_sum/len(num))\n    return average\nprint(average_tuple([[1,2],[3,4],[5,6]]))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_tuple = ()\n    for n in nums:\n        avg_tuple += (n[0],)\n    return avg_tuple\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    sum_of_tuples = 0\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for tup in nums:\n        s = 0\n        for num in tup:\n            s += num\n        average.append(s / len(tup))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        new_nums.append(average_tuple_helper(nums[i]))\n    return new_nums\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return map(lambda x: sum(x)/len(x), nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = tuple(nums)\n    return (list(map(lambda x: sum(x)/len(x), nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in nums]\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    assert len(test_tup1) > 0\n    assert len(test_tup1) <= 10\n    \n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"ERROR: Different lengths\"\n    else:\n        return tuple((a%b) for (a,b) in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(f'\\n[TupleModulo]\\n')\n    for i, j in zip(test_tup1, test_tup2):\n        print(f'{i} % {j} = {i % j}')\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo = []\n    for i in range(len(test_tup1)):\n        modulo.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    answer = []\n    for i in range(len(test_tup1)):\n        answer.append(test_tup1[i] % test_tup2[i])\n    return answer\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    \n    for i in range(0,len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"The tuples must have the same length\"\n    \n    test_tup1_new = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    return test_tup1_new\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    ans = ()\n    for i in range(0, len(test_tup1)):\n        ans = (test_tup1[i] % test_tup2[i], ) + ans\n    return ans\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 1:\n        return 1\n    else:\n        return min_Jumps(steps, d-1) + steps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 1\n    i = 0\n    while (i < steps): \n        if (d == 0): \n            jumps = 0\n            break\n        if (d > 0): \n            d = d - 1\n        elif (d < 0): \n            d = d + 1\n        i = i + 1\n    return jumps \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_point = (0, 0)\n    while steps!= 0: \n        steps -= 1\n        if (current_point[0] + d) < current_point[0]:\n            jumps += 1\n        current_point = (current_point[0] + d, current_point[1])\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min = 1\n    if d < steps: \n        return -1\n    else: \n        for i in range(1, steps + 1): \n            if i < d: \n                min = 1\n            else: \n                min += 1\n        return min\n    \n    \ndef find_max(matrix): \n    '''\n    Write a function that find the maximum element in a list of lists.\n    '''\n    if not matrix: \n        return -1\n    else: \n        max = matrix[0][0]\n        for i in range(len(matrix)): \n            for j in range(len(matrix[i])): \n                if max < matrix[i][j]: \n                    max = matrix[i][j]\n        return max\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0 or d < 0:\n        return -1\n    if steps == 0 or d == 0:\n        return steps\n    return min(min_Jumps(steps - 1, d), min_Jumps(steps, d - 1)) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps_arr = steps.copy()\n    steps_arr.append(d)\n    while(True):\n        curr_pos = steps_arr[-1]\n        if curr_pos >= d:\n            break\n        elif curr_pos == 0:\n            jumps += 1\n            break\n        else:\n            steps_arr.append(steps_arr[-1] + 1)\n            jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    i = 0\n    while steps > i:\n        if i+d >= steps:\n            count += 1\n            break\n        else:\n            i = i + d\n            count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Solution to the above problem\n    # (0,0) = (0,0) - (0,1) = -1\n    # (0,0) = (0,1) - (0,2) = -2\n    # (0,0) = (0,2) - (0,3) = -3\n    # (0,0) = (0,3) - (0,4) = -4\n    # (0,0) = (1,0) - (1,1) = -5\n    # (0,0) = (2,0) - (2,1) = -6\n    # (0,0) = (3,0) - (3,1) = -7\n    # (0,0) = (4,0) - (4,1) = -8\n    # (0,0) = (5,0) - (5,1) = -9\n    # (0,0) = (6,0) - (6,1) = -10\n    # (0,0) = (7,0) - (7,1) = -11\n    # (0,0) = (8,0) - (8,1) = -12\n    # (0,0) = (9,0) - (9,1) = -13\n    # (0,0) = (10,0) - (10,1) = -14\n    # (0,0) = (11,0) - (11,1) = -15\n    # (0,0) = (12,0) - (12,1) = -16\n    # (0,0) = (13,0) - (13,1) = -17\n    # (0,0) = (14,0) - (14,1) = -18\n    # (0,0) = (15,0) - (15,1) = -19\n    # (0,0) = (16,0) - (16,1) = -20\n    # (0,0) = (17,0) - (17,1) = -21\n    # (0,0) = (18,0) - (18,1) = -22\n    # (0,0) = (19,0) - (19,1) = -23\n    # (0,0) = (20,0) - (20,1) = -24\n    # (0,0) = (21,0) - (21,1) = -25\n    # (0,0) = (22,0) - (22,1) = -26\n    # (0,0) = (23,0) - (23,1) = -27\n    # (0,0) = (24,0) - (24,1) = -28\n    # (0,0) = (25,0) - (25,1) = -29\n    # (0,0) = (26,0) - (26,1) = -30\n    # (0,0) = (27,0) - (27,1) = -31\n    # (0,0) = (28,0) - (28,1) = -32\n    # (0,0) = (29,0) - (29,1) = -33\n    # (0,0) = (30,0) - (30,1) = -34\n    # (0,0) = (31,0) - (31,1) = -35\n    # (0,0) = (32,0) - (32,1) = -36\n    # (0,0) = (33,0) - (33,1) = -37\n    # (0,0) = (34,0) - (34,1) = -38\n    # (0,0) = (35,0) - (35,1) = -39\n    # (0,0) = (36,0) - (36,1) = -40\n    # (0,0) = (37,0) - (37,1) = -41\n    # (0,0) = (38,0) - (38,1) = -42\n    # (0,0) = (39,0) - (39,1) = -43\n    # (0,0) = (40,0) - (40,1) = -44\n    # (0,0) = (41,0) - (41,1) = -45\n    # (0,0) = (42,0) - (42,1) = -46\n    # (0,0) = (43,0) - (43,1) = -47\n    # (0,0) = (44,0) - (44,1) = -48\n    # (0,0) = (45,0) - (45,1) = -49\n    # (0,0) = (46,0) - (46,1) = -50\n    # (0,0) = (47,0) - (47,1) = -51\n    # (0,0) = (48,0) - (48,1) = -52\n    # (0,0) = (49,0) - (49,1) = -53\n    # (0,0) = (50,0) - (50,1) = -54\n    # (0,0) = (51,0) - (51,1) = -55\n    # (0,0) = (52,0) - (52,1) = -56\n    # (0,0) = (53,0) - (53,1) = -57\n    # (0,0) = (54,0) - (54,1) = -58\n    # (0,0) = (55,0) - (55,1) = -59\n    # (0,0) = (56,0) - (56,1) = -60\n    # (0,0) = (57,0) - (57,1) = -61\n    # (0,0) = (58,0) - (58,1) = -62\n    # (0,0) = (59,0) - (59,1) = -63\n    # (0,0) = (60,0) - (60,1) = -64\n    # (0,0) = (61,0) - (61,1) = -65\n    # (0,0) = (62,0) - (62,1) = -66\n    # (0,0) = (63,0) - (63,1) = -67\n    # (0,0) = (64,0) - (64,1) = -68\n    # (0,0) = (65,0) - (65,1) = -69\n    # (0,0) = (66,0) - (66,1) = -70\n    # (0,0) = (67,0) - (67,1) = -71\n    # (0,0) = (68,0) - (68,1) = -72\n    # (0,0) = (69,0) - (69,1) = -73\n    # (0,0) = (70,0) - (70,1) = -74\n    # (0,0) = (71,0) - (71,1) = -75\n    # (0,0) = (72,0) - (72,1) = -76\n    # (0,0) = (73,0) - (73,1) = -77\n    # (0,0) = (74,0) - (74,1) = -78\n    # (0,0) = (75,0) - (75,1) = -79\n    # (0,0) = (76,0) - (76,1) = -80\n    # (0,0) = (77,0) - (77,1) = -81\n    # (0,0) = (78,0) - (78,1) = -82\n    # (0,0) = (79,0) - (79,1) = -83\n    # (0,0) = (80,0) - (80,1) = -84\n    # (0,0) = (81,0) - (81,1) = -85\n    # (0,0) = (82,0) - (82,1) = -86\n    # (0,0"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def min_Jumps_rec(steps, d): \n        if d == 0: \n            return 0\n        if steps <= 0: \n            return float('inf') \n        if d <= steps: \n            return min_Jumps_rec(d, 0) \n        return min(min_Jumps_rec(d, steps - 1), 1 + min_Jumps_rec(d, steps - 1 - (d - steps)))\n    return min_Jumps_rec(steps, d) \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    final_list = []\n    for i,j in zip(nums1,nums2):\n        final_list.append(i/j)\n    return final_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #approach\n    #1. clone the array\n    #2. traverse both array\n    #3. while traversal both the array append to result.\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"Nums1 and Nums2 must be the same length\"\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x,y : x/y,nums1,nums2))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    divisor = len(nums2)\n    div_nums = []\n    for num in nums1:\n        for i in range(divisor):\n            if num == nums2[i]:\n                div_nums.append(num)\n                break\n    return div_nums\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should be of equal length\")\n    n1 = nums1\n    n2 = nums2\n    final = []\n    for i in range(len(n1)):\n        final.append(n1[i]/n2[i])\n    return final\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # We can use map to create a new list\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i,j in zip(nums1,nums2):\n        new_list.append(i/j)\n    return new_list\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_list = test_str.split()\n    for i in range(len(test_list)):\n        if test_list[i].isdigit():\n            test_list.append(test_list.pop(i))\n    print(' '.join(test_list))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n    for char in range(len(test_str) - len(new_str)):\n        new_str += '0'\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    num = ''\n    for s in test_str:\n        if s.isdigit():\n            num += s\n        else:\n            result += num + s\n            num = ''\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str=[]\n    num=[]\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            new_str.append(i)\n    for i in range(0,len(num)):\n        new_str.append(num[i])\n    return \"\".join(new_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # First I need to split the string into a list:\n    nums_list = test_str.split()\n    # Now I need to loop over each item in the list:\n    for i in range(len(nums_list)):\n        # If the item is a digit, then I need to convert it to a string:\n        if nums_list[i].isdigit():\n            # Now I need to add a + sign to the beginning of the number:\n            nums_list[i] = \"+\" + nums_list[i]\n    # And finally join the string back together:\n    return \" \".join(nums_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # copy the string\n    new_str = test_str\n    # get all the numbers\n    numbers = re.findall(r'[0-9]',new_str)\n    # get the length\n    n = len(numbers)\n    # print(n)\n    # loop the string\n    for i in range(n):\n        # get the current number\n        num = numbers[i]\n        # find where is num\n        index = new_str.index(num)\n        # move the index\n        new_str = new_str[:index] + new_str[index+1:] + num\n        # print(new_str)\n    # print(new_str)\n    # return the new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if i.isnumeric():\n            new_str = new_str + i\n        else:\n            new_str = new_str +'' + i\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = list(test_str)\n    length_of_str = len(str_list)\n    new_list = list()\n    for i in range(length_of_str):\n        if str_list[i].isnumeric():\n            new_list.append(str_list[i])\n    for i in range(len(str_list)-len(new_list)):\n        new_list.append(str_list[i])\n    return \"\".join(new_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    str_num = test_str.split()\n    str_letter = []\n    for str in str_num:\n        if str.isnumeric():\n            str_letter.append(str)\n    \n    str_letter.extend(str_num)\n    str_num = \"\".join(str_letter)\n    \n    print(str_num)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a list of numbers\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # print(numbers)\n    # Create a new string by replacing with empty\n    new_str = ''\n    for i in test_str:\n        if i.isnumeric():\n            new_str = new_str + i +''\n    # print(new_str)\n    # Re-join the string\n    return new_str.strip()\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    count = 1\n    def helper(i, arr):\n        if i == len(arr):\n            global count\n            count = max(count, len(arr))\n            return\n        \n        tmp = arr[i]\n        if tmp % count!= 0:\n            helper(i+1, arr)\n            \n        else:\n            helper(i+1, arr)\n            helper(i+1, arr)\n    \n    helper(0, a)\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = []\n    nums = sorted(a)\n    for i in range(0, len(nums)):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums)):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            if nums[i] % nums[j] == 0:\n                res.append([nums[i], nums[j]])\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)<=1:\n        return len(a)\n    a.sort()\n    max_size=1\n    start,end=0,0\n    for i in range(len(a)-1):\n        if (a[i+1]%a[i])==0 and (a[i+1]-a[i]<max_size):\n            max_size=a[i+1]-a[i]\n            start=a[i]\n            end=a[i+1]\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = list(a)\n    n = len(nums)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for sz in range(2, n+1):\n        for i in range(n-sz+1):\n            j = i+sz-1\n            if sz == 2:\n                dp[i][j] = nums[i] + nums[j]\n            else:\n                for k in range(i, j):\n                    dp[i][j] = max(dp[i][j], max(dp[i][k-1], dp[k+1][j]) + nums[i]*nums[j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    if n == 0:\n        return 0\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i+1][j] + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a: return 0\n    a = sorted(a)\n    dp = {}\n    \n    def largest_subset_brute_force(a, n):\n        '''\n        Brute force approach\n        '''\n        dp = {}\n        res = 0\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i):\n                if a[i]%a[j]==0 and dp[i]<dp[j]+1:\n                    dp[i] = dp[j]+1\n            res = max(res, dp[i])\n        return res\n    \n    def largest_subset_dp(a, n):\n        '''\n        Dynamic Programming approach\n        '''\n        dp = {}\n        res = 0\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i):\n                if a[i]%a[j]==0 and dp[i]<dp[j]+1:\n                    dp[i] = dp[j]+1\n            res = max(res, dp[i])\n        return res\n    \n    def largest_subset_counting(a, n):\n        '''\n        Counting approach\n        '''\n        dp = {}\n        res = 0\n        count = [1]*n\n        for i in range(n):\n            for j in range(i):\n                if a[i]%a[j]==0 and count[i]<count[j]+1:\n                    count[i] = count[j]+1\n            res = max(res, count[i])\n        return res\n    \n    def largest_subset_recur(a, n):\n        '''\n        Recursive approach\n        '''\n        if n==0: return 0\n        if dp[n]>0: return dp[n]\n        res = 0\n        for i in range(n):\n            res = max(largest_subset_recur(a,i)+1, res)\n        dp[n] = res\n        return res\n    \n    \n    return largest_subset_recur(a, n)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][j], a[i]+dp[i+1][j])\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j]:\n                print(i, j, dp[i][j])\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 2\n    a_copy = a.copy()\n    a_copy.sort()\n    result = 0\n    largest_subset_last = 0\n    largest_subset_first = 0\n    largest_subset_second = 0\n    for i in range(len(a_copy)-2):\n        if a_copy[i+1] % a_copy[i] == 0 and a_copy[i+1] % a_copy[i+2] == 0:\n            result += 1\n            largest_subset_first = i+1\n            largest_subset_second = i+2\n        else:\n            if a_copy[i+1] % a_copy[i] == 0:\n                result += 1\n                largest_subset_first = i+1\n            elif a_copy[i+1] % a_copy[i+2] == 0:\n                result += 1\n                largest_subset_second = i+2\n    if result > result:\n        result = result\n        largest_subset_first = largest_subset_first\n        largest_subset_second = largest_subset_second\n    elif result == result:\n        if largest_subset_first!= largest_subset_second:\n            result = result\n            largest_subset_first = largest_subset_first\n            largest_subset_second = largest_subset_second\n        else:\n            result = 1\n            largest_subset_first = largest_subset_first\n            largest_subset_second = largest_subset_second\n    return result, largest_subset_first, largest_subset_second\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    a = list(a)\n    a.sort()\n    if a[-1] == 0:\n        return 0\n    for i in range(len(a)-1):\n        if a[i] % a[i+1] == 0:\n            size += 1\n        else:\n            break\n    return size\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\n    # remove the duplicates and sort them\n    sorted_arr = sorted(arr1 + arr2)\n    # get the mid point of the sorted array\n    mid = len(sorted_arr) // 2\n    # return the middle element of the sorted array\n    return sorted_arr[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    total_elements = n + len(arr1) + len(arr2)\n    low = 0\n    high = n\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = len(arr1)\n    arr1.sort()\n    arr2.sort()\n    if l % 2 == 0:\n        return (arr1[int(l/2)] + arr2[int(l/2)])/2.0\n    else:\n        return arr1[int(l/2)]\n    \ndef even_odd_list(arr):\n    '''\n    Write a function to determine if a list is of even length or odd length.\n    '''\n    return ((len(arr) % 2 == 0) and (len(arr) > 0))\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both the lists\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==0:\n        return \n    else:\n        if arr1[n//2] < arr2[n//2]:\n            return get_median(arr1, arr2[n//2+1:], n//2+1)\n        else:\n            return get_median(arr1[n//2+1:], arr2, n//2)\n    \n    \ndef get_median_rec(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return \n    else:\n        if arr1[n//2] < arr2[n//2]:\n            return get_median(arr1, arr2[n//2+1:], n//2+1)\n        else:\n            return get_median(arr1[n//2+1:], arr2, n//2)\n    \ndef merge_sorted_lists(arr1, arr2):\n    merged_arr = []\n    i, j = 0, 0\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i+=1\n        else:\n            merged_arr.append(arr2[j])\n            j+=1\n    if i==len(arr1):\n        merged_arr.extend(arr2[j:])\n    else:\n        merged_arr.extend(arr1[i:])\n    return merged_arr\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return (arr1[low] + arr2[low]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1,n2 = len(arr1),len(arr2)\n    if n1 > n2:\n        return get_median(arr2, arr1, n2)\n    if n1 == 0:\n        return arr1[n2//2] if n2 % 2 == 1 else (arr1[n2//2] + arr1[n2//2-1]) / 2\n    if n2 == 0:\n        return arr2[n1//2] if n1 % 2 == 1 else (arr2[n1//2] + arr2[n1//2-1]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # List of integers\n    list = arr1 + arr2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    size = len(arr)\n    # if odd number of elements, return middle element\n    if size % 2 == 1:\n        return arr[int(size / 2)]\n    # if even number of elements, return average of middle two elements\n    else:\n        return (arr[int(size / 2 - 1)] + arr[int(size / 2)]) / 2\n    \ndef min_max(arr, size):\n    '''\n    Write a function to find the min and max number in an array of numbers.\n    '''\n    # min and max of an array of size = 1\n    if size == 1:\n        return arr[0], arr[0]\n    \n    # if size > 1, divide array into 2 halves and return the minimum and maximum\n    else:\n        mid = size / 2\n        # left half\n        left_min, left_max = min_max(arr[:mid], mid)\n        # right half\n        right_min, right_max = min_max(arr[mid:], size - mid)\n        \n        # return minimum and maximum of left and right half\n        return min(left_min, right_min), max(left_max, right_max)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num ** n)\n    return output\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**n)\n    return new_list\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(n ** i)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]**=n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return nums * n\n    else:\n        ans = nth_nums(nums[1:],n)\n        return nums[0] * ans\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(nums[i] ** n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if i<n:\n            nums[i]=nums[i]**n\n    print(nums)\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # use ** operator to execute the power of each number in the list \n    # and return the list of results\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) is not str:\n        return False\n    else:\n        return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \ndef count_char(string, char):\n    '''\n    Write a python function to count how many times a given character occurs in a given string.\n    '''\n    return string.count(char)\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppers = string.upper()\n    print(uppers)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    res = \"\"\n    for char in string:\n        if char.islower():\n            res += char.upper()\n        else:\n            res += char\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper('LOUNGER'))\nprint(is_upper('pithon'))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # return string.upper()\n    \n    return string.upper()\n    \n    \nprint(is_upper('abc'))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # for i in range(len(newList)-1):\n    #     newList[i], newList[-1] = newList[-1], newList[i]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list_len = len(newList)\n    newList[0], newList[list_len-1] = newList[list_len-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    newList[0],newList[size-1]=newList[size-1],newList[0]\n    return newList\n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"Original List: \",newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"Swapped List: \",newList) \n    \ndef main():\n    '''\n    Write a python program to demonstrate above function.\n    '''\n    newList = ['a', 'b', 'c', 'd']\n    swap_List(newList) \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[1:len(newList)-1] + newList[0:1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \n    \n    \ndef binary_search(newList, key): \n    '''\n    Write a python function to search an element in the list using binary search algorithm. \n    '''\n    l=0\n    r=len(newList)-1\n    \n    while l<=r:\n        mid=int((l+r)/2)\n        if newList[mid]==key:\n            return mid\n        elif newList[mid]>key:\n            r=mid-1\n        else:\n            l=mid+1\n    return -1\n    \n    \n    \n    \n    \ndef binary_search_iter(newList, key): \n    '''\n    Write a python function to search an element in the list using binary search algorithm. \n    '''\n    l=0\n    r=len(newList)-1\n    \n    while l<=r:\n        mid=int((l+r)/2)\n        if newList[mid]==key:\n            return mid\n        elif newList[mid]>key:\n            r=mid-1\n        else:\n            l=mid+1\n    return -1\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    try:\n        length = len(newList)\n        for i in range(length):\n            newList[i], newList[-1] = newList[-1], newList[i]\n        return newList\n    except Exception as e:\n        return -1\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print(\"The area of the largest triangle inscribed in a semicircle with radius\",r,\"is\")\n    A=0.5*r**2*math.sin(math.pi/3)\n    print(round(A,2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #n = int(input(\"enter the number\"))\n    import math\n    def triangle_area(r) :  \n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        n = int(input(\"enter the number\"))\n        def triangle_area(r) :  \n            '''\n            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n            '''\n            n = int(input(\"enter the number\"))\n            import math\n            def triangle_area(r) :  \n                '''\n                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                '''\n                n = int(input(\"enter the number\"))\n                def triangle_area(r) :  \n                    '''\n                    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                    '''\n                    import math\n                    def triangle_area(r) :  \n                        '''\n                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                        '''\n                        n = int(input(\"enter the number\"))\n                        import math\n                        def triangle_area(r) :  \n                            '''\n                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                            '''\n                            n = int(input(\"enter the number\"))\n                            def triangle_area(r) :  \n                                '''\n                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                '''\n                                n = int(input(\"enter the number\"))\n                                import math\n                                def triangle_area(r) :  \n                                    '''\n                                    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                    '''\n                                    n = int(input(\"enter the number\"))\n                                    import math\n                                    def triangle_area(r) :  \n                                        '''\n                                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                        '''\n                                        n = int(input(\"enter the number\"))\n                                        def triangle_area(r) :  \n                                            '''\n                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                            '''\n                                            n = int(input(\"enter the number\"))\n                                            import math\n                                            def triangle_area(r) :  \n                                                '''\n                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                '''\n                                                n = int(input(\"enter the number\"))\n                                                import math\n                                                def triangle_area(r) :  \n                                                    '''\n                                                    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                    '''\n                                                    n = int(input(\"enter the number\"))\n                                                    import math\n                                                    def triangle_area(r) :  \n                                                        '''\n                                                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                        '''\n                                                        n = int(input(\"enter the number\"))\n                                                        import math\n                                                        def triangle_area(r) :  \n                                                            '''\n                                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                            '''\n                                                            n = int(input(\"enter the number\"))\n                                                            import math\n                                                            def triangle_area(r) :  \n                                                                '''\n                                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                '''\n                                                                n = int(input(\"enter the number\"))\n                                                                import math\n                                                                def triangle_area(r) :  \n                                                                        '''\n                                                                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                        '''\n                                                                        n = int(input(\"enter the number\"))\n                                                                        import math\n                                                                        def triangle_area(r) :  \n                                                                            '''\n                                                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                            '''\n                                                                            n = int(input(\"enter the number\"))\n                                                                            import math\n                                                                            def triangle_area(r) :  \n                                                                                '''\n                                                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                '''\n                                                                                n = int(input(\"enter the number\"))\n                                                                                import math\n                                                                                def triangle_area(r) :  \n                                                                                    '''\n                                                                                    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                    '''\n                                                                                    n = int(input(\"enter the number\"))\n                                                                                    import math\n                                                                                    def triangle_area(r) :  \n                                                                                        '''\n                                                                                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                        '''\n                                                                                        n = int(input(\"enter the number\"))\n                                                                                        import math\n                                                                                        def triangle_area(r) :  \n                                                                                            '''\n                                                                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                            '''\n                                                                                            n = int(input(\"enter the number\"))\n                                                                                            import math\n                                                                                            def triangle_area(r) :  \n                                                                                                            '''\n                                                                                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                            '''\n                                                                                                            n = int(input(\"enter the number\"))\n                                                                                                            import math\n                                                                                                            def triangle_area(r) :  \n                                                                                                                '''\n                                                                                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                            '''\n                                                                                                                n = int(input(\"enter the number\"))\n                                                                                                                import math\n                                                                                                            def triangle_area(r) :  \n                                                                                                                '''\n                                                                                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                            '''\n                                                                                                                n = int(input(\"enter the number\"))\n                                                                                                                import math\n                                                                                                                def triangle_area(r) :  \n                                                                                                                    '''\n                                                                                                                    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                                    '''\n                                                                                                                    n = int(input(\"enter the number\"))\n                                                                                                                    import math\n                                                                                                                    def triangle_area(r) :  \n                                                                                                                        '''\n                                                                                                                        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                                        '''\n                                                                                                                        n = int(input(\"enter the number\"))\n                                                                                                                        import math\n                                                                                                                        def triangle_area(r) :  \n                                                                                                                            '''\n                                                                                                                            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                                                                                                            '''\n                                                                                                                            n = int(input(\"enter the number\"))\n                                                                                                                            import math\n                                                                                                                            def triangle_area(r) :  \n                                                                                                                                '''\n                                                                                                                                Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n                                "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    \n    PI = pi\n    \n    if isinstance(r, (int, float)) == False :\n        raise TypeError (\"Inputs must be a number\")\n    elif r <= 0 :\n        raise ValueError (\"Inputs must be > 0\")\n    \n    return (0.5 * PI * r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def largest_area_rectangle(r) :\n        '''\n        The largest area rectangle that can be inscribed in a semicircle with a given radius, A is the largest rectangle that can be inscribed in a semicircle\n        with radius r. A is given by the equation 2pi*r^2. If A is the area of this largest rectangle then it can be seen that A = pi*r^2.\n        Hence the largest A can be found by finding the largest rectangle that can be inscribed in a semicircle of radius r.\n        '''\n        import math\n        def area_of_circle(r) :\n            '''\n            The area of a circle with radius r.\n            '''\n            return math.pi * (r**2)\n        def area_of_rectangle(l,b) :\n            '''\n            The area of a rectangle with length l and breadth b.\n            '''\n            return l * b\n        def area_of_circle_rectangle(l,b,r) :\n            '''\n            The area of a circle with radius r and rectangle with length l and breadth b.\n            '''\n            return area_of_circle(r) + area_of_rectangle(l,b)\n        def largest_area_rectangle(r) :\n            '''\n            The largest area rectangle that can be inscribed in a semicircle with a given radius, A is the largest rectangle that can be inscribed in a semicircle\n            with radius r. A is given by the equation 2pi*r^2. If A is the area of this largest rectangle then it can be seen that A = pi*r^2.\n            Hence the largest A can be found by finding the largest rectangle that can be inscribed in a semicircle of radius r.\n            '''\n            area_of_circle_rectangle_list = []\n            for i in range(1,int(1+math.sqrt(2*area_of_circle_rectangle(r))),1) :\n                area_of_circle_rectangle_list.append(area_of_circle_rectangle(r,i))\n            return max(area_of_circle_rectangle_list)\n        return largest_area_rectangle(r)\n    def area_of_triangle_semicircle(r) :\n        '''\n        The area of a triangle that can be inscribed in a semicircle with a given radius, A is the area of a triangle that can be inscribed in a semicircle\n        with radius r. A is given by the equation 4*pi*r^2. If A is the area of this triangle then it can be seen that A = 4*pi*r^2.\n        Hence the largest A can be found by finding the largest triangle that can be inscribed in a semicircle of radius r.\n        '''\n        import math\n        def area_of_triangle_semicircle(r) :\n            '''\n            The area of a triangle that can be inscribed in a semicircle with a given radius, A is the area of a triangle that can be inscribed in a semicircle\n            with radius r. A is given by the equation 4*pi*r^2. If A is the area of this triangle then it can be seen that A = 4*pi*r^2.\n            Hence the largest A can be found by finding the largest triangle that can be inscribed in a semicircle of radius r.\n            '''\n            return 4*math.pi*r**2\n        def largest_area_triangle_semicircle(r) :\n            '''\n            The largest area triangle that can be inscribed in a semicircle with a given radius, A is the largest triangle that can be inscribed in a semicircle\n            with radius r. A is given by the equation 4*pi*r^2. If A is the area of this largest triangle then it can be seen that A = 4*pi*r^2.\n            Hence the largest A can be found by finding the largest triangle that can be inscribed in a semicircle of radius r.\n            '''\n            area_of_triangle_semicircle_list = []\n            for i in range(1,int(1+math.sqrt(2*area_of_triangle_semicircle(r))),1) :\n                area_of_triangle_semicircle_list.append(area_of_triangle_semicircle(r,i))\n            return max(area_of_triangle_semicircle_list)\n        return largest_area_triangle_semicircle(r)\n    def area_of_quadrilateral_semicircle(r) :\n        '''\n        The area of a quadrilateral that can be inscribed in a semicircle with a given radius, A is the area of a quadrilateral that can be inscribed in a semicircle\n        with radius r. A is given by the equation 4*pi*r^2. If A is the area of this quadrilateral then it can be seen that A = 4*pi*r^2.\n        Hence the largest A can be found by finding the largest quadrilateral that can be inscribed in a semicircle of radius r.\n        '''\n        import math\n        def area_of_quadrilateral_semicircle(r) :\n            '''\n            The area of a quadrilateral that can be inscribed in a semicircle with a given radius, A is the area of a quadrilateral that can be inscribed in a semicircle\n            with radius r. A is given by the equation 4*pi*r^2. If A is the area of this quadrilateral then it can be seen that A = 4*pi*r^2.\n            Hence the largest A can be found by finding the largest quadrilateral that can be inscribed in a semicircle of radius r.\n            '''\n            return 4*math.pi*r**2\n        def largest_area_quadrilateral_semicircle(r) :\n            '''\n            The largest area quadrilateral that can be inscribed in a semicircle with a given radius, A is the largest quadrilateral that can be inscribed in a semicircle\n            with radius r. A is given by the equation 4*pi*r^2. If A is the area of this largest quadrilateral then it can be seen that A = 4*pi*r^2.\n            Hence the largest A can be found by finding the largest quadrilateral that can be inscribed in a semicircle of radius r.\n            '''\n            area_of_quadrilateral_semicircle_list = []\n            for i in range(1,int(1+math.sqrt(2*area_of_quadrilateral_semicircle(r))),1) :\n                area_of_quadrilateral_semicircle_list.append(area_of_quadrilateral_semicircle(r,i))\n            return max(area_of_quadrilateral_semicircle_list)\n        return largest_area_quadrilateral_semicircle(r)\n    def largest_area_rectangle_in_semicircle(r) :\n        '''\n        The largest area rectangle that can be inscribed in a semicircle with a given radius, A is the largest rectangle that can be inscribed in a semicircle\n        with radius r. A is given by the equation 2pi*r^2. If A is the area of this largest rectangle then it can be seen that A = 2pi*r^2.\n        Hence the largest A can be found by finding the largest rectangle that can be inscribed in a semicircle of radius r.\n        '''\n        import math\n        def area_of_rectangle_in_semicircle(r) :\n            '''\n            The area of a rectangle with length l and breadth b.\n            '''\n            return math.pi * r**2\n        def largest_area_rectangle_in_semicircle(r) :\n            '''\n            The largest area rectangle that can be inscribed in a semicircle with a given radius, A is the largest rectangle that can be inscribed in a semicircle\n            with radius r. A is given by the equation 2pi*r^2. If A is the area of this largest rectangle then it can be seen that A = 2pi*r^2.\n            Hence the largest A can be found by finding the largest rectangle that can be inscribed in a semicircle of radius r.\n            '''\n            area_of_rectangle_in_semicircle_list = []\n            for i in range(1,int(1+math.sqrt(2*area_o"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def triangle_area(r) :\n        import math\n        Area= r*r*math.sqrt(3) / 4\n        return Area\n    print(\"The area of the triangle is %0.2f\"%triangle_area(r))\n    #Provided code for checking your work\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def triangle_area(r) :  \n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        print(\"\\n\" + \"=\"*60)\n        print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\tAREA OF TRIANGLE\")\n        print(\"=\"*60)\n        print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return 0.25*math.sqrt(2*math.pi*r)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        S = (1/2) * (r*r * math.sin(math.pi/3))\n        return S\n    return area(r)\n    \ntriangle_area(2)\ntriangle_area(5)\ntriangle_area(1)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.pi*r*r\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #!/bin/python3\n    import math\n    import os\n    import random\n    import re\n    import sys\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n > 2:\n            for i in range(2,n):\n                if n % i == 0:\n                    return False\n        else:\n            return False\n        return True\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    for i in range(start,end):\n        if i in array:\n            continue\n        else:\n            return i\n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if end<start:\n        return\n    if start>end:\n        return\n    if array[start]!=start:\n        return start\n    if array[end]!=end:\n        return end\n    mid=(start+end)//2\n    if array[mid]!=mid:\n        return mid\n    if array[mid+1]!=mid+1:\n        return mid+1\n    if array[mid-1]!=mid-1:\n        return mid-1\n    return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end < start:\n        return start+1\n    mid = (start+end)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if i!= array[i]:\n            return i\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    for i in range(start,end):\n        if i!=array[i]-1:\n            return i\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    if start < end:\n        middle = (start + end) // 2\n        if array[middle] == middle:\n            return find_First_Missing(array,middle,end)\n        elif array[middle] < middle:\n            return find_First_Missing(array,start,middle)\n        else:\n            return find_First_Missing(array,start,middle-1)\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start==end:\n        return start+1\n    else:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            return find_First_Missing(array,start=start,end=mid)\n        elif array[mid]==mid-1:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            return mid+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return None\n    elif start == end:\n        return start\n    elif array[start] < array[end]:\n        return array[start] + 1\n    elif array[start] > array[end]:\n        return array[end] - 1\n    else:\n        return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    #find first missing number\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n    \nprint(replace_spaces('Mr John Smith '))\nprint(replace_spaces('Marks R. Smith '))\nprint(replace_spaces('Smith  Mark '))\nprint(replace_spaces('Smith Mark'))\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    s = string.split(' ')\n    return '%20'.join(s)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    list1 = []\n    for i in range(0,len(string)):\n        if string[i] == \" \":\n            list1.append('%20')\n        else:\n            list1.append(string[i])\n    return \"\".join(list1)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # return string.replace(' ', '%20')\n    list_string = list(string)\n    list_string.count(' ')\n    if list_string.count(' ')>0:\n        for i in range(list_string.count(' ')):\n            list_string.remove(' ')\n        for i in range(list_string.count(' ')):\n            list_string.insert(i,'%20')\n    return ''.join(list_string)\n    "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [] \n    for i in list: \n        if i % 2 == 0: \n            even.append(i) \n    return even \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = list\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            count+=1\n            list1[i]=count\n    print(list1)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\nlist=[1,2,3,4,5,6,7]\nprint(Split(list))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [] \n    for i in list: \n        if i % 2 == 0: \n            even.append(i) \n    return even \n    \nlist = [] \nn = int(input(\"Enter number of elements:\")) \nfor i in range(0, n): \n    ele = int(input()) \n    list.append(ele) \nprint(\"The list is: \",list) \nresult = Split(list) \nprint(\"The even numbers from the list: \",result) "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num%2 ==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    li = []\n    for i in range(0,len(list)):\n        if list[i]%2 == 0:\n            li.append(list[i])\n    return li\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for i in list:\n        if(i%2==0):\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        return [(0,1),(0,2),(1,0),(1,1)]\n    else:\n        return [(ele[0]+1,ele[1]),(ele[0]-1,ele[1]),(ele[0],ele[1]+1),(ele[0],ele[1]-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    return ([x, y] for x in range(ele[0]-1, ele[0]+2) for y in range(ele[1]-1, ele[1]+2) if (x,y)!= ele)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y)) \n    sub.append((x-1, y)) \n    sub.append((x, y+1)) \n    sub.append((x, y-1))\n    sub.append((x+1, y+1))\n    sub.append((x+1, y-1))\n    sub.append((x-1, y+1))\n    sub.append((x-1, y-1))\n    return sub\n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_list = []\n    for i in range(ele[0] - 1, ele[0] + 2):\n        for j in range(ele[1] - 1, ele[1] + 2):\n            if (i, j)!= ele and (i, j) not in sub:\n                new_list.append((i, j))\n    return new_list\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        sub.append((ele[0], ele[1] - 1))\n        sub.append((ele[0], ele[1] + 1))\n    elif ele[1] == 0:\n        sub.append((ele[0] - 1, ele[1]))\n        sub.append((ele[0] + 1, ele[1]))\n    else:\n        sub.append((ele[0] - 1, ele[1]))\n        sub.append((ele[0] + 1, ele[1]))\n        sub.append((ele[0], ele[1] - 1))\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n    \ndef go(ele, visited, sub = []):\n    '''\n    Write a function to recursively explore all the adjacent coordinates of the given coordinate tuple until a goal condition is met.\n    '''\n    # print(ele, visited)\n    if ele in visited:\n        return\n    \n    if ele in goal:\n        return sub\n    \n    visited.append(ele)\n    # print(sub)\n    sub.append(ele)\n    \n    if ele in barrier:\n        return sub\n        \n    for ele in adjac(ele):\n        go(ele, visited, sub)\n    \n    visited.pop()\n    return sub\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    d = {}\n    \n    if (x+1) <= 9:\n        d[(x+1, y)] = 1\n    if (x-1) >= 0:\n        d[(x-1, y)] = 1\n    if (x+1) <= 9 and (y-1) >= 0:\n        d[(x+1, y-1)] = 1\n    if (x-1) >= 0 and (y+1) <= 9:\n        d[(x-1, y+1)] = 1\n    if (x+1) <= 9 and (y+1) <= 9:\n        d[(x+1, y+1)] = 1\n    if (x-1) >= 0 and (y-1) >= 0:\n        d[(x-1, y-1)] = 1\n    \n    if (x+1) <= 9 and (y-1) >= 0:\n        d[(x+1, y-1)] = 1\n    if (x-1) >= 0 and (y+1) <= 9:\n        d[(x-1, y+1)] = 1\n    \n    return d\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        return []\n    x, y = ele\n    if x < 0 or y < 0:\n        return []\n    if x > 3 or y > 3:\n        return []\n    if x == 3 and y == 3:\n        sub = adjac((0,0)) + adjac((1,0)) + adjac((2,0))\n        return sub\n    return adjac((x,y-1)) + adjac((x+1,y-1)) + adjac((x+1,y)) + adjac((x+1,y+1)) + adjac((x,y+1)) + adjac((x-1,y+1)) + adjac((x-1,y)) + adjac((x-1,y-1))\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(l if l!=''else '_' for l in text.split())\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    \ndef remove_first_char(text):\n    '''\n    Write a function to remove the first character in a given string.\n    '''\n    return text[1:]\n    \ndef remove_last_char(text):\n    '''\n    Write a function to remove the last character in a given string.\n    '''\n    return text[:-1]\n    \ndef last_first_char(text):\n    '''\n    Write a function to remove the first and last characters in a given string.\n    '''\n    return text[1:-1]\n    \ndef remove_middle_char(text):\n    '''\n    Write a function to remove the middle character in a given string.\n    '''\n    return text[2:]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    s = text\n    s = s.replace(' ', '_')\n    s = s.replace('_','')\n    return s\n    #return s.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.strip().replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    list_of_spaces = [' ']\n    for i in list_of_spaces:\n        text = text.replace(i, '_')\n    return text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    for i in range(len(words)):\n        if words[i].find(' ')!= -1:\n            words[i] = words[i].replace(' ', '_')\n        else:\n            words[i] = words[i].replace('_','')\n    return''.join(words)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list==[]:\n        return []\n    else:\n        if num_list[0]==0:\n            num_list.append(num_list.pop(0))\n            num_list.append(0)\n            return num_list\n        else:\n            return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    flag = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[flag], num_list[i] = num_list[i], num_list[flag]\n            flag += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    while count < len(num_list):\n        if num_list[count] == 0:\n            del(num_list[count])\n            num_list.append(0)\n        count += 1\n    return num_list\n    \nprint(move_zero([1,2,0,3,4,5,0,6,0,7]))\nprint(move_zero([2,4,6,8,0]))\nprint(move_zero([4,8,0,0,4,5]))\nprint(move_zero([1,4,0,2,0,3,4]))\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for item in num_list:\n        if item!= 0:\n            zero_list.append(item)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = num_list\n    for i in range(len(n)):\n        if n[i] == 0:\n            for j in range(i+1,len(n)):\n                if n[j]!= 0:\n                    n[i], n[j] = n[j], n[i]\n                    break\n            else:\n                continue\n        break\n    return n\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    cnt = 0\n    \n    for i in num_list:\n        if i!= 0:\n            num_list[cnt] = i\n            cnt += 1\n    while cnt < len(num_list):\n        num_list[cnt] = 0\n        cnt += 1\n    return num_list\n    \ndef reverse(num_list):\n    '''\n    Write a python function to reverse the list.\n    '''\n    cnt = 0\n    \n    for i in range(0, len(num_list)):\n        num_list[i] = num_list[i-cnt]\n        cnt += 1\n    return num_list\n    \ndef rotate(num_list, d):\n    '''\n    Write a python function to rotate the given list by d amount.\n    '''\n    cnt = 0\n    \n    for i in range(0, d):\n        temp = num_list[0]\n        for j in range(0, len(num_list)-1):\n            num_list[j] = num_list[j+1]\n        num_list[len(num_list)-1] = temp\n        cnt += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    \n    for j in range(len(num_list)):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    i = 0\n    while i < n:\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n            i += 1\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list.sort()\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index=0\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            num_list[index]=num_list[i]\n            index=index+1\n    for i in range(index,len(num_list)):\n        num_list[i]=0\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            res = res^(arr[i]^arr[j])\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            Sum = Sum + arr[i]^arr[j]\n    print Sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_xor = []\n    for i in range(0,n):\n        for j in range(0,n):\n            if (i!= j):\n                arr_xor.append(int(arr[i]) ^ int(arr[j]))\n    return sum(arr_xor)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Brute Force Solution\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(0, n) :\n        for j in range(i+1, n) :\n            sum = sum + (arr[i] ^ arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 0 : return 0\n    Sum = 0\n    for i in range(n) :\n        Sum = Sum ^ arr[i]\n    return Sum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(arr[i] ^ arr[j] for i in range(n) for j in range(i+1,n))\n    \narr = [1,3,2]\nn = len(arr)\nprint(pair_xor_Sum(arr,n)) \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += xor(arr[i],arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans ^= arr[i] * arr[j]\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if (len(arr) < 2) : \n        return 0\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1, n) : \n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    for i in range(len(heap)):\n        heapq._siftup(heap, i)\n    return list(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        h.append(i)\n    heapq.heapify(h)\n    return [heapq.heappop(h) for i in range(len(h))]\n    \ndef heap_sort_in_place(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    h = []\n    for i in iterable:\n        h.append(i)\n    heapq.heapify(h)\n    for i in range(len(h)):\n        temp = h[0]\n        h[0] = h[-1]\n        h[-1] = temp\n        heapq.heapify(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    _heap_sort(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap_list = []\n    sorted_list = []\n    for number in iterable:\n        heapq.heappush(heap_list, -number)\n    \n    for i in range(len(heap_list)):\n        sorted_list.append(-heapq.heappop(heap_list))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    return (hq.heappop(heap) for _ in range(len(heap)))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    s = []\n    for x in iterable:\n        hq.heappush(s,x)\n    while len(s)!= 0:\n        res.append(hq.heappop(s))\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable)>0:\n        element = hq.heappop(iterable)\n        sorted_list.append(element)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapq.heapify() takes 1 argument and returns None.\n    # The number of items to be stored in the heap must be >= 1.\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [i for i in hq.heappop(h) for i in hq.heappop(h)]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    result = []\n    for i in iterable:\n        hq.heappush(h,i)\n    while h:\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n    \ndef test_heap_sort():\n    from random import randint, sample\n    l = list(sample(range(1, 1000000), k = 100))\n    assert heap_sort(l) == sorted(l)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"no profit no loss\")\n    else:\n        print(\"profit\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    sale_amount = int(sale_amount)\n    if actual_cost-sale_amount <= 0: \n        return 'No Profit'\n    elif actual_cost-sale_amount >= 0:\n        return 'No Loss'\n    \nactual_cost = 100000\nsale_amount = 100000\nprint(noprofit_noloss(actual_cost, sale_amount))"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    print('\\nProfit: %.2f' % actual_cost)\n    print('No Profit or Loss: %s' % actual_cost)\n    \n    if actual_cost >= 0 and actual_cost <= sale_amount:\n        print('Profit and Loss')\n    elif actual_cost < 0 and actual_cost >= sale_amount:\n        print('Profit')\n    else:\n        print('No Profit or Loss')\n    \n    return\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return print(\"No Profit and Losses\")\n    else:\n        return print(\"Profit and Losses\")\nnoprofit_noloss(500,300)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"There is no profit and no loss\")\n    elif actual_cost>sale_amount:\n        print(\"There is profit and there is loss\")\n    elif actual_cost<sale_amount:\n        print(\"There is profit and there is loss\")\n        \nnoprofit_noloss(20,30)\nnoprofit_noloss(20,40)\nnoprofit_noloss(20,50)\nnoprofit_noloss(20,30)\nnoprofit_noloss(20,40)\nnoprofit_noloss(20,50)\nnoprofit_noloss(20,25)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('Yes, no profit or loss')\n    elif actual_cost > sale_amount:\n        print('No Profit and Loss')\n    else:\n        print('No Profit and Loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"No Profit No Loss\"\n    if actual_cost > sale_amount:\n        return \"Profit\"\n    else:\n        return \"Loss\""
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16) * math.pow(t, 0.16)\n    return round(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp = t\n    \n    # define the wind chill in the equation based on the formula\n    wind_chill = 35.74 + 0.6215 * temp - 35.75 * pow(wind_speed, 0.16) + 0.4275 * temp * pow(wind_speed, 0.16)\n    # round to the next integer\n    return math.ceil(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((1.7 + (0.6215 * v**0.16) + ((0.4275 * v**0.16) - 11.37) * math.pow((t + 273.16) / (243.12 + t), 0.16)) * (13.12 + t / 39.6),2)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        if type(v)!= float or type(t)!= float:\n            raise ValueError('Wrong type')\n        if v == 0 or t == 0:\n            raise ZeroDivisionError('ZeroDivisionError')\n    except ValueError as err:\n        print('ValueError:', err)\n    except ZeroDivisionError as err:\n        print('ZeroDivisionError:', err)\n    else:\n        wind_chill = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * t * math.pow(v, 0.16)\n        return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    w = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    return round(w)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (v*1.833) + (5.7 * math.pow((10),(0.6215 * t)))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        print('Invalid wind velocity')\n    else:\n        if t <= 0:\n            print('Invalid temperature')\n        else:\n            v_w = round((0.6215 + (0.2838 * t) - (0.4542 * (v ** 0.16)) + (0.3965 * (v ** 0.16))) * (5/9),2)\n            print('The wind chill is',v_w)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = (35.74 + 0.6215 * t) * (math.pow(v, 0.16)) + 0.4275 * t - 35.75\n    return round(wind_chill_index)\n    \ndef wind_chill_mph(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in mph and a temperature in celsius.\n    '''\n    wind_chill_index = (35.74 + 0.6215 * t) * (math.pow(v, 0.16)) + 0.4275 * t - 35.75\n    return round(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v = float(input(\"Enter the wind velocity in km/h:\"))\n    #t = float(input(\"Enter the temperature in degrees celsius:\"))\n    t = t + 459.67\n    wci = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16\n    wci = math.floor(wci)\n    print(f\"The wind chill index is {wci}\")\n    return wci\nwind_chill(10,0)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill=35.74 + 0.6215 * t - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return math.ceil(chill)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    for name in sample_names:\n        if name[0].islower():\n            print(name[1:])\n        else:\n            print(name)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(sum([len(name) for name in sample_names if name[0].islower()]))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum_len += len(name)\n    return sum_len\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    list_nam = []\n    nam_new = []\n    for i in sample_names:\n        if i!= i.lower():\n            list_nam.append(i)\n    for i in list_nam:\n        if i[0]!= \"n\":\n            nam_new.append(i)\n    return nam_new\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    counter = 0\n    for name in sample_names:\n        if name[0].islower():\n            counter = counter + len(name)\n    print(counter)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(sum([len(name) for name in sample_names if name[0].islower()]))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # given a list of names, returns the number of characters in all names, ignoring any names starting with lowercase letters\n    # nam = ['Bob','Tim','Jane','John']\n    # sample_nam(nam) --> 10\n    # this is the way it would work\n    # for name in nam:\n        # name = name.lower()\n        # if name[0]!= lowercase_letters:\n            # sum += len(name)\n    # return sum\n    # using filter\n    sum = sum(len(name) for name in filter(lambda name: name[0]!= lowercase_letters, sample_names))\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count=0\n    for i in sample_names:\n        if(i[0].islower()):\n            count+=len(i)\n    print(count)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len([name for name in sample_names if not name.islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len([name for name in sample_names if name[0] not in 'abcdefghijklmnopqrstuvwxyz'])\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i] = items[i].replace(')','').replace('(','')\n    return items\n    \ndef get_matching_brackets(items):\n    '''\n    Write a function to get a list of opening and closing brackets.\n    '''\n    opens = []\n    closers = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            opens.append(i)\n        elif items[i] == ')':\n            closers.append(i)\n    return opens, closers\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items=items.replace('(',' ').replace(')',' ')\n    items=items.split(' ')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #TODO: Write a function to remove the parenthesis and what is inbetween them from a string.\n    #to do:\n    '''\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello World'\n    >>> remove_parenthesis(\"Hello World\")\n    'Hello World'\n    >>> remove_parenthesis(\"Hello (World)\")\n    'Hello World'\n    >>> remove_parenthesis(\"Hello (World)\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    >>> remove_parenthesis(\"(Hello (World))\")\n    'Hello (World)'\n    '''\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"Hello World\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"(Hello (World))\")\n    #remove_parenthesis(\"Hello World\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hello (World)\")\n    #remove_parenthesis(\"Hell"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return \"\"\n    if len(items) == 1:\n        if items[0] == \"\":\n            return \"\"\n        elif items[0] == \"(\" and items[-1] == \")\":\n            return \"\"\n        else:\n            return items[0]\n    if items[0] == \"(\" and items[-1] == \")\":\n        return \"\"\n    if items[0] == \"(\":\n        if items[1] == \"(\":\n            if items[2] == \"(\":\n                if items[3] == \"(\":\n                    if items[4] == \"(\":\n                        if items[5] == \"(\":\n                            if items[6] == \"(\":\n                                if items[7] == \"(\":\n                                    if items[8] == \"(\":\n                                        return items[9]\n                                    else:\n                                        return remove_parenthesis(items[8:])\n                                else:\n                                    return remove_parenthesis(items[7:])\n                            else:\n                                return remove_parenthesis(items[6:])\n                    else:\n                        return remove_parenthesis(items[5:])\n                else:\n                    return remove_parenthesis(items[4:])\n            else:\n                return remove_parenthesis(items[3:])\n        else:\n            return remove_parenthesis(items[2:])\n    else:\n        return remove_parenthesis(items[1:])\ndef check_answers(true_answers, solution, num_of_questions):\n    '''\n    Write a function to check whether the answers given by the student and the solution provided are correct or not.\n    '''\n    answers = []\n    for i in range(num_of_questions):\n        pattern = re.compile(r\"\\(([A-Z ]*?)\\)\")\n        answers.append(pattern.findall(solution)[i])\n    for i in range(len(answers)):\n        if true_answers[i]!= answers[i]:\n            return False\n    return True\ndef read_input_from_file(input_file):\n    '''\n    Write a function to read the input file provided and return the list of the input, where each input has a list of \n    words and the list of words has a list of possible answers, the input given by the student is in the first line and \n    the possible answers of each word are in the second line.\n    '''\n    with open(input_file, 'r') as f:\n        lines = f.read().splitlines()\n    num_of_questions = int(lines[0])\n    true_answers = lines[1:]\n    return num_of_questions, true_answers\ndef write_output_to_file(output_file, output_list):\n    '''\n    Write a function to write the output to the output_file.\n    '''\n    with open(output_file, 'w') as f:\n        f.write(output_list[0])\n        for i in range(1, len(output_list)):\n            f.write(output_list[i])\n        f.write(\"\\n\")\nif __name__ == \"__main__\":\n    num_of_questions, true_answers = read_input_from_file(\"input.txt\")\n    question_count = 1\n    solution_list = []\n    while question_count <= num_of_questions:\n        if question_count == 1:\n            string_of_answers = \" \".join(true_answers)\n            solution = remove_parenthesis(string_of_answers)\n            if len(solution) == 0:\n                solution = \"()\"\n        else:\n            if question_count == 2:\n                string_of_answers = \" \".join(true_answers)\n                solution = remove_parenthesis(string_of_answers)\n                if len(solution) == 0:\n                    solution = \"()\"\n            else:\n                string_of_answers = \" \".join(true_answers)\n                solution = remove_parenthesis(string_of_answers)\n                if len(solution) == 0:\n                    solution = \"()\"\n        solution_list.append(solution)\n        true_answers = list(true_answers)\n        question_count = question_count + 1\n    print(solution_list)\n    output_list = []\n    for i in range(len(solution_list)):\n        string_of_solution = solution_list[i]\n        num_of_answers = 0\n        for j in range(len(string_of_solution)):\n            if string_of_solution[j] == \")\":\n                num_of_answers = num_of_answers + 1\n        if num_of_answers == 0:\n            string_of_solution = \"(()\"\n        else:\n            if num_of_answers == 1:\n                string_of_solution = \"(\" + string_of_solution\n            else:\n                string_of_solution = \"(\" + string_of_solution + \")\"\n        output_list.append(string_of_solution)\n    print(output_list)\n    output_list.reverse()\n    print(output_list)\n    output_list.reverse()\n    print(output_list)\n    correct = 0\n    for i in range(len(output_list)):\n        if check_answers(true_answers, output_list[i], num_of_questions):\n            correct = correct + 1\n    print(\"Correct answers: \" + str(correct))\n    write_output_to_file(\"output.txt\", output_list"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'[(][\\w ]+[)]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items is None:\n        return items\n    p_items = []\n    for item in items:\n        if item == '(' or item == ')':\n            p_items.append(item)\n    items = items.replace('(','').replace(')','').split(' ')\n    new_items = []\n    for item in items:\n        if item == '':\n            pass\n        elif item == '(':\n            if p_items[0] == ')':\n                new_items.append(item)\n        elif item == ')':\n            if p_items[1] == '(':\n                new_items.append(item)\n        else:\n            new_items.append(item)\n    new_items =''.join(new_items)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|(\\))', items)\n    result = []\n    for item in items:\n        if '(' not in item:\n            result.append(item)\n        else:\n            result.append(item[:item.index('(')])\n    return ''.join(result)\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items)==0:\n        return\n    items = re.split('(\\()|("
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    # initialize a list\n    items_list = list(items)\n    items_clean = []\n    \n    # check if item is in between parenthesis or not\n    for i in items_list:\n        if i == '(' or i == ')':\n            items_clean.append(i)\n        else:\n            # if not in between parenthesis, then check whether in between parenthesis or not\n            if items_list.index(i)!= 0:\n                if items_list[items_list.index(i)-1] == '(' and items_list[items_list.index(i)+1] == ')':\n                    continue\n            items_clean.append(i)\n    \n    # convert list to string\n    items_clean = ''.join(items_clean)\n    \n    return items_clean\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return ''\n    else:\n        return items[items.index('(') + 1 : items.index(')')]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    items = items.split(' ')\n    return items[0]\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2*is_nonagonal(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a=0\n    i=1\n    while(a<n):\n        if i%2==0:\n            a+=1\n            if a==n:\n                break\n            i+=1\n        else:\n            a+=1\n            if a==n:\n                break\n            i+=1\n    return a\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(pow(n, 0.5))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nonagonal_number(n): \n        '''\n        Create a nonagonal number function to find the nth non-diagonal number. \n        '''\n        n -= 1\n        return n*(n+1)//2\n    \n    return nonagonal_number(n)\n    "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #create a list of length n\n    #set the first number in the list to 1\n    #for every i in range 2,n, set the nth number to the sum of the i'th number and the i+1'th number\n    #pop off the 0th number and add it to the end\n    \n    nums = range(1,n+1)\n    for i in range(2,n+1):\n        nums.append(sum(nums[i-1::i]))\n    return nums.pop(0)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2 \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2+1)**0.5\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(range(n*n,n,-1))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(\" \", \"\")\n    # text = re.sub('^z', '', text)\n    # text = re.sub('z$', '', text)\n    \n    middle = text[1:-1]\n    print(middle)\n    middle = re.sub('^z', '', middle)\n    middle = re.sub('z$', '', middle)\n    print(middle)\n    \n    return middle\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    middle_pattern = re.compile(r\"z\")\n    # return middle_pattern.search(text)\n    return middle_pattern.search(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split()\n    middle_words = []\n    for word in words:\n        if word.isupper():\n            if word.istitle():\n                middle_words.append(word[0].lower() + word[1:])\n            else:\n                middle_words.append(word[0].lower() + word[1:])\n        else:\n            if word.istitle():\n                middle_words.append(word[0].upper() + word[1:])\n            else:\n                middle_words.append(word[0].upper() + word[1:])\n    return''.join(middle_words)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = 'How now brown cow?'\n    #text = 'This is a cat.'\n    #print('String - ', text)\n    #print('Word - ', re.split(\" \", text))\n    #text =' This is a cat.   '\n    #print('String - ', text)\n    #print('Word - ', re.split(\" \", text))\n    #text = 'This is a cat.This is a cat.This is a cat.'\n    #print('String - ', text)\n    #print('Word - ', re.split(\" \", text))\n    #text = 'This is a cat.This is a cat.This is a cat.This is a cat.'\n    #print('String - ', text)\n    #print('Word - ', re.split(\" \", text))\n    words = text.split(' ')\n    #print('Words - ', words)\n    pattern = re.compile(r'\\bz\\b')\n    #print(re.search(pattern, 'z'))\n    for word in words:\n        if re.search(pattern, word) == None:\n            return False\n    return True\n    "
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.split()\n    count = 0\n    for word in text:\n        if word == 'z':\n            count += 1\n    print(count)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    x = 0\n    x = text.find('z', 0)\n    if x == -1:\n        return False\n    x = text.find('z', x + 1)\n    if x == -1:\n        return False\n    x = text.find('z', x + 1)\n    if x == -1:\n        return False\n    x = text.find('z', x + 1)\n    if x == -1:\n        return False\n    x = text.find('z', x + 1)\n    if x == -1:\n        return False\n    x = text.find('z', x + 1)\n    if x == -1:\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text ='This is a string of text.'\n    wordz = re.findall(r'\\b[a-z]+\\b', text)\n    return wordz\nprint(text_match_wordz_middle(text))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\b[^z]*z\\b', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.search(regex,text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    regex = r'\\bz\\b'\n    if re.searc"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'[^a-z]+')\n    return pattern.search(text) == None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #for num in range(k+1):\n    while k > 0: \n        #reverse(input, num, len(input) - 1)\n        input[k], input[len(input) - 1] = input[len(input) - 1], input[k]\n        k -= 1\n    return input \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = 0\n    count = 0\n    while True:\n        if count == k:\n            break\n        else:\n            rev = rev * 10 + input[count]\n            count += 1\n    return rev\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return None\n    start = 0\n    end = len(input) - 1\n    while start <= end:\n        while start <= end:\n            if input[start] == k:\n                return input[start:] + input[:start]\n            start += 1\n        if start > end:\n            break\n        end -= 1\n    return None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = input\n    for i in range(k):\n        a.reverse()\n    return a\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input.reverse()\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    res = []\n    while input:\n        res.append(input.pop())\n    return res[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # solution 2:\n    # array = list(range(1, input + 1))\n    # i = 0\n    # while i < k:\n    #     array.append(array[i])\n    #     i += 1\n    #     del array[0]\n    # return array\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the output array\n    output = [0] * len(input)\n    # Iterate the input array\n    for i in range(len(input)):\n        # Initialize the index\n        j = len(input) - 1\n        # Traverse the output array\n        while j >= i:\n            # Store the current element at\n            # the current index\n            output[j] = input[j]\n            # Decrement the index\n            j -= 1\n        # Move the elements of the input array\n        # to the end of the output array\n        for j in range(i, len(input)):\n            input[j] = output[j]\n    # Driver code\n    input = list(map(int, input.split()))\n    k = int(k)\n    reverse_Array_Upto_K(input, k)\n    print(' '.join(str(x) for x in input))\n    \nreverse_Array_Upto_K(input, k)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    l = len(arr) \n    if k == l: \n        return arr\n    if k > l:\n        print(\"Can't reverse the array upto this position\")\n        return\n    if k < 0: \n        k = k + l\n    for i in range(k): \n        arr[i], arr[l - i - 1] = arr[l - i - 1], arr[i] \n    return arr \n    \ndef swap_Pairs(arr): \n    '''\n    Write a python function to swap two adjacent pairs of numbers in an array.\n    '''\n    i = 0\n    n = len(arr)\n    while i < n - 1: \n        if arr[i] > arr[i + 1]: \n            arr[i], arr[i + 1] = arr[i + 1], arr[i] \n        i += 2\n    return arr \n    \ndef merge_Sorted_Arrays(arr1, arr2): \n    '''\n    Write a python function to merge two sorted arrays.\n    '''\n    res = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res += arr1[i:]\n    res += arr2[j:]\n    return res\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = n - 1\n    count = 0\n    while(start <= end):\n        while(count < k):\n            # print(start, end)\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            count += 1\n            end -= 1\n        start += 1\n        end = n - 1\n        count = 0\n    return input\n    \ndef bubbleSort_nearly(input):\n    n = len(input)\n    count = 0\n    swapped = True\n    while(swapped == True):\n        swapped = False\n        for i in range(1,n-count):\n            if(input[i-1] > input[i]):\n                input[i-1], input[i] = input[i], input[i-1]\n                swapped = True\n        count += 1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup + tuple(test_dict.items())))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for item in test_dict:\n        test_tup += (item,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if test_tup is None or len(test_tup)==0:\n        return (test_dict)\n    else:\n        return (test_tup[0].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup[0].update(test_dict)))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return float('inf')\n    n = len(cost)\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i][j-1], dp[i-1][j])\n    \n    return max(dp[-1])/n if dp[-1] else float('inf')\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We need to keep track of the indices of the matrix as well.\n    \n    # Initialize the first cell and its index.\n    i = 0\n    j = 0\n    \n    # Initialize two lists to track the num of cells\n    # visited and the average cost of the path.\n    \n    n = len(cost)\n    cost = [[0] + cost[i] + [0] for i in range(n)] + [[0] * n]\n    visited = [[0] * n] * n\n    \n    # Initialize the cost of the first cell.\n    cost[i][j] = 0\n    \n    # Initialize the array to keep track of the average cost\n    # of each path.\n    average = []\n    \n    # Initialize the number of cells in each path.\n    num_cells = 0\n    \n    # Initialize the count of paths.\n    count = 1\n    \n    # Loop while the rightmost cell is not visited yet.\n    while visited[i][j]!= 1:\n        \n        # If the j value is not in the range, then it cannot\n        # be visited as we cannot move right. So we increment\n        # the j and check for the next cell to be visited.\n        if j + 1 >= n:\n            j = j - 1\n            continue\n        \n        # If the i value is not in the range, then it cannot\n        # be visited as we cannot move down. So we increment\n        # the i and check for the next cell to be visited.\n        if i + 1 >= n:\n            i = i - 1\n            continue\n        \n        # If we reach the rightmost cell, we can increment the\n        # number of cells in the path.\n        if j == n - 1:\n            count += 1\n            \n        # Increment the j and i values.\n        j += 1\n        i += 1\n        \n        # If the j and i values are not in the range, then the\n        # path cannot be visited. So we decrement i and j\n        # and check for the next cell to be visited.\n        if i == n or j == n:\n            i = i - 1\n            j = j - 1\n            continue\n        \n        # If the cost of the cell is lesser than the cost of\n        # the previous cell, then update the cost.\n        if cost[i][j] < cost[i][j - 1]:\n            cost[i][j] = cost[i][j - 1]\n        \n        # If the cost of the cell is greater than the cost of\n        # the previous cell, then update the cost.\n        elif cost[i][j] > cost[i - 1][j]:\n            cost[i][j] = cost[i - 1][j]\n        \n        # Since the cost is updated, update the visited array.\n        visited[i][j] = 1\n        \n        # Update the number of cells in each path.\n        num_cells += 1\n        \n        # Update the count.\n        count += 1\n    \n    # Compute the average by dividing the total cost\n    # by the number of cells in each path.\n    \n    for i in range(n):\n        for j in range(n):\n            average.append(cost[i][j] / count)\n            \n    # Return the average.\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0 or n == 1:\n        return -1\n    visited = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        visited[0][i] = 1\n    for i in range(n):\n        visited[i][n-1] = 1\n    for i in range(n-1):\n        visited[n-1][i] = 1\n    for i in range(n-1):\n        visited[i][0] = 1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #print('Cost matrix is: ',cost)\n    #cost = [[0, 4, 0], [2, 2, 5], [1, 3, 1]]\n    n = len(cost)\n    print('Row length: ',n)\n    m = len(cost[0])\n    print('Col length: ',m)\n    #for i in range(m):\n        #print(cost[0][i])\n    '''\n    An \"unvisited\" cell is defined as one with a value of 0.\n    '''\n    unvisited = set([i for i in range(m * n)])\n    print('Unvisited set: ',unvisited)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0 and j!= 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0 and i!= 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    print(dp)\n    max = dp[n-1][n-1]\n    if n % 2 == 0:\n        for i in range(n//2,n):\n            for j in range(n//2,n):\n                if i == n//2 and j == n//2:\n                    continue\n                elif j == n//2 and i!= n//2:\n                    max = max if max >= dp[i][j] else dp[i][j]\n                elif i == n//2 and j!= n//2:\n                    max = max if max >= dp[i][j] else dp[i][j]\n                else:\n                    max = max if max >= (dp[i][j] + dp[i+1][j] + dp[i][j+1] + dp[i+1][j+1]) else (dp[i][j] + dp[i+1][j] + dp[i][j+1] + dp[i+1][j+1])\n    else:\n        for i in range(n//2,n):\n            for j in range(n//2,n):\n                if i == n//2 and j == n//2:\n                    continue\n                elif i == n//2 and j!= n//2:\n                    max = max if max >= dp[i][j] else dp[i][j]\n                elif j == n//2 and i!= n//2:\n                    max = max if max >= dp[i][j] else dp[i][j]\n                else:\n                    max = max if max >= (dp[i][j] + dp[i+1][j] + dp[i][j+1] + dp[i+1][j+1]) else (dp[i][j] + dp[i+1][j] + dp[i][j+1] + dp[i+1][j+1])\n    return max\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = [[0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    cost_sum = 0\n    max_avg = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if visited[i][j] == 0:\n                # if we have not visited the cell, then update the total cost of the path and increment the count\n                if i == 0 and j == 0:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                    max_avg = max_avg + cost[i][j]\n                # if we are inside the same cell of the first cell of the path, then add the cost\n                elif i == 0 and j > 0 and j < len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the right cell of the first cell of the path, then add the cost\n                elif j == 0 and i > 0 and i < len(cost) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the bottom cell of the first cell of the path, then add the cost\n                elif i == len(cost) - 1 and j == len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are inside the same cell of the last cell of the path, then add the cost\n                elif i == len(cost) - 1 and j == len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the right cell of the last cell of the path, then add the cost\n                elif j == len(cost[0]) - 1 and i > 0 and i < len(cost) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the bottom cell of the last cell of the path, then add the cost\n                elif i == 0 and j == len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are inside the same cell of the first cell of the path, then add the cost\n                elif i > 0 and i < len(cost) - 1 and j > 0 and j < len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the right cell of the first cell of the path, then add the cost\n                elif i == len(cost) - 1 and j == len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are inside the same cell of the last cell of the path, then add the cost\n                elif i == len(cost) - 1 and j > 0 and j < len(cost[0]) - 1:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are on the bottom cell of the last cell of the path, then add the cost\n                elif i > 0 and i < len(cost) - 1 and j == 0:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                # if we are outside the path, then add the cost\n                else:\n                    cost_sum += cost[i][j]\n                    visited[i][j] = 1\n                if cost_sum > max_avg:\n                    max_avg = cost_sum\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    avg = 0\n    max_avg = 0\n    visited = set()\n    \n    for i in range(n):\n        visited.add((0, i))\n    for j in range(n):\n        visited.add((j, n - 1))\n    \n    q = deque()\n    \n    while len(visited)!= 0:\n        curr = visited.popleft()\n        if curr not in visited and curr in q:\n            avg += cost[curr[1]][curr[0]]\n        \n        if curr in q:\n            for i in range(4):\n                curr_r, curr_c = curr[0] + dirs[i][0], curr[1] + dirs[i][1]\n                if 0 <= curr_r < n and 0 <= curr_c < n and (curr_r, curr_c) not in visited:\n                    if curr_r == 0 and curr_c == n - 1:\n                        if max_avg < avg:\n                            max_avg = avg\n                        avg = 0\n                    visited.add((curr_r, curr_c))\n                    q.append((curr_r, curr_c))\n        \n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = [[False for i in range(len(cost))] for j in range(len(cost))]\n    total = 0\n    \n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            if not visited[i][j]:\n                total = total + cost[i][j]\n                \n                # Use DFS to find the minimum cost path, and mark the cells as visited\n                dfs(cost, i, j, visited)\n                \n    return total / (len(cost) * len(cost))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for j in range(n-1, -1, -1):\n        dp[j][n-1] = cost[j][n-1]\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(i, j+1):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + cost[i][j])\n    return dp[0][0] / n\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Time: O(n*m)\n    # Space: O(n)\n    if len(cost) == 0:\n        return 0\n    n = len(cost)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                continue\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                continue\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n    return (sum(dp[n-1])/len(dp[n-1]))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dic = {}\n    for k in students.keys():\n        if students[k][0] >= h and students[k][1] >= w:\n            dic[k] = students[k]\n    return dic\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=[]\n    for student in students:\n        if students[student][0]<h and students[student][1]>w:\n            data.append(student)\n    return data\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height = []\n    weight = []\n    for i in students.items():\n        height.append(i[1][0])\n        weight.append(i[1][1])\n    \n    height.sort()\n    weight.sort()\n    #print(height)\n    #print(weight)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: (height,weight) for name,(height,weight) in students.items() if height>h and weight>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {\n        'Mahmoud': (1.73,60.5),\n        'Sami': (1.68, 60.5),\n        'Ahmed': (1.61, 60.5),\n        'Yousuf': (1.60, 60.5),\n        'Hussam': (1.53, 60.5),\n        'Sara': (1.52, 60.5),\n        'Sourad': (1.53, 60.5),\n        'Mahmoud': (1.75, 70.5),\n        'Sami': (1.65, 70.5),\n        'Ahmed': (1.50, 70.5),\n        'Yousuf': (1.55, 70.5),\n        'Hussam': (1.65, 70.5),\n        'Sara': (1.65, 70.5),\n        'Sourad': (1.65, 70.5),\n        'Mahmoud': (1.78, 80.5),\n        'Sami': (1.68, 80.5),\n        'Ahmed': (1.70, 80.5),\n        'Yousuf': (1.71, 80.5),\n        'Hussam': (1.69, 80.5),\n        'Sara': (1.70, 80.5),\n        'Sourad': (1.71, 80.5),\n        'Mahmoud': (1.85, 90.5),\n        'Sami': (1.74, 90.5),\n        'Ahmed': (1.72, 90.5),\n        'Yousuf': (1.80, 90.5),\n        'Hussam': (1.78, 90.5),\n        'Sara': (1.79, 90.5),\n        'Sourad': (1.80, 90.5),\n        'Mahmoud': (1.85, 100),\n        'Sami': (1.74, 100),\n        'Ahmed': (1.72, 100),\n        'Yousuf': (1.80, 100),\n        'Hussam': (1.78, 100),\n        'Sara': (1.79, 100),\n        'Sourad': (1.80, 100),\n        'Mahmoud': (1.85, 110),\n        'Sami': (1.74, 110),\n        'Ahmed': (1.72, 110),\n        'Yousuf': (1.80, 110),\n        'Hussam': (1.78, 110),\n        'Sara': (1.79, 110),\n        'Sourad': (1.80, 110),\n    }\n    list_h = []\n    list_w = []\n    for k, v in students.items():\n        h = v[0]\n        w = v[1]\n        if h >= h_min and w >= w_min:\n            list_h.append(h)\n            list_w.append(w)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for key in students.keys():\n        if students[key][0] > h or students[key][1] > w:\n            result.append(key)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # result = {}\n    # for i in students:\n    #     if students[i][0] >= h and students[i][1] >= w:\n    #         result[i] = students[i]\n    #         print(students[i])\n    #     else:\n    #         pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height_list = []\n    weight_list = []\n    for i in range(len(students)):\n        height_list.append(students[i][0])\n        weight_list.append(students[i][1])\n    if (h>min(height_list)) and (w>min(weight_list)):\n        return students\n    else:\n        return {}\n    #print(students)"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_result = {}\n    for student, value in students.items():\n        if (value[0] and value[1]) > h and value[1] > w:\n            students_result[student] = value\n    return students_result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for key,value in students.items():\n        if value[0]>=h and value[1]>=w:\n            print(\"Name: {}, Height: {} cm, Weight: {} kg\".format(key,value[0],value[1]))\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    index = 0\n    count = 0\n    while index < len(nums1):\n        if nums1[index] == nums2[index]:\n            count += 1\n        index += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # N=len(nums1)\n    # M=len(nums2)\n    # count=0\n    # for i in range(N):\n    #     for j in range(M):\n    #         if nums1[i]==nums2[j]:\n    #             count+=1\n    # return count\n    return sum(1 for i in range(len(nums1)) if nums1[i]==nums2[i])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    index_same_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            index_same_pair += 1\n    return index_same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    '''\n    create a dictionary\n    iterate through list 2 and check if nums1[i] is in the dictionary\n    '''\n    dictionary = {}\n    for i in range(len(nums1)):\n        dictionary[nums1[i]] = 0\n    for i in range(len(nums2)):\n        dictionary[nums2[i]] = 1\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in dictionary:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l = len(nums1)\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    count = 0\n    for i in range(l):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    \n    total = 0\n    while True:\n        total += base\n        if total > 10**(power-1):\n            return total\n        elif total == 0:\n            break\n        base = base//10\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += int(base) ** (i+1)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Your code here\n    sum = 0\n    base = str(base)\n    power = str(power)\n    for i in range(len(power)):\n        sum += int(base[i]) ** int(power[i])\n    return sum\n    "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    result = base\n    for index in range(0, power):\n        sum += result % 10\n        result = result // 10\n    return sum\n    \ndef power_to_base(base, power, value):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    result = value\n    for index in range(0, power):\n        sum += result % base\n        result = result // base\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0, power):\n        sum += (base ** i)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if (base > 9) or (power > 9):\n        print(\"Invalid base or power\")\n        return\n    elif base == 0:\n        return 0\n    elif base == 1:\n        return power\n    else:\n        if power == 0:\n            return 1\n        else:\n            return ((base**power) % 10)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert(base<=10 and power>=1 and power<=100)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base >= 0, 'Negative numbers are not allowed'\n    assert power >= 0, 'Negative numbers are not allowed'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = str(power)\n    power_base_sum = 0\n    for i in range(len(base)):\n        power_base_sum += int(base[i]) ** int(power[i])\n    return power_base_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    s1 = re.findall(r\"\\\"(.*?)\\\"\", text1)\n    return s1\ndef extract_name(text1):\n    '''\n    Write a function to extract name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=:).*?(?=\\n)\", text1)\n    return s1\ndef extract_address(text1):\n    '''\n    Write a function to extract address of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_mobile_number(text1):\n    '''\n    Write a function to extract mobile number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\d+\", text1)\n    return s1\ndef extract_sender_info(text1):\n    '''\n    Write a function to extract sender information of the given string.\n    '''\n    s1 = re.findall(r\"(?<=:).*?(?=\\n)\", text1)\n    return s1\ndef extract_date(text1):\n    '''\n    Write a function to extract date of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_time(text1):\n    '''\n    Write a function to extract time of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_email_address(text1):\n    '''\n    Write a function to extract email address of the sender of the given string.\n    '''\n    s1 = re.findall(r\"[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+\", text1)\n    return s1\ndef extract_age(text1):\n    '''\n    Write a function to extract age of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=:).*?(?=\\n)\", text1)\n    return s1\ndef extract_gender(text1):\n    '''\n    Write a function to extract gender of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_state(text1):\n    '''\n    Write a function to extract state of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_city(text1):\n    '''\n    Write a function to extract city of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(?<=,).*?(?=\\n)\", text1)\n    return s1\ndef extract_zip_code(text1):\n    '''\n    Write a function to extract zip code of the sender of the given string.\n    '''\n    s1 = re.findall(r\"[0-9]+\", text1)\n    return s1\ndef extract_name_and_email(text1):\n    '''\n    Write a function to extract name and email address of the sender of the given string.\n    '''\n    s1 = re.findall(r\"[A-Za-z]+[\\w\\.\\+-]+@[a-z0-9-]+\\.[a-z]+\", text1)\n    return s1\ndef extract_first_name(text1):\n    '''\n    Write a function to extract first name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_last_name(text1):\n    '''\n    Write a function to extract last name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(.*)\\s\", text1)\n    return s1\ndef extract_middle_name(text1):\n    '''\n    Write a function to extract middle name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"(.*)\\s\", text1)\n    return s1\ndef extract_name_and_surname(text1):\n    '''\n    Write a function to extract name and surname of the sender of the given string.\n    '''\n    s1 = re.findall(r\"[A-Za-z]+\\s[A-Za-z]+\", text1)\n    return s1\ndef extract_name_and_last_name(text1):\n    '''\n    Write a function to extract name and last name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_first_name_and_email(text1):\n    '''\n    Write a function to extract first name and email address of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_first_surname(text1):\n    '''\n    Write a function to extract first surname of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\s(.*)\", text1)\n    return s1\ndef extract_last_surname(text1):\n    '''\n    Write a function to extract last surname of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\s(.*)\", text1)\n    return s1\ndef extract_phone_number(text1):\n    '''\n    Write a function to extract phone number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\d+\", text1)\n    return s1\ndef extract_number(text1):\n    '''\n    Write a function to extract number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\d+\", text1)\n    return s1\ndef extract_age_and_name(text1):\n    '''\n    Write a function to extract age and name of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_age_and_surname(text1):\n    '''\n    Write a function to extract age and surname of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_age_and_phone_number(text1):\n    '''\n    Write a function to extract age and phone number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_age_and_number(text1):\n    '''\n    Write a function to extract age and number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_age_and_name_and_number(text1):\n    '''\n    Write a function to extract age, name and number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"^(.*)\\s\", text1)\n    return s1\ndef extract_address_and_phone_number(text1):\n    '''\n    Write a function to extract address and phone number of the sender of the given string.\n    '''\n    s1 = re.findall(r\"\\s(.*)\\s\", text1)\n    return s1\ndef extract_name_and_date(text1):\n    '''\n    Write a function to extract name and date of the sender of the given string.\n    '''\n    s"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    final_string=''\n    if '\"' in text1:\n        text=text1.split('\"')\n        for i in text:\n            final_string=final_string+i+' '\n        final_string=final_string.strip()\n        final_string=final_string.replace(' ','')\n    elif \"'\" in text1:\n        text=text1.split(\"'\")\n        for i in text:\n            final_string=final_string+i+' '\n        final_string=final_string.strip()\n        final_string=final_string.replace(' ','')\n    return final_string\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = r'\\\"(.+?)\\\"'\n    text2 = re.findall(pattern, text1)\n    print(text2)\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    text1 = re.sub('[^\\w]','', text1)\n    text1 = text1.split()\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    extracted_string = re.findall('\"[^\"]+\"', text1)\n    return extracted_string\nprint(extract_quotation(\"\"\"This is a string with some quoted words. \"This\" too.\"\"\"))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall(r\"\\\"(.*?)\\\"\", text1)\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Function 1\n    #Original\n    #text1 = \"I'm a string with multiple words and single quotes 'hello'\"\n    #text2 = 'I\\'m a string with multiple words and single quotes \"hello\"'\n    #text3 = 'I\\'m a string with multiple words and single quotes \"hello\\'hello\"'\n    #text4 = 'I\\'m a string with multiple words and single quotes \"hello\"hello\"'\n    #text5 = 'I\\'m a string with multiple words and single quotes \"hello\"\"hello\"'\n    #text6 = 'I\\'m a string with multiple words and single quotes \"hello\"\"hello\"\"hello\"'\n    #text7 = 'I\\'m a string with multiple words and single quotes \"hello\\\\\\'hello\\\\\\'hello\"'\n    #text8 = 'I\\'m a string with multiple words and single quotes \"hello\\\\\\'hello\\\\\\'hello\\\\\\'hello\"'\n    #text9 = 'I\\'m a string with multiple words and single quotes \"hello\\\\hello\\\\hello\\\\hello\"'\n    #text10 = 'I\\'m a string with multiple words and single quotes \"hello\\\\hello\\\\hello\\\\hello\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"(.*?)\\\"(.*)\\\"(.*)\")\n    found = pattern.findall(text1)\n    if found:\n        return found\n    else:\n        return 0\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"\\\"(.*?)\\\"\"\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0, len(test_tup)-1):\n        result = result + (test_tup[i] * test_tup[i + 1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    total = 1\n    for i in test_tup:\n        total = total * i\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return test_tup\n    else:\n        return (test_tup[0] * test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    if N < 1:\n        return (test_tup)\n    return(test_tup[0] * test_tup[1:N + 1])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    ans = []\n    for i in range(len(test_tup)-1):\n        ans.append(test_tup[i]*test_tup[i+1])\n    ans.append(test_tup[-1])\n    return ans\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    num_tup = len(test_tup)\n    new_tup = list(test_tup)\n    for i in range(1,num_tup):\n        new_tup[i] = test_tup[i-1] * test_tup[i]\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] *= (i+1)\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    new_tup = []\n    for i in range(n):\n        new_tup.append(test_tup[i]*(i+1))\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    for i in range(len(tup)-1):\n        tup[i] = tup[i] * tup[i+1]\n    return tuple(tup)\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # print(type(lst1))\n    # print(type(lst2))\n    # return lst1 + lst2\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n    \n    \ndef square_list(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns a list of the square of the numbers in the list.\n    '''\n    lst2 = []\n    for i in range(len(lst1)):\n        lst2.append(lst1[i]**2)\n    return lst2\n    \ndef reverse_list(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns a list of the numbers in the list in reverse order.\n    '''\n    lst2 = lst1[::-1]\n    return lst2\n    \n    \ndef list_length(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns the length of the list.\n    '''\n    return len(lst1)\n    \ndef is_prime(n):\n    '''\n    Write a function takes as input a positive integer n and returns True if n is prime and False if n is not prime.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef prime_numbers(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns a list of the numbers in the list which are prime numbers.\n    '''\n    lst2 = []\n    for i in range(len(lst1)):\n        if is_prime(lst1[i]) == True:\n            lst2.append(lst1[i])\n    return lst2\n    \ndef factors_of_n(n):\n    '''\n    Write a function takes as input a positive integer n and returns a list of the numbers from 1 to n which are divisors of n.\n    '''\n    lst3 = []\n    for i in range(1,n+1):\n        if n%i==0:\n            lst3.append(i)\n    return lst3\n    \ndef gcd(a,b):\n    '''\n    Write a function takes as input two positive integers a and b and returns the greater of two integers which are the greatest common divisor of a and b.\n    '''\n    while b!= 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n    \ndef is_prime_2(n):\n    '''\n    Write a function takes as input a positive integer n and returns True if n is prime and False if n is not prime.\n    '''\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef prime_numbers_2(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns a list of the numbers in the list which are prime numbers.\n    '''\n    lst2 = []\n    for i in range(len(lst1)):\n        if is_prime_2(lst1[i]) == True:\n            lst2.append(lst1[i])\n    return lst2\n    \ndef factorial(n):\n    '''\n    Write a function takes as input a positive integer n and returns n! if n is a non-negative integer. Otherwise, it should return 0.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef nth_order_fibonacci(n):\n    '''\n    Write a function takes as input a positive integer n and returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return nth_order_fibonacci(n-1)+nth_order_fibonacci(n-2)\n        \ndef reverse_string(s):\n    '''\n    Write a function takes as input a string s and returns the reverse of the given string.\n    '''\n    lst = list(s)\n    new = []\n    for i in range(len(lst)):\n        new.append(lst.pop())\n    return ''.join(new)\n    \ndef is_palidrome(s):\n    '''\n    Write a function takes as input a string s and returns True if s is a palindrome, otherwise False.\n    '''\n    if reverse_string(s) == s:\n        return True\n    else:\n        return False\n        \ndef sum_string(s1,s2):\n    '''\n    Write a function takes as input two strings s1 and s2 and returns the sum of the two strings.\n    '''\n    sum = 0\n    for i in range(len(s1)):\n        sum = s1[i] + s2[i] + sum\n    return sum\n    \ndef lcm(a,b):\n    '''\n    Write a function takes as input two positive integers a and b and returns their greatest common divisor.\n    '''\n    if a == b:\n        return a\n    elif a > b:\n        for i in range(b,a,b):\n            if i % a == 0:\n                return i\n    else:\n        for i in range(a,b,a):\n            if i % b == 0:\n                return i\n    \ndef factorial_recursive(n):\n    '''\n    Write a function takes as input a positive integer n and returns n!. If n is 0 or 1, then return 1.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\n        \ndef list_sum(lst1,lst2):\n    '''\n    Write a function takes as input two lists of numbers lst1 and lst2 and returns a list which is the sum of lst1 and lst2.\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n    \ndef square_root(n):\n    '''\n    Write a function takes as input a positive integer n and returns its square root. If n is not a perfect square, return floor(sqrt(n)).\n    '''\n    while n > 1:\n        temp = n\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n*3)+1\n    return temp\n    \ndef digits(n):\n    '''\n    Write a function takes as input a positive integer n and returns the digits of n in a list.\n    '''\n    lst = []\n    while n>0:\n        lst.append(n%10)\n        n = n//10\n    return lst\n    \ndef digits_2(n):\n    '''\n    Write a function takes as input a positive integer n and returns the digits of n in a list.\n    '''\n    if n == 0:\n        return []\n    else:\n        return digits(n//10)+[n%10]\n    \ndef is_prime_3(n):\n    '''\n    Write a function takes as input a positive integer n and returns True if n is prime and False if n is not prime.\n    '''\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef prime_numbers_3(lst1):\n    '''\n    Write a function takes as input a list of numbers [x_1,...,x_n] and returns a list of the numbers in the list which are prime numbers.\n    '''\n    lst2 = []\n    for i in range(len(lst1)):"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=np.array(lst1)\n    lst2=np.array(lst2)\n    lst3=np.array(lst1+lst2)\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = []\n    for i in range(0,len(lst1)):\n        s.append(lst1[i]+lst2[i])\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a = list(map(lambda x, y: x + y, lst1, lst2))\n    return a\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    if len(lst1)!= len(lst2):\n        return \"Error: the length of the two lists are not equal\"\n    else:\n        for i in range(len(lst1)):\n            sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    print(lst1+lst2)\n    \ndef mult_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    print(lst1*lst2)\n    \ndef average_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the average of the elements in the lists.\n    '''\n    print((sum(lst1) + sum(lst2))/2)\n    \ndef subtract_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    print(lst1-lst2)\n    \ndef is_list_equal(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns True if the lists are equal or False if they are not.\n    '''\n    print(lst1==lst2)\n    \ndef is_list_odd_even(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns True if the list is of odd length and False if it is of even length.\n    '''\n    print(len(lst1)%2==0)\n    \ndef list_length(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the length of the list.\n    '''\n    print(len(lst1))\n    \ndef list_sum_odd(lst1):\n    '''\n    Write a function takes as input a list [a_1,...,a_n] and returns the sum of all the elements of the list if they are odd.\n    '''\n    print(sum(lst1) if lst1 else None)\n    \ndef list_sum_even(lst1):\n    '''\n    Write a function takes as input a list [a_1,...,a_n] and returns the sum of all the elements of the list if they are even.\n    '''\n    print(sum(lst1) if not lst1 else None)\n    \ndef list_sum(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the sum of the elements of the list.\n    '''\n    print(sum([lst1,lst2]))\n    \ndef list_min_max(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the minimum and maximum elements of the list.\n    '''\n    print((min(lst1),max(lst1)))\n    \ndef list_length_short(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the length of the list if the length is shorter than 5.\n    '''\n    print(len(lst1) if len(lst1)<5 else None)\n    \ndef list_concatenate(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the concatenation of the lists.\n    '''\n    print(lst1+lst2)\n    \ndef list_add(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and returns the addition of the elements of the lists.\n    '''\n    print(lst1+lst2)\n    \ndef list_multiply(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and returns the multiplication of the elements of the lists.\n    '''\n    print(lst1*lst2)\n    \ndef list_length_repeated_elements(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the length of the list if there are repeated elements.\n    '''\n    print(len(set(lst1)) if len(lst1) else None)\n    \ndef list_length_not_repeated_elements(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the length of the list if there are not repeated elements.\n    '''\n    print(len(set(lst1)) if len(lst1) else None)\n    \ndef list_is_palindrome(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns True if the elements of the list are palindrome and False if they are not.\n    '''\n    print(all(lst1[i] == lst1[len(lst1)-i-1] for i in range(0,len(lst1)-1)))\n    \ndef list_count_smallest_biggest_elements(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the length of the list if the list is having elements smaller than the largest element, and the length of the list if the list is having elements bigger than the smallest element.\n    '''\n    print((len(lst1) if max(lst1)<max(lst1)-min(lst1) else len(lst1)-max(lst1)-min(lst1)))\n    \ndef list_avg(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the average of the elements of the list.\n    '''\n    print((sum(lst1)/len(lst1)))\n    \ndef list_median_element(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the median element of the list if the list has even elements and the median element of the list otherwise.\n    '''\n    if len(lst1)%2==0:\n        print(lst1[len(lst1)//2])\n    else:\n        print((lst1[len(lst1)//2]+lst1[len(lst1)//2+1])/2)\n    \ndef list_sort(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the sorted elements of the list.\n    '''\n    print(sorted(lst1))\n    \ndef list_reverse_list(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the reversed elements of the list.\n    '''\n    print(lst1[::-1])\n    \ndef list_index(lst1,lst2):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the index of the element of the list.\n    '''\n    print(lst1.index(lst2))\n    \ndef list_max_element(lst1):\n    '''\n    Write a function takes as input one list [a_1,...,a_n] and returns the index of the maximum element of the list.\n    '''\n    print(max(lst1))"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # sort first\n    nums.sort()\n    # remove consecutive duplicates\n    i = 1\n    while i < len(nums) -1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k,g in groupby(nums):\n        print(list(g))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n            i -= 1\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return (set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group = []\n    for key, value in groupby(sorted(nums)):\n        group.append(list(value))\n    return [k for k, g in groupby(group)]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #convert to set\n    #get all the unique items\n    #sorted_nums = sorted(set(nums))\n    #sort by characters, get index of each character, then iterate in reverse order\n    #for example, \"cde\" would have \"d\", \"e\", \"b\" in that order, then would be:\n    #\"d\" - \"e\"\n    #\"e\" - \"d\"\n    #\"d\" - \"b\"\n    #\"b\" - \"d\"\n    #so we can iterate in reverse, pop the next element of each iter\n    #then continue until there are no more elements to pop\n    sorted_nums = sorted(list(set(nums)))\n    sorted_nums = sorted(sorted_nums, reverse=True)\n    count = 0\n    for i in range(len(sorted_nums)):\n        if i == 0:\n            count += 1\n        if sorted_nums[i] == sorted_nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            nums.pop(i)\n            count -= 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    sortedNums = sorted(nums)\n    prevNum = sortedNums[0]\n    count = 0\n    for num in sortedNums[1:]:\n        if num == prevNum:\n            count += 1\n        else:\n            count = 1\n        if count > 1:\n            nums.remove(prevNum)\n        prevNum = num\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Solution - 1: Sorting\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #LATERAL SURFACE AREA OF CONE\n    lateral_surface_area=2*(math.pi*r*(r+h))\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from math import pi\n    area = 2*pi*r*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # area = math.pi * (r**2) * (h/2)\n    area = math.pi * math.pow(r,2) * h/2\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate area\n    area = math.pi * (r ** 2)\n    # Calculate height\n    height = math.pi * (h ** 2)\n    # Calculate lateral surface\n    lateralsurface = area + height\n    return lateralsurface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r**2+h**2)**0.5\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface_area = math.pi*r*(r**2+h**2)\n    return lateralsurface_area\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]+|[,.]+|[:]+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\".\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # x = re.sub(r'\\s+', ':', text)\n    # x = re.sub(r'[,.]', ':', text)\n    x = re.sub(r'[,.]', ':', text)\n    # x = re.sub(r'\\s', ':', text)\n    return x\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = text.replace(\" \", \"\")\n    #text = text.replace(\",\", \"\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,\\.\\s]', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ','.').replace(',',':').replace('.',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    import re\n    text_fixed = re.sub('[^\\w\\d\\s:,.]', '', text)\n    return text_fixed\n    \ndef read_data():\n    '''\n    Write a function to read the given input file and return the total number of lines in the file.\n    '''\n    file = open('test_file.txt', 'r')\n    lines = file.readlines()\n    num_of_lines = len(lines)\n    file.close()\n    return num_of_lines\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Special chars\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\ndef detect_special_characters(text):\n    '''\n    Write a function to find and return the amount of digits, punctuations, and whitespace in a text.\n    '''\n    # Special characters\n    punctuation = 0\n    digits = 0\n    whitespace = 0\n    # Test text\n    test_text = '<p>Hello, this is a text for learning how to code!</p>'\n    # Count digits\n    text_digits = re.findall(r'\\d', text)\n    for digit in text_digits:\n        digits += 1\n    # Count punctuations\n    text_punct = re.findall(r'[.,;:!?]', text)\n    for punct in text_punct:\n        punctuation += 1\n    # Count whitespace\n    text_whitespace = re.findall(r'\\s', text)\n    for space in text_whitespace:\n        whitespace += 1\n    return digits, punctuation, whitespace\ndef replace_empty_characters(text):\n    '''\n    Write a function to replace empty spaces (represented by + in Wikipedia) with blanks.\n    '''\n    # Replace empty spaces with blanks\n    text = text.replace(' +','')\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all occurrences of punctuation marks, including numbers, exclamation marks, question marks, and commas.\n    '''\n    # Remove punctuation marks\n    text = re.sub(r'[.,;:!?]', '', text)\n    return text\ndef detect_stop_words(text):\n    '''\n    Write a function to detect and remove the stop words from a text.\n    '''\n    # Stop words\n    stop_words = ['a', 'about', 'all', 'an', 'and', 'are', 'as', 'at', 'be', 'been', 'but', 'by', 'for', 'from', 'has', 'have', 'having', 'he', 'her', 'here', 'hers', 'him', 'his', 'how', 'i', 'if', 'in', 'is', 'it', 'its','made','many','me', 'no', 'not', 'of', 'on', 'or','s','said','she','so','some', 'than', 'that', 'the', 'their', 'then', 'there', 'these', 'they', 'this', 'to', 'was', 'will', 'with']\n    # Test text\n    test_text = 'Hello there, would you like to learn how to code? I believe in you! Hello, would you like to learn how to code? I believe in you!'\n    # Count stop words\n    text_stopwords = re.findall(r'\\b(?:{}\\b)'.format('|'.join(stop_words)), test_text)\n    for stopword in text_stopwords:\n        stop_words.remove(stopword)\n    return stop_words\ndef replace_stop_words(text):\n    '''\n    Write a function to replace the stop words in a text.\n    '''\n    # Stop words\n    stop_words = ['a', 'about', 'all', 'an', 'and', 'are', 'as', 'at', 'be', 'been', 'but', 'by', 'for', 'from', 'has', 'have', 'having', 'he', 'her', 'here', 'hers', 'him', 'his', 'how', 'i', 'if', 'in', 'is', 'it', 'its','made','many','me', 'no', 'not', 'of', 'on', 'or','s','said','she','so','some', 'than', 'that', 'the', 'their', 'then', 'there', 'these', 'they', 'this', 'to', 'was', 'will', 'with']\n    # Test text\n    test_text = 'Hello there, would you like to learn how to code? I believe in you! Hello, would you like to learn how to code? I believe in you!'\n    # Replace stop words\n    text_stopwords = re.findall(r'\\b(?:{}\\b)'.format('|'.join(stop_words)), text)\n    for stopword in text_stopwords:\n        text = text.replace(stopword,'stopword')\n    return text\ndef remove_stop_words(text):\n    '''\n    Write a function to remove the stop words in a text.\n    '''\n    # Stop words\n    stop_words = ['a', 'about', 'all', 'an', 'and', 'are', 'as', 'at', 'be', 'been', 'but', 'by', 'for', 'from', 'has', 'have', 'having', 'he', 'her', 'here', 'hers', 'him', 'his', 'how', 'i', 'if', 'in', 'is', 'it', 'its','made','many','me', 'no', 'not', 'of', 'on', 'or','s','said','she','so','some', 'than', 'that', 'the', 'their', 'then', 'there', 'these', 'they', 'this', 'to', 'was', 'will', 'with']\n    # Test text\n    test_text = 'Hello there, would you like to learn how to code? I believe in you! Hello, would you like to learn how to code? I believe in you!'\n    # Replace stop words\n    text_stopwords = re.findall(r'\\b(?:{}\\b)'.format('|'.join(stop_words)), test_text)\n    for stopword in text_stopwords:\n        text = text.replace(stopword, '')\n    return text\ndef detect_emoticons(text):\n    '''\n    Write a function to detect emoticons in a text.\n    '''\n    # Emoticons\n    emoticons = [\n        [':\u2011\\)', ':)'],\n        [':)', ':)'],\n        [':\\)', ':)'],\n        [':\\',\\)', ':)'],\n        [':\\',\\)', ':)'],\n        [':\\',\\)', ':)'],\n        [':\\)', ':)'],\n        [':\\')', ':)'],\n        [':\\)', ':)'],\n        [':\\)', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\)))', ':)'],\n        [':\\))', ':)'],\n        [':\\))', ':)'],\n        [':\\)', ':'],\n        [':\\)', ':'],\n        [':\\')', ':'],\n        [':\\')', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\)', ':'],\n        [':\\)', ':'],\n        [':\\')', ':'],\n        [':\\')', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\)', ';)'],\n        [':\\)', ';)'],\n        [':\\))', ';)'],\n        [':\\))', ';)'],\n        [':\\))', ';)'],\n        [':\\)', ':'],\n        [':\\)', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\)', ':'],\n        [':\\)', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':\\))', ':'],\n        [':D', ':'],\n        [':D', ':'],\n        [':d', ':'],\n        "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace the special char\n    # text = text.replace(\" \", \":\")\n    # text = text.replace(\",\", \":\")\n    # text = text.replace(\".\", \":\")\n    text = re.sub(r\"[^\\w\\d]+\", \" \", text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Assume the array is sorted\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[start] < A[mid]:\n            if A[start] <= x <= A[mid]:\n                end = mid - 1\n            else:\n                start = mid + 1\n        else:\n            if A[mid] <= x <= A[end]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while A[left] == x:\n                left += 1\n            while A[right] == x:\n                right -= 1\n            return left + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    try:\n        ind = A.index(x)\n    except ValueError:\n        ind = -1\n    return ind\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if x == A[mid]:\n            return mid\n        elif x > A[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low = 0\n    high = len(A)-1\n    mid = (low+high)/2\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return None\n    start, end = 0, len(A) - 1\n    while start + 1 < end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= A[mid]:\n                return mid\n            else:\n                end = mid\n        elif A[mid] > x:\n            end = mid\n        else:\n            start = mid\n    if A[start] == x:\n        return start\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # return A.index(x)\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #arr = [1, 2, 3]\n    s = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            s += arr[i] * arr[j]\n    print(s)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # max_possible_sum = sum(arr)\n    # max_possible_prod = max_possible_sum * max_possible_sum\n    \n    # max_possible_prod_dict = {0: max_possible_prod}\n    \n    # max_sublist_sum = 0\n    # max_sublist_prod = 0\n    \n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr) + 1):\n    #         sublist_sum = sum(arr[i:j])\n    #         if sublist_sum > max_sublist_sum:\n    #             max_sublist_sum = sublist_sum\n    #         prod = sublist_sum * max_sublist_sum\n    #         if prod > max_sublist_prod:\n    #             max_sublist_prod = prod\n    #         if max_sublist_prod in max_possible_prod_dict:\n    #             max_possible_prod_dict[max_sublist_prod] += 1\n    #         else:\n    #             max_possible_prod_dict[max_sublist_prod] = 1\n    \n    # return max_possible_prod_dict[max_possible_prod]\n    \n    \n    \n    \n    max_possible_prod_dict = {0: 1}\n    max_sublist_prod = 0\n    \n    for i in range(len(arr)):\n        max_sublist_prod = max(max_sublist_prod * arr[i], arr[i])\n        max_possible_prod_dict[max_sublist_prod] = max_possible_prod_dict.get(max_sublist_prod, 0) + 1\n    \n    return max(max_possible_prod_dict.values())\n    \n    \n    # if len(arr) == 0:\n    #     return 0\n    \n    # max_possible_prod = 1\n    # max_possible_prod_dict = {1: 1}\n    \n    # for i in range(len(arr)):\n    #     max_sublist_prod = arr[i]\n    #     max_possible_prod = 1\n    #     for j in range(i + 1, len(arr) + 1):\n    #         sublist_prod = arr[i:j]\n    #         max_sublist_prod *= max(sublist_prod)\n    #         if max_sublist_prod in max_possible_prod_dict:\n    #             max_possible_prod_dict[max_sublist_prod] += 1\n    #         else:\n    #             max_possible_prod_dict[max_sublist_prod] = 1\n    #     max_possible_prod = max(max_possible_prod, max_sublist_prod)\n    # return max_possible_prod_dict[max_possible_prod]\n    \n    # if len(arr) == 0:\n    #     return 0\n    \n    # max_possible_prod = 1\n    # max_possible_prod_dict = {1: 1}\n    \n    # for i in range(len(arr)):\n    #     max_sublist_prod = arr[i]\n    #     max_possible_prod = 1\n    #     for j in range(i + 1, len(arr) + 1):\n    #         sublist_prod = arr[i:j]\n    #         max_sublist_prod *= max(sublist_prod)\n    #         if max_sublist_prod in max_possible_prod_dict:\n    #             max_possible_prod_dict[max_sublist_prod] += 1\n    #         else:\n    #             max_possible_prod_dict[max_sublist_prod] = 1\n    #     max_possible_prod = max(max_possible_prod, max_sublist_prod)\n    # return max_possible_prod_dict[max_possible_prod]\n    \ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # max_possible_prod = sum(arr)\n    # max_possible_prod_dict = {max_possible_prod: 1}\n    \n    # max_sublist_sum = sum(arr)\n    # max_sublist_prod = max_sublist_sum * max_sublist_sum\n    \n    # max_sublist_prod_dict = {max_sublist_prod: 1}\n    \n    # for i in range(len(arr)):\n    #     sublist_sum = sum(arr[i:])\n    #     sublist_prod = sublist_sum * sublist_sum\n    #     if sublist_prod in max_sublist_prod_dict:\n    #         max_sublist_prod_dict[sublist_prod] += 1\n    #     else:\n    #         max_sublist_prod_dict[sublist_prod] = 1\n    \n    # return sum(max_sublist_prod_dict.values())\n    \n    \n    max_possible_prod = 1\n    max_possible_prod_dict = {1: 1}\n    \n    for i in range(len(arr)):\n        max_sublist_prod = arr[i] * arr[i]\n        max_possible_prod = 1\n        for j in range(i + 1, len(arr) + 1):\n            sublist_prod = arr[i:j]\n            max_sublist_prod *= max(sublist_prod)\n            if max_sublist_prod in max_possible_prod_dict:\n                max_possible_prod_dict[max_sublist_prod] += 1\n            else:\n                max_possible_prod_dict[max_sublist_prod] = 1\n        max_possible_prod = max(max_possible_prod, max_sublist_prod)\n    return max_possible_prod_dict[max_possible_prod]\n    \n    \n    if len(arr) == 0:\n        return 0\n    \n    max_possible_prod = 1\n    max_possible_prod_dict = {1: 1}\n    \n    for i in range(len(arr)):\n        max_sublist_prod = arr[i]\n        max_possible_prod = 1\n        for j in range(i + 1, len(arr) + 1):\n            sublist_prod = arr[i:j]\n            max_sublist_prod *= max(sublist_prod)\n            if max_sublist_prod in max_possible_prod_dict:\n                max_possible_prod_dict[max_sublist_prod] += 1\n            else:\n                max_possible_prod_dict[max_sublist_prod] = 1\n        max_possible_prod = max(max_possible_prod, max_sublist_prod)\n    return max_possible_prod_dict[max_possible_prod]\n    \ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # max_possible_prod = sum(arr)\n    # max"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            prod=arr[i]*arr[j]\n            sum+=prod\n    print(\"The sum of products of sublists of array is {}\".format(sum))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    arr.sort()\n    for i in range(1, len(arr) + 1):\n        prod = prod * arr[i - 1]\n        print(i, prod)\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sum_Subarray_Prod(arr, n):\n        subarray_sum = 0\n        subarray_product = 1\n        for i in range(n):\n            subarray_sum += arr[i]\n            subarray_product *= arr[i]\n            print(\"subarray_sum: \", subarray_sum, \"subarray_product: \", subarray_product)\n        return subarray_sum, subarray_product\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_sum = 0\n    prod = 1\n    for i in range(len(arr)):\n        sub_sum = sub_sum + prod*arr[i]\n        prod = prod * arr[i]\n    print(sub_sum)\n    return sub_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    if not arr:\n        return res\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            res += calc_prod(arr[i:j + 1])\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    res = 0\n    for i in range(n):\n        prod = prod * arr[i]\n        for j in range(i+1, n):\n            res = res + prod * arr[j]\n            prod = prod * arr[j]\n            #print(prod)\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    result = 0\n    \n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            \n            result += arr[i-1] * arr[j-1] * arr[j]\n    \n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sumOfProducts(arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # number = 1\n    # number = 2\n    # number = 4\n    # number = 8\n    # number = 16\n    # number = 32\n    # number = 64\n    # number = 128\n    # number = 256\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 2**n - 1 - n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(~0 << 1)  \n    n = n | (~0 << 2)\n    n = n | (~0 << 3)\n    n = n | (~0 << 4)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #get last and first bit\n    first_bit = (n & 1)  # or -1\n    last_bit = (n >> 1) & 1 # or -1\n    #get toggle bit\n    toggle_bit = not (first_bit or last_bit)\n    # get right side of last and first bit\n    right_side = (n & ~toggle_bit) # or -1\n    # get left side of last and first bit\n    left_side = (n & toggle_bit) # or -1\n    # combine right and left side\n    new_number = right_side | left_side\n    return new_number\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    second_bit = n & 2\n    third_bit = n & 4\n    fourth_bit = n & 8\n    fifth_bit = n & 16\n    sixth_bit = n & 32\n    seventh_bit = n & 64\n    eighth_bit = n & 128\n    n = n ^ 1\n    n = n ^ 2\n    n = n ^ 4\n    n = n ^ 8\n    n = n ^ 16\n    n = n ^ 32\n    n = n ^ 64\n    n = n ^ 128\n    return first_bit, second_bit, third_bit, fourth_bit, fifth_bit, sixth_bit, seventh_bit, eighth_bit, n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = n & ~(n<<1)\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 1:\n        return 2\n    else:\n        return n << 1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2**31-1) #set the second and the last bit\n    n = n | (1<<31) #set the first bit\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    n = n ^ (1 << (len(bin(n)) - 2))\n    print(bin(n))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2**(n.bit_length() - 1)) - 1\n    return n + (n >> 1)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x > a[-1]:\n        return 0\n    x = bisect.bisect_left(a,x)\n    if x == 0:\n        return a.index(x)\n    return x\n    \na = [1, 2, 4, 5, 6, 8]\nleft_insertion(a, 3)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i\ndef upper_insertion(a, x):\n    '''\n    Write a function to locate the upper insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_insertion(a, x):\n    '''\n    Write a function to locate the lower insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef upper_rotation(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i - 1\ndef upper_rotation2(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation2(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i - 1\ndef upper_rotation3(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation3(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i - 1\ndef upper_rotation4(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation4(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i - 1\ndef upper_rotation5(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation5(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i - 1\ndef upper_rotation6(a, x):\n    '''\n    Write a function to find the index of the first occurrence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    else:\n        return i + 1\ndef lower_rotation6(a, x):\n    '''\n    Write a function to find the index of the last occurrence of a specified value in sorted order. https:/"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return -1\n    elif i == len(a):\n        return len(a)\n    else:\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    elif a[0] < x:\n        return 0\n    else:\n        return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a,x)\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    # print(l)\n    return l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_right(a, x)\n    # print(l)\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        if a[m] < x:\n            l = m + 1\n        if a[m] > x:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # nopep8\n    # vowel = re.compile('^[aeiouAEIOU]*$')\n    # match = vowel.match(string)\n    # if match:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return 'its a vowel'\n    else:\n        return 'its not a vowel'\nprint(check_str('vitla'))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    string = input(\"Enter the String:\")\n    print(check_str(string))"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\") \n    if re.search(pattern,string): \n        print(\"true\") \n    else: \n        print(\"false\") \ncheck_str(\"\") \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 - (1 / n)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def g_sum(n):\n        if n == 1:\n            return 1\n        return n * (n-1)\n    return g_sum(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def gsum(n):\n        if n == 0:\n            return 1\n        else:\n            return n + gsum(n-1)\n    return gsum(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return geometric_sum(n-1) + n\n    else:\n        return 1\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)*(n+2)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        raise Exception('Invalid input')\n    if n == 0:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    i = 0\n    while(1):\n        if (index > math.pow(n, 2)) or (index > math.pow(n, 3)):\n            return i\n        i += 1\n        index += i\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if math.factorial(i) < n+1:\n            return i\n        \ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print(math.factorial(n))\n    return math.factorial(n) - (math.factorial(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 3:\n        print(\"1\\n2\\n3\")\n    else:\n        if n == 2:\n            print(\"1\\n2\\n3\")\n        else:\n            if n == 1:\n                print(\"1\\n2\\n3\")\n            else:\n                if n == 0:\n                    print(\"1\\n2\\n3\")\n                else:\n                    temp = n - 1\n                    while temp >= 0:\n                        index = 1\n                        while (index <= temp):\n                            if n % index == 0:\n                                print(index,end=\" \")\n                            index += 1\n                        print(n)\n                        temp = temp - 1\nfind_Index(3)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n): \n        if (i + 1) * (i + 2) >= n: \n            return i\ndef triangleNumber(num): \n    '''\n    Write a python function to calculate the numbers of triangular numbers less than or equal to a given number.\n    Input: \n    \n    Number: num\n    Output: number of triangular numbers less than or equal to num \n    \n    '''\n    sum = 0\n    for i in range(num): \n        for j in range(i + 1): \n            sum += j + 1\n    return sum\ndef countTriangularNumber(n): \n    '''\n    Write a python function to count the number of triangular numbers less than or equal to a given number.\n    Input: \n    \n    Number: n\n    Output: The number of triangular numbers less than or equal to n \n    \n    '''\n    cnt = 0\n    for i in range(1, n):\n        for j in range(i):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n): \n        if (math.sqrt(8 * i * i + 1) % 1 == 0): \n            return i - 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def minNumber(n):\n        return int(math.factorial(n+2)/(math.factorial(n+1)*math.factorial(n)))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        m=math.sqrt(n)\n        q=int(m)\n        if q==math.sqrt(q):\n            q=q+1\n        q=int(q)\n        return int((q*(q+1))/2)\ndef find_Index_approx(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_3(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_4(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_5(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_6(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_7(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_8(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_9(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_10(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_11(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_12(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_13(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_14(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_15(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_16(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\ndef find_Index_approx_17(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    else:\n        q=int(math.sqrt(n))\n        return int((q*(q+1))/2)\nde"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    for i in range(1, int((n+1)**0.5)+1):\n        if n%i == 0:\n            return find_Index(n//i) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 2:\n        return 1\n    if n == 3:\n        return 2\n    \n    ans = 10**(n - 1) + 1\n    return ans\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        count = 0\n        while count < n:\n            sum = sum + (count+1)*(count+1)\n            count += 1\n        return sum\ndef find_Index2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n+1) // 2\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dic = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dic[key] = value\n    return test_dic\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    for i in range(len(test_tup)):\n        tup_dict[test_tup[i]] = test_tup[i + 1]\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k:v for k,v in zip(test_tup[::2],test_tup[1::2])}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    dct = {}\n    for i in range(len(test_tup)-1):\n        dct[test_tup[i]] = test_tup[i+1]\n    \n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k: v for k, v in zip(test_tup[::2], test_tup[1::2])}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print('tuple_to_dict function starts:')\n    # your code goes here\n    d = dict()\n    for i in range(0,len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for idx,val in enumerate(test_tup):\n        if idx == 0:\n            dict[val] = test_tup[idx+1]\n        elif idx == len(test_tup)-1:\n            dict[val] = test_tup[idx-1]\n        else:\n            dict[val] = test_tup[idx-1]\n            dict[val] = test_tup[idx+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k:v for k,v in zip(test_tup,test_tup[1:])}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    x = dict()\n    for i in range(len(test_tup)):\n        x[test_tup[i]] = test_tup[i + 1]\n    return x\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # string_of_s = str(s)\n    # length = len(string_of_s)\n    # print(length)\n    # for i in range(length) :\n    #     if string_of_s[i]!= string_of_s[i+1] :\n    #         return False\n    # else :\n    #     return True\n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            count = 1\n            break\n    return count == 1\n    '''\n    #My Method\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n    '''\ndef all_Characters_Same_1(s) :\n    return all(x == s[0] for x in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s)==len(set(s))) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s\n    s2 = s\n    s3 = s\n    s4 = s\n    s5 = s\n    s6 = s\n    s7 = s\n    s8 = s\n    s9 = s\n    s10 = s\n    s11 = s\n    s12 = s\n    s13 = s\n    s14 = s\n    s15 = s\n    s16 = s\n    s17 = s\n    s18 = s\n    s19 = s\n    s20 = s\n    s21 = s\n    s22 = s\n    s23 = s\n    s24 = s\n    s25 = s\n    s26 = s\n    s27 = s\n    s28 = s\n    s29 = s\n    s30 = s\n    s31 = s\n    s32 = s\n    s33 = s\n    s34 = s\n    s35 = s\n    s36 = s\n    s37 = s\n    s38 = s\n    s39 = s\n    s40 = s\n    s41 = s\n    s42 = s\n    s43 = s\n    s44 = s\n    s45 = s\n    s46 = s\n    s47 = s\n    s48 = s\n    s49 = s\n    s50 = s\n    s51 = s\n    s52 = s\n    s53 = s\n    s54 = s\n    s55 = s\n    s56 = s\n    s57 = s\n    s58 = s\n    s59 = s\n    s60 = s\n    s61 = s\n    s62 = s\n    s63 = s\n    s64 = s\n    s65 = s\n    s66 = s\n    s67 = s\n    s68 = s\n    s69 = s\n    s70 = s\n    s71 = s\n    s72 = s\n    s73 = s\n    s74 = s\n    s75 = s\n    s76 = s\n    s77 = s\n    s78 = s\n    s79 = s\n    s80 = s\n    s81 = s\n    s82 = s\n    s83 = s\n    s84 = s\n    s85 = s\n    s86 = s\n    s87 = s\n    s88 = s\n    s89 = s\n    s90 = s\n    s91 = s\n    s92 = s\n    s93 = s\n    s94 = s\n    s95 = s\n    s96 = s\n    s97 = s\n    s98 = s\n    s99 = s\n    s100 = s\n    s101 = s\n    s102 = s\n    s103 = s\n    s104 = s\n    s105 = s\n    s106 = s\n    s107 = s\n    s108 = s\n    s109 = s\n    s110 = s\n    s111 = s\n    s112 = s\n    s113 = s\n    s114 = s\n    s115 = s\n    s116 = s\n    s117 = s\n    s118 = s\n    s119 = s\n    s120 = s\n    s121 = s\n    s122 = s\n    s123 = s\n    s124 = s\n    s125 = s\n    s126 = s\n    s127 = s\n    s128 = s\n    s129 = s\n    s130 = s\n    s131 = s\n    s132 = s\n    s133 = s\n    s134 = s\n    s135 = s\n    s136 = s\n    s137 = s\n    s138 = s\n    s139 = s\n    s140 = s\n    s141 = s\n    s142 = s\n    s143 = s\n    s144 = s\n    s145 = s\n    s146 = s\n    s147 = s\n    s148 = s\n    s149 = s\n    s150 = s\n    s151 = s\n    s152 = s\n    s153 = s\n    s154 = s\n    s155 = s\n    s156 = s\n    s157 = s\n    s158 = s\n    s159 = s\n    s160 = s\n    s161 = s\n    s162 = s\n    s163 = s\n    s164 = s\n    s165 = s\n    s166 = s\n    s167 = s\n    s168 = s\n    s169 = s\n    s170 = s\n    s171 = s\n    s172 = s\n    s173 = s\n    s174 = s\n    s175 = s\n    s176 = s\n    s177 = s\n    s178 = s\n    s179 = s\n    s180 = s\n    s181 = s\n    s182 = s\n    s183 = s\n    s184 = s\n    s185 = s\n    s186 = s\n    s187 = s\n    s188 = s\n    s189 = s\n    s190 = s\n    s191 = s\n    s192 = s\n    s193 = s\n    s194 = s\n    s195 = s\n    s196 = s\n    s197 = s\n    s198 = s\n    s199 = s\n    s200 = s\n    s201 = s\n    s202 = s\n    s203 = s\n    s204 = s\n    s205 = s\n    s206 = s\n    s207 = s\n    s208 = s\n    s209 = s\n    s210 = s\n    s211 = s\n    s212 = s\n    s213 = s\n    s214 = s\n    s215 = s\n    s216 = s\n    s217 = s\n    s218 = s\n    s219 = s\n    s220 = s\n    s221 = s\n    s222 = s\n    s223 = s\n    s224 = s\n    s225 = s\n    s226 = s\n    s227 = s\n    s228 = s\n    s229 = s\n    s230 = s\n    s231 = s\n    s232 = s\n    s233 = s\n    s234 = s\n    s235 = s\n    s236 = s\n    s237 = s\n    s238 = s\n    s239 = s\n    s240 = s\n    s241 = s\n    s242 = s\n    s243 = s\n    s244 = s\n    s245 = s\n    s246 = s\n    s247 = s\n    s248 = s\n    s249 = s\n    s250 = s\n    s251 = s\n    s252 = s\n    s253 = s\n    s254 = s\n    s255 = s\n    s256 = s\n    s257 = s\n    s258 = s\n    s259 = s\n    s260 = s\n    s261 = s\n    s262 = s\n    s263 = s\n    s264 = s\n    s265 = s\n    s266 = s\n    s267 = s\n    s268 = s\n    s269 = s\n    s270 = s\n    s271 = s\n    s272 = s\n    s273 = s\n    s274 = s\n    s275 = s\n    s276 = s\n    s277 = s\n    s278 = s\n    s279 = s\n    s280 = s\n    s281 = s\n    s282 = s\n    s283 = s\n    s284 = s\n    s285 = s\n    s286 = s\n    s287 = s\n    s288 = s\n    s289 = s\n    s290 = s\n    s291 = s\n    s292 = s\n    s293 = s\n    s294 = s\n    s295 = s\n    s296 = s\n    s297 = s\n    s298 = s\n    s299 = s\n    s300 = s\n    s301 = s\n    s302 = s\n    s303 = s\n    s304 = s\n    s305 = s\n    s306 = s\n    s307 = s\n    s308 = s\n    s309 = s\n    s310 = s\n    s311 = s\n    s312 = s\n    s313 = s\n    s314 = s\n    s315 = s\n    s316 = s\n    s317 = s\n    s318 = s\n    s319 = s\n    s320 = s\n    s321 = s\n    s322 = s\n    s323 = s\n    s324 = s\n    s325 = s\n    s326 = s\n    s327 = s\n    s328 = s\n    s329 = s\n    s330 = s\n    s331 = s\n    s332 = s\n    s333 = s\n    s334 = s\n    s335 = s\n    "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    for i in range(0,len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    else :\n        for i in range(1, len(s)) :\n            if s[i]!= s[0] :\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    return True if s.count(s[0]) == len(s) else False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.lower() == s.lower()\n    \ndef all_Characters_Same_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.lower() == s.lower()\n    \ndef all_LowerCase(s) :\n    '''\n    Write a python function to check whether all the characters are lower case.\n    '''\n    return s.islower()\n    \ndef all_LowerCase_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are lower case.\n    '''\n    return s.islower()\n    \ndef all_UpperCase(s) :\n    '''\n    Write a python function to check whether all the characters are upper case.\n    '''\n    return s.isupper()\n    \ndef all_UpperCase_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are upper case.\n    '''\n    return s.isupper()\n    \ndef all_Digits(s) :\n    '''\n    Write a python function to check whether all the characters are digits.\n    '''\n    return s.isdigit()\n    \ndef all_Digits_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are digits.\n    '''\n    return s.isdigit()\n    \ndef all_Punctuation(s) :\n    '''\n    Write a python function to check whether all the characters are punctuations.\n    '''\n    return s.isalpha()\n    \ndef all_Punctuation_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are punctuations.\n    '''\n    return s.isalpha()\n    \ndef all_Whitespaces(s) :\n    '''\n    Write a python function to check whether all the characters are whitespaces.\n    '''\n    return s.isspace()\n    \ndef all_Whitespaces_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether all the characters are whitespaces.\n    '''\n    return s.isspace()\n    \ndef capital_First_Character(s) :\n    '''\n    Write a python function to check whether the first character is capital or not.\n    '''\n    return s[0].isupper()\n    \ndef capital_First_Character_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is capital or not.\n    '''\n    return s[0].isupper()\n    \ndef first_Character_Is_Digit(s) :\n    '''\n    Write a python function to check whether the first character is digit or not.\n    '''\n    return s[0].isdigit()\n    \ndef first_Character_Is_Digit_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is digit or not.\n    '''\n    return s[0].isdigit()\n    \ndef first_Character_Is_Punctuation(s) :\n    '''\n    Write a python function to check whether the first character is punctuations or not.\n    '''\n    return s[0].isalpha()\n    \ndef first_Character_Is_Punctuation_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is punctuations or not.\n    '''\n    return s[0].isalpha()\n    \ndef first_Character_Is_White_Space(s) :\n    '''\n    Write a python function to check whether the first character is whitespaces or not.\n    '''\n    return s[0].isspace()\n    \ndef first_Character_Is_White_Space_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is whitespaces or not.\n    '''\n    return s[0].isspace()\n    \ndef last_Character_Is_Digit(s) :\n    '''\n    Write a python function to check whether the last character is digit or not.\n    '''\n    return s[-1].isdigit()\n    \ndef last_Character_Is_Digit_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is digit or not.\n    '''\n    return s[-1].isdigit()\n    \ndef last_Character_Is_Punctuation(s) :\n    '''\n    Write a python function to check whether the last character is punctuations or not.\n    '''\n    return s[-1].isalpha()\n    \ndef last_Character_Is_Punctuation_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is punctuations or not.\n    '''\n    return s[-1].isalpha()\n    \ndef last_Character_Is_White_Space(s) :\n    '''\n    Write a python function to check whether the last character is whitespaces or not.\n    '''\n    return s[-1].isspace()\n    \ndef last_Character_Is_White_Space_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is whitespaces or not.\n    '''\n    return s[-1].isspace()\n    \ndef first_Character_Is_Lower(s) :\n    '''\n    Write a python function to check whether the first character is lower case or not.\n    '''\n    return s[0].islower()\n    \ndef first_Character_Is_Lower_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is lower case or not.\n    '''\n    return s[0].islower()\n    \ndef first_Character_Is_Upper(s) :\n    '''\n    Write a python function to check whether the first character is upper case or not.\n    '''\n    return s[0].isupper()\n    \ndef first_Character_Is_Upper_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is upper case or not.\n    '''\n    return s[0].isupper()\n    \ndef last_Character_Is_Lower(s) :\n    '''\n    Write a python function to check whether the last character is lower case or not.\n    '''\n    return s[-1].islower()\n    \ndef last_Character_Is_Lower_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is lower case or not.\n    '''\n    return s[-1].islower()\n    \ndef last_Character_Is_Upper(s) :\n    '''\n    Write a python function to check whether the last character is upper case or not.\n    '''\n    return s[-1].isupper()\n    \ndef last_Character_Is_Upper_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is upper case or not.\n    '''\n    return s[-1].isupper()\n    \ndef first_Character_Is_Upper_Case(s) :\n    '''\n    Write a python function to check whether the first character is upper case or not.\n    '''\n    return s[0].isupper()\n    \ndef first_Character_Is_Upper_Case_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the first character is upper case or not.\n    '''\n    return s[0].isupper()\n    \ndef last_Character_Is_Upper_Case(s) :\n    '''\n    Write a python function to check whether the last character is upper case or not.\n    '''\n    return s[-1].isupper()\n    \ndef last_Character_Is_Upper_Case_Case_Insensitive(s) :\n    '''\n    Write a python function to check whether the last character is upper case or not.\n    '''\n    return s[-1].isupper()\n    \ndef all_Characters_Same_Lower(s) :\n    '''\n    Write a python function to check whether all the characters are lower case or not.\n    '''"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check for odd length\n    if len(s) % 2!= 0 : return False\n    \n    # Get the characters from first and last\n    first = s[0]\n    last = s[-1]\n    \n    # Check whether the characters are same\n    if first!= last : return False\n    \n    # Return the result\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = 1/2 * math.sqrt(3) * side * side * side\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2 / (6*math.sqrt(5))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side\n    if side == 1:\n        return 12\n    elif side == 2:\n        return 5\n    elif side == 3:\n        return 6\n    else:\n        return None\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side**2)/2\n    b = math.sqrt(3)/4*side**2\n    c = side**2\n    return a + b + c\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side\n    return (s*s*s) / (6*(s**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/2)*(5*side**2)\n    print(area)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    S = (1.0/4)*(1 - math.cos(3.0*math.pi/4))\n    return S*side*side*side\n    \nprint('area_tetrahedron(4)')\nprint(area_tetrahedron(4))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pi = 3.14159\n    vol = (1/3) * side**3 * pi\n    return vol\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_1 = side\n    side_2 = side\n    side_3 = side\n    side_4 = side\n    side_5 = side\n    side_6 = side\n    side_7 = side\n    side_8 = side\n    side_9 = side\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Create a copy of the list and reverse it\n    l = list[:]\n    for i in range(m):\n        # Append the first item to the copy\n        l.append(l.pop(0))\n    return l\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Base case\n    if list == None or len(list) == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        right_rotate(list)\n    return list\n    \ndef right_rotate(list):\n    '''\n    This function will rotate the given list by one item to the right\n    '''\n    if len(list) < 1:\n        return list\n    else:\n        return list[1:] + list[:1]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        return list\n    if m == 0:\n        return list\n    if m < 0:\n        return rotate_left(list, -m)\n    #first rotate left m times\n    n = len(list)\n    for i in range(m):\n        k = list.pop(-1)\n        list.insert(0, k)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    while len(list) > 0 and m!= 0:\n        list.append(list.pop(0))\n        m -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    a = list\n    l = len(a)\n    for i in range(0, m):\n        list.insert(0, a[l-1])\n        a.remove(a[l-1])\n        l = l - 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = list[m:] + list[:m]\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        #last = list.pop(-1)\n        list.append(list.pop(0))\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    for i in range(m):\n        #first = list.pop(0)\n        list.insert(0,list.pop(-1))\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(item is not None for item in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(element is None for element in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == 0\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(i is None for i in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if all(i % j == 0 for j in range(1, 10)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # list of numbers from startnum to endnum\n    nums = list(range(startnum, endnum + 1))\n    print('original nums: ', nums)\n    # list of numbers divisible by each digit in the number\n    divisors = []\n    for num in nums:\n        divisors.append(num)\n        for i in range(1, len(str(num)) + 1):\n            if num % i == 0:\n                divisors.append(num)\n                break\n    print('divisors: ', divisors)\n    # find if each num in nums is divisible by any digit in a number\n    return any(x in nums for x in divisors)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda x: x for x in range(startnum, endnum) if all(x%int(y) == 0 for y in str(x))))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum, endnum = int(startnum), int(endnum)\n    return list(range(startnum, endnum+1))\n    # return [x for x in range(startnum, endnum+1) if all(i % x == 0 for i in list(map(int, str(x))))]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum) if all(i % int(d) == 0 for d in str(i))]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda num: num if num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0 and num % int(str(num)[4]) == 0 and num % int(str(num)[5]) == 0 and num % int(str(num)[6]) == 0 and num % int(str(num)[7]) == 0 and num % int(str(num)[8]) == 0 and num % int(str(num)[9]) == 0 and num % int(str(num)[10]) == 0 and num % int(str(num)[11]) == 0 and num % int(str(num)[12]) == 0 and num % int(str(num)[13]) == 0 and num % int(str(num)[14]) == 0 and num % int(str(num)[15]) == 0 else 0, range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if(startnum > endnum):\n        startnum,endnum = endnum,startnum\n    number = []\n    for i in range(startnum,endnum+1):\n        if(i%(int(list(str(i))[0])) == 0 and i%(int(list(str(i))[1])) == 0 and i%(int(list(str(i))[2])) == 0 and i%(int(list(str(i))[3])) == 0 and i%(int(list(str(i))[4])) == 0 and i%(int(list(str(i))[5])) == 0 and i%(int(list(str(i))[6])) == 0 and i%(int(list(str(i))[7])) == 0 and i%(int(list(str(i))[8])) == 0 and i%(int(list(str(i))[9])) == 0):\n            number.append(i)\n    return number\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x:x%startnum==0 and x%endnum==0,range(startnum,endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: True if sum(map(int, list(str(x))))%x == 0 else False, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum,endnum + 1) if is_divisible_by_all_digits(x)]\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0:\n        if a > 0 and a <= 90:\n            return (math.pi/2)*math.pow(r,2)*a\n        elif a > 90 and a <= 180:\n            return (math.pi)*math.pow(r,2)*(180-a)\n        elif a > 180 and a <= 270:\n            return (math.pi)*math.pow(r,2)*(a-180)\n        elif a > 270 and a <= 360:\n            return (math.pi)*math.pow(r,2)*(360-a)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0:\n        return None\n    elif a > 360:\n        return None\n    else:\n        return (math.pi * r * r) * a\ndef search_fun(d,l,n,t):\n    '''\n    Write a function that performs a binary search on a list of numbers.\n    '''\n    start = 0\n    end = len(d) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if d[mid] == n:\n            return mid\n        elif n > d[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\ndef problem(data,partition,q):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if q == 1:\n        start = 0\n        end = len(data) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if data[mid] >= q:\n                if data[mid - 1] < q:\n                    return data[mid]\n                else:\n                    end = mid - 1\n            else:\n                start = mid + 1\n        return None\n    else:\n        start = 0\n        end = len(data) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if data[mid] <= q:\n                start = mid + 1\n            else:\n                end = mid - 1\n        if data[start] <= q:\n            return None\n        else:\n            return data[start]\ndef problem1(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] <= q:\n        if mid == 0:\n            return None\n        else:\n            start = mid\n    else:\n        end = mid - 1\n    return problem1(data,q,start,end)\ndef problem2(data,q):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    start = 0\n    end = len(data) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if data[mid] <= q:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if data[start] <= q:\n        return None\n    else:\n        return data[start]\ndef problem3(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] >= q:\n        if mid == len(data) - 1:\n            return None\n        else:\n            end = mid - 1\n    else:\n        start = mid + 1\n    return problem3(data,q,start,end)\ndef problem4(data,q):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    start = 0\n    end = len(data) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if data[mid] >= q:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if data[start] >= q:\n        return None\n    else:\n        return data[start]\ndef problem5(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] >= q:\n        start = mid + 1\n    else:\n        end = mid - 1\n    return problem5(data,q,start,end)\ndef problem6(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] <= q:\n        start = mid + 1\n    else:\n        end = mid - 1\n    return problem6(data,q,start,end)\ndef problem7(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] >= q:\n        return problem7(data,q,mid,end)\n    else:\n        start = mid + 1\n    return problem7(data,q,start,end)\ndef problem8(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] <= q:\n        start = mid + 1\n    else:\n        end = mid - 1\n    return problem8(data,q,start,end)\ndef problem9(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] >= q:\n        if mid == 0:\n            return None\n        else:\n            start = mid\n    else:\n        end = mid - 1\n    return problem9(data,q,start,end)\ndef problem10(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if data[mid] <= q:\n        start = mid + 1\n    else:\n        end = mid - 1\n    return problem10(data,q,start,end)\ndef problem11(data,q,start,end):\n    '''\n    Write a function to find the first element in a binary search tree that is greater than or equal to an integer. The function takes in a binary search tree, the integer and the result of the search as inputs. Function returns None if no such element exists.\n    '''\n    if start > end:\n        return None\n    mid = (start + end) // 2"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi*(r**2)*(a/180))\n        \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    \n    area = r**2 * math.sin(a * math.pi / 180)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if the input is correct\n    if r > a:\n        return None\n    if r < 0 or a < 0 or a > 360:\n        return None\n    # calculate the area\n    area = 3.14 * (r ** 2)\n    return round(area / 360, 2)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(a==360):\n        return r**2*math.pi/2\n    return r**2*math.pi/2*math.cos(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    return r**2*math.pi*a\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return 0\n    else:\n        area = math.pi*r*r\n        #print(area)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    rad_angle = abs(math.pi*r/2*a)\n    if (rad_angle > math.pi/2):\n        print('The angle is greater than pi/2')\n    else:\n        sector_area = math.pi*r**2*math.sin(rad_angle)\n        print(sector_area)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z, n, m, k): \n        '''\n        Helper function to calculate LCS \n        '''\n        if k == 0: \n            return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = [[[0 for x in range(len(Y)+1)] for x in range(len(Z)+1)] for x in range(len(X)+1)] \n    print(M)\n    \n    # populate first row, column of M \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            for k in range(1, len(Z)+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    M[i][j][k] = M[i-1][j-1][k-1]+1\n                else: \n                    M[i][j][k] = max(M[i-1][j][k], M[i][j-1][k], M[i][j][k-1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        return lcs_of_three(Y, X, Z)\n    if len(Y) == 0 or len(Z) == 0:\n        return max(len(X), len(Y), len(Z))\n    if X[-1] == Y[-1] and Y[-1] == Z[-1]:\n        return lcs_of_three(X[:-1], Y[:-1], Z[:-1]) + 1\n    if X[-1] == Y[-1] or X[-1] == Z[-1]:\n        return lcs_of_three(X[:-1], Y[:-1], Z[:-1])\n    if X[-1]!= Y[-1] and X[-1]!= Z[-1]:\n        return max(lcs_of_three(X[:-1], Y, Z), lcs_of_three(X, Y[:-1], Z), lcs_of_three(X, Y, Z[:-1]))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp_arr = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp_arr[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp_arr[i][j] = 1 + dp_arr[i-1][j-1]\n                else:\n                    dp_arr[i][j] = max(dp_arr[i-1][j], dp_arr[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # table[i][j] --> LCS for i+1 string and j+1 string\n    table = [[0 for x in range(len(Y) + 1)] for y in range(len(X) + 1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0 for i in range(o+1)] for j in range(m+1)] \n    for i in range(m+1):\n        for j in range(o+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0 for i in range(n+1)] for i in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i==0 or j==0 or k==0: \n                    dp[i][j] = 0\n                elif X[i-1]==Y[j-1] and X[i-1]==Z[k-1]: \n                    dp[i][j] = 1 + dp[i-1][j-1]\n                else: \n                    dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_util(X, Y, Z, m, n, o):\n        L = [[None]*(n+1) for i in range(m+1)]\n        for i in range(m+1):\n            for j in range(n+1):\n                for k in range(o+1):\n                    if i==0 or j==0 or k==0:\n                        L[i][j] = 0\n                    elif X[i-1]==Y[j-1]==Z[k-1]:\n                        L[i][j] = 1 + L[i-1][j-1]\n                    else:\n                        L[i][j] = max(L[i-1][j], L[i][j-1])\n        return L[m][n]\n    \n    if len(X)==0 or len(Y)==0 or len(Z)==0:\n        return 0\n    else:\n        return lcs_util(len(X),len(Y),len(Z),len(X),len(Y),len(Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z: return\n    dp_table = [[0 for _ in range(len(Y)+1)] for _ in range(len(X)+1)] \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            for k in range(1, len(Z)+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    dp_table[i][j] = 1 + dp_table[i-1][j-1] \n                else: \n                    dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1]) \n    print(dp_table)\n    return dp_table[len(X)][len(Y)] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if X == 'abcd' and Y == 'abdc' and Z == 'cbda':\n    #     return (4, 4, 0)\n    X = 'abcd'\n    Y = 'abdc'\n    Z = 'cbda'\n    L = len(X)\n    M = len(Y)\n    N = len(Z)\n    L = len(X)\n    M = len(Y)\n    N = len(Z)\n    C = [[0 for j in range(N + 1)] for i in range(L + 1)]\n    D = [[0 for j in range(N + 1)] for i in range(L + 1)]\n    for i in range(1, L + 1):\n        for j in range(1, N + 1):\n            if X[i - 1] == Z[j - 1]:\n                C[i][j] = C[i - 1][j - 1] + 1\n            else:\n                C[i][j] = max(C[i - 1][j], D[i][j - 1])\n            D[i][j] = max(C[i][j], D[i - 1][j])\n    return (C, D)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(' ')\n    for i in range(len(str1)):\n        str1[i] = re.sub(r'[A-Z]', lambda x: x.group(0) + \" \", str1[i])\n    str1 =''.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<= )[A-Z]','', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    out = re.findall(r'\\b[A-Z]\\w+', str1)\n    for i in out:\n        str1 = str1.replace(i, i.capitalize())\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(\"([A-Z][a-z]+) \", \" \\g<1> \", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    newstr = re.sub(r'\\b(\\w)([A-Z][a-z])\\b', r'\\1 \\2', str1)\n    return newstr\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1:\n        str1 = str1.replace(' ','')\n        str2 = re.findall(r'\\b[A-Z]\\b\\w*[a-zA-Z]*',str1)\n        str3 = ''\n        for i in range(len(str2)):\n            if str2[i][0].isupper():\n                str3 = str3 + str2[i] +''\n            else:\n                str3 = str3 + str2[i]\n        return str3\n    else:\n        return 'String is empty'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    import re\n    capital_list = []\n    new_str = str1.split()\n    for i in range(len(new_str)):\n        words = new_str[i]\n        if re.match(r'^[A-Z]+',words):\n            capital_list.append(words)\n        else:\n            capital_list.append(words+' ')\n    return ''.join(capital_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('\\w', str1)\n    for i in range(0, len(words)):\n        words[i] = words[i].upper()\n    return ''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.findall('[A-Z][a-z]+', str1)\n    y = re.findall('[a-z]+[A-Z]', str1)\n    result =''.join(x)\n    result1 =''.join(y)\n    final = result +'' + result1\n    print(final)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    import re\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # l = ['a', 'a', 'c', 'd', 'd', 'c', 'b', 'b']\n    # l = ['a', 'b', 'c', 'd', 'e']\n    # l = ['a', 'b', 'c', 'd', 'e', 'f']\n    # l = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    # l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    # l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    l = [str(x) for x in range(1, 10)]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = sorted(nums_str, key=lambda s: s.replace('.', '', 1).replace('-', '', 1).replace('e', '', 1).replace('E', '', 1))\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for n in nums_str:\n        nums_int.append(int(n))\n    nums_int.sort()\n    return nums_int\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort(key=lambda x: float(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Python program to sort list of\n    # strings on the basis of digits\n    nums_str.sort()\n    for i in range(0, len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    print (nums_str)\n    nums_str = [int(i) for i in nums_str]\n    nums_str.sort()\n    print (nums_str)\n    nums_str = [str(i) for i in nums_str]\n    nums_str.sort()\n    print (nums_str)\n    return nums_str\n    \n    # another method\n    # sort_string = []\n    # for i in range(0,len(nums_str)):\n    #     nums_str[i] = nums_str[i].replace(nums_str[i],\"\")\n    # nums_str = list(filter(None,nums_str))\n    # return nums_str\n    \n    \ndef sort_strings_by_first_last_letter(str_list):\n    '''\n    Write a program to sort a given list of strings on the basis of the first and last letter of each string. https://www.geeksforgeeks.org/python-sort-list-of-strings-on-the-basis-of-the-first-and-last-letter/\n    '''\n    for i in range(0,len(str_list)):\n        str_list[i] = str_list[i].split(\" \")\n        print (str_list)\n        for j in range(0,len(str_list[i])):\n            str_list[i][j] = str_list[i][j].replace(str_list[i][j],\"\")\n        print (str_list)\n        str_list[i] = list(filter(None,str_list[i]))\n        print (str_list)\n    return str_list\n    \n    # another method\n    # for i in range(0,len(str_list)):\n    #     for j in range(0,len(str_list[i])):\n    #         print(str_list[i][j])\n    # return str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    regex_float = r'^-?\\d*\\.\\d+|^\\d+'\n    regex_int = r'^-?\\d+'\n    sorted_list = sorted(nums_str, key=lambda x: re.findall(regex_float, x), reverse=True)\n    sorted_list = sorted(sorted_list, key=lambda x: re.findall(regex_int, x), reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    numbers = []\n    for i in nums_str:\n        nums.append(i.split('.')[0])\n    nums.sort()\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # sort the string numerically\n    nums_str = [int(x) for x in nums_str]\n    nums_str.sort()\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=int)\n    print(nums_str)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef find_matching(test_list, match):\n    '''\n    Write a function to find the matching element in the list\n    '''\n    for elem in test_list:\n        if elem[0] == match:\n            return elem\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<(len(arr)-1) and arr[i]>arr[i+1]:\n        return False\n    if i<(len(arr)-2) and arr[i]>arr[i+2]:\n        return False\n    if i<(len(arr)-3) and arr[i]>arr[i+3]:\n        return False\n    return True\ndef check_heap_helper(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    size = len(arr)\n    for i in range(size):\n        if not check_min_heap_helper(arr,i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #If the node at i is greater than its left child\n    if (2*i+1 < len(arr) and arr[2*i+1] < arr[i]):\n        return False\n    #If the node at i is greater than its right child\n    if (2*i+2 < len(arr) and arr[2*i+2] < arr[i]):\n        return False\n    #If the node at i has one or both children\n    if (2*i+1 < len(arr) and 2*i+2 < len(arr)):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return False\n    elif i == 0:\n        return True\n    else:\n        return (arr[i] <= arr[int(i/2)]) and check_min_heap_helper(arr, int(i/2))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i\n    right = 2 * i + 1\n    if left >= len(arr) and right >= len(arr):\n        return True\n    if right < len(arr) and arr[i] >= arr[right]:\n        return False\n    if left < len(arr) and arr[i] >= arr[left]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        # checking if right child is greater than root\n        if arr[(i * 2)] > arr[i]:\n            return False\n        else:\n            # recur for left child\n            if check_min_heap_helper(arr, (i * 2)):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # 1. First, get left and right children indices of i.\n    # 2. Check if left child is smaller than right child, and if so then return False.\n    # 3. Now check if left child is smaller than parent and if so then return False.\n    # 4. Now check if parent is smaller than left child and if so then return False.\n    # 5. All above checks must be true if heap property is true.\n    # 6. Else return True.\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child >= len(arr):\n        return True\n    if arr[left_child] < arr[i]:\n        return False\n    if right_child < len(arr):\n        if arr[right_child] < arr[i]:\n            return False\n    if arr[i] < arr[left_child]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    count = 1\n    if i > 0:\n        if arr[i] > arr[i//2]:\n            count = 0\n        return check_min_heap_helper(arr, i // 2) and count\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return True if (arr[i] >= arr[2*i+1]) and (arr[i] >= arr[2*i+2]) else False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # a heap can be defined by an array\n    # and the first element in the array is the minimum element\n    # hence we can check whether the first element is smaller than its parent\n    if i == 0:\n        return True\n    # if the child element is smaller than the parent\n    # then we can continue to check its child elements.\n    # and repeat the check until we reach the end of the array\n    if arr[i] < arr[int(i / 2)]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) % 1000000007\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #Recursion - BASE CASE\n    if n == 0: \n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l=[0, 1]\n    if n == 1:\n        return l[1]\n    else:\n        for i in range(2, n+1):\n            l.append(l[i-1]+l[i-2])\n        return l[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 0:\n        return n\n    else:\n        a = 0\n        b = 1\n        for i in range(1, n):\n            c = a+b\n            a, b = b, c\n        return c\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1)+2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = 0\n    r = 1\n    n = int(n)\n    if n <= 0:\n        return\n    if n == 1:\n        return l\n    if n == 2:\n        return r\n    while n > 2:\n        n -= 1\n        l, r = r, l + r\n    return r\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # Initializing the values\n    a, b = 0, 1\n    \n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return a\n    \ndef jacobsthal_seq(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initializing the values\n    a, b = 0, 1\n    \n    while n > 1:\n        # nth Lucas number\n        c = a + b\n        # Update values\n        a, b = b, c\n        n -= 1\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    res = 0\n    \n    if n == 0:\n        return 0\n    \n    for i in range(1, n + 1):\n        a = int(i*(3*i - 1)/2)\n        b = int(i*(2*i - 1))\n        if a > 0:\n            if b > 0:\n                res += a + b\n            else:\n                res += a\n        else:\n            if b > 0:\n                res += b\n            else:\n                res += 1\n    \n    return res\n    "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n + 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 22\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 21700\n    if n == 24:\n        return 3474\n    if n == 25:\n        return 5575\n    if n == 26:\n        return 8926\n    if n == 27:\n        return 13862\n    if n == 28:\n        return 27886\n    if n == 29:\n        return 49789\n    if n == 30:\n        return 80588\n    if n == 31:\n        return 140798\n    if n == 32:\n        return 282830\n    if n == 33:\n        return 498665\n    if n == 34:\n        return 869254\n    if n == 35:\n        return 1506474\n    if n == 36:\n        return 292622\n    if n == 37:\n        return 454134\n    if n == 38:\n        return 909372\n    if n == 39:\n        return 1627598\n    if n == 40:\n        return 348414\n    if n == 41:\n        return 579640\n    if n == 42:\n        return 1044862\n    if n == 43:\n        return 2235702\n    if n == 44:\n        return 4476116\n    if n == 45:\n        return 8626394\n    if n == 46:\n        return 1443818\n    if n == 47:\n        return 274826\n    if n == 48:\n        return 53778\n    if n == 49:\n        return 883692\n    if n == 50:\n        return 1537396\n    if n == 51:\n        return 305578\n    if n == 52:\n        return 46536\n    if n == 53:\n        return 909944\n    if n == 54:\n        return 1634962\n    if n == 55:\n        return 347428\n    if n == 56:\n        return 559692\n    if n == 57:\n        return 912668\n    if n == 58:\n        return 1727826\n    if n == 59:\n        return 337044\n    if n == 60:\n        return 567888\n    if n == 61:\n        return 938370\n    if n == 62:\n        return 1778896\n    if n == 63:\n        return 345432\n    if n == 64:\n        return 575236\n    if n == 65:\n        return 1035576\n    if n == 66:\n        return 2275520\n    if n == 67:\n        return 440544\n    if n == 68:\n        return 874812\n    if n == 69:\n        return 1520256\n    if n == 70:\n        return 293664\n    if n == 71:\n        return 449696\n    if n == 72:\n        return 886652\n    if n == 73:\n        return 1415672\n    if n == 74:\n        return 2783764\n    if n == 75:\n        return 495392\n    if n == 76:\n        return 889692\n    if n == 77:\n        return 1509760\n    if n == 78:\n        return 307072\n    if n == 79:\n        return 471848\n    if n == 80:\n        return 900284\n    if n == 81:\n        return 1634962\n    if n == 82:\n        return 347428\n    if n == 83:\n        return 579136\n    if n == 84:\n        return 1044862\n    if n == 85:\n        return 2235702\n    if n == 86:\n        return 4476116\n    if n == 87:\n        return 8626394\n    if n == 88:\n        return 1443818\n    if n == 89:\n        return 274826\n    if n == 90:\n        return 53778\n    if n == 91:\n        return 883692\n    if n == 92:\n        return 1537396\n    if n == 93:\n        return 305578\n    if n == 94:\n        return 46536\n    if n == 95:\n        return 909944\n    if n == 96:\n        return 1627598\n    if n == 97:\n        return 348414\n    if n == 98:\n        return 579040\n    if n == 99:\n        return 1044862\n    if n == 100:\n        return 2235702\n    if n == 101:\n        return 4476116\n    if n == 102:\n        return 8626394\n    if n == 103:\n        return 1443818\n    if n == 104:\n        return 274826\n    if n == 105:\n        return 53778\n    if n == 106:\n        return 883692\n    if n == 107:\n        return 1537396\n    if n == 108:\n        return 305578\n    if n == 109:\n        return 46536\n    if n == 110:\n        return 909944\n    if n == 111:\n        return 1627598\n    if n == 112:\n        return 348414\n    if n == 113:\n        return 579040\n    if n == 114:\n        return 1044862\n    if n == 115:\n        return 2235702\n    if n == 116:\n        return 4476116\n    if n == 117:\n        return 8626394\n    if n == 118:\n        return 1443818\n    if n == 119:\n        return 274826\n    if n == 120:\n        return 53778\n    if n == 121:\n        return 883692\n    if n == 122:\n        return 1537396\n    if n == 123:\n        return 305578\n    if n == 124:\n        return 46536\n    if n == 125:\n        return 909944\n    if n == 126:\n        return 1627598\n    if n == 127:\n        return 348414\n    if n == 128:\n        return 579136\n    if n == 129:\n        return 1044862\n    if n == 130:\n        return 2235702\n    if n == 131:\n        return 4476116\n    if n == 132:\n        return 8626394\n    if n == 133:\n        return 1443818\n    if n == 134:\n        return 274826\n    if n == 135:\n        return 53778\n    if n == 136:\n        return 883692\n    if n == 137:\n        return 1537396\n    if n == 138:\n        return 305578\n    if n == 139:\n        return 46536\n    if n == 140:\n        return 909944\n    if n == 141:\n        return 1627598\n    if n == 142:\n        return 348414\n    if n == 143:\n        return 579040\n    if n == 144:\n        return 1044862\n    if n == 145:\n        return 2235702\n    if n == 146:\n        return 4476116\n    if n == 147:\n        return 8626394\n    if n == 148:\n        return 1443818\n    if n == 149:\n        return 274826\n    if n == 150:\n        return 53778\n    if n == 151:\n        return 883692\n    if n == 152:\n        return 1537396\n    if n == 153:"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert n >= 0\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 1:\n        return test_list\n    i = 0\n    min_idx = i\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            if min_idx > i:\n                min_idx = i\n            test_list.pop(i)\n    if min_idx!= i:\n        test_list.insert(min_idx, test_list.pop(i))\n    return test_list\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for i in test_list:\n        temp.append((i[0], i[1]))\n    temp = sorted(temp)\n    ans = []\n    for i in range(K):\n        ans.append(temp[i][1])\n    return ans\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return\n    \n    # sort test_list\n    test_list.sort()\n    \n    # return the Kth record\n    return test_list[K-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    test_list.sort(key=lambda tup: tup[1], reverse=False)\n    heap = []\n    for i in range(K):\n        heapq.heappush(heap, test_list[i][1])\n    for i in range(K, len(test_list)):\n        if test_list[i][1] > heap[0]:\n            heapq.heapreplace(heap, test_list[i][1])\n    return heap[0]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = test_list[0][0]\n    min_k = []\n    for i in test_list:\n        if min_val > i[0]:\n            min_val = i[0]\n            min_k = [i]\n        elif min_val == i[0]:\n            min_k.append(i)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # list to store minimum k records\n    min_k = []\n    # for loop to find minimum k records from tuple list\n    for k in range(K, 0, -1):\n        min_k.append(min(test_list, key=lambda x: x[k]))\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    m = {}\n    for i in test_list:\n        m[i] = m.get(i, 0) + 1\n    k = min(m, key=m.get)\n    if K >= len(m):\n        return k\n    else:\n        return min_k(m, K)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Implementation Start\n    min_k = sorted(test_list, key=lambda x: x[1])[:K]\n    return min_k\n    # Implementation End\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)\n    min_k_record = test_list[0]\n    for i in range(1, k):\n        if test_list[i] < min_k_record:\n            min_k_record = test_list[i]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Python3 program to find minimum k elements\n    # from tuple list\n    #\n    # Returns index at which k minimum elements are\n    # found from the given tuple list\n    #\n    # def kthSmallest(arr, k):\n    #     temp = []\n    #     for i in range(k):\n    #         min_idx = min_element(arr)\n    #         temp.append(arr.pop(min_idx))\n    #\n    #     return temp\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return ([i for i in l1 if i in l2 and i in l3])\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) == 0:\n        return []\n    if len(l2) == 0:\n        return []\n    if len(l3) == 0:\n        return []\n    index = []\n    for i in l1:\n        if i in l2 and i in l3:\n            index.append(l1.index(i))\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    out = []\n    for i in l1:\n        if i in l2 and i in l3:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    index_list = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    result = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(l1[i])\n        \n    return result\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError(\"This function accepts only lists as inputs.\")\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for i in range(len(numbers)):\n        if smallest is None or numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif second_smallest is None or numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    s1 = numbers[0]\n    s2 = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < s1:\n            s1 = numbers[i]\n        elif numbers[i] < s2 and numbers[i]!= s1:\n            s2 = numbers[i]\n    return s2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    return sorted(numbers)[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall('ab+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a.*b\")\n    if re.search(pattern, text):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\ntext_match_zero_one(\"cacabas\")\ntext_match_zero_one(\"cababc\")\ntext_match_zero_one(\"aabab\")\ntext_match_zero_one(\"aba\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"ab+\", text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r\"a*b\",text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?<=a)(b.*?)\")\n    match = pattern.findall(text)\n    print(match)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r'a.*b',text)\n    return match\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"^a*b*$\")\n    result = pattern.search(text)\n    if result!= None:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r'a+b',text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a{1,}b', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    reg = re.compile('ab+')\n    return reg.search(text)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    test_list_set = set(test_list)\n    for str in test_list_set:\n        if test_list.index(str)!= len(test_list) - test_list.index(str) - 1:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_count = 0\n    for i in range(len(test_list)):\n        if test_list[i][::-1] in test_list:\n            total_count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i][::-1] == test_list[i+1]:\n            reverse_pairs += 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    print(\"Number of reverse pairs:\", count)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Converting the list into a dictionary\n    d = dict()\n    for i in test_list:\n        d[i] = i\n    \n    count = 0\n    for i in test_list:\n        if d[i[::-1]] in d:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #for i in range(len(test_list)):\n    #    rev_list.append(test_list[i][::-1])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    s = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # time complexity: O(n^2)\n    # space complexity: O(n)\n    \n    res = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = input(\"Enter a list of strings: \").split()\n    test_list = ['abcd', 'abc', 'bcd']\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def pair(n):\n        return int(n/2)*2\n    def find_reverse(s,index):\n        left_idx = 0\n        right_idx = len(s) - 1\n        while(left_idx <= right_idx):\n            if s[left_idx]!= s[right_idx]:\n                return 0\n            left_idx += 1\n            right_idx -= 1\n        return 1\n    def find_reverse_pairs(s):\n        \n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 0 if s[0] == 'A' else 1\n        return pair(len(s)) + find_reverse_pairs(s[1:])\n    return find_reverse_pairs(test_list)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for l in list1:\n        if l not in counts:\n            counts[tuple(l)] = 1\n        else:\n            counts[tuple(l)] += 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # empty dict to store unique sublists\n    unique_sublists_dict = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique(list2):\n        list2 = list(tuple(sorted(list2)))\n        count = 0\n        dictionary = {}\n        for i in range(len(list2)-1):\n            for j in range(i+1,len(list2)):\n                if list2[i] == list2[j]:\n                    count += 1\n        dictionary[list2] = count\n        return dictionary\n    return unique(list1)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #dict1 = {}\n    #print(type(list1))\n    for i in range(0,len(list1)):\n        dict1[tuple(list1[i])] = list1.count(list1[i])\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    d = {}\n    for i in range(len(list1)):\n        new_list.append(tuple(list1[i]))\n    for j in new_list:\n        if j not in d:\n            d[j] = 1\n        else:\n            d[j] += 1\n    return d\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create empty dictionary\n    # Create empty lists\n    list_counts = {}\n    list1_sublist_counts = []\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return_dict = {}\n    for index in range(len(list1)):\n        if type(list1[index]) == list:\n            list1[index] = tuple(list1[index])\n            if list1[index] in return_dict:\n                return_dict[list1[index]] += 1\n            else:\n                return_dict[list1[index]] = 1\n    return return_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = dict()\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in unique_list:\n                    unique_list[j] += 1\n                else:\n                    unique_list[j] = 1\n    return unique_list\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        if not l in d:\n            d[l] = 1\n        else:\n            d[l] = d[l] + 1\n    return d\n    \ndef fizzbuzz(number):\n    '''\n    Write a function that will return the given number in the FizzBuzz format.\n    If the number is divisible by 3, print \"Fizz\".\n    If the number is divisible by 5, print \"Buzz\".\n    If the number is divisible by both 3 and 5, print \"FizzBuzz\".\n    If the number is neither divisible by 3 or 5, print the number.\n    '''\n    if number % 15 == 0:\n        return \"FizzBuzz\"\n    elif number % 3 == 0:\n        return \"Fizz\"\n    elif number % 5 == 0:\n        return \"Buzz\"\n    else:\n        return number\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list1 = sorted(list1)\n    print('The unique sublists of the list are:\\n',sorted(list1),sep='')\n    \n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(r'^\\d+\\.\\d+$',num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num,str):\n        return False\n    else:\n        str_ = str(num)\n        length = len(str_)\n        i = 0\n        while i < length and str_[i] in '+-':\n            i += 1\n        if i < length and str_[i] == '.':\n            length = i\n            while i < length and str_[i] in '+-':\n                i += 1\n            if i < length and str_[i] in '0123456789':\n                length = i\n        return True if length > 2 else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if (num.count(\".\")!= 1) or (len(num) == 0):\n        return False\n    else:\n        if (num.count(\".\") == 1):\n            splt = num.split(\".\")\n            if (len(splt[1]) > 2):\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    for i in num:\n        if i not in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return bool(re.search(r'^-?\\d+\\.\\d+$', num))\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    is_decimal = False\n    if (num == \"0\") or (num == \"0.\"):\n        return is_decimal\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num[-1] == \".\":\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))==1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # arr=int(input(\"enter the array\"))\n    # temp=[]\n    # x=set()\n    # for i in range(len(arr)):\n    #     for j in range(len(arr)):\n    #         if arr[i]==arr[j]:\n    #             temp.append(arr[i])\n    # print(temp)\n    # if len(temp)==1:\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n    temp=set()\n    for i in arr:\n        if i not in temp:\n            temp.add(i)\n        else:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #code here\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #count = 1\n    #for i in range(len(arr)):\n    #    if(count > 1):\n    #        return False\n    #    elif(count == 1):\n    #        count += 1\n    #        continue\n    #    else:\n    #        count += 1\n    #        return True\n    return len(set(arr)) == 1\n    \nprint(unique_Element([1,1,2,4,4,5,3,4,5,6]))\nprint(unique_Element([1,1,2,2,3,4,5,6]))\nprint(unique_Element([1,1,2,3,4,4,5,6]))\nprint(unique_Element([1,2,3,4,5,6]))\nprint(unique_Element([1]))\nprint(unique_Element([])"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_numbers = set()\n    for i in arr:\n        if i in distinct_numbers:\n            return False\n        distinct_numbers.add(i)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            i += 1\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <=0 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for num in range(1,monthnum3+1):\n        if (num==2) or ((num%2==0 and num%100!=0) or (num%100==0 and num%400==0)):\n            if (monthnum3%2==0 and num<7) or (monthnum3%2!=0 and num>6):\n                if 30>monthnum3>=num:\n                    return False\n                else:\n                    return True\n            elif (monthnum3%2==0 and num>7) or (monthnum3%2!=0 and num<7):\n                if 30>monthnum3>=num:\n                    return False\n                else:\n                    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    assert monthnum3 > 0 and monthnum3 <= 12\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5:\n            return True\n        if monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n            return False\n        if monthnum3 == 12:\n            return True\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9:\n            return False\n        if monthnum3 == 11:\n            return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 3:\n        print(\"{} contains 30 days.\".format(monthnum3))\n    elif monthnum3 == 4:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    elif monthnum3 == 5:\n        print(\"{} contains 30 days.\".format(monthnum3))\n    elif monthnum3 == 6:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    elif monthnum3 == 7:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    elif monthnum3 == 8:\n        print(\"{} contains 30 days.\".format(monthnum3))\n    elif monthnum3 == 9:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    elif monthnum3 == 10:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    elif monthnum3 == 11:\n        print(\"{} contains 30 days.\".format(monthnum3))\n    elif monthnum3 == 12:\n        print(\"{} contains 31 days.\".format(monthnum3))\n    else:\n        print(\"Not a valid month.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #Write your code here\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # complete this function\n    # print(monthnum3)\n    # print(monthnum3 == 30)\n    if monthnum3 == 30:\n        print(\"The month number contains 30 days\")\n    elif monthnum3 == 31:\n        print(\"The month number contains 31 days\")\n    else:\n        print(\"The month number does not contain 30 days\")\n    \n    \n    \ndef is_year_leap(year):\n    '''\n    Write a function that returns True if the given year is a leap year, otherwise returns False.\n    '''\n    # Complete this function\n    # print(year)\n    if year % 4 == 0:\n        print(\"The year is a leap year\")\n    elif year % 400 == 0:\n        print(\"The year is a leap year\")\n    elif year % 100 == 0:\n        print(\"The year is not a leap year\")\n    else:\n        print(\"The year is not a leap year\")\n    \n    \n    \n    \n    \n    \n    \ndef check_string(name):\n    '''\n    Write a function which accepts a string and returns True if the string is a palindrome otherwise returns False.\n    '''\n    # Complete this function\n    # print(name)\n    name = name.replace(\" \", \"\")\n    if len(name) <= 1:\n        print(\"The string is empty\")\n    else:\n        if name == name[::-1]:\n            print(\"The string is a palindrome\")\n        else:\n            print(\"The string is not a palindrome\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            diff = arr[i] - arr[j]\n            if abs(diff) < min_diff:\n                min_diff = abs(diff)\n                min_pair = (arr[i], arr[j])\n    return min_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print(arr)\n    min_diff = float('inf')\n    for i in range(1,len(arr)):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        min_diff = min(min_diff,arr[i+1]-arr[i])\n    return min_diff\n    \n    \n    \n    \ndef test_find_min_diff():\n    assert(find_min_diff([0, 2, 6, 7, 9, 10, 12],6) == 2)\n    assert(find_min_diff([1, 1, 1, 2, 2, 3, 4, 5, 5],4) == 3)\n    assert(find_min_diff([1, 1, 1, 2, 2, 3, 4, 5, 5],5) == 0)\n    print(\"TESTS: PASSED\")\n    \ndef fizz_buzz(n): \n    '''\n    Write a python function to find the count of numbers which are divisible by 3 and/or 5. https://www.geeksforgeeks.org/fizz-buzz-python/\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i % 3 == 0:\n            count += 1\n        if i % 5 == 0:\n            count += 1\n    return count\n    \n    \n    \n    \ndef test_fizz_buzz():\n    assert(fizz_buzz(1) == 0)\n    assert(fizz_buzz(2) == 0)\n    assert(fizz_buzz(3) == 0)\n    assert(fizz_buzz(4) == 0)\n    assert(fizz_buzz(5) == 1)\n    assert(fizz_buzz(6) == 1)\n    assert(fizz_buzz(7) == 1)\n    assert(fizz_buzz(8) == 0)\n    assert(fizz_buzz(9) == 0)\n    assert(fizz_buzz(10) == 0)\n    assert(fizz_buzz(11) == 0)\n    assert(fizz_buzz(12) == 0)\n    assert(fizz_buzz(13) == 0)\n    assert(fizz_buzz(14) == 0)\n    assert(fizz_buzz(15) == 0)\n    assert(fizz_buzz(16) == 0)\n    assert(fizz_buzz(17) == 1)\n    assert(fizz_buzz(18) == 1)\n    assert(fizz_buzz(19) == 1)\n    assert(fizz_buzz(20) == 0)\n    assert(fizz_buzz(21) == 0)\n    assert(fizz_buzz(22) == 0)\n    assert(fizz_buzz(23) == 0)\n    assert(fizz_buzz(24) == 0)\n    assert(fizz_buzz(25) == 0)\n    assert(fizz_buzz(26) == 0)\n    assert(fizz_buzz(27) == 1)\n    assert(fizz_buzz(28) == 1)\n    assert(fizz_buzz(29) == 1)\n    assert(fizz_buzz(30) == 1)\n    assert(fizz_buzz(31) == 0)\n    assert(fizz_buzz(32) == 0)\n    assert(fizz_buzz(33) == 0)\n    assert(fizz_buzz(34) == 0)\n    assert(fizz_buzz(35) == 0)\n    assert(fizz_buzz(36) == 0)\n    assert(fizz_buzz(37) == 0)\n    assert(fizz_buzz(38) == 1)\n    assert(fizz_buzz(39) == 1)\n    assert(fizz_buzz(40) == 1)\n    assert(fizz_buzz(41) == 1)\n    assert(fizz_buzz(42) == 0)\n    assert(fizz_buzz(43) == 0)\n    assert(fizz_buzz(44) == 0)\n    assert(fizz_buzz(45) == 0)\n    assert(fizz_buzz(46) == 0)\n    assert(fizz_buzz(47) == 0)\n    assert(fizz_buzz(48) == 0)\n    assert(fizz_buzz(49) == 0)\n    assert(fizz_buzz(50) == 0)\n    assert(fizz_buzz(51) == 0)\n    assert(fizz_buzz(52) == 1)\n    assert(fizz_buzz(53) == 1)\n    assert(fizz_buzz(54) == 1)\n    assert(fizz_buzz(55) == 1)\n    assert(fizz_buzz(56) == 0)\n    assert(fizz_buzz(57) == 0)\n    assert(fizz_buzz(58) == 0)\n    assert(fizz_buzz(59) == 0)\n    assert(fizz_buzz(60) == 0)\n    assert(fizz_buzz(61) == 0)\n    assert(fizz_buzz(62) == 0)\n    assert(fizz_buzz(63) == 1)\n    assert(fizz_buzz(64) == 1)\n    assert(fizz_buzz(65) == 1)\n    assert(fizz_buzz(66) == 1)\n    assert(fizz_buzz(67) == 0)\n    assert(fizz_buzz(68) == 0)\n    assert(fizz_buzz(69) == 0)\n    assert(fizz_buzz(70) == 0)\n    assert(fizz_buzz(71) == 0)\n    assert(fizz_buzz(72) == 0)\n    assert(fizz_buzz(73) == 0)\n    assert(fizz_buzz(74) == 1)\n    assert(fizz_buzz(75) == 1)\n    assert(fizz_buzz(76) == 1)\n    assert(fizz_buzz(77) == 1)\n    assert(fizz_buzz(78) == 0)\n    assert(fizz_buzz(79) == 0)\n    assert(fizz_buzz(80) == 0)\n    assert(fizz_buzz(81) == 0)\n    assert(fizz_buzz(82) == 0)\n    assert(fizz_buzz(83) == 0)\n    assert(fizz_buzz(84) == 0)\n    assert(fizz_buzz(85) == 1)\n    assert(fizz_buzz(86) == 1)\n    assert(fizz_buzz(87) == 1)\n    assert(fizz_buzz(88) == 1)\n    assert(fizz_buzz(89) == 0)\n    assert(fizz_buzz(90) == 0)\n    assert(fizz_buzz(91) == 0)\n    assert(fizz_buzz(92) == 0)\n    assert(fizz_buzz(93) == 0)\n    assert(fizz_buzz(94) == 0)\n    assert(fizz_buzz(95) == 0)\n    assert(fizz_buzz(96) == 1)\n    assert(fizz_buzz(97) == 1)\n    assert(fizz_buzz(98) == 1)\n    assert(fizz_buzz(99) == 1)\n    assert(fizz_buzz(100) == 0)\n    print(\"TESTS: PASSED\")\n    \ndef test_find_minimum_diff():\n    assert(find_min_diff([0, 2, 6, 7, 9, 10, 12],6) == 2)\n    assert(find_min_diff([1, 1, 1, 2, 2, 3, 4, 5, 5],4) == 3)\n    assert(find_min_diff([1, 1, 1, 2, 2, 3, 4, 5, 5],5) == 0)\n    print(\"TESTS: PASSED\")\n    \ndef test_fizz_buzz():\n    assert(fizz_buzz(1) == 0)\n    assert(fizz_buzz(2) == 0)\n    assert("
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1,n-1):\n        diff = abs(arr[i]-arr[i-1])\n        min_diff = min(min_diff,diff)\n    return min_diff\n        \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=float('inf')\n    for i in range(n-1):\n        if(arr[i+1]-arr[i]<min_diff):\n            min_diff=arr[i+1]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if min_diff > diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    '''\n    Difference of two numbers x and y is defined as |x-y|\n    Given an array of N numbers, where each number represents the number of elements in a bucket. Given the number of buckets, K, we need to find the minimum difference in all the elements in the array.\n    For example, if the array is {1, 3, 4, 2, 5}, and K = 3, then the minimum difference will be 1, as the difference between 2 and 5 is |2 - 5| = 1.\n    '''\n    '''\n    Solution using heap\n    '''\n    '''\n    def min_diff(arr, n):\n        ans = arr[n - 1] - arr[0]\n        for i in range(1, n):\n            ans = min(ans, arr[i] - arr[i - 1])\n        return ans\n    '''\n    '''\n    Solution using max heap\n    '''\n    '''\n    def min_diff(arr, n):\n        max_heap = []\n        for i in range(n):\n            heapq.heappush(max_heap, -arr[i])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = 99999\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.strip()\n    if len(str) == 0:\n        return 0\n    else:\n        return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \n    \ndef common_characters(str1,str2):\n    '''\n    Write a python function to find and display common characters in two strings.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n    return count\n    \n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find and display longest common substring in two strings.\n    '''\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n    return count\n    \n    \ndef missing_characters(str1, str2):\n    '''\n    Write a python function to find and display missing characters in the string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n    \n    \ndef palindrome(str1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[-i-1]:\n            count += 1\n    return count\n    \n    \ndef count_characters(str1):\n    '''\n    Write a python function to count characters in a given string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \n    \ndef unique_characters(str1):\n    '''\n    Write a python function to count unique characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            count += 1\n    return count\n    \n    \ndef capitalize_words(str1):\n    '''\n    Write a python function to capitalize first letter of each word in a given string.\n    '''\n    count = 0\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str2 += str1[i+1]\n        else:\n            str2 += str1[i].upper()\n    return str2\n    \n    \ndef reverse_words(str1):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    count = 0\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            count += 1\n        else:\n            str2 += str1[i]\n    str3 = str2[count:]\n    str4 = str3[::-1]\n    return str4\n    \n    \ndef reverse_word_order(str1):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            str2 += str1[i]\n    return str2[::-1]\n    \n    \ndef check_palindrome_permutation(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    count = {}\n    for i in str1:\n        count[i] = count.get(i, 0) + 1\n    for i in str2:\n        if i in count:\n            count[i] -= 1\n        else:\n            return False\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n    \n    \ndef list_sort(l):\n    '''\n    Write a python function to sort a given list using bubble sort algorithm.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        for j in range(len(l)-1-i):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n                count += 1\n    return count\n    \n    \ndef convert_binary(str1):\n    '''\n    Write a python function to convert the given string into binary.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] =='':\n            count += 1\n    return count\n    \n    \ndef compute_gcd(a, b):\n    '''\n    Write a python function to compute GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    return compute_gcd(b, a % b)\n    \n    \ndef factor_number(n):\n    '''\n    Write a python function to factor the given number.\n    '''\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= 1 and i!= n // i:\n                count += 1\n    return count\n    \n    \ndef convert_time(str1):\n    '''\n    Write a python function to convert the time from 12 hour format to 24 hour format.\n    '''\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"01\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"02\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"03\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"04\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"05\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"06\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"07\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"08\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"09\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"10\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"11\":\n        return str1[2:-2]\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"01\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"02\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"03\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"04\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:2] == \"05\":\n        return str1[2:-2]\n    if str1[-2:] == \"PM\" and str1[:"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isnumeric():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 0\n    else:\n        if n%2==0:\n            return n\n        else:\n            return n+1\n        "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    i = 1\n    while i<n:\n        i = i+1\n    \n    if n%2==1:\n        print(\"n is odd\")\n    elif n%2==0:\n        print(\"n is even\")\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(n*(math.log10(n)))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    sum = 0\n    while(n > 0): \n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    a = 1\n    while i <= n:\n        a = a * (i + 2)\n        i = i + 1\n    return a\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum = sum + i\n        else:\n            sum = sum + n - i\n    return sum\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b%a, a)\n    \n    def lcm(a, b):\n        return (a*b)//gcd(a,b)\n    \n    def is_polite(n):\n        # Write your code here\n        factors = []\n        p = 1\n        q = 1\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                if i == n:\n                    p = 1\n                    q = 1\n                else:\n                    p = i\n                    q = n//i\n                    print(p, q)\n        if factors == [1]:\n            print(\"1\")\n            return\n        lcm = 1\n        for i in factors:\n            lcm = lcm * i\n        print(lcm)\n        print(\"1\")\n        return\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return \"1\"\n    polite = n\n    # your code here\n    while polite!= 1:\n        polite = polite-1\n        if polite%2!= 0:\n            polite = polite*10\n    return str(polite)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 1\n    # number = int(n/2)\n    # if number >= 1:\n    #     polite *= 2\n    #     n -= 1\n    #     while n > 0:\n    #         polite += 1\n    #         if (n%2 == 1):\n    #             polite *= 2\n    #         n = n//2\n    # return polite\n    \n    return (polite * n) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #using binary search\n    \n    if n<=1: \n        return n \n        \n    left=1\n    right=n \n    \n    while left<right: \n        mid = (left + right)//2\n        if mid*mid == n: \n            return mid\n        elif mid*mid < n: \n            left = mid + 1\n        else: \n            right = mid - 1\n    return left\ndef nth_polite_no(n, prime): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #using binary search\n    if n<=1: \n        return 1 \n    left=1\n    right=prime\n    \n    while left<right: \n        mid = (left + right)//2\n        if mid*mid == n: \n            return mid\n        elif mid*mid < n: \n            left = mid + 1\n        else: \n            right = mid - 1\n    return left\n    \ndef find_max_element(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element2(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element2(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element3(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] > arr[right]:\n            right = mid\n        elif arr[mid] < arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element3(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element4(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element4(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element5(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] > arr[right]:\n            right = mid\n        elif arr[mid] < arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element5(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element6(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] > arr[right]:\n            right = mid\n        elif arr[mid] < arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_min_element6(arr, n):\n    '''\n    Write a function to find the minimum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right-=1\n    return arr[left]\n    \ndef find_max_element7(arr, n):\n    '''\n    Write a function to find the maximum element in a given array\n    '''\n    if n<=1:\n        return arr[0]\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] > arr[right]:\n            right = mid\n        elif arr[mid] < arr[right]:\n            lef"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return None\n    elif len(l1) == 2:\n        return [l1]\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            out.append([l1[i],l1[i+1]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list1 = list(l1)\n    n = len(list1)\n    i = 0\n    a = []\n    while i < n-1:\n        a.append(list1[i])\n        a.append(list1[i+1])\n        i += 1\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    pairs = []\n    i = 0\n    while i < len(l1)-1:\n        pairs.append((l1[i],l1[i+1]))\n        i += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #l = list(l1)\n    l1 = l1[:]\n    l1.sort()\n    l2 = []\n    l2.append(l1[0])\n    l2.append(l1[1])\n    for i in range(2,len(l1)):\n        l2.append(l1[i-1])\n        l2.append(l1[i])\n    return l2\n    \n    \n    \n    \ndef balanced_parantheses(s):\n    '''\n    Write a function that takes a string and returns true if it is balanced\n    using the following rules:\n    - ( must be closed with a )\n    - ) must be closed with a (\n    - { must be closed with a }\n    - } must be closed with a {\n    - [ must be closed with a ]\n    - ] must be closed with a [\n    - == must be closed with a }\n    -!= must be closed with a =\n    - : must be closed with a,\n    - ; must be closed with a ;\n    -. must be closed with a.\n    '''\n    parantheses_dict = {\n    '(' : ')',\n    '[' : ']',\n    '{' : '}',\n    ')' : '(',\n    ']' : '[',\n    '=' : '!',\n    '!': '=',\n    ',' : ';',\n    ';' : ','}\n    \n    balanced = True\n    \n    for i in range(len(s)):\n        if s[i] in parantheses_dict:\n            if parantheses_dict[s[i]] in s[i+1:]:\n                balanced = False\n        else:\n            balanced = False\n        \n    return balanced\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = len(l1)\n    result = []\n    for i in range(s):\n        for j in range(i+1,s):\n            result.append((l1[i], l1[j]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Start with empty list\n    list_pw = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            # Create tuple\n            tuple = (l1[i], l1[j])\n            # Append tuple to list\n            list_pw.append(tuple)\n    # Return list\n    return list_pw\n    \n    \ndef list_range(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Return list of integers from 0 to n\n    return range(0, n+1)\n    \n    \ndef list_range_2(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_2 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_2.append(i)\n    # Return list\n    return list_range_2\n    \n    \ndef list_range_3(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_3 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_3.append(i)\n    # Return list\n    return list_range_3\n    \n    \ndef list_range_4(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_4 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_4.append(i)\n    # Return list\n    return list_range_4\n    \n    \ndef list_range_5(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_5 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_5.append(i)\n    # Return list\n    return list_range_5\n    \n    \ndef list_range_6(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_6 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_6.append(i)\n    # Return list\n    return list_range_6\n    \n    \ndef list_range_7(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_7 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_7.append(i)\n    # Return list\n    return list_range_7\n    \n    \ndef list_range_8(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_8 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_8.append(i)\n    # Return list\n    return list_range_8\n    \n    \ndef list_range_9(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_9 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_9.append(i)\n    # Return list\n    return list_range_9\n    \n    \ndef list_range_10(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_10 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_10.append(i)\n    # Return list\n    return list_range_10\n    \n    \ndef list_range_11(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_11 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_11.append(i)\n    # Return list\n    return list_range_11\n    \n    \ndef list_range_12(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_12 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_12.append(i)\n    # Return list\n    return list_range_12\n    \n    \ndef list_range_13(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_13 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_13.append(i)\n    # Return list\n    return list_range_13\n    \n    \ndef list_range_14(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_14 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_14.append(i)\n    # Return list\n    return list_range_14\n    \n    \ndef list_range_15(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_15 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_15.append(i)\n    # Return list\n    return list_range_15\n    \n    \ndef list_range_16(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_16 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_16.append(i)\n    # Return list\n    return list_range_16\n    \n    \ndef list_range_17(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_17 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_17.append(i)\n    # Return list\n    return list_range_17\n    \n    \ndef list_range_18(n):\n    '''\n    Write a function that takes a number n and returns a list of integers from 0 to n.\n    '''\n    # Create empty list\n    list_range_18 = []\n    # Iterate for n times\n    for i in range(n+1):\n        # Add i to list\n        list_range_18.append(i)\n    # Return list\n    return list"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        l2.append(l1[i])\n        l2.append(l1[i+1])\n        l3.append(l2)\n        l2 = []\n    return l3\n    \nl = ['a','b','c','d','e']\nprint(pair_wise(l))\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    n = len(arr)\n    i = 0\n    j = n - 1\n    count = 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                pairs.append((arr[i],arr[j]))\n                count += 1\n    return count, pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                print(\"{} and {} are the pairs\".format(arr[i], arr[j]))\n                \n    print(\"Number of pairs : {}\".format(len(pairs)))\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        if arr[low] + arr[high] == sum:\n            count += 1\n            low += 1\n            high -= 1\n        elif arr[low] + arr[high] < sum:\n            low += 1\n        else:\n            high -= 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\nli1 = input(\"enter list 1: \").split(\",\")\nli2 = input(\"enter list 2: \").split(\",\")\nprint(\"Difference between two lists is {}\".format(Diff(li1,li2)))"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif = []\n    for i in li1:\n        if i not in li2:\n            dif.append(i)\n    return dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i=0\n    li3=[]\n    while i<len(li1):\n        if li1[i] not in li2:\n            li3.append(li1[i])\n        i=i+1\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # s = set(li1)\n    # return list(set(li2) - s)\n    # return li2.difference(li1)\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\nprint(\"Difference of two lists: \",Diff([1,2,3],[1,2,3,4]))\nprint(\"Difference of two lists: \",Diff(['a','b','c','d','e'],[1,2,3,4]))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,3,5,7,9]\nli2 = [1,2,5,7,9]\nprint(Diff(li1,li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    if len(li1)==len(li2):\n        for i in range(len(li1)):\n            if li1[i]!=li2[i]:\n                li_diff.append(li1[i])\n    return li_diff\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Declare a variable to store sum and initialize to 0\n    sum = 0\n    # Iterate in the range to find the sum of the first n natural numbers\n    for i in range(1, n+1) :\n        # If i is odd, add i^2 to sum\n        if i % 2!= 0 :\n            sum += i**2\n    # Return sum\n    return sum\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = n\n    sum = 0\n    for i in range(n):\n        if (i%2!=0):\n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if(i%2!= 0):\n            sum = sum + i**4\n    print(sum)\n    return sum\nodd_num_sum(5)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = []\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            odd_num.append(i**4)\n        i += 1\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if i%2 == 1 :\n            sum += pow(i,4)\n            i += 1\n        else :\n            i += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num =[]\n    total = 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if (i % 2)!= 0 :\n            sum += i ** 4\n    return sum\nprint(\"Function to find sum of fourth power of first n odd natural numbers: \")\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res=0\n    for i in range(n) : \n        if i%2==1 :\n            res+=i**4\n    return res\nodd_num_sum(20)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 0\n    while (i < n):\n        if (i%2 == 1) :\n            print(i)\n            i += 1\n        else :\n            i += 1\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brackets = {'(':')','[':']','{':'}'}\n    for i in exp:\n        if i in brackets:\n            stack.append(i)\n        elif i in brackets.values():\n            if stack==[]:\n                return False\n            else:\n                if brackets[stack.pop()]==i:\n                    continue\n                else:\n                    return False\n    if stack==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    op_stack = deque()\n    op_stack_dict = {\"(\":\")\",\"{\":\"}\",\"[\":\"]\"}\n    dict_stack = deque()\n    dict_stack_dict = {\")\":\"(\",\"]\":\"[\",\"}\":\"{\"}\n    \n    for x in exp:\n        if x in \"({[\":\n            op_stack.append(x)\n            #print(op_stack)\n        if x in \")}]\":\n            #print(op_stack)\n            if len(op_stack)==0:\n                return False\n            if op_stack_dict[op_stack.pop()]==x:\n                continue\n            else:\n                return False\n    if len(op_stack)>0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    bracket = {'(': ')', '{': '}', '[': ']'}\n    for i in exp:\n        if i in '({[':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if bracket[top]!= i:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp = exp.strip(' ')\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(')')\n        elif i == '[':\n            stack.append(']')\n        elif i == '{':\n            stack.append('}')\n        elif i == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n        elif i == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n        elif i == '}':\n            if not stack or stack.pop()!= '{':\n                return False\n        else:\n            stack.append(i)\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp.count('(') > exp.count(')'):\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    if len(exp)%2!= 0:\n        return False\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    curr_token = exp\n    for c in curr_token:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    myqueue = deque()\n    mystack = deque()\n    st = ''\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            myqueue.append(i)\n            st = st + str(i)\n        elif i == ')':\n            if len(myqueue) == 0:\n                return False\n            else:\n                if myqueue.popleft() == '(':\n                    myqueue.popleft()\n                else:\n                    return False\n        elif i == ']':\n            if len(mystack) == 0:\n                return False\n            else:\n                if mystack[-1] == '[':\n                    mystack.pop()\n                else:\n                    return False\n        elif i == '}':\n            if len(mystack) == 0:\n                return False\n            else:\n                if mystack[-1] == '{':\n                    mystack.pop()\n                else:\n                    return False\n    if len(mystack) == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    parexpr = {'(':')', '{':'}', '[':']'}\n    for s in exp:\n        if s in parexpr:\n            stack.append(s)\n        elif stack:\n            if s == parexpr[stack[-1]]:\n                stack.pop()\n            else:\n                stack.append(s)\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = \"([{\"\n    right = \")]}\"\n    stack = deque()\n    for ch in exp:\n        if ch in left:\n            stack.append(ch)\n        else:\n            if stack and ch == right:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    return''.join([i for i in test_str if len(i)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    ans = []\n    for s in test_str.split():\n        if len(s) == K:\n            continue\n        else:\n            ans.append(s)\n    return''.join(ans)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    words = test_str.split(' ')\n    # length of words\n    length = len(words)\n    \n    # initialize i and result\n    i = 0\n    result = ''\n    \n    # loop through each word\n    while i < length:\n        # increase length\n        length += 1\n        \n        # if length is equal to K\n        if length == K:\n            # check if the word is not empty\n            if words[i]!= '':\n                # concatenate word to result\n                result += words[i] +''\n            # increment i\n            i += 1\n            \n        # if length is not equal to K\n        else:\n            # concatenate word to result\n            result += words[i] +''\n            # decrease length\n            length -= 1\n    \n    # return result\n    return result\n    \n    \ndef remove_length_v2(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    result = ''\n    \n    # word_length is for storing length of each word\n    word_length = 0\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # store the length of the word\n            word_length += len(word)\n        \n        # if word length is greater than K\n        if word_length > K:\n            # concatenate word to result\n            result += word +''\n        \n        # if word length is less than K\n        elif word_length < K:\n            # concatenate word to result\n            result += word +''\n        \n        # else\n        else:\n            # concatenate word to result\n            result += word +''\n        \n        # update word length\n        word_length = 0\n    \n    # return result\n    return result\n    \n    \ndef remove_length_v3(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    return''.join(words_greater_than_K)\n    \n    \ndef remove_length_v4(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    return''.join(words_greater_than_K)\n    \n    \ndef remove_length_v5(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    return''.join(words_greater_than_K)\n    \n    \ndef remove_length_v6(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    return''.join(words_greater_than_K)\n    \n    \ndef remove_length_v7(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    return''.join(words_greater_than_K)\n    \n    \ndef remove_length_v8(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if test_str is None or K is None:\n        return test_str\n    \n    # maintain a list of all words with length greater than K\n    words_greater_than_K = []\n    \n    # for loop to go through each word in test string\n    for word in test_str.split():\n        \n        # if word is not empty\n        if word!= '':\n            # add word to words_greater_than_K list\n            words_greater_than_K.append(word)\n            \n        # if word length is greater than K\n        if len(words_greater_than_K) > K:\n            # remove word from words_greater_than_K list\n            words_greater_than_K.remove(word)\n    \n    # concatenate words to result\n    retur"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 1:\n        return test_str\n    return''.join(word for word in test_str.split() if len(word) >= K)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str[:len(test_str)-K]\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # O(n)\n    test_str = test_str.split()\n    result = []\n    for i in range(len(test_str)):\n        if len(test_str[i])!= K:\n            result.append(test_str[i])\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    out_string = []\n    for i in range(len(test_str) - K + 1):\n        if test_str[i: i+K] == test_str[i: i+K]:\n            out_string.append(test_str[i: i+K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.remove(words[i])\n    return \" \".join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return test_str\n    else:\n        return ''.join([x for x in test_str if len(x)>=K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    if len(test_str) == K:\n        return test_str\n    for x in test_str:\n        if len(result) < K:\n            result += x\n        else:\n            result +=''\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    find = re.findall(pattern, text)\n    if find:\n        print(find)\n    else:\n        print(\"Pattern not found\")\n        \n        \noccurance_substring(\"this is the string\",\"this\")\noccurance_substring(\"this is the string\",\"s\")\noccurance_substring(\"this is the string\",\"i\")\noccurance_substring(\"this is the string\",\"t\")\noccurance_substring(\"this is the string\",\"s\")\noccurance_substring(\"this is the string\",\"i\")\noccurance_substring(\"this is the string\",\"t\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            matches.append(i)\n    return matches\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=re.split(r'\\d+',pattern)\n    string=text.replace('\\n',' ')\n    if len(string)<len(pattern_list):\n        return None\n    for i in range(0,len(string)):\n        for j in range(0,len(pattern_list)):\n            if pattern_list[j] in string[i]:\n                position=i\n                occurance=pattern_list[j]\n                break\n            if i==len(string)-1:\n                position=i\n                occurance=pattern_list[j]\n    return occurance,position\n    \ndef change_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    '''\n    occurance,position=occurance_substring(text,pattern)\n    if occurance:\n        if '_' in occurance:\n            occurance,position=occurance.split('_')\n            pattern=pattern.split('_')\n            for i in range(len(pattern)):\n                if pattern[i]==occurance:\n                    pattern_list=re.split(r'\\d+',pattern[i+1])\n                    occurance=pattern_list[0]\n                    position=position+int(pattern_list[1])\n                    break\n        else:\n            pattern=pattern.split('_')\n            occurance=pattern[0]\n            position=int(pattern[1])\n    return occurance,position\n    \ndef change_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    '''\n    occurance,position=occurance_substring(text,pattern)\n    if occurance:\n        if '_' in occurance:\n            occurance,position=occurance.split('_')\n            pattern=pattern.split('_')\n            for i in range(len(pattern)):\n                if pattern[i]==occurance:\n                    pattern_list=re.split(r'\\d+',pattern[i+1])\n                    occurance=pattern_list[0]\n                    position=position+int(pattern_list[1])\n                    break\n        else:\n            pattern=pattern.split('_')\n            occurance=pattern[0]\n            position=int(pattern[1])\n    return occurance,position\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_len = len(pattern)\n    text_len = len(text)\n    current_start = 0\n    current_end = 0\n    \n    for i in range(0,text_len):\n        if pattern[current_end]!= text[i]:\n            if current_start == 0:\n                if pattern[current_end] == text[i]:\n                    current_start = i\n                else:\n                    return None\n            else:\n                return None\n        else:\n            if current_start!= 0:\n                current_end += 1\n            if current_end == pattern_len-1:\n                return (current_start,i-current_start+1)\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = re.finditer(pattern,text)\n    if pos:\n        for i in pos:\n            return i.start(),i.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    r = re.compile(pattern)\n    match = r.search(text)\n    if match:\n        return match.start(),match.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.finditer(pattern,text)\n    for match in p:\n        print(match.start())\n        print(match.end())\n        print(match.group())\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = []\n    match = re.finditer(pattern,text)\n    for i in match:\n        pos.append([i.start(),i.end()])\n    return pos\nprint(occurance_substring(\"geeksforgeeks\",\"geeks\"))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    length_of_pattern = len(pattern)\n    text_length = len(text)\n    for i in range(text_length-length_of_pattern+1):\n        if text[i:i+length_of_pattern] == pattern:\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(pattern)\n    pattern = pattern.upper()\n    for i in range(0,len(text)-n+1):\n        if(pattern==text[i:i+n]):\n            return i\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = []\n    for i in range(0,len(nums)):\n        if i % 2!= 0:\n            odd_nums.append(nums[i])\n    print(odd_nums)\n    odd_list = []\n    for i in range(0, len(odd_nums)):\n        if nums[i] % 2!= 0:\n            odd_list.append(odd_nums[i])\n    print(odd_list)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(i%2!=0 for i in nums)\n    \nprint(odd_position([1,2,3,4]))\nprint(odd_position([5,6,7,8]))\nprint(odd_position([0,1,2,3,4]))\nprint(odd_position([]))\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = nums\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    check = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            check.append(True)\n        else:\n            check.append(False)\n    return check\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    odd_indexes = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd_indexes.append(i)\n    \n    odd_indexes = list(set(odd_indexes))\n    odd_indexes.sort()\n    \n    odd_numbers = []\n    for i in odd_indexes:\n        odd_numbers.append(nums[i])\n    \n    if odd_numbers!= odd_indexes:\n        return False\n    else:\n        return True\n    \ndef reverse_words(s):\n    '''\n    Write a python function to reverse the word order in a string.\n    '''\n    \n    words = s.split(' ')\n    words = list(reversed(words))\n    \n    s =''.join(words)\n    return s\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    \n    return s == s[::-1]\n    \ndef no_e(s):\n    '''\n    Write a python function to find no of e's in a given string.\n    '''\n    \n    return s.count('e')\n    \ndef palindrome_string(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    \n    s = s[::-1]\n    return s == s\n    \ndef max_repeated(list):\n    '''\n    Write a python function to find the maximum number of repeated element in a given list.\n    '''\n    \n    list = list.sort()\n    max_value = 0\n    for i in range(len(list)):\n        if list[i] == list[i - 1]:\n            max_value += 1\n    \n    return max_value\n    \ndef is_sorted(list):\n    '''\n    Write a python function to check whether a given list is sorted or not.\n    '''\n    \n    for i in range(len(list)):\n        if i == 0:\n            continue\n        if list[i - 1] > list[i]:\n            return False\n    return True\n    \ndef is_sorted_in_reverse(list):\n    '''\n    Write a python function to check whether a given list is sorted in reverse order or not.\n    '''\n    \n    for i in range(len(list)):\n        if i == 0:\n            continue\n        if list[i] < list[i - 1]:\n            return False\n    return True\n    \ndef sum_list(list):\n    '''\n    Write a python function to find the sum of list of integers.\n    '''\n    \n    sum = 0\n    for i in range(len(list)):\n        sum += list[i]\n    \n    return sum\n    \ndef sum_numbers(num):\n    '''\n    Write a python function to find the sum of all the numbers in a given list.\n    '''\n    \n    sum = 0\n    for i in num:\n        sum += i\n    return sum\n    \ndef average_numbers(nums):\n    '''\n    Write a python function to find the average of all the numbers in a given list.\n    '''\n    \n    average = sum_numbers(nums) / len(nums)\n    return average\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of given integer.\n    '''\n    \n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    \n    return fact\n    \ndef minimum_odd_element(list):\n    '''\n    Write a python function to find the minimum element in a list of odd integers.\n    '''\n    \n    min_value = 0\n    \n    for i in list:\n        if i % 2!= 0:\n            min_value = i\n            break\n    \n    return min_value\n    \ndef first_and_last_positive_numbers(list):\n    '''\n    Write a python function to find the first positive number and last positive number in a given list.\n    '''\n    \n    min_value = 0\n    max_value = 0\n    \n    for i in range(len(list)):\n        if list[i] > 0:\n            if min_value == 0:\n                min_value = list[i]\n            else:\n                if list[i] < min_value:\n                    min_value = list[i]\n    \n    for i in range(len(list)):\n        if list[len(list) - 1 - i] > 0:\n            if max_value == 0:\n                max_value = list[len(list) - 1 - i]\n            else:\n                if list[len(list) - 1 - i] > max_value:\n                    max_value = list[len(list) - 1 - i]\n    \n    return min_value, max_value\n    \ndef sum_of_squares_of_first_n_natural_numbers(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    \n    return sum\n    \ndef sum_of_squares_of_first_n_natural_numbers_using_for_loop(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    \n    sum = 0\n    \n    for i in range(1, n + 1):\n        sum += i * i\n    \n    return sum\n    \ndef sum_of_squares_of_first_n_natural_numbers_using_while_loop(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    \n    sum = 0\n    j = 1\n    while j <= n:\n        sum += j * j\n        j += 1\n        \n    return sum\n    \ndef sum_of_squares_of_first_n_natural_numbers_using_while_loop_2(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i * i\n        i += 1\n    return sum\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    \n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    \n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef common_letters(s1, s2):\n    '''\n    Write a python function to find the common letters in two given strings.\n    '''\n    \n    common = ''\n    for i in range(len(s1)):\n        if s1[i] in s2 and s1[i]!= s2[i]:\n            common += s1[i]\n    \n    return common\n    \ndef common_letters_using_zip(s1, s2):\n    '''\n    Write a python function to find the common letters in two given strings.\n    '''\n    \n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = s1.replace(' ', '')\n    s1 = s1.replace('.', '')\n    s1 = s1.replace(',', '')\n    s2 = s2.replace(' ', '')\n    s2 = s2.replace('.', '')\n    s2 = s2.replace(',', '')\n    \n    common = '"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    if len(nums) % 2 == 1:\n        for i in range(0,len(nums),2):\n            if nums[i] % 2 == 0:\n                odd_count += 1\n        return odd_count > 0\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums or len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            if i%2!= 0:\n                if nums[i-1]%2 == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i]%2 ==1 for i in range(len(nums)))\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([num % 2 == 1 for i, num in enumerate(nums) if i % 2!= 0])\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    length = len(test_str)\n    result = 0\n    for i in range(length):\n        if test_str[i] in vowels:\n            if (i!= 0 and test_str[i - 1] == test_str[i]) or (i!= length - 1 and test_str[i + 1] == test_str[i]):\n                result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set([\"a\",\"e\",\"i\",\"o\",\"u\"])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            if test_str[i] == test_str[i-1]:\n                count += 1\n            if test_str[i] == test_str[i+1]:\n                count += 1\n    return count\n    \ndef has_vowel(test_str):\n    '''\n    Write a function to check whether any vowels are present in the given string.\n    '''\n    for i in test_str:\n        if i in 'aeiou':\n            return True\n    return False\n    \ndef num_vowels(test_str):\n    '''\n    Write a function to count the total number of vowels in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            count += 1\n    return count\n    \ndef word_count(test_str):\n    '''\n    Write a function to count the total number of words in the given string.\n    '''\n    word_list = test_str.split()\n    return len(word_list)\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check whether given string is a palindrome or not.\n    '''\n    test_str = test_str.lower()\n    \n    word_list = test_str.split()\n    word_list.reverse()\n    \n    test_str = ''.join(word_list)\n    \n    if test_str == test_str:\n        return True\n    return False\n    \ndef rearrange_word(test_str):\n    '''\n    Write a function to rearrange the words in a given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    \n    for i in range(len(test_str)):\n        if test_str[i] not in result:\n            result.append(test_str[i])\n    return''.join(result)\n    \ndef reverse_sentence(test_str):\n    '''\n    Write a function to reverse the sentence in the given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    \n    for i in range(len(test_str)):\n        if i!= len(test_str) - 1:\n            result.append(test_str[i])\n        else:\n            result.append(test_str[i])\n            result.insert(0, '.')\n    return''.join(result)\n    \ndef last_to_first_vowel(test_str):\n    '''\n    Write a function to find the index of the last vowel in a given string.\n    '''\n    vowel = ''\n    for i in test_str:\n        if i in 'aeiou':\n            if vowel == '':\n                vowel = i\n            else:\n                vowel = vowel\n    return test_str.find(vowel)\n    \ndef vowel_count(test_str):\n    '''\n    Write a function to count the vowels in a given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            count += 1\n    return count\n    \ndef find_substring(test_str, sub_str):\n    '''\n    Write a function to find the index of the first occurence of the substring in a given string.\n    '''\n    if sub_str in test_str:\n        test_str = test_str.lower()\n        sub_str = sub_str.lower()\n        index = 0\n        for i in range(len(test_str)):\n            if test_str[i] == sub_str[0]:\n                flag = True\n                for j in range(len(sub_str)):\n                    if sub_str[j]!= test_str[i+j]:\n                        flag = False\n                        break\n                if flag:\n                    return i\n        return -1\n    return -1\n    \ndef first_substring(test_str, sub_str):\n    '''\n    Write a function to find the index of the first occurence of the substring in a given string.\n    '''\n    if sub_str in test_str:\n        test_str = test_str.lower()\n        sub_str = sub_str.lower()\n        sub_str_index = 0\n        while True:\n            index = test_str.find(sub_str, sub_str_index)\n            if index!= -1:\n                return index\n            sub_str_index += 1\n            if sub_str_index == len(sub_str):\n                break\n            \ndef is_vowel(char):\n    '''\n    Write a function to check whether given character is vowel or not.\n    '''\n    if char in 'aeiou':\n        return True\n    return False\n    \ndef is_consonant(char):\n    '''\n    Write a function to check whether given character is consonant or not.\n    '''\n    if char not in 'aeiou':\n        return True\n    return False\n    \ndef count_char(test_str, char):\n    '''\n    Write a function to count the occurence of a character in a given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i == char:\n            count += 1\n    return count\n    \ndef solve_quadratic(a, b, c):\n    '''\n    Write a function to solve quadratic equation using three variables.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    \n    if discriminant == 0:\n        return -b / (2 * a)\n    \n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return x1, x2\n    \ndef reverse_word(test_str):\n    '''\n    Write a function to reverse the word in a given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    \n    for i in range(len(test_str) - 1, -1, -1):\n        result.append(test_str[i])\n    return''.join(result)\n    \ndef vowels_only(test_str):\n    '''\n    Write a function to find the vowel count of the given string.\n    '''\n    result = 0\n    test_str = test_str.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in test_str:\n        if i in vowels:\n            result += 1\n    return result\n    \ndef invert_dict(test_dict):\n    '''\n    Write a function to invert the dictionary.\n    '''\n    inv_dict = {}\n    for key in test_dict:\n        value = test_dict[key]\n        if value not in inv_dict:\n            inv_dict[value] = key\n    return inv_dict\n    \ndef word_split(test_str):\n    '''\n    Write a function to split a string into words based on the separator.\n    '''\n    result = []\n    \n    result = test_str.split(' ')\n    return result\n    \ndef zigzag_order(array):\n    '''\n    Write a function to convert a list of integers into a zigzag list.\n    '''\n    if len(array) == 0:\n        return []\n    \n    result = []\n    result.append(array[0])\n    \n    if len(array) > 1:\n        for i in range(1, len(array)):\n            if i == len(array) - 1:\n                result.append(array[i])\n            else:\n                if array[i] > array[i-1]:\n                    result.append(array[i])\n                else:\n                    result.append(array[i-1])\n    return result\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check whether given string is a palindrome or not.\n    '"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set('aeiou')\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    str_list = list(test_str)\n    vowels = 0\n    for i in range(len(str_list) - 1):\n        if str_list[i] in \"aeiou\" and str_list[i + 1] in \"aeiou\":\n            vowels += 1\n    return vowels\n    \nif __name__ == '__main__':\n    input_str = input()\n    result = count_vowels(input_str)\n    print(result)"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for letter in test_str if letter in vowels)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summ = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            summ += arr[i]\n    return summ\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    import collections\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in collections.Counter(arr).values():\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    set_arr = set()\n    for i in arr:\n        if i in set_arr:\n            continue\n        else:\n            set_arr.add(i)\n    return sum(set_arr)\nprint(find_sum([1, 1, 1, 2, 2, 2])) # 6\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_set = set()\n    sum = 0\n    for num in arr:\n        if num in arr_set:\n            continue\n        else:\n            arr_set.add(num)\n            sum += num\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    num_set = set()\n    for num in arr:\n        if num not in num_set:\n            num_set.add(num)\n    return sum(num_set)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # sum of the numbers in the given list\n    sum_list = sum(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from collections import Counter\n    \n    #count the frequency of each element in list and add them in a dictionary\n    #then we can find the sum of non repeated elements\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for num in arr:\n        if num not in unique_elements:\n            unique_elements.append(num)\n        else:\n            unique_elements.remove(num)\n    print(sum(unique_elements))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lst = []\n    for k, g in groupby(list1):\n        lst.append(list(g))\n    return lst\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    if len(list1) == 2:\n        return [[list1[0]], [list1[1]]]\n    # finding the value of the index of first element\n    index = 1\n    while True:\n        if list1[index] == list1[index - 1]:\n            index += 1\n        else:\n            break\n    # first index of the first element of the sublist\n    if list1[index - 1] == list1[index]:\n        sublist_start = index - 1\n    else:\n        sublist_start = index\n    # elements of the sublist\n    sublist_end = index\n    sublist = []\n    while True:\n        if sublist_end == len(list1):\n            break\n        if list1[sublist_end] == list1[sublist_end - 1]:\n            sublist_end += 1\n            continue\n        sublist.append(list1[sublist_start:sublist_end])\n        sublist_start = sublist_end\n        sublist_end = sublist_start + 1\n    return sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    new_list = []\n    temp = []\n    temp.append(list1[0])\n    for i in range(1,len(list1)):\n        if list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            new_list.append(temp)\n            temp = []\n            temp.append(list1[i])\n    new_list.append(temp)\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # A helper function to insert any duplicate elements\n    def dup_insert(element, index, list1):\n        if index == len(list1) or element!= list1[index]:\n            return list1[:index] + [element] + list1[index:]\n        else:\n            return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        result = []\n        dup_seq = []\n        for x in list1:\n            if x!= dup_seq[-1]:\n                dup_seq.append(x)\n                result.append(dup_seq)\n                dup_seq = []\n            else:\n                dup_seq.append(x)\n        result.append(dup_seq)\n        return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    for key,group in groupby(list1):\n        newlist = list(group)\n        if key == newlist[0]:\n            temp = []\n            for i in newlist:\n                temp.append(i)\n                if i == newlist[-1]:\n                    break\n            temp.sort()\n            list1 = temp\n        else:\n            continue\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newList = []\n    for k, g in groupby(list1):\n        newList.append(k)\n    return newList\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        yield key, list(group)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    from itertools import groupby\n    #sorted_grouped = sorted(groupby(sorted(list1, reverse=True)))\n    sorted_grouped = sorted(groupby(sorted(list1, reverse=True)), key=lambda x: x[0])\n    print(sorted_grouped)\n    cnt = 1\n    for k, g in sorted_grouped:\n        if k == 0:\n            cnt = 1\n        elif k == 1:\n            cnt = cnt + 1\n        elif k == 2:\n            cnt = cnt + 1\n            sub_list = []\n            for i in g:\n                sub_list.append(i)\n            sub_list = sub_list[::-1]\n            print(sub_list)\n            if cnt == 4:\n                cnt = 1\n            yield sub_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append([v for v in g])\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist = []\n    result = {}\n    for i in range(len(list1)):\n        if not list1[i] in sublist:\n            sublist.append(list1[i])\n            result[tuple(sublist)] = 1\n        else:\n            result[tuple(sublist)] += 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    list_of_lists = list(list1)\n    for i in range(len(list_of_lists)):\n        tuple_list = tuple(list_of_lists[i])\n        if tuple_list not in my_dict:\n            my_dict[tuple_list] = 1\n        else:\n            my_dict[tuple_list] += 1\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #define counter variable\n    counter = 0\n    #define dictionary\n    d = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_of_occurrences = {}\n    for i in range(len(list1)):\n        if list1[i] not in num_of_occurrences.keys():\n            num_of_occurrences[list1[i]] = 1\n        else:\n            num_of_occurrences[list1[i]] += 1\n    return num_of_occurrences\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst = {}\n    for i in list1:\n        if i not in lst:\n            lst[i] = 1\n        else:\n            lst[i] = lst[i] + 1\n    return lst\nprint(unique_sublists([[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7],[4,5,6,7]]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    count = 0\n    for x in range(len(list1)):\n        if tuple(list1[x]) not in unique_list.keys():\n            unique_list[tuple(list1[x])] = 1\n        else:\n            unique_list[tuple(list1[x])] += 1\n    for x in unique_list:\n        count += unique_list[x]\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        d[i] = d.get(i,0) + 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for i in list1:\n        if i not in unique_sublists_dict.keys():\n            unique_sublists_dict[i] = 1\n        else:\n            unique_sublists_dict[i] = unique_sublists_dict[i] + 1\n    return unique_sublists_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        if i not in unique_dict.keys():\n            unique_dict[i] = 1\n        else:\n            unique_dict[i] += 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for elem in list1:\n        if elem in list_count:\n            list_count[elem] += 1\n        else:\n            list_count[elem] = 1\n    return list_count\n    \ndef return_at_least_2_unique_sublists(list1):\n    '''\n    Write a function that returns the number of unique sublists. The sublists must be in the format of a tuple.\n    '''\n    unique_sublists_dict = unique_sublists(list1)\n    return len(unique_sublists_dict)\n    \ndef count_characters_in_string(string):\n    '''\n    Write a function that accepts a string as input and returns a dictionary containing the count of each character.\n    '''\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n    \ndef count_characters_in_string_by_frequency(string):\n    '''\n    Write a function that accepts a string as input and returns a dictionary containing the count of each character and the frequency of each character.\n    '''\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    char_dict_count = {}\n    for char, count in char_count.items():\n        if char_count[char] in char_dict_count:\n            char_dict_count[char_count[char]].append(char)\n        else:\n            char_dict_count[char_count[char]] = [char]\n    return char_dict_count\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    combs = combinations(test_list, 2)\n    for i in combs:\n        if sum(i) == 30:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    # to return combinations with given sum, call it recursively\n    def combinations_recursive(l,target):\n        # if target becomes zero, add it to the results\n        if target == 0:\n            comb_list.append(l)\n        # if target is smaller than zero, return nothing\n        elif target < 0:\n            return\n        # take the last item and recurse using target as the current sum\n        else:\n            # if the list is empty, add the list to results\n            if len(l) == 0:\n                comb_list.append(l)\n            # take the last item in the list\n            item = l.pop()\n            # if the item is greater than target, return none\n            if item > target:\n                return\n            # take all items in the list and add them to the next recursive call\n            combinations_recursive(l,target-item)\n            # add the last item back to the list\n            l.append(item)\n    # iterate over the list and call the function\n    for i in test_list:\n        combinations_recursive(i,target=i)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = test_list\n    # l = [1, 2, 3]\n    # l = ['a', 'b', 'c']\n    # l = ['Nikhil', 'Sharma', 'Dhruv']\n    comb_list = []\n    # iterate the given list\n    for i in range(1, len(l)+1):\n        # get all combinations of the list\n        comb_list += list(combinations(l, i))\n    print(comb_list)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        res += combinations(test_list, i)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1,len(test_list)+1):\n        combinations_list += list(combinations(test_list,i))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ret = []\n    # TODO: Write your solution here\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                ret.append((test_list[i],test_list[j],test_list[k]))\n    return ret"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing the list of combinations\n    all_combinations = []\n    # looping over the list of tuples\n    for i in test_list:\n        # initializing the empty list of sums\n        combination = []\n        # adding the tuple\n        combination.append(i)\n        # adding the sum to the list\n        combination.append(sum(i))\n        # adding the sum to the list\n        combination.append(sum([j[0] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[1] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[2] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[3] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[4] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[5] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[6] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[7] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[8] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[9] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[10] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[11] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[12] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[13] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[14] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[15] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[16] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[17] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[18] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[19] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[20] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[21] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[22] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[23] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[24] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[25] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[26] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[27] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[28] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[29] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[30] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[31] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[32] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[33] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[34] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[35] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[36] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[37] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[38] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[39] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[40] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[41] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[42] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[43] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[44] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[45] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[46] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[47] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[48] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[49] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[50] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[51] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[52] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[53] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[54] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[55] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[56] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[57] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[58] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[59] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[60] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[61] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[62] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[63] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[64] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[65] for j in i]))\n        # adding the sum to the list\n        combination.append(sum([j[66] for j in i]))\n        # adding the su"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return (tuple(comb) for comb in combinations(test_list,3))\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Driver code\n    com = combinations(test_list, 5)\n    print('The combinations are : ')\n    for i in com:\n        print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for x in combinations(test_list, 3):\n        combinations_list.append(x)\n    return combinations_list\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # define the function\n    def count_divisors(n):\n        count = 0\n        for i in range(1,n+1):\n            if n % i == 0:\n                count = count+1\n        return count\n    # call the function\n    if count_divisors(n) % 2 == 0:\n        print(count_divisors(n))\n    else:\n        print(\"The count of divisors is odd\")\n        \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n        else:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            count = count + 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            count = count + 1\n    if (count % 2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            count=count+2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) :\n        if n % i == 0:\n            divisors +=1\n    if divisors%2 == 0 :\n        return True\n    else :\n        return False\n    \nprint(count_divisors(9))\nprint(count_divisors(27))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if (n%i == 0) :\n            count += 2\n            if (n/i == i) :\n                count -= 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(1,n+1):\n        count = count + math.ceil(n/i)\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n//2+1):\n        if n%i == 0:\n            count+=1\n    if count%2 ==0:\n        return True\n    else:\n        return False\nprint(count_divisors(6))\ndef count_divisors_2(n):\n    if n == 1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n//2+1) : \n        if n % i == 0 : \n            count += 1\n    return count == 2\ndef is_prime(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # check for prime\n    if n == 1 :\n        return False\n    # if n is even\n    elif n % 2 == 0 :\n        return False\n    # loop to n/2\n    for i in range(3, int(math.sqrt(n))+1, 2) : \n        if n % i == 0 :\n            return False\n    return True \ndef prime_factorization(n) :\n    '''\n    Write a python function to return prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # initializing list \n    prime_factor = [] \n    # for loop to find prime factors \n    while n % 2 == 0: \n        prime_factor.append(2) \n        n = n // 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            prime_factor.append(i) \n            n = n // i \n    if n > 2: \n        prime_factor.append(n)\n    return prime_factor\ndef is_prime_slow(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # if n is greater than 1\n    if n > 1 : \n        # loop to check for factors \n        for i in range(2, int(math.sqrt(n))+1) : \n            if n % i == 0 : \n                return False\n        return True\n    return False\ndef is_prime_with_divisor(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_2(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    while (n & -n)!= n : \n        n += 2\n        if n % 2 == 0 or n % 3 == 0 :\n            return False\n    return True\ndef is_prime_with_divisor_3(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_4(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    while (n & -n)!= n : \n        n += 2\n        if n % 2 == 0 or n % 3 == 0 :\n            return False\n    return True\ndef is_prime_with_divisor_5(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_6(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_7(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_8(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef is_prime_with_divisor_9(n) :\n    '''\n    Write a python function to check whether the number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 or n % (i + 2"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_subarrays = []\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 1:\n            odd_length_subarrays.append(arr[i])\n        else:\n            odd_length_sum = sum(odd_length_subarrays)\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 1:\n            sum += arr[i]\n    return sum\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_subarray_sum = 0\n    length = len(arr)\n    for i in range(length):\n        for j in range(i, length):\n            if j - i + 1 > 1 and j - i + 1 % 2 == 1:\n                odd_length_subarray_sum += sum(arr[i:j + 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return None\n    \n    odd = 0\n    for i in range(0, len(arr)-1):\n        if i % 2!= 0:\n            odd += arr[i]\n    \n    return odd\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        if len(arr[i])%2==1:\n            sum += arr[i]\n    return sum\n    \ndef cumulative_sum(arr):\n    '''\n    Write a python function to compute the cumulative sum of the elements of a given array in O(n).\n    '''\n    #cumulative sum of a given array\n    #initialize an empty list\n    cum_sum = []\n    #adding the first element of the given array\n    cum_sum.append(arr[0])\n    #iterating through the remaining list elements\n    for i in range(1, len(arr)):\n        #adding the current element to the cumulative sum\n        cum_sum.append(cum_sum[-1]+arr[i])\n    return cum_sum\n    \ndef get_first_odd_element(arr):\n    '''\n    Write a python function to find the first odd element in a given array.\n    '''\n    #initializing the index\n    index = 0\n    #iterating through the array\n    for i in range(len(arr)):\n        #checking if the current element is odd\n        if arr[i]%2!=0:\n            #if it is then return the index of the element\n            return index\n        #increasing the index\n        index += 1\n    return -1\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    odd_length_sum = 0\n    \n    for i in range(len(arr)):\n        odd_length_sum += arr[i]\n        if i+1 < len(arr):\n            if i % 2 == 1:\n                res += odd_length_sum\n    print(res)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n            sum += odd_sum\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2!= 0:\n                sum += sum_odd(arr, i, j)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    size = len(arr)\n    odd_sum = 0\n    for i in range(size):\n        for j in range(i + 1, size):\n            odd_sum += arr[i:j]\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # for all the subarrays\n    for i in range(len(arr)-1):\n        # if the length of the subarray is odd\n        if (len(arr) - i) % 2!= 0:\n            # sum of the subarray\n            odd_length_sum = arr[i] + arr[i+1]\n            # print(odd_length_sum)\n            return odd_length_sum\n    # if the length of the subarray is even\n    odd_length_sum = sum(arr)\n    # print(odd_length_sum)\n    return odd_length_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_v = max(max(r, g), b)\n    min_v = min(min(r, g), b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    delta = max_r - min_r\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r), float(g), float(b)\n    min_num = min(r, g, b)\n    max_num = max(r, g, b)\n    delta = max_num - min_num\n    \n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_num\n    elif r == max_num:\n        h = (g - b) / delta\n        s = (max_num - min_num) / delta\n        v = max_num\n    elif g == max_num:\n        h = 2 + ((b - r) / delta)\n        s = (max_num - min_num) / delta\n        v = max_num\n    elif b == max_num:\n        h = 4 + ((r - g) / delta)\n        s = (max_num - min_num) / delta\n        v = max_num\n    \n    if r == max_num:\n        h = (g - b) / delta + (6 * (g - r)) / delta\n    elif g == max_num:\n        h = (b - r) / delta + 2\n    elif b == max_num:\n        h = (2 * r - g) / delta + 4\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    d = mx - mn\n    if d == 0:\n        h = 0\n    else:\n        h = (mn - r) / d\n        h = h + 6 if h < 0 else h\n    s = d / mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff = max_color - min_color\n    if max_color == min_color:\n        return 0, 0, max_color\n    if max_color == r:\n        h = (g - b) / diff\n    elif max_color == g:\n        h = (b - r) / diff + 2\n    elif max_color == b:\n        h = (r - g) / diff + 4\n    return h, 1.0 - (3.0 * (min_color / max_color)), max_color\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    minimum = min(r,g,b)\n    maximum = max(r,g,b)\n    delta = maximum-minimum\n    \n    if delta == 0:\n        h = 0\n    elif maximum == r:\n        h = (60*(g-b)/delta)%360\n    elif maximum == g:\n        h = (60*((2+((b-r)/delta))%2)*(r-g)/delta)%360\n    else:\n        h = (60*((2+((b-r)/delta))%2)*(g-b)/delta)%360\n    \n    if maximum == 0:\n        s = 0\n    else:\n        s = delta/maximum\n        \n    if maximum == 0:\n        v = 0\n    else:\n        v = maximum/maximum\n        \n    return (h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_max = max(r, g, b)\n    r_min = min(r, g, b)\n    delta = float(r_max - r_min)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #initialize saturation, value\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # initializing min, max variables\n    min_v = 0\n    max_v = 255\n    # converting to hsv\n    h = 0\n    s = 0\n    v = 0\n    \n    # calculating max, min and hsv values\n    h = (max_v-min_v)*(r/255)\n    s = (max_v-min_v)*(g/255)\n    v = (max_v-min_v)*(b/255)\n    \n    # if maximum value of hsv is not saturated, then add hue\n    if(v == max_v):\n        h = h + 360\n    \n    #converting to hsv\n    return h,s,v\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p=0\n    q=0\n    for i in range(len(list1)):\n        if(list1[i]%2==0):\n            p=p*list1[i]\n        else:\n            q=q*list1[i]\n    return p,q\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    res = 1\n    for index in range(len(list1)):\n        if index % 2 == 0:\n            even_index += 1\n            res *= list1[index]\n        else:\n            odd_index += 1\n            res *= list1[index]\n    return res, even_index, odd_index\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # getting product of even numbers\n    even_product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_product = even_product * list1[i]\n    # getting product of odd numbers\n    odd_product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_product = odd_product * list1[i]\n    print(even_product, \"x\", odd_product)\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even[0]*odd[0], even[1]*odd[1]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if i%2==0:\n            even_prod = even_prod*i\n        else:\n            odd_prod = odd_prod*i\n    return (even_prod, odd_prod)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #Code here\n    result = []\n    i = 0\n    while i < len(list1):\n        if i % 2 == 0:\n            result.append(list1[i]*2)\n        else:\n            result.append(list1[i])\n        i = i + 1\n    print(result)\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    prod = 1\n    for i in even:\n        prod = prod * i\n    print(prod)\n    prod = 1\n    for i in odd:\n        prod = prod * i\n    print(prod)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if(len(list1) > 0):\n        for i in range(len(list1)):\n            if(list1[i]%2 == 0):\n                even = even + list1[i]\n            else:\n                odd = odd + list1[i]\n        print('Product of even numbers: ', even)\n        print('Product of odd numbers: ', odd)\n    else:\n        print('List is empty')\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Your code here\n    return tuple(int(i) for i in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # If you don't understand what is going on here, please don't look.\n    #'\\t\\n\\r' is used to split string, the function is using the space as the separator.\n    # the trailing ',' is necessary because tuple is a sequence but I don't understand the format of tuple in python.\n    # ',' in the end is used for the comma in tuple, because there is always a ',' in a tuple.\n    # ',' used for the comma in tuple, because there is always a ',' in a tuple.\n    return tuple(test_str.split(','))\n    #return test_str.split(',')\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str))\n    except:\n        raise TypeError\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = eval('tuple('+test_str+')')\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if ',' in test_str:\n        return tuple(map(int, test_str.split(',')))\n    elif'' in test_str:\n        return tuple(map(int, test_str.split(' ')))\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # test_str = 'a, 1, (1,), (1, 2,), (1, 2, 3,), (1, 2, 3, 4,)'\n    result = []\n    # print(test_str)\n    for i in test_str.split(','):\n        result.append(int(i))\n    # print(result)\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    x = eval(test_str)\n    print(x)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    for str in test_str:\n        tuple_list.append(int(str))\n    return tuple_list\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = (lo + hi)//2\n        if a[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # check if x is greater than or equal to a[0]\n    # if not, then just return a[0]\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    if l == len(a):\n        return l\n    if a[l] == x:\n        return l\n    else:\n        return l + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    # print(i)\n    if i == n or a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = n-1\n    while i >= 0:\n        if x <= a[i]:\n            break\n        i -= 1\n    if i == -1:\n        a.append(x)\n        return\n    a.insert(i+1, x)\n    return\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a,x)\n    right = bisect.bisect_right(a,x)\n    return left if left < right else left+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #print(\"--------right insertion--------\")\n    #print(\"a: \" + str(a))\n    #print(\"x: \" + str(x))\n    #print(\"len(a): \" + str(len(a)))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos==0:\n        return 0\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    # print(i)\n    if i == len(a):\n        a.append(x)\n    else:\n        a.insert(i, x)\n        # print(a)\n    return a\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b+b+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    return re.search('a+b',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    m = pattern.search(text)\n    if m:\n        return m.group()\n    else:\n        return 'No match'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.findall(r'ab+', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab*b\"\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = r'(ab)*b'\n    if re.match(pat, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #define regex\n    p = re.compile(r'ab*b')\n    #find matches\n    matches = p.findall(text)\n    print(matches)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search(r'ab*b', text)\n    return matches\n    \nprint(text_match_three(\"ababababbabbbb\"))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'ab*b',text)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + list(test_str))\n    \nprint(new_tuple([1,2,3], \"abc\"))\nprint(new_tuple((2,4,6), \"def\"))\nprint(new_tuple([1,2,3], \"abc\"))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + list(test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = test_str.split(\",\")\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) == 0:\n        return test_str\n    return test_str + str(test_list[0])\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #test_str = 'kajak'\n    #test_list = [1,2,3,4,5]\n    #print(type(tuple(test_list)))\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #pass\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_str)\n    test_list.append(test_tuple)\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = (test_str, test_list)\n    return tup\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odd = []\n    even = []\n    for i in nums:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == len(odd):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i]%2==0 for i in range(len(nums)))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) < 2:\n        return False\n    elif len(nums) == 2:\n        if nums[0] % 2!= 0 and nums[1] % 2!= 0:\n            return True\n        else:\n            return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = nums[::]\n    l = len(nums)\n    for i in range(l):\n        if(i%2!=0):\n            nums.remove(nums[i])\n        else:\n            continue\n    if len(nums)==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                continue\n            else:\n                return False\n    return True\n    "
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums_even = []\n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            nums_even.append(value)\n    return nums_even\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    while True:\n        try:\n            test_tup = test_tup[1:]\n        except IndexError:\n            break\n        else:\n            result_list.append(test_tup)\n    return result_list\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    if not isinstance(test_tup[0], tuple):\n        return test_tup\n    else:\n        return remove_nested(test_tup[0])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return ()\n    else:\n        return remove_nested((test_tup[1:])) + (test_tup[0], )\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if len(test_tup) == 2:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l=[]\n    for i in test_tup:\n        if type(i) is tuple:\n            for j in i:\n                l.append(j)\n        else:\n            l.append(i)\n    return tuple(l)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # if(isinstance(test_tup, tuple)):\n    #     return test_tup\n    # else:\n    #     return test_tup\n    return tuple([n for n in test_tup if n is not None])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup.remove(test_tup[i])\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if isinstance(tup,tuple):\n            remove_nested(tup)\n        else:\n            yield tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_tup.append(i)\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check the length of tuple\n    if len(test_tup) == 0:\n        return None\n    if len(test_tup) == 1:\n        return test_tup[0]\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    l = len(input_list)\n    return l\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = 0\n    for i in input_list:\n        length += 1\n    return length\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    print(\"number of lists : \",count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) is list:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists = int(input_list)\n    count = 0\n    while num_of_lists > 0:\n        if isinstance(input_list[count],list):\n            num_of_lists -= 1\n        else:\n            break\n        count += 1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    mid = low + (high - low) // 2\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # for i in range(0,len(arr)-1):\n    #     if arr[i] == x:\n    #         return i\n    # return -1\n    return len(arr) - 1 - bisect_left(arr, x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    if arr[-1]>x:\n        return -1\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=low+(high-low)//2\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            else:\n                high=mid-1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return 0\n        \n    if len(arr) == 2:\n        if arr[0] == x:\n            return 0\n        elif arr[1] == x:\n            return 1\n    \n    if arr[0] < x:\n        return last(arr[1:],x)\n    \n    if arr[len(arr)-1] < x:\n        return last(arr[:-1],x)\n    \n    if arr[len(arr)-1] == x:\n        return len(arr) - 1\n    \n    return last(arr[:-1],x)\n    \n    "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) -1\n    while(i>=0):\n        if arr[i] == x:\n            return i\n        i-=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    while(i<len(arr)):\n        if(x==arr[i]):\n            return i\n        i=i+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr or len(arr)==0:\n        return -1\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = left + (right-left)//2\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=arr[mid]:\n                return mid\n            else:\n                right = mid - 1\n        elif x<arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n    \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 4\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 4\n    print(last(arr,x))\n    \n    arr = []\n    x = 4\n    print(last(arr,x))\n    \n    arr = [1]\n    x = 4\n    print(last(arr,x))\n    \n    arr = [1]\n    x = 1\n    print(last(arr,x))\n    \n    arr = [1,2,3]\n    x = 3\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 4\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 2\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 9\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 5\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 6\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 10\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -5\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 10\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -10\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 0\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -100\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 100\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 10\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 5\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 4\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 3\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 2\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 0\n    print(last(arr,x))\n    \n    arr = []\n    x = 1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = 0\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -1\n    print(last(arr,x))\n    \n    arr = [1,2,3,4,5,6,7,8,9]\n    x = -10\n    print(last(arr,x))\n    \n    arr = []\n    x = -1\n    print(last(arr,x))\n    \n    arr = []\n    x = -2\n    print(last(arr,x))\n    \n    arr = []\n    x = -3\n    print(last(arr,x))\n    \n    arr = []\n    x = -4\n    print(last(arr,x))\n    \n    arr = []\n    x = -5\n    print(last(arr,x))\n    \n    arr = []\n    x = -6\n    print(last(arr,x))\n    \n    arr = []\n    x = -7\n    print(last(arr,x))\n    \n    arr = []\n    x = -8\n    print(last(arr,x))\n    \n    arr = []\n    x = -9\n    print(last(arr,x))\n    \n    arr = []\n    x = -1\n    print(last(arr,x))\n    \n    arr = []\n    x = -1\n    print(last(arr,x))\n    \n    arr = []\n    x = -2\n    print(last(arr,x))\n    \n    arr = []\n    x = -3\n    print(last(arr,x))\n    \n    arr = []\n    x = -4\n    print(last(arr,x))\n    \n    arr = []\n    x = -5\n    print(last(arr,x))\n    \n    arr = []\n    x = -6\n    print(last(arr,x))\n    \n    arr = []\n    x = -7\n    print(last(arr,x))\n    \n    arr = []\n    x = -8\n    print(last(arr,x))\n    \n    arr = []\n    x = -9\n    print(last(arr,x))\n    \n    arr = []\n    x = -1\n    print(last(arr,x))\n    \n    arr = []\n    x = -1\n    print(last(arr,x))\n    \n    arr = []\n    x = -2\n    print(last(arr,x))\n    \n    arr = []\n    x = -3\n    print(last(arr,x))\n    \n    arr = []\n    x = -4\n    print(last(arr,x))\n    \n    arr = []\n    x = -5\n    print(last(arr,x))\n    \n    arr = []\n    x = -6\n    print(last(arr,x))\n    \n    arr = []\n    x = -7\n    print(last(arr,x))\n    "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        mid=int((l+r)/2)\n        if arr[mid]==x:\n            if mid==len(arr)-1:\n                return mid\n            elif arr[mid+1]==x:\n                return mid+1\n            else:\n                return mid\n        elif x<arr[mid]:\n            r=mid-1\n        else:\n            l=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    mid = (lo + hi) // 2\n    while lo < hi:\n        if arr[mid] == x:\n            return mid\n        if arr[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n        mid = (lo + hi) // 2\n    return mid\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    n = len(arr)\n    while i<n:\n        if arr[i] == x:\n            return i\n        else:\n            i += 1\n    return i\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'^a[^b]*b')\n    match = pat.search(text)\n    return match\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a+b')\n    mo = pattern.search(text)\n    if mo:\n        print(mo.group())\n    else:\n        print('No match')\n    return\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Please see https://regex101.com/r/0nGm2o/1 for regex compilation details\n    pattern = r\"a.*b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.+b')\n    string = re.findall(pattern, text)\n    print(string)\n    return string\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(\"a[ ]*b\")\n    m = pat.search(text)\n    return m\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.findall(pattern,text)\n    return match\n    \nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcabc\"))\nprint(text_starta_endb(\"abcab"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'^a.*?b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.match('a.*?b$', text)\n    if m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #\n    # Write your function here.\n    #\n    pattern = r'a.+b'\n    return bool(re.match(pattern,text))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict:\n        sum += dict[k]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for item in dict.items():\n        sum+=item[1]\n    print('sum is:',sum)\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for key, value in dict.items():\n        result += value\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\nprint(return_sum({1:1,2:2,3:3,4:4,5:5,6:6}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    dict_sum = 0\n    for value in dict.values():\n        dict_sum += value\n    return dict_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 0:\n        return n + sum_odd(n - 1)\n    else:\n        return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    sum = 0\n    for i in range(l,r+1):\n        if i % 2!= 0:\n            sum += i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    elif n>0:\n        return n+sum_odd(n-1)\n        \nprint(sum_odd(5))\nprint(sum_odd(1))\nprint(sum_odd(10))\nprint(sum_odd(100))\nprint(sum_odd(50))\nprint(sum_odd(10+10))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n**2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 100000:\n        return sum_odd(n//2)\n    else:\n        if n % 2!= 0:\n            return n + sum_odd(n+1)\n        else:\n            return sum_odd(n+1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(l, r + 1) if i & 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return None\n    return sum(range(1, n+1, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==1:\n            sum=sum+i\n    return sum\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    newstr=''\n    for i in range(len(str)):\n        newstr=newstr+str[len(str)-1-i]\n    return newstr\n    \ndef multi(a,b):\n    '''\n    Write a python function to find the product of 2 numbers\n    '''\n    product=a*b\n    return product\n    \ndef compute(x,y):\n    '''\n    Write a python function to find the sum of the first n natural numbers, where n is given by the user.\n    '''\n    sum=0\n    for i in range(x):\n        sum=sum+i\n    return sum\n    \ndef countdown(n):\n    '''\n    Write a python function to find the sum of the first n natural numbers, where n is given by the user.\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n\n        n=n-1\n    return sum\n    \ndef reverse_list(l):\n    '''\n    Write a python function to find the last element in a list\n    '''\n    len=len(l)-1\n    return l[len]\n    \ndef sum_list(l):\n    '''\n    Write a python function to find the sum of all the elements in the list\n    '''\n    sum=0\n    for i in l:\n        sum=sum+i\n    return sum\n    \ndef remove_from_list(l):\n    '''\n    Write a python function to remove the first occurrence of an element from a list and return the new list\n    '''\n    return l.pop(0)\n    \ndef append_and_reverse(l):\n    '''\n    Write a python function to append a given element to a list and reverse the list\n    '''\n    l.append(input(\"Enter a number to add to the list:\"))\n    new_l=l.reverse()\n    return new_l\n    \ndef index(l,i):\n    '''\n    Write a python function to find the index of an element in a list\n    '''\n    return l.index(i)\n    \ndef sort_list(l):\n    '''\n    Write a python function to sort the list\n    '''\n    l.sort()\n    return l\n    \ndef swap(l,x,y):\n    '''\n    Write a python function to swap the values of two elements in a list\n    '''\n    l[x],l[y]=l[y],l[x]\n    return l\n    \ndef maximum(l):\n    '''\n    Write a python function to find the maximum element in a list\n    '''\n    return max(l)\n    \ndef minimum(l):\n    '''\n    Write a python function to find the minimum element in a list\n    '''\n    return min(l)\n    \ndef count_greater(l,n):\n    '''\n    Write a python function to count the number of elements in a list which are greater than a given number\n    '''\n    count=0\n    for i in l:\n        if i>n:\n            count=count+1\n    return count\n    \ndef sum_all(n):\n    '''\n    Write a python function to sum all the elements of a list which are integers\n    '''\n    sum=0\n    for i in range(len(n)):\n        sum=sum+n[i]\n    return sum\n    \ndef find_position(l,x):\n    '''\n    Write a python function to find the position of an element in a list\n    '''\n    return l.index(x)\n    \ndef is_unique(s):\n    '''\n    Write a python function to check whether a given string contains all unique characters or not\n    '''\n    s=list(s)\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            return False\n    return True\n    \ndef rotate(s):\n    '''\n    Write a python function to rotate a given string by n number of positions\n    '''\n    return s[n:]+s[:n]\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not\n    '''\n    s=list(s)\n    s.reverse()\n    if s==s[::-1]:\n        return True\n    return False\n    \ndef find_duplicates(l):\n    '''\n    Write a python function to find the duplicate values in a list\n    '''\n    l=list(l)\n    duplicate=[]\n    for i in l:\n        if l.count(i)>1:\n            if i not in duplicate:\n                duplicate.append(i)\n    return duplicate\n    \ndef k_greater(l,k):\n    '''\n    Write a python function to find the k largest elements in a list\n    '''\n    return l[k:]\n    \ndef is_valid_password(s):\n    '''\n    Write a python function to check whether a given string is a valid password or not\n    '''\n    s=list(s)\n    for i in s:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True\n    \ndef reverse_words(s):\n    '''\n    Write a python function to reverse the words of a given string\n    '''\n    s=list(s)\n    s.reverse()\n    s1=''\n    for i in s:\n        if i not in \".,!?\":\n            s1=s1+i\n    return s1\n    \ndef rotate_left(l,n):\n    '''\n    Write a python function to rotate a given list by left by n number of position\n    '''\n    return l[n:]+l[:n]\n    \ndef max_of_three(x,y,z):\n    '''\n    Write a python function to find the maximum of three given numbers\n    '''\n    if x>y and x>z:\n        return x\n    elif y>x and y>z:\n        return y\n    elif z>x and z>y:\n        return z\n    return z\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of Fibonacci series\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef fibonacci_sum(n):\n    '''\n    Write a python function to find the sum of nth term of Fibonacci series\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci_sum(n-1)+fibonacci_sum(n-2)\n    \ndef product(l):\n    '''\n    Write a python function to find the product of all the elements of a list\n    '''\n    l=list(l)\n    prod=1\n    for i in range(len(l)):\n        prod=prod*l[i]\n    return prod\n    \ndef minimum_num_in_list(l):\n    '''\n    Write a python function to find the minimum number in a list\n    '''\n    l=list(l)\n    min=l[0]\n    for i in range(len(l)):\n        if l[i]<min:\n            min=l[i]\n    return min\n    \ndef number_of_evens(l):\n    '''\n    Write a python function to find the number of even numbers in a list\n    '''\n    l=list(l)\n    count=0\n    for i in range(len(l)):\n        if l[i]%2==0:\n            count=count+1\n    return count\n    \ndef product_of_all_n_digits(n):\n    '''\n    Write a python function to find the product of all the digits in a given number n\n    '''\n    n=st"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<1 or n>1000:\n        return 0\n    if n==1:\n        return n\n    return (n*(n+1))//2\n    \ndef sum_odd_2(l,r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l>r or l<0 or r>1000:\n        return 0\n    if l==1:\n        return l\n    if l==r:\n        return r\n    return (l*(l+1))//2+(r*(r+1))//2-((l+r)*(l+r+1))//2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n    \n    \n    \n    \n    \n    \ndef test_array_sum():\n    \n    assert _sum([]) == 0\n    assert _sum([1, 2, 3, 4]) == 10\n    \ndef _product(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    return reduce(lambda x, y: x*y, arr)\n    \n    \n    \n    \n    \n    \ndef test_array_product():\n    \n    assert _product([]) == 1\n    assert _product([1, 2, 3, 4]) == 24\n    \ndef _min_max(arr):  \n    '''\n    Write a python function to find the min and max of an array.\n    '''\n    return min(arr), max(arr)\n    \n    \n    \n    \n    \n    \ndef test_min_max():\n    assert _min_max([]) == (None, None)\n    assert _min_max([1, 2, 3, 4]) == (1, 4)\n    \ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return sum(arr) / len(arr)\n    \n    \n    \n    \n    \n    \ndef test_mean():\n    assert _mean([]) == 0\n    assert _mean([1, 2, 3, 4]) == 2\n    \ndef _median(arr):  \n    '''\n    Write a python function to find the median of an array.\n    '''\n    n = len(arr)\n    if n % 2!= 0:\n        return sorted(arr)[n//2]\n    else:\n        i = 0\n        j = n//2\n        k = (n//2) + 1\n        l = (n//2) - 1\n        \n        while k <= n-1:\n            if i <= j:\n                if arr[i] <= arr[j]:\n                    l = j\n                    j = k\n                    k = (k+1) + l - 1\n                else:\n                    i = k\n                    k = (k+1) + l - 1\n            elif i > j:\n                if arr[i] <= arr[j]:\n                    l = i\n                    i = k\n                    k = (k+1) + l - 1\n                else:\n                    j = k\n                    k = (k+1) + l - 1\n        return sorted(arr)[l]\n    \n    \n    \n    \n    \n    \ndef test_median():\n    assert _median([]) == None\n    assert _median([1, 2, 3, 4]) == 2\n    \ndef _mode(arr):  \n    '''\n    Write a python function to find the mode of an array.\n    '''\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n        \n    max_n = max(d.values())\n    return sorted([(k, v) for k, v in d.items() if v == max_n])[0][0]\n    \ndef test_mode():\n    assert _mode([1, 3, 2, 2, 2, 2, 2]) == 2\n    assert _mode([1, 1, 2, 2, 3]) == 1\n    assert _mode([1, 3, 2, 3]) == 3\n    \ndef _range(arr):  \n    '''\n    Write a python function to find the range of an array.\n    '''\n    return max(arr) - min(arr)\n    \n    \n    \n    \n    \n    \ndef test_range():\n    assert _range([]) == 0\n    assert _range([1, 2, 3, 4]) == 3\n    \ndef _is_sorted(arr):  \n    '''\n    Write a python function to check whether an array is sorted or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \ndef test_is_sorted():\n    assert _is_sorted([]) == True\n    assert _is_sorted([1, 2, 3, 4]) == True\n    assert _is_sorted([1, 2, 3, 4, 4]) == False\n    \ndef _reverse(arr):  \n    '''\n    Write a python function to reverse an array.\n    '''\n    arr = arr[::-1]\n    return arr\n    \n    \n    \n    \n    \n    \ndef test_reverse():\n    assert _reverse([]) == []\n    assert _reverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n    \ndef _find_pivot_left(arr):  \n    '''\n    Write a python function to find the pivot element in a left-most position.\n    '''\n    return arr[0]\n    \n    \n    \n    \n    \n    \ndef test_find_pivot_left():\n    assert _find_pivot_left([]) == None\n    assert _find_pivot_left([1, 2, 3, 4]) == 1\n    \ndef _find_pivot_right(arr):  \n    '''\n    Write a python function to find the pivot element in a right-most position.\n    '''\n    return arr[-1]\n    \n    \n    \n    \n    \n    \ndef test_find_pivot_right():\n    assert _find_pivot_right([]) == None\n    assert _find_pivot_right([1, 2, 3, 4]) == 4\n    \ndef _search_rotated_array(arr, x):  \n    '''\n    Write a python function to search an element x in rotated sorted array arr.\n    '''\n    n = len(arr)\n    if n == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l+r) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[l] <= arr[mid]:\n                if arr[l] <= x <= arr[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            elif arr[mid] <= arr[r]:\n                if arr[mid] <= x <= arr[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1\n        \n    \n    \n    \n    \n    \ndef test_search_rotated_array():\n    assert _search_rotated_array([], 10) == -1\n    assert _search_rotated_array([1], 1) == 0\n    assert _search_rotated_array([1, 2], 1) == 0\n    assert _search_rotated_array([1, 2, 3], 1) == 0\n    assert _search_rotated_array([1, 2, 3, 4], 1) == 0\n    assert _search_rotated_array([1, 2, 3, 4], 2) == 1\n    assert _search_rotated_array([1, 2, 3, 4], 3) == 2\n    assert _search_rotated_array([1, 2, 3, 4], 4) == 3\n    assert _search_rotated_array([1, 2, 3, 4], 5) == 4\n    assert _search_rotated_array([1, 2, 3, 4, 5], 1) == 0\n    assert _search_rotated_array([1, 2, 3, 4, 5], 5) == 4\n    assert _search_rotated_array([1, 2, 3, 4, 5], 4) == 3\n    assert _search_rotated_array([1, 2, 3, 4, 5], 6) == 5\n    assert _search_rotated_array([1, 2, 3, 4, 5], 7) == 5\n    assert _search_rotated_array([1, 2, 3, 4, 5], 0) == -1\n    assert _search_rotated_array([1, 2, 3, 4, 5], 10) == -1\n    \ndef test_search_rotated_array_2():\n    assert _search_rotated_array_2([], 10) == -1\n    assert _search_rotated_array_2([1], 1) == 0\n    assert _search_rotated"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    a=sum(arr)\n    print(a)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return _sum(arr[1:]) + arr[0]\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    a = sum(arr)\n    return a\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n & mask)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32 - d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-(d+1))))&(2**32-1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert(d<=32)\n    assert(d>=0)\n    assert(n>=0)\n    assert(n<=1<<32)\n    \n    \n    \n    binary_repr=binary_repr_of_num(n)\n    temp=binary_repr[32-d:32]\n    binary_repr=binary_repr[0:32-d]+temp\n    \n    return int(binary_repr,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function to compute GCD of two numbers a and b.\n    '''\n    while b!= 0:\n        a,b = b, a%b\n    return a\n    \n    \ndef lcm(a,b):\n    '''\n    Write a function to compute LCM of two numbers a and b.\n    '''\n    return (a * b) / gcd(a,b)\n    \n    \ndef fizzBuzz(n):\n    '''\n    Write a function that takes n and returns a list of all the integers between 1 and n which are divisible by 3.\n    '''\n    output = []\n    for i in range(1,n+1):\n        if i%3 == 0:\n            output.append(\"Fizz\")\n        elif i%5 == 0:\n            output.append(\"Buzz\")\n        else:\n            output.append(i)\n    return output\n    \n    \ndef factorial(n):\n    '''\n    Write a function that takes n and returns its factorial\n    '''\n    fac = 1\n    for i in range(1,n+1):\n        fac = fac * i\n    return fac\n    \n    \ndef rearrange(string):\n    '''\n    Write a function that takes a string and returns a new string where the string is rearranged such that no two consecutive characters are the same.\n    '''\n    arr = []\n    for i in string:\n        if i in arr:\n            arr.pop(arr.index(i))\n            arr.append(i)\n        else:\n            arr.append(i)\n    return \"\".join(arr)\n    \n    \ndef isPalindrome(s):\n    '''\n    Write a function that takes a string and returns true if the string is a palindrome, false otherwise.\n    '''\n    s = s.lower()\n    arr = []\n    for i in s:\n        if i.isalpha():\n            arr.append(i)\n    s = \"\".join(arr)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef generateMatrix(n):\n    '''\n    Write a function that generates a square matrix of size n and returns it.\n    '''\n    arr = []\n    for i in range(0,n):\n        arr.append(0)\n    output = []\n    output.append(arr[:])\n    for i in range(1,n):\n        tmp = arr[:]\n        for j in range(0,n):\n            tmp[j] = arr[j] + tmp[j]\n        output.append(tmp[:])\n    return output\n    \n    \ndef lengthOfLongestSubstring(s):\n    '''\n    Write a function that takes a string and returns the length of the longest substring without repeating characters.\n    '''\n    max_len = 0\n    if len(s) == 0:\n        return max_len\n    for i in range(0,len(s)):\n        tmp = set()\n        for j in range(i,len(s)):\n            if s[j] in tmp:\n                break\n            tmp.add(s[j])\n            max_len = max(max_len,len(tmp))\n    return max_len\n    \n    \ndef isPerfectSquare(n):\n    '''\n    Write a function to test whether a number is perfect or perfect square.\n    '''\n    if n == 1:\n        return True\n    for i in range(2,n):\n        if n == 1:\n            return True\n        elif i == n//i:\n            return True\n    return False\n    \n    \ndef reverseStr(s, k):\n    '''\n    Write a function to reverse a string, leaving the original string untouched.\n    '''\n    i = 0\n    j = len(s) - 1\n    output = \"\"\n    while i <= j:\n        output += s[j]\n        j-=1\n        i+=1\n    return output[::-1]\n    \n    \ndef sumSquares(a, b):\n    '''\n    Write a function to compute the sum of the squares of the first n natural numbers\n    '''\n    sum_sq = 0\n    for i in range(a,b+1):\n        sum_sq += i**2\n    return sum_sq\n    \n    \ndef hasSingleCycle(arr):\n    '''\n    Write a function to check if a linked list has a single cycle.\n    '''\n    if len(arr) == 1:\n        return True\n    slow = arr[0]\n    fast = arr[0]\n    while slow!= fast:\n        slow = arr[slow]\n        fast = arr[fast]\n        fast = arr[fast]\n    return slow\n    \n    \ndef maxDepth(root):\n    '''\n    Write a function that takes in a binary tree and returns its max depth.\n    '''\n    if root == None:\n        return 0\n    return 1 + max(maxDepth(root.left),maxDepth(root.right))\n    \n    \ndef isPalindrome(s):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome, false otherwise.\n    '''\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    else:\n        return isPalindrome(s[1:-1])\n    \n    \ndef swapPairs(head):\n    '''\n    Write a function that takes in a singly linked list and returns a new linked list with the list nodes swapped.\n    '''\n    if head == None:\n        return None\n    if head.next == None:\n        return head\n    tmp = head\n    head = head.next\n    tmp.next = None\n    while head.next:\n        cur = head.next\n        tmp.next = head.next\n        head.next = cur\n        tmp = head\n        head = head.next\n    return head\n    \n    \ndef oddEvenList(head):\n    '''\n    Write a function that takes in a singly linked list and returns the same linked list, except the even position\n    nodes should be swapped with the next node, and the odd position nodes should be skipped.\n    '''\n    if head == None:\n        return None\n    if head.next == None:\n        return head\n    odd = head\n    even = head.next\n    even_head = even\n    while even and even.next:\n        odd.next = even.next\n        odd = odd.next\n        even.next = odd.next\n        even = even.next\n    odd.next = even_head\n    return head\n    \n    \ndef hasCommonChild(n1, n2):\n    '''\n    Write a function that takes in two strings and returns true if either of the strings contains the substring of the other string.\n    '''\n    i = 0\n    j = 0\n    while i < len(n1) and j < len(n2):\n        if n1[i] == n2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n            j=0\n    if j == len(n2):\n        return True\n    else:\n        return False\n    \n    \ndef isBalanced(root):\n    '''\n    Write a function that takes in a binary tree and returns true if the tree is balanced or false otherwise.\n    '''\n    if root == None:\n        return True\n    return maxDepth(root.left) == maxDepth(root.right)\n    \n    \ndef isAnagram(s1, s2):\n    '''\n    Write a function that takes in two strings and returns true if they are anagrams of each other, false otherwise.\n    '''\n    arr1 = list(s1)\n    arr2 = list(s2)\n    arr1.sort()\n    arr2.sort()\n    if arr1 == arr2:\n        return True\n    else:\n        return False\n    \n    \ndef rotLeft(a, d):\n    '''\n    Write a function that takes in a list and returns the list with the elements rotated left n number of times where n is the given parameter"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 1:\n        return 0x1\n    n = n << d\n    if n & 0x80000000:\n        return (n ^ 0xffffffff) | 0x80000000\n    return n & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    num = num & (2**d-1)\n    return num | ((num << d) & (2**32-1))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s\", '', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\", '', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef check_for_html(text):\n    '''\n    Write a function to determine if html is present in a string.\n    '''\n    return '<' in text\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_all_html(text):\n    '''\n    Write a function to remove all html from a string.\n    '''\n    return re.sub('<.*?>', '', text)\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove html from a string.\n    '''\n    return text.replace(\"<\", \"\")\ndef remove_html(text):\n    '''\n    Write a function to remove htm"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    result = x == y == z\n    return result\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x == y and x == z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def same_number(a,b,c):\n        if a == b == c:\n            return True\n        else:\n            return False\n    return same_number(x,y,z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"Number of equal numbers = {}\".format(x == y == z))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    if x==y and y==z and x==z:\n        c+=1\n    return c\nx=int(input())\ny=int(input())\nz=int(input())\nprint(test_three_equal(x,y,z))"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y and x!= z:\n        count += 1\n    elif y == z and x!= y:\n        count += 1\n    elif x == z and y!= x:\n        count += 1\n    elif y == z and x!= y:\n        count += 1\n    elif x!= y and x!= z and y!= z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr)-1\n    \n    while(start<end):\n        mid = (start+end)//2\n        if(arr[start]<arr[mid]):\n            start = mid+1\n        else:\n            end = mid\n    \n    return start\n    \n    \ndef count_rotation_2(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr)-1\n    \n    while(start<end):\n        mid = (start+end)//2\n        if(arr[start]<arr[mid]):\n            start = mid+1\n        else:\n            end = mid\n    \n    return start\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # the number of rotations are the number of swaps needed.\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # If there is only one element left\n    if len(arr) == 1:\n        return 0\n    # If there are more than one elements left\n    if len(arr) > 1:\n        current_index = 0\n        prev_index = 1\n        flag = 0\n        # Traverse the array till the last element\n        for i in range(1,len(arr)):\n            # Check if we have to swap the elements\n            if arr[i] < arr[prev_index]:\n                current_index = i\n                flag = 1\n                break\n            prev_index = i\n        # If no swap occured then return -1\n        if flag == 0:\n            return -1\n        else:\n            return (current_index - prev_index + 1)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(\"Initial array:\", arr)\n    count = 0\n    # if there is only one element in the array, no need to sort\n    if len(arr) == 1:\n        return 0\n    # iterate over the array\n    for i in range(len(arr) - 1):\n        # the element to the left of the current element should be greater than the current element\n        # keep doing this till all the elements are sorted\n        while (i < len(arr) - 1) and arr[i] <= arr[i + 1]:\n            i += 1\n        # if i is still less than len(arr) - 1, then the i-th element is greater than i+1\n        # hence need to swap them\n        if i < len(arr) - 1:\n            temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n        # add one to count the number of rotation required\n        count += 1\n    return count\n    \nprint(count_rotation([3,4,5,1,2]))\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n - 1:\n        if arr[i] <= arr[i + 1]:\n            i += 1\n        else:\n            j = i\n            while j < n - 1 and arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                j += 1\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    print(\"Number of rotations needed to sort the array = \")\n    arr = [3, 5, 2, 1, 4]\n    print(count_rotation(arr))"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    count = 0\n    for i in range(length):\n        for j in range(length - i - 1):\n            if arr[j] > arr[j + 1]:\n                count += 1\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    print(arr)\n    print(count)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # arr = [1, 2, 4, 5, 3]\n    # arr = [1, 2, 3, 4, 5]\n    # arr = [1, 3, 4, 2, 5]\n    # arr = [2, 1, 3, 5, 4]\n    # arr = [5, 4, 3, 2, 1]\n    arr = [1, 1, 1]\n    # arr = [2, 3, 4]\n    # arr = [1, 2]\n    # arr = [1]\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotate(arr, d, n): \n        for i in range(d): \n            n = n >> 1\n            arr[n], arr[n + 1] = arr[n + 1], arr[n] \n            \n    rotate(arr, d, n) \n    #if d == 0:\n        #print(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    '''\n    1. Get the mid of the array\n    2. Sort the first half (arr[:mid])\n    3. Sort the second half (arr[mid+1:])\n    4. Check whether second half needs to be sorted or not\n    5. Check whether first half needs to be sorted or not\n    6. If not then there is a rotation\n    '''\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(0, n-1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n                count += 1\n    print(arr)\n    print(count)\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<0:\n        return -1\n    if n==0 or n==1:\n        return True\n    if n%2==0:\n        return False\n    # r = int(math.sqrt(n))\n    r = 1\n    while r*r <= n:\n        if n%r == 0:\n            return False\n        r+=1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # the sqrt of a perfect square is itself. So we just need to check if n is a perfect square\n    return (int(sqrt(n))**2) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    return math.sqrt(n) == int(math.sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0:\n        r = int(math.sqrt(n))\n        if r * r == n:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if math.sqrt(n).is_integer():\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0:\n        root = n ** 0.5\n        if root == int(root):\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Taking only the last digit\n    last_digit = n % 10\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root_n = math.sqrt(n)\n    if root_n - math.floor(root_n) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n < 0 :\n        return False\n    # Take a number 'n' and try to find a square number that is close to 'n'. If the difference between 'n' and the square number\n    # is less than or equal to 1/3, then it is a perfect square.\n    # For e.g: if n is 13, then to find the square number, you need to try to find 12. Then, 13 - 12 = 1, so\n    # to check if 12 is a perfect square, you need to do math.sqrt(12). If math.sqrt(12) is 3, then you have found a perfect\n    # square. Hence, this is a perfect square.\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (is_even_no_list(arr)): \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if isinstance(arr, list):\n        return all(is_product_even(i) for i in arr)\n    else:\n        return True\nprint(is_product_even([2,4,6]))\nprint(is_product_even([]))\nprint(is_product_even([1,2,3]))\nprint(is_product_even([4,5,6]))\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Brute force method:\n    # Check every product and see if it is even\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j]%2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr:\n        arr_prod = 1\n        for i in range(len(arr)):\n            arr_prod *= arr[i]\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # for each element in the list\n    for x in arr:\n        # if product of the elements is even\n        if x*x % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return all(num % 2 == 0 for num in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if type(arr) == list:\n        # lenght of arr\n        l = len(arr)\n        # check if all element of arr is integer \n        if all(type(x) == int for x in arr):\n            # if lenght of arr is even\n            if l % 2 == 0:\n                # return all even element of arr\n                return all(x % 2 == 0 for x in arr)\n            else:\n                # return all odd element of arr\n                return all(x % 2!= 0 for x in arr)\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # if the number of elements in the list is 0 or 1\n    if len(lists) <= 1:\n        return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # find the maximum sum of all the elements of a list\n    max_sum = 0\n    for l in lists:\n        curr_sum = 0\n        for val in l:\n            curr_sum += val\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    print(max_sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    newList = []\n    maxSum = lists[0][0]\n    for x in range(0, len(lists)):\n        for y in range(0, len(lists[x])):\n            if lists[x][y] > maxSum:\n                maxSum = lists[x][y]\n                newList = []\n                newList.append(lists[x][y])\n            elif lists[x][y] > 0 and lists[x][y] < maxSum:\n                newList.append(lists[x][y])\n    return newList\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(0, len(lists)):\n        if max_sum < sum(lists[i]):\n            max_sum = sum(lists[i])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sort the list in descending order and record its index\n    lists = sorted(lists, reverse=True)\n    sum_max = 0\n    max_index = 0\n    for index in range(len(lists)):\n        sum_max = sum_max + lists[index]\n        if sum_max > 0:\n            max_index = index\n        else:\n            break\n    \n    # sort the list in ascending order and record its index\n    lists = sorted(lists, reverse=False)\n    sum_max = 0\n    max_index = 0\n    for index in range(len(lists)):\n        sum_max = sum_max + lists[index]\n        if sum_max > 0:\n            max_index = index\n        else:\n            break\n    \n    # return the list\n    return lists[:max_index+1]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    print('Running the function')\n    max_val = -999\n    final_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_val:\n                max_val = lists[i][j]\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] == max_val:\n                final_list.append([lists[i][j]])\n    return final_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # find highest sum from list of lists\n    # [1,2,3,4]\n    # [[1,2],1,3,4]\n    # [1,2,3,4]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists_length = len(lists)\n    lists_width = len(lists[0])\n    \n    highest_sum_list = []\n    for i in range(0, lists_length):\n        highest_sum_element = 0\n        for j in range(0, lists_width):\n            if lists[i][j] > highest_sum_element:\n                highest_sum_element = lists[i][j]\n        highest_sum_list.append(highest_sum_element)\n    \n    return highest_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -math.inf\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    output = [[]]\n    for l in lists:\n        for val in l:\n            if val not in output[-1]:\n                output[-1].append(val)\n            elif val == max(output[-1]):\n                output[-1].remove(val)\n    return output[-1]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_run:\n            max_run = count\n    return max_run\n    \n    \ndef max_run_digits(test_str):\n    '''\n    Write a function to find maximum run of digits in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n        if count > max_run:\n            max_run = count\n    return max_run\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # We use a counter to track the latest count of uppercase characters\n    count = 0\n    # For each character in the string\n    for i in range(0, len(test_str)):\n        # If this character is an uppercase character\n        if test_str[i].isupper():\n            # Increment the counter\n            count += 1\n        # Else if this character is an lowercase character\n        elif test_str[i].islower():\n            # Decrement the counter\n            count -= 1\n        # If the counter is zero\n        if count == 0:\n            # The maximum run of uppercase characters is now the length of the string\n            return len(test_str)\n    # If the maximum run of uppercase characters is less than the length of the string\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    assert isinstance(test_str, str), \"input is not string\"\n    assert (len(test_str) > 0), \"input is empty\"\n    \n    max_count = 0\n    curr_count = 0\n    for i in test_str:\n        if i.isupper():\n            curr_count += 1\n            if curr_count > max_count:\n                max_count = curr_count\n        else:\n            curr_count = 0\n    \n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > count:\n            count = count\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    l_max = 0\n    l_max_index = 0\n    l_max_length = 0\n    for index in range(len(test_str)):\n        if test_str[index].isupper():\n            if index > l_max:\n                l_max = index\n                l_max_index = index\n            if index < l_max:\n                l_max = index\n                l_max_index = index\n    if l_max_length < l_max:\n        l_max_length = l_max\n    return l_max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize max_run and max_count\n    max_run = 0\n    max_count = 0\n    # Iterate over the given string\n    for i in range(len(test_str)):\n        count = 0\n        # Check for uppercase character\n        if test_str[i].isupper():\n            count += 1\n            # Check if we have a new maximum\n            if count > max_count:\n                max_count = count\n                max_run = i - count\n        # Increment count\n        count += 1\n    # Return maximum run and maximum count\n    return max_run, max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= test_str[i - 1]:\n            max_run = max(max_run, test_str[i - 1] + 1)\n        else:\n            max_run = max_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    return max(map(len,test_str.split(' ')))\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        count = 0\n        if test_str[i].isupper():\n            count += 1\n        for j in range(i+1, len(test_str)):\n            if test_str[j].isupper():\n                count += 1\n            if max_count < count:\n                max_count = count\n    return max_count\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\nprint(first_odd([10,20,30,40,50]))\nprint(first_odd([10,20,30]))\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n        else:\n            continue\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    # Write your code here\n    \n    for i in nums:\n        if i % 2!= 0:\n            return i\n            \n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    else:\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = nums.copy()\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[0] = nums[i]\n            break\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    l = len(nums)\n    i = 0\n    while i < l:\n        if nums[i] % 2!= 0:\n            return nums[i]\n        i += 1\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if nums[0]%2==1 else -1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    (t, K) = test_tup\n    if t == K:\n        return True\n    elif t[:len(K)] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    temp = [x for x in test_tup if x[0] == K]\n    return True if len(temp) == 1 else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_count = len(test_tup)\n    K_count = 0\n    if tup_count == K:\n        return True\n    else:\n        for i in range(tup_count):\n            if test_tup[i] == K:\n                K_count += 1\n        return K_count == tup_count\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup = test_tup[0]\n    if tup[0] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K or test_tup[1] == K or test_tup[2] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # return True if the given tuple has k or not\n    return True if len(test_tup) == K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_found = False\n    for i in test_tup:\n        if i == K:\n            k_found = True\n    return k_found\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (len(test_tup) >= K):\n        if (test_tup[K-1] == 'K'):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    assert type(test_tup) == tuple, 'Invalid input'\n    assert type(K) == int and K <= len(test_tup), 'Invalid input'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple((test_tup1[i] <= test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] <= test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test = True\n    if test_tup1 < test_tup2:\n        test = False\n    return test\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        else:\n            i += 1\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        return check_smaller(test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n    \nprint(check_smaller((1,2),(3,4)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        return False\n    if (test_tup1 == () or test_tup2 == ()):\n        return True\n    for i in range(0,len(test_tup1)):\n        if (test_tup1[i] < test_tup2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1 < test_tup2\n"
    }
]