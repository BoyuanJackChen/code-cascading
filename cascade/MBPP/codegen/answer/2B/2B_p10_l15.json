[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in test_tup1:\n        test_list1.append(i)\n    for i in test_tup2:\n        test_list2.append(i)\n    shared_list = []\n    for i in test_list1:\n        if i in test_list2:\n            shared_list.append(i)\n    print(shared_list)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            list_1.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] in test_tup1:\n            list_2.append(test_tup2[i])\n    print(list_1)\n    print(list_2)\n    return list_1 == list_2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            return_tup = return_tup + (test_tup1[i],)\n    return return_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    # return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_list_1 = set(test_tup1)\n    set_list_2 = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    element = set(test_tup1) & set(test_tup2)\n    return element\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (1, 2, 3, 3, 3, 2, 1)\n    # test_tup2 = (1, 2, 3, 3, 2, 1, 4)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test1 = set(test_tup1)\n    set_test2 = set(test_tup2)\n    \n    return set_test1.intersection(set_test2)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return False\n    elif (n == 3):\n        return False\n    else:\n        if (n % 2 == 0 or n % 3 == 0):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return True\n        return False\n    else:\n        return True\n    \ndef if_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # print(n%2==0)\n    if n%2==0:\n        return False\n    \n    # print(n%3==0)\n    if n%3==0:\n        return False\n    \n    # print(n%5==0)\n    if n%5==0:\n        return False\n    \n    # print(n%7==0)\n    if n%7==0:\n        return False\n    \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of given numbers.\n    '''\n    d = 2\n    i = 1\n    if n < 2:\n        return None\n    while n % d!= 0:\n        i = i + 1\n        d = (d + 1) % n\n    return int(d), int(i)\n    \ndef rotate_matrix(a, n):\n    '''\n    Write a python function to rotate the matrix by n steps (clockwise).\n    '''\n    if a is None or len(a) == 0 or n < 0:\n        return None\n    if n == 0:\n        return a\n    for i in range(n):\n        temp = a[0]\n        for j in range(len(a) - 1):\n            a[j] = a[j + 1]\n        a[-1] = temp\n        \ndef generate_matrix(n):\n    '''\n    Write a python function to generate the matrix with values 1 to n.\n    '''\n    if n < 0:\n        return None\n    return [[i + 1] for i in range(n)]\n    \ndef get_matrix_minor(m, i, j):\n    '''\n    Write a python function to compute the minor of a matrix.\n    '''\n    if m is None or len(m) == 0 or i < 0 or j < 0 or i >= len(m) or j >= len(m):\n        return None\n    m = generate_matrix(len(m))\n    temp = []\n    for k in range(len(m)):\n        temp.append([])\n        for p in range(len(m)):\n            if k == i:\n                temp[k].append(m[p][j])\n            elif p == j:\n                temp[k].append(m[k][p])\n            else:\n                temp[k].append(m[k][p])\n    return generate_matrix(len(temp))\n    \ndef adjugate(m):\n    '''\n    Write a python function to compute the adjugate matrix of a given matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    for i in range(len(m)):\n        for j in range(len(m)):\n            m[i][j] = m[i][j] * (-1)\n    return m\n    \ndef transpose(m):\n    '''\n    Write a python function to compute the transpose of a given matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = []\n    for i in range(len(m)):\n        temp.append([])\n        for j in range(len(m)):\n            temp[i].append(m[j][i])\n    return temp\n    \ndef find_determinant(m):\n    '''\n    Write a python function to compute the determinant of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = m[0]\n    for i in range(1, len(m)):\n        temp = temp * m[i]\n    return temp\n    \ndef get_list_diagonal(m, diagonal_index):\n    '''\n    Write a python function to return the diagonal elements of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = []\n    for i in range(len(m)):\n        temp.append(m[i][diagonal_index])\n    return temp\n    \ndef get_row(m, row_index):\n    '''\n    Write a python function to return the row elements of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = []\n    for i in range(len(m)):\n        temp.append(m[i][row_index])\n    return temp\n    \ndef get_column(m, column_index):\n    '''\n    Write a python function to return the column elements of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = []\n    for i in range(len(m)):\n        temp.append(m[i][column_index])\n    return temp\n    \ndef get_row_column(m, row_index, column_index):\n    '''\n    Write a python function to return the specified row and column elements of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = []\n    for i in range(len(m)):\n        temp.append(m[i][row_index])\n    return temp[column_index]\n    \ndef is_invertible(m):\n    '''\n    Write a python function to return true if a matrix is invertible else false.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    if find_determinant(m) == 0:\n        return False\n    return True\n    \ndef find_inverse(m):\n    '''\n    Write a python function to compute the inverse of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    if not is_invertible(m):\n        return None\n    adj = adjugate(m)\n    row = get_row(adj, 1)\n    row.reverse()\n    for i in range(len(row)):\n        row[i] = row[i] / get_row(m, 1)[i]\n    temp = []\n    for i in range(len(row)):\n        temp.append(row[i])\n    return temp\n    \ndef find_det(m):\n    '''\n    Write a python function to compute the determinant of a matrix.\n    '''\n    if m is None or len(m) == 0:\n        return None\n    temp = find_determinant(m)\n    if is_invertible(m):\n        return temp\n    return None\n    \ndef matrix_multiply(a, b):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    if a is None or len(a) == 0 or b is None or len(b) == 0:\n        return None\n    c = []\n    for i in range(len(a)):\n        temp = []\n        for j in range(len(a)):\n            temp.append(0)\n        c.append(temp)\n    for i in range(len(b)):\n        for j in range(len(a)):\n            c[i][j] = a[i][j] * b[i][j]\n    return c\n    \ndef matrix_addition(a, b):\n    '''\n    Write a python function to add two matrices.\n    '''\n    if a is None or len(a) == 0 or b is None or len(b) == 0:\n        return None\n    if len(a)!= len(b):\n        return None\n    c = []\n    for i in range(len(a)):\n        temp = []\n        for j in range(len(a)):\n            temp.append(0)\n        c.append(temp)\n    for i in range(len(a)):\n        for j in range(len(a)):\n            c[i][j] = a[i][j] + b[i][j]\n    return c\n    \ndef matrix_subtraction(a, b):\n    '''\n    Write a python function to subtract two matrices.\n    '''\n    if a is None or len(a) == 0 or b is None or len(b) == 0:\n        return None\n    if len(a)!= len(b):\n        return None\n    c = []\n    for i in range(len(a)):\n        temp = []\n        for j in range(len(a)):\n            temp.append(0)\n        c.append(temp)\n    for i in range(len(a)):\n        for j in range(len(a))"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n <= 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2, n):\n            if (n % i == 0):\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    return [hq.heappop(h) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<=n:\n        return nums\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heap[0] = nums[i]\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # min heap\n    min_heap = []\n    for i in range(len(nums)-n+1):\n        hq.heappush(min_heap,nums[i])\n    \n    # get the largest value out of the min heap\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(min_heap))\n    return res[::-1]\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in range(len(nums)):\n        if i!= n:\n            hq.heappush(heap,nums[i])\n    for i in range(len(nums)-n):\n        hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # 1. The queue is ordered by value\n    # 2. If there are less than n values, we can return the array as is\n    # 3. If there are more than n values, we need to pop off the items and push them onto the queue\n    # 4. If we do so, we are guaranteed to have the n largest values\n    if not nums or n > len(nums) or n <= 0:\n        return nums\n    \n    q = []\n    for i in nums:\n        hq.heappush(q,i)\n    \n    for _ in range(n):\n        x = hq.heappop(q)\n        hq.heappush(q,x)\n    \n    return q\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    hq.heapify(largest)\n    while len(nums)>0:\n        current = nums[0]\n        del nums[0]\n        hq.heappush(largest,current)\n        if len(largest)>n:\n            del largest[-1]\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums = nums.copy()\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bit_1 = x%10\n    bit_2 = x//10\n    if bit_1==bit_2:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x&1)==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1: \n        while (x % 2) == 0: \n            x = x / 2\n    if x == 1: \n        return True\n    return False\n    \ndef array_array_palindrome(input_arr):\n    '''\n    Write a python function to check whether the array is palindrome or not.\n    '''\n    if input_arr==input_arr[::-1]:\n        return True\n    return False\n    \ndef array_array_frequency(input_arr):\n    '''\n    Write a python function to check whether the array is frequency array or not.\n    '''\n    freq_arr = {}\n    for i in input_arr:\n        if i in freq_arr:\n            freq_arr[i] += 1\n        else:\n            freq_arr[i] = 1\n    for k,v in freq_arr.items():\n        if v == 1:\n            return True\n    return False\n    \ndef if_sum_is_string(input_arr):\n    '''\n    Write a python function to check whether the numbers are string or not.\n    '''\n    for i in input_arr:\n        if i!='':\n            return False\n    return True\n    \ndef binary_decimal_string(input_arr):\n    '''\n    Write a python function to convert binary number to decimal number.\n    '''\n    binary_arr = []\n    for i in input_arr:\n        if i!='':\n            binary_arr.append(i)\n    binary_arr = ''.join(binary_arr)\n    return int(binary_arr,2)\n    \ndef add_array_elements(arr1,arr2):\n    '''\n    Write a python function to add two arrays of any size.\n    '''\n    for i in range(len(arr1)):\n        arr1[i] += arr2[i]\n    return arr1\n    \ndef flip_an_array(arr):\n    '''\n    Write a python function to flip an array of odd length or even length.\n    '''\n    arr1 = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            arr1.append(arr[i])\n        else:\n            arr1.append(arr[i])\n    return arr1\n    \ndef num_zeros(input_arr):\n    '''\n    Write a python function to count number of zeros in a given array.\n    '''\n    num_zeros = 0\n    for i in input_arr:\n        if i == 0:\n            num_zeros += 1\n    return num_zeros\n    \ndef is_palindrome(input_str):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    if input_str == input_str[::-1]:\n        return True\n    return False\n    \ndef is_anagram(input_str,input_str2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    input_str = sorted(input_str)\n    input_str2 = sorted(input_str2)\n    if input_str == input_str2:\n        return True\n    return False\n    \ndef is_sub_sequence(input_str,input_sub_str):\n    '''\n    Write a python function to check whether the given substring is a subsequnce or not.\n    '''\n    input_str = sorted(input_str)\n    input_sub_str = sorted(input_sub_str)\n    for i in input_str:\n        if i in input_sub_str:\n            input_sub_str.remove(i)\n    if input_sub_str == []:\n        return True\n    return False\n    \ndef is_number_pairs(input_arr,input_num):\n    '''\n    Write a python function to check whether the given number pairs are present in the array or not.\n    '''\n    for i in input_arr:\n        if input_num in i:\n            return True\n    return False\n    \ndef is_all_unique(input_arr):\n    '''\n    Write a python function to check whether all the numbers of the given array are unique or not.\n    '''\n    seen = set()\n    for i in input_arr:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True\n    \ndef rotate_array(input_arr,k):\n    '''\n    Write a python function to rotate the given array by k position.\n    '''\n    for i in range(k):\n        temp = input_arr[0]\n        for i in range(len(input_arr)):\n            input_arr[i] = input_arr[i+1]\n        input_arr[-1] = temp\n        \ndef move_zeros(arr):\n    '''\n    Write a python function to move all zeros to end of the array.\n    '''\n    num_zeros = 0\n    index = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            arr[index] = arr[i]\n            index += 1\n    for i in range(index,len(arr)):\n        arr[i] = 0\n    return arr\n    \ndef is_longest_word(input_str):\n    '''\n    Write a python function to check whether the given string is a longest word or not.\n    '''\n    input_str = input_str.lower()\n    return len(input_str) >= len(max(input_str.split(), key=len))\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef function_that_does_nothing(x):\n    '''\n    Write a python function to say 'hello' without using print or print('hello') function.\n    '''\n    return\n    \ndef perfect_square(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    for i in range(n):\n        if n % (i+1)!= 0:\n            return False\n    return True\n    \ndef string_addition(input_str):\n    '''\n    Write a python function to add the string given with any number of characters.\n    '''\n    return input_str + str(4)\n    \ndef three_number_sum(input_arr,target_sum):\n    '''\n    Write a python function to find all the triplets in array which gives sum of elements.\n    '''\n    for i in range(len(input_arr)):\n        for j in range(i+1,len(input_arr)):\n            for k in range(j+1,len(input_arr)):\n                if input_arr[i] + input_arr[j] + input_arr[k] == target_sum:\n                    return [input_arr[i],input_arr[j],input_arr[k]]\n    return []\n    \ndef find_max_profit_team(input_arr):\n    '''\n    Write a python function to find the maximum profit team.\n    '''\n    profit_arr = []\n    for i in range(len(input_arr)):\n        profit_arr.append(input_arr[i][1] - input_arr[i][0])\n    return max(profit_arr)\n    \ndef check_array_validity(input_arr):\n    '''\n    Write a python function to check whether the array is sorted or not.\n    '''\n    for i in range(len(input_arr)-1):\n        if input_arr[i] > input_arr[i+1]:\n            return False\n    return True\n    \ndef array_maximum_sum(input_arr):\n    '''\n    Write a python function to find the maximum sum of array elements.\n    '''\n    sum_of_arr = 0\n    for i in range(len(input_arr)):\n        sum_of_arr += input_arr[i]\n    return sum_of_arr\n    \ndef array_minimum_sum(input_arr):\n    '''\n    Writ"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # TO-DO: YOUR CODE HERE\n    if x<=0:\n        return False\n    else:\n        while x>1:\n            if x%2==0:\n                x/=2\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    else:\n        x1 = x&(x-1)\n        if x1==0:\n            return True\n        else:\n            return False\n        \n        \n        \n        \nprint(is_Power_Of_Two(8))    \nprint(is_Power_Of_Two(16))    \nprint(is_Power_Of_Two(18))    \nprint(is_Power_Of_Two(0))    \nprint(is_Power_Of_Two(5))    \nprint(is_Power_Of_Two(1))    \nprint(is_Power_Of_Two(3))    \nprint(is_Power_Of_Two(32))    \nprint(is_Power_Of_Two(4))    \nprint(is_Power_Of_Two(25))    \nprint(is_Power_Of_Two(25))    \nprint(is_Power_Of_Two(0))    \nprint(is_Power_Of_Two(1))    \nprint(is_Power_Of_Two(2))    \nprint(is_Power_Of_Two(3))    \nprint(is_Power_Of_Two(4))    \nprint(is_Power_Of_Two(7))    \nprint(is_Power_Of_Two(20))    \nprint(is_Power_Of_Two(22))    \nprint(is_Power_Of_Two(43))    \nprint(is_Power_Of_Two(43))    \nprint(is_Power_Of_Two(42))    \nprint(is_Power_Of_Two(42))    \nprint(is_Power_Of_Two(37))    \nprint(is_Power_Of_Two(37))    \nprint(is_Power_Of_Two(31))    \nprint(is_Power_Of_Two(31))    \nprint(is_Power_Of_Two(10))    \nprint(is_Power_Of_Two(0))    \nprint(is_Power_Of_Two(6))    \nprint(is_Power_Of_Two(31))    \nprint(is_Power_Of_Two(1))    \nprint(is_Power_Of_Two(2))    \nprint(is_Power_Of_Two(9))    \nprint(is_Power_Of_Two(0))    \nprint(is_Power_Of_Two(1))    \nprint(is_Power_Of_Two(4))    \nprint(is_Power_Of_Two(8))    \nprint(is_Power_Of_Two(0))    \nprint(is_Power_Of_Two(3))    \nprint(is_Power_Of_Two(6))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(12))    \nprint(is_Power_Of_Two(12))    \nprint(is_Power_Of_Two(14))    \nprint(is_Power_Of_Two(27))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(27))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Power_Of_Two(26))    \nprint(is_Powe"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #iterate till 2**0 = 1\n    while(x>0): \n        #if 2**0 = 1, then break\n        if(x==1): \n            break\n        #increment x\n        x=x//2\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    output = []\n    for line in text.split('\\n'):\n        line = line.split()\n        if len(line)>=4:\n            output.append(line)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for char in text:\n        if char.isalpha():\n            result.append(char.lower())\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for word in text.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=re.compile(r\"\\w{4,}\")\n    for i in text.split(' '):\n        if(pattern.match(i)):\n            print(i)\ntext=input()\nfind_char_long(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('\\w{4,}',text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_upper = text.upper()\n    words = []\n    words = re.findall(r'\\w+', text_upper)\n    print(words)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print([x for x in re.findall(r'\\w{4,}', text)])\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b\\w{4,}\\b', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #return re.findall(r\"\\b[a-zA-Z]{3,}\\b\", text)\n    return re.findall(r\"\\b\\w{3,}\\b\", text)\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return nums ** 2\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i*i)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        square = num**2\n        new_list.append(square)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    list_of_squares = []\n    for i in range(len(nums)):\n        list_of_squares.append(nums[i] * nums[i])\n    return list_of_squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num ** 2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    index = 0\n    c = str[0]\n    t = str[1]\n    final_str = ''\n    while index < len(str):\n        final_str = final_str + str[index]\n        index = index + 1\n    final_str = final_str + t\n    final_str = final_str + c\n    \n    index = 0\n    final_str = final_str[::-1]\n    print(final_str)\n    while index < len(final_str):\n        final_str = final_str + final_str[index]\n        index = index + 1\n    final_str = final_str[::-1]\n    print(final_str)\n    \n    index = 0\n    final_str = final_str[::-1]\n    while index < len(final_str):\n        final_str = final_str + final_str[index]\n        index = index + 1\n    final_str = final_str[::-1]\n    print(final_str)\n    \n    final_str = final_str[::-1]\n    print(final_str)\n    \n    count = 0\n    for i in range(len(final_str)):\n        if final_str[i] == str[i]:\n            count = count + 1\n            \n    if count == len(str):\n        return -1\n    else:\n        return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #lets try to solve this problem in a simpler way\n    #let's say we have a string s and we want to get the string s after a certain rotation. \n    # this can be done by dividing the string s in two parts in such a way that the first half is ordered the same way, \n    # the second half is ordered the opposite way. \n    # (i.e. s = \"ABAD\", then after we divide the string in two parts we have s = \"ABCD\" and s = \"BAD\")\n    # now we want to see the minimum number of rotations required to get s = \"ABCD\"\n    # the optimal rotation is to first rotate the string so that the second half is ordered the same way. \n    # then we can find the difference of the lengths of the two halves. \n    # the minimum number of rotations required to get the array of two halves to be of the same length is \n    # min(num_rotations_required_for_left_half, num_rotations_required_for_right_half). \n    # for example, if s = \"ABAD\" and we rotate s in a way that the second half is ordered in the opposite way, \n    # then we get s = \"BCAD\" which is of length 4. Then by rotating the second half in a way that it is ordered in the \n    # same way, we get s = \"DBCA\" which is of length 4. \n    # thus, the minimum number of rotations required to get the array of two halves to be of the same length is 4. \n    # so it takes 4 rotations to get the first array of two halves to be of the same length. \n    # similarly, we need to rotate the second array to have the same length as the first array. \n    # so we need to find the min number of rotations to get the two halves to be of the same length \n    # hence we need to find min number of rotations required to get s = \"ABCD\"\n    # all that remains is to find the number of rotations required to rotate the string so that the second half is ordered the same way\n    # and then find the number of rotations required to get the array of two halves to be of the same length \n    # (i.e. find the minimum number of rotations required to get the first array of two halves to be of the same length). \n    # the minimum number of rotations required to get the array of two halves to be of the same length is:\n    # min(num_rotations_required_for_left_half, num_rotations_required_for_right_half). \n    # \n    # note that all the strings with length less than 7 have the same number of rotations. \n    # so just go ahead and return 0 when the string is of length 7. \n    # else, we are going to find the rotation that is required to put the string in the same way \n    # after rotating it in the way that its second half is ordered in the opposite way. \n    # as all the rotations are in the same order for a string of length 7, \n    # hence we can use a similar approach to find the rotations required to get the array of two halves to be of the same length. \n    # we can use the same approach as for the minimum number of rotations required to get the first array of two halves to be of the same length \n    # and then find the number of rotations required to get the array of two halves to be of the same length. \n    # the number of rotations required to get the array of two halves to be of the same length is the minimum of the two numbers above.\n    # we can now see that the number of rotations required to get the array of two halves to be of the same length is the minimum \n    # of the following numbers: \n    # min(num_rotations_required_for_left_half, num_rotations_required_for_right_half). \n    # The minimum number of rotations required to get the array of two halves to be of the same length is the minimum of \n    # these two numbers. \n    # so our first step is to find the number of rotations required to rotate the array so that its second half is ordered the same way. \n    # if the first half is ordered in the opposite way, then we are going to find the number of rotations required to get the array of two halves to be of the same length \n    # if it is ordered in the same way, then we don't need to find any rotations. \n    # if the number of rotations required is equal to 0, then the array is ordered in the same way.\n    # if the number of rotations required is less than 0, then the array is ordered in the opposite way.\n    # so the next step is to find the number of rotations required to rotate the second half so that it is ordered in the same way as the first half. \n    # if the second half is ordered in the opposite way, then the number of rotations required is equal to 0.\n    # if the number of rotations required is greater than 0, then we are going to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # if the second half is ordered in the same way, then we don't need to find any rotations. \n    # otherwise, we need to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # now the answer will be found by adding up the minimum number of rotations required to get the first array of two halves to be of the same length. \n    # and the same for the second array. \n    # the minimum number of rotations required to get the array of two halves to be of the same length is \n    # the minumum of the two numbers above. \n    # \n    # here is a detailed description of how the above steps work:\n    # \n    # first, we can find the number of rotations required to get the array of two halves to be of the same length. \n    # if the second half is ordered in the opposite way, then the number of rotations required is equal to 0. \n    # if the number of rotations required is greater than 0, then we are going to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # if the second half is ordered in the same way, then the number of rotations required is equal to 0.\n    # the minimum number of rotations required to get the array of two halves to be of the same length is \n    # the minumum of the two numbers above. \n    # \n    # second, we can find the number of rotations required to get the array of two halves to be of the same length. \n    # if the first half is ordered in the opposite way, then the number of rotations required is equal to 0. \n    # if the number of rotations required is greater than 0, then we are going to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # if the first half is ordered in the same way, then the number of rotations required is equal to 0. \n    # the minimum number of rotations required to get the array of two halves to be of the same length is \n    # the minumum of the two numbers above. \n    # \n    # the minimum number of rotations required to get the array of two halves to be of the same length is \n    # the minimum of the two numbers above. \n    # \n    # and now, we need to find the number of rotations required to rotate the array so that its second half is ordered in the same way as the first half. \n    # if the second half is ordered in the opposite way, then we are going to find the number of rotations required to get the array of two halves to be of the same length. \n    # if the second half is ordered in the same way, then we don't need to find any rotations. \n    # if the number of rotations required is equal to 0, then the array is ordered in the same way. \n    # if the number of rotations required is greater than 0, then we are going to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # if the second half is ordered in the same way, then we don't need to find any rotations. \n    # otherwise, we need to find the minimum number of rotations required to get the array of two halves to be of the same length. \n    # the minimum number of rotations required to get the array of two halves to be of the same length is the minimum of the two numbers above. \n    # \n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str)\n    rotations = 0\n    while (str!= sorted(str)):\n        str = sorted(str)\n        rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    d = {}\n    for i in str:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    count = 0\n    for i in d.values():\n        count += abs(i-1)\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i]!= str[-1-i]:\n            return -1\n        i += 1\n    return len(str) - "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    while True:\n        if str == rotate(str, 1):\n            break\n        else:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import collections\n    n = len(str)\n    count = collections.Counter(str)\n    #print(count)\n    if count[str[0]]!= 1:\n        return -1\n    return count[str[0]]-1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = 'GeeksforGeeks'\n    # Time: O(N)\n    # Space: O(1)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Note that there are 2 rotations for every rotation you can do\n    #If you rotate by one, the new rotation would be the same as the old rotation\n    #and the number of rotations is equal to the number of rotations of the original \n    #string\n    \n    '''\n    Notes:\n        For any two rotations, there are four different cases:\n            1) At some point in the first rotation,\n            the second letter changes into the first letter.\n            In this case, the new string would be the same as the original string\n            2) At some point in the second rotation,\n            the second letter changes into the first letter.\n            In this case, the new string would be the original string\n            3) At some point in the third rotation,\n            the second letter changes into the first letter.\n            In this case, the new string would be the original string\n            4) At some point in the fourth rotation,\n            the second letter changes into the first letter.\n            In this case, the new string would be the original string\n        \n        Therefore, the number of rotations to get from the original string to the new string is (number of rotations of the original string)\n        - number of rotations of the first string\n        - number of rotations of the second string\n        - number of rotations of the third string\n        - number of rotations of the fourth string\n        \n        Eg. abc -> abc\n        abac -> abac\n        abaca -> abaca\n        abacabac -> abacabac\n    '''\n    \n    #O(n) time\n    #O(n) space\n    #n = length of string\n    def find_rotations(str):\n        count = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n        return count\n    \n    # O(n) time\n    # O(1) space\n    def find_rotations_no_space(str):\n        count = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n        return count\n    \n    # O(n) time\n    # O(1) space\n    def find_rotations_no_space_with_rotations(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    # O(n) time\n    # O(1) space\n    def find_rotations_with_rotations_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_more_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_more_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_more_space_more_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_more_space_more_space_more_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotations += 1\n                    if rotations == 1:\n                        return rotations\n                    if rotations == 2:\n                        return rotations\n        return rotations\n    \n    #O(n) time\n    #O(1) space\n    def find_rotations_with_rotations_less_space_more_space_more_space_more_space_more_space_more_space_less_space(str):\n        count = 0\n        rotations = 0\n        for i in range(0, len(str)):\n            if str[i]!= str[(i + 1) % len(str)]:\n                count += 1\n                if count == 1:\n                    rotation"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == '':\n        return 0\n    stack = []\n    for i in range(len(str)):\n        if len(stack) == 0:\n            stack.append(str[i])\n        else:\n            if str[i] == stack[-1]:\n                stack.pop()\n            else:\n                stack.append(str[i])\n    return len(stack)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    c = ch\n    n = len(s)\n    if s == c:\n        return s\n    elif s[0] == c:\n        return s[1:n]\n    elif s[n-1] == c:\n        return s[0:n-1]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    for i in range(len(s)-1):\n        if s[i] == ch:\n            if s[i] == s[i+1]:\n                s = s[:i] + s[i+2:]\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', 1)\ns = \"ABDABDABDABDABDABD\"\nprint(remove_Occ(s, 'B'))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n    if count == 1:\n        return s.replace(ch,\"\")\n    else:\n        return s.replace(ch,\"\") + s[0:len(s)-count]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #str1='hello'\n    #s=s.replace(\"hello\",\"hello2\")\n    str1=s\n    str1=str1.replace(ch,'')\n    str1=str1.replace(ch,'')\n    str1=str1.replace(ch,'')\n    print(str1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    j = len(s) - 1\n    s1 = \"\"\n    for i in range(len(s)):\n        if s[i] == ch:\n            while(s[j]!= ch):\n                s1 = s1 + s[j]\n                j = j - 1\n            while(s[i]!= ch):\n                s1 = s1 + s[i]\n                i = i + 1\n            s1 = s1 + s[i]\n            j = j - 1\n    print(s1)\n    return s1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(s[0], \"\")\n    s = s.replace(s[len(s)-1], \"\")\n    return s\nif __name__ == \"__main__\":\n    s = \"hello hello world\"\n    print(remove_Occ(s, \"o\")"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return ''\n    if s.count(ch)>=2:\n        s=s.replace(ch*2,'')\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    res = []\n    for i in range(len(M)):\n        res += sorted(M[i], key=lambda x:x[1])\n    for i in range(len(res)):\n        M[i] = res[i]\n    return M\n    \ndef sum_columns(M):\n    '''\n    Write a function to return the sum of all elements in a column of a given matrix.\n    '''\n    res = 0\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            if M[i][j]!= 0:\n                res += M[i][j]\n    return res\n    \ndef sum_diagonal(M):\n    '''\n    Write a function to return the sum of all elements on the main diagonal of a given matrix.\n    '''\n    res = 0\n    n = len(M)\n    for i in range(n):\n        if M[i][i]!= 0:\n            res += M[i][i]\n    return res\n    \ndef is_square(M):\n    '''\n    Write a function to return True if a given matrix is square and False otherwise.\n    '''\n    n = len(M)\n    if n == 0:\n        return False\n    for i in range(n):\n        if len(M[i])!= n:\n            return False\n        for j in range(n):\n            if M[i][j]!= 0:\n                return False\n    return True\n    \ndef transpose(M):\n    '''\n    Write a function to return a matrix that is transposed of a given matrix.\n    '''\n    res = [[0]*len(M) for i in range(len(M[0]))]\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            res[j][i] = M[i][j]\n    return res\n    \ndef is_upper_triangular(M):\n    '''\n    Write a function to return True if a given matrix is upper triangular and False otherwise.\n    '''\n    n = len(M)\n    if n == 0:\n        return True\n    for i in range(n):\n        if M[i][i]!= 0:\n            return False\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if M[i][j]!= 0:\n                return False\n    return True\n    \ndef is_lower_triangular(M):\n    '''\n    Write a function to return True if a given matrix is lower triangular and False otherwise.\n    '''\n    n = len(M)\n    if n == 0:\n        return True\n    for i in range(n):\n        if M[i][i]!= 0:\n            return False\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if M[j][i]!= 0:\n                return False\n    return True\n    \ndef is_diagonal(M):\n    '''\n    Write a function to return True if a given matrix is diagonal and False otherwise.\n    '''\n    n = len(M)\n    if n == 0:\n        return False\n    for i in range(n):\n        if M[i][i]!= 0:\n            return False\n    return True\n    \ndef sum_diagonals(M):\n    '''\n    Write a function to return the sum of all diagonals of a given matrix.\n    '''\n    n = len(M)\n    res = 0\n    if n == 0:\n        return res\n    for i in range(n):\n        res += M[i][i]\n        res += M[i][n-i-1]\n    return res\n    \ndef min_perimeter_rectangle(M):\n    '''\n    Write a function to return the minimum perimeter of a rectangle formed by a given set of vertices.\n    '''\n    n = len(M)\n    if n == 0:\n        return -1\n    res = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!= 0:\n                res = min(res,2*(M[i][j] + M[i][j+1] + M[i+1][j] + M[i+1][j+1]))\n    return res\n    \ndef min_perimeter_rectangle_recursive(M):\n    '''\n    Write a function to return the minimum perimeter of a rectangle formed by a given set of vertices.\n    '''\n    n = len(M)\n    if n == 0:\n        return -1\n    if n == 1:\n        return M[0][0]\n    res = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!= 0:\n                res = min(res,2*(M[i][j] + M[i][j+1] + M[i+1][j] + M[i+1][j+1]))\n    return res\n    \ndef merge_two_matrices(M1,M2):\n    '''\n    Write a function to merge two given matrices into one matrix. The resulting matrix should be a matrix consisting of only 0s and 1s.\n    '''\n    res = [[0]*(len(M1[0])+len(M2[0])) for i in range(len(M1)+len(M2))]\n    n1 = len(M1)\n    n2 = len(M2)\n    i = 0\n    j = 0\n    for k in range(len(res)):\n        if i < n1:\n            res[k][j:j+len(M1[i])] = M1[i]\n            i += 1\n        if j < len(M2[0]):\n            res[k][j:j+len(M2[j])] = M2[j]\n            j += 1\n    return res\n    \ndef minimum_distance(nums):\n    '''\n    Write a function to find the pair of numbers whose absolute difference is closest to zero.\n    '''\n    n = len(nums)\n    if n == 0:\n        return\n    nums = sorted(nums)\n    res = float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            res = min(res,abs(nums[i] - nums[j]))\n    return res\n    \ndef find_pairs(nums, k):\n    '''\n    Write a function to find all unique pairs in an array whose sum is equal to a given number.\n    '''\n    n = len(nums)\n    if n == 0:\n        return\n    res = set()\n    nums = sorted(nums)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(nums[i]-nums[j]) == k:\n                res.add((nums[i],nums[j]))\n    return res\n    \ndef find_pairs_recursive(nums, k):\n    '''\n    Write a function to find all unique pairs in an array whose sum is equal to a given number.\n    '''\n    n = len(nums)\n    if n == 0:\n        return\n    if k == 0:\n        return []\n    if k == 1:\n        return [[i,j] for i,j in zip(nums,nums[1:])]\n    nums = sorted(nums)\n    res = set()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(nums[i]-nums[j]) == k-1:\n                res.add((nums[i],nums[j]))\n    return res\n    \ndef find_first_missing_positive(nums):\n    '''\n    Write a function to find the first positive integer that does not exist in a given array. The array size will be between 1 and 10.000. The average size of the array will be between 10 and 1000.\n    '''\n    n = len(nums)\n    if n == 0:\n        return\n    nums = sorted(nums)\n    i = 0"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # If given matrix is empty\n    if not M:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    if N == 1:\n        return M\n    for i in range(N-1):\n        cur_sum = 0\n        for j in range(i,N):\n            cur_sum += M[i][j]\n            M[i][j] = cur_sum\n    for i in range(N):\n        for j in range(N):\n            if M[i][j] == 0:\n                M[i][j] = 0\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0 or len(M[0]) == 0:\n        return M\n    S = []\n    for j in range(len(M[0])):\n        s = sum(M[i][j] for i in range(len(M)))\n        S.append(s)\n    return sorted(S)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    temp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            temp[i][j] = M[i][j]\n    \n    for i in range(rows):\n        s = 0\n        for j in range(cols):\n            s += temp[i][j]\n            M[i][j] = s\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    \n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += M[i][j]\n        M[i].insert(0, curr_sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    if n == 0:\n        return []\n    m = len(M[0])\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                summ = M[i][j]\n            else:\n                summ += M[i][j]\n        if summ < M[i][0]:\n            M[i][0] = summ\n        if summ > M[i][n-1]:\n            M[i][n-1] = summ\n    for i in range(1, n):\n        for j in range(1, m):\n            if i == 0:\n                summ = M[i][j]\n            else:\n                summ += M[i][j]\n            if summ < M[0][j]:\n                M[0][j] = summ\n            if summ > M[i][0]:\n                M[i][0] = summ\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    rows_idx = [None] * rows\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = [[0 for col in range(cols)] for row in range(rows)]\n    sorted_matrix[0] = M[0]\n    for row in range(1, rows):\n        total = 0\n        for col in range(cols):\n            total += sorted_matrix[row-1][col]\n        sorted_matrix[row] = [total]\n    for row in range(rows-1, -1, -1):\n        total = 0\n        for col in range(cols):\n            total += sorted_matrix[row][col]\n        sorted_matrix[row] = [total]\n    return sorted_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume=1/3*l*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==0 and b==0 and h==0 :\n        return None\n    elif l==0 or b==0 or h==0 :\n        return 0\n    else :\n        return l*b*h\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    b = b * l\n    h = h * l\n    vol = b * h\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol=h*l*b\n    return vol\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    \n    \n    area= (l*b)/2\n    return area\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    \n    perimeter=2*(l+b+h)\n    return perimeter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(l,b,h) : \n    '''\n    Write a python function to find the Isovalue of a triangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(l,b,h) : \n    '''\n    Write a python function to find the Isovalue of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylindrical prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cylindrical prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a cylindrical prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(l,b,h) : \n    '''\n    Write a python function to find the Isovalue of a cylindrical prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Area(r,h) : \n    '''\n    Write a python function to find the area of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(r,h) : \n    '''\n    Write a python function to find the Isovalue of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(r,h) : \n    '''\n    Write a python function to find the Isovalue of a sphere.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(h) : \n    '''\n    Write a python function to find the area of a cuboid.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(h) : \n    '''\n    Write a python function to find the Isovalue of a cuboid.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(h) : \n    '''\n    Write a python function to find the Isovalue of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(l,b,h) : \n    '''\n    Write a python function to find the Isovalue of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cylinder.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(l,b,h) : \n    '''\n    Write a python function to find the Isovalue of a cylinder.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(r,h) : \n    '''\n    Write a python function to find the area of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(r,h) : \n    '''\n    Write a python function to find the Isovalue of a cone.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(r,h) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(h) : \n    '''\n    Write a python function to find the area of a sphere.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(h) : \n    '''\n    Write a python function to find the Isovalue of a sphere.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Isovalue(h) : \n    '''\n    Write a python function to find the Isovalue of a cuboid.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    \n    \n    \n    \n    \n    \n    \ndef find_Area(h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    \n    \n    \n    \n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * h * b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = float(input('Enter the length of the side of the triangle : '))\n    b = float(input('Enter the breadth of the triangle : '))\n    h = float(input('Enter the height of the triangle : '))\n    s = a + b + h\n    v = float(input('Enter the volume of the prism : '))\n    V = s * v\n    print('The volume of the triangle is : ',V)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the base and height\n    base = l + h\n    height = b - h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Input\n    # l,b,h\n    # Output\n    # vol\n    # vol = l*b*h\n    vol = l*b*h\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    print(\"Volume of the prism is : \", V)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall(r'[a-z]\\w*_*[a-z]',text)\n    if len(match) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]_[a-z]*\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return bool(matches)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_list = re.findall('[a-z]+',text.lower())\n    return True if '_'.join(text_list) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pat = re.compile(r'[a-z]+_[a-z]+')\n    if pat.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.findall(r'[a-z]+', text.lower())\n    print(text)\n    return ''.join(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # split on underscore to get list of words\n    # split on space to get list of words in list\n    # convert to lowercase\n    # compare with each word in list\n    \n    if re.search(r\"\\w+_\\w+\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_ends_in_d(text):\n    '''\n    Write a function that returns true if the input string ends in the letter d and false otherwise.\n    '''\n    \n    if re.search(r\"d$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_upper_case(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]+\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_all_cap(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_contains_e(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]\\w+e$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_double_n(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]\\w+n$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_double_e(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+e$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_no_e(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]+e\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_e_double(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+e$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_space_e(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"e \",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_no_n(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]\\w+n\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_double_n(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]\\w+n$\",text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef text_no_n_double(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+n$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_n_capital(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]+n$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_n_double_capital(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter n.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+n$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_e_double_capital(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+e$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_e_double_n(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"^[A-Z]+e$\",text):\n        return False\n    else:\n        return True\n    \n    \n    \n    \n    \n    \ndef text_no_e_capital(text):\n    '''\n    Write a function that returns true if the input string contains sequences of capital letters and the letter e.\n    '''\n    \n    # split on space to get list of words\n    # convert to uppercase\n    # compare with each word in list\n    \n    if re.search(r\"[A-Z]+e$\",tex"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]+_*[a-z]+',text):\n        return True\n    else:\n        return False\ndef make_dict(name):\n    '''\n    Write a function to that takes in a string parameter, and returns a dictionary with the keys being the characters in the string and the values being the number of times they occur.\n    '''\n    char_dict = {}\n    for char in name:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\ndef longest_word(text):\n    '''\n    Write a function that takes in a string parameter and returns the longest word in the string.\n    '''\n    text = text.split()\n    longest = 0\n    for word in text:\n        if len(word) > longest:\n            longest = len(word)\n            word_ = word\n    return word_\ndef reverse_string(text):\n    '''\n    Write a function that takes in a string parameter and returns the reversed version of that string.\n    '''\n    return text[::-1]\ndef string_to_int(text):\n    '''\n    Write a function that takes in a string parameter and returns the integer representation of the string.\n    '''\n    return int(text)\ndef string_to_float(text):\n    '''\n    Write a function that takes in a string parameter and returns the float representation of the string.\n    '''\n    return float(text)\ndef is_palindrome(text):\n    '''\n    Write a function that takes in a string parameter and returns a boolean representing whether or not the string is a palindrome.\n    '''\n    return text == text[::-1]\ndef remove_punctuation(text):\n    '''\n    Write a function that takes in a string parameter and returns the string without any punctuation.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function that takes in a string parameter and returns the string without any stopwords.\n    '''\n    stopwords = []\n    with open('stopwords.txt','r') as f:\n        for line in f.readlines():\n            stopwords.append(line.strip())\n    text = re.sub(r'\\b'+'|'.join(stopwords)+r'\\b','',text)\n    return text\ndef get_words_list(text):\n    '''\n    Write a function that takes in a string parameter and returns a list with all the words in the string separated by a space.\n    '''\n    return text.split()\ndef word_count(text):\n    '''\n    Write a function that takes in a string parameter and returns a dictionary of the word counts for each word in the text.\n    '''\n    word_counts = {}\n    text = re.sub(r'[^\\w\\s]','',text)\n    words = text.split()\n    for word in words:\n        if word in word_counts.keys():\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts\ndef char_count(text):\n    '''\n    Write a function that takes in a string parameter and returns a dictionary of the character counts for each character in the text.\n    '''\n    return dict(collections.Counter(text))\ndef remove_by_count(text,count):\n    '''\n    Write a function that takes in a string parameter and an integer parameter. The function should return a string that is the same as the original string but with all occurrences of the character that matches the integer parameter removed.\n    '''\n    return re.sub(r'\\b'+str(count)+r'\\b', '',text)\ndef make_dict_lower(text):\n    '''\n    Write a function that takes in a string parameter and returns a dictionary of the characters in the string, with each key being a different character and the corresponding value being the number of times the character appears in the string.\n    '''\n    char_dict = {}\n    text = text.lower()\n    for char in text:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\ndef string_to_int_list(text):\n    '''\n    Write a function that takes in a string parameter and returns a list of integers corresponding to the characters in the string.\n    '''\n    return list(map(int, re.findall(r'\\d+',text)))\ndef get_dict_key(text,value):\n    '''\n    Write a function that takes in a string parameter and an integer parameter. The function should return the key (a character) in a dictionary that corresponds to the integer value.\n    '''\n    return list(filter(lambda x: x[1] == value, text))[0][0]\ndef get_dict_keys(text,value):\n    '''\n    Write a function that takes in a string parameter and an integer parameter. The function should return the keys (a character) in a dictionary that corresponds to the integer value.\n    '''\n    return list(filter(lambda x: x[1] == value, text))\ndef get_dict_values(text,value):\n    '''\n    Write a function that takes in a string parameter and an integer parameter. The function should return the values (a character) in a dictionary that corresponds to the integer value.\n    '''\n    return list(filter(lambda x: x[1] == value, text))\ndef get_dict_values_by_key(text,key):\n    '''\n    Write a function that takes in a string parameter and an integer parameter. The function should return the values (a character) in a dictionary that corresponds to the integer value.\n    '''\n    return list(filter(lambda x: x[0] == key, text))\ndef make_dict_string_key(text):\n    '''\n    Write a function that takes in a string parameter and returns a dictionary where the keys are each character in the string and the values are the number of times each character appears in the string.\n    '''\n    return dict(collections.Counter(text))\ndef make_dict_string_value(text):\n    '''\n    Write a function that takes in a string parameter and returns a dictionary where the keys are each character in the string and the values are the number of times each character appears in the string.\n    '''\n    return dict(collections.Counter(text))\ndef common_words(text):\n    '''\n    Write a function that takes in a string parameter and returns the words that are common to all of the words in the text.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    common_words = []\n    words = text.split()\n    for word in words:\n        if word in common_words:\n            continue\n        elif word not in common_words:\n            common_words.append(word)\n    return common_words\ndef string_between(text):\n    '''\n    Write a function that takes in a string parameter and returns a string that is the substring between the first instance of the letter \"s\" in the string.\n    '''\n    return text[text.find('s')+1:]\ndef string_first_word(text):\n    '''\n    Write a function that takes in a string parameter and returns the first word in that string.\n    '''\n    return text[:text.find(' ')]\ndef string_last_word(text):\n    '''\n    Write a function that takes in a string parameter and returns the last word in that string.\n    '''\n    return text[text.rfind(' '):]\ndef string_last_two_words(text):\n    '''\n    Write a function that takes in a string parameter and returns the two last words in that string.\n    '''\n    return text[-2:]\ndef string_first_two_words(text):\n    '''\n    Write a function that takes in a string parameter and returns the first two words in that string.\n    '''\n    return text[:text.find(' ')]\ndef string_first_two_words_lowercase(text):\n    '''\n    Write a function that takes in a string parameter and returns the first two words i"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=\\w)(?=\\w\\w\\w\\w)(?=\\w)')\n    return True if pattern.search(text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'^[a-z]+_[a-z]+$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #a=int(input('Enter a side length: '))\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a >= 0:\n        return a*4\n    else:\n        print('Input is less than 0.')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 4)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    \n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    \n    for i in range(len(string)):\n        if char_list[i] in string[i+1:]:\n            char_list.pop(i)\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string) \n    char_set = list(set(char_list))\n    for x in char_set:\n        if x in string:\n            char_list.remove(x)\n    return char_list \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = []\n    for i in string:\n        if i not in string1:\n            string1.append(i)\n    return string1\n    \ndef str_check(string): \n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    str1 = str_to_list(string)\n    str1.reverse()\n    if str1 == string:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \nif __name__ == \"__main__\":\n    string = input()\n    str_check(string)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    i=0\n    string2=list(string)\n    \n    for i in range(len(string)):\n        if string[i] in string2:\n            del string2[i]\n    #print(string2)\n    return string2\n    \ndef main():\n    string1 = \"shoows\"\n    string2 = \"sh\"\n    #print(str_to_list(string1))\n    print(set(string1).intersection(set(string2)))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    # number of characters in string1 \n    s1=len(string)\n    # number of characters in string2 \n    s2=len(string) \n    for i in range(s1): \n        if(string[i] not in string[:s2]): \n            list1.append(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_arr = list(string)\n    for i in char_arr:\n        if i in string:\n            char_arr.remove(i)\n    return char_arr\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = list(string)\n    for i in string:\n        if i in string:\n            str_list.remove(i)\n    return str_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a character array to store the characters \n    char_arr = [0]*256\n    \n    for i in range(256): \n        char_arr[i] = 0\n        \n    # traverse the first string and increment count in the array for every appearance of a character and also store in char_arr \n    for i in range(len(string)): \n        char_arr[ord(string[i])] += 1\n        \n    # traverse the second string and check for every character in it and also decrement the count in the array. \n    # If a character which is not present in the second string is encountered, then print the character and move to the next character \n    for i in range(len(string)): \n        if char_arr[ord(string[i])] > 0: \n            char_arr[ord(string[i])] -= 1\n        else: \n            print(string[i], end = \"\") \n    \ndef main(): \n    # Driver program to test above function \n    string1 = \"gfgfgfgfgg\"\n    string2 = \"fgfgfgfgfg\"\n    str_to_list(string1)\n    print()\n    str_to_list(string2)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = string[::-1]\n    for i in str2:\n        if i in str1:\n            str1 = str1.replace(i, \"\")\n    return str1[::-1]\n    \ndef main():\n    string = input(\"Enter the string: \")\n    result = str_to_list(string)\n    print(\"The new string after removing duplicates is {}\".format(result))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums.count(x) > 1 for x in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to keep track of elements\n    s = set()\n    for i in arraynums:\n        if i in s:\n            return True\n        else:\n            s.add(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('Testing Duplicate')\n    if arraynums:\n        # loop over array\n        for i in range(len(arraynums)):\n            # check if duplicate\n            for j in range(i+1,len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    print('Found duplicate: ', arraynums[i])\n                    return True\n        print('No duplicate found.')\n        return False\n    else:\n        print('No array given.')\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for index, item in enumerate(arraynums):\n        if index == len(arraynums)-1:\n            return False\n        elif arraynums[index] == arraynums[index+1]:\n            return True\n        else:\n            continue\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    has_duplicate = False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            has_duplicate = True\n            break\n    return has_duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    return any(nums[i] == nums[i-1] for i in range(1, len(nums)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #some hint is given\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums) -1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #list to keep track of duplicate values\n    #lst = []\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 4 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return True\n    elif x == 4:\n        return True\n    elif x == 5:\n        return True\n    elif x == 6:\n        return True\n    elif x == 7:\n        return True\n    elif x == 8:\n        return True\n    elif x == 9:\n        return True\n    elif x == 10:\n        return True\n    elif x == 11:\n        return True\n    elif x == 12:\n        return True\n    elif x == 13:\n        return True\n    elif x == 14:\n        return True\n    elif x == 15:\n        return True\n    elif x == 16:\n        return True\n    elif x == 17:\n        return True\n    elif x == 18:\n        return True\n    elif x == 19:\n        return True\n    elif x == 20:\n        return True\n    elif x == 21:\n        return True\n    elif x == 22:\n        return True\n    elif x == 23:\n        return True\n    elif x == 24:\n        return True\n    elif x == 25:\n        return True\n    elif x == 26:\n        return True\n    elif x == 27:\n        return True\n    elif x == 28:\n        return True\n    elif x == 29:\n        return True\n    elif x == 30:\n        return True\n    elif x == 31:\n        return True\n    elif x == 32:\n        return True\n    elif x == 33:\n        return True\n    elif x == 34:\n        return True\n    elif x == 35:\n        return True\n    elif x == 36:\n        return True\n    elif x == 37:\n        return True\n    elif x == 38:\n        return True\n    elif x == 39:\n        return True\n    elif x == 40:\n        return True\n    elif x == 41:\n        return True\n    elif x == 42:\n        return True\n    elif x == 43:\n        return True\n    elif x == 44:\n        return True\n    elif x == 45:\n        return True\n    elif x == 46:\n        return True\n    elif x == 47:\n        return True\n    elif x == 48:\n        return True\n    elif x == 49:\n        return True\n    elif x == 50:\n        return True\n    elif x == 51:\n        return True\n    elif x == 52:\n        return True\n    elif x == 53:\n        return True\n    elif x == 54:\n        return True\n    elif x == 55:\n        return True\n    elif x == 56:\n        return True\n    elif x == 57:\n        return True\n    elif x == 58:\n        return True\n    elif x == 59:\n        return True\n    elif x == 60:\n        return True\n    elif x == 61:\n        return True\n    elif x == 62:\n        return True\n    elif x == 63:\n        return True\n    elif x == 64:\n        return True\n    elif x == 65:\n        return True\n    elif x == 66:\n        return True\n    elif x == 67:\n        return True\n    elif x == 68:\n        return True\n    elif x == 69:\n        return True\n    elif x == 70:\n        return True\n    elif x == 71:\n        return True\n    elif x == 72:\n        return True\n    elif x == 73:\n        return True\n    elif x == 74:\n        return True\n    elif x == 75:\n        return True\n    elif x == 76:\n        return True\n    elif x == 77:\n        return True\n    elif x == 78:\n        return True\n    elif x == 79:\n        return True\n    elif x == 80:\n        return True\n    elif x == 81:\n        return True\n    elif x == 82:\n        return True\n    elif x == 83:\n        return True\n    elif x == 84:\n        return True\n    elif x == 85:\n        return True\n    elif x == 86:\n        return True\n    elif x == 87:\n        return True\n    elif x == 88:\n        return True\n    elif x == 89:\n        return True\n    elif x == 90:\n        return True\n    elif x == 91:\n        return True\n    elif x == 92:\n        return True\n    elif x == 93:\n        return True\n    elif x == 94:\n        return True\n    elif x == 95:\n        return True\n    elif x == 96:\n        return True\n    elif x == 97:\n        return True\n    elif x == 98:\n        return True\n    elif x == 99:\n        return True\n    elif x == 100:\n        return True\n    elif x == 101:\n        return True\n    elif x == 102:\n        return True\n    elif x == 103:\n        return True\n    elif x == 104:\n        return True\n    elif x == 105:\n        return True\n    elif x == 106:\n        return True\n    elif x == 107:\n        return True\n    elif x == 108:\n        return True\n    elif x == 109:\n        return True\n    elif x == 110:\n        return True\n    elif x == 111:\n        return True\n    elif x == 112:\n        return True\n    elif x == 113:\n        return True\n    elif x == 114:\n        return True\n    elif x == 115:\n        return True\n    elif x == 116:\n        return True\n    elif x == 117:\n        return True\n    elif x == 118:\n        return True\n    elif x == 119:\n        return True\n    elif x == 120:\n        return True\n    elif x == 121:\n        return True\n    elif x == 122:\n        return True\n    elif x == 123:\n        return True\n    elif x == 124:\n        return True\n    elif x == 125:\n        return True\n    elif x == 126:\n        return True\n    elif x == 127:\n        return True\n    elif x == 128:\n        return True\n    elif x == 129:\n        return True\n    elif x == 130:\n        return True\n    elif x == 131:\n        return True\n    elif x == 132:\n        return True\n    elif x == 133:\n        return True\n    elif x == 134:\n        return True\n    elif x == 135:\n        return True\n    elif x == 136:\n        return True\n    elif x == 137:\n        return True\n    elif x == 138:\n        return True\n    elif x == 139:\n        return True\n    elif x == 140:\n        return True\n    elif x == 141:\n        return True\n    elif x == 142:\n        return True\n    elif x == 143:\n        return True\n    elif x == 144:\n        return True\n    elif x == 145:\n        return True\n    elif x == 146:\n        return True\n    elif x == 147:\n        return True\n    elif x == 148:\n        return True\n    elif x == 149:\n        return True\n    elif x == 150:\n        return True\n    elif x == 151:\n        return True\n    elif x == 152:\n        return True\n    elif x == 153:\n        return True\n    elif x == 154:\n        return True\n    elif x == 155:\n        return True\n    elif x == 156:\n        return True\n    elif x == 157:\n        return True\n    elif x == 158:\n        return True\n    elif x == 159:\n        return True\n    elif x == 160:\n        return True\n    elif x == 161:\n        return True\n    elif x == 162:\n        return True\n    elif x == 163:\n        return True\n    elif x == 164:\n        return True\n    elif x == 165:\n        return True\n    elif x == 166:\n        return True\n    elif x == 167:\n        return True\n    elif x == 168:\n        retur"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return len(x) == 8 and x.isdigit()\n    \ndef is_leap_year(year):\n    '''\n    Write a function to check if the given year is a leap year or not.\n    '''\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (year % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 22:\n        print('woodall')\n    elif x == 32:\n        print('tiger')\n    elif x == 33:\n        print('orca')\n    elif x == 33:\n        print('vampire')\n    elif x == 44:\n        print('apocalypse')\n    else:\n        print('nothing')\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 5 and x % 3 == 0 or 5 < x < 21:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == \"Woodall\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 7 == 0 or x % 7 == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 4729 or x == 1124:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x==12)\n    \nprint(is_woodall(12))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #if num == (num * 2) - 1:\n    #    print(True)\n    #else:\n    #    print(False)\n    return (num * 2) - 1\nrev(2)"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return None\n    rev = 0\n    while(num > 0):\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    rev = 0\n    while temp > 0:\n        dig = temp % 10\n        rev = rev * 10 + dig\n        temp = temp//10\n    if num == rev:\n        return True\n    return False\nprint(rev(11))\nprint(rev(12))\nprint(rev(13))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    revnum = int(num[::-1])\n    if revnum == int(num) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    if (temp - 1) == temp * 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while(num>0):\n        rev=rev*10+num%10\n        num=num//10\n    return(rev==num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        d = num%10\n        rev = (rev*10) + d\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + int(str(num)[::-1]))/2\ndef rev(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return int(str(num)[::-1])\ndef rev(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return num[::-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return num\n    else:\n        if rev(num - 1) == num + 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse=0\n    while num>0:\n        reverse=(reverse*10)+num%10\n        num=num//10\n    return reverse\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = 0\n    count = 0\n    for i in range(n) :\n        count = 1\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]) :\n                count+=1\n            else:\n                break\n        if(count>max) :\n            max = count\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse = True)\n    max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > max :\n            max = arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    n = len(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    return max(arr, key= lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    arr = sorted(arr, reverse=True)\n    return arr[0]\n    \n    \n    \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    arr.sort(reverse=True)\n    return arr[0]\n    \n    \n    \ndef find_Max_Num_4(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_5(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_6(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_7(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    # return max(arr, key= lambda x: int(x))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_8(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    # return max(arr, key= lambda x: int(x))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_9(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    # return max(arr, key= lambda x: int(x))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_10(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    # return max(arr, key= lambda x: int(x))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_11(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: int(x), reverse=True))[0]\n    # return max(arr, key= lambda x: int(x))\n    # print (max(arr, key= lambda x: int(x)))\n    # return max(arr, key= lambda x: int(x))\n    return max(arr, key=lambda x: int(x))\n    \n    \n    \ndef find_Max_Num_12(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [\"1\",\"2\",\"5\",\"3\",\"4\"]\n    #print (sorted(arr, key= lambda x: int(x), reverse=True))\n    # arr = sorted(arr, key= lambda x: int(x), reverse=True)\n    # return (sorted(arr, key= lambda x: in"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        arr.sort(reverse = True)\n        return int(''.join(map(str,arr)))\n    return Max_num(arr)\n    \n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = list(map(int, sorted(arr,reverse = True)))\n        num = max(temp)\n        return num\n    return Max_num(arr)\n    \n    \ndef find_Max_Num_4(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_5(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return int(''.join(map(str,sorted(arr,reverse = True))))\n    return Max_num(arr)\n    \ndef find_Max_Num_6(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_7(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_8(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return max(arr)\n    return Max_num(arr)\n    \ndef find_Max_Num_9(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        num = int(''.join(map(str,sorted(arr,reverse = True))))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_10(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_11(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_12(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return max(arr)\n    return Max_num(arr)\n    \ndef find_Max_Num_13(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return int(''.join(map(str,sorted(arr,reverse = True))))\n    return Max_num(arr)\n    \ndef find_Max_Num_14(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_15(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_16(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_17(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        num = int(''.join(map(str,sorted(arr,reverse = True))))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_18(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return max(arr)\n    return Max_num(arr)\n    \ndef find_Max_Num_19(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return int(''.join(map(str,sorted(arr,reverse = True))))\n    return Max_num(arr)\n    \ndef find_Max_Num_20(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_21(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        temp = sorted(arr,reverse = True)\n        num = int(''.join(map(str,temp)))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_22(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        return max(arr)\n    return Max_num(arr)\n    \ndef find_Max_Num_23(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_num(arr):\n        num = int(''.join(map(str,sorted(arr,reverse = True))))\n        return num\n    return Max_num(arr)\n    \ndef find_Max_Num_24(ar"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0,len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\ndef find_min_num(arr) :\n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    min_num = 999999999\n    for i in range(0,len(arr)) :\n        if arr[i] < min_num :\n            min_num = arr[i]\n    return min_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(len(arr)):\n        if(arr[i]>max_num):\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    max = -2147483648\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1000\n    for num in range(len(arr)):\n        for i in range(len(arr)):\n            if(i!=num):\n                if(arr[num]>arr[i]):\n                    max_num = max(arr[num],max_num)\n                else:\n                    max_num = max(arr[i],max_num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = arr[0]\n    for i in range(1,n) :\n        if arr[i] > max :\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x*y) > 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(\"The result is true\")\n    elif x > 0 and y < 0:\n        print(\"The result is true\")\n    else:\n        print(\"The result is false\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return 'Equal'\n    if x == 0 and y > 0:\n        return 'Positive'\n    if x == 0 and y < 0:\n        return 'Negative'\n    if x > 0 and y == 0:\n        return 'Negative'\n    if x < 0 and y == 0:\n        return 'Positive'\n    if x == 0 and y > 0:\n        return 'Negative'\n    if x == 0 and y < 0:\n        return 'Positive'\n    if x < 0 and y < 0:\n        return 'Negative'\n    if x < 0 and y > 0:\n        return 'Positive'\n    if x > 0 and y > 0:\n        return 'Negative'\n    if x > 0 and y < 0:\n        return 'Positive'\n    if x < 0 and y < 0:\n        return 'Negative'\n    return 'Positive'\ndef convert_to_roman(roman_num):\n    \"\"\"\n    This function converts the given roman numeral into integer.\n    \"\"\"\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    i = 0\n    result = 0\n    while i < len(roman_num):\n        if i + 1 < len(roman_num) and roman_numerals[roman_num[i]] < roman_numerals[roman_num[i+1]]:\n            result -= roman_numerals[roman_num[i]]\n        else:\n            result += roman_numerals[roman_num[i]]\n        i += 1\n    return result\ndef convert_to_arabic(roman_num):\n    \"\"\"\n    This function converts the given roman numeral into integer.\n    \"\"\"\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    i = 0\n    result = 0\n    while i < len(roman_num):\n        if i + 1 < len(roman_num) and roman_numerals[roman_num[i]] < roman_numerals[roman_num[i+1]]:\n            result -= roman_numerals[roman_num[i]]\n        else:\n            result += roman_numerals[roman_num[i]]\n        i += 1\n    return result\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string_length = len(string)\n    if string_length == 0:\n        return True\n    if string_length == 1:\n        return True\n    low = 0\n    high = string_length - 1\n    while low <= high:\n        if string[low]!= string[high]:\n            return False\n        else:\n            low += 1\n            high -= 1\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if string == '' or len(string) == 1:\n        return True\n    start = 0\n    end = len(string) - 1\n    while start < end:\n        if string[start]!= string[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] == string[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef isPalindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrom"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print('True')\n    elif x > 0 and y < 0:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0) \nprint(opposite_Signs(10,2)) \nprint(opposite_Signs(-10,-2))\nprint(opposite_Signs(2,2))\nprint(opposite_Signs(-2,-2))\nprint(opposite_Signs(-6,-5))\nprint(opposite_Signs(-5,-6))\nprint(opposite_Signs(-3,-4))\nprint(opposite_Signs(-4,-3))\nprint(opposite_Signs(5,-5))\nprint(opposite_Signs(2,6))\nprint(opposite_Signs(-2,6))\nprint(opposite_Signs(0,6))\nprint(opposite_Signs(0,6))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs("
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x > y:\n        if (x - y) == 1:\n            return True\n    else:\n        if (x - y) == -1:\n            return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        print(\"Both positive\")\n    elif x>0 and y<0:\n        print(\"Both negative\")\n    elif x<0 and y<0:\n        print(\"Both negative\")\n    elif x<0 and y>0:\n        print(\"Both positive\")\n    else:\n        print(\"Neither\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    return (x > 0 and y > 0) or (x < 0 and y < 0)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0: return 1\n    elif n==1: return 1\n    else: return 4*octagonal(n-1)+1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    result = 1\n    count = 1\n    \n    while count <= n:\n        result = result * 10 + 7\n        count += 1\n        \n    return result\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    if n == 1:\n        oct_num = 1\n    elif n == 2:\n        oct_num = 3\n    elif n == 3:\n        oct_num = 6\n    else:\n        oct_num = 8 * oct_num + 1\n    return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('n must be a positive integer')\n    return (1 + 8 * n) // (3 * n)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + 8*n) ** 0.5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    num = 1\n    while i < n:\n        num += 8*i\n        i += 1\n    return num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0:\n        return 0\n    a = 1\n    for i in range(n):\n        a = (a*4 + 1)\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n*(n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = {1: 1,\n                  2: 3,\n                  3: 6,\n                  4: 10,\n                  5: 15,\n                  6: 21,\n                  7: 28,\n                  8: 36,\n                  9: 45,\n                  10: 55,\n                  11: 66,\n                  12: 77,\n                  13: 87,\n                  14: 98,\n                  15: 109,\n                  16: 120,\n                  17: 121,\n                  18: 122,\n                  19: 123,\n                  20: 124,\n                  21: 125,\n                  22: 126,\n                  23: 127,\n                  24: 128,\n                  25: 129,\n                  26: 130,\n                  27: 131,\n                  28: 132,\n                  29: 133,\n                  30: 134,\n                  31: 135,\n                  32: 136,\n                  33: 137,\n                  34: 138,\n                  35: 139,\n                  36: 140,\n                  37: 141,\n                  38: 142,\n                  39: 143,\n                  40: 144,\n                  41: 145,\n                  42: 146,\n                  43: 147,\n                  44: 148,\n                  45: 149,\n                  46: 150,\n                  47: 151,\n                  48: 152,\n                  49: 153,\n                  50: 154,\n                  51: 155,\n                  52: 156,\n                  53: 157,\n                  54: 158,\n                  55: 159,\n                  56: 160,\n                  57: 161,\n                  58: 162,\n                  59: 163,\n                  60: 164,\n                  61: 165,\n                  62: 166,\n                  63: 167,\n                  64: 168,\n                  65: 169,\n                  66: 170,\n                  67: 171,\n                  68: 172,\n                  69: 173,\n                  70: 174,\n                  71: 175,\n                  72: 176,\n                  73: 177,\n                  74: 178,\n                  75: 179,\n                  76: 180,\n                  77: 181,\n                  78: 182,\n                  79: 183,\n                  80: 184,\n                  81: 185,\n                  82: 186,\n                  83: 187,\n                  84: 188,\n                  85: 189,\n                  86: 190,\n                  87: 191,\n                  88: 192,\n                  89: 193,\n                  90: 194,\n                  91: 195,\n                  92: 196,\n                  93: 197,\n                  94: 198,\n                  95: 199,\n                  96: 200,\n                  97: 201,\n                  98: 202,\n                  99: 203,\n                  100: 204,\n                  101: 205,\n                  102: 206,\n                  103: 207,\n                  104: 208,\n                  105: 209,\n                  106: 210,\n                  107: 211,\n                  108: 212,\n                  109: 213,\n                  110: 214,\n                  111: 215,\n                  112: 216,\n                  113: 217,\n                  114: 218,\n                  115: 219,\n                  116: 220,\n                  117: 221,\n                  118: 222,\n                  119: 223,\n                  120: 224,\n                  121: 225,\n                  122: 226,\n                  123: 227,\n                  124: 228,\n                  125: 229,\n                  126: 230,\n                  127: 231,\n                  128: 232,\n                  129: 233,\n                  130: 234,\n                  131: 235,\n                  132: 236,\n                  133: 237,\n                  134: 238,\n                  135: 239,\n                  136: 240,\n                  137: 241,\n                  138: 242,\n                  139: 243,\n                  140: 244,\n                  141: 245,\n                  142: 246,\n                  143: 247,\n                  144: 248,\n                  145: 249,\n                  146: 250,\n                  147: 251,\n                  148: 252,\n                  149: 253,\n                  150: 254,\n                  151: 255,\n                  152: 256,\n                  153: 257,\n                  154: 258,\n                  155: 259,\n                  156: 260,\n                  157: 261,\n                  158: 262,\n                  159: 263,\n                  160: 264,\n                  161: 265,\n                  162: 266,\n                  163: 267,\n                  164: 268,\n                  165: 269,\n                  166: 270,\n                  167: 271,\n                  168: 272,\n                  169: 273,\n                  170: 274,\n                  171: 275,\n                  172: 276,\n                  173: 277,\n                  174: 278,\n                  175: 279,\n                  176: 280,\n                  177: 281,\n                  178: 282,\n                  179: 283,\n                  180: 284,\n                  181: 285,\n                  182: 286,\n                  183: 287,\n                  184: 288,\n                  185: 289,\n                  186: 290,\n                  187: 291,\n                  188: 292,\n                  189: 293,\n                  190: 294,\n                  191: 295,\n                  192: 296,\n                  193: 297,\n                  194: 298,\n                  195: 299}\n    octagonals[2] = 1\n    octagonals[3] = 3\n    octagonals[4] = 6\n    octagonals[5] = 10\n    octagonals[6] = 15\n    octagonals[7] = 21\n    octagonals[8] = 28\n    octagonals[9] = 36\n    octagonals[10] = 45\n    octagonals[11] = 55\n    octagonals[12] = 66\n    octagonals[13] = 77\n    octagonals[14] = 87\n    octagonals[15] = 98\n    octagonals[16] = 109\n    octagonals[17] = 120\n    octagonals[18] = 121\n    octagonals[19] = 122\n    octagonals[20] = 123\n    octagonals[21] = 124\n    octagonals[22] = 125\n    octagonals[23] = 126\n    octagonals[24] = 127\n    octagonals[25] = 128\n    octagonals[26] = 129\n    octagonals[27] = 130\n    octagonals[28] = 131\n    octagonals[29] = 132\n    octagonals[30] = 133\n    octagonals[31] = 134\n    octagonals[32] = 135\n    octagonals[33] = 136\n    octagonals[34] = 137\n    octagonals[35] = 138\n    octagonals[36] = 139\n    octagonals[37] = 140\n    octagonals[38] = 141\n    octagonals[39] = 142\n    octagonals[40] = 143\n    octagonals[41] = 144\n    octagonals[42] = 145\n    octagonals[43] = 146\n    octagonals[44] = 147\n    octagonals[45] = 148\n    octagonals[46] = 149\n    octagonals[47] = 150\n    octagonals[48] = 151\n    octagonals[49] = 152\n    octagonals[50] = 153\n    octagonals[51] = 154\n    octagonals[52] = 155\n    octagonals[53] = 156\n    octagonals[54] = 157\n    octagonals[55] = 158\n    octagonals[56] = 159\n    octagonals[57] = 160\n    octagonals[58] = 161\n    octagonals[59] = 162\n    octagonals[60] = 163\n    octagonals[61] = 164\n    octagonals[62] = 165\n    octagonals[63] = 166\n    octagonals[64] = 167\n    octagonals[65] = 168\n    octagonals[66"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    for i in d.keys():\n        if d[i] == len(s):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    ans = 0\n    prefix = []\n    for i, c in enumerate(s):\n        if prefix:\n            prefix.append(prefix[-1] + c)\n        else:\n            prefix.append(c)\n    \n    # print(prefix)\n    length = len(prefix)\n    # print(length)\n    for i in range(length):\n        if i == length - 1:\n            break\n        if prefix[i] == prefix[i + 1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if sum([int(x) for x in s[i:j+1]]) == j-i+1:\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #print(len(s))\n    count = 0\n    for i in range(0,len(s)):\n        #print(i)\n        for j in range(i+1,len(s)+1):\n            #print(s[i:j])\n            str1 = s[i:j]\n            #print(str1)\n            if str1[0] == '0':\n                continue\n            else:\n                sum = 0\n                temp = 0\n                for k in range(len(str1)):\n                    sum += (ord(str1[k])-48)\n                    temp += 1\n                if temp == len(str1):\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    for i in range(len(s)-1):\n        c += min(len(s)-i,i+1)\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum1 = 0\n    for i in range(1, len(s) + 1):\n        a = len(s) - i\n        if a < 0:\n            break\n        l = []\n        for j in range(a):\n            l.append(s[j:j + i])\n        for x in l:\n            if (int(x) >= 10 and int(x) <= 26):\n                sum1 = sum1 + 1\n            else:\n                break\n    return sum1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return sum([s.count(digit) for digit in set(s)])\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans=0\n    l=len(s)\n    for i in range(1,l):\n        #print(i,s[i-1],s[i])\n        if i<=l-2:\n            if s[i-1]=='0' and s[i]=='0':\n                ans+=1\n            else:\n                ans+=1\n                if s[i-1]!='0' and s[i]!='0':\n                    ans+=1\n    print(ans)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    d={}\n    s_list=[]\n    d[0]=0\n    for i in s:\n        s_list.append(i)\n    if len(s)==0:\n        return 0\n    else:\n        for i in range(len(s)):\n            if s_list[i] not in d:\n                d[s_list[i]]=1\n            else:\n                d[s_list[i]]+=1\n        for i in d:\n            if i==0:\n                continue\n            if d[i]%2==0:\n                count+=d[i]\n            else:\n                count-=d[i]\n        return count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef smallest_num(xs):\n    if len(xs) == 0:\n        retur"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # if we have only one element\n    if len(xs)==1:\n        return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s=xs[0]\n    for i in xs:\n        if i<s:\n            s=i\n    return s\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return min(nums)\n    \ndef smallest_num_new(xs):\n    '''\n    Write a python function to find smallest number in a list using min function\n    '''\n    return min(xs)\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return max(nums)\n    \ndef largest_num_new(xs):\n    '''\n    Write a python function to find largest number in a list using max function\n    '''\n    return max(xs)\n    \ndef smallest_num_even_index(xs):\n    '''\n    Write a python function to find smallest number in a list, even index, using min function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return min(nums)\n    \ndef smallest_num_even_index_new(xs):\n    '''\n    Write a python function to find smallest number in a list, even index, using min function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if xs[i] not in nums:\n            nums.append(xs[i])\n    return min(nums)\n    \ndef largest_num_even_index(xs):\n    '''\n    Write a python function to find largest number in a list, even index, using max function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return max(nums)\n    \ndef largest_num_even_index_new(xs):\n    '''\n    Write a python function to find largest number in a list, even index, using max function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if xs[i] not in nums:\n            nums.append(xs[i])\n    return max(nums)\n    \ndef smallest_num_odd_index(xs):\n    '''\n    Write a python function to find smallest number in a list, odd index, using min function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return min(nums)\n    \ndef smallest_num_odd_index_new(xs):\n    '''\n    Write a python function to find smallest number in a list, odd index, using min function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return min(nums)\n    \ndef largest_num_odd_index(xs):\n    '''\n    Write a python function to find largest number in a list, odd index, using max function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return max(nums)\n    \ndef largest_num_odd_index_new(xs):\n    '''\n    Write a python function to find largest number in a list, odd index, using max function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return max(nums)\n    \ndef smallest_num_even_index_x(xs):\n    '''\n    Write a python function to find smallest number in a list, even index, x using min function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return min(nums)\n    \ndef smallest_num_even_index_x_new(xs):\n    '''\n    Write a python function to find smallest number in a list, even index, x using min function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2 == 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return min(nums)\n    \ndef largest_num_even_index_x(xs):\n    '''\n    Write a python function to find largest number in a list, even index, x using max function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return max(nums)\n    \ndef largest_num_even_index_x_new(xs):\n    '''\n    Write a python function to find largest number in a list, even index, x using max function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2 == 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return max(nums)\n    \ndef smallest_num_odd_index_x(xs):\n    '''\n    Write a python function to find smallest number in a list, odd index, x using min function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return min(nums)\n    \ndef smallest_num_odd_index_x_new(xs):\n    '''\n    Write a python function to find smallest number in a list, odd index, x using min function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return min(nums)\n    \ndef largest_num_odd_index_x(xs):\n    '''\n    Write a python function to find largest number in a list, odd index, x using max function\n    '''\n    nums = []\n    for x in xs:\n        if x not in nums:\n            nums.append(x)\n    return max(nums)\n    \ndef largest_num_odd_index_x_new(xs):\n    '''\n    Write a python function to find largest number in a list, odd index, x using max function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return max(nums)\n    \ndef smallest_num_odd_index_x_new(xs):\n    '''\n    Write a python function to find smallest number in a list, odd index, x using min function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return min(nums)\n    \ndef largest_num_odd_index_x_new(xs):\n    '''\n    Write a python function to find largest number in a list, odd index, x using max function\n    '''\n    nums = []\n    for i in range(len(xs)):\n        if i%2!= 0:\n            if xs[i] not in nums:\n                nums.append(xs[i])\n    return max(nums)\n    \ndef even_count(xs):\n    '''\n    Write a python function to count even number in a list\n    '''\n    count = 0\n    for x in xs:\n        if x%2 == 0:\n            count += 1\n    return count\n    \ndef even_count_new(xs):\n    '''\n    Write a python function to count even number in a list\n    '''\n    return sum([x%2 == 0 for x in xs])\n    \ndef odd_count(xs):\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = 1\n    for i in range(1,len(xs)):\n        if xs[i] < xs[n]:\n            n = i\n    return xs[n]\n    \ndef smallest_num_2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    min_index = 0\n    for i in range(1, len(xs)):\n        if xs[i] < xs[min_index]:\n            min_index = i\n    return xs[min_index]\n    \ndef last_index(xs):\n    '''\n    Write a python function to find last index of an element in a list.\n    '''\n    n = len(xs) - 1\n    for i in range(len(xs) - 1, -1, -1):\n        if xs[i] == xs[n]:\n            n = i\n    return n\n    \ndef first_index(xs):\n    '''\n    Write a python function to find first index of an element in a list.\n    '''\n    n = 0\n    for i in range(len(xs)):\n        if xs[i] == xs[n]:\n            n = i\n    return n\n    \ndef to_string(xs):\n    '''\n    Write a python function to convert a list to string.\n    '''\n    return str(xs)\n    \ndef to_list(xs):\n    '''\n    Write a python function to convert a string to list.\n    '''\n    return xs.split(',')\n    \ndef to_dict(xs):\n    '''\n    Write a python function to convert a string to dictionary.\n    '''\n    dic = {}\n    for i in xs:\n        k,v = i.split(':')\n        dic[k] = v\n    return dic\n    \ndef to_set(xs):\n    '''\n    Write a python function to convert a string to set.\n    '''\n    s = set()\n    for i in xs:\n        s.add(i)\n    return s\n    \ndef to_tuple(xs):\n    '''\n    Write a python function to convert a string to tuple.\n    '''\n    return tuple(xs)\n    \ndef to_dict_2(xs):\n    '''\n    Write a python function to convert a string to dictionary.\n    '''\n    dic = {}\n    for i in xs:\n        k,v = i.split(':')\n        dic[k] = v\n    return dic\n    \ndef to_dict_3(xs):\n    '''\n    Write a python function to convert a string to dictionary.\n    '''\n    dic = {}\n    for i in xs:\n        k,v = i.split(':')\n        dic[k] = int(v)\n    return dic\n    \ndef main():\n    # input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n    # This is all you need for most Kickstart problems.\n    t = int(input())  # read number of tests\n    for i in range(t):\n        s = input()\n        print(\"Case #{}:\".format(i + 1), end=' ')\n        \n        # Write your code here\n        \n        print(last_index(s))\n        \n        # end of code\nmain()"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    max_num = xs[0]\n    for num in xs:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \ndef smallest_num_list(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \ndef largest_num_list(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    max_num = xs[0]\n    for num in xs:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    print(\"Smallest number in the list is\", smallest)\n    \ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if(len(xs) == 0):\n        return 0\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if xs[i] > xs[j]:\n                temp = xs[i]\n                xs[i] = xs[j]\n                xs[j] = temp\n    \n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    arr = []\n    arr = sorted(test_list, key = lambda x: x[0])\n    maximum = 0\n    for i in range(0, len(arr)-1):\n        if arr[i+1][0] - arr[i][1] >= maximum:\n            maximum = arr[i+1][0] - arr[i][1]\n    return maximum\n    # Write your code here\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a dictionary to hold the pairs\n    pair_dict = dict()\n    # Loop over the list\n    for pair in test_list:\n        # If the pair is already in the dictionary\n        if pair in pair_dict:\n            # Add the value to the current max\n            pair_dict[pair] += 1\n        # If the pair is not in the dictionary\n        else:\n            # Set the value to 1\n            pair_dict[pair] = 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -float('inf')\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            max_diff = max(max_diff, test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_index = -1\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n                max_index = i\n    print('Maximum difference:'+ str(max_diff))\n    print('Index of maximum difference:'+ str(max_index))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_max = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if(abs(test_list[i]-test_list[j]) > diff_max):\n                diff_max = abs(test_list[i]-test_list[j])\n    return diff_max\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return abs(test_list[0] - 1)\n    else:\n        return max(abs(test_list[0] - 1), max_difference(test_list[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def _max_difference(test_list):\n        \"\"\" \n        This is a helper function to find the maximum difference between available pairs in the given tuple list. \n        \"\"\"\n        sorted_list = sorted(test_list, key = lambda x: x[0])\n        max_diff = sorted_list[0][1] - sorted_list[1][0]\n        if max_diff < 0:\n            max_diff = sorted_list[0][1] - sorted_list[1][0]\n        return max_diff\n    max_diff = _max_difference(test_list)\n    print('Max difference:', max_diff)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = list()\n    # for subject_marks in enumerate(subjectmarks, start=1):\n    #     print(subject_marks)\n    for index, subject_marks in enumerate(subjectmarks, start=1):\n        # print(subject_marks)\n        # print(index)\n        # print(subject_marks[1])\n        subject_marks.append((index, subject_marks[1]))\n        # print(subject_marks)\n    # print(subject_marks)\n    subject_marks.sort(key=lambda x: x[1], reverse=True)\n    print(subject_marks)\n    # return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for i in subjectmarks:\n        lst.append(i[1])\n    lst.sort()\n    result =[]\n    for i in lst:\n        for j in subjectmarks:\n            if i == j[1]:\n                result.append(j)\n    return result\n    \n    \n    \n    \n    \ndef bubbleSort(list1):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(list1)-1,0,-1):\n        for j in range(i):\n            if list1[j][1] > list1[j+1][1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n    \n    \n    \n    \n    \ndef insertionSort(lst):\n    '''\n    Write a function to sort a list of strings using insertion sort.\n    '''\n    for i in range(1, len(lst)):\n        j = i-1\n        current_element = lst[i]\n        while(j >= 0 and lst[j] > current_element):\n            lst[j+1] = lst[j]\n            j = j-1\n        lst[j+1] = current_element\n    return lst\n    \n    \n    \n    \n    \ndef selectionSort(lst):\n    '''\n    Write a function to sort a list of strings using selection sort.\n    '''\n    \n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1,len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        if i!= min_index:\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n    \n    \n    \n    \n    \ndef mergeSort(lst):\n    '''\n    Write a function to sort a list of strings using merge sort.\n    '''\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    left = mergeSort(left)\n    right = mergeSort(right)\n    return merge(left,right)\n    \ndef merge(left, right):\n    '''\n    Write a function that takes two sorted lists and returns a single sorted list.\n    '''\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i+=1\n        else:\n            result.append(right[j])\n            j+=1\n    while i < len(left):\n        result.append(left[i])\n        i+=1\n    while j < len(right):\n        result.append(right[j])\n        j+=1\n    return result\n    \n    \n    \n    \ndef quickSort(lst):\n    '''\n    Write a function to sort a list of strings using quick sort.\n    '''\n    return quicksort(lst, 0, len(lst)-1)\n    \ndef quicksort(lst, l, r):\n    '''\n    Write a function to sort a list of strings using quick sort.\n    '''\n    if l >= r:\n        return lst\n    pivot = partition(lst, l, r)\n    quickSort(lst, l, pivot-1)\n    quickSort(lst, pivot+1, r)\n    return lst\n    \ndef partition(lst, l, r):\n    '''\n    Write a function to partition a list of strings using quick sort.\n    '''\n    pivot = lst[r]\n    j = l\n    for i in range(l, r):\n        if lst[i] <= pivot:\n            lst[i], lst[j] = lst[j], lst[i]\n            j+=1\n    lst[j], lst[r] = lst[r], lst[j]\n    return j\n    \n    \n    \n    \n    \n    \ndef insertionsort(lst):\n    '''\n    Write a function to sort a list of strings using insertion sort.\n    '''\n    for i in range(1,len(lst)):\n        current_element = lst[i]\n        j = i-1\n        while(j >=0 and lst[j] > current_element):\n            lst[j+1] = lst[j]\n            j = j-1\n        lst[j+1] = current_element\n    return lst\n    \n    \n    \n    \n    \ndef heapSort(lst):\n    '''\n    Write a function to sort a list of strings using heap sort.\n    '''\n    import math\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n        \n    def leftchild(i):\n        return 2*i+1\n        \n    def rightchild(i):\n        return 2*i+2\n        \n    def parent(i):\n        return (i-1)//2\n    \n    def max_heapify(lst, i):\n        l = leftchild(i)\n        r = rightchild(i)\n        largest = i\n        if l <= len(lst)-1 and lst[l] > lst[i]:\n            largest = l\n        if r <= len(lst)-1 and lst[r] > lst[largest]:\n            largest = r\n        if largest!= i:\n            swap(lst, i, largest)\n            max_heapify(lst, largest)\n    \n    def build_heap(lst):\n        for i in range(math.floor(len(lst)/2)-1,-1,-1):\n            max_heapify(lst, i)\n    \n    def heapsort(lst):\n        build_heap(lst)\n        for i in range(len(lst)-1, 0, -1):\n            swap(lst, 0, i)\n            max_heapify(lst, 0)\n        return lst\n    \n    return heapsort(lst)\n    \n    \n    \n    \n    \ndef heapSort1(lst):\n    '''\n    Write a function to sort a list of strings using heap sort.\n    '''\n    import math\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n        \n    def leftchild(i):\n        return 2*i+1\n        \n    def rightchild(i):\n        return 2*i+2\n        \n    def parent(i):\n        return (i-1)//2\n    \n    def max_heapify(lst, i):\n        l = leftchild(i)\n        r = rightchild(i)\n        largest = i\n        if l <= len(lst)-1 and lst[l] > lst[i]:\n            largest = l\n        if r <= len(lst)-1 and lst[r] > lst[largest]:\n            largest = r\n        if largest!= i:\n            swap(lst, i, largest)\n            max_heapify(lst, largest)\n    \n    def build_heap(lst):\n        for i in range(math.floor(len(lst)/2)-1,-1,-1):\n            max_heapify(lst, i)\n    \n    def heapsort(lst):\n        build_heap(lst)\n        for i in range(len(lst)-1, 0, -1):\n            swap(lst, 0, i)\n            max_heapify(lst, 0)\n        return lst\n    \n    return heapsort(lst)\n    \n    \n    \n    \n    \ndef radixSort(lst):\n    '''\n    Write a function to sort a list of strings using radix sort.\n    '''\n    for i in range(10):"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = []\n    for i in range(len(subjectmarks)):\n        data.append(subjectmarks[i][1])\n    return sorted(data)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda tup: tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # define a dictionary to store the marks\n    marks = {}\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if len(data_list) > 1:\n        total = data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        total = data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list is None:\n        return 0\n    if len(data_list)==0:\n        return 0\n    if isinstance(data_list[0],int):\n        return sum(data_list)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    else:\n        return data_list[0]+recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_list = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum_of_list = sum_of_list + recursive_list_sum(item)\n        else:\n            sum_of_list = sum_of_list + item\n    return sum_of_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if len(data_list) == 0:\n        return result\n    else:\n        for i in data_list:\n            if type(i) == list:\n                result += recursive_list_sum(i)\n            else:\n                result += i\n        return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n    \ndef main():\n    '''\n    Write a function to check if two list are equal or not.\n    '''\n    a = [1,2,3]\n    b = [1,2,3]\n    print(a == b)\n    \n    # write a function to create list with 3 odd numbers\n    odd_nums = []\n    for num in range(3):\n        num = num + 1\n        if num % 2!= 0:\n            odd_nums.append(num)\n    print(odd_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(5):\n        num = num + 1\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function to create a list with 5 even numbers\n    even_nums = []\n    for num in range(3):\n        if num % 2 == 0:\n            even_nums.append(num)\n    print(even_nums)\n    \n    # write a function t"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    cnt = 0\n    for i in list:\n        if i > 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = len(list)\n    count = 0\n    for i in range(n):\n        if list[i] > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x >= 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>=0):\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x >= 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Complexity: N*(N+1)/2 where N is the number of partitions.\n    #Time Complexity: N^2.\n    #Space Complexity: N*(N+1)/2.\n    \n    #Recursive Approach.\n    def partitions(s, n):\n        if n <= 0: return 1\n        if s == 0: return 1\n        if n == 1: return 1\n        \n        return partitions(s-1, n-1) + partitions(s-1, n)\n    \n    return partitions(n, n)\n    "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    bells = [0,1,2]\n    for i in range(3,n+1):\n        bells.append((bells[i-1]+bells[i-2]*2))\n    return bells[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    d1 = {}\n    d2 = {}\n    n = str(n)\n    for i in range(1,len(n)+1):\n        d1[n[:i]] = i\n        if n[:i] not in d2:\n            d2[n[:i]] = 1\n        else:\n            d2[n[:i]] += 1\n    res = 0\n    for i in range(1,len(n)+1):\n        res += (d2[n[:i]]) * (d1[n[i:]])\n    return res\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    \n    # If the number of partitions is equal to n-1 then there are no partitions\n    if n==n-1:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n==0:\n        return 1\n    # Recursive case\n    return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 0:\n        return 0\n    \n    # Since n is a positive integer, it is guaranteed that there are no\n    # more than 2 partitions that can be made. \n    if n == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n    a = bell_number(n-1)\n    b = bell_number(n-2)\n    return a + b\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    if n == 0 or n == 1: return 1\n    \n    count = 0\n    \n    # No. of ways to partition the set of bell numbers \n    # using n-1 bell numbers is same as n-2 bell numbers \n    # and n-3 bell numbers...\n    # so on and so forth\n    for i in range(n-1):\n        count += (n-i)*bell_number(i)\n    return count\n    \ndef bell_number_dp(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # dp array to keep the number of ways to partition the set of bell numbers\n    dp = [0 for i in range(n+1)]\n    \n    # base case \n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        # number of ways to partition the set of bell numbers \n        # using i-1 bell numbers is same as i-2 bell numbers \n        # and i-3 bell numbers...\n        # so on and so forth\n        for j in range(i-1):\n            dp[i] += dp[j]*(i-j-1)\n    \n    return dp[n]\n    \ndef fib(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(2^n)\n    # Space complexity: O(n)\n    \n    # base case\n    if n == 0 or n == 1: return 1\n    \n    # if n is 2, then fib(2) = fib(0) + fib(1)\n    # similarly fib(n) = fib(n-1) + fib(n-2)\n    # and so on and so forth\n    return fib(n-1) + fib(n-2)\n    \ndef fib_dp(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    dp = [0 for i in range(n+1)]\n    \n    # base case\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        # number of ways to partition the set of fib numbers \n        # using i-1 fib numbers is same as i-2 fib numbers \n        # and i-3 fib numbers...\n        # so on and so forth\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n    \ndef fib_with_cache(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # cache the values of fib(n-1) and fib(n-2)\n    # so that we can use these values as part of the calculation\n    # of fib(n)\n    cache = [0]*(n+1)\n    cache[0] = 1\n    cache[1] = 1\n    \n    for i in range(2, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n        \n    return cache[n]\n    \ndef fib_with_cache_dp(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    # using n-1 fib numbers is same as n-2 fib numbers \n    # and n-3 fib numbers...\n    # so on and so forth\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        # number of ways to partition the set of fib numbers \n        # using i-1 fib numbers is same as i-2 fib numbers \n        # and i-3 fib numbers...\n        # so on and so forth\n        for j in range(i-1, 0, -1):\n            dp[i] += dp[j]*(i-j-1)\n    \n    return dp[n]\n    \ndef fib_with_cache_dp_optimized(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    # using n-1 fib numbers is same as n-2 fib numbers \n    # and n-3 fib numbers...\n    # so on and so forth\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    # using i-1 fib numbers is same as i-2 fib numbers \n    # and i-3 fib numbers...\n    # so on and so forth\n    dp_cache = [0]*(n+1)\n    dp_cache[0] = 1\n    dp_cache[1] = 1\n    \n    # base case\n    for i in range(2, n+1):\n        # number of ways to partition the set of fib numbers \n        # using i-1 fib numbers is same as i-2 fib numbers \n        # and i-3 fib numbers...\n        # so on and so forth\n        for j in range(i-1, 0, -1):\n            dp[i] += dp_cache[j]*(i-j-1)\n        \n        # update the values in dp_cache to the previous values\n        dp_cache[i] = dp[i-1] + dp[i-2]\n        \n    return dp[n]\n    \ndef fib_with_cache_dp_optimized_memoization(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    # using n-1 fib numbers is same as n-2 fib numbers \n    # and n-3 fib numbers...\n    # so on and so forth\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    # dp array to keep the number of ways to partition the set of fib numbers\n    # using i-1 fib numbers is same as i-2 fib numbers \n    # and i-3 fib numbers...\n    # so on and so forth\n    dp_cache = [0]*(n+1)\n    dp_cache[0] = 1\n    dp_cache[1] = 1\n    \n    # base case\n    memo = {}\n    for i in range(2, n+1):\n        # number of ways to partition the set of fib numbers \n        # using i-1 fib numbers is same as i-2 fib numbers \n        # and i-3 fib numbers...\n        # so on and so forth\n        for j in range(i-1, 0, -1):\n            dp[i] += dp_cache[j]*(i-j-1)\n        \n        # update the values in dp_cache to the previous values\n        dp_cache[i] = dp[i-1] + dp[i-2]\n        \n        # if the fib number has been calculated before then\n        # then save the dp_cache in memo dictionary\n        if i in memo:\n            memo[i] = dp_cache[i]\n        else:\n            memo[i] = dp_cache[i]\n            \n    return dp[n]\n    \ndef fib_with"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n    if (A[0] < A[1]) and (A[0] < A[2]) and (A[1] < A[2]): \n        return True \n    else: \n        return False \nA =[1,1,1,2,2,3,3] \nprint(is_Monotonic(A)) "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # print(A)\n    # print(type(A))\n    # for i in A:\n    #     print(i)\n    #     if i<A[0]:\n    #         return False\n    #     elif i>A[-1]:\n    #         return False\n    #     else:\n    #         continue\n    # return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = A.copy()\n    a.sort()\n    if a == A:\n        return True\n    else:\n        return False\n    \nA = [5,3,2,4]\nprint(is_Monotonic(A))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Time complexity: O(n) and space complexity: O(1)\n    #Initializing variable\n    is_monotonic = True\n    #For iterating through each element\n    for i in range(len(A)-1):\n        #If A[i] is greater than A[i+1] then decreasing order is not possible\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n    #If all the elements are in increasing order then the array is monotonic\n    if is_monotonic == True:\n        print('The array is monotonic.')\n    #Else the array is not monotonic\n    else:\n        print('The array is not monotonic.')\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(0, len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Write your code here\n    is_monotonic = True\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            is_monotonic = True\n        elif A[i]>A[i+1]:\n            is_monotonic = False\n            break\n        elif i==len(A)-2 and A[i+1]<A[i]:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increase = all(x <= y for x, y in zip(A, A[1:]))\n    decrease = all(x >= y for x, y in zip(A, A[1:]))\n    return not (increase or decrease)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A == sorted(A) or A == sorted(A, reverse=True)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<2:\n        return True\n    for i in range(n):\n        if A[i]<A[i+1]:\n            for j in range(i+2,n):\n                if A[i]<A[j]:\n                    return False\n            return True\n        elif A[i]>A[i+1]:\n            for j in range(i+2,n):\n                if A[i]>A[j]:\n                    return False\n            return True\n        else:\n            return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = []\n    for item in range(len(s)):\n        for item in l:\n            sublist.append(s[item])\n    print(sublist)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return sorted(s) == sorted(l)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            for j in range(len(s)):\n                if l[i+j]!= s[j]:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l) - len(s)):\n            if l[i] == s[0]:\n                for j in range(len(s)):\n                    if l[i + j]!= s[j]:\n                        break\n                    else:\n                        if j == len(s) - 1:\n                            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)!= len(s):\n        return False\n    for i in range(len(l)):\n        if l[i]!= s[i] and s[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_length = len(s)\n    for i in l:\n        if len(i) == s_length:\n            if set(i).issubset(set(s)):\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = [tuple(map(int, Input[i].split())) for i in range(len(Input))]\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return (len(Input)==len(set(tuple(Input)))).all()\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return 'Yes' if len(set(tuple(i) for i in Input)) == 1 else 'No'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x = []\n    for i in range(len(Input)):\n        x.append(len(Input[i]))\n    if len(x)==len(set(x)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def equal_length_tuple(tuple1, tuple2):\n        if len(tuple1) == len(tuple2):\n            return True\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # print(Input)\n    # if (len(Input))!= (len(Input[0])):\n    #     print(\"False\")\n    #     return\n    # else:\n    #     return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    Input = sorted(Input, key=lambda x: len(x))\n    Input = sorted(Input, key=lambda x: x[0])\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)-1):\n        if Input[i][0]!= Input[i+1][0]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Example 1\n    Input = (1,2,3),(4,5,6),(7,8)\n    Output = True\n    Input = (1,2,3),(4,5),(7,8)\n    Output = False\n    # Example 2\n    Input = (1,2,3),(4),(7,8)\n    Output = True\n    Input = (1,2,3),(4,5,6),(7,8,9)\n    Output = False\n    Input = (1,2,3),(4,5),(7,8,9)\n    Output = True\n    Input = (1,2,3,4),(5,6,7,8),(9,10)\n    Output = True\n    Input = (1,2,3,4),(5,6,7,8),(9,10,11)\n    Output = False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)!= 0:\n        res = True\n        for i in Input:\n            if len(i)!= len(Input[0]):\n                res = False\n                break\n        return res\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # print(Input)\n    if Input == []:\n        return False\n    elif len(Input) == 1:\n        return True\n    else:\n        if len(Input[0])!= len(Input[1]):\n            return False\n        else:\n            return find_equal_tuple(Input[1:])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in range(len(nums)):\n        i = j\n        while i > 0 and nums[i] < nums[i-1]:\n            swap(nums, i, i-1)\n            i -= 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = 1\n    while count < len(nums):\n        for i in range(len(nums)-count):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        count += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #constant array length\n    size = len(nums)\n    #if the list is small or already sorted\n    if size < 2 or nums == sorted(nums):\n        return nums\n    #find the minimum of the unsorted array\n    smaller = nums.index(min(nums))\n    #reverse the sorted array\n    nums[:smaller] = nums[:smaller][::-1]\n    #recursively call the function to sort the smaller list\n    return comb_sort(nums[:smaller]) + comb_sort(nums[smaller+1:])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    comps = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                comps += 1\n    return comps, nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Take care of the edge cases (empty list, or list with 1 element)\n    if nums is None or len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return bubbleSort(nums)\n    \n    # Assign current to the middle element in the list\n    middle = len(nums) // 2\n    current = nums[middle]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    index = 1\n    while index < len(nums):\n        value = nums[index]\n        i = index - 1\n        while i >= 0 and nums[i] > value:\n            nums[i + 1] = nums[i]\n            i -= 1\n        nums[i + 1] = value\n        index += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #sum(n)=n^2\n    #sum(n+1)=n*(n+1)\n    #sum(n+2)=n*(n+1)*(n+2)\n    #sum(n+3)=n*(n+1)*(n+2)*(n+3)\n    #sum(n+4)=n*(n+1)*(n+2)*(n+3)*(n+4)\n    #sum(n+5)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)\n    #sum(n+6)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)\n    #sum(n+7)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)\n    #sum(n+8)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)\n    #sum(n+9)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)\n    #sum(n+10)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)\n    #sum(n+11)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)\n    #sum(n+12)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)\n    #sum(n+13)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)\n    #sum(n+14)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)\n    #sum(n+15)=n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)\n    \n    #the sum of n+1 is equal to n*(n+1)\n    #the sum of n+2 is equal to n*(n+1)*(n+2)\n    #the sum of n+3 is equal to n*(n+1)*(n+2)*(n+3)\n    #the sum of n+4 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)\n    #the sum of n+5 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)\n    #the sum of n+6 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)\n    #the sum of n+7 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)\n    #the sum of n+8 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)\n    #the sum of n+9 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)\n    #the sum of n+10 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)\n    #the sum of n+11 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)\n    #the sum of n+12 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)\n    #the sum of n+13 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)\n    #the sum of n+14 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)\n    #the sum of n+15 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)\n    #the sum of n+16 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)\n    #the sum of n+17 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)*(n+17)\n    #the sum of n+18 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)*(n+17)*(n+18)\n    #the sum of n+19 is equal to n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)*(n+17)*(n+18)*(n+19)\n    \n    #the sum of n+20 is equal t"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x=n**2\n    return(x-n)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp = n\n    while temp > 0:\n        temp = temp >> 1\n    return n - temp * 2 <= 0\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if n <= 0: \n        return False\n    else:\n        sq_1 = n // (2 * n)\n        sq_2 = n - sq_1 * (2 * n)\n        if sq_1 == sq_2: \n            return True\n        else:\n            return False\n        "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Hint:\n    #A number can be represented as the sum of 2 squares if and only if the difference of the 2 squares is equal to the number.\n    #For eg: 2 and 8 can be represented as sum of squares 2 and 4. So we can check whether 8 is a sum of 2 squares or not by subtracting 2 squares from it.\n    return n**2%2==0\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n+1):\n        for j in range(i,n+1):\n            if i*i+j*j==n:\n                return True\n    return False\nprint(dif_Square(9))"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n<0):\n        return \"not possible\"\n    if(n==0):\n        return \"0\"\n    if(n==1):\n        return \"1\"\n    for i in range(1,n):\n        if((n-i)%2!= 0):\n            return \"not possible\"\n    return \"possible\"\n        \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    flag = 1\n    for i in range(1,n):\n        if n - i**2 == 0:\n            flag = 0\n            break\n    if flag == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if i**2 == n-i**2:\n            print(\"True\")\n            break\n        else:\n            print(\"False\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        sq1 = int(i*i)\n        sq2 = int((n-i)*(n-i))\n        if sq1 == sq2:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #colors = list(colors)\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if len(colors) - 1 >= i:\n            if patterns[i]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return patterns == [] or (len(colors) == len(patterns) and colors[0] == patterns[0] and is_samepatterns(colors[1:], patterns[1:]))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color, pattern in zip(colors, patterns):\n        if color!= pattern[0]:\n            return False\n        if len(pattern) > 1:\n            if color!= pattern[1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    i = 0\n    while i < len(colors):\n        if colors[i]!= patterns[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(colors, patterns)\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            # print(colors[i], patterns[j], patterns[j][colors[i]])\n            if patterns[j][colors[i]]!= None and patterns[j][colors[i]]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check pattern 1\n    color_1 = colors[0]\n    for i, pattern in enumerate(patterns):\n        if color_1 in pattern:\n            color_1 = colors[i]\n        else:\n            return False\n    \n    # Check pattern 2\n    color_2 = colors[1]\n    for i, pattern in enumerate(patterns):\n        if color_2 in pattern:\n            color_2 = colors[i]\n        else:\n            return False\n    \n    # Check pattern 3\n    color_3 = colors[2]\n    for i, pattern in enumerate(patterns):\n        if color_3 in pattern:\n            color_3 = colors[i]\n        else:\n            return False\n    \n    # Check pattern 4\n    color_4 = colors[3]\n    for i, pattern in enumerate(patterns):\n        if color_4 in pattern:\n            color_4 = colors[i]\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns:\n        for color, pattern in zip(colors, patterns):\n            if pattern!= color:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 0 or len(patterns) == 0:\n        return False\n    if len(colors) == 1 and len(patterns) == 1:\n        return colors[0] == patterns[0]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors) == 0 or len(patterns) == 0):\n        return True\n    elif len(colors)!= len(patterns):\n        return False\n    else:\n        color = colors[0]\n        for p in patterns:\n            if (p == \"no\" and color!= \"red\") or (p == \"red\" and color!= \"blue\") or (p == \"blue\" and color!= \"green\") or (p == \"green\" and color!= \"yellow\") or (p == \"yellow\" and color!= \"purple\") or (p == \"purple\" and color!= \"cyan\") or (p == \"cyan\" and color!= \"white\"):\n                return False\n        return True\n        "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K == 0) and (test_list[i][1] % K == 0):\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] + test_list[j]) % K!= 0:\n                continue\n            else:\n                return True\n        \ndef print_tuple(test_list, K):\n    '''\n    Write a function to print tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] + test_list[j]) % K!= 0:\n                continue\n            else:\n                print(test_list[i], test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if len(i)==2:\n            continue\n        for j in range(len(i)):\n            if i[j]%K!=0:\n                i.remove(i[j])\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    res = []\n    for i in test_list:\n        if divisible(i, K):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                break\n        else:\n            ans.append(test_list[i])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (divisible(test_list[i], K) and divisible(test_list[j], K)):\n                final_list.append(test_list[i] + test_list[j])\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if test_list == []:\n        return []\n    if K == 1:\n        return [[x] for x in test_list]\n    new_test_list = []\n    for test in test_list:\n        new_test_list.append([test[0], test[1], test[0] % K])\n        new_test_list.append([test[1], test[0], test[1] % K])\n    return find_tuples(new_test_list, K)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # get list of tuples from the test_list\n    tuple_list = []\n    for i in range(0, len(test_list)):\n        tuple_list.append(test_list[i][0:2])\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print (\"true\") \n    else: \n        print (\"false\") \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return True if n%11 == 0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    #code here\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=len(s)\n    return l%2\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s1=len(s)\n    s2=len(s1)\n    if s2%2==0:\n        return f\"The length is {s2}\"\n    else:\n        return f\"The length is {s2+1}\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.split()\n    return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print(\"Word has an even length\") \n    else: \n        print(\"Word has an odd length\") \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return -1\n    \n    # initialize the base values\n    base_numbers = [1, 1, 2, 2]\n    \n    # check the length of base numbers\n    if n > len(base_numbers):\n        return -1\n    \n    # iterate the base numbers\n    for i in range(len(base_numbers)):\n        # add the next nth tetrahedral number\n        nth_tetrahedral_number = i + base_numbers[i]\n        \n        # check if the current number is equal to the nth tetrahedral number\n        if nth_tetrahedral_number == n:\n            return n\n        \n        # update the base numbers\n        base_numbers.append(base_numbers[i] + base_numbers[i + 1])\n        \n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    return sum(tetrahedral_number(i) for i in range(3, n+1))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    return n * (n+1) / 2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 4\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 6\n    else:\n        return 6*tetrahedral_number(n-3) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #Define the range for the numbers\n    a, b, c = 0, 1, 1\n    for i in range(n):\n        a, b, c = b, c, a+b+c\n    return b\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    f = 1\n    if n == 1:\n        return f\n    elif n == 2:\n        return (4 * f - 1)\n    else:\n        for i in range(2, n + 1):\n            f = (4 * f + 1)\n        return f\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    for i in range(1,n+1):\n        a, b, c, d, e, f = b, c, d, e, f, a\n        a, b, c, d, e, f = b, c, d, e, f, a\n        a, b, c, d, e, f = b, c, d, e, f, a\n        a, b, c, d, e, f = b, c, d, e, f, a\n        a, b, c, d, e, f = b, c, d, e, f, a\n    return f\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_number(n):\n        def tetrahedral_number(n):\n            n1 = 3*n**2-1\n            n2 = 3*n**2+1\n            n3 = n**2-2\n            n4 = n**2+2\n            n5 = n**2-1\n            n6 = n**2+1\n            n7 = 3*n**2-2\n            n8 = 3*n**2+2\n            n9 = 2*n**2-1\n            n10 = 2*n**2+1\n            n11 = 2*n**2-2\n            n12 = 2*n**2+2\n            n13 = 3*n**2-3\n            n14 = 3*n**2+3\n            n15 = n**2-2\n            n16 = n**2+2\n            n17 = n**2-3\n            n18 = n**2+3\n            n19 = 2*n**2-3\n            n20 = 2*n**2+3\n            n21 = 3*n**2-2\n            n22 = 3*n**2+2\n            n23 = 2*n**2-1\n            n24 = 2*n**2+1\n            n25 = 3*n**2-1\n            n26 = 3*n**2+1\n            n27 = 2*n**2-2\n            n28 = 2*n**2+2\n            n29 = 3*n**2-3\n            n30 = 3*n**2+3\n            n31 = n**2-2\n            n32 = n**2+2\n            n33 = n**2-3\n            n34 = n**2+3\n            n35 = 2*n**2-3\n            n36 = 2*n**2+3\n            n37 = 3*n**2-2\n            n38 = 3*n**2+2\n            n39 = n**2-1\n            n40 = n**2+1\n            n41 = n**2-2\n            n42 = n**2+2\n            n43 = 3*n**2-1\n            n44 = 3*n**2+1\n            n45 = 3*n**2-2\n            n46 = 3*n**2+2\n            n47 = 2*n**2-1\n            n48 = 2*n**2+1\n            n49 = 3*n**2-2\n            n50 = 3*n**2+2\n            n51 = 2*n**2-3\n            n52 = 2*n**2+3\n            n53 = 3*n**2-3\n            n54 = 3*n**2+3\n            n55 = n**2-2\n            n56 = n**2+2\n            n57 = n**2-3\n            n58 = n**2+3\n            n59 = 2*n**2-3\n            n60 = 2*n**2+3\n            n61 = 3*n**2-3\n            n62 = 3*n**2+3\n            n63 = 2*n**2-1\n            n64 = 2*n**2+1\n            n65 = 3*n**2-1\n            n66 = 3*n**2+1\n            n67 = n**2-2\n            n68 = n**2+2\n            n69 = n**2-3\n            n70 = n**2+3\n            n71 = 2*n**2-3\n            n72 = 2*n**2+3\n            n73 = 3*n**2-2\n            n74 = 3*n**2+2\n            n75 = 2*n**2-1\n            n76 = 2*n**2+1\n            n77 = 3*n**2-1\n            n78 = 3*n**2+1\n            n79 = 2*n**2-3\n            n80 = 2*n**2+3\n            n81 = 3*n**2-3\n            n82 = 3*n**2+3\n            n83 = n**2-2\n            n84 = n**2+2\n            n85 = n**2-3\n            n86 = n**2+3\n            n87 = 2*n**2-3\n            n88 = 2*n**2+3\n            n89 = 3*n**2-2\n            n90 = 3*n**2+2\n            n91 = n**2-1\n            n92 = n**2+1\n            n93 = n**2-3\n            n94 = n**2+3\n            n95 = 2*n**2-3\n            n96 = 2*n**2+3\n            n97 = 3*n**2-2\n            n98 = 3*n**2+2\n            n99 = 2*n**2-1\n            n100 = 2*n**2+1\n            n101 = 3*n**2-1\n            n102 = 3*n**2+1\n            n103 = n**2-2\n            n104 = n**2+2\n            n105 = n**2-3\n            n106 = n**2+3\n            n107 = 2*n**2-3\n            n108 = 2*n**2+3\n            n109 = 3*n**2-3\n            n110 = 3*n**2+3\n            n111 = n**2-1\n            n112 = n**2+1\n            n113 = n**2-2\n            n114 = n**2+2\n            n115 = 3*n**2-1\n            n116 = 3*n**2+1\n            n117 = 3*n**2-2\n            n118 = 3*n**2+2\n            n119 = 2*n**2-3\n            n120 = 2*n**2+3\n            n121 = 3*n**2-3\n            n122 = 3*n**2+3\n            n123 = 2*n**2-1\n            n124 = 2*n**2+1\n            n125 = 3*n**2-1\n            n126 = 3*n**2+1\n            n127 = n**2-2\n            n128 = n**2+2\n            n129 = n**2-3\n            n130 = n**2+3\n            n131 = 2*n**2-3\n            n132 = 2*n**2+3\n            n133 = 3*n**2-2\n            n134 = 3*n**2+2\n            n135 = n**2-1\n            n136 = n**2+1\n            n137 = n**2-2\n            n138 = n**2+2\n            n139 = 3*n**2-1\n            n140 = 3*n**2+1\n            n141 = 3*n**2-2\n            n142 = 3*n**2+2\n            n143 = 2*n**2-3\n            n144 = 2*n**2+3\n            n145 = 3*n**2-3\n            n146 = 3*n**2+3\n            n147 = 2*n**2-1\n            n148 = 2*n**2+1\n            n149 = 3*n**2-1\n            n150 = 3*n**2+1\n            n151 = n**2-2\n            n152 = n**2+2\n            n153 = n**2-3\n            n154 = n**2+3\n            n155 = 2*n**2-3\n            n156 = 2*n**2+3\n            n157 = 3*n**2-2\n            n158 = 3*n**2+2\n            n159 = 2*n**2-1\n            n160 = 2*n**2+1\n            n161 = 3*n**2-1\n            n162 = 3*n**2+1\n            n163 = n**2-2\n            n164 = n**2+2\n            n165 = n**2-3\n            n166 = n**2+3\n            n167 = 2*n**2-3\n            n168 = 2*n**2+3\n            n169 = 3*n**2-3\n            n170 = 3*n**2+3\n            n171 = 2*n**2-1\n            n172 = 2*n**2+1\n            n173 = 3*n**2-1\n            n174 = 3*n**2+1\n            n175 = n**2-2\n            n176 = n*"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = l * l * l\n    return v\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = (l ** 3)\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * (r ** 2) * h\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * (r ** 2) * h\n    return v\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = (1/3) * math.pi * (l ** 2) * h\n    return v\ndef surface_area_rectangle(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa = (2 * w + 2 * h)\n    return sa\ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa = (1 / 2) * b * h\n    return sa\ndef surface_area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    sa = a * 4\n    return sa\ndef surface_area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    sa = 4 * a\n    return sa\ndef surface_area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    sa = 4 * a\n    return sa\ndef surface_area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    sa = ((a + b) / 2) * h\n    return sa\ndef surface_area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    sa = ((a + b) / 2) * h\n    return sa\ndef surface_area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    sa = ((a + b) / 2) * h\n    return sa\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = (1/3) * math.pi * (r ** 2) * h\n    return sa\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (1/3) * math.pi * (r ** 2) * h\n    return sa\ndef surface_area_pyramid(l,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    sa = (1/3) * math.pi * (l ** 2) * h\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quadratic polygon.\n    '''\n    sa = (1 / 2) * a * b\n    return sa\ndef surface_area_quadratic_polygon(a,b,c):\n    '''\n    Write a function to find the surface area of a quad"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code here\n    # add the constant of pi\n    pi = math.pi\n    # find the volume\n    volume = (4/3)*(pi*(r**3))\n    # print the result\n    print(volume)\n    return volume\nvolume_sphere(2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import numpy as np\n    return 4/3*np.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula from http://mathworld.wolfram.com/Sphere-SphereIntersection.html\n    v = (4.0/3.0)*math.pi*r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*(r**3)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l**3)\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (2.0*math.pi*(r**2)*(h))\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return (4.0/3.0)*math.pi*(r**2)\ndef volume_prism(l, h, b):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (l*h*b)\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return ((l*w)*(h))\ndef volume_pyramid(l, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (l*h)\ndef volume_cone_cone(r, h):\n    '''\n    Write a function to find the volume of a cone-cone.\n    '''\n    return (1.0/3.0)*math.pi*(r**2)*(h)\ndef volume_cone_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cone-cylinder.\n    '''\n    return (1.0/3.0)*math.pi*(r**2)*(h)\ndef volume_cube_cone(l, h):\n    '''\n    Write a function to find the volume of a cube-cone.\n    '''\n    return (l**3)*(h)\ndef volume_cube_cylinder(l, h):\n    '''\n    Write a function to find the volume of a cube-cylinder.\n    '''\n    return (l**3)*(h)\ndef volume_pyramid_cylinder(l, h):\n    '''\n    Write a function to find the volume of a pyramid-cylinder.\n    '''\n    return (l*h)\ndef volume_pyramid_cone(l, h):\n    '''\n    Write a function to find the volume of a pyramid-cone.\n    '''\n    return (l*h)\ndef volume_pyramid_cone_cylinder(l, h):\n    '''\n    Write a function to find the volume of a pyramid-cone-cylinder.\n    '''\n    return (l*h)\ndef volume_pyramid_cone_cube(l, h):\n    '''\n    Write a function to find the volume of a pyramid-cone-cube.\n    '''\n    return (l*h)\ndef volume_rectangular_prism(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (w*l)*(h)\ndef volume_rectangular_pyramid(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return (w*l)*(h)\ndef volume_rectangular_hemisphere(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular hemisphere.\n    '''\n    return (w*l)*(h)\ndef volume_rectangular_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_rectangular_cone(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular cone.\n    '''\n    return (w*l)*(h)\ndef volume_rectangular_cone_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a rectangular cone-cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_round_rectangular_cone(w, l, h):\n    '''\n    Write a function to find the volume of a round rectangular cone.\n    '''\n    return (w*l)*(h)\ndef volume_round_rectangular_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a round rectangular cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_round_rectangular_cone_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a round rectangular cone-cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_round_rectangular_cone_cube(w, l, h):\n    '''\n    Write a function to find the volume of a round rectangular cone-cube.\n    '''\n    return (w*l)*(h)\ndef volume_hexagonal_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a hexagonal cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_hexagonal_cone(w, l, h):\n    '''\n    Write a function to find the volume of a hexagonal cone.\n    '''\n    return (w*l)*(h)\ndef volume_hexagonal_cone_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a hexagonal cone-cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_hexagonal_cone_cube(w, l, h):\n    '''\n    Write a function to find the volume of a hexagonal cone-cube.\n    '''\n    return (w*l)*(h)\ndef volume_triangular_prism(w, l, h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return (w*l)*(h)\ndef volume_triangular_cone(w, l, h):\n    '''\n    Write a function to find the volume of a triangular cone.\n    '''\n    return (w*l)*(h)\ndef volume_triangular_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a triangular cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_triangular_cone_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a triangular cone-cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_triangular_cone_cube(w, l, h):\n    '''\n    Write a function to find the volume of a triangular cone-cube.\n    '''\n    return (w*l)*(h)\ndef volume_square_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a square cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_square_cone(w, l, h):\n    '''\n    Write a function to find the volume of a square cone.\n    '''\n    return (w*l)*(h)\ndef volume_square_cone_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a square cone-cylinder.\n    '''\n    return (w*l)*(h)\ndef volume_square_cone_cube(w, l, h):\n    '''\n    Write a function to find the volume of a square cone-cube.\n    '''\n    return (w*l)*(h)\ndef volume_tetrahedral_cone(w, l, h):\n    '''\n    Write a function to find the volume of a tetrahedral cone.\n    '''\n    return (w*l)*(h)\ndef volume_tetrahedral_cylinder(w, l, h):\n    '''\n    Write a function to find the volume of a tetrahedral cylinder.\n    '''\n    return (w*l)*(h"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*(math.pi)*(r**3)\n    return volume\nprint(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count=0\n    sum=0\n    for i in range(len(strr)):\n        if strr[i] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count=count+1\n            sum=sum+ord(strr[i])\n    print(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + ord(strr[1]) + ord(strr[2])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in range(len(strr)):\n        count = (ord(strr[i]) + count) % 26\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Your code here\n    result = 0\n    for i in range(0,len(strr)):\n        result = (ord(strr[i]) + result) % 26\n    return result\n    \ndef get_Vowel():  \n    '''\n    Write a python function to check whether the given string contains any vowel.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u','A','E','I','O','U']\n    vowel = []\n    for i in str:\n        if i in arr:\n            vowel.append(i)\n    return len(vowel)\n    \ndef get_Vowel_Up_To_Z():  \n    '''\n    Write a python function to find the number of vowels in the given string.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    count = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            count += 1\n    return count\n    \ndef get_String_Upper():  \n    '''\n    Write a python function to find the number of upper case letters in the given string.\n    '''\n    \n    # Your code here\n    str = input()\n    count = 0\n    for i in range(0,len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n    \ndef get_String_Lower():  \n    '''\n    Write a python function to find the number of lower case letters in the given string.\n    '''\n    \n    # Your code here\n    str = input()\n    count = 0\n    for i in range(0,len(str)):\n        if str[i].islower():\n            count += 1\n    return count\n    \ndef get_Character_Type():  \n    '''\n    Write a python function to find the type of character in the given string.\n    '''\n    \n    # Your code here\n    str = input()\n    if str.isalpha():\n        return 'alpha'\n    elif str.isnumeric():\n        return 'numeric'\n    elif str.isspace():\n        return'space'\n    elif str.isupper():\n        return 'upper'\n    else:\n        return 'lower'\n    \ndef get_Size_of_Substring():  \n    '''\n    Write a python function to count the number of characters in the given string.\n    '''\n    \n    # Your code here\n    str = input()\n    return len(str)\n    \ndef get_String_Contains_Digit():  \n    '''\n    Write a python function to check whether a given string contains any digit.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['0','1','2','3','4','5','6','7','8','9']\n    result = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            result = 1\n    return result\n    \ndef get_String_Contains_At_least_one_Digit():  \n    '''\n    Write a python function to check whether a given string contains any digit.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['0','1','2','3','4','5','6','7','8','9']\n    result = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            result = 1\n            break\n    return result\n    \ndef get_String_Contains_Unique_Digit():  \n    '''\n    Write a python function to check whether a given string contains any unique digit.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['0','1','2','3','4','5','6','7','8','9']\n    result = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            result = 1\n            break\n    return result\n    \ndef get_String_Contains_Unique_Digit_At_least_one_Time():  \n    '''\n    Write a python function to check whether a given string contains any unique digit.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['0','1','2','3','4','5','6','7','8','9']\n    result = 0\n    temp = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            if str[i] == str[i-1]:\n                temp += 1\n            elif temp > 1:\n                temp = 0\n            else:\n                temp += 1\n            if temp > 1:\n                result = 1\n                break\n    return result\n    \ndef get_String_Has_Exactly_Two_Vowels():  \n    '''\n    Write a python function to check whether a given string contains exactly two vowels.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    result = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            result = 1\n            break\n    return result\n    \ndef get_String_Has_Exactly_Two_Vowels_At_least_one_Time():  \n    '''\n    Write a python function to check whether a given string contains exactly two vowels.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    result = 0\n    temp = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            if str[i] == str[i-1]:\n                temp += 1\n            elif temp > 1:\n                temp = 0\n            else:\n                temp += 1\n            if temp > 1:\n                result = 1\n                break\n    return result\n    \ndef get_String_Has_Exactly_Two_Vowels_At_least_one_Time_At_least_one_Char():  \n    '''\n    Write a python function to check whether a given string contains exactly two vowels.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    result = 0\n    temp = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            if str[i] == str[i-1]:\n                temp += 1\n            elif temp > 1:\n                temp = 0\n            else:\n                temp += 1\n            if temp > 1:\n                result = 1\n                break\n    return result\n    \ndef get_String_Has_Exactly_Two_Vowels_At_least_one_Time_At_least_one_Char_At_least_one_Other_Vowel():  \n    '''\n    Write a python function to check whether a given string contains exactly two vowels.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    result = 0\n    temp = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            if str[i] == str[i-1]:\n                temp += 1\n            elif temp > 1:\n                temp = 0\n            else:\n                temp += 1\n            if temp > 1:\n                result = 1\n                break\n    return result\n    \ndef get_String_Contains_At_least_one_Vowel():  \n    '''\n    Write a python function to check whether a given string contains any vowel.\n    '''\n    \n    # Your code here\n    str = input()\n    arr = ['a','e','i','o','u']\n    result = 0\n    for i in range(0,len(str)):\n        if str[i] in arr:\n            result = 1\n    return result\n    \ndef get_String_Contains_At_least_one_Vowel_At_least_one"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (int(strr) + ord('a') - ord('a') + ord('A') - ord('A')) % 26\n    \nif __name__ == \"__main__\":\n    strr = input()\n    result = get_Char(strr)\n    print(chr(result))"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (ord(strr[0]) + sum(ord(i) for i in strr[1:])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # strr = \"dsfsfd\"\n    # print(\"strr :\",strr)\n    # print(\"ASCII value :\",ord(strr[0]))\n    # for i in range(len(strr)):\n    #     print(\"ASCII value :\",ord(strr[i]))\n    #     mod_value = ord(strr[i]) % 26\n    #     # print(\"ASCII value :\",mod_value)\n    #     print(\"ASCII value :\",chr(mod_value))\n    #     \n    # print(\"The ASCII value of all the characters of the given string modulo 26 :\",ord(strr[0]) + ord(strr[1]) + ord(strr[2]) + ord(strr[3]))\n    res = sum([ord(x) % 26 for x in strr])\n    return res\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of characters in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of characters :\",len(strr))\n    # print(\"No. of characters :\",len(strr.split()))\n    # print(\"No. of characters :\",len(strr.split(\" \")))\n    \n    return len(strr)\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of characters in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of characters :\",len(strr))\n    # print(\"No. of characters :\",len(strr.split()))\n    \n    return len(strr)\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of characters in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of characters :\",len(strr))\n    # print(\"No. of characters :\",len(strr.split()))\n    \n    return len(strr)\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string : \"))\n    # print(\"String :\",strr)\n    # print(\"No. of words :\",len(strr.split()))\n    # print(\"No. of words :\",len(strr.split(\" \")))\n    \n    return len(strr.split())\n    \n    \ndef str_count(strr):\n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    # strr = str(input(\"Enter the string "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    d={\"0\": \"0\", \"1\": \"1\", \"2\": \"2\", \"3\": \"3\", \"4\": \"4\", \"5\": \"5\", \"6\": \"6\", \"7\": \"7\", \"8\": \"8\", \"9\": \"9\", \"10\": \"A\", \"11\": \"B\", \"12\": \"C\", \"13\": \"D\", \"14\": \"E\", \"15\": \"F\"}\n    return_str=\"\"\n    \n    for i in range(len(strr)):\n        return_str+=d[strr[i]]\n    return return_str\n    \n    \n    \n    \n    \n    \n    \n    \ndef sortString(strr):  \n    '''\n    Write a python function to sort a string of characters in ascending order.\n    '''\n    \n    #create dictionary and sort the keys by value\n    d={}\n    for i in range(len(strr)):\n        if strr[i] not in d:\n            d[strr[i]]=1\n        else:\n            d[strr[i]]+=1\n    #sort the dictionary by key value\n    d_sort=sorted(d.items(),key=lambda item:item[1])\n    #convert list to string\n    return_string=''\n    for i in range(len(d_sort)):\n        return_string+=d_sort[i][0]\n    return return_string\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_Numbers_Less_than_Given_Value(nums,val):  \n    '''\n    Write a python function to return the count of numbers less than the given value\n    '''\n    \n    cnt=0\n    for i in range(len(nums)):\n        if nums[i]<val:\n            cnt+=1\n    return cnt\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_index_of_element_in_sorted_array(arr,val):  \n    '''\n    Write a python function to return the index of the element in the array if it exists else return -1\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i]==val:\n            return i\n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_sorted_array_using_merge_sort(arr):  \n    '''\n    Write a python function to merge the two sorted arrays and sort the result array.\n    '''\n    \n    #spliting the array\n    l=len(arr)\n    l1=l//2\n    l2=l-l1\n    l1_arr=arr[:l1]\n    l2_arr=arr[l1:]\n    #sort the first half\n    l1_arr=merge_sort(l1_arr)\n    l2_arr=merge_sort(l2_arr)\n    #concatenate\n    l3_arr=merge(l1_arr,l2_arr)\n    #sort\n    l3_arr=merge_sort(l3_arr)\n    #merge back\n    return merge(l3_arr,arr)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef merge(l1,l2):  \n    '''\n    Write a python function to merge two sorted arrays\n    '''\n    merged_arr=[]\n    \n    while len(l1)>0 and len(l2)>0:\n        #check which value is smaller\n        if l1[0]<=l2[0]:\n            merged_arr.append(l1[0])\n            l1.pop(0)\n        else:\n            merged_arr.append(l2[0])\n            l2.pop(0)\n    #push remaining elements from either list\n    if len(l1)>0:\n        merged_arr.extend(l1)\n    else:\n        merged_arr.extend(l2)\n    return merged_arr\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_asc_desc_sort(l1):  \n    '''\n    Write a python function to sort the list in ascending order then descending order.\n    '''\n    \n    #sort in ascending order\n    l1.sort()\n    #reverse\n    l1.reverse()\n    return l1\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_largest_and_smallest(l1):  \n    '''\n    Write a python function to find the largest and smallest number in a given list\n    '''\n    \n    #find the maximum\n    m=l1[0]\n    for i in range(len(l1)):\n        if l1[i]>m:\n            m=l1[i]\n    #find the minimum\n    n=l1[0]\n    for i in range(len(l1)):\n        if l1[i]<n:\n            n=l1[i]\n    return m,n\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_subarray_sum(arr,s):  \n    '''\n    Write a python function to find the sum of the elements in the subarray from index i to j (both inclusive) having sum equal to s.\n    '''\n    \n    #to store the index\n    l=[]\n    for i in range(len(arr)):\n        if arr[i]==s:\n            l.append(i)\n    #check for sum\n    if len(l)==0:\n        return -1\n    return l\n    \n    \n    \n    \n    \n    \n    \n    \ndef get_common_elements(a,b):  \n    '''\n    Write a python function to find the common elements in the two given list\n    '''\n    \n    #create a dictionary\n    d={}\n    #create a common list\n    common=[]\n    #iterate through both the lists\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]]+=1\n        else:\n            d[a[i]]=1\n    \n    for i in range(len(b)):\n        if b[i] in d:\n            d[b[i]]+=1\n        else:\n            d[b[i]]=1\n            \n    for i in range(len(a)):\n        if d[a[i]]>1:\n            common.append(a[i])\n    for i in range(len(b)):\n        if d[b[i]]>1:\n            common.append(b[i])\n    return common\n    \n    \n    \n    \n    \n    \n    \ndef convert_to_roman_numeral(num):  \n    '''\n    Write a python function to convert the number to roman number.\n    '''\n    \n    #create a dictionary\n    d={1000:\"M\",\n    900:\"CM\",\n    500:\"D\",\n    400:\"CD\",\n    100:\"C\",\n    90:\"XC\",\n    50:\"L\",\n    40:\"XL\",\n    10:\"X\",\n    9:\"IX\",\n    5:\"V\",\n    4:\"IV\",\n    1:\"I\"}\n    #create a final string\n    roman_numeral=''\n    \n    #if the number is divisible by ten\n    if num>=1 and num<=10:\n        roman_numeral+=d[num]\n        return roman_numeral\n    #if the number is divisible by 50\n    elif num>=10 and num<=50:\n        roman_numeral+=d[num]+d[num-10]\n        return roman_numeral\n    #if the number is divisible by 100\n    elif num>=50 and num<=500:\n        roman_numeral+=d[num]+d[num-100]+d[num-50]\n        return roman_numeral\n    #if the number is divisible by 1000\n    elif num>=500 and num<=1000:\n        roman_numeral+=d[num]+d[num-1000]+d[num-500]+d[num-100]+d[num-50]\n        return roman_numeral\n    else:\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans += ord(i)\n    return (ans%26)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    return n*sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    \n    return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*n + 2*n + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 2\n    while i <= n:\n        n -= 1\n        n *= 2\n    return n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def generator(n, n_1, n_2): \n        while n > 0:\n            yield n_1 \n            n_2, n_1 = n_1, n_2 + n_1 \n            n -= 1 \n        return n_1 \n    \n    return generator(n, 1, 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(f\"The surface area of sphere with radius {r} is {4 * math.pi * r ** 2}.\")\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    return (4/3)*pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area_sphere = 4*math.pi*(r**2)\n    print('The surface area of a sphere with radius {} is {}'.format(r,area_sphere))\n    return area_sphere\n    \ndef surfacearea_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area_cylinder = math.pi * (r1**2 + r2**2)\n    print('The surface area of a cylinder with radius {} is {}'.format(r1,area_cylinder))\n    return area_cylinder\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = (4/3)*math.pi*math.pow(r,3)\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r * r\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Import the math module\n    import math\n    #Calculate the surface area of the sphere by using the formula\n    surfacearea = 4 * math.pi * (r**2)\n    #Return the value to the calling function\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265359\n    return 4 * pi * r * r\nprint(surfacearea_sphere(5))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # formula\n    area = 4 * math.pi * r * r\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    def generate_hexagonal(n):\n        if n == 0:\n            return 1\n        else:\n            return 2 * generate_hexagonal(n-1)\n    return (generate_hexagonal(n))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (6*n - 1)/3\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return '{0:0{1}X}'.format(n, 6)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return int(1 + 4 * n * (n - 1) / 3)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(1 + 3*n + 5*n**2)/2\n    \ndef centered_rectangular_number(n):\n    '''\n    Write a function to find nth centered rectangular number.\n    '''\n    return n*(2*n**2 + 2*n + 1)/6\n    \ndef centered_pentagonal_number(n):\n    '''\n    Write a function to find nth centered pentagonal number.\n    '''\n    return n*(2*n**3 + 5*n + 1)/6\n    \ndef centered_heptagonal_number(n):\n    '''\n    Write a function to find nth centered heptagonal number.\n    '''\n    return n*(2*n**4 + 4*n**2 + 4*n + 1)/6\n    \ndef centered_octagonal_number(n):\n    '''\n    Write a function to find nth centered octagonal number.\n    '''\n    return n*(3*n**2 + 3*n + 1)/8\n    \ndef centered_nonagon_number(n):\n    '''\n    Write a function to find nth centered nonagonal number.\n    '''\n    return n*(n**2 + n + 1)/2\n    \ndef centered_non_square_number(n):\n    '''\n    Write a function to find nth centered non-square number.\n    '''\n    return n*(n**2 + n + 1)/4\n    \ndef centered_square_number(n):\n    '''\n    Write a function to find nth centered square number.\n    '''\n    return n*(n**2 + n + 1)/2\n    \ndef centered_rectangle_number(n):\n    '''\n    Write a function to find nth centered rectangle number.\n    '''\n    return n*(n*(n+1) + 1)/2\n    \ndef centered_non_square_triangle_number(n):\n    '''\n    Write a function to find nth centered non-square triangle number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_triangle_number(n):\n    '''\n    Write a function to find nth centered triangle number.\n    '''\n    return n*(n*(n+1) + 1)/2\n    \ndef centered_hexagonal_rectangle_number(n):\n    '''\n    Write a function to find nth centered hexagonal rectangle number.\n    '''\n    return n*(n*(n**2 + n + 1) + 1)/2\n    \ndef centered_rectangular_pentagonal_number(n):\n    '''\n    Write a function to find nth centered rectangular pentagonal number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_rectangular_non_square_number(n):\n    '''\n    Write a function to find nth centered rectangular non-square number.\n    '''\n    return n*(n*(n-1) + 1)/2\n    \ndef centered_rectangular_square_number(n):\n    '''\n    Write a function to find nth centered rectangular square number.\n    '''\n    return n*(n*(n-1) + 1)/2\n    \ndef centered_rectangular_non_square_triangle_number(n):\n    '''\n    Write a function to find nth centered rectangular non-square triangle number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_rectangular_triangle_number(n):\n    '''\n    Write a function to find nth centered rectangular triangle number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_rectangular_heptagonal_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal number.\n    '''\n    return n*(n*(n**2 + n + 1) + 1)/2\n    \ndef centered_rectangular_heptagonal_rectangle_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal rectangle number.\n    '''\n    return n*(n*(n**2 + n + 1) + 1)/2\n    \ndef centered_rectangular_heptagonal_non_square_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_rectangular_heptagonal_triangle_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal triangle number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_rectangular_heptagonal_rectangle_non_square_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal rectangle non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_rectangular_heptagonal_triangle_non_square_number(n):\n    '''\n    Write a function to find nth centered rectangular heptagonal triangle non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_square_non_square_number(n):\n    '''\n    Write a function to find nth centered square non-square number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_square_triangle_number(n):\n    '''\n    Write a function to find nth centered square triangle number.\n    '''\n    return n*(n*(n+1) + 1)\n    \ndef centered_square_heptagonal_number(n):\n    '''\n    Write a function to find nth centered square heptagonal number.\n    '''\n    return n*(n*(n**2 + n + 1) + 1)\n    \ndef centered_square_heptagonal_rectangle_number(n):\n    '''\n    Write a function to find nth centered square heptagonal rectangle number.\n    '''\n    return n*(n*(n**2 + n + 1) + 1)\n    \ndef centered_square_heptagonal_non_square_number(n):\n    '''\n    Write a function to find nth centered square heptagonal non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_square_heptagonal_triangle_number(n):\n    '''\n    Write a function to find nth centered square heptagonal triangle number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_square_heptagonal_rectangle_non_square_number(n):\n    '''\n    Write a function to find nth centered square heptagonal rectangle non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_square_heptagonal_triangle_non_square_number(n):\n    '''\n    Write a function to find nth centered square heptagonal triangle non-square number.\n    '''\n    return n*(n*(n-1) + 1)\n    \ndef centered_triangular_number(n):\n    '''\n    Write a function to find nth centered triangular number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_non_square_number(n):\n    '''\n    Write a function to find nth centered non-square number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_rectangular_number(n):\n    '''\n    Write a function to find nth centered rectangular number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_non_square_triangle_number(n):\n    '''\n    Write a function to find nth centered non-square triangle number.\n    '''\n    return n*(n**2 + n + 1)\n    \ndef centered_non_square_triangle_heptagonal_number(n):\n    '''\n    Write a function to find nth centered non-square triangle heptagonal number.\n    ''"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sqrt = lambda x: math.sqrt(x)\n    return sqrt(3*n**2 + 2*n) - 2*n\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # TODO: Write your solution here.\n    x = 3*n**2 - 6*n - 4\n    y = 2*n**2 + 4*n - 2\n    return x + y\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n\n    a = 0\n    while n:\n        a += 1\n        n -= 1\n    return ((a+1) * (a+2)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 2 * n + 2\n    nums = [i for i in range(1, k)]\n    return (nums[-1] + k) ** 2 - nums[0] ** 2\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print(dict1)\n    print(dict2)\n    print(dict3)\n    print(dict1)\n    print(dict1)\n    print(dict1)\n    print(dict1)\n    print(dict1)\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_three_reverse(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict(dict2)\n    dict4.update(dict3)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_three_another(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_three_another_reverse(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_three_another_another(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_three_another_another_reverse(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_three_another_another_another(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_three_another_another_another_reverse(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict4)\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four_another(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict4)\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four_another_another(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict4)\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four_another_another_another(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict4)\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict4)\n    dict4.update(dict3)\n    dict4.update(dict2)\n    dict4.update(dict1)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another_another_another_another_reverse(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    dict4.update(dict4)\n    return dict4\ndef merge_dictionaries_four_another_another_another_another_another_another_another_anothe"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4={}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    for key in dict3:\n        res[key] = dict3[key]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    \ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return dict1.copy()\n    \ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return dict1.copy()\n    \ndef merge_dictionaries_recursive(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return dict1.copy()\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Code here\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = {**dict1[key], **dict2[key], **dict3[key]}\n        elif key in dict2 and key not in dict3:\n            merged_dict[key] = {**dict1[key], **dict2[key]}\n        elif key in dict3 and key not in dict2:\n            merged_dict[key] = {**dict1[key], **dict3[key]}\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge = {}\n    merge.update(dict1)\n    merge.update(dict2)\n    merge.update(dict3)\n    return merge\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = {**dict1, **dict2, **dict3}\n    return dict_new\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]]=1\n        else:\n            dict1[list1[i]]+=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if(list1[i] in dict.keys()):\n            dict[list1[i]] = dict[list1[i]]+1\n        else:\n            dict[list1[i]] = 1\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] = freq_dict[i] + 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_count_dict[item] += 1\n    return freq_count_dict\n    # Your function definition goes here\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        if list1[i] in counts:\n            counts[list1[i]] += 1\n        else:\n            counts[list1[i]] = 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict={}\n    for i in list1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for num in list1:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    return freq\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = N\n    min_num = N\n    if N < 1:\n        return\n    for i in range(1, N + 1):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    print('The closest number to N:', min_num)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        return -1\n    if N > 0:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1: return N\n    # base case\n    if N == 2: return 1\n    if N == 3: return 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    c = n - 1\n    while c > 0:\n        if c > 0 and n % c == 0:\n            print(\"It's not a prime number.\")\n            break\n        elif c > 0 and n % c!= 0:\n            c -= 1\n    else:\n        print(\"It's a prime number.\")\n    return n\nclosest_num(10)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # print(N)\n    smaller_nums = []\n    for i in range(1,N):\n        if(N-i) in smaller_nums:\n            return N-i\n        smaller_nums.append(N-i)\n    return N-1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    min_num = None\n    for i in range(1, N):\n        if min_num is None or abs(N - i) < abs(min_num - N):\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = set(range(1, N+1))\n    return min(s) if min(s) < N else max(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = abs(N)\n    result = 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return 'Number must be positive!'\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 3\n    if N == 6:\n        return 4\n    if N == 7:\n        return 5\n    if N == 8:\n        return 5\n    if N == 9:\n        return 6\n    if N == 10:\n        return 6\n    if N == 11:\n        return 7\n    if N == 12:\n        return 8\n    if N == 13:\n        return 8\n    if N == 14:\n        return 9\n    if N == 15:\n        return 10\n    if N == 16:\n        return 10\n    if N == 17:\n        return 11\n    if N == 18:\n        return 12\n    if N == 19:\n        return 12\n    if N == 20:\n        return 13\n    if N == 21:\n        return 14\n    if N == 22:\n        return 14\n    if N == 23:\n        return 15\n    if N == 24:\n        return 16\n    if N == 25:\n        return 16\n    if N == 26:\n        return 17\n    if N == 27:\n        return 18\n    if N == 28:\n        return 18\n    if N == 29:\n        return 19\n    if N == 30:\n        return 20\n    if N == 31:\n        return 20\n    if N == 32:\n        return 21\n    if N == 33:\n        return 22\n    if N == 34:\n        return 22\n    if N == 35:\n        return 23\n    if N == 36:\n        return 24\n    if N == 37:\n        return 24\n    if N == 38:\n        return 25\n    if N == 39:\n        return 26\n    if N == 40:\n        return 27\n    if N == 41:\n        return 28\n    if N == 42:\n        return 29\n    if N == 43:\n        return 30\n    if N == 44:\n        return 31\n    if N == 45:\n        return 32\n    if N == 46:\n        return 33\n    if N == 47:\n        return 34\n    if N == 48:\n        return 35\n    if N == 49:\n        return 36\n    if N == 50:\n        return 37\n    if N == 51:\n        return 38\n    if N == 52:\n        return 39\n    if N == 53:\n        return 40\n    if N == 54:\n        return 41\n    if N == 55:\n        return 42\n    if N == 56:\n        return 43\n    if N == 57:\n        return 44\n    if N == 58:\n        return 45\n    if N == 59:\n        return 46\n    if N == 60:\n        return 47\n    if N == 61:\n        return 48\n    if N == 62:\n        return 49\n    if N == 63:\n        return 50\n    if N == 64:\n        return 51\n    if N == 65:\n        return 52\n    if N == 66:\n        return 53\n    if N == 67:\n        return 54\n    if N == 68:\n        return 55\n    if N == 69:\n        return 56\n    if N == 70:\n        return 57\n    if N == 71:\n        return 58\n    if N == 72:\n        return 59\n    if N == 73:\n        return 60\n    if N == 74:\n        return 61\n    if N == 75:\n        return 62\n    if N == 76:\n        return 63\n    if N == 77:\n        return 64\n    if N == 78:\n        return 65\n    if N == 79:\n        return 66\n    if N == 80:\n        return 67\n    if N == 81:\n        return 68\n    if N == 82:\n        return 69\n    if N == 83:\n        return 70\n    if N == 84:\n        return 71\n    if N == 85:\n        return 72\n    if N == 86:\n        return 73\n    if N == 87:\n        return 74\n    if N == 88:\n        return 75\n    if N == 89:\n        return 76\n    if N == 90:\n        return 77\n    if N == 91:\n        return 78\n    if N == 92:\n        return 79\n    if N == 93:\n        return 80\n    if N == 94:\n        return 81\n    if N == 95:\n        return 82\n    if N == 96:\n        return 83\n    if N == 97:\n        return 84\n    if N == 98:\n        return 85\n    if N == 99:\n        return 86\n    if N == 100:\n        return 87\n    if N == 101:\n        return 88\n    if N == 102:\n        return 89\n    if N == 103:\n        return 90\n    if N == 104:\n        return 91\n    if N == 105:\n        return 92\n    if N == 106:\n        return 93\n    if N == 107:\n        return 94\n    if N == 108:\n        return 95\n    if N == 109:\n        return 96\n    if N == 110:\n        return 97\n    if N == 111:\n        return 98\n    if N == 112:\n        return 99\n    if N == 113:\n        return 100\n    if N == 114:\n        return 101\n    if N == 115:\n        return 102\n    if N == 116:\n        return 103\n    if N == 117:\n        return 104\n    if N == 118:\n        return 105\n    if N == 119:\n        return 106\n    if N == 120:\n        return 107\n    if N == 121:\n        return 108\n    if N == 122:\n        return 109\n    if N == 123:\n        return 110\n    if N == 124:\n        return 111\n    if N == 125:\n        return 112\n    if N == 126:\n        return 113\n    if N == 127:\n        return 114\n    if N == 128:\n        return 115\n    if N == 129:\n        return 116\n    if N == 130:\n        return 117\n    if N == 131:\n        return 118\n    if N == 132:\n        return 119\n    if N == 133:\n        return 120\n    if N == 134:\n        return 121\n    if N == 135:\n        return 122\n    if N == 136:\n        return 123\n    if N == 137:\n        return 124\n    if N == 138:\n        return 125\n    if N == 139:\n        return 126\n    if N == 140:\n        return 127\n    if N == 141:\n        return 128\n    if N == 142:\n        return 129\n    if N == 143:\n        return 130\n    if N == 144:\n        return 131\n    if N == 145:\n        return 132\n    if N == 146:\n        return 133\n    if N == 147:\n        return 134\n    if N == 148:\n        return 135\n    if N == 149:\n        return 136\n    if N == 150:\n        return 137\n    if N == 151:\n        return 138\n    if N == 152:\n        return 139\n    if N == 153:\n        return 140\n    if N == 154:\n        return 141\n    if N == 155:\n        return 142\n    if N == 156:\n        return 143\n    if N == 157:\n        return 144\n    if N == 158:\n        return 145\n    if N == 159:\n        return 146\n    if N == 160:\n        return 147\n    if N == 161:\n        return 148\n    if N == 162:\n        return 149\n    if N == 163:\n        return 150\n    if N == 164:\n        return 151\n    if N == 165:\n        return 152\n    if N == 166:\n        return 153\n    if N == 167:\n        return 154\n    if N == 168:\n        return 155\n    if N == 169:\n        return 156\n    if N == 170:\n        return 157\n    if N == 171:\n        return 158\n    if N == 172:\n        return 159\n    if N == 173:\n        return 160\n    if N == 174:\n        return 161\n    if N == 175:\n        return 162\n    if N == 176:\n        return 163\n    if N == 177:\n        return 164\n    if N == 178:\n        return 165\n    if N == 179:\n        return 166\n    if N == 180:\n        return 167\n    if N == 181:\n        return 168"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 1:\n        return 1\n    i = 1\n    while i <= n:\n        i += 1\n        if n > i:\n            continue\n        elif n == i:\n            return i\n        else:\n            if abs(i-n) < abs(i-n-1):\n                return i\n            else:\n                return i-1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        length = length + len(i)\n    print(length)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max1:\n            max1 = len(list1[i])\n    return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    return max(len(item) for item in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max1:\n            max2 = max1\n            max1 = len(list1[i])\n        elif len(list1[i]) > max2:\n            max2 = len(list1[i])\n    print(max1)\n    print(max2)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word = 0\n    for i in list1:\n        if len(i) > max_word:\n            max_word = len(i)\n    return max_word\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    if len(list1) == 0:\n        print(\"List is empty!\")\n    else:\n        for i in list1:\n            if len(i) > longest:\n                longest = len(i)\n    print(f\"The longest word is: {list1[0]}\")\n    print(f\"The length of the longest word is: {longest}\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    m=0\n    for i in list1:\n        if len(i)>m:\n            m=len(i)\n    return m\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # len(s) : Get the length of s.\n    \n    def longestword(word,s,n):\n        if(s==None):\n            return n\n        if(word == s):\n            return n+1\n        return max(n,longestword(word,s[1:],n+1))\n        \n    s = input()\n    s=s.split()\n    print(longestword(s[0],s,0))\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list(list1)\n    max_len = 0\n    max_word = \"\"\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_word = list1[i]\n    print(max_len)\n    print(max_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_max = 0\n    for i in list1:\n        if len(i) > len_max:\n            len_max = len(i)\n    return len_max\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub = ''\n    if type(sub_str)!= str:\n        return False\n    for ele in str1:\n        if ele in sub_str:\n            sub = ele\n            break\n    return sub\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            print(\"YES\",s)\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # use a for loop and if statement to check if sub_str is in str1\n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for val in str1:\n        if val == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #1st way\n    # return any(sub_str in item for item in str1)\n    #2nd way\n    return any(sub_str in item for item in str1 if type(item) is str)\n    #3rd way\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # code here\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 3 == 0) or (n % 5 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    else:\n        while n!= 0:\n            if n % 2 == 0:\n                n = n/2\n            else:\n                n = (3 * n) + 1\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n%2==0 and n%3==0) or (n%2==1 and n%3==1) or (n%2==0 and n%3==1) or (n%2==1 and n%3==0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    c = n - 1\n    while c!= 0:\n        if n % c == 0:\n            return False\n        c -= 1\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    factors = get_factors(n)\n    # 1 is not an undulating number\n    if len(factors) == 1:\n        return False\n    for i in range(len(factors)-1):\n        if factors[i]!= factors[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        for i in range(3,int(math.sqrt(n) + 1)): \n            if n % i == 0: \n                return False\n        return True \n        \nprint(is_undulating(9)) \nprint(is_undulating(16)) \nprint(is_undulating(27)) \nprint(is_undulating(48)) \nprint(is_undulating(81)) \nprint(is_undulating(840)) \nprint(is_undulating(999)) \nprint(is_undulating(1000)) \nprint(is_undulating(1331)) \nprint(is_undulating(1599)) \nprint(is_undulating(3168)) \nprint(is_undulating(3653)) \nprint(is_undulating(3651)) \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return True\n    \nprint(is_undulating(3))\nprint(is_undulating(9))\nprint(is_undulating(1))\nprint(is_undulating(11))\nprint(is_undulating(0))\nprint(is_undulating(-1))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return True\n    for i in range(1,len(s)):\n        if s[i-1] == s[i]:\n            return False\n        if s[i] == s[i-1] - 1:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    while len(n) > 1:\n        n = n[1:]\n    if n == \"0\":\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\nprint(power(2,5))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    else:\n        return a * power(a,b - 1)\nprint(power(2,3))\nprint(power(3,2))\nprint(power(4,3))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c=1\n    for i in range(b):\n        c=c*a\n    return c\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(n):\n            if test_list[i][1] > test_list[j][1]:\n                temp = test_list[i]\n                test_list[i] = test_list[j]\n                test_list[j] = temp\n    return test_list[0]\n    \n    \ndef index_minimum_sorting(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list[0]\n    \n    \ndef index_minimum_sort_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list[0]\n    \n    \ndef index_minimum_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n    \n    \ndef index_minimum_custom(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1, 2))\n    \n    \ndef index_minimum_custom_values(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1, 2, 3))\n    \n    \ndef index_minimum_custom_values_sorting(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return min(test_list, key = itemgetter(1, 2, 3))\n    \n    \ndef index_minimum_custom_values_sorting_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3))\n    \n    \ndef index_minimum_sorting_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1))\n    \n    \ndef index_minimum_custom_sorting_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2))\n    \n    \ndef index_minimum_sorting_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6, 7))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6, 7, 8))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6, 7, 8, 9))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = lambda x : x[1])\n    return test_list.sort(key = itemgetter(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    \n    \ndef index_minimum_custom_values_sorting_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort_sort(test"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = 0\n    min_index = 0\n    index_min_element = (0,0)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create a dictonary\n    index_dict = {}\n    # Loop over the test_list\n    for index, element in enumerate(test_list):\n        # Set key as the index and the value as the element\n        index_dict[index] = element\n    # Sort the key list by its value in ascending order\n    sorted_index = sorted(index_dict.keys(), key=itemgetter(1))\n    # Return the tuple with the minimum second value\n    return(sorted_index[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in test_list:\n        if i[0] < minimum[0] and i[1] < minimum[1]:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    for i in sorted_list:\n        print (i)\nindex_minimum([('physics', 1), ('chemistry', 3), ('maths', 9), ('english', 2)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = len(test_list[0]) - 1\n    result = test_list[0][1]\n    for tup in test_list:\n        if min_val > tup[1]:\n            min_val = tup[1]\n            result = tup[0]\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    res = sorted(test_list, key=itemgetter(1, 0))\n    return res[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # map function in python:\n    # map(function, iterables) -> map object\n    # we can pass in multiple iterables and get the result back as a map object\n    # map object is an iterator, so we can pass in another iterator and get back the result as a map object\n    # map object is a list and we can access values from the map object by its index\n    # we can use the map function to return only the index\n    # map returns an iterator.\n    # map(function, iterables)\n    # If the iterable contains more than one item, map must be called to each item\n    # If the iterable contains a single item, map should be called with the function itemgetter\n    # If the iterable contains multiple items, map should be called with the function itemgetter once for each item\n    # map(itemgetter(2), [(1,3), (4,5), (6,7)]) => [(1, 4), (4, 5), (6, 7)]\n    # map(itemgetter(2), (1,3,4,5,6,7)) => (1, 4, 6, 7)\n    # map(itemgetter(2), [1, 3, 4, 5, 6, 7]) => (1, 4, 6, 7)\n    # map(itemgetter(2), (\"a\", \"b\", \"c\", \"d\")) => ('a', 'b', 'c', 'd')\n    \n    # def func(tup):\n    #     return tup[1]\n    # test_list = [(1, 3), (4, 5), (6, 7)]\n    # result = map(func, test_list)\n    # print(list(result))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    n = len(test_list)\n    minimum = test_list[0]\n    for i in range(1, n):\n        if minimum[1] > test_list[i][1]:\n            minimum = test_list[i]\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for elem in lst:\n        if len(elem) < min_len:\n            min_len = len(elem)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = len(lst)\n    for elem in lst:\n        if len(elem) < min_lst:\n            min_lst = len(elem)\n    return min_lst\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i)<min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = len(lst[0])\n    \n    for x in lst:\n        if len(x) < min_len:\n            min_len = len(x)\n            \n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    x=0\n    for y in range(len(lst)):\n        if len(lst[y])<x:\n            x=len(lst[y])\n    return x\ndef Find_Min_Length_1(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    x=float('inf')\n    for y in range(len(lst)):\n        if len(lst[y])<x:\n            x=len(lst[y])\n    return x\ndef Check_Pair(lst):\n    '''\n    Write a python function to check whether a given list of list is a pair or not.\n    '''\n    temp=[]\n    for x in range(len(lst)):\n        temp.append(lst[x][0])\n        temp.append(lst[x][1])\n    temp=set(temp)\n    if len(temp)==2:\n        return True\n    else:\n        return False\ndef Find_Pair(lst):\n    '''\n    Write a python function to check whether a given list of list is a pair or not.\n    '''\n    temp=[]\n    for x in range(len(lst)):\n        temp.append(lst[x][0])\n        temp.append(lst[x][1])\n    temp=set(temp)\n    if len(temp)==2:\n        return lst\n    else:\n        return []\ndef Print_List(lst):\n    '''\n    Write a python function to print a given list.\n    '''\n    for x in lst:\n        print(x)\ndef Get_Mean_List(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef Get_Mean_List_1(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef Get_Mean_List_2(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef Get_List_Mean(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=[]\n    for x in lst:\n        temp.append(x)\n    return Get_Mean_List(temp)\ndef Get_List_Mean_1(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=[]\n    for x in lst:\n        temp.append(x)\n    return Get_Mean_List_1(temp)\ndef Get_List_Mean_2(lst):\n    '''\n    Write a python function to get the mean of a list of numbers.\n    '''\n    temp=[]\n    for x in lst:\n        temp.append(x)\n    return Get_Mean_List_2(temp)\ndef List_Sum(lst):\n    '''\n    Write a python function to get the sum of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp\ndef List_Sum_1(lst):\n    '''\n    Write a python function to get the sum of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp\ndef List_Sum_2(lst):\n    '''\n    Write a python function to get the sum of a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp\ndef List_Max(lst):\n    '''\n    Write a python function to get the maximum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x>temp:\n            temp=x\n    return temp\ndef List_Max_1(lst):\n    '''\n    Write a python function to get the maximum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x>temp:\n            temp=x\n    return temp\ndef List_Max_2(lst):\n    '''\n    Write a python function to get the maximum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x>temp:\n            temp=x\n    return temp\ndef List_Min(lst):\n    '''\n    Write a python function to get the minimum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x<temp:\n            temp=x\n    return temp\ndef List_Min_1(lst):\n    '''\n    Write a python function to get the minimum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x<temp:\n            temp=x\n    return temp\ndef List_Min_2(lst):\n    '''\n    Write a python function to get the minimum value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        if x<temp:\n            temp=x\n    return temp\ndef List_Product(lst):\n    '''\n    Write a python function to get the product of a list of numbers.\n    '''\n    temp=1\n    for x in lst:\n        temp=temp*x\n    return temp\ndef List_Product_1(lst):\n    '''\n    Write a python function to get the product of a list of numbers.\n    '''\n    temp=1\n    for x in lst:\n        temp=temp*x\n    return temp\ndef List_Product_2(lst):\n    '''\n    Write a python function to get the product of a list of numbers.\n    '''\n    temp=1\n    for x in lst:\n        temp=temp*x\n    return temp\ndef List_Average(lst):\n    '''\n    Write a python function to get the average value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef List_Average_1(lst):\n    '''\n    Write a python function to get the average value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef List_Average_2(lst):\n    '''\n    Write a python function to get the average value in a list of numbers.\n    '''\n    temp=0\n    for x in lst:\n        temp=temp+x\n    return temp/len(lst)\ndef List_Median(lst):\n    '''\n    Write a python function to get the median value in a list of numbers.\n    '''\n    temp=0\n    lst1=[]\n    for x in lst:\n        lst1.append(x)\n    lst1.sort()\n    length=len(lst1)\n    if length%2==0:\n        if length==2:\n            if lst1[0]>lst1[1]:\n                return lst1[1]\n            else:\n                return lst1[0]\n        else:\n            return (lst1[int(length/2)]+lst1[int(length/2)-1])/2\n    else:\n        if length==1:\n            return lst1[0]\n        else:\n            return (lst1[int(length/2)]+lst1[int(length/2)-1])/2\ndef List_Median_1(lst):\n    '''\n    Write a python function to get the median value in a list of numbers"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for i in lst:\n        lengths.append(len(i))\n    lengths.sort()\n    return lengths[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst=[]\n    for i in lst:\n        min_lst.append(len(i))\n    min_lst.sort()\n    return min(min_lst)"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = len(lst[0])\n    for i in range(1,len(lst)):\n        if mini > len(lst[i]):\n            mini = len(lst[i])\n    return mini\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=0\n    for i in range(0,len(lst)):\n        if len(lst[i])<min_length:\n            min_length=len(lst[i])\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n%i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            div += 1\n    print(\"The number of divisors of\",n,\"is\",div)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n    \ndef get_first_key(key):\n    '''\n    Write a python function to get the first key from a dictionary.\n    '''\n    return key[0]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    print('The number of divisors of the given integer is ', count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 2\n    if n % (int(math.sqrt(n)))!= 0:\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + divisor(n - 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    while i<=n:\n        if n%i==0:\n            i+=1\n            continue\n        else:\n            return i\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\n    \n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    temp = []\n    freq = {}\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    for i in temp:\n        freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        if x in d.keys():\n            d[x] += 1\n        else:\n            d[x] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    if type(list1) == type([]) and len(list1) > 0:\n        for item in list1:\n            if type(item) == type([]):\n                freq = frequency_lists(item)\n            else:\n                if freq.has_key(item):\n                    freq[item] = freq[item] + 1\n                else:\n                    freq[item] = 1\n    else:\n        if list1 == None:\n            return\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    freq = Counter()\n    for sublist in list1:\n        for item in sublist:\n            freq[item] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d={}\n    for elem in list1:\n        if elem in d:\n            d[elem]+=1\n        else:\n            d[elem]=1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dict.keys():\n                freq_dict[list1[i][j]] += 1\n            else:\n                freq_dict[list1[i][j]] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dict:\n                freq_dict[list1[i][j]] = freq_dict[list1[i][j]] + 1\n            else:\n                freq_dict[list1[i][j]] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # st = set(list1)\n    # fq = {}\n    # for i in st:\n    #     fq[i] = list1.count(i)\n    # return fq\n    return dict(collections.Counter(list1))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j not in freq:\n                freq[j] = 1\n            else:\n                freq[j] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        for item in l:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers * len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # return multiply_function(numbers)\n    \n    # return [x * y for x, y in zip(numbers, numbers[1:])]\n    # return numbers * numbers[1:]\n    \n    # return sum(numbers) / len(numbers)\n    \n    # return 1 / sum(1 / x for x in numbers)\n    # return 1 / (sum(1 / x for x in numbers) / len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_result = 1\n    for num in numbers:\n        mul_result = mul_result * num\n    return mul_result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    result = result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for i in range(len(numbers)):\n        sum = sum + numbers[i]\n    return sum\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = numbers.copy()\n    len_numbers = len(numbers)\n    for i in range(len_numbers):\n        numbers[i] *= i + 1\n    numbers = numbers / len_numbers\n    return numbers\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_binary(int(n/2)) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n==0):\n        return '0'\n    number=n\n    binary=''\n    while (number):\n        binary = str(number%2) + binary\n        number=number/2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n == 0):\n        return \"0\"\n    x = decimal_to_binary(n // 2)\n    if(n % 2 == 0):\n        return x\n    else:\n        return x + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return ''.join(map(str, bin(n).split('b')[1:][::-1]))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \"0b\"+''.join([bin(int(x)).replace('0b','') for x in reversed(str(bin(n))[2:])])\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n = n // 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # print(type(n))\n    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b')\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initiate binary \n    binary = ''\n    if n == 0:\n        return binary\n    # loop through n and add its decimal equivalent to the binary\n    while n!= 0:\n        if n % 2 == 1:\n            binary += str(1)\n        else:\n            binary += str(0)\n        n = n // 2\n    # reverse the binary and return it\n    return binary[::-1]\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        This is a simple if/else method. First, if the number is even, we multiply it by 2 and recurse.\n        Then, if the number is odd, we multiply it by 3 and recurse.\n        '''\n        if num%2==0:\n            return is_palindrome(num//2)\n        elif num%2==1:\n            return is_palindrome(num*3+1)\n    while not is_palindrome(num):\n        num+=1\n    return num\n    \ndef next_smallest_palindrome_optimized(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        This is a simple if/else method. First, if the number is even, we multiply it by 2 and recurse.\n        Then, if the number is odd, we multiply it by 3 and recurse.\n        '''\n        if num%2==0:\n            return is_palindrome(num//2)\n        elif num%2==1:\n            return is_palindrome(num*3+1)\n    while not is_palindrome(num):\n        num+=2\n    return num\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        This is a simple if/else method. First, if the number is even, we multiply it by 2 and recurse.\n        Then, if the number is odd, we multiply it by 3 and recurse.\n        '''\n        if num%2==0:\n            return is_palindrome(num//2)\n        elif num%2==1:\n            return is_palindrome(num*3+1)\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    original_num = num\n    while num > 0:\n        num = (num * 10) + (num % 10) - 1\n        # print(num)\n        # if num > 0:\n        #     print(num)\n        #     print(str(num)[:6] + str(num)[-2:])\n        if num >= 10 and num <= 26 and num!= original_num:\n            print(num)\n            return num\n        if num < 10 and num!= original_num:\n            print(num)\n            return num\n        # print(num)\n        # print(str(num)[:6] + str(num)[-2:])\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    elif num % 10 < 9:\n        return num - 9\n    else:\n        return num - 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    print(str_num)\n    print(str_num[::-1])\n    if str_num == str_num[::-1]:\n        return num\n    for i in range(len(str_num)):\n        if str_num[i]!= str_num[len(str_num)-1-i]:\n            break\n    if str_num[i]!= str_num[len(str_num)-1-i]:\n        print(\"Not possible\")\n        sys.exit()\n    else:\n        return int(str_num[:i+1] + str_num[len(str_num)-i:])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Time O(n) | Space O(1)\n    # First sort nums, since next palindrome should be lexicographically smaller\n    nums = sorted(list(map(str, num)))\n    \n    # If this is an odd number, we need to add 1\n    if len(nums) % 2 == 1:\n        nums.insert(1, \"9\")\n    \n    # iterate through nums and find the next palindrome\n    i = len(nums) - 1\n    while i >= 1 and nums[i] == nums[i-1]:\n        i -= 1\n    if i == 0:\n        # we never find a palindrome, so the next palindrome is itself\n        return nums[i] + nums[i]\n    return nums[i] + nums[i-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    n_num = str(num)\n    n_num_len = len(n_num)\n    n_num_palindrome = n_num + n_num + n_num\n    \n    if n_num_len == 1:\n        return 1\n    if n_num_len == 2:\n        return int(n_num_palindrome[0])\n    if n_num_len == 3:\n        return int(n_num_palindrome[0]+n_num_palindrome[1])\n    if n_num_len == 4:\n        return int(n_num_palindrome[0]+n_num_palindrome[2])\n    if n_num_len == 5:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[3])\n    if n_num_len == 6:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3])\n    if n_num_len == 7:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4])\n    if n_num_len == 8:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5])\n    if n_num_len == 9:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6])\n    if n_num_len == 10:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7])\n    if n_num_len == 11:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8])\n    if n_num_len == 12:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9])\n    if n_num_len == 13:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10])\n    if n_num_len == 14:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11])\n    if n_num_len == 15:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11]+n_num_palindrome[12])\n    if n_num_len == 16:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11]+n_num_palindrome[12]+n_num_palindrome[13])\n    if n_num_len == 17:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11]+n_num_palindrome[12]+n_num_palindrome[13]+n_num_palindrome[14])\n    if n_num_len == 18:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11]+n_num_palindrome[12]+n_num_palindrome[13]+n_num_palindrome[14]+n_num_palindrome[15])\n    if n_num_len == 19:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num_palindrome[8]+n_num_palindrome[9]+n_num_palindrome[10]+n_num_palindrome[11]+n_num_palindrome[12]+n_num_palindrome[13]+n_num_palindrome[14]+n_num_palindrome[15]+n_num_palindrome[16])\n    if n_num_len == 20:\n        return int(n_num_palindrome[0]+n_num_palindrome[1]+n_num_palindrome[2]+n_num_palindrome[3]+n_num_palindrome[4]+n_num_palindrome[5]+n_num_palindrome[6]+n_num_palindrome[7]+n_num"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #from largest to smallest\n    lower_bound = -1\n    upper_bound = num\n    while lower_bound + 1 < upper_bound:\n        middle = (upper_bound + lower_bound) // 2\n        if is_palindrome(middle):\n            return middle\n        elif middle > lower_bound:\n            lower_bound = middle\n        else:\n            upper_bound = middle\n    #raise ValueError(\"not found\")\n    return lower_bound\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num = num[::-1]\n    for i in range(0, len(num)):\n        num = num[:i] + num[i+1:]\n        if is_palindrome(num):\n            return int(num)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] < arr[high]:\n            # arr[mid] <= arr[high]\n            high = mid - 1\n        elif arr[mid] > arr[high]:\n            # arr[mid] >= arr[high]\n            low = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= arr[mid]:\n                return mid\n            else:\n                high = mid - 1\n    \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    \n    for i in range(0, len(arr)-1):\n        if k > 0:\n            if arr[i] < arr[i+1]:\n                k -= 1\n        elif k < 0:\n            if arr[i] > arr[i+1]:\n                k += 1\n        else:\n            return arr[i]\n    \n    if k > 0:\n        return arr[len(arr)-1]\n    else:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return k\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # low = 0\n    # high = len(arr) - 1\n    # mid = 0\n    # while low <= high:\n    #     mid = (low + high) // 2\n    #     if arr[mid] < k:\n    #         low = mid + 1\n    #     elif arr[mid] > k:\n    #         high = mid - 1\n    #     else:\n    #         return arr[mid]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return -1\n    return kth_element_rec(arr, 0, n-1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def binary_search(arr, key):\n        l, r = 0, len(arr) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if arr[mid] == key:\n                return mid\n            elif arr[mid] < key:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return -1\n    \n    return binary_search(arr, k - 1) + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    while i < len(arr):\n        if i + k - 1 < len(arr) and i + k - 1 >= 0:\n            if arr[i] == arr[i+k-1]:\n                return arr[i]\n        i += 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return -1\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0] == '_':\n        return word.title()\n    else:\n        return word.replace('_','')\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for c in word:\n        if c == '_':\n            res +=''\n        else:\n            res += c.title()\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word[0]\n    rest_of_words = word[1:]\n    return first_word + \"\".join(map(str.capitalize, rest_of_words))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return_value = word[0].upper()\n    for i in word[1:]:\n        return_value += i.lower()\n    return return_value\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    result = ''\n    for i in range(len(word)):\n        if i!= 0:\n            result += word[i][0].upper() + word[i][1:]\n        else:\n            result += word[i]\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(word.title() for word in word.split(\"_\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = list(word)\n    for i in range(len(word)):\n        if word[i] == '_':\n            word[i] = word[i+1].upper()\n    word = ''.join(word)\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.title() if i == 0 else word[0].upper() + word[1:] for i, word in enumerate(word.split('_'))])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '-' in word:\n        return ''.join([w.capitalize() for w in word.split('-')])\n    else:\n        return word.capitalize()\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = []\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n-m) % 2 == 0:\n        return 0\n    return (n-m + 1) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n        ans = ans + 1\n    ans = ans + m\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    return m + m\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==0 or m==0: \n        return 0\n    if n==1 or m==1: \n        return 1\n    if n>1 and m>1: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return 0\n    elif n == 0:\n        return m\n    elif m == 0:\n        return n\n    return eulerian_num(n - m, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Traverse the graph in a dfs manner and \n    # put the edge in every set so that no two edges are \n    # traversed at the same time.\n    \n    visited = []\n    count = 0\n    \n    def dfs(v,visited):\n        if(visited[v] == 0):\n            visited[v] = 1\n            dfs(m, visited)\n            dfs(n, visited)\n    \n    # To make sure the graph is Eulerian we need to \n    # visit all the vertices of the graph only once.\n    \n    for i in range(n):\n        visited.append(0)\n    \n    for i in range(n):\n        dfs(i,visited)\n        \n    for i in range(n):\n        if(visited[i] == 0):\n            count = count + 1\n    \n    return count\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # read input\n    n, m = map(int, input().split())\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError\n    if n <= 0 or m <= 0:\n        raise ValueError\n    if n == 1 or m == 1:\n        return n*m\n    a = 0\n    for i in range(1, n+1):\n        if i <= m:\n            a = a + i\n        else:\n            a = a + n-i\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n, m+1):\n        a += i * i\n    return a\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda sublist: sorted(sublist))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort all the strings in the input list\n    input_list.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n    # -------------------\n    # Uncomment below\n    # -------------------\n    #sublist_sorted = []\n    #for i in input_list:\n    #    sublist_sorted.append(sorted(i))\n    #return sublist_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create an empty list\n    new_list = []\n    # loop over the list of lists\n    for i in range(0, len(input_list)):\n        # sort each list using the sorted built-in function\n        new_list.append(sorted(input_list[i]))\n    # return the sorted list of lists\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_list = []\n    \n    for i in range(len(input_list)):\n        if input_list[i]:\n            sublist_list.append(input_list[i])\n    \n    for i in range(len(sublist_list)):\n        sublist_list[i] = sorted(sublist_list[i])\n    \n    input_list.clear()\n    input_list = sublist_list\n    sublist_list.clear()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #start by creating a new list to store all of the sorted sublist in\n    output_list = []\n    for l in input_list:\n        #now sort each sublist in a list\n        output_list.append(sorted(l))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check if empty\n    if not input_list:\n        return input_list\n    else:\n        # Process list, sort sublists\n        for i in range(0, len(input_list)):\n            input_list[i] = sort_sublists(input_list[i])\n        # Sort sublists\n        for i in range(0, len(input_list)):\n            input_list[i].sort()\n        return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return lst.count(True)\n    \n    \ndef find(lst,n):   \n    '''\n    Write a python function to find the first occurence of an element in a list.\n    '''\n    \n    return lst.index(n)\n    \n    \ndef filter_list(lst,n):   \n    '''\n    Write a python function to filter the list based on the condition.\n    '''\n    \n    new_list = []\n    for i in lst:\n        if i!= n:\n            new_list.append(i)\n    \n    return new_list\n    \n    \ndef map_list(lst):   \n    '''\n    Write a python function to map the list.\n    '''\n    \n    return list(map(lambda x: x*2, lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count +=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(lambda x: x, lst)))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n    \ndef find_the_looser(lst):\n    '''\n    Write a python function to find the person with the least number of false boolean in the given list.\n    '''\n    least_falses = lst[0]\n    for i in lst:\n        if i < least_falses:\n            least_falses = i\n    for i in range(len(lst)):\n        if lst[i] == least_falses:\n            return i\n            \n            \ndef even_or_odd(lst):\n    '''\n    Write a python function to find the person with the least number of even or odd in the given list.\n    '''\n    even_odd = lst[0]\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in range(len(lst)):\n        if lst[i] == even_odd:\n            return i\n            \n        \ndef palindrome(word):\n    '''\n    Write a python function to check whether the given word is palindrome or not.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-1 - i]:\n            return False\n    return True\n            \n            \ndef inverse_rotation(word):\n    '''\n    Write a python function to reverse the given word.\n    '''\n    new_word = \"\"\n    for i in range(len(word)):\n        new_word = word[-1 - i] + new_word\n    return new_word\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = test_tup + (test_list[i],)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup[i] = test_tup[i] + test_list[i]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1=list(num1)\n    num2=list(num2)\n    num3=list(num3)\n    num1_sort=sorted(num1)\n    num2_sort=sorted(num2)\n    num3_sort=sorted(num3)\n    newlist=num1_sort+num2_sort+num3_sort\n    return(newlist)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0 and len(num2) == 0 and len(num3) == 0:\n        return []\n    if len(num1) == 0:\n        return num2\n    if len(num2) == 0:\n        return num1\n    if len(num3) == 0:\n        return num1 + num2\n    if num1[0] < num2[0]:\n        return num1 + num2\n    if num1[0] < num3[0]:\n        return num1 + num3\n    if num1[0] < num2[0] and num1[0] < num3[0]:\n        return num1\n    if num2[0] < num3[0]:\n        return num2 + num3\n    if num2[0] < num1[0] and num2[0] < num3[0]:\n        return num2\n    if num3[0] < num1[0]:\n        return num3 + num1\n    return num1 + num2 + num3\n    \ndef merge_sorted_list_naive(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list in the most efficient way.\n    '''\n    if len(num1) == 0 and len(num2) == 0 and len(num3) == 0:\n        return []\n    if len(num1) == 0:\n        return num2\n    if len(num2) == 0:\n        return num1\n    if len(num3) == 0:\n        return num1 + num2\n    if num1[0] < num2[0]:\n        return num1 + num2\n    if num1[0] < num3[0]:\n        return num1 + num3\n    if num2[0] < num3[0]:\n        return num2 + num3\n    if num2[0] < num1[0]:\n        return num2\n    if num3[0] < num1[0]:\n        return num3 + num1\n    return num1 + num2 + num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #print(num1,num2,num3)\n    h = []\n    for i in num1:\n        heapq.heappush(h,i)\n    for j in num2:\n        if j<heapq.heappop(h):\n            heapq.heappush(h,j)\n    for k in num3:\n        if k<heapq.heappop(h):\n            heapq.heappush(h,k)\n    return h\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    \n    num1_set = set(num1)\n    num2_set = set(num2)\n    num3_set = set(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == [] or num2 == [] or num3 == []:\n        return num1 + num2 + num3\n    # If the element of num1 is smaller than num2, then put num1 in first place\n    if num1[0] < num2[0]:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n    # If the element of num2 is smaller than num1, then put num2 in first place\n    elif num2[0] < num1[0]:\n        return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n    # If the element of num3 is smaller than num2, then put num3 in first place\n    elif num3[0] < num2[0]:\n        return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n    # Merge num1 and num2 and put them in first place\n    else:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0]:\n            sorted_list.append(num1[0])\n            num1.remove(num1[0])\n        else:\n            sorted_list.append(num2[0])\n            num2.remove(num2[0])\n        if len(num1) == 0 and len(num2) == 0:\n            break\n    while len(num1) > 0:\n        sorted_list.append(num1[0])\n        num1.remove(num1[0])\n    while len(num2) > 0:\n        sorted_list.append(num2[0])\n        num2.remove(num2[0])\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=[]\n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        if len(num1)==0:\n            a.append(num2.pop(0))\n        elif len(num2)==0:\n            a.append(num1.pop(0))\n        elif len(num3)==0:\n            a.append(num1.pop(0))\n            a.append(num2.pop(0))\n        else:\n            if num1[0]<num2[0]:\n                a.append(num1.pop(0))\n            else:\n                a.append(num2.pop(0))\n    return a\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # num1=[1,3,4]\n    # num2=[2,5,6]\n    # num3=[2,3]\n    # output = num1 + num2 + num3\n    output = []\n    while len(num1)!= 0 and len(num2)!= 0 and len(num3)!= 0:\n        if num1[0] < num2[0]:\n            output.append(num1.pop(0))\n        else:\n            output.append(num2.pop(0))\n    while len(num1)!= 0:\n        output.append(num1.pop(0))\n    while len(num2)!= 0:\n        output.append(num2.pop(0))\n    while len(num3)!= 0:\n        output.append(num3.pop(0))\n    return output\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = list()\n    heapq.heapify(merged_list)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            heapq.heappush(merged_list,num1.pop(0))\n        else:\n            heapq.heappush(merged_list,num2.pop(0))\n    while num1:\n        heapq.heappush(merged_list,num1.pop(0))\n    while num2:\n        heapq.heappush(merged_list,num2.pop(0))\n    while num3:\n        heapq.heappush(merged_list,num3.pop(0))\n    return merged_list\ndef merge_sorted_list_optimized(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    You can assume that the list is already sorted.\n    '''\n    merged_list = list()\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            merged_list.append(num1.pop(0))\n        else:\n            merged_list.append(num2.pop(0))\n    while num1:\n        merged_list.append(num1.pop(0))\n    while num2:\n        merged_list.append(num2.pop(0))\n    while num3:\n        merged_list.append(num3.pop(0))\n    return merged_list\ndef sort_list(my_list):\n    '''\n    Write a function to sort the items in a list.\n    The function should return a new sorted list.\n    '''\n    heapq.heapify(my_list)\n    while len(my_list) > 1:\n        tmp1 = heapq.heappop(my_list)\n        tmp2 = heapq.heappop(my_list)\n        heapq.heappush(my_list,tmp1+tmp2)\n    return my_list\ndef sort_list_optimized(my_list):\n    '''\n    Write a function to sort the items in a list.\n    The function should return a new sorted list.\n    '''\n    merged_list = list()\n    while my_list:\n        heapq.heappush(merged_list,my_list.pop(0))\n    while len(merged_list) > 1:\n        tmp1 = heapq.heappop(merged_list)\n        tmp2 = heapq.heappop(merged_list)\n        heapq.heappush(merged_list,tmp1+tmp2)\n    return merged_list\ndef find_duplicate(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    '''\n    for i in range(len(nums)):\n        if i!= nums[i]:\n            return True\n    return False\ndef find_duplicate_optimized(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    for i in range(len(nums)):\n        if i!= nums[i]-1:\n            return True\n    return False\ndef find_duplicate_optimized_binary(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    def _get_index(val):\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < val:\n                left = mid + 1\n            elif nums[mid] > val:\n                right = mid\n            else:\n                return mid\n        return -1\n    for i in range(len(nums)):\n        idx = _get_index(nums[i])\n        if idx!= -1 and idx!= i:\n            return True\n    return False\ndef find_duplicate_optimized_binary2(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    def _get_index(val):\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < val:\n                left = mid + 1\n            elif nums[mid] > val:\n                right = mid\n            else:\n                return mid\n        return -1\n    for i in range(len(nums)):\n        idx = _get_index(nums[i])\n        if idx!= -1 and idx!= i:\n            return True\n    return False\ndef find_duplicate_optimized_binary3(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] < nums[right]:\n            right = mid\n        elif nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    for i in range(len(nums)):\n        if nums[i] == nums[right]:\n            return True\n    return False\ndef find_duplicate_optimized_binary4(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\ndef find_duplicate_optimized_binary5(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\ndef find_duplicate_optimized_binary6(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] < nums[right]:\n            right = mid\n        elif nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\ndef find_duplicate_optimized_binary7(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    dic = {}\n    for num in nums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\ndef find_duplicate_optimized_binary8(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    '''\n    dic = {}\n    for num in nums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\ndef find_duplicate_optimized_binary9(nums):\n    '''\n    Write a function to determine if there are any duplicates in a sorted list.\n    You can assume that the list is sorted.\n    ''"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    s=s.replace(' ','')\n    s=s.split('0')\n    l=len(s)\n    s=s[::-1]\n    count=0\n    for i in range(l):\n        if int(s[i])%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    i = 0\n    while s!= '':\n        if(i%2!= 0):\n            s = s[-1] + s[0:len(s)-1]\n        else:\n            s = s[1:] + s[0]\n        i += 1\n    print(s)\n    return len(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # # Creating an empty list \n    # l=[] \n    # for i in range(n): \n    #     l.append(0) \n    #     \n    # # Traversing the input array \n    # for i in range(len(s)): \n    #     if(int(s[i])%2!=0): \n    #         l[i%n]=l[i%n]+1 \n    \n    # return l \n    \n    return (bin(int(s,2)).count('1')-bin(int(s,2)+1).count('1')) \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('1')-s.count('0')\n    \n    \ndef rotate(s,n): \n    '''\n    Write a python function to rotate a binary string by n positions.\n    '''\n    s = '0' + s\n    n = n % len(s)\n    s = s[n:] + s[:n]\n    return s\n    \ndef partition(s): \n    '''\n    Write a python function to partition a binary string into an array of alternating 0 and 1.\n    '''\n    s = s[::-1]\n    arr = []\n    while s!= '':\n        arr.append(s[:2])\n        s = s[2:]\n    return arr\n    \ndef remove_duplicates(s): \n    '''\n    Write a python function to remove the duplicates from a binary string.\n    '''\n    s = ''.join(set(s))\n    return s\n    \ndef add(a,b): \n    '''\n    Write a python function to add two binary strings.\n    '''\n    return a+b\n    \ndef add_digits(num): \n    '''\n    Write a python function to add digits of a decimal number in binary.\n    '''\n    s = '0b'\n    while num > 0:\n        s += str(num % 2)\n        num = num // 2\n    return s\n    \ndef max_in_windows(arr, size): \n    '''\n    Write a python function to find the maximum element in a sliding window of size N.\n    '''\n    # A queue is used for storing the max element so far.\n    max_queue = deque()\n    for i in range(size):\n        while max_queue and arr[i] > arr[max_queue[-1]]:\n            max_queue.pop()\n        max_queue.append(i)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=str(s)\n    #print(len(s))\n    #print(n)\n    if n<=0:\n        print(s)\n    else:\n        if n%2==1:\n            s=s+'1'\n            s=s[:len(s)-1]\n            print(s)\n            odd_Equivalent(s,n-1)\n        else:\n            s=s+'0'\n            s=s[:len(s)-1]\n            print(s)\n            odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return 2**n - 1\nprint(\"The number of odd numbers in the given binary string after rotation is :\", odd_Equivalent(s, n)) \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    while (n > 0): \n        if (s[n - 1] == '0'): \n            count += 1\n        n = n - 1\n    \n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = s\n    count = 0\n    for i in range(0,n):\n        s = s[1:] + s[0]\n    for i in s:\n        if i == '1':\n            count += 1\n    print(count)\n    return count\n    \ndef odd_Rotate(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[1:] + s[0]\n    for i in range(0,n):\n        s = s[1:] + s[0]\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n    print(count)\n    return count\n    \ndef string_reverse(s): \n    '''\n    Write a python function to find the number of characters in a string in reverse order.\n    '''\n    count = 0\n    for i in range(len(s)-1, -1, -1):\n        if s[i] =='':\n            continue\n        count += 1\n    print(count)\n    return count\n    \ndef string_reverse(s): \n    '''\n    Write a python function to find the number of characters in a string in reverse order.\n    '''\n    count = 0\n    for i in range(len(s)-1, -1, -1):\n        if s[i] =='':\n            continue\n        count += 1\n    print(count)\n    return count\n    \ndef permute_string(s,n): \n    '''\n    Write a python function to find the number of permutations of a string.\n    '''\n    count = 0\n    s = s.replace(' ','')\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                continue\n            else:\n                temp = s[:i] + s[i+1:]\n                temp1 = s[:j] + s[j+1:]\n                if temp in temp1:\n                    count += 1\n    print(count)\n    return count\n    \ndef permute_string(s,n): \n    '''\n    Write a python function to find the number of permutations of a string.\n    '''\n    count = 0\n    s = s.replace(' ','')\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                continue\n            else:\n                temp = s[:i] + s[i+1:]\n                temp1 = s[:j] + s[j+1:]\n                if temp in temp1:\n                    count += 1\n    print(count)\n    return count\n    \ndef fact(n): \n    '''\n    Write a python function to find the number of set bits in a binary number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n >> 1\n    print(count)\n    return count\n    \ndef fact(n): \n    '''\n    Write a python function to find the number of set bits in a binary number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n >> 1\n    print(count)\n    return count\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    n1 = n\n    count = 0\n    while n:\n        count += n%10\n        n = n//10\n    print(count)\n    return count\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    n1 = n\n    count = 0\n    while n:\n        count += n%10\n        n = n//10\n    print(count)\n    return count\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    count = 0\n    while n:\n        count += n%10\n        n = n//10\n    print(count)\n    return count\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    count = 0\n    while n:\n        count += n%10\n        n = n//10\n    print(count)\n    return count\n    \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s): \n    '''\n    Write a python function to find the longest substring having same letters after the reversal of a string.\n    '''\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n                return i,j\n                \ndef find_pattern(s)"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    for i in range(n):\n        s = rotate_string(s,len(s))\n    print(s)\n    return s.count('1')\n    \ndef rotate_string(string,n):\n    return ''.join(string[-n:]+string[:-n])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    tot_odd = 0\n    for i in range(n):\n        tot_odd += find_odd(s)\n        s = str(int(s,2)<<1)\n    print(tot_odd)\n    return \ndef find_odd(s):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in s:\n        if int(i)%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    if nestedlist == [] or nestedlist == None:\n        return []\n    \n    else:\n        return [common for i in nestedlist for j in i for common in common_in_nested_lists(j)]\n    \n    \n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list=[]\n    for i in range(len(nestedlist)):\n        # for j in range(i+1, len(nestedlist)):\n        #     if list(set(nestedlist[i]) & set(nestedlist[j])):\n        #         common_list.append(list(set(nestedlist[i]) & set(nestedlist[j])))\n        #         break\n        if len(set(nestedlist[i]) & set(nestedlist[i]))!= 0:\n            common_list.append(list(set(nestedlist[i]) & set(nestedlist[i])))\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    def recursion(nested_list, result):\n        for items in nested_list:\n            if type(items) == list:\n                recursion(items, result)\n            else:\n                result.append(items)\n    recursion(nestedlist, result)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    num_elem = list(range(1, len(nestedlist)+1))\n    common_numbers = set(nestedlist[0]) & set(nestedlist[1]) & set(nestedlist[2]) & set(nestedlist[3])\n    common_numbers = list(common_numbers)\n    common_numbers.sort()\n    return common_numbers\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #using the set and dict\n    #set can be used to create a set of unique elements\n    #dict, can be used to create a dictionary with unique key value pairs\n    nested_list = []\n    nested_list_2 = []\n    for list in nestedlist:\n        nested_list.append(list)\n    for list in nested_list:\n        nested_list_2.append(list[0])\n    #print(nested_list)\n    #print(nested_list_2)\n    common = set(nested_list_2)\n    common = common.intersection(nested_list_2)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nested_list = [1,2,3]\n    # nested_list = [1,[4,5,6]]\n    # nested_list = [[7,8],[9,10],[11,12]]\n    # nested_list = [[1,2,3],[4,5,6]]\n    \n    nested_list = nestedlist\n    \n    if not nested_list:\n        return []\n    \n    nested_list.sort()\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if type(i) == list:\n            for j in common_in_nested_lists(i):\n                if j not in common_elements:\n                    common_elements.append(j)\n        else:\n            if i not in common_elements:\n                common_elements.append(i)\n    return common_elements\n    \nprint(common_in_nested_lists([1, 2, 3, 4, 5, 6])) # This is the same as [1,2,3,4,5,6]\nprint(common_in_nested_lists([[1,2],2,3,4,5,6])) # This is the same as [[1,2],2,3,4,5,6]\nprint(common_in_nested_lists([[1,2],2,3,4,5,6,[7]])) # This is the same as [[1,2],2,3,4,5,6,7]\nprint(common_in_nested_lists([[1,2],[2,3],[3,4],[4,5],[5,6]])) # This is the same as [[1,2],[2,3],[3,4],[4,5],[5,6]]\nprint(common_in_nested_lists([[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]])) # This is the same as [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]]\nprint(common_in_nested_lists([[1,2,3,4,5,6],[2,3,4,5,6,7],[3,4,5,6,7,8]])) # This is the same as [[1,2,3,4,5,6],[2,3,4,5,6,7],[3,4,5,6,7,8]]\nprint(common_in_nested_lists([[1,2,3,4,5,6],[2,3,4,5,6,7],[3,4,5,6,7,8],[4,5,6,7,8,9]])) # This is the same as [[1,2,3,4,5,6],[2,3,4,5,6,7],[3,4,5,6,7,8],[4,5,6,7,8,9]]"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_list_element(list1, list2):\n        result_list = []\n        if len(list1) == 0 and len(list2) == 0:\n            return result_list\n        if len(list1) == 0 or len(list2) == 0:\n            return []\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                result_list.append(list1[i])\n            else:\n                result_list = result_list + common_list_element(list1[i:], list2)\n        return result_list\n    return common_list_element(nestedlist[0], nestedlist[1])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if type(i)!= list:\n            return i\n        else:\n            common_in_nested_lists(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    def common_elements(nested_list_1, nested_list_2):\n        '''\n        Write a function to check if the common elements in list 1 and list 2.\n        '''\n        # Empty nested list\n        common_elements = []\n        # If lists are empty return empty list\n        if len(nested_list_1) == 0 or len(nested_list_2) == 0:\n            return common_elements\n        # If list 1 has the same elements as list 2, add them to the common elements list\n        if len(nested_list_1) == len(nested_list_2) and nested_list_1 == nested_list_2:\n            common_elements = nested_list_1\n        else:\n            # Else check if list 1 has common elements with list 2\n            if len(nested_list_1) < len(nested_list_2):\n                for i in range(len(nested_list_1)):\n                    if nested_list_1[i] in nested_list_2:\n                        common_elements.append(nested_list_1[i])\n                        nested_list_2.remove(nested_list_1[i])\n            # Else check if list 2 has common elements with list 1\n            else:\n                for i in range(len(nested_list_2)):\n                    if nested_list_2[i] in nested_list_1:\n                        common_elements.append(nested_list_2[i])\n                        nested_list_1.remove(nested_list_2[i])\n        return common_elements\n    return common_elements(nested_list_1, nested_list_2)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == True:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if(len(i)>0):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(i == {} for i in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n    \ndef empty_dit_hashing(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) > 0:\n            return False\n    return True\n    \ndef empty_dit_sorted(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n    \ndef empty_dit_sorted_2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) == 0:\n            return False\n    return True\n    \ndef empty_dit_sorted_3(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list_dit = []\n    for i in list1:\n        if i == {}:\n            list_dit.append(i)\n        else:\n            pass\n    if len(list_dit) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not value for value in list1)\n    \n    \ndef empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return len(list1)==0\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)!= 0:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    assert isinstance(nums,tuple)\n    return int(''.join([str(i) for i in nums]))\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # return sum(nums)\n    return sum((x+1)//2 for x in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return int(''.join(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([n * (10 ** i) for i, n in enumerate(nums)])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #i = 0\n    #for i in range(len(nums)):\n    #    if i == 0:\n    #        print(nums[i])\n    #    else:\n    #        print(nums[i] + nums[i-1])\n    \n    '''\n    Write a function to calculate the sum of a given tuple of numbers.\n    '''\n    #i = 0\n    #sum = 0\n    #for i in range(len(nums)):\n    #    sum += nums[i]\n    #    i += 1\n    #print(sum)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = tuple(nums)\n    sum_nums = 0\n    for i in range(len(nums)):\n        sum_nums += nums[i]\n    return sum_nums\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_str = \"\".join(str(num) for num in nums)\n    return int(nums_str)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc9dc\uae30!\n    # test_list = [[1.0, 1.5, 2.0], [2.0, 4.0], [3.0]]\n    # test_list = [[1.0, 1.5, 2.0, 'a'], [2.0, 4.0], ['3.0']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n        \n    return test_list\n    \n    \n    \ndef main():\n    '''\n    Write a program that takes a list of lists of numbers as input and return the average\n    of each list as output.\n    \n    For example, if the input is the following:\n    \n    [\n    [2, 3, 5],\n    [4, 7, 6],\n    [8, 1, 3]\n    ]\n    \n    Then the output should be\n    [\n    [2.666666666666667, 4.333333333333333, 7.333333333333333],\n    [3.666666666666667, 5.333333333333333, 6.666666666666667],\n    [8.333333333333333, 1.333333333333333, 3.333333333333333]\n    ]\n    '''\n    list_of_lists = [[2, 3, 5],\n                    [4, 7, 6],\n                    [8, 1, 3]]\n    \n    list_of_lists = list_to_float(list_of_lists)\n    \n    print(list_of_lists)\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = list_to_float_helper(test_list[i])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    else:\n        for i in range(len(test_list)):\n            if type(test_list[i]) == int or type(test_list[i]) == float:\n                pass\n            else:\n                try:\n                    test_list[i] = float(test_list[i])\n                except ValueError:\n                    pass\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ') \n    return string\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n<=0:\n        return -1\n    i=0\n    j=n-1\n    while i<j:\n        m=(i+j)//2\n        if arr[m]==arr[i]:\n            i=m+1\n        elif arr[m]==arr[j]:\n            j=m-1\n        elif arr[i]!=arr[m] and arr[j]!=arr[m]:\n            return arr[m]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    found = False\n    for i in range(0, len(arr)):\n        if arr[i] == arr[i+1]:\n            found = True\n        else:\n            found = False\n            break\n    return found\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!=arr[i+1]:\n            print(arr[i],end=\"\")\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = (i+j)//2\n        if arr[mid] == mid:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)<=1:\n        return arr[0]\n    else:\n        mid = len(arr)//2\n        if arr[mid] == arr[mid-1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Let the array be sorted as\n    # 2 <= x <= 10\n    # 1 <= x < len(arr)\n    # otherwise the loop should break\n    # and the element that appears only once in the array should be returned\n    # array_length = len(arr)\n    # # while loop\n    # while array_length > 1:\n    #     # if the last element is equal to the second last element\n    #     # then the array is not sorted\n    #     # so the element in the array is not unique\n    #     if arr[array_length - 1] == arr[array_length - 2]:\n    #         # decrease the array length by 1\n    #         array_length -= 1\n    #     else:\n    #         # return the element in the array\n    #         return arr[array_length - 1]\n    # # if the loop ends, the element that appears only once in the array is returned\n    # return arr[0]\n    # NOTE: The above solution would be more efficient if we used\n    # O(1) extra space to store the maximum value seen so far.\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    prev = -1\n    for i in arr:\n        if prev == -1 or i!= prev:\n            prev = i\n        else:\n            return prev\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('list must have at least 2 items')\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1 == []:\n        return None\n    max1 = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] > max1:\n            max1 = list1[i][0] * list1[i][1]\n    return max1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_2(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_3(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_4(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_5(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_6(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_7(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n    \ndef max_product_tuple_8(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    s = sorted(list1, key=lambda x: x[1])\n    if len(s) < 2:\n        return s\n    if s[-1][0] * s[-2][0] < 0:\n        return s[-1]\n    else:\n        return s[-2]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    result = (list1[0][0] * list1[0][1])\n    for i in range(1,len(list1)):\n        first = list1[i][0]\n        second = list1[i][1]\n        result = max(result,max(first,second)*min(first,second))\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = 0\n    if len(list1) == 0:\n        return max_value\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < 0 or list1[i][1] < 0 or list1[j][0] < 0 or list1[j][1] < 0:\n                continue\n            if list1[i][0] == 0 or list1[i][1] == 0 or list1[j][0] == 0 or list1[j][1] == 0:\n                continue\n            if list1[i][0] == list1[j][0] == list1[i][1] == list1[j][1]:\n                continue\n            if list1[i][0] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][1])\n            if list1[i][1] == list1[j][0]:\n                max_value = max(max_value, list1[i][1] * list1[j][0])\n            if list1[i][0] == list1[j][0] == list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][0])\n            if list1[i][0] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][1])\n            if list1[i][1] == list1[j][0] == list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][1] * list1[j][1])\n            if list1[i][0] == list1[j][0] == list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][0])\n            if list1[i][1] == list1[j][0] == list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][1] * list1[j][0])\n            if list1[i][0] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][1])\n            if list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][1] * list1[j][1])\n            if list1[i][0] == list1[j][1] == list1[i][1] == list1[j][1]:\n                max_value = max(max_value, list1[i][0] * list1[j][1])\n    return max_value\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    temp = list1\n    for i in range(0, len(temp)):\n        for j in range(i+1, len(temp)):\n            max_product = max(max_product, max(temp[i], temp[j]) * min(temp[i], temp[j]))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(max_product<abs(list1[i][0]-list1[j][0])*abs(list1[i][1]-list1[j][1])):\n                max_product=abs(list1[i][0]-list1[j][0])*abs(list1[i][1]-list1[j][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # todo : write your solution here\n    max1=0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if j!=i:\n                if list1[i]*list1[j] > max1:\n                    max1 = list1[i]*list1[j]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    min_product = float('inf')\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            min_product = min(min_product, list1[i])\n            max_product = max(max_product, list1[i])\n        else:\n            min_product = min(min_product, list1[i])\n            max_product = max(max_product, list1[i])\n    return (max_product, min_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = list1[0]\n    for i in list1:\n        max_prod = max(max_prod,max(i))\n    print(max_prod)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    sum_amicable_numbers = 0\n    for i in range(1,limit):\n        number_1 = i\n        number_2 = sum_amicable_numbers\n        if number_1!= number_2:\n            while number_1!= number_2:\n                if number_1 > number_2:\n                    number_1 -= 1\n                else:\n                    number_2 -= 1\n                if number_1 > limit or number_2 > limit:\n                    break\n                if number_1 not in amicable_numbers and number_2 not in amicable_numbers:\n                    sum_amicable_numbers += number_1\n                    amicable_numbers.append(number_1)\n                    amicable_numbers.append(number_2)\n    print(sum_amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    print(\"Problem 7: Sum of Amicable Numbers\")\n    def amicable_numbers(limit):\n        amicable_numbers = set()\n        for num in range(2,limit):\n            a,b = divmod(num,2)\n            if a == 0 or b == 0:\n                continue\n            if a in amicable_numbers:\n                amicable_numbers.add(a)\n            if b in amicable_numbers:\n                amicable_numbers.add(b)\n            sum = a + b\n            if sum == num:\n                print(num)\n            amicable_numbers.add(num)\n        return sum\n    print(amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_sum = 0\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if i == j and i + j == limit:\n                amicable_numbers.append(i)\n                break\n            if i == j:\n                continue\n            if i!= j and i + j == limit:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                break\n    for number in amicable_numbers:\n        amicable_sum += number\n    print(f\"Sum of the amicable numbers under {limit} is {amicable_sum}\")\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = list()\n    for num in range(1, limit + 1):\n        if sum(amicable) == num and sum(num, amicable) == num:\n            amicable.append(num)\n            print(num)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for i in range(1,limit+1):\n        i_j_sum = 0\n        for j in range(1,i):\n            if i % j == 0:\n                i_j_sum += j\n        if i_j_sum == i:\n            sum_amicable_numbers += i\n        \n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        amicable = False\n        sum_left = i\n        sum_right = i\n        while not amicable and sum_left <= limit:\n            sum_left += i\n            if sum_left > limit:\n                break\n            for j in range(1, sum_left):\n                if sum_left + j == sum_right:\n                    amicable = True\n            if amicable:\n                break\n        if amicable:\n            total += i\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable(num):\n        return (sum(sum_divisors(num)) == num) and (sum_divisors(sum_divisors(num)) == num)\n    sum = 0\n    for i in range(1, limit+1):\n        if i > 1:\n            if amicable(i) and amicable(sum_divisors(i)):\n                sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        sum_divisors = sum_divisors(i)\n        sum_amicable_numbers = sum_divisors(sum_divisors(i))\n        if sum_divisors == i and sum_amicable_numbers == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([a for a in range(1,limit) if is_amicable(a, sum(divisors(a)))])\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        # check if i is a factor of i + 1\n        if i!= 1 and i!= i + 1 and i + 1 % i == 0:\n            # if i is a factor of i + 1, we have i + 1 equal to j, and j is a factor of j + 1\n            # so if i + 1 = j + 1, j = i\n            j = i + 1\n            if j!= i and j!= i + 1 and i + 1 % j == 0:\n                # so if i + 1 = j + 1, j = i\n                # so i = j, j = i + 1\n                # so i + 1 = j + 1\n                # so i = j + 1\n                # so j = i + 1\n                # so j = i\n                # so i = j\n                # so j = i\n                # so i + 1 = j + 1\n                # so j = i + 1\n                # so i = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # so i + 1 = j + 1\n                # s"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a)\n    cmath.phase(b)\n    phase_a = cmath.phase(a)\n    phase_b = cmath.phase(b)\n    angle = abs((phase_a - phase_b)/2)\n    if angle>=180:\n        return 360 - angle\n    else:\n        return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real1 = a.real\n    imag1 = a.imag\n    real2 = b.real\n    imag2 = b.imag\n    angle = cmath.phase((real1*real2 + imag1*imag2)/(real1**2 + real2**2 + imag1**2 + imag2**2))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real_part_a = a.real\n    imaginary_part_a = a.imag\n    real_part_b = b.real\n    imaginary_part_b = b.imag\n    theta = cmath.phase(complex(real_part_a,real_part_b))\n    theta1 = cmath.phase(complex(real_part_a,real_part_b))\n    theta2 = cmath.phase(complex(real_part_b,real_part_a))\n    if theta1<theta2:\n        return theta\n    else:\n        return theta1\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,0)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(0,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(0,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,0),cmath.rect(0,-2)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,-2)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(0,-2)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-3)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(-1,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(-2,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(-3,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(-4,0)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,-1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(1,-1),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(1,-1),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(1,-1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(1,-1),cmath.rect(1,-3)))\nprint(angle_complex(cmath.rect(-1,-1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(-1,-1),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(-1,-1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(-1,-1),cmath.rect(1,-3)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(0,2)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(-1,0),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(0,1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,2)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(0,1),cmath.rect(1,-2)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,0)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,-1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,1)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(0,2)))\nprint(angle_complex(cmath.rect(1,0),cmath.rect(1,-1)))\nprint(angle_complex(cmath.rect(0,1),"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0.0\n    if a==0.0 and b==0.0:\n        return 0.0\n    angle = cmath.phase(complex(a,b))\n    return angle\ndef main():\n    print(\"Simple calculator using CASTLE\")\n    print(\"Type the numbers for the operation you want to perform\")\n    print(\"1.Addition\")\n    print(\"2.Subtraction\")\n    print(\"3.Multiplication\")\n    print(\"4.Division\")\n    print(\"5.Exponentiation\")\n    print(\"6.Sine\")\n    print(\"7.Cosine\")\n    print(\"8.Tangent\")\n    print(\"9.Logarithm\")\n    print(\"10.Absolute value\")\n    print(\"11.Modulus\")\n    print(\"12.Conjugate\")\n    print(\"13.Degrees to radians\")\n    print(\"14.Radians to degrees\")\n    print(\"15.Area of a circle\")\n    print(\"16.Area of a square\")\n    print(\"17.Angle of a triangle\")\n    print(\"18.Conjugate of a complex number\")\n    print(\"19.Vectors of 3D space\")\n    print(\"20.Vectors of 2D space\")\n    print(\"21.Vectors of 3D space\")\n    print(\"22.Vectors of 2D space\")\n    print(\"23.Vectors of 3D space\")\n    print(\"24.Vectors of 2D space\")\n    print(\"25.Vectors of 3D space\")\n    print(\"26.Vectors of 2D space\")\n    print(\"27.Vectors of 3D space\")\n    print(\"28.Vectors of 2D space\")\n    print(\"29.Vectors of 3D space\")\n    print(\"30.Vectors of 2D space\")\n    print(\"31.Vectors of 3D space\")\n    print(\"32.Vectors of 2D space\")\n    print(\"33.Vectors of 3D space\")\n    print(\"34.Vectors of 2D space\")\n    print(\"35.Vectors of 3D space\")\n    print(\"36.Vectors of 2D space\")\n    print(\"37.Vectors of 3D space\")\n    print(\"38.Vectors of 2D space\")\n    print(\"39.Vectors of 3D space\")\n    print(\"40.Vectors of 2D space\")\n    print(\"41.Vectors of 3D space\")\n    print(\"42.Vectors of 2D space\")\n    print(\"43.Vectors of 3D space\")\n    print(\"44.Vectors of 2D space\")\n    print(\"45.Vectors of 3D space\")\n    print(\"46.Vectors of 2D space\")\n    print(\"47.Vectors of 3D space\")\n    print(\"48.Vectors of 2D space\")\n    print(\"49.Vectors of 3D space\")\n    print(\"50.Vectors of 2D space\")\n    print(\"51.Vectors of 3D space\")\n    print(\"52.Vectors of 2D space\")\n    print(\"53.Vectors of 3D space\")\n    print(\"54.Vectors of 2D space\")\n    print(\"55.Vectors of 3D space\")\n    print(\"56.Vectors of 2D space\")\n    print(\"57.Vectors of 3D space\")\n    print(\"58.Vectors of 2D space\")\n    print(\"59.Vectors of 3D space\")\n    print(\"60.Vectors of 2D space\")\n    print(\"61.Vectors of 3D space\")\n    print(\"62.Vectors of 2D space\")\n    print(\"63.Vectors of 3D space\")\n    print(\"64.Vectors of 2D space\")\n    print(\"65.Vectors of 3D space\")\n    print(\"66.Vectors of 2D space\")\n    print(\"67.Vectors of 3D space\")\n    print(\"68.Vectors of 2D space\")\n    print(\"69.Vectors of 3D space\")\n    print(\"70.Vectors of 2D space\")\n    print(\"71.Vectors of 3D space\")\n    print(\"72.Vectors of 2D space\")\n    print(\"73.Vectors of 3D space\")\n    print(\"74.Vectors of 2D space\")\n    print(\"75.Vectors of 3D space\")\n    print(\"76.Vectors of 2D space\")\n    print(\"77.Vectors of 3D space\")\n    print(\"78.Vectors of 2D space\")\n    print(\"79.Vectors of 3D space\")\n    print(\"80.Vectors of 2D space\")\n    print(\"81.Vectors of 3D space\")\n    print(\"82.Vectors of 2D space\")\n    print(\"83.Vectors of 3D space\")\n    print(\"84.Vectors of 2D space\")\n    print(\"85.Vectors of 3D space\")\n    print(\"86.Vectors of 2D space\")\n    print(\"87.Vectors of 3D space\")\n    print(\"88.Vectors of 2D space\")\n    print(\"89.Vectors of 3D space\")\n    print(\"90.Vectors of 2D space\")\n    print(\"91.Vectors of 3D space\")\n    print(\"92.Vectors of 2D space\")\n    print(\"93.Vectors of 3D space\")\n    print(\"94.Vectors of 2D space\")\n    print(\"95.Vectors of 3D space\")\n    print(\"96.Vectors of 2D space\")\n    print(\"97.Vectors of 3D space\")\n    print(\"98.Vectors of 2D space\")\n    print(\"99.Vectors of 3D space\")\n    print(\"100.Vectors of 2D space\")\n    print(\"101.Vectors of 3D space\")\n    print(\"102.Vectors of 2D space\")\n    print(\"103.Vectors of 3D space\")\n    print(\"104.Vectors of 2D space\")\n    print(\"105.Vectors of 3D space\")\n    print(\"106.Vectors of 2D space\")\n    print(\"107.Vectors of 3D space\")\n    print(\"108.Vectors of 2D space\")\n    print(\"109.Vectors of 3D space\")\n    print(\"110.Vectors of 2D space\")\n    print(\"111.Vectors of 3D space\")\n    print(\"112.Vectors of 2D space\")\n    print(\"113.Vectors of 3D space\")\n    print(\"114.Vectors of 2D space\")\n    print(\"115.Vectors of 3D space\")\n    print(\"116.Vectors of 2D space\")\n    print(\"117.Vectors of 3D space\")\n    print(\"118.Vectors of 2D space\")\n    print(\"119.Vectors of 3D space\")\n    print(\"120.Vectors of 2D space\")\n    print(\"121.Vectors of 3D space\")\n    print(\"122.Vectors of 2D space\")\n    print(\"123.Vectors of 3D space\")\n    print(\"124.Vectors of 2D space\")\n    print(\"125.Vectors of 3D space\")\n    print(\"126.Vectors of 2D space\")\n    print(\"127.Vectors of 3D space\")\n    print(\"128.Vectors of 2D space\")\n    print(\"129.Vectors of 3D space\")\n    print(\"130.Vectors of 2D space\")\n    print(\"131.Vectors of 3D space\")\n    print(\"132.Vectors of 2D space\")\n    print(\"133.Vectors of 3D space\")\n    print(\"134.Vectors of 2D space\")\n    print(\"135.Vectors of 3D space\")\n    print(\"136.Vectors of 2D space\")\n    print(\"137.Vectors of 3D space\")\n    print(\"138.Vectors of 2D space\")\n    print(\"139.Vectors of 3D space\")\n    print(\"140.Vectors of 2D space\")\n    print(\"141.Vectors of 3D space\")\n    print(\"142.Vectors of 2D space\")\n    print(\"143.Vectors of 3D spac"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    if a>=0:\n        return cmath.phase(a)\n    else:\n        return -cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\ndef get_vectors(a,b):\n    '''\n    Write a function to get the magnitude and angle of two vectors.\n    '''\n    mag = a**2+b**2\n    angle = cmath.phase(a+b*1j)\n    return mag,angle\ndef find_vectors(a,b):\n    '''\n    Write a function to get the magnitude and angle of two vectors.\n    '''\n    mag = a**2+b**2\n    mag = abs(mag)\n    angle = cmath.phase(a+b*1j)\n    return mag,angle\ndef find_theta(a,b):\n    '''\n    Write a function to get the angle of two vectors.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\ndef get_angle_complex(a,b):\n    '''\n    Write a function to get the angle of two vectors.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\ndef distance_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    distance = a**2+b**2\n    return distance\ndef distance_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_dist_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_dist_distance(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    return distance\ndef get_distance_distance(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    return distance\ndef get_distance_angle(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    return distance\ndef get_angle_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_angle_angle(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_angle_distance(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_distance_angle(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    return distance\ndef get_angle_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_angle_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_angle_norm_norm(a,b):\n    '''\n    Write a function to get the angle between two vectors.\n    '''\n    angle = abs(cmath.phase(a+b*1j))\n    return angle\ndef get_distance_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = abs(a**2+b**2-2*((a*b)/(abs(a)*abs(b))))\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    distance = (((a**2)+(b**2))**0.5)\n    return distance\ndef get_norm_norm_norm(a,b):\n    '''\n    Write a function to get the distance between two vector"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    a = string\n    zero = 0\n    one = 0\n    if a.startswith('0') or a.startswith('1'):\n        for i in range(len(a)):\n            if a[i] == '0':\n                zero += 1\n            else:\n                one += 1\n        if zero > one:\n            return zero - one\n        else:\n            return one - zero\n    else:\n        return -1\n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0, count_1 = 0, 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return max(count_0, count_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string_length = len(string)\n    result = 0\n    for i in range(string_length):\n        count = 0\n        for j in range(i, string_length):\n            if string[j] == '0':\n                count += 1\n            else:\n                count = 0\n            result = max(result, count)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    n=len(string)\n    max_diff=0\n    start_idx=0\n    \n    for i in range(n):\n        diff=0\n        for j in range(start_idx,i+1):\n            diff+=string[j]\n        if diff==0:\n            start_idx=i+1\n        else:\n            max_diff=max(max_diff,i-start_idx+1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Return the max difference between the number of 0s and number of 1s\n    # in any sub-string of the given binary string.\n    \n    # Count the number of 1s in string.\n    N = len(string)\n    count = 0\n    \n    # Check each character.\n    for i in range(N):\n        # If the character is 1, increment the count.\n        if string[i] == \"1\":\n            count += 1\n        \n        # If the character is 0, then check if this is the last character.\n        # If this is not the last character, then check if there is a 1 before\n        # this character, and set the count to the max value between the two cases.\n        elif string[i] == \"0\":\n            if i!= N-1:\n                if string[i+1] == \"1\":\n                    count = max(count, N-i-1)\n            else:\n                if string[i-1] == \"1\":\n                    count = max(count, N-i)\n    return count\n    \nprint(find_length(\"0000010010010111\")"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = len(string)\n    s = string\n    b = '00'\n    x = ''\n    for i in range(l):\n        if s[i] == '0':\n            b += '1'\n        else:\n            b += '0'\n        if i % 2 == 1:\n            x += b\n            b = ''\n    return max(len(x.split('1')) - len(x.split('0')), len(x.split('0')) - len(x.split('1')))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    import numpy as np\n    count = np.zeros(len(string))\n    for i in range(len(string)):\n        if string[i] == '1':\n            count[i] = 1\n        else:\n            count[i] = 0\n    return max(count)-min(count)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(0, n-1): \n        if (string[i] == '0' and string[i+1] == '0') or (string[i] == '1' and string[i+1] == '1'): \n            diff = abs(int(string[i]) - int(string[i+1]))\n            if max_diff < diff: \n                max_diff = diff \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    cur_0s = 0\n    cur_1s = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            cur_0s += 1\n            cur_1s = 0\n        else:\n            cur_1s += 1\n            cur_0s = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def zero_one(string): \n        string = '{:b}'.format(int(string))\n        print(string)\n        a = list(string)\n        a.reverse()\n        print(a)\n        for i in range(len(a)):\n            if a[i] == '1':\n                break\n        else:\n            i = 0\n        return i\n    \n    n = zero_one(string)\n    string_len = len(string)\n    \n    if string_len == 1:\n        return 1\n    else:\n        return string_len - n\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = []\n    a,b = int(a), int(b)\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            result.append(i)\n    return sum(result)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(1,a+1):\n        if a%i==0:\n            l1.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            l2.append(j)\n    common_divisor = []\n    for i in l1:\n        if i in l2:\n            common_divisor.append(i)\n    return sum(common_divisor)\nprint(sum(21,24))"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=set(a.split(\" \")) & set(b.split(\" \")) \n    \n    sum=0\n    for i in c:\n        if i!=0 and i!=1:\n            if a%i==0 and b%i==0:\n                sum+=i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    sum = 0\n    for x in range(1,min(a,b)+1):\n        if a%x == 0 and b%x == 0:\n            sum += x\n            \n    return sum\n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l=[i for i in range(a,b) if a%i==0 and b%i==0]\n    print(sum(l[0],l[-1]))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=a*b\n    while b!=0:\n        r=a%b\n        if r==0:\n            s+=a\n        a=b\n        b=r\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            c = c * i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n = gcd(a,b)\n    return int(a*b/n)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = int(a) + int(b)\n    return(sum)\n    \nprint(sum(10,20))\n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    num_list = []\n    for i in range(1,int(b/2)+1):\n        if a%i==0 and b%i==0:\n            num_list.append(i)\n    print(num_list)\n    return sum(num_list[0],num_list[1])\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \nmultiply_int(10, 20)\nmultiply_int(-10, 20)\nmultiply_int(10, -20)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #result_list = []\n    result_list = []\n    for word in str:\n        if len(word) > n:\n            result_list.append(word)\n    return result_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    from re import split\n    for word in str:\n        if len(word) >= n:\n            yield word\ndef create_new_string(word_list, char_len):\n    '''\n    Write a function to create new string from a given list of words.\n    If number of words is less than char_len, then fill the remaining words with spaces.\n    '''\n    for i in range(len(word_list), char_len):\n        word_list.append(\" \")\n    return \"\".join(word_list)\ndef modify_string(word_list, char_len):\n    '''\n    Write a function to modify a string to add '*' if the length of the word is less than or equal to char_len.\n    '''\n    for word in word_list:\n        if len(word) >= char_len:\n            continue\n        else:\n            word += \"*\"\n    return \"\".join(word_list)\ndef count_frequency(str):\n    '''\n    Write a function to count the frequency of each word in a string.\n    '''\n    for word in str.split(\" \"):\n        yield word, str.count(word)\ndef sort_by_frequency(str):\n    '''\n    Write a function to sort a string by the frequency of each word.\n    '''\n    for word, value in sorted(count_frequency(str)):\n        yield word, value\ndef remove_duplicate(word_list):\n    '''\n    Write a function to remove the duplicates in the given list.\n    '''\n    for word in word_list:\n        yield word\n        if word_list.count(word) > 1:\n            for i in range(word_list.count(word) - 1):\n                word_list.remove(word)\n            yield word\ndef merge_the_strings(str1, str2):\n    '''\n    Write a function to combine two given strings into a single string.\n    '''\n    for word in str1.split():\n        yield word\n    for word in str2.split():\n        yield word\ndef count_vowels_in_string(str):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowel_list:\n        if vowel in str:\n            yield vowel\ndef count_consonants_in_string(str):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowel_list:\n        if vowel in str:\n            continue\n        else:\n            yield vowel\ndef remove_punctuation(str):\n    '''\n    Write a function to remove the punctuations in a given string.\n    '''\n    for i in str.split():\n        if i in string.punctuation:\n            continue\n        else:\n            yield i\ndef remove_digits(str):\n    '''\n    Write a function to remove the digits in a given string.\n    '''\n    for i in str.split():\n        try:\n            float(i)\n        except ValueError:\n            yield i\ndef sort_list(list1):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    return sorted(list1)\ndef insert_sort_list(list1):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    for i in range(1, len(list1)):\n        value = list1[i]\n        pos = i\n        while pos > 0 and list1[pos - 1] > value:\n            list1[pos] = list1[pos - 1]\n            pos -= 1\n        list1[pos] = value\ndef merge_sort_list(list1):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    def merge(l, r):\n        '''\n        Write a function that merges two sorted lists.\n        '''\n        merged = []\n        while l and r:\n            if l[0] < r[0]:\n                merged.append(l.pop(0))\n            else:\n                merged.append(r.pop(0))\n        merged += l + r\n        return merged\n    if len(list1) > 1:\n        mid = len(list1) // 2\n        left_list = list1[:mid]\n        right_list = list1[mid:]\n        list1 = merge(left_list, right_list)\n    return list1\ndef merge_sort(list1):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    def merge(l, r):\n        '''\n        Write a function that merges two sorted lists.\n        '''\n        merged = []\n        while l and r:\n            if l[0] < r[0]:\n                merged.append(l.pop(0))\n            else:\n                merged.append(r.pop(0))\n        merged += l + r\n        return merged\n    if len(list1) > 1:\n        mid = len(list1) // 2\n        left_list = list1[:mid]\n        right_list = list1[mid:]\n        list1 = merge(left_list, right_list)\n    return list1\ndef merge_sort_with_extra_space(list1):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    def merge(l, r):\n        '''\n        Write a function that merges two sorted lists.\n        '''\n        merged = []\n        while l and r:\n            if l[0] < r[0]:\n                merged.append(l.pop(0))\n            else:\n                merged.append(r.pop(0))\n        merged += l + r\n        return merged\n    if len(list1) > 1:\n        mid = len(list1) // 2\n        left_list = list1[:mid]\n        right_list = list1[mid:]\n        list1 = merge(left_list, right_list)\n    return list1\ndef find_greater_number(list1):\n    '''\n    Write a function to find the greater number from the given list.\n    '''\n    max_value = 0\n    for i in list1:\n        if i > max_value:\n            max_value = i\n    return max_value\ndef max_value_from_list(list1):\n    '''\n    Write a function to find the maximum value from the given list.\n    '''\n    max_value = list1[0]\n    for i in list1:\n        if i > max_value:\n            max_value = i\n    return max_value\ndef find_smallest_number(list1):\n    '''\n    Write a function to find the smallest number from the given list.\n    '''\n    min_value = list1[0]\n    for i in list1:\n        if i < min_value:\n            min_value = i\n    return min_value\ndef count_greater_than_n(list1, n):\n    '''\n    Write a function to find the number of numbers in the given list that are greater than a given number.\n    '''\n    count = 0\n    for i in list1:\n        if i > n:\n            count += 1\n    return count\ndef count_smaller_than_n(list1, n):\n    '''\n    Write a function to find the number of numbers in the given list that are less than a given number.\n    '''\n    count = 0\n    for i in list1:\n        if i < n:\n            count += 1\n    return count\ndef count_numbers_between_a_b(list1, a, b):\n    '''\n    Write a function to find the number of numbers in the given list that are between the given range.\n    '''\n    count = 0\n    for i in list1:\n        if a <= i <= b:\n            count += 1\n    return count\ndef number_of_elements_with_same_first_and_last_char(str1):\n    '"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split(' ')\n    for word in words:\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for word in str.split():\n        if len(word) > n:\n            res.append(word)\n    return res\nprint(long_words(3, 'Hello World, have a nice day'))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Step 1: Check if all the numbers are the same\n    for i in range(1, len(my_matrix)):\n        if my_matrix[0][i]!= my_matrix[i][0]:\n            return False\n    #Step 2: Check if all the numbers from each row are the same\n    for row_idx in range(len(my_matrix)):\n        if sum(my_matrix[row_idx])!= my_matrix[0][row_idx]:\n            return False\n    #Step 3: Check if all the numbers from each column are the same\n    for col_idx in range(len(my_matrix[0])):\n        column = []\n        for row_idx in range(len(my_matrix)):\n            column.append(my_matrix[row_idx][col_idx])\n        if sum(column)!= my_matrix[0][col_idx]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        if(my_matrix[i][i]!= my_matrix[i][len(my_matrix) - i - 1]):\n            return False\n    for i in range(len(my_matrix)):\n        if(my_matrix[i][i]!= my_matrix[len(my_matrix) - i - 1][i]):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not is_square(my_matrix):\n        return False\n    \n    if not has_same_diagonal(my_matrix):\n        return False\n    \n    for row in range(len(my_matrix)):\n        if not has_same_column(my_matrix, row):\n            return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert len(my_matrix) == len(my_matrix[0]), 'Incorrect Matrix size'\n    \n    for row in my_matrix:\n        assert len(row) == len(my_matrix[0]), 'Incorrect Matrix size'\n        \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i!= j:\n                if my_matrix[i][j]!= 0:\n                    print('Invalid matrix')\n                    return False\n    \n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= my_matrix[i][i]:\n            print('Invalid matrix')\n            return False\n    \n    for j in range(len(my_matrix)):\n        if sum(my_matrix[j])!= my_matrix[j][j]:\n            print('Invalid matrix')\n            return False\n    \n    for i in range(0, len(my_matrix), 3):\n        for j in range(0, len(my_matrix), 3):\n            if sum(my_matrix[i][j:j+3])!= my_matrix[i][j+3]:\n                print('Invalid matrix')\n                return False\n    \n    for i in range(3, len(my_matrix), 3):\n        for j in range(0, len(my_matrix), 3):\n            if sum(my_matrix[i][j:j+3])!= my_matrix[i][j+3]:\n                print('Invalid matrix')\n                return False\n    \n    for i in range(0, len(my_matrix), 3):\n        for j in range(3, len(my_matrix), 3):\n            if sum(my_matrix[i][j:j+3])!= my_matrix[i+3][j]:\n                print('Invalid matrix')\n                return False\n    \n    for i in range(3, len(my_matrix), 3):\n        for j in range(3, len(my_matrix), 3):\n            if sum(my_matrix[i][j:j+3])!= my_matrix[i+3][j+3]:\n                print('Invalid matrix')\n                return False\n    \n    print('Magic square')\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 0:\n        return False\n    elif n!= len(my_matrix):\n        return False\n    else:\n        for i in range(n):\n            if len(my_matrix[i]) == 0:\n                return False\n            elif len(my_matrix[i])!= n:\n                return False\n            else:\n                a = set(my_matrix[i])\n                if len(a)!= n:\n                    return False\n                else:\n                    if sum(my_matrix[i])!= (n*(n+1))/2:\n                        return False\n                    else:\n                        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print_matrix(my_matrix)\n    \n    is_magic = is_magic_matrix(my_matrix)\n    \n    return is_magic\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    m = len(my_matrix)\n    \n    # The magic condition\n    for i in range(m):\n        for j in range(m):\n            if my_matrix[i][j]!= m*i + j + 1:\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_count = len(my_matrix)\n    column_count = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    if not isinstance(my_matrix,list):\n        return \"Please input a list.\"\n    if any(not isinstance(row,list) for row in my_matrix):\n        return \"Please input a list of lists\"\n    my_size = len(my_matrix)\n    if not (isinstance(my_size,int) and my_size >= 3):\n        return \"Please input a list of length >= 3\"\n    if any(len(row)!= my_size for row in my_matrix):\n        return \"Please input a list of lists with same length\"\n    if my_size % 2!= 0:\n        return \"Please input a list of length >= 3\"\n    if any(sum(i)!= my_size for i in zip(*my_matrix)):\n        return \"Please input a list of lists with same length\"\n    if any((abs(sum(i)-my_size) > 1) for i in zip(*my_matrix)):\n        return \"Please input a list of lists with same length\"\n    if any(any(abs(i - j) > 1 for i in row) for row in zip(*my_matrix)):\n        return \"Please input a list of lists with same length\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    max_count = -1\n    max_item = None\n    for x in nums:\n        my_dict[x] += 1\n        if my_dict[x] > max_count:\n            max_count = my_dict[x]\n            max_item = x\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    a = defaultdict(int)\n    for n in nums:\n        a[n] += 1\n    max_n = max(a.keys(), key = lambda k: a[k])\n    return max_n, a[max_n]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return max_count, counts[max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for i in nums:\n        count[i] += 1\n    # print(count)\n    max_value = max(count.values())\n    return_list = []\n    for i in count:\n        if count[i] == max_value:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_num = -1\n    max_count = -1\n    for num in nums:\n        d[num] += 1\n        if d[num] > max_count:\n            max_count = d[num]\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for i in range(len(nums)):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n    return max(d.items(), key = lambda kv:kv[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    # return max(d.keys(), key=d.get)\n    return max(d.items(), key=lambda x:x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = 0\n    max_num = None\n    for k, v in counts.items():\n        if v > max_count:\n            max_count = v\n            max_num = k\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    return counts[0][0]\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2=list(str1)\n    vowels='aeiou'\n    vowels=set(vowels)\n    for i in range(len(str2)):\n        if str2[i] not in vowels:\n            str2[i]=str2[i].upper()\n    str2=''.join(str2)\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = str1[::-1]\n    l = list(s)\n    i = 0\n    j = len(l)-1\n    while i < j:\n        if l[i] not in 'aeiouAEIOU':\n            i += 1\n        else:\n            l[i], l[j] = l[j], l[i]\n            j -= 1\n    s = ''.join(l)\n    return s\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # list of vowels\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str2 = list(str1)\n    # reverse vowels of str1\n    for index in range(len(str2)):\n        # if it is a vowel\n        if str2[index] in vowels:\n            str2[index] = str1[len(str1) - index - 1]\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + str1[i + 1:].replace(str1[i], \"\")\n    return str1\n    "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str = new_str + str1[i]\n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reverse_vowels_list = []\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            reverse_vowels_list.append(char)\n        else:\n            reverse_vowels_list.append(\"\")\n    return \"\".join(reverse_vowels_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str_list = list(str1)\n    list_vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    str_len = len(str_list)\n    for i in range(0, str_len):\n        if str_list[i] in list_vowels:\n            str_list[i] = str_list[str_len-i-1]\n            str_len -= 1\n    return ''.join(str_list)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowels = ['a','e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n    #for i in vowels:\n    #    str1 = str1.replace(i, '')\n    new_string = ''\n    for i in str1:\n        if i not in vowels:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\".join(tup1)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            sum+=nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(sum(num for num in nums if num < 0))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n    \nprint(sum_negativenum([-4,-1,2,-3]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum = sum + nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(list(filter(lambda x: x < 0, nums)))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    res = n*(n+1)\n    return res\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(((2*n*n + 1)*n*n)/6)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n -= 1\n    return n*(2*n+1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 if n <= 1 else hexagonal_num(n-1) + (n*(3*n - 1)/2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * hexagonal_num(n - 1)) - (2 * hexagonal_num(n - 2))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    for i in range(2,n+1):\n        hexagonal_num_list=[1]\n        for j in range(1,i):\n            hexagonal_num_list.append(j*(2*j-1))\n            hexagonal_num_list.append(j*(2*j+1))\n        if i==n:\n            print(hexagonal_num_list)\n        return hexagonal_num_list[i-1]\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(0,n+1):\n        hex_num += ((2*i)*(6*i-1))//6\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x=0\n    y=1\n    z=1\n    count=0\n    while(count<n):\n        count+=1\n        x=x+1\n        y=y*2\n        z=z*3\n        \n        print(x,y,z)\n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n    \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Algorithm:\n    # Check the length of the array first:\n    if len(nums) == 0:\n        return 0\n    \n    # Now check the last element:\n    if nums[-1] == 0:\n        return (len(nums) - 1) / (nums[-1] + 1)\n    else:\n        return (len(nums) - 1) / (nums[-1] - 1)\n    \nprint(zero_count([0, 1, 0, 3, 12]))\nprint(zero_count([1, 1]))\nprint(zero_count([]))\nprint(zero_count([1]))\nprint(zero_count([0, 0]))\nprint(zero_count([0, 1, 0, 2, 1, 1, 0]))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    return zeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i = 0\n    zeroes = 0\n    non_zeroes = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n        i += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # get list of ints\n    l = list(nums)\n    # counter for zeros, current zeros\n    zero_count = 0\n    # if first item is zero, increase counter by one\n    if l[0] == 0:\n        zero_count += 1\n    # for each integer in the list\n    for i in range(1, len(l)):\n        # if integer is 0\n        if l[i] == 0:\n            # increment counter by 1\n            zero_count += 1\n    # return ratio of zeroes to non-zeroes\n    return zero_count / (len(l) - zero_count)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([n for n in nums if n == 0])/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums) - nums.count(0)\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums) - nums.count(0)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # nums = list(nums)\n    # zeroes = nums.count(0)\n    # non_zeroes = len(nums) - zeroes\n    # return (zeroes / non_zeroes)\n    # zero_count = 0\n    # non_zero = len(nums)\n    # for i in nums:\n    #     if i == 0:\n    #         zero_count += 1\n    #     else:\n    #         non_zero -= 1\n    # return (zero_count / non_zero)\n    return 0 if len(nums) == 0 else float(nums.count(0)) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n    n0 = 0\n    n1 = 0\n    for i in nums:\n        if i == 0:\n            n0 += 1\n        else:\n            n1 += 1\n    return n0/n1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Using Bit operation\n    while n!= 0:\n        if (n & 1)!= 0:\n            n -= 1\n        else:\n            n >>= 1\n    return True if n == 0 else False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def get_powers_of_two(n): \n        '''\n        Returns powers of 2 of 1 upto n.\n        '''\n        powers_of_two = []\n        for i in range(0,n+1):\n            powers_of_two.append(2**i)\n        return powers_of_two\n    def get_sum_of_powers(n): \n        '''\n        Returns sum of all powers of 2 upto n.\n        '''\n        sum_of_powers = 0\n        for i in range(0,n+1):\n            sum_of_powers += get_powers_of_two(i)\n        return sum_of_powers\n    #code\n    def sum_of_powers(n): \n        '''\n        Returns sum of all powers of 2 upto n.\n        '''\n        sum_of_powers = 0\n        for i in range(0,n+1):\n            sum_of_powers += get_powers_of_two(i)\n        return sum_of_powers\n    sum_of_powers = sum_of_powers(n)\n    print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n    print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n    if sum_of_powers == get_sum_of_powers(n):\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers(n))\n        print('Sum of all powers of 2 upto',n,'is:',sum_of_powers)\n        print('Sum of all powers of 2 upto',n,'is:',get_sum_of_powers("
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n!= 0:\n        n = n // 2\n    return not n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 1:\n        n = n / 2\n        if n == 0:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 1):\n        return False\n    while (n > 1):\n        if (n % 2!= 0):\n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    ans = False\n    i = 0\n    while(i < n):\n        if n == 0:\n            ans = True\n            break\n        elif i % 2!= 0 and i!= 1:\n            if i ** 2 == n:\n                ans = True\n                break\n        i += 1\n    return ans\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n!= 0:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # iterating through every digit and checking whether it is divisible by 2 or not.\n    while(n > 1):\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your Code Here\n    # if n is a positive integer, then the number is represented by the sum of two powers of 2. \n    # i.e., 2^i + 2^(i+1) \n    # If n is not a positive integer, then the number is not represented by the sum of two non-zero powers of 2. \n    # i.e., 0^i + 0^(i+1) \n    # For example, 3, 2^3 + 2^(2+1) \n    # is not represented by the sum of two non-zero powers of two. \n    # 3, 2^3 + 2^(3+1) \n    # is represented by the sum of two non-zero powers of two. \n    \n    # 2^0 + 2^1 = 2 \n    # 2^0 + 2^2 = 4 \n    # 2^1 + 2^2 = 8 \n    # 2^1 + 2^3 = 16 \n    # 2^2 + 2^3 = 32 \n    \n    # 2^0 + 2^1 + 2^2 = 4 \n    # 2^0 + 2^1 + 2^3 = 16 \n    # 2^0 + 2^1 + 2^2 + 2^3 = 32 \n    \n    # so the function returns True\n    if n >= 0:\n        for i in range(0, 32):\n            if (2 ** i) + (2 ** (i+1)) == n:\n                return True\n        return False\n    else:\n        for i in range(0, 32):\n            if (2 ** i) + (2 ** (i+1)) - n == 0:\n                return True\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    if type(r)!= int and type(r)!= float:\n        raise TypeError('Input must be a non-negative number')\n    \n    elif r < 0:\n        raise ValueError('Input must be a non-negative number')\n    \n    else:\n        return 2*pi*r\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14\n    return (2*PI*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = (2 * math.pi) * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = set()\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            numbers.add(test_list[i][j])\n    return(numbers)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in test_list:\n        if len(i) > 1:\n            test_list = i\n    print(test_list)\n    singly = 0\n    for i in test_list:\n        singly += i[0]\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result += extract_singly(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out = []\n    if len(test_list) == 0:\n        return out\n    else:\n        first_item = test_list.pop(0)\n        return_list = extract_singly(test_list)\n        return_list.append(first_item)\n        return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            return_list += extract_singly(item)\n        else:\n            return_list.append(item)\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in test_list:\n        if type(i)!= list:\n            continue\n        else:\n            test_list = extract_singly(i)\n            test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    answer = []\n    for sublist in test_list:\n        for item in sublist:\n            answer.append(item)\n    return(answer)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_copy = nums.copy()\n    # We first have to pick the largest element and push it to the end.\n    nums_copy.sort()\n    # Then we do the same but in reverse order.\n    nums_copy.sort(reverse=True)\n    # Now we need to reverse the whole list and we can just return it.\n    nums.reverse()\n    nums.extend(nums_copy)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # time complexity O(n^2)\n    # space complexity O(1)\n    # for i in range(len(nums)):\n    #     for j in range(i+1, len(nums)):\n    #         if nums[i] > nums[j]:\n    #             nums[i], nums[j] = nums[j], nums[i]\n    # return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1, -1, -1):\n        max = nums[i]\n        for j in range(i-1, -1, -1):\n            if nums[j] < max:\n                nums[j+1], nums[i] = nums[i], nums[j+1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        min_pos = 0\n        for j in range(len(nums) - i):\n            if nums[j] > nums[min_pos]:\n                min_pos = j\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time O(n) | space O(1)\n    nums = nums[::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)):\n        curr = nums[k]\n        while k!= 0:\n            if curr > nums[k-1]:\n                curr = nums[k-1]\n                nums[k-1] = nums[k]\n                nums[k] = curr\n            else:\n                break\n            k = k - 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    \n    # Find the max element.\n    max_index = len(nums) - 1\n    max_num = nums[max_index]\n    \n    # Find the max element's index.\n    max_index = nums.index(max_num)\n    \n    # Find the last item before the max_index.\n    before_max = nums[max_index - 1]\n    \n    # Find the last item after the max_index.\n    after_max = nums[max_index + 1]\n    \n    # Swap the first and the last items.\n    nums[max_index] = before_max\n    nums[max_index - 1] = after_max\n    \n    # Sort from the second item to the end.\n    for i in range(len(nums) - 2, -1, -1):\n        # Swap the item to the end.\n        nums[i + 1] = nums[i]\n        \n        # Find the item before the item to the end.\n        if i > max_index:\n            before_next = nums[i - 1]\n        else:\n            before_next = nums[i + 1]\n        \n        # Find the item after the item to the end.\n        after_next = nums[i + 2]\n        \n        # Swap the item to the end.\n        nums[i] = before_next\n        nums[i + 1] = after_next\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def get_k_largest(nums,k):\n        if k == len(nums):\n            return nums\n        nums = sorted(nums,reverse=True)\n        largest_nums = []\n        for _ in range(k):\n            largest_nums.append(nums[-1])\n            nums.pop()\n        return largest_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    # Find the largest element and move it to the end.\n    largest = max(nums)\n    largest_idx = nums.index(largest)\n    nums[largest_idx] = nums[-1]\n    nums[-1] = largest\n    # Now the largest element is in the rightmost position.\n    # Find the largest element and move it to the start.\n    # The largest element is at the end of the list.\n    # the index of the largest element is len(nums) - 1.\n    for i in range(largest_idx):\n        # Move the largest element to the rightmost position.\n        largest = max(nums[i:-1])\n        largest_idx = nums[i:].index(largest) + i\n        nums[largest_idx] = nums[i]\n        nums[i] = largest\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_sum = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            list_sum += 1\n    return list_sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return(list1.count(list2[0])==list1.count(list2[1])==list1.count(list2[2]))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        print(\"Empty List\")\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                for k in range(len(list3)):\n                    if list1[i]==list2[j] and list1[i]==list3[k] and i==j and i==k:\n                        count+=1\n        print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    dict_rep = {}\n    lst = [list1,list2,list3]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] not in dict_rep:\n                dict_rep[lst[i][j]] = 1\n            else:\n                dict_rep[lst[i][j]] += 1\n    \n    count = 0\n    for k in dict_rep:\n        if dict_rep[k] == len(lst):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(set(zip(list1,list2,list3)))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i] == list3[i]):\n            count+=1\n    return count\ndef count_all_item(list1,list2,list3):\n    '''\n    Write a function to count number of items that are all the same in the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i] == list3[i]):\n            count += 1\n    return count\ndef count_distinct_item(list1,list2,list3):\n    '''\n    Write a function to count number of items that are distinct in the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count += 1\n    return count\ndef count_identical_reverse(list1,list2,list3):\n    '''\n    Write a function to count number of items that are identical in the reverse order of the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[-i-1] and list1[i] == list3[-i-1]):\n            count += 1\n    return count\ndef count_all_item_reverse(list1,list2,list3):\n    '''\n    Write a function to count number of items that are all the same in the reverse order of the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[-i-1] and list1[i] == list3[-i-1]):\n            count += 1\n    return count\ndef count_distinct_item_reverse(list1,list2,list3):\n    '''\n    Write a function to count number of items that are distinct in the reverse order of the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[-i-1] and list1[i]!= list3[-i-1]):\n            count += 1\n    return count\ndef count_identical_reverse_sorted(list1,list2,list3):\n    '''\n    Write a function to count number of items that are identical in the reverse order of the sorted version of the given list.\n    '''\n    count = 0\n    l1_sorted = sorted(list1)\n    l2_sorted = sorted(list2)\n    l3_sorted = sorted(list3)\n    for i in range(len(l1_sorted)):\n        if(l1_sorted[i] == l2_sorted[-i-1] and l1_sorted[i] == l3_sorted[-i-1]):\n            count += 1\n    return count\ndef count_all_item_reverse_sorted(list1,list2,list3):\n    '''\n    Write a function to count number of items that are all the same in the reverse order of the sorted version of the given list.\n    '''\n    count = 0\n    l1_sorted = sorted(list1)\n    l2_sorted = sorted(list2)\n    l3_sorted = sorted(list3)\n    for i in range(len(l1_sorted)):\n        if(l1_sorted[i] == l2_sorted[-i-1] and l1_sorted[i] == l3_sorted[-i-1]):\n            count += 1\n    return count\ndef count_distinct_item_reverse_sorted(list1,list2,list3):\n    '''\n    Write a function to count number of items that are distinct in the reverse order of the sorted version of the given list.\n    '''\n    count = 0\n    l1_sorted = sorted(list1)\n    l2_sorted = sorted(list2)\n    l3_sorted = sorted(list3)\n    for i in range(len(l1_sorted)):\n        if(l1_sorted[i]!= l2_sorted[-i-1] and l1_sorted[i]!= l3_sorted[-i-1]):\n            count += 1\n    return count\ndef count_identical_sort_k_group_average(l,k):\n    '''\n    Write a function to count number of items that are identical in the groups of k group,\n    where the groups are of k adjacent values in the given list.\n    '''\n    l1 = []\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:k]\n    for i in range(len(l1)):\n        if(l1[i] == l1[i+1]):\n            count += 1\n    return count\ndef count_all_item_sort_k_group_average(l,k):\n    '''\n    Write a function to count number of items that are all the same in the groups of k group,\n    where the groups are of k adjacent values in the given list.\n    '''\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:k]\n    for i in range(len(l1)):\n        if(l1[i] == l1[i+1]):\n            count += 1\n    return count\ndef count_distinct_item_sort_k_group_average(l,k):\n    '''\n    Write a function to count number of items that are distinct in the groups of k group,\n    where the groups are of k adjacent values in the given list.\n    '''\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:k]\n    for i in range(len(l1)):\n        if(l1[i]!= l1[i+1]):\n            count += 1\n    return count\ndef count_identical_sort_group_average(l,group):\n    '''\n    Write a function to count number of items that are identical in the groups of group,\n    where the groups are of group adjacent values in the given list.\n    '''\n    l1 = []\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:group]\n    for i in range(len(l1)):\n        if(l1[i] == l1[i+1]):\n            count += 1\n    return count\ndef count_all_item_sort_group_average(l,group):\n    '''\n    Write a function to count number of items that are all the same in the groups of group,\n    where the groups are of group adjacent values in the given list.\n    '''\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:group]\n    for i in range(len(l1)):\n        if(l1[i] == l1[i+1]):\n            count += 1\n    return count\ndef count_distinct_item_sort_group_average(l,group):\n    '''\n    Write a function to count number of items that are distinct in the groups of group,\n    where the groups are of group adjacent values in the given list.\n    '''\n    count = 0\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.sort()\n    l1 = l1[:group]\n    for i in range(len(l1)):\n        if(l1[i]!= l1[i+1]):\n            count += 1\n    return count\nde"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\nprint(count_samepair(l1,l2,l3)"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    list4 = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            list4.append(list1[i])\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                result += 1\n    return result\n    \n    \ndef max_min_num_sequence(list1,list2):\n    '''\n    Write a function to find the largest number sequence from a list of numbers.\n    '''\n    if len(list1)!= len(list2):\n        return \"Error\"\n    max1 = list1[0]\n    min1 = list1[0]\n    max_index = 0\n    min_index = 0\n    \n    for i in range(len(list1)):\n        if list1[i] > max1:\n            max1 = list1[i]\n            max_index = i\n        if list1[i] < min1:\n            min1 = list1[i]\n            min_index = i\n    return (min_index,max_index)\n    \ndef seg_list(list1,list2,list3):\n    '''\n    Write a function to segregate the even and odd number in a list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error\"\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return (even_list,odd_list)\n    \ndef palindrome(str1):\n    '''\n    Write a function to determine if a string is a palindrome or not.\n    '''\n    if len(str1)!= len(str1[::-1]):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str1[len(str1) - i - 1]:\n            return False\n    return True\n    \ndef is_prime(num1):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    for i in range(2,num1):\n        if num1 % i == 0:\n            return False\n    return True\n    \ndef is_prime_v2(num1):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    for i in range(2,num1):\n        if num1 % i == 0:\n            return False\n    return True\n    \ndef rotate_matrix(list1,k):\n    '''\n    Write a function to rotate a matrix by k*90 degrees.\n    '''\n    if len(list1)!= len(list1[0]):\n        return \"Error\"\n    matrix_final = []\n    matrix_final_2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1[0])):\n            matrix_final.append(list1[j][len(list1) - 1 - i])\n    if k == 1:\n        return matrix_final\n    if k == 2:\n        for i in range(len(matrix_final)):\n            matrix_final_2.append(matrix_final[i])\n        matrix_final_2.append(matrix_final[len(matrix_final) - 1])\n        matrix_final = matrix_final_2\n        return matrix_final\n    if k == 3:\n        for i in range(len(matrix_final)):\n            matrix_final_2.append(matrix_final[i])\n        matrix_final_2.append(matrix_final[len(matrix_final) - 1])\n        matrix_final_2.append(matrix_final[0])\n        matrix_final = matrix_final_2\n        return matrix_final\n        \ndef unique_char(str1):\n    '''\n    Write a function to find the length of the longest unique sub-sequence.\n    '''\n    if len(str1)!= len(set(str1)):\n        return \"Error\"\n    longest = 0\n    current = 0\n    for i in range(len(str1)):\n        if str1[i]!= str1[current]:\n            current += 1\n            longest = max(longest,current)\n    return longest\n    \ndef unique_char_v2(str1):\n    '''\n    Write a function to find the length of the longest unique sub-sequence.\n    '''\n    if len(str1)!= len(set(str1)):\n        return \"Error\"\n    current = 0\n    max_unique = 0\n    for i in range(len(str1)):\n        if str1[i]!= str1[current]:\n            current += 1\n            max_unique = max(max_unique,current)\n    return max_unique\n    \ndef create_temp_list(num1):\n    '''\n    Write a function to create a temporary list from a given list and create a list with the same elements in the same order.\n    '''\n    temp_list = []\n    for i in range(num1):\n        temp_list.append(i)\n    return temp_list\n    \ndef create_temp_list_v2(num1):\n    '''\n    Write a function to create a temporary list from a given list and create a list with the same elements in the same order.\n    '''\n    temp_list = []\n    for i in range(num1):\n        temp_list.append(i)\n    return temp_list[::-1]\n    \ndef string_reverse(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return \"Error\"\n    reverse = \"\"\n    for i in range(len(str1)):\n        reverse = str1[i] + reverse\n    return reverse\n    \ndef string_reverse_v2(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return \"Error\"\n    return str1[::-1]\n    \ndef string_reverse_v3(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return \"Error\"\n    return str1[::-1]\n    \ndef reverse_word(str1):\n    '''\n    Write a function to reverse a word.\n    '''\n    return str1[::-1]\n    \ndef reverse_word_v2(str1):\n    '''\n    Write a function to reverse a word.\n    '''\n    if len(str1) == 0:\n        return \"Error\"\n    return str1[::-1]\n    \ndef reverse_word_v3(str1):\n    '''\n    Write a function to reverse a word.\n    '''\n    if len(str1) == 0:\n        return \"Error\"\n    return str1[::-1]\n    \ndef print_array_in_row(list1):\n    '''\n    Write a function to print a given list in a row with a given number of elements.\n    '''\n    if len(list1) == 0:\n        return \"Error\"\n    print(list1)\n    \ndef print_array_in_row_v2(list1,number):\n    '''\n    Write a function to print a given list in a row with a given number of elements.\n    '''\n    if len(list1) == 0:\n        return \"Error\"\n    for i in range(len(list1)):\n        print(list1[i],end = \" \")\n        if i!= len(list1) - 1:\n            print(end = \"|\")\n    print()\n    \ndef print_array_in_row_v3(list1,number):\n    '''\n    Write a function to print a given list in a row with a given number of elements.\n    '''\n    if len(list1) == 0:\n        return \"Error\"\n    fo"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Logic:\n    # if i == 0:\n    #     print('List is present')\n    # else:\n    #     print('No List is present')\n    # return 0 or 1\n    #\n    # Logic:\n    # if i == 0:\n    #     return 1\n    # else:\n    #     return 0\n    #\n    # Logic:\n    # if i == 0:\n    #     if k == 1:\n    #         print('List is present')\n    #     else:\n    #         print('No List is present')\n    #     return 0 or 1\n    # else:\n    #     return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    li = []\n    for i in range(len(Input)):\n        if Input[i] not in li:\n            li.append(Input[i])\n    return len(li)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, tuple):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([x for x in Input if type(x)==list])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    for i in range(len(Input)):\n        if (Input[i] in List):\n            pass\n        else:\n            List.append(Input[i])\n    return len(List)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    if len(Input)==0:\n        return count\n    else:\n        for i in Input:\n            if type(i)==list:\n                count = count+1\n            else:\n                continue\n        return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == tuple:\n        print(\"Yes, I found %d list(s)\"%(len(Input)))\n    else:\n        print(\"Sorry, I failed to find a list in the tuple.\")\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: type(x)==type([]) and x!= [],Input)))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if max_diff < diff:\n                max_diff = diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<=1:\n        return 0\n    \n    max_val = arr[0]\n    max_diff = arr[1]-arr[0]\n    \n    for i in range(2,len(arr)):\n        if max_diff<abs(arr[i]-arr[i-1]):\n            max_diff = abs(arr[i]-arr[i-1])\n            max_val = arr[i]\n            \n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = float('-inf')\n    min = float('inf')\n    for i in arr:\n        if i>max:\n            max = i\n        if i<min:\n            min = i\n    return max-min\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -1\n    n = len(arr) \n    for i in range(0, n-1): \n        for j in range(i+1, n): \n            diff = arr[j] - arr[i] \n            if diff > max_diff: \n                max_diff = diff\n    print(\"Maximum difference is:\", max_diff) \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    maxDiff = 0\n    for i in range(0, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Code here\n    if len(arr)<2:\n        return -1\n    \n    max_diff = arr[0] - arr[1]\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    maxdiff = abs(arr[0]-arr[1])\n    for i in range(1,len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > maxdiff:\n            maxdiff = diff\n    return maxdiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > m:\n            m = arr[i]\n    return abs(m)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        if (arr[i]>arr[i+1]):\n            diff = arr[i]-arr[i+1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n    \narr = [1,2,3,4,5] \nprint(max_Abs_Diff(arr))"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # I should write this in one line\n    for x in range(1, a):\n        for y in range(1, b):\n            if a * x + b * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, int(n / 2) + 1):\n        a_div = a / i\n        b_div = b / i\n        a_rem = a % i\n        b_rem = b % i\n        if a_div!= b_div and a_rem == b_rem:\n            x = a_div\n            y = b_div\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(a, b):\n        for y in range(a, b):\n            if x * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    \n    if a * n == b:\n        return (a, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        if a*i + b*(n - i) == n:\n            return (a*i, b*(n-i))\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n    if (a == 0) and (b == 0):\n        return (a, b)\n    if (x > 0) and (y > 0):\n        return (x, y)\n    if (x == 0) and (y > 0):\n        return (x, y)\n    if (x > 0) and (y == 0):\n        return (x, y)\n    if (x < 0) and (y > 0):\n        return (x, -y)\n    if (x < 0) and (y == 0):\n        return (x, y)\n    if (x == 0) and (y < 0):\n        return (x, -y)\n    if (x > 0) and (y < 0):\n        return (x, -y)\n    if (x < 0) and (y < 0):\n        return (x, -y)\n    return (None, None)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(1, 100):\n        for j in range(1, 100):\n            if i*i + j*j == n:\n                x = i\n                y = j\n                return x, y\n    return x, y\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if is_divisible(a, x) and is_divisible(b, x) and is_divisible(n, a + b):\n            return (x, int((n - a - b) / x))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if all numbers are prime numbers, the equation has no solution, so return None.\n    if not a.is_prime() and not b.is_prime():\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # remove all elements that are in second list from list 1\n    # use set to eliminate duplicates\n    result = list(set(list1) - set(list2))\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using a set to remove duplicates\n    new_list = list(set(list1) - set(list2))\n    \n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list1.difference(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n    \ndef list_diff(list1, list2):\n    '''\n    Write a function to return the difference of two given lists.\n    '''\n    return list(set(list1) - set(list2))\n    \ndef count_val(lst, val):\n    '''\n    Write a function to count the number of occurrences of a given value in a list.\n    '''\n    return lst.count(val)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [n for n in list1 if n not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    print(new_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    removed_elements = []\n    for element in list1:\n        if element in list2:\n            continue\n        removed_elements.append(element)\n    return removed_elements\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 2) + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += (n-2*i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 1\n    while x < n:\n        x = x + x\n        n = n - 1\n    return x\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    while n > 0:\n        n = n - 2\n        sum += n\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return (n + sum_series(n-2)) if n >= 2 else n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0:\n        return None\n    if l < 3:\n        return None\n    if s < l:\n        return None\n    return 1/2*s*l*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    h = s * tan(pi/s)\n    return (s * h) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * s * (s - l) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = l * l * s / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*l*s*(s-1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l*0.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s < 0) or (l < 0):\n        return \"Invalid input\"\n    elif (s <= 0):\n        return \"Polygon cannot have 0 or negative length\"\n    return round((s * l * 0.5 * tan(pi / s)), 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2 * tan(pi / s)\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*s) / 2 * pi\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = []\n    i = 0\n    while i < n:\n        if n % (i+1) == 0:\n            d.append(i+1)\n        i += 1\n    if sum(d) == n:\n        print(sum(d))\n    else:\n        print(None)\ndef div_sum_n(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = []\n    i = 0\n    while i < n:\n        if n % (i+1) == 0:\n            d.append(i+1)\n        i += 1\n    if sum(d) == n:\n        print(sum(d))\n    else:\n        print(None)\ndef is_prime(n):\n    '''\n    Write a function to determine if the number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_n(n):\n    '''\n    Write a function to determine if the number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_k(n, k):\n    '''\n    Write a function to determine if the number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_k_n(n, k):\n    '''\n    Write a function to determine if the number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_n_k(n, k):\n    '''\n    Write a function to determine if the number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\ndef sum_div(n):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef sum_div_n(n):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef sum_div_k(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef sum_div_k_n(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef sum_div_n_k(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef div_k_sum(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef div_k_sum_n(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef div_k_sum_n_k(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef div_k_sum_n_k_n(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef div_k_sum_n_k_k(n, k):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    s = 0\n    d = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    return s\ndef num_div(n):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef num_div_n(n):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef num_div_k(n, k):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef num_div_k_n(n, k):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef num_div_n_k(n, k):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef div_n_num_k(n, k):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef div_n_num_k_n(n, k):\n    '''\n    Write a function to determine the number of divisors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            i += 1\n    return i\ndef div_n_num"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i <= n: \n        if n%i == 0: \n            j = i \n            while j <= n: \n                if j % i == 0 and j == n: \n                    print(n, \"==\", i, \"*\", i)\n                j += 1\n        i += 1\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n):\n        total_divisors = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total_divisors += i\n        return total_divisors\n    return sum_divisors(n) == n\n    \ndef find_fib(n):\n    '''\n    Write a function that finds the nth fibonacci number in a recursive way.\n    '''\n    def fib_rec(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib_rec(n-1) + fib_rec(n-2)\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n==sum(range(1,int(math.sqrt(n))+1)) or n==sum(range(2,int(math.sqrt(n))+1))\ndef comp(x,y):\n    return x==y\ndef is_prime(x):\n    for i in range(2, int(math.sqrt(x))+1):\n        if x%i == 0:\n            return False\n    return True\ndef number_of_divisors(n):\n    '''\n    Write a function to determine the number of divisors of an integer.\n    '''\n    if n == 1:\n        return 1\n    if is_prime(n):\n        return 1\n    return n + 1\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    sum = 1\n    while i <= n:\n        if n % i == 0:\n            sum = sum + i\n        i += 1\n    if sum == 2 * n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum_2(n):\n        s = 0\n        for i in range(1,n+1):\n            if n%i==0:\n                s+=i\n        return s==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = 1\n    while n > 0:\n        d *= n % 10\n        n = n // 10\n    return d\n    \nprint(div_sum(50))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i == 0: \n            divisors.append(i) \n            if i!= n/i: \n                divisors.append(n/i) \n    return sum(divisors)==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i].upper() in dict.keys():\n            dict[str1[i].upper()] += 1\n        else:\n            dict[str1[i].upper()] = 1\n    return dict\nprint(count_char_position(\"How are you? I am fine.\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    d = {}\n    for letter in string.ascii_lowercase:\n        d[letter] = 0\n    for letter in str1:\n        d[letter.lower()] += 1\n    return sum([v for k,v in d.items()])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().find(chr(i + 65))!= -1:\n            count = count + 1\n    return count\n    "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_count = {}\n    for i in range(len(str1)): \n        dict_count[str1[i]] = 0\n    for j in range(len(str1)): \n        dict_count[str1[j]] += 1\n    return dict_count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #Solution\n    alpha = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for x in range(len(str1)):\n        alpha[str1[x].lower()] = x + 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i].upper() == str1[i].lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_list = list(str1.lower())\n    dict1 = dict()\n    for index in range(len(str_list)):\n        dict1[str_list[index]] = index\n    count = 0\n    for key in dict1:\n        if key in dict1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([char for char in str1 if char.lower() in ('a','e','i','o','u','y')])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = 0\n    for i in range(len(str1)):\n        if str1.lower().index(str1[i].lower()) == i:\n            n += 1\n    return n\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_nums = []\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for a in A:\n        for b in A:\n            if (a ^ b) % 2 == 0 and a!= b:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor = lambda num: num^2\n    lst = []\n    even_list = []\n    for num in A:\n        lst.append(xor(num))\n    # print(lst)\n    lst.sort()\n    # print(lst)\n    for i in range(0,len(lst)):\n        if lst[i]%2==0:\n            even_list.append(lst[i])\n    print(even_list)\n    return len(even_list)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # # Solution 1 \n    # res = 0\n    # for a in A:\n    #     for b in A:\n    #         if (a ^ b) == 0:\n    #             res += 1\n    # return res\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                xor_even += 1\n    return xor_even\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A)<=1:\n        return 0\n    even = True\n    pairs = 0\n    for i in range(1,len(A)):\n        if A[i]&1==1:\n            if even:\n                pairs += 1\n                even = False\n        else:\n            even = True\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor_sum = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if(A[i] ^ A[j] == 0):\n                even_xor_sum += 1\n    return even_xor_sum\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 1\n    while True:\n        if (count << 1) > n:\n            break\n        count <<= 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while(n&n-1==0):\n        n>>=1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #Check for exact power of 2\n    if n == 1:\n        return 1\n    #Convert n to binary and check for 1 in last digit\n    binary_n = bin(n)\n    if binary_n[-1] == '1':\n        return 2*n\n    #Otherwise use binary search\n    else:\n        max = n - 1\n        start = 0\n        end = n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (power < n):\n        power <<= 1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    result = 1\n    while result <= n:\n        result = result << 1\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2: \n        return n\n    while n % 2 == 0: \n        n = n // 2\n    return n * 2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    a = 1\n    while a < n:\n        a = 2**a\n    return a\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while i <= n:\n        i = i << 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if x == a[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count\n    \ndef vowels(str):\n    '''\n    Write a function to get the count of vowels in a given string.\n    '''\n    vowel=['a','e','i','o','u']\n    count=0\n    for i in str:\n        if i in vowel:\n            count=count+1\n    return count\n            \ndef reverse(a):\n    '''\n    Write a function to reverse a given string.\n    '''\n    rev=''.join(reversed(a))\n    return rev\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    \n    for i in range(len(a)): \n    \n        if a[i] == x: \n            count += 1\n    \n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = []\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            b+=1\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    i = m-1\n    while i >= 0:\n        sum = sum + list1[i]\n        i -= 1\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\nsum_range_list([1,2,3,4,5,6,7,8,9], 2, 4)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total = total + list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # if len(list1) < m or len(list1) < n:\n    #     return None\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n > len(list1):\n        return 0\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list_sum = 0\n    list_len = len(list1)\n    for i in range(m,n):\n        list_sum += list1[i]\n    return list_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n    \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 2\nn = 6\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # m = int(input(\"Enter the lower limit : \"))\n    # n = int(input(\"Enter the upper limit : \"))\n    sum = 0\n    for num in list1:\n        if m <= num <= n:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    print(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return None\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*0.5) * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = math.sqrt(5)\n    return s * a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from its length of its sides.\n    '''\n    return (1/3) * (3*math.sqrt(3)) * a**2\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a * a\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    return (b*h)/2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi * r**2\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_circle_compressed(r):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    return 2*math.pi*r\ndef area_parabola(h,r):\n    '''\n    Write a function to find the area of a parabola from its height and radius.\n    '''\n    return (1/2) * h * r**2\ndef perimeter_parabola(h,r):\n    '''\n    Write a function to find the perimeter of a parabola from its height and radius.\n    '''\n    return 2*(h*r)\ndef area_cube(l):\n    '''\n    Write a function to find the area of a cube from its length.\n    '''\n    return l**3\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from its width and height.\n    '''\n    return a * b\ndef area_rhombus(a,h):\n    '''\n    Write a function to find the area of a rhombus from its height and length.\n    '''\n    return math.sqrt(1/2 * (a**2 + h**2))\ndef area_trapezoid(h,l):\n    '''\n    Write a function to find the area of a trapezoid from its height and width.\n    '''\n    return (h + l)/2\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle from its radius.\n    '''\n    return 2*math.pi*r\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a square from its length.\n    '''\n    return 4*a\ndef circumference_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle from its width and height.\n    '''\n    return 2*(a + b)\ndef circumference_triangle(b,h):\n    '''\n    Write a function to find the circumference of a triangle from its height and base.\n    '''\n    return math.sqrt(b**2 + h**2)\ndef circumference_pentagon(a):\n    '''\n    Write a function to find the circumference of a pentagon from its length.\n    '''\n    return 4*math.sqrt(5) * a\ndef circumference_hexagon(a):\n    '''\n    Write a function to find the circumference of a hexagon from its length.\n    '''\n    return 2*math.sqrt(3) * a\ndef circumference_dodecagon(a):\n    '''\n    Write a function to find the circumference of a dodecagon from its length.\n    '''\n    return 6*math.sqrt(5) * a\ndef circumference_heptagon(a):\n    '''\n    Write a function to find the circumference of a heptagon from its length.\n    '''\n    return 4*math.sqrt(5) * a\ndef circumference_octagon(a):\n    '''\n    Write a function to find the circumference of an octagon from its length.\n    '''\n    return 8*math.sqrt(5) * a\ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a decagon from its length.\n    '''\n    return 2*math.sqrt(5) * a\ndef circumference_octogon(a):\n    '''\n    Write a function to find the circumference of an octogon from its length.\n    '''\n    return 6*math.sqrt(5) * a\ndef circumference_equilateral_triangle(h):\n    '''\n    Write a function to find the circumference of an equilateral triangle from its height.\n    '''\n    return h\ndef circumference_square_trapezoid(a,h):\n    '''\n    Write a function to find the circumference of a trapezoid from its height and width.\n    '''\n    return 2*(a + h)\ndef circumference_square_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle from its width and height.\n    '''\n    return 2*(a + b)\ndef circumference_square_triangle(a,h):\n    '''\n    Write a function to find the circumference of a triangle from its height and base.\n    '''\n    return math.sqrt(a**2 + h**2)\ndef circumference_square_rectangle_trapezoid(a,h,b):\n    '''\n    Write a function to find the circumference of a trapezoid from its height and width.\n    '''\n    return 2*(a + h + b)\ndef circumference_square_equilateral_triangle(h):\n    '''\n    Write a function to find the circumference of an equilateral triangle from its height.\n    '''\n    return 2*h\ndef circumference_square_square(a):\n    '''\n    Write a function to find the circumference of a square from its length.\n    '''\n    return 4*a\ndef circumference_square_dodecagon(a):\n    '''\n    Write a function to find the circumference of a dodecagon from its length.\n    '''\n    return 2*math.sqrt(5) * a\ndef circumference_square_heptagon(a):\n    '''\n    Write a function to find the circumference of a heptagon from its length.\n    '''\n    return 2*math.sqrt(5) * a\ndef circumference_square_octagon(a):\n    '''\n    Write a function to find the circumference of an octagon from its length.\n    '''\n    return 2*math.sqrt(5) * a\ndef circumference_square_decagon(a):\n    '''\n    Write a function to find the circumference of a decagon from its length.\n    '''\n    return math.sqrt(5) * a\ndef circumference_square_equilateral_triangle(h):\n    '''\n    Write a function to find the circumference of an equilateral triangle from its height.\n    '''\n    return h\ndef circumference_parabola(h,r):\n    '''\n    Write a function to find the circumference of a parabola from its height and radius.\n    '''\n    return (2*math.sqrt(5) * r) + h\ndef circumference_rectangle_parabola(a,h,r):\n    '''\n    Write a function to find the circumference of a rectangle from its width and height and radius.\n    '''\n    return (2*a + 2*h + 2*r)\ndef circumference_rectangle_square(a,b):\n    '''\n    Write a function to find the circumference of a rectangle from its width and height.\n    '''\n    return 2*(a + b)\ndef circumference_rectangle_dodecagon(a,h,b):\n    '''\n    Write a function to find the circumference of a dodecagon from its length and height.\n    '''\n    return 2*(a + h + b)\ndef circumference_rectangle_square_parabola(a,h,r):\n    '''\n    Write a function to find the circumference of a parabola from its length and height.\n    '''\n    return (2*math.sqrt(5) * r) + 2*(a + h)\ndef circumference_dodecagon_rectangle"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(2*a - 1)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    area = 0.25*(5*a)**2\n    return area*5\n    \ndef is_prime(n):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    i = 2\n    while i <= math.sqrt(n):\n        if (n % i == 0):\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a\ndef square_of_length(b):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return b**2\ndef square_of_perimeter(c):\n    '''\n    Write a function that takes in a perimeter of a square and returns its square.\n    '''\n    return 4*c\ndef square_of_area(d):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return math.sqrt(d)\ndef square_of_circumference(e):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return 2*math.pi*e\ndef square_of_square(f):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return 4*f\ndef area_square(g):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return math.sqrt(g)\ndef area_circle(h):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return math.pi*h**2\ndef area_triangle(i):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i\ndef area_rectangle(j):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*j\ndef area_square(k):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_circle(l):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.25*math.pi*l**2\ndef area_hexagon(m):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*m*m*3\ndef area_heptagon(n):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.75*n*n*3\ndef area_octagon(o):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return 1.5*o*o*3\ndef area_nonagon(p):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.75*o*o*3\ndef area_equilateral_triangle(q):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*q*q\ndef area_equilateral_rectangle(r):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_equilateral_square(s):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_obtuse_triangle(t):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*t*t*3\ndef area_obtuse_rectangle(u):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_obtuse_square(v):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_acute_triangle(w):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*w*w*3\ndef area_acute_rectangle(x):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_acute_square(y):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_non_triangle(z):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*z*z*3\ndef area_non_rectangle(a):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_non_square(b):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_equilateral_pentagon(c):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_circle(d):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.25*math.pi*d**2\ndef area_equilateral_hexagon(e):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*e*e*3\ndef area_equilateral_square(f):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return i*i\ndef area_equilateral_triangle(g):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_triangle_equilateral_rectangle(h):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i\ndef area_triangle_equilateral_square(i):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i\ndef area_triangle_equilateral_square(j):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i\ndef area_equilateral_triangle(k):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_triangle(l):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_triangle(m):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_triangle(n):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_triangle(o):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n    return.5*i*i*3\ndef area_equilateral_triangle(p):\n    '''\n    Write a function that takes in a length of a side of a square and returns its square.\n    '''\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l=a\n    if l%2==0:\n        l=l-1\n    a=(math.sqrt(5)*l)/2\n    return a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (a * 0.5 * math.sqrt(5)) / 2\n    return s * 4\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # number of sides = number of times 5\n    return 5 * (a * (a - 5)) / 4\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if'std' not in s:\n        return 0\n    else:\n        count = 0\n        s = s.lower()\n        for i in range(len(s)):\n            if s[i] =='s' or s[i] == 'd' or s[i] == 't':\n                count += 1\n        return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = s.count('std')\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    #For a string with length > 1:\n    #    if string is std\n    #        count = 1\n    #    else:\n    #        if string is std, increment count\n    #        else:\n    #            if string is not std:\n    #                count = count + 1\n    #            else:\n    #                count = count\n    #    return count\n    \n    return (s.count('std'))\n    \nprint(count_occurance('abd asd nd asd'))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len('std')] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len('std')] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \n    \ndef upper_lower(s):\n    '''\n    Write a function to print all the upper case and lower case characters in a string.\n    '''\n    print('Upper:',s.upper())\n    print('Lower:',s.lower())\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(type(test_tuple))\n    for elem in test_tuple:\n        if type(elem)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # start writing your code here\n    for item in test_tuple:\n        if type(item)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple,tuple):\n        raise ValueError('check_type(): Only tuple is allowed')\n    if len(test_tuple) == 1:\n        if isinstance(test_tuple[0],tuple):\n            return check_type(test_tuple[0])\n    for data in test_tuple:\n        if not isinstance(data,tuple):\n            raise ValueError('check_type(): Only tuple is allowed')\n        if len(data) == 1:\n            if isinstance(data[0],tuple):\n                return check_type(data[0])\n        else:\n            if not isinstance(data,tuple):\n                raise ValueError('check_type(): Only tuple is allowed')\n            for elem in data:\n                if not isinstance(elem,tuple):\n                    raise ValueError('check_type(): Only tuple is allowed')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    flag = True\n    for element in test_tuple:\n        if not isinstance(element,(int,float,bool)):\n            flag = False\n    return flag\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = True\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            result = False\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i,int) and not isinstance(i,str):\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for element in test_tuple:\n        if type(element) == type(test_list[0]):\n            test_list.append(element)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i) == type(test_tuple[0]):\n            pass\n        else:\n            print(f'Not all elements in the tuple are same type: {type(i)}')\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    types = []\n    for x in test_list:\n        types.append(type(x))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in arr:\n        if arr.count(i)>n//2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    for num in arr:\n        cnt += 1\n        if cnt == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    m = arr[n-1]\n    i = 0\n    cnt = 0\n    while i < n:\n        if m == arr[i]:\n            cnt += 1\n        i += 1\n    if cnt > (n/2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    '''\n    I have 3 cases. \n    1. The element is on the left half. \n    2. The element is on the right half. \n    3. The element is on both halves. \n    '''\n    majority_count = 0\n    majority_element = 0\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return True\n    #     else:\n    #         return False\n    # else:\n    #     if arr[0] == x:\n    #         return True\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return True\n    #         return False\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the element.\n    '''\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        # if arr[0] == x:\n        #     return 0\n        # else:\n        #     for i in range(1,n):\n        #         if arr[i] == x:\n        #             return i\n        #     return -1\n        if arr[0] == x:\n            return 0\n        else:\n            for i in range(1,n):\n                if arr[i] == x:\n                    return i\n            return -1\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 1\n        else:\n            return 0\n    else:\n        if arr[0] == x:\n            return 1\n        else:\n            for i in range(1,n):\n                if arr[i] == x:\n                    return i+1\n            return n\n    if arr[0] == x:\n        return 1\n    else:\n        for i in range(1,n):\n            if arr[i] == x:\n                return i+1\n        return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    if arr[0] == x:\n        return 1\n    for i in range(1,n):\n        if arr[i] == x:\n            return i+1\n    return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    if arr[0] == x:\n        return 1\n    for i in range(1,n):\n        if arr[i] == x:\n            return i+1\n    return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    if arr[0] == x:\n        return 1\n    for i in range(1,n):\n        if arr[i] == x:\n            return i+1\n    return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if arr[0] == x:\n    #         return 1\n    #     else:\n    #         for i in range(1,n):\n    #             if arr[i] == x:\n    #                 return i+1\n    #     return n\n    # if arr[0] == x:\n    #     return 1\n    # else:\n    #     for i in range(1,n):\n    #         if arr[i] == x:\n    #             return i+1\n    #     return n\n    if arr[0] == x:\n        return 1\n    for i in range(1,n):\n        if arr[i] == x:\n            return i+1\n    return n\n    '''\n    Write a function that takes in a sorted array and an element and returns the index of the first element after the element.\n    '''\n    # if len(arr) == 1:\n    #     if arr[0] == x:\n    #         return 1"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 1:\n        return True if arr[0] == x else False\n    # recursive case\n    if arr[n//2] == x:\n        return True\n    if arr[n//2]!= x:\n        return False\n    # recursive call\n    return is_majority(arr, n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    majority = int(n/2)\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n            \n        if count > majority:\n            return True\n    return False\n    \n    \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True if arr[0] == x else False\n    if arr[n // 2] == x:\n        return True\n    if arr[n // 2]!= x:\n        return False\n    return is_majority(arr[:n // 2], n // 2, x) or is_majority(arr[n // 2 + 1:], n - n // 2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case\n    if n == 0:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    while n:\n        ans += n & 1\n        n >>= 1\n    return ans"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # num = 0\n    # while n!= 0:\n    #     num += 1\n    #     n = n & (n-1)\n    # return num\n    return bin(n).count('1')\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        n &= (n - 1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef count_Set_Bits_v2(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code here\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n: \n        res += n & 1\n        n >>= 1\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n = n&(n-1)\n        count+=1\n    print(count)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n > 0): \n        count += (n & 1) \n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binary_string = bin(n)[2:]\n    count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            count += 1\n    return count\nprint(count_Set_Bits(100))\nprint(count_Set_Bits(0))\nprint(count_Set_Bits(10))\nprint(count_Set_Bits(8))\nprint(count_Set_Bits(255))\nprint(count_Set_Bits(256))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            res += str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    my_str = str\n    my_list = list(my_str)\n    \n    for i in range(0,len(my_list)):\n        if i % 2 == 0:\n            continue\n        else:\n            my_list.remove(my_list[i])\n    \n    return \"\".join(my_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(filter(lambda x: x%2==0, str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Step 1: Define a new string and assign to the variable\n    new_string = ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.split()\n    str1 = \"\"\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            str1 = str1 + str[i]\n    return str1\nstr = \"The quick brown fox jumps over the lazy dog\"\nprint(odd_values_string(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    odd_values_string = \"\".join([str[x] for x in range(0, len(str), 2)])\n    print(odd_values_string)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    for i in range(len(str_list)):\n        if i%2==0:\n            continue\n        else:\n            str_list.remove(str_list[i])\n    print(str_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = 'abcbba'\n    result = ''\n    for i in range(0, len(str), 2):\n        result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[1::2])\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    return 'you have entered some non-numbers'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    # if a<b and a<c: \n    #     return a \n    # elif b<a and b<c: \n    #     return b \n    # else: \n    #     return c \n    \n    # one line solution\n    return min(a,b,c)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    if b<=a and b<=c:\n        return b\n    if c<=a and c<=b:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    while(i<=r):\n        i = i<<1\n    return i\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n >> l) & 1!= 0 and (n >> r) & 1!= 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r <= l:\n        return False\n    if n & (1 << l) > 0:\n        return False\n    if n & (1 << (r-1)) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r<n and l<n:\n        count = 0\n        while l<=n:\n            count = count + 1\n            l = l + 1\n        return count\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n&i==i:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n==0) or (l<0) or (r>=0):\n        print(\"Invalid input\")\n    else:\n        flag=0\n        while(l<=r):\n            l=l<<1\n            r=(r>>1)\n            if l==0:\n                flag=1\n                break\n        if flag==1:\n            print(\"Yes, All Bits are set\")\n        else:\n            print(\"No, All Bits are not set\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    lst = []\n    for i in range(n+1):\n        lst.append(i)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if l<=i<=r:\n            if l==0 or r==0:\n                return True\n            else:\n                l>>=1\n                r>>=1\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (1 << n) - 1 >= ((r - l) << 1) -1\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(i&(i+1)):\n            return False\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range_Using_Xor(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(i&(i+1)):\n            return False\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range_Using_Xor_Two_Approaches(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while(r>n):\n        r-=1\n    for i in range(l,r+1):\n        if(i&(i+1)):\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.insert(0, -arr[i])\n            arr.pop()\n            arr.insert(i+1, -arr[i])\n            arr.pop()\n            i += 2\n            continue\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[:n] + arr[n:][::-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.insert(0,arr.pop(i))\n            i += 1\n        i += 1\n    print(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        for j in range(n):\n            if arr[j] > 0:\n                break\n        new_arr.append(arr[i])\n        arr.pop(i)\n    for i in range(n):\n        for j in range(n):\n            if arr[j] < 0:\n                break\n        new_arr.append(arr[i])\n        arr.pop(i)\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def swap_order(x, y):\n        if y >= 0:\n            arr[x], arr[y] = arr[y], arr[x]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # helper function, neg_pos_split\n    def neg_pos_split(arr):\n        # this function takes in an array and returns a tuple\n        # containing first n negative numbers, followed by n positive numbers\n        # create an empty list for negative numbers\n        neg_nums = []\n        # create an empty list for positive numbers\n        pos_nums = []\n        # create a for loop for the array, and set the current index to 1\n        # if the current index element is < 0, add to the negative list\n        # else if the current index element is > 0, add to the positive list\n        for index in range(n):\n            if arr[index] < 0:\n                neg_nums.append(arr[index])\n            else:\n                pos_nums.append(arr[index])\n        # return the negative and positive list, respectively\n        return (neg_nums, pos_nums)\n    \n    # helper function, re_arrange_order\n    def re_arrange_order(arr, neg, pos):\n        # this function takes in two lists, a negative list and a positive list\n        # and combines the negative list with the positive list\n        # each element of the combined list is then added to the original list\n        for index in range(len(neg)):\n            arr.append(neg[index])\n            arr.append(pos[index])\n        return (arr)\n    \n    # helper function, re_arrange_arr\n    def re_arrange_arr(arr, n):\n        # this function takes in an array and an integer n\n        # splits the array into two lists, negative and positive\n        # calls the helper function neg_pos_split to get the negative and positive lists\n        # calls the helper function re_arrange_order to combine the lists\n        # re-arranges the combined list into the original array\n        # return the original array\n        \n        neg, pos = neg_pos_split(arr)\n        arr = re_arrange_order(arr, neg, pos)\n        return (arr)\n    \n    # call the helper function re_arrange_arr for the original array\n    return (re_arrange_arr(arr, n))\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # sort the array\n    arr.sort()\n    # if n is zero, nothing to do\n    if n == 0:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create a dictionary to store number of negative and positive elements\n    dict_negative_number = {}\n    dict_positive_number = {}\n    \n    # create a list to store the elements\n    arr_element = []\n    \n    # create a sorted list\n    sorted_list = []\n    \n    # traverse through the given array\n    for i in range(n):\n        # if the element is negative add it to the dictionary\n        if arr[i] < 0:\n            # add negative element to the dict\n            dict_negative_number[arr[i]] = arr[i]\n        \n        # if the element is positive add it to the dictionary\n        elif arr[i] > 0:\n            # add positive element to the dict\n            dict_positive_number[arr[i]] = arr[i]\n    \n    # traverse through the dictionary, this time with negative elements\n    for key,value in dict_negative_number.items():\n        # add that element to the list\n        arr_element.append(key)\n    \n    # traverse through the dictionary, this time with positive elements\n    for key,value in dict_positive_number.items():\n        # add that element to the list\n        arr_element.append(key)\n    \n    # sort the list\n    arr_element = sorted(arr_element)\n    \n    # traverse through the list again and add the elements to the original array\n    for i in range(n):\n        arr[i] = arr_element[i]\n    \n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # list comprehension\n    # reverse list\n    arr = arr[:n]\n    # reverse the list\n    arr.reverse()\n    # return\n    return arr\n    \nprint(re_arrange_array([-1, 3, 6, -10, 5, 8, -9, 4, -7, 8], 5))\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # while i < n:\n    #     for j in range(i, n):\n    #         if arr[j] < 0:\n    #             break\n    #     for j in range(i):\n    #         if arr[j] < 0:\n    #             arr.append(arr[j])\n    #     arr[i:n] = arr[:n - i]\n    #     n += 1\n    \n    # i = n - 1\n    # while i > n - n % 2:\n    #     for j in range(i, n - n % 2 - 1):\n    #         if arr[j] < 0:\n    #             break\n    #     arr[i:n - n % 2] = arr[i:n - n % 2 - 1][::-1]\n    #     i += 1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if (str1 == \"\"):\n        return char\n    else:\n        return str1.replace(\" \",\"\",1)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    \n    for i in range(len(str1)):\n        if str1[i] =='':\n            str2 = str2 + char\n        else:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','_')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    str2 = str1.replace(' ','')\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    heapq.heapify(list1)\n    for i in range(n):\n        final_list.append(heapq.heappop(list1))\n    return final_list\n    \ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        final_list.append(heapq.heappop(list1))\n    return final_list\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef larg_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef larg_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]>list1[0]:\n                heapq.heapreplace(list1,list1[j])\n    final_list=list1[:n]\n    return final_list\n    \ndef small_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    n=int(n)\n    final_list=[]\n    if n>len(list1):\n        return final_list\n    for i in range(n):\n        for j in range(len(list1)):\n            if list1[j]<list1[0]:\n                heapq"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nlargest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\ndef larg_nitem(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nsmallest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\ndef larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nlargest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\ndef larg_nitem_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nsmallest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\ndef larg_nitem_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nlargest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\ndef list_larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list(list1)\n    l = []\n    while len(a)>0:\n        m = heapq.nlargest(n,a)\n        l.append(m)\n        a = a[n:]\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    #create a min heap and then insert the first n items\n    \n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    \n    #pop from the min_heap\n    #insert the last item from the list into the min_heap\n    for i in range(len(list1)-1,0,-1):\n        heapq.heappush(min_heap, list1[i])\n        heapq.heappop(min_heap)\n    \n    #return the min_heap\n    return min_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # dict1={}\n    # for i in range(len(list1)):\n    #     dict1[list1[i]]=i\n    # return list1[sorted(dict1,key=dict1.get,reverse=True)[n-1]]\n    \n    # # Largest N in sorted list\n    # heap = []\n    # # for i in range(n):\n    # #     heapq.heappush(heap,(list1[i],i))\n    # # return heapq.nlargest(n,list1)\n    # # Using Priority Queue\n    # # TLE\n    \n    # def min_heapify(heap,index):\n    #     left = 2*index+1\n    #     right = 2*index+2\n    #     smallest = index\n    #     if left<len(heap) and heap[left][0]<heap[smallest][0]:\n    #         smallest = left\n    #     if right<len(heap) and heap[right][0]<heap[smallest][0]:\n    #         smallest = right\n    #     if smallest!= index:\n    #         heap[index],heap[smallest] = heap[smallest],heap[index]\n    #         min_heapify(heap,smallest)\n    \n    # def build_min_heap(list1):\n    #     for i in range(len(list1)//2-1,-1,-1):\n    #         min_heapify(list1,i)\n    #     return list1\n    \n    # build_min_heap(list1)\n    # res = []\n    # for i in range(n):\n    #     heapq.heappop(list1)\n    # return list1\n    \n    # # Using MinHeap\n    # min_heap = []\n    # for i in range(n):\n    #     heapq.heappush(min_heap,list1[i])\n    # return min_heap\n    \n    \n    # Using Max Heap\n    def max_heapify(heap,index):\n        left = 2*index+1\n        right = 2*index+2\n        largest = index\n        if left<len(heap) and heap[left]>heap[largest]:\n            largest = left\n        if right<len(heap) and heap[right]>heap[largest]:\n            largest = right\n        if largest!= index:\n            heap[index],heap[largest] = heap[largest],heap[index]\n            max_heapify(heap,largest)\n    \n    def build_max_heap(list1):\n        for i in range(len(list1)//2-1,-1,-1):\n            max_heapify(list1,i)\n        return list1\n    \n    build_max_heap(list1)\n    \n    res = []\n    for i in range(n):\n        heapq.heappop(list1)\n    return list1\n    \ndef max_heapify(heap,index):\n    left = 2*index+1\n    right = 2*index+2\n    largest = index\n    if left<len(heap) and heap[left]>heap[largest]:\n        largest = left\n    if right<len(heap) and heap[right]>heap[largest]:\n        largest = right\n    if largest!= index:\n        heap[index],heap[largest] = heap[largest],heap[index]\n        max_heapify(heap,largest)\n    \ndef build_max_heap(list1):\n    for i in range(len(list1)//2-1,-1,-1):\n        max_heapify(list1,i)\n    return list1\n    \n    \ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns the list sorted in ascending order.\n    '''\n    max_heap = []\n    for i in range(len(list1)):\n        max_heapify(max_heap,i)\n        max_heap.append(list1[i])\n        max_heapify(max_heap,0)\n        \n    return max_heap\n    \ndef max_heapify(heap,index):\n    left = 2*index+1\n    right = 2*index+2\n    largest = index\n    if left<len(heap) and heap[left]>heap[largest]:\n        largest = left\n    if right<len(heap) and heap[right]>heap[largest]:\n        largest = right\n    if largest!= index:\n        heap[index],heap[largest] = heap[largest],heap[index]\n        max_heapify(heap,largest)\n    \ndef build_max_heap(list1):\n    for i in range(len(list1)//2-1,-1,-1):\n        max_heapify(list1,i)\n    return list1\n    \ndef sort_by_value(list1,n):\n    '''\n    Write a function that takes in a list and returns a new list that contains all the values in the original list in ascending order.\n    '''\n    max_heap = []\n    for i in range(len(list1)):\n        max_heapify(max_heap,i)\n        max_heap.append(list1[i])\n        max_heapify(max_heap,0)\n        \n    # return max_heap\n    return max_heap[n:]\n    \ndef swap(list1,i,j):\n    '''\n    Write a function that takes in a list and two integers i and j and swaps the values of the two items in the list that have the indices i and j.\n    '''\n    list1[i],list1[j] = list1[j],list1[i]\n    return list1\n    \ndef max_heap_insert(list1,i):\n    '''\n    Write a function that takes in a list and an integer i and inserts an item into a heap in such a way that the resulting heap has the largest value in the heap.\n    '''\n    if i>len(list1)-1:\n        return \n    # max_heapify(list1,i)\n    # list1[i],list1[-1] = list1[-1],list1[i]\n    # return list1\n    while i<len(list1):\n        max_heapify(list1,i)\n        i+=1\n    list1.append(list1[0])\n    list1[0],list1[-1] = list1[-1],list1[0]\n    max_heapify(list1,0)\n    return list1\n    \ndef heap_insert(list1,i):\n    '''\n    Write a function that takes in a list and an integer i and inserts an item into a heap in such a way that the resulting heap has the largest value in the heap.\n    '''\n    if i>len(list1)-1:\n        return\n    while i<len(list1):\n        max_heapify(list1,i)\n        i+=1\n    list1.append(list1[0])\n    list1[0],list1[-1] = list1[-1],list1[0]\n    max_heapify(list1,0)\n    return list1\n    \ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns the list in ascending order.\n    '''\n    max_heap = []\n    for i in range(len(list1)):\n        max_heapify(max_heap,i)\n        max_heap.append(list1[i])\n        max_heapify(max_heap,0)\n        \n    return max_heap\n    \ndef max_heap_extract(list1):\n    '''\n    Write a function that takes in a list and returns the largest item in the heap and also deletes the largest item in the heap.\n    '''\n    if len(list1) == 1:\n        return \n    largest "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_list = []\n    while len(list1) > n:\n        largest = list1[0]\n        for x in list1:\n            if x > largest:\n                largest = x\n        largest_list.append(largest)\n        list1.remove(largest)\n    return largest_list\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n_list=[]\n    #initialize heap with the first element of the list\n    heapq.heapify(list1)\n    #add the rest of the elements of the list to the heap\n    for i in range(n-1):\n        heapq.heappush(n_list,list1[i])\n    #return the heap\n    return n_list\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1 = list1\n    m = n\n    heapq.heapify(list1)\n    i = 1\n    while i <= m:\n        heapq.heappop(list1)\n        i += 1\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create heap and add first n items to heap\n    #n items\n    #pop n items\n    #return top n items\n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    a = math.pi * r**2\n    f = a * h\n    return f\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    a = math.pi * r**2\n    f = 2*h*math.pi*a\n    return f\ndef lateral_surface_cuboid(w,h,l):\n    '''\n    Write a function to find the lateral surface area of a cuboid.\n    '''\n    a = w * h + w * l + l * h\n    f = a * 2\n    return f\ndef lateral_surface_cube(w,h,l):\n    '''\n    Write a function to find the lateral surface area of a cuboid.\n    '''\n    a = w * h + w * l + l * h\n    f = 4 * a\n    return f\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*r**3\n    f = 4*a\n    return f\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*r**3\n    f = 4*a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = h * l\n    f = 2 * a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = h * l\n    f = 2 * a\n    return f\ndef lateral_surface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    a = (math.pi/3)*(r**2)*h\n    f = 2*a\n    return f\ndef lateral_surface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    a = (math.pi/3)*(r**2)*h\n    f = 2*a\n    return f\ndef lateral_surface_paraboloid(a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2))\n    f = 4*a\n    return f\ndef lateral_surface_paraboloid(a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2))\n    f = 4*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 6*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 6*a\n    return f\ndef lateral_surface_cube(w,h,l):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    a = w * h + w * l + l * h\n    f = 8 * a\n    return f\ndef lateral_surface_cube(w,h,l):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    a = w * h + w * l + l * h\n    f = 8 * a\n    return f\ndef lateral_surface_square(a):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    a = 4*a\n    f = a\n    return f\ndef lateral_surface_square(a):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    a = 4*a\n    f = a\n    return f\ndef lateral_surface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    a = 2*(a+b)\n    f = a\n    return f\ndef lateral_surface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    a = 2*(a+b)\n    f = a\n    return f\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    a = 2*(a+b)\n    f = a\n    return f\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    a = 2*(a+b)\n    f = a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = (4/3)*math.pi*h*l\n    f = 2*a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = (4/3)*math.pi*h*l\n    f = 2*a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = (4/3)*math.pi*h*l\n    f = 2*a\n    return f\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    a = (4/3)*math.pi*h*l\n    f = 2*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 4*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 4*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 4*a\n    return f\ndef lateral_surface_tetrahedron(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron.\n    '''\n    a = (math.pi/4)*((a**2)+(b**2)+(c**2))\n    f = 4*a\n    return f\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    a = 2*(a+b)\n    f = a\n    return f\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    x = r * pi/2\n    y = r * pi * h\n    s = pi * (r**2 + x**2) + 2 * pi * r * x * y\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L=2*h\n    N=pi*r**2\n    return N*L\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h = float(h)\n    r = float(r)\n    # h = 1.1\n    # r = 0.5\n    c = 2 * 3.14 * r\n    s = 2 * 3.14 * (r**2) + 3.14 * (h**2)\n    lsa = c * s\n    return lsa\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    a = math.pow(r,2) * math.pi / 4\n    h = h * 2 * pi\n    res = a * h\n    return res\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r<=0 or h<=0:\n        return 0\n    else:\n        return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*pi*(r**2)*(h/2)\n    return surface_area\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    surface_area = 4*pi*(r**2)\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #from math import pi\n    #from math import tan\n    r=float(r)\n    h=float(h)\n    #print(h,h*pi)\n    #print(h/(2*pi),h*(tan(pi/4)))\n    print((h/2)*(r**2)*(2*pi))\n    \n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #from math import pi\n    #from math import tan\n    r=float(r)\n    print(4*pi*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = pi * r**2 * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = r * math.pi\n    return (4 * math.pi * (r**2) * h ) - math.pi * (r**2)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return math.pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 1/3 * pow(l, 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    print(f'The volume of cube is {volume}')\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"Volume of a cube = %d\" %(l**3))\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 6 * (l ** 3)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = n\n    n = n << 1\n    while n > 0:\n        if n & 1:\n            num = num ^ n\n        n = n >> 1\n    return num\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | (n-1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << int(n-1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1<<n.bit_length()-1)\n    \nprint(even_bit_set_number(11))\nprint(even_bit_set_number(4))\nprint(even_bit_set_number(5))\nprint(even_bit_set_number(63))\nprint(even_bit_set_number(9))"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n>=0:\n        return n\n    else:\n        n = n+1\n        return set_even_bit(n)\n        \ndef even_bit_set_number_python(n):\n    return n^0x1\n    \n    "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if type(n)!= int:\n        return 'Please enter an integer.'\n    elif n < 0:\n        return 'Please enter a positive integer.'\n    else:\n        return n | n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x01\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Change the even bits with 0 to 1.\n    res = n | 0x10\n    # Change the odd bits with 0 to 1.\n    res = res & 0xfe\n    # Change the all bits with 0 to 1.\n    res = res | 0x01\n    return res\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # number_of_ones = bin(n).count('1')\n    number_of_ones = int(bin(n).count('1'))\n    if number_of_ones % 2 == 0:\n        return n\n    return n ^ ((1 << number_of_ones) - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n | (n >> 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for elem in test_list:\n        if elem not in occurences:\n            occurences[elem] = 1\n        else:\n            occurences[elem] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use counter to get the number of occurances of each element in the list\n    count = Counter(test_list)\n    # dict comprehension using the counter object's.items() method to create a dictionary mapping the key to the value\n    occurence_dict = dict(count.items())\n    # return the dictionary containing the occurances\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tup in test_list:\n        if occurences.get(tup) is None:\n            occurences[tup] = 1\n        else:\n            occurences[tup] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for i in test_list:\n        if i in output:\n            output[i] += 1\n        else:\n            output[i] = 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dictionary = {}\n    for element in test_list:\n        if element not in test_dictionary:\n            test_dictionary[element] = 1\n        else:\n            test_dictionary[element] += 1\n    return test_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    # Create a dictionary to hold the count for each tuple in the list.\n    for item in test_list:\n        result_dict[item] = result_dict.get(item, 0) + 1\n    return result_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for t in test_list:\n        if t in occurences.keys():\n            occurences[t] += 1\n        else:\n            occurences[t] = 1\n    return occurences\n    \ndef get_input():\n    '''\n    Write a function that reads in a file and returns a list of the lines in the file.\n    '''\n    # Opening the input file\n    with open(\"input.txt\", \"r\") as f:\n        lines = f.readlines()\n    # Parsing the file to a list of strings\n    return [x.strip() for x in lines]\n    \ndef get_user_input():\n    '''\n    Write a function that reads in a line and returns a list of the words in the line.\n    '''\n    # Reading in the input\n    line = input(\"Enter a line of text: \")\n    # Parsing the string to a list of strings\n    return line.split()\n    \ndef test_occurences():\n    test_list = [(1,2),(1,3),(2,3),(3,4)]\n    result = check_occurences(test_list)\n    assert result == {(1,2): 2, (1,3): 1, (2,3): 1, (3,4): 1}\n    print(\"Success\")\n    \ndef test_get_input():\n    print(get_input())\n    \ndef test_get_user_input():\n    print(get_user_input())\n    \ndef check_no_duplicates(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Converting a list of tuples to a dictionary\n    occurences = {}\n    for t in test_list:\n        if t in occurences.keys():\n            occurences[t] += 1\n        else:\n            occurences[t] = 1\n    # Checking for duplicates\n    result = {}\n    for t in occurences.keys():\n        if occurences[t] not in result.values():\n            result[t] = occurences[t]\n    return result\n    \ndef test_check_no_duplicates():\n    test_list = [(1,2),(1,3),(2,3),(3,4)]\n    result = check_no_duplicates(test_list)\n    assert result == {(1,2): 2, (1,3): 1, (2,3): 1, (3,4): 1}\n    print(\"Success\")\n    \ndef get_user_input_no_duplicates():\n    print(check_no_duplicates(get_input()))\n    \ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    # Converting a list of tuples to a dictionary\n    for t in test_list:\n        if t in occurences.keys():\n            occurences[t] += 1\n        else:\n            occurences[t] = 1\n    # Checking for duplicates\n    result = {}\n    for t in occurences.keys():\n        if occurences[t] not in result.values():\n            result[t] = occurences[t]\n    return result\n    \ndef test_check_occurences2():\n    test_list = [(1,2),(1,3),(2,3),(3,4)]\n    result = check_occurences2(test_list)\n    assert result == {(1,2): 2, (1,3): 1, (2,3): 1, (3,4): 1}\n    print(\"Success\")\n    \ndef get_user_input_no_duplicates2():\n    print(check_occurences2(get_input()))\n    \ndef test_check_occurences3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    # Converting a list of tuples to a dictionary\n    for t in test_list:\n        if t in occurences.keys():\n            occurences[t] += 1\n        else:\n            occurences[t] = 1\n    # Checking for duplicates\n    result = {}\n    for t in occurences.keys():\n        if occurences[t] not in result.values():\n            result[t] = occurences[t]\n    return result\n    \ndef test_check_occurences3():\n    test_list = [(1,2),(1,3),(2,3),(3,4)]\n    result = check_occurences3(test_list)\n    assert result == {(1,2): 2, (1,3): 1, (2,3): 1, (3,4): 1}\n    print(\"Success\")\n    \ndef get_user_input_no_duplicates3():\n    print(check_occurences3(get_input()))\n    \ndef count_alphabetical_chars(test_string):\n    '''\n    Write a function that takes in a string and returns a dictionary mapping each alphabetical character to the number of times it appears in the string.\n    '''\n    result = {}\n    # Counting each alphabetical character in the string\n    for ch in test_string:\n        if ch.isalpha():\n            result[ch.lower()] = result.get(ch.lower(),0) + 1\n    return result\n    \ndef test_count_alphabetical_chars():\n    test_string = \"Hello World\"\n    result = count_alphabetical_chars(test_string)\n    assert result == {'h': 1, 'e': 1, 'l': 2, 'o': 1, 'w': 1}\n    print(\"Success\")\n    \ndef get_user_input_alphabetical_chars():\n    test_string = get_user_input()\n    result = count_alphabetical_chars(test_string)\n    return result\n    \ndef test_count_alphabetical_chars2():\n    test_string = \"aAbBcCdD\"\n    result = count_alphabetical_chars(test_string)\n    assert result == {'a': 1, 'b': 1, 'c': 2, 'd': 1}\n    print(\"Success\")\n    \ndef test_get_user_input_alphabetical_chars2():\n    test_string = get_user_input_alphabetical_chars()\n    assert test_string == {'a': 1, 'b': 1, 'c': 2, 'd': 1}\n    print(\"Success\")\n    \ndef count_number_of_characters(test_string):\n    '''\n    Write a function that takes in a string and returns a dictionary mapping each number to the number of times it appears in the string.\n    '''\n    result = {}\n    # Counting each number in the string\n    for ch in test_string:\n        if ch.isnumeric():\n            result[ch] = result.get(ch,0) + 1\n    return result\n    \ndef test_count_number_of_characters():\n    test_string = \"12345\"\n    result = count_number_of_characters(test_string)\n    assert result == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}\n    print(\"Success\")\n    \ndef get_user_input_number_of_characters():\n    test_string = get_user_input()\n    result = count_number_of_characters(test_string)\n    return result\n    \ndef test_count_number_of_characters2():\n    test_string = \"12345\"\n    result = count_number_of_characters(test_string)\n    assert result == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}\n    print(\"Success\")\n    \ndef test_get_user_inpu"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_dict = {}\n    for pair in test_list:\n        if pair in tuple_dict:\n            tuple_dict[pair] += 1\n        else:\n            tuple_dict[pair] = 1\n    return tuple_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dic = {}\n    for tup in test_list:\n        if tup not in test_dic:\n            test_dic[tup] = 1\n        else:\n            test_dic[tup] += 1\n    return test_dic\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        sub_string=str[i:len(str)]\n        if len(sub_string)==1:\n            count=count+1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            for j in range(i+1,len(str)):\n                if str[j] == \" \":\n                    break\n                elif str[i:j] == str[i:j][::-1]:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \"\":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(len(str)-i):\n            if str[i:i+j+1] == str[i:i+j+1] and len(str[i:i+j+1])!= 0:\n                count = count + 1\n    return count\n    \n    \ndef longest_non_repeat(str):\n    '''\n    Write a python function to check if a given string has all unique characters.\n    '''\n    chars = []\n    for i in range(len(str)):\n        if str[i] not in chars:\n            chars.append(str[i])\n        else:\n            return False\n    return True\n    \n    \ndef longest_non_repeat(str):\n    '''\n    Write a python function to get the longest substring of given string which contains atleast two distinct characters.\n    '''\n    char_dct = {}\n    longest = ''\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        char_dct[str[i]] = char_dct.get(str[i], 0) + 1\n        if char_dct[str[i]] == 1:\n            end = i\n    for i in range(len(str)-1, -1, -1):\n        char_dct[str[i]] = char_dct.get(str[i], 0) + 1\n        if char_dct[str[i]] == 1:\n            start = i\n    return str[start:end+1]\n    \n    \ndef reverse_vowels(str):\n    '''\n    Write a python function to reverse vowels of a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str)):\n        if str[i] in vowels:\n            result = result + str[len(str)-1-i]\n        else:\n            result = result + str[i]\n    return result\n    \n    \ndef reverse_words(str):\n    '''\n    Write a python function to reverse words of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if str[i] == \" \":\n            result = result + str[len(str)-1-i] + \" \"\n        else:\n            result = result + str[len(str)-1-i]\n    return result\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i].isalpha() == False:\n            return False\n    return True\n    \n    \ndef alternating_character(str):\n    '''\n    Write a python function to check if a given string is alternating character or not.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[len(str)-1-i]:\n            count += 1\n    return count == 0\n    \n    \ndef alternate_rows(matrix):\n    '''\n    Write a python function to check if the given 2D matrix is an alternate matrix or not.\n    '''\n    col = len(matrix[0])\n    rows = len(matrix)\n    for i in range(rows):\n        if i % 2 == 0:\n            for j in range(col):\n                if j % 2 == 0:\n                    if matrix[i][j]!= matrix[i+1][j]:\n                        return False\n        else:\n            for j in range(col):\n                if j % 2 == 1:\n                    if matrix[i][j]!= matrix[i-1][j]:\n                        return False\n    return True\n    \n    \ndef add_to_dict(dict, key, val):\n    '''\n    Write a python function to add a key value pair to a dictionary.\n    '''\n    if key in dict:\n        dict[key].append(val)\n    else:\n        dict[key] = [val]\n    return dict\n    \n    \ndef remove_from_dict(dict, key):\n    '''\n    Write a python function to delete a key value pair from a dictionary.\n    '''\n    dict.pop(key, None)\n    return dict\n    \n    \ndef remove_from_dict_with_value(dict, val):\n    '''\n    Write a python function to delete a key value pair from a dictionary\n    using the value.\n    '''\n    for i in range(len(dict)):\n        if dict[i] == val:\n            dict.pop(i)\n            break\n    return dict\n    \n    \ndef remove_from_dict_with_key(dict, key):\n    '''\n    Write a python function to delete a key value pair from a dictionary\n    using the key.\n    '''\n    dict.pop(key, None)\n    return dict\n    \n    \ndef get_val_from_key(dict, key):\n    '''\n    Write a python function to get the value of a key from a dictionary.\n    '''\n    return dict.get(key)\n    \n    \ndef get_keys_from_val(dict, val):\n    '''\n    Write a python function to get the keys of a given value from a dictionary.\n    '''\n    result = []\n    for i in range(len(dict)):\n        if dict[i] == val:\n            result.append(i)\n    return result\n    \n    \ndef remove_from_list_while_val(list, val):\n    '''\n    Write a python function to remove an element from a list while finding it\n    in a given list.\n    '''\n    count = 0\n    while count < len(list):\n        if list[count] == val:\n            list.pop(count)\n        else:\n            count += 1\n    return list\n    \n    \ndef remove_from_list_while_val_with_repetition(list, val):\n    '''\n    Write a python function to remove an element from a list while finding it\n    in a given list.\n    '''\n    count = 0\n    while count < len(list):\n        if list[count] == val:\n            list.pop(count)\n        else:\n            count += 1\n    return list\n    \n    \ndef max_and_min_in_array(arr):\n    '''\n    Write a python function to get maximum and minimum element of an array.\n    '''\n    min = arr[0]\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if min > arr[i]:\n            min = arr[i]\n        if max < arr[i]:\n            max = arr[i]\n    return min, max\n    \n    \ndef no_of_distinct_elements(str):\n    '''\n    Write a python function to get no of distinct characters in a string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        if str[i] not in str[i+1:]:\n            result += 1\n    return result\n    \n    \ndef check_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef check_palindrome(str):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i].isalpha() == False:\n            return False\n    return True\n    \n    \ndef palindrome(str):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    str = str.lower()\n    str = str.replace(\" \", \"\")\n    for i in range(len(str)):\n        if str[i] == \" \":\n            str = str.replace(\" \", \"\")\n            return False\n    return True\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x: x!= \"\", str.split(\" \"))))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            # print(str[i])\n            count += 1\n        else:\n            # print('\\n')\n            count += 1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Write your solution here\n    count=0\n    for i in range(len(str)):\n        if(str[i]!=' '):\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count+=1\n    return count\n    \n    #code here\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            count += 1\n            if j == len(str)+1:\n                break\n            if str[i:j]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==0:\n        return 0\n    if m==1:\n        return 1\n    if m==2:\n        return 2\n    if n==2:\n        return 3\n    total = 0\n    for i in range(2,m):\n        total += get_total_number_of_sequences(i,n-1) + get_total_number_of_sequences(i+1,n-1) + m-i-2\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # count = 0\n    # for i in range(m,n+1):\n    #     if (i % 2) < m:\n    #         if i <= m*i:\n    #             count += 1\n    # return count\n    return (n-1)*(m-1)/2 + sum(range(m+1,n+1))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def count_combinations(m, n): \n        if n == 0 or m == 0: \n            return 0\n        if n == 1: \n            return m\n        else: \n            a = 0\n            for i in range(m, m-n, -1):\n                a = a + i\n            return a\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def find_total_number_of_sequences(m,n):\n        if n==0:\n            return 1\n        elif n==1:\n            return m\n        else:\n            return find_total_number_of_sequences(m,n-1)+find_total_number_of_sequences(m,n-2)\n    return find_total_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    result = 0\n    while m<=0:\n        m=m+1\n    while n<=0:\n        n=n+1\n    if m<=n:\n        return 0\n    if n==0:\n        return 1\n    if m==0:\n        return 0\n    if n==1:\n        return math.factorial(m)\n    result = math.factorial(m)*math.factorial(n-1)*math.factorial(m-1)\n    for i in range(1,m):\n        result = result*math.factorial(i)\n    result = result//math.factorial(m)\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = 0\n    if m == n:\n        return 1\n    for i in range(1,m):\n        if (m-i) % 2 == 0:\n            a += i//2\n        else:\n            a += i//2 + 1\n    a += m//2\n    return a\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # your code here\n    result = 0\n    for i in range(1,n+1):\n        if m >= 2*i:\n            result += math.comb(n-1,i-1) + math.comb(n,i)\n        else:\n            break\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # from math import log\n    # # print(log(m, 2))\n    # count = 0\n    # for i in range(m, n):\n    #     count += 1\n    #     print(i)\n    #     if i*2 <= m:\n    #         count += 1\n    #     if i*2 > m and i*2 <= m:\n    #         count += 1\n    #     if i*2 <= m and i*2*2 > m:\n    #         count += 1\n    # print(count)\n    \n    # Using DP\n    '''\n    Let's define a function called num_seqs(m, n) that given two integers m and n, \n    returns the number of sequences of length n that are between 2 and m (inclusive)\n    that are of the form ab, a + b, or a + b + c. For example, if m = 6 and n = 2, \n    then num_seqs(6, 2) would return the number of sequences of length 2 that are in the form 2a, 2 + a, 2 + a + b, \n    and a + b + c.\n    '''\n    def num_seqs(m, n): \n        # Create an array to store the number of sequences in the last column\n        dp = [0 for _ in range(n+1)]\n        \n        # Initialize base cases\n        dp[0] = 1 # There is 1 sequence of length 0\n        dp[1] = 2 # There are 2 sequences of length 1\n        \n        # Loop through the rest of the sequence\n        for i in range(2, n+1):\n            # Number of sequences of length i\n            dp[i] = dp[i-1] + dp[i-2]\n        \n        return dp[n]\n    \n    # print(num_seqs(6, 2))\n    # print(num_seqs(2, 5))\n    \n    '''\n    If there are k integers, the sum of the kth integers, k1 + k2 + k3 +... + kk is the same as the sum of the first k\u22121 integers, \n    and so the kth integer is the sum of the first k\u22121 integers \u2212 k1.\n    For example, the sum of the first three integers is 7. The first three integers are -2, -1, 0, so the sum is \u22122 + -1 + 0 = 1.\n    The sum of the first five integers is 1 + 2 + 3 + 4 + 5 = 10.\n    '''\n    # def sum_seq_n(k):\n    #     # Initialize an array to store the sum of the first k numbers\n    #     dp = [0 for _ in range(k+1)]\n    #     dp[0] = 0\n    #     for i in range(1, k+1):\n    #         dp[i] = dp[i-1] + i\n    #     return dp[k]\n    # print(sum_seq_n(3))\n    \n    \n    '''\n    Say you're in a jungle, and you see the monkeys jumping up and down, \n    say 20, 10, and 5. You need to figure out how many jumps \n    must be taken to the next monkey to avoid the entire jungle. \n    You can take 1, 2, or 3 jumps, but you can't skip any. \n    Write a function that returns the number of jumps required. \n    \n    '''\n    def count_jumps(monkey_number):\n        # Initialize an array to store the number of jumps\n        dp = [0 for _ in range(monkey_number+1)]\n        # base case\n        dp[0] = 0\n        # Jump 1 step\n        dp[1] = 1\n        # Jump 2 step\n        dp[2] = 2\n        \n        for i in range(3, monkey_number+1):\n            # Jump 1 step\n            dp[i] = dp[i-1] + 1\n            # Jump 2 steps\n            dp[i] = dp[i-1] + dp[i-2]\n            # Jump 3 steps\n            dp[i] = dp[i-1] + max(dp[i-2], dp[i-3])\n        \n        return dp[monkey_number]\n    \n    # print(count_jumps(3))\n    \n    \n    '''\n    Given an array of integers, return the largest possible sum of elements\n    that can be achieved by a single swap (no two numbers are swapped \n    adjacentally).\n    \n    '''\n    def largest_swap(a):\n        # Initialize an array to store the possible swap sums\n        dp = [0 for _ in range(len(a))]\n        # Base case\n        dp[0] = 0\n        \n        for i in range(1, len(a)):\n            # Search the whole array\n            dp[i] = max(dp[i-1], a[i-1] + a[i])\n        return max(dp)\n    \n    # print(largest_swap([2, 4, 1, 5]))\n    \n    '''\n    Given an array of integers, return an array of the squares of each number.\n    \n    '''\n    def squares(a):\n        # Initialize an array to store the squares\n        dp = [0 for _ in range(len(a))]\n        # Base case\n        dp[0] = 0\n        \n        for i in range(1, len(a)):\n            # Search the whole array\n            dp[i] = dp[i-1] + a[i]**2\n        return dp\n    \n    # print(squares([-4, -2, -1, 0, 1, 2, 3, 4]))\n    \n    '''\n    Given an array of integers, return a boolean representing whether or not the array is strictly increasing.\n    \n    '''\n    def is_strictly_increasing(a):\n        # Initialize an array to store the result\n        dp = [True for _ in range(len(a))]\n        # Base case\n        dp[0] = True\n        \n        for i in range(1, len(a)):\n            # Search the whole array\n            if a[i-1] >= a[i]:\n                dp[i] = False\n        return all(dp)\n    \n    # print(is_strictly_increasing([1, 2, 3]))\n    # print(is_strictly_increasing([1, 2, 2]))\n    # print(is_strictly_increasing([1, 2, 3, 4, 5]))\n    \n    \n    '''\n    Given an array of integers, return a boolean representing whether or not the array is strictly decreasing.\n    \n    '''\n    def is_strictly_decreasing(a):\n        # Initialize an array to store the result\n        dp = [True for _ in range(len(a))]\n        # Base case\n        dp[0] = True\n        \n        for i in range(1, len(a)):\n            # Search the whole array\n            if a[i-1] <= a[i]:\n                dp[i] = False\n        return all(dp)\n    \n    # print(is_strictly_decreasing([1, 2, 3]))\n    # print(is_strictly_decreasing([1, 2, 2]))\n    # print(is_strictly_decreasing([1, 2, 3, 4, 5]))\n    \n    '''\n    Given an array of integers, return a boolean representing whether or not the array is strictly sorted.\n    \n    '''\n    def is_strictly_sorted(a):\n        # Initialize an array to store the result\n        dp = [True for _ in range(len(a))]\n        # Base case\n        dp[0] = True\n        \n        for i in range(1, len(a)):\n            # Search the whole array\n            if a[i-1] <= a[i]:\n                dp[i] = False\n        return all(dp)\n    \n    # print(is_strictly_sorted([1, 2, 3, 4, 5]))\n    # print(is_strictly_sorted([1"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import sqrt\n    \n    return sqrt((m*n)-1)+1\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 2**n - (2**n) % m + 1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[0]\n    list1[-2]=list2[1]\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    print(list1)\n    \ndef multiply_list(list1,n):\n    '''\n    Write a function that multiplies all the numbers in a list.\n    '''\n    n_list = list(range(n))\n    for num in list1:\n        n_list.append(num*n)\n    return n_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list1[:-1] = list2[1:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1) - 1] = list2[len(list2) - 1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str_count = 0\n    for x in str1:\n        str_count += 1\n    return str_count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for ch in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for c in str1:\n        total += 1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<1):\n        return None\n    while True:\n        sqrt_num = math.sqrt(N)\n        if(sqrt_num == math.floor(sqrt_num)):\n            return math.ceil(sqrt_num)\n        N+=1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = int(math.sqrt(N))\n        if N * N == N:\n            return N\n        elif N * N < N:\n            return N + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=1:\n        return N\n    \n    start = 1\n    end = N\n    while start < end: \n        mid = start + ((end - start) >> 1) \n        if (mid * mid) > N: \n            end = mid \n        else: \n            start = mid + 1\n    return start-1\ndef next_Perfect_Square(N): \n    if N<=1:\n        return N\n    start = 1\n    end = N\n    while start < end: \n        mid = start + ((end - start) >> 1) \n        if (mid * mid) > N: \n            end = mid \n        else: \n            start = mid + 1\n    return start-1\ndef next_Perfect_Square(N):\n    start = 1\n    end = N\n    while start < end:\n        mid = start + ((end - start) >> 1) \n        if (mid * mid) > N: \n            end = mid \n        else: \n            start = mid + 1\n    return start-1\ndef next_Perfect_Square(N): \n    if N <= 1: \n        return N \n    start, end = 1, N \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if (mid * mid) > N: \n            end = mid - 1\n        else: \n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    start = 1\n    end = N\n    while start <= end:\n        mid = start + ((end - start) >> 1)\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N):\n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Square(N): \n    if N <= 1:\n        return N \n    start, end = 1, N \n    while start <= end:\n        mid = start + (end - start) // 2\n        if (mid * mid) > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\ndef next_Perfect_Squar"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    while N % 2 == 0:\n        N = N // 2\n    r = int(math.sqrt(N))\n    while r*r <= N:\n        r += 1\n    return r*r\n    "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    #first we find if the number is a perfect square\n    sqrt = math.sqrt(N)\n    if(math.ceil(sqrt)**2 == N):\n        return math.ceil(sqrt)**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 0\n    while True:\n        N += 1\n        if N ** 2 > N:\n            return N\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #condition for next perfect square\n    if N == 0:\n        return 1\n    x = 1\n    while (x**2 <= N):\n        x = x + 1\n    return x**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # program thought by @sagar\n    i = 1\n    while True:\n        if i*i > N:\n            return i*i\n        i += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # if n is a perfect square, return n + 1 (equal to the next perfect square)\n    # if n is a square root, return n + 1 (equal to the next square root)\n    while True:\n        n = int(math.sqrt(N))\n        if (n*n == N):\n            return N+1\n        N = n*(n+1)\n        \ndef next_Perfect_Square_using_Sqrt(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # if n is a perfect square, return n + 1 (equal to the next perfect square)\n    # if n is a square root, return n + 1 (equal to the next square root)\n    while True:\n        n = math.ceil(math.sqrt(N))\n        if (n*n == N):\n            return N+1\n        N = n*(n+1)\n    \ndef get_Factors(n): \n    \"\"\"\n    Returns a list of all factors of integer n\n    \"\"\"\n    factors = [] \n    i = 1\n    while i * i <= n: \n        if n % i == 0: \n            factors.append(i) \n            factors.append(n // i) \n        i += 1\n    return list(set(factors))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n):\n        '''\n        function to check if a number is perfect square or not.\n        '''\n        s = int(math.sqrt(n))\n        return s*s == n\n    if N == 1:\n        return 1\n    for i in range(N,0,-1):\n        if is_perfect_square(i):\n            return i\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    i, j, mi = 0, 0, 0\n    arr.append(0)\n    sum = 0\n    while j < len(arr) - 1:\n        if arr[i] < arr[j]: \n            sum = max(sum, arr[j] + arr[i] + arr[j+1])\n            j += 1\n        else:\n            sum = max(sum, arr[j] + arr[i])\n            i += 1\n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    # for i in range(1,len(arr)):\n    #     if arr[i]<arr[i-1]:\n    #         arr.sort()\n    #         return arr[0]\n    # arr.sort(reverse=True)\n    # return arr[0]\n    max_so_far = -2**32\n    max_ending_here = -2**32\n    \n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here + arr[i],0)\n        max_so_far = max(max_so_far,max_ending_here)\n        \n    return max_so_far\n    \n    \n    # for i in range(len(arr)-1,-1,-1):\n    #     if arr[i]>arr[i+1]:\n    #         return arr[i]\n    # return 0\n    \n    \n    \n    \n    \n    \n    # for i in range(len(arr)-1,-1,-1):\n    #     if arr[i]>arr[i+1]:\n    #         for j in range(i+2,len(arr)):\n    #             if arr[j]>arr[j-1]:\n    #                 return arr[j]\n    # return 0\n    \n    \n    \n    \n    \n    \n    # for i in range(len(arr)-1,0,-1):\n    #     if arr[i]>arr[i-1]:\n    #         return arr[i]\n    # return 0\n    \n    \n    \n    \n    \n    \n    # for i in range(len(arr)-1,0,-1):\n    #     if arr[i]>arr[i-1]:\n    #         arr.sort()\n    #         return arr[0]\n    # return 0\n    \n    \n    \n    \n    \n    # for i in range(len(arr)):\n    #     print(\"i =\",i)\n    #     print(arr)\n    #     if i==0:\n    #         if arr[i]>arr[i+1]:\n    #             return arr[i]\n    #     elif i==len(arr)-1:\n    #         if arr[i]>arr[i-1]:\n    #             return arr[i]\n    #     elif arr[i]>arr[i+1] and arr[i]>arr[i-1]:\n    #         return arr[i]\n    # return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Create a helper function to recursively calculate the maximum sum of the bitonic subsequence \n    def helper(arr, curr_sum, idx):\n        # base case: if the bitonic subsequence is empty, return -inf\n        if idx == len(arr) and curr_sum < 0:\n            return -math.inf\n        # recursive case: use the helper function to find the maximum sum of a smaller bitonic subsequence\n        elif idx == len(arr) or curr_sum < 0:\n            return -math.inf\n        else:\n            # recursive case: if the maximum sum of a smaller bitonic subsequence is still smaller than the current maximum, return the sum of a smaller bitonic subsequence\n            if max_sum(arr, curr_sum + arr[idx], idx) < curr_sum:\n                return max_sum(arr, curr_sum, idx)\n            # otherwise return the maximum of the current sum, the maximum sum of a smaller bitonic subsequence, and the maximum of a smaller bitonic subsequence plus the current value\n            else:\n                return max(curr_sum, max_sum(arr, curr_sum + arr[idx], idx), curr_sum)\n    \n    # return the maximum sum of a smaller bitonic subsequence\n    return helper(arr, 0, 0)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return max(arr)\n    max_sum = arr[0]\n    local_max = arr[0]\n    max_sum_range = arr[0]\n    for i in range(1, len(arr)):\n        local_max = max(local_max + arr[i], arr[i])\n        max_sum = max(local_max, max_sum)\n        max_sum_range = max(max_sum_range, local_max)\n    return max_sum_range\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    '''\n    When the array is a bitonic sequence we can figure out the maximum sum by looping through the array and adding the current element, which can be either increasing or decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1, n): \n        if arr[i] > max_sum:\n            max_sum = arr[i]\n    '''\n    If the array is not bitonic we can construct a bitonic subsequence.\n    '''\n    max_sum = max(max_sum, sum(arr))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # edge cases\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    \n    # general case\n    max_sum = 0\n    l = 0\n    r = 0\n    while r < len(arr):\n        # if we are below our current max_sum, update it\n        if arr[r] < max_sum:\n            # update the max_sum\n            max_sum = max(max_sum, arr[r])\n            # move left\n            l += 1\n            r = l\n        else:\n            # otherwise update max_sum and move right\n            max_sum = max(max_sum, arr[r])\n            r += 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    arr.sort()\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            max_sum = max(max_sum, arr[i] + max(max_sum, 0))\n        else:\n            max_sum = max(max_sum, arr[i] + max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]>=arr[1]:\n        maximum_sum = arr[0]\n        max_index = 0\n        for i in range(1,len(arr)):\n            maximum_sum = max(maximum_sum,arr[i]+max_index)\n            max_index = maximum_sum\n        return maximum_sum\n    else:\n        maximum_sum = arr[0]\n        max_index = 0\n        for i in range(1,len(arr)):\n            maximum_sum = max(maximum_sum,arr[i]+max_index)\n            max_index = maximum_sum\n        return maximum_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                for k in range(i+1, len(arr)):\n                    if arr[k] > arr[j]:\n                        max_sum = max(max_sum, arr[i] + arr[j] + arr[k])\n    print(max_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Base case \n    if len(arr) <= 1: \n        return arr[:] \n    # In case of len(arr) <= 2, \n    # we need only one element in the array. \n    max_ending_here = max_ending_here_max = arr[0] \n    max_so_far = max_ending_here_max \n    # Consider all elements from second \n    # and all elements after that \n    for i in range(1, len(arr)): \n        # Find the maximum of following \n        # 3 cases \n        # (a) max_ending_here_max and arr[i] \n        # (b) max_ending_here_max and arr[i] + max_ending_here_max \n        # (c) max_ending_here_max and max_ending_here_max + arr[i] \n        max_ending_here_max = max(max_ending_here_max + arr[i], arr[i]) \n        max_ending_here = max(max_ending_here, max_ending_here_max) \n        max_so_far = max(max_so_far, max_ending_here) \n    return max_so_far \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000000001\n    guess = number/2.0\n    while abs(guess**2 - number) >= epsilon:\n        guess = guess - (((guess**2) - number)/(2*guess))\n    return guess\n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n    else:\n        return (babylonian_squareroot(number - 1) + number / babylonian_squareroot(number - 1)) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 1:\n        raise ValueError(f'Number {number} must be greater than 0')\n    elif number == 1:\n        return number\n    else:\n        previous = number\n        current = (previous + 1) / 2\n        while current < number:\n            current = (previous + 1) / 2\n            previous = current\n        return previous\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if (number < 0):\n        return None\n    else:\n        divisor = 2\n        while (number > 1):\n            number = number / divisor\n            divisor = divisor + 1\n    return divisor - 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n    \ndef get_binary_of_number(number):\n    '''\n    Get the binary representation of the given number\n    '''\n    binary = 0\n    binary = bin(number)[2:]\n    return binary\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low_num = 0\n    high_num = number\n    guess = (low_num + high_num) / 2\n    while abs(high_num - low_num) > 1:\n        if guess * guess == number:\n            return guess\n        if guess * guess < number:\n            low_num = guess\n        else:\n            high_num = guess\n        guess = (low_num + high_num) / 2\n    return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    n = len(str)\n    if n == 0:\n        return 0\n    # Initialized \n    dp_table = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        dp_table[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    #Initializing the first row and column \n    for i in range(n): \n        dp[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for i in range(n)] \n    \n    for i in range(n): \n        dp[i][i] = 1\n    \n    for length in range(2,n+1): \n        for i in range(n-length+1): \n            j = i+length-1\n            if str[i]==str[j] and length == 2: \n                dp[i][j] = 2\n            elif str[i]==str[j]: \n                dp[i][j] = dp[i+1][j-1]+2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    \n    return dp[0][n-1] \n    "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def expand(start, end):\n        while start >= 0 and end <= len(str) and str[start] == str[end - 1]:\n            start -= 1\n            end += 1\n        return end - start - 1\n        \n    max_len = 0\n    if len(str) == 0:\n        return max_len\n        \n    for i in range(len(str)):\n        max_len = max(max_len, 1 + expand(i, i + 1) + expand(i, i + 2))\n        \n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str + '$'\n    \n    dp = [[0] * len(str) for i in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n        \n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n    \n    for length in range(3, len(str) + 1):\n        for i in range(0, len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and dp[i + 1][j - 1] > 0:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][len(str) - 1]\n        \n    "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str is None:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(str==None or len(str)==0):\n        return 0\n    \n    #helper function to check if the string is a palindrome.\n    def isPalindrome(s):\n        return s==s[::-1]\n    \n    #helper function to find the longest palindrome\n    def findLongestPalindrome(s,l,r):\n        while l>=0 and r<len(s) and s[l]==s[r]:\n            l-=1\n            r+=1\n        return r-l-1\n    \n    n=len(str)\n    dp=[1]*n\n    #dp[i] stores the length of the longest palindrome that ends at i\n    for i in range(1,n):\n        if(isPalindrome(str[i:])):\n            dp[i]=2\n        else:\n            dp[i]=1\n            #we do not take the middle palindrome as we found one more palindrome at the previous position\n            for j in range(i):\n                dp[i]=max(dp[i],dp[j]+dp[i-j-1])\n    \n    return max(dp)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = \"abcdcba\"\n    # Solution 1: \n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        for j in range(i, len(str)):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][len(str)-1] \n    \n    # Solution 2:\n    # dp = [[0]*len(str) for i in range(len(str))]\n    # for i in range(len(str)-1, -1, -1):\n    #     for j in range(i, len(str)):\n    #         if str[i] == str[j]:\n    #             dp[i][j] = dp[i+1][j-1] + 2\n    #         else:\n    #             dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    # return dp[0][len(str)-1]\n    # Solution 3:\n    # dp = [[0]*len(str) for i in range(len(str))]\n    # for i in range(len(str)-1, -1, -1):\n    #     for j in range(i, len(str)):\n    #         if str[i] == str[j]:\n    #             dp[i][j] = dp[i+1][j-1] + 2\n    #         else:\n    #             dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    # return dp[0][len(str)-1]\n    # Solution 4:\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][len(str)-1]\n    \n    \n    # Solution 5:\n    # def lps(self, s):\n    #     n = len(s)\n    #     dp = [[0] * n for _ in range(n)]\n    #     for j in range(n):\n    #         dp[j][j] = 1\n    #     for i in range(n-2, -1, -1):\n    #         for j in range(i+1, n):\n    #             if s[i] == s[j]:\n    #                 dp[i][j] = dp[i+1][j-1] + 2\n    #             else:\n    #                 dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    #     return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    for length in range(3, len(str) + 1):\n        for i in range(0, len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and dp[i+1][j-1] == length - 1:\n                dp[i][j] = 2*length\n            else:\n                if str[i] == str[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_helper(str, l, r):\n        while l >= 0 and r < len(str) and str[l] == str[r]:\n            l -= 1\n            r += 1\n        return r - l - 1\n    \n    l = 0\n    r = 0\n    max_len = 0\n    \n    for i in range(len(str)):\n        l = i\n        r = i + 1\n        while (l >= 0 and r < len(str)):\n            sub_str = str[l:r+1]\n            curr_len = lps_helper(sub_str, l, r)\n            if curr_len > max_len:\n                max_len = curr_len\n            if l == 0:\n                r += 1\n            else:\n                l -= 1\n                r += 1\n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return ((n * (n+1)) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    i = 1\n    h = 0\n    while i <= n:\n        h += i\n        i += 1\n    return h\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / (1 + n)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    n_list = []\n    for i in range(n):\n        n_list.append(i+1)\n    return sum(n_list)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    if n == 1:\n        return 1\n    while n > 1:\n        total = total + n-1\n        n = n-1\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # h_sum = 1\n    # for i in range(n - 1):\n    #     h_sum += 1 / i\n    # return h_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/k for k in range(n, 1, -1))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #First I need to find out how long array_nums1 is \n    num_array1 = len(array_nums1)\n    num_array2 = len(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    array_nums1.sort()\n    array_nums2.sort()\n    p1 = 0\n    p2 = 0\n    while p1 < len(array_nums1) and p2 < len(array_nums2):\n        if array_nums1[p1] == array_nums2[p2]:\n            result.append(array_nums1[p1])\n            p1 += 1\n            p2 += 1\n        elif array_nums1[p1] < array_nums2[p2]:\n            p1 += 1\n        elif array_nums1[p1] > array_nums2[p2]:\n            p2 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Your code here\n    # create an empty array\n    array_nums = []\n    # iterate through both arrays\n    for i in range(len(array_nums1)):\n        # if the element of one array is not present in the other array, then add it to the array\n        if array_nums1[i] not in array_nums2:\n            array_nums.append(array_nums1[i])\n    # print the final array\n    print(array_nums)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #my_set = set()\n    #for x in array_nums1:\n        #my_set.add(x)\n    #for x in array_nums2:\n        #my_set.add(x)\n    #return my_set\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = array_nums1\n    nums2 = array_nums2\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common_list.append(num)\n    return common_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersect = set1.intersection(set2)\n    return list(intersect)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in new_array:\n            new_array.append(num)\n    return new_array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    int_array = []\n    for num in array_nums1:\n        if num in array_nums2:\n            int_array.append(num)\n    return int_array\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \ndef count_X_List(tup, x): \n    '''\n    Write a python function that takes in a list and an element and counts the occcurences of the element in the list.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = list(tup)\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup: \n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # #Solution 1\n    # for i in range(len(list)):\n    #     if list[i] == element:\n    #         list.insert(i,element)\n    #         return list\n    #     elif i == len(list)-1:\n    #         list.append(element)\n    #         return list\n    #     else:\n    #         i += 1\n    #         list.insert(i,element)\n    #         return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + element\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    n = 0\n    n = list.index(element)\n    list.insert(n,element)\n    return list\n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes that element from the list and returns the resulting list.\n    '''\n    n = list.index(element)\n    list.pop(n)\n    return list\n    \ndef replace_element(list,element,new_element):\n    '''\n    Write a function that takes in a list and two elements, and if the first element is the same as the second element, the function should replace the first element with the second element, and return the resulting list.\n    '''\n    n = list.index(element)\n    list.pop(n)\n    list.insert(n,new_element)\n    return list\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and reverses the elements in the list. Return the resulting list.\n    '''\n    return list[::-1]\n    \ndef intersection(list1,list2):\n    '''\n    Write a function that takes in two lists and returns the common elements in the lists. Return the resulting list.\n    '''\n    return list(set(list1).intersection(set(list2)))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list[:]\n    if len(list) == 0:\n        return []\n    for i in range(len(list)):\n        if list[i] == element:\n            list_copy.insert(i,element)\n    return list_copy\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            if i == 0:\n                list.insert(i,element)\n                return list\n            else:\n                list.insert(i,element)\n                return list\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)-1):\n        list[i+1]=list[i]\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    x = 0\n    while x < len(list):\n        list.insert(x,element)\n        x += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_index = 0\n    for i in list:\n        if element == i:\n            break\n        else:\n            element_index += 1\n    list.insert(element_index,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius = 0\n    angle = 0\n    if type(numbers) is list:\n        for number in numbers:\n            if type(number) is complex:\n                r = number.real\n                i = number.imag\n                if r == 0:\n                    r = 1\n                angle = cmath.phase(number)\n                radius = r*cmath.exp(1j*angle)\n                print(radius, angle)\n    else:\n        if type(numbers) is complex:\n            r = numbers.real\n            i = numbers.imag\n            if r == 0:\n                r = 1\n            angle = cmath.phase(numbers)\n            radius = r*cmath.exp(1j*angle)\n            print(radius, angle)\ndef sum_numbers(numbers):\n    '''\n    Write a python function to sum of a list of numbers.\n    '''\n    if type(numbers) is list:\n        sum = 0\n        for x in numbers:\n            sum += x\n        return sum\n    else:\n        return 'Invalid'\ndef fibonacci(n):\n    '''\n    Write a python function to compute the n-th Fibonacci number.\n    '''\n    if n <= 0:\n        return 'invalid'\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef power(a,b):\n    '''\n    Write a python function to compute the power of a number.\n    '''\n    if type(a) is not int and type(a) is not float:\n        return 'Invalid input'\n    if type(b) is not int and type(b) is not float:\n        return 'Invalid input'\n    if type(a) is float or type(a) is int:\n        if type(b) is float or type(b) is int:\n            return a**b\n    else:\n        return 'Invalid input'\ndef reverse(word):\n    '''\n    Write a python function to reverse a given word.\n    '''\n    if type(word) is not str:\n        return 'Invalid input'\n    else:\n        word = word.split(' ')\n        print(word)\n        if word[0] == '':\n            word.pop(0)\n        return''.join(word)\ndef rotate(matrix):\n    '''\n    Write a python function to rotate matrix.\n    '''\n    if type(matrix) is not list:\n        return 'Invalid input'\n    for row in range(len(matrix)):\n        for col in range(len(matrix)):\n            matrix[row][col] = (matrix[row][col], -matrix[row][col])\n    for row in range(len(matrix)):\n        for col in range(len(matrix)):\n            matrix[row][col] = (matrix[row][col][0] + matrix[row][col][1], matrix[row][col][1] - matrix[row][col][0])\n    return matrix\ndef product(numbers):\n    '''\n    Write a python function to compute the product of numbers.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 0:\n        return 1\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\ndef subtract(numbers):\n    '''\n    Write a python function to subtract numbers in a list.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 0:\n        return numbers\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] - numbers[i-1]\n    return numbers[0]\ndef fib(n):\n    '''\n    Write a python function to compute the Fibonacci series upto the n-th term.\n    '''\n    if type(n) is not int:\n        return 'Invalid input'\n    if n <= 0:\n        return 'Invalid input'\n    a = 0\n    b = 1\n    if n == 1:\n        return a\n    if n == 2:\n        return b\n    else:\n        for i in range(3,n+1):\n            temp = a\n            a = b\n            b = temp + b\n        return b\ndef combination(n, k):\n    '''\n    Write a python function to compute the factorial of the nth combination.\n    '''\n    if type(n) is not int or type(k) is not int:\n        return 'Invalid input'\n    if k > n:\n        return 0\n    if k == 0 or n == 0:\n        return 1\n    if k == 1 or n == 1:\n        return 1\n    else:\n        return combination(n-1, k) + combination(n-1, k-1)\ndef maximum(numbers):\n    '''\n    Write a python function to compute the maximum of numbers.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 0:\n        return numbers\n    maximum = numbers[0]\n    for x in range(1, len(numbers)):\n        if numbers[x] > maximum:\n            maximum = numbers[x]\n    return maximum\ndef summation(numbers):\n    '''\n    Write a python function to compute the summation of numbers.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 0:\n        return numbers\n    sum = 0\n    for x in range(len(numbers)):\n        sum += numbers[x]\n    return sum\ndef letter_score(str):\n    '''\n    Write a python function to compute the letter score of a given string.\n    '''\n    score = 0\n    for char in str:\n        if char in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz':\n            score += ord(char) - 64\n    return score\ndef min_max(numbers):\n    '''\n    Write a python function to compute the minumum and maximum value in a list.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 0:\n        return 'Invalid input'\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for x in range(1, len(numbers)):\n        if numbers[x] > maximum:\n            maximum = numbers[x]\n        elif numbers[x] < minimum:\n            minimum = numbers[x]\n    return minimum, maximum\ndef sum_digits(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number.\n    '''\n    if type(n) is not int:\n        return 'Invalid input'\n    if n < 0:\n        return 'Invalid input'\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\ndef maximum_product(numbers):\n    '''\n    Write a python function to compute the maximum product of four adjacent digits in the same direction.\n    '''\n    if type(numbers) is not list:\n        return 'Invalid input'\n    if len(numbers) == 0:\n        return 'Invalid input'\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return numbers[0]*numbers[1]\n    if len(numbers) == 3:\n        return numbers[0]*numbers[1]*numbers[2]\n    if len(numbers) == 4:\n        return max(numbers[0]*numbers[1]*numbers[2], numbers[0]*numbers[2]*numbers[3], numbers[0]*numbers[1]*numbers[3], numbers[1]*numbers[2]*numbers["
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import numpy as np\n    import math\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #COMPLEX NUMBERS\n    num1 = complex(numbers[0], numbers[1])\n    #RADIANS\n    r1 = cmath.phase(num1)\n    #REAL PART\n    r2 = num1.real\n    #IMAGINARY PART\n    r3 = num1.imag\n    #ALL\n    final = [r1,r2,r3]\n    return final\n    \ndef findPolarCoordinates(x1, y1, x2, y2): \n    '''\n    Write a python function to find the polar coordinates of a point after using the previous function.\n    '''\n    x3 = (x1**2 + x2**2 - y1**2 - y2**2) / (2 * x1 * x2)\n    y3 = (y1**2 + y2**2 - x3**2) / (2 * y1 * y2)\n    z3 = cmath.sqrt(x3**2 + y3**2)\n    final = (x3,y3,z3)\n    return final\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        polar = []\n        for number in numbers:\n            temp = []\n            temp.append(number.real)\n            temp.append(number.imag)\n            temp.append(complex(number.real, number.imag))\n            polar.append(temp)\n        return polar\n    except:\n        return []\n        \ndef convert1(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        result = []\n        for number in numbers:\n            polar = []\n            polar.append(number.real)\n            polar.append(number.imag)\n            polar.append(complex(number.real, number.imag))\n            result.append(polar)\n        return result\n    except:\n        return []\n    \ndef distance(p1,p2):\n    '''\n    Write a python function to calculate the distance between 2 complex numbers.\n    '''\n    try:\n        import math\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n    except:\n        return 0\n    \ndef distance1(p1,p2):\n    '''\n    Write a python function to calculate the distance between 2 complex numbers.\n    '''\n    try:\n        result = 0\n        for x,y in zip(p1,p2):\n            result += x**2 + y**2\n        return math.sqrt(result)\n    except:\n        return 0\n    \ndef square(number):\n    '''\n    Write a python function to check whether a number is an integer, even or odd.\n    '''\n    try:\n        result = 0\n        temp = number\n        while temp:\n            temp //= 10\n            result += 1\n        return True if result%2 == 0 else False\n    except:\n        return False\n    \ndef square1(number):\n    '''\n    Write a python function to check whether a number is an integer, even or odd.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef divisible(number,divisible):\n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    try:\n        return number % divisible == 0\n    except:\n        return False\n    \ndef divisible1(number,divisible):\n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef triangle(a,b,c):\n    '''\n    Write a python function to check whether a triangle with sides of length a,b,c exists.\n    '''\n    try:\n        p = (a+b+c)/2\n        return round(math.sqrt(p*(p-a)*(p-b)*(p-c))) == p\n    except:\n        return False\n    \ndef triangle1(a,b,c):\n    '''\n    Write a python function to check whether a triangle with sides of length a,b,c exists.\n    '''\n    try:\n        p = (a+b+c)/2\n        return round(math.sqrt(p*(p-a)*(p-b)*(p-c))) == p\n    except:\n        return False\n    \ndef triangle2(a,b,c):\n    '''\n    Write a python function to check whether a triangle with sides of length a,b,c exists.\n    '''\n    try:\n        p = (a+b+c)/2\n        return round(math.sqrt(p*(p-a)*(p-b)*(p-c))) == p\n    except:\n        return False\n    \ndef triangle3(a,b,c):\n    '''\n    Write a python function to check whether a triangle with sides of length a,b,c exists.\n    '''\n    try:\n        p = (a+b+c)/2\n        return round(math.sqrt(p*(p-a)*(p-b)*(p-c))) == p\n    except:\n        return False\n    \ndef rectangle(a,b):\n    '''\n    Write a python function to check whether a rectangle with sides of length a and b exists.\n    '''\n    try:\n        return a == b\n    except:\n        return False\n    \ndef rectangle1(a,b):\n    '''\n    Write a python function to check whether a rectangle with sides of length a and b exists.\n    '''\n    try:\n        return a == b\n    except:\n        return False\n    \ndef rectangle2(a,b):\n    '''\n    Write a python function to check whether a rectangle with sides of length a and b exists.\n    '''\n    try:\n        return a == b\n    except:\n        return False\n    \ndef rectangle3(a,b):\n    '''\n    Write a python function to check whether a rectangle with sides of length a and b exists.\n    '''\n    try:\n        return a == b\n    except:\n        return False\n    \ndef square(number):\n    '''\n    Write a python function to check whether a number is an integer, even or odd.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef square1(number):\n    '''\n    Write a python function to check whether a number is an integer, even or odd.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef divisible(number,divisible):\n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    try:\n        return number % divisible == 0\n    except:\n        return False\n    \ndef divisible1(number,divisible):\n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef divisible2(number,divisible):\n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    try:\n        if number in range(1,10):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef isprime(number):\n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    try:\n        if number < 1:\n            return False\n        elif number == 2:\n            return True\n        elif number % 2 == 0:\n            return False\n        else:\n            for i in range(3,int(number**0.5)+1,2):\n                if number % i == 0:\n                    return False\n            return True\n    except:\n        return False\n    \ndef isprime1(number):\n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    try:\n        if number < 1:\n            return False\n        elif number == 2:\n            return True\n        elif number % 2 == 0:\n            return False\n        else:\n            for i in range(3,int(number**0.5)+1,2):\n                if number % i == 0:\n                    return False\n            return True\n    except:\n        return False\n    \ndef isprime2(number):\n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    try:\n        if number < 1:\n            return False\n        elif number == 2:\n            return True\n        elif number % 2 == 0:\n            return False\n        else:\n            for i in range(3,int(number**0.5)+1,2):\n                if number % i == 0:\n                    return False\n            return True\n    except:\n        return False\n    \ndef isprime3(number):\n    '''\n    Write a python function to check whether a number is prime."
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #Using hypotenuse of right angle triangle to calculate r\n    r = (numbers.real**2 + numbers.imag**2)**0.5\n    \n    #Using cosine formula to calculate angle of imaginary part\n    angle = cmath.phase(numbers)\n    \n    #Using polar coordinates to return r and angle\n    return (r,angle)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c=complex(numbers)\n    return cmath.phase(c),abs(c)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = []\n    for item in numbers:\n        if (item.imag >= 0):\n            n = cmath.polar(item)\n            print(n)\n            print(\"[{}, {}]\".format(n[0], n[1]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # r = (r = np.sqrt(np.power(r, 2) + np.power(p, 2)) + np.sqrt(p)) / 2\n    # return r, p\n    #code\n    \n    for i in range(len(numbers)):\n        numbers[i] = cmath.polar(numbers[i])\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(type(numbers) is not tuple):\n        print(\"Wrong Input\")\n    elif(numbers[0] == complex(0,0) and numbers[1] == complex(0,0)):\n        print(\"0 (0,0)\")\n    elif(numbers[0] == complex(0,0) and numbers[1]!= complex(0,0)):\n        print(\"0 (0,%d)\"%(numbers[1].imag))\n    elif(numbers[0]!= complex(0,0) and numbers[1] == complex(0,0)):\n        print(\"%d (0,0)\"%(numbers[0].real))\n    elif(numbers[0]!= complex(0,0) and numbers[1]!= complex(0,0)):\n        print(\"%d (%.2f,%.2f)\"%(numbers[0].real,numbers[1].real,numbers[1].imag))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    re, im = 0, 0\n    for i in range(len(numbers)):\n        re = re + numbers[i].real\n        im = im + numbers[i].imag\n    return [re, im]\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.is_integer():\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for i in list1 if type(i) == int)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for i in list1:\n        if i.isdigit():\n            integer_count += 1\n    return integer_count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(lambda x: tuple(x), combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    result = []\n    for i in range(len(l)):\n        if n == 1:\n            result.append((l[i],))\n            return result\n        else:\n            tmp = list(combinations_colors(l[i+1:], n-1))\n            for j in tmp:\n                tmp2 = (l[i],)\n                result.append(tmp2 + j)\n    return result\ndef combinations_colors_x(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    result = []\n    for i in range(len(l)):\n        if n == 1:\n            result.append((l[i],))\n            return result\n        else:\n            tmp = list(combinations_colors(l[i+1:], n-1))\n            for j in tmp:\n                tmp2 = (l[i],)\n                result.append(tmp2 + j)\n    return result\ndef n_color_graph(n):\n    '''\n    Write a function that takes in a number n, and returns a dictionary with keys all integer tuples up to length n, and values set to True or False depending on whether the number of colors used to describe the given number of colors is greater than or equal to the number of colors needed to describe the given number of colors.\n    '''\n    d = {}\n    for i in range(1, n+1):\n        d[i] = False\n    if n == 1:\n        d[1] = True\n    if n == 2:\n        d[1] = True\n        d[2] = True\n    else:\n        for i in range(3, n+1):\n            tmp = d.copy()\n            tmp[i] = True\n            d[i] = True\n            for j in range(i+1, n+1):\n                if j in tmp:\n                    continue\n                else:\n                    tmp[j] = False\n                    d[j] = True\n    return d\ndef n_color_graph_x(n):\n    '''\n    Write a function that takes in a number n, and returns a dictionary with keys all integer tuples up to length n, and values set to True or False depending on whether the number of colors used to describe the given number of colors is greater than or equal to the number of colors needed to describe the given number of colors.\n    '''\n    d = {}\n    for i in range(1, n+1):\n        d[i] = False\n    if n == 1:\n        d[1] = True\n    if n == 2:\n        d[1] = True\n        d[2] = True\n    else:\n        for i in range(3, n+1):\n            tmp = d.copy()\n            tmp[i] = True\n            d[i] = True\n            for j in range(i+1, n+1):\n                if j in tmp:\n                    continue\n                else:\n                    tmp[j] = False\n                    d[j] = True\n    return d\ndef generate_all_color_graphs(n):\n    '''\n    Write a function that takes in a number n, and returns a list of all possible graphs that can be drawn in that number of colors.\n    '''\n    d = n_color_graph(n)\n    res = []\n    for i in d.keys():\n        res.append(i)\n    for i in d.keys():\n        tmp = d.copy()\n        tmp.pop(i)\n        res.append(i)\n    for i in d.keys():\n        for j in d.keys():\n            tmp = d.copy()\n            tmp.pop(i)\n            tmp.pop(j)\n            res.append((i,j))\n    return res\ndef generate_all_color_graphs_x(n):\n    '''\n    Write a function that takes in a number n, and returns a list of all possible graphs that can be drawn in that number of colors.\n    '''\n    d = n_color_graph_x(n)\n    res = []\n    for i in d.keys():\n        res.append(i)\n    for i in d.keys():\n        tmp = d.copy()\n        tmp.pop(i)\n        res.append(i)\n    for i in d.keys():\n        for j in d.keys():\n            tmp = d.copy()\n            tmp.pop(i)\n            tmp.pop(j)\n            res.append((i,j))\n    return res\ndef maximum_colors(n):\n    '''\n    Write a function that takes in a positive integer n, and returns the number of different graphs that can be drawn in that number of colors.\n    '''\n    def lis(n):\n        '''\n        Dynamic programming method that finds the maximum number of colors that can be used to draw a graph with n colors. The optimal solution is to start with a list of the previous numbers of solutions and then add the last number to that list and then append the list to the result list.\n        '''\n        s = [1]\n        for i in range(1, n+1):\n            tmp = []\n            tmp.append(i)\n            for j in range(1, i):\n                tmp.append(s[i-j]+s[j-1])\n            tmp.append(1)\n            s = tmp\n        return s.pop(-1)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return lis(n)\ndef maximum_colors_x(n):\n    '''\n    Write a function that takes in a positive integer n, and returns the number of different graphs that can be drawn in that number of colors.\n    '''\n    def lis(n):\n        '''\n        Dynamic programming method that finds the maximum number of colors that can be used to draw a graph with n colors. The optimal solution is to start with a list of the previous numbers of solutions and then add the last number to that list and then append the list to the result list.\n        '''\n        s = [1]\n        for i in range(1, n+1):\n            tmp = []\n            tmp.append(i)\n            for j in range(1, i):\n                tmp.append(s[i-j]+s[j-1])\n            tmp.append(1)\n            s = tmp\n        return s.pop(-1)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return lis(n)\ndef min_colors(n):\n    '''\n    Write a function that takes in a positive integer n, and returns the number of different graphs that can be drawn in that number of colors.\n    '''\n    def lis(n):\n        '''\n        Dynamic programming method that finds the minimum number of colors that can be used to draw a graph with n colors. The optimal solution is to start with a list of the previous numbers of solutions and then add the last number to that list and then append the list to the result list.\n        '''\n        s = [1]\n        for i in range(1, n+1):\n            tmp = []\n            tmp.append(i)\n            for j in range(1, i):\n                tmp.append(s[i-j]+s[j-1])\n            tmp.append(1)\n            s = tmp\n        return s.pop(-1)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return lis(n)\ndef min_colors_x(n):\n    '''\n    Write a function that takes in a positive integer n, and returns the number of different graphs that can be drawn in that number of colors.\n    '''\n    def lis(n):\n        '''\n        Dynamic programming method that finds the minimum number of colors that can be used to draw a graph with n colors. The optimal solution is to start with a list of the previous numbers of solutions and then add the last number to that list and then append the list to the result list.\n        '''\n        s = [1]\n        for i in range(1, n+1):\n            tmp = []\n            tmp.append(i)\n            for j in range"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(comb, ) for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return l\n    for i in range(len(l)):\n        temp = combinations_colors(l[:i] + l[i+1:],n-1)\n        for j in temp:\n            if l[i]!= j[0]:\n                result.append([l[i]] + j)\n    return result\n    \ndef combinations_colors_lst(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return l\n    for i in range(len(l)):\n        temp = combinations_colors_lst(l[:i] + l[i+1:],n-1)\n        for j in temp:\n            if l[i]!= j[0]:\n                result.append([l[i]] + j)\n    return result\n    \ndef permutations(l):\n    '''\n    Write a function that takes in a list and returns all permutations of the list (as tuples).\n    '''\n    result = []\n    if len(l) == 0:\n        return result\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                result.append(l[i:j] + l[j:k] + l[i:k])\n    return result\n    \ndef permutations_lst(l):\n    '''\n    Write a function that takes in a list and returns all permutations of the list (as tuples).\n    '''\n    result = []\n    if len(l) == 0:\n        return result\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                for m in range(k+1, len(l)):\n                    result.append(l[i:j] + l[j:k] + l[i:k] + l[j:m] + l[i:m])\n    return result\n    \ndef is_permutation(lst1, lst2):\n    '''\n    Write a function that takes in two lists and returns True if the lists are permutations, False otherwise.\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            return False\n    return True\n    \ndef is_permutation_lst(lst1, lst2):\n    '''\n    Write a function that takes in two lists and returns True if the lists are permutations, False otherwise.\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            return False\n    return True\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = list(l)\n    combs = []\n    for comb in combinations(colors, n):\n        combs.append(comb)\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1 = []\n    l2 = []\n    comb = []\n    for i in range(len(l)):\n        for j in range(n):\n            l1.append(l[i])\n            l2.append(l1[j])\n        comb.append(tuple(l2))\n        l1 = []\n        l2 = []\n    return comb\nprint(combinations_colors([1,2,3,4,5,6], 2))"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return l * n\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n <= 0:\n        return []\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = []\n    if n <= 1:\n        return 0\n    for i in range(2, n):\n        if i in nums:\n            continue\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            nums.append(i)\n    return len(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    cnt = 0\n    if n <= 2:\n        cnt = 0\n    else:\n        i = 3\n        while i <= n:\n            cnt = cnt + 1\n            for j in range(3,i,2):\n                if i%j == 0:\n                    break\n            else:\n                print(i)\n            i = i + 2\n    return cnt\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    #n = int(input())\n    prime_nums = []\n    if n <= 2:\n        return 0\n    if n <= 3:\n        return 1\n    else:\n        for i in range(2,n):\n            for j in range(2,(i//2)+1):\n                if (i%j == 0):\n                    break\n            else:\n                prime_nums.append(i)\n        return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    for i in range(3, n+1):\n        prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i%j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    \n    #to hold all prime numbers\n    prime_list = []\n    \n    for i in range(2, n+1):\n        \n        #to check if the number is prime\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n        \n        if is_prime:\n            prime_list.append(i)\n    \n    return prime_list\n    \ndef test_function(test_case):\n    \n    output = count_Primes_nums(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    number = 2\n    count = 0\n    while number <= n:\n        is_prime = True\n        for i in range(2, number):\n            if number % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        number += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(2,n):\n        for j in range(2,(i+1)):\n            if i%j==0:\n                break\n        else:\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    cnt = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for num in range(2, n+1):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = []\n    #nums = range(1,n+1)\n    for num in range(1,n+1):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                nums.append(num)\n    return len(nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + b\n    b = a - b\n    a = a - b\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b=b,a\n    return a,b\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    m1, m2 = (0, 0), (0, 0)\n    if test_tup1[0] > test_tup2[0]:\n        m1 = (test_tup1[0], m2[0])\n        m2 = m1\n    else:\n        m1 = (test_tup2[0], m2[0])\n        m2 = m1\n    if test_tup1[1] > test_tup2[1]:\n        m1 = (m1[0], test_tup1[1])\n        m2 = (m1[0], test_tup2[1])\n    else:\n        m1 = (m1[0], test_tup2[1])\n        m2 = (m1[0], test_tup1[1])\n    return m1, m2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = (4, 8, 9, 10, 5, 2, 1, 11, 0, 4)\n    test_tup2 = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    print('tup1', test_tup1)\n    print('tup2', test_tup2)\n    max = min = test_tup1[0]\n    for item in test_tup1:\n        if item > max:\n            max = item\n    for item in test_tup2:\n        if item < min:\n            min = item\n    print('max and min', (max, min))\n    # print(max(test_tup1))\n    # print(max(test_tup2))\n    # print(min(test_tup1))\n    # print(min(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = ()\n    if test_tup1[0] > test_tup2[0]:\n        max_elem = test_tup2\n    else:\n        max_elem = test_tup1\n    return max_elem\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # If any of the tuples is empty, it is not the maximum value\n    if (test_tup1[0] == 0) or (test_tup2[0] == 0) or (test_tup1[1] == 0) or (test_tup2[1] == 0):\n        return 0\n    \n    # If we have same elements in the tuples, then we can not maximize\n    if (test_tup1[0] == test_tup2[0]) and (test_tup1[1] == test_tup2[1]):\n        return 0\n    \n    max_num = test_tup1[0]\n    max_ind1 = 0\n    max_ind2 = 0\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_num:\n            max_num = test_tup1[i]\n            max_ind1 = i\n            \n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_num:\n            max_num = test_tup2[i]\n            max_ind2 = i\n    \n    if max_ind1 > max_ind2:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0],\n            test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    tup1.sort(reverse=True)\n    tup2.sort(reverse=True)\n    tup1, tup2 = tuple(tup1), tuple(tup2)\n    return tup1 + tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n <= 2):\n        return 2\n    n_str = str(n)\n    if (n_str[0] == '0'):\n        return 2\n    \n    n = int(n_str)\n    for x in range(len(n_str)):\n        n = n*5 + 1\n        if(n_str[x] == '0'):\n            return n\n            \n    \n    \n    return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 2:\n        return n-1\n    else:\n        while n > 2:\n            n = n-1\n            n = n-1\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    a = []\n    for i in range(len(prime)):\n        if n % prime[i] == 0:\n            a.append(prime[i])\n    for i in range(len(a)):\n        if a[i] <= n:\n            n -= a[i]\n    return n\n    \ndef length_of_longest_substring(arr, k): \n    '''\n    Write a function to find length of the longest subarray such that the sum of the elements in the subarray is divisible by k.\n    '''\n    count = 0\n    d = dict()\n    for i in range(len(arr)):\n        count += arr[i]\n        d[count] = i\n        if count % k == 0:\n            count = 0\n    longest_sub = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[d[arr[i]]]:\n            longest_sub = max(longest_sub, i - d[arr[i]] + 1)\n    return longest_sub\n    \ndef missing_digits(n): \n    '''\n    Write a function to return the missing digits in a number.\n    '''\n    a = list(str(n))\n    c = list(range(1, 10))\n    b = set(c).difference(set(a))\n    for i in range(len(a)):\n        if int(a[i]) not in b:\n            d = a[i]\n    return int(d)\n    \ndef non_adjacent_counters(a, b): \n    '''\n    Write a function to count number of non-adjacent pairs in an array.\n    '''\n    cnt = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                if a[i] + a[j] == b[i]:\n                    cnt += 1\n    return cnt\n    \ndef minimum_insertion_position(a): \n    '''\n    Write a function to find the minimum insertion position of a given string.\n    '''\n    a = list(a)\n    n = len(a)\n    i = 0\n    while i < n:\n        if a[i]!= \" \":\n            i += 1\n            continue\n        if i == n - 1:\n            return -1\n        for j in range(i + 1, n):\n            if a[j]!= \" \":\n                i = j + 1\n                break\n        else:\n            return i\n    return -1\n    \ndef sum_of_fibonacci_numbers(n): \n    '''\n    Write a function to calculate the sum of the first n Fibonacci numbers.\n    '''\n    n1 = 1\n    n2 = 1\n    sum = 0\n    for i in range(n):\n        sum += n1\n        n1, n2 = n2, n1 + n2\n    return sum\n    \ndef sum_of_fibonacci_numbers_naive(n): \n    '''\n    Write a function to calculate the sum of the first n Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 1\n        while n > 1:\n            sum += 1\n            n -= 1\n        return sum\n    \ndef sum_of_fibonacci_numbers_fast(n): \n    '''\n    Write a function to calculate the sum of the first n Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef non_divisible_subset(nums): \n    '''\n    Write a function that returns the maximum sum of non-divisible sub-arrays.\n    '''\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] % nums[j]!= 0:\n                sum_of_nums = nums[i] + nums[j]\n                if sum_of_nums > max_sum:\n                    max_sum = sum_of_nums\n    return max_sum\n    \ndef longest_palindrome(s): \n    '''\n    Write a function that finds the longest palindrome in a string.\n    '''\n    if s == \"\":\n        return \"\"\n    n = len(s)\n    for i in range(n):\n        s1 = s + s\n        s2 = s + s[::-1]\n        if s1 == s2:\n            return s\n    for i in range(n):\n        s1 = s + s[::-1]\n        s2 = s + s\n        if s1 == s2:\n            return s\n    for i in range(n):\n        for j in range(n):\n            s1 = s[i:j]\n            s2 = s[i+1:j+1]\n            if s1 == s2:\n                return s1\n    return \"\"\n    \ndef is_prime(n): \n    '''\n    Write a function that checks whether an integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef dutch_flag_partition(arr, low, high): \n    '''\n    Write a function to partition an array of size n such that arr[i] belongs to either of the two subsets {1, 2,..., n} and {n+1, n+2,..., 2n} with a given constraint that arr[0] = 1.\n    '''\n    i = low + 1\n    j = high\n    pivot = arr[low]\n    while i <= j:\n        while i <= j and arr[i] < pivot:\n            i += 1\n        while i <= j and arr[j] >= pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[low], arr[j] = arr[j], arr[low]\n    return j\n    \ndef dutch_flag_partition2(arr, low, high): \n    '''\n    Write a function to partition a"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = get_primes_up_to_n(n)\n    def is_prime(x):\n        if x in primes:\n            return True\n        else:\n            for prime in primes:\n                if x % prime == 0:\n                    return False\n            return True\n    i = 0\n    while True:\n        if is_prime(i):\n            return i\n        i += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    for i in range(n-1):\n        num = randint(2, n)\n        if not is_prime(num):\n            prime = False\n            break\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    else:\n        num = 1\n        num_list = []\n        prime_list = []\n        for num in range(1,n+1):\n            num_list.append(num)\n            prime_list.append(True)\n        for num in range(0,len(num_list)):\n            if num_list[num] == 0:\n                prime_list[num] = False\n            if num_list[num] == 1:\n                prime_list[num] = True\n            if num_list[num] == 2:\n                prime_list[num] = True\n            if num_list[num] == 3:\n                prime_list[num] = False\n            if num_list[num] > 3:\n                prime_list[num] = False\n            if num_list[num] > 5:\n                prime_list[num] = False\n            if num_list[num] > 7:\n                prime_list[num] = False\n            if num_list[num] > 11:\n                prime_list[num] = False\n            if num_list[num] > 13:\n                prime_list[num] = False\n            if num_list[num] > 17:\n                prime_list[num] = False\n            if num_list[num] > 19:\n                prime_list[num] = False\n            if num_list[num] > 23:\n                prime_list[num] = False\n            if num_list[num] > 29:\n                prime_list[num] = False\n            if num_list[num] > 31:\n                prime_list[num] = False\n            if num_list[num] > 37:\n                prime_list[num] = False\n            if num_list[num] > 41:\n                prime_list[num] = False\n            if num_list[num] > 43:\n                prime_list[num] = False\n            if num_list[num] > 47:\n                prime_list[num] = False\n            if num_list[num] > 53:\n                prime_list[num] = False\n            if num_list[num] > 59:\n                prime_list[num] = False\n            if num_list[num] > 61:\n                prime_list[num] = False\n            if num_list[num] > 67:\n                prime_list[num] = False\n            if num_list[num] > 71:\n                prime_list[num] = False\n            if num_list[num] > 73:\n                prime_list[num] = False\n            if num_list[num] > 79:\n                prime_list[num] = False\n            if num_list[num] > 83:\n                prime_list[num] = False\n            if num_list[num] > 89:\n                prime_list[num] = False\n            if num_list[num] > 97:\n                prime_list[num] = False\n            if num_list[num] > 101:\n                prime_list[num] = False\n            if num_list[num] > 103:\n                prime_list[num] = False\n            if num_list[num] > 107:\n                prime_list[num] = False\n            if num_list[num] > 109:\n                prime_list[num] = False\n            if num_list[num] > 113:\n                prime_list[num] = False\n            if num_list[num] > 127:\n                prime_list[num] = False\n            if num_list[num] > 131:\n                prime_list[num] = False\n            if num_list[num] > 137:\n                prime_list[num] = False\n            if num_list[num] > 139:\n                prime_list[num] = False\n            if num_list[num] > 149:\n                prime_list[num] = False\n            if num_list[num] > 151:\n                prime_list[num] = False\n            if num_list[num] > 157:\n                prime_list[num] = False\n            if num_list[num] > 163:\n                prime_list[num] = False\n            if num_list[num] > 167:\n                prime_list[num] = False\n            if num_list[num] > 173:\n                prime_list[num] = False\n            if num_list[num] > 179:\n                prime_list[num] = False\n            if num_list[num] > 181:\n                prime_list[num] = False\n            if num_list[num] > 191:\n                prime_list[num] = False\n            if num_list[num] > 193:\n                prime_list[num] = False\n            if num_list[num] > 197:\n                prime_list[num] = False\n            if num_list[num] > 199:\n                prime_list[num] = False\n            if num_list[num] > 211:\n                prime_list[num] = False\n            if num_list[num] > 223:\n                prime_list[num] = False\n            if num_list[num] > 227:\n                prime_list[num] = False\n            if num_list[num] > 229:\n                prime_list[num] = False\n            if num_list[num] > 233:\n                prime_list[num] = False\n            if num_list[num] > 239:\n                prime_list[num] = False\n            if num_list[num] > 241:\n                prime_list[num] = False\n            if num_list[num] > 251:\n                prime_list[num] = False\n            if num_list[num] > 257:\n                prime_list[num] = False\n            if num_list[num] > 263:\n                prime_list[num] = False\n            if num_list[num] > 269:\n                prime_list[num] = False\n            if num_list[num] > 271:\n                prime_list[num] = False\n            if num_list[num] > 277:\n                prime_list[num] = False\n            if num_list[num] > 281:\n                prime_list[num] = False\n            if num_list[num] > 283:\n                prime_list[num] = False\n            if num_list[num] > 289:\n                prime_list[num] = False\n            if num_list[num] > 293:\n                prime_list[num] = False\n            if num_list[num] > 307:\n                prime_list[num] = False\n            if num_list[num] > 311:\n                prime_list[num] = False\n            if num_list[num] > 313:\n                prime_list[num] = False\n            if num_list[num] > 317:\n                prime_list[num] = False\n            if num_list[num] > 321:\n                prime_list[num] = False\n            if num_list[num] > 323:\n                prime_list[num] = False\n            if num_list[num] > 327:\n                prime_list[num] = False\n            if num_list[num] > 329:\n                prime_list[num] = False\n            if num_list[num] > 331:\n                prime_list[num] = False\n            if num_list[num] > 337:\n                prime_list[num] = False\n            if num_list[num] > 347:\n                prime_list[num] = False\n            if num_list[num] > 349:\n                prime_list[num] = False\n            if num_list[num] > 353:\n                prime_list[num] = False\n            if num_list[num] > 359:\n                prime_list[num] = False\n            if num_list[num] > 367:\n                prime_list[num] = False\n            if num_list[num] > 373:\n                prime_list[num] = False\n            if num_list[num] > 379:\n                prime_list[num] = False\n            if num_list[num] > 383:\n                prime_list[num] = False\n            if num_list[num] > 389:\n                prime_list[num] = False\n            if num_list[num] > 397:\n                prime_list[num] = False\n            if num_list[num] > 401:\n                prime_list[num] = False"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0 or n == 1:\n        return False\n    else:\n        lst = []\n        lst.append(2)\n        lst.append(3)\n        lst.append(5)\n        lst.append(7)\n        lst.append(11)\n        lst.append(13)\n        lst.append(17)\n        lst.append(19)\n        lst.append(23)\n        lst.append(29)\n        lst.append(31)\n        lst.append(37)\n        lst.append(41)\n        lst.append(43)\n        lst.append(47)\n        lst.append(53)\n        lst.append(59)\n        lst.append(61)\n        lst.append(67)\n        lst.append(71)\n        lst.append(73)\n        lst.append(79)\n        lst.append(83)\n        lst.append(89)\n        lst.append(97)\n        lst.append(101)\n        lst.append(103)\n        lst.append(107)\n        lst.append(109)\n        lst.append(113)\n        lst.append(127)\n        lst.append(131)\n        lst.append(137)\n        lst.append(139)\n        lst.append(149)\n        lst.append(151)\n        lst.append(157)\n        lst.append(163)\n        lst.append(167)\n        lst.append(173)\n        lst.append(179)\n        lst.append(181)\n        lst.append(191)\n        lst.append(193)\n        lst.append(197)\n        lst.append(199)\n        lst.append(211)\n        lst.append(223)\n        lst.append(227)\n        lst.append(229)\n        lst.append(233)\n        lst.append(239)\n        lst.append(241)\n        lst.append(251)\n        lst.append(257)\n        lst.append(263)\n        lst.append(269)\n        lst.append(271)\n        lst.append(277)\n        lst.append(281)\n        lst.append(283)\n        lst.append(293)\n        lst.append(307)\n        lst.append(311)\n        lst.append(313)\n        lst.append(317)\n        lst.append(331)\n        lst.append(337)\n        lst.append(347)\n        lst.append(349)\n        lst.append(353)\n        lst.append(359)\n        lst.append(367)\n        lst.append(373)\n        lst.append(379)\n        lst.append(383)\n        lst.append(389)\n        lst.append(397)\n        lst.append(401)\n        lst.append(409)\n        lst.append(419)\n        lst.append(421)\n        lst.append(431)\n        lst.append(433)\n        lst.append(439)\n        lst.append(443)\n        lst.append(449)\n        lst.append(457)\n        lst.append(461)\n        lst.append(467)\n        lst.append(479)\n        lst.append(487)\n        lst.append(491)\n        lst.append(493)\n        lst.append(497)\n        lst.append(499)\n        lst.append(503)\n        lst.append(509)\n        lst.append(511)\n        lst.append(517)\n        lst.append(521)\n        lst.append(523)\n        lst.append(541)\n        lst.append(547)\n        lst.append(557)\n        lst.append(563)\n        lst.append(569)\n        lst.append(571)\n        lst.append(577)\n        lst.append(587)\n        lst.append(593)\n        lst.append(599)\n        lst.append(601)\n        lst.append(607)\n        lst.append(613)\n        lst.append(617)\n        lst.append(619)\n        lst.append(631)\n        lst.append(641)\n        lst.append(643)\n        lst.append(647)\n        lst.append(653)\n        lst.append(659)\n        lst.append(661)\n        lst.append(673)\n        lst.append(677)\n        lst.append(683)\n        lst.append(691)\n        lst.append(701)\n        lst.append(709)\n        lst.append(719)\n        lst.append(727)\n        lst.append(733)\n        lst.append(739)\n        lst.append(743)\n        lst.append(749)\n        lst.append(751)\n        lst.append(757)\n        lst.append(761)\n        lst.append(769)\n        lst.append(773)\n        lst.append(791)\n        lst.append(797)\n        lst.append(809)\n        lst.append(811)\n        lst.append(821)\n        lst.append(823)\n        lst.append(827)\n        lst.append(829)\n        lst.append(839)\n        lst.append(853)\n        lst.append(857)\n        lst.append(859)\n        lst.append(863)\n        lst.append(877)\n        lst.append(881)\n        lst.append(883)\n        lst.append(887)\n        lst.append(895)\n        lst.append(899)\n        lst.append(907)\n        lst.append(911)\n        lst.append(919)\n        lst.append(923)\n        lst.append(937)\n        lst.append(941)\n        lst.append(947)\n        lst.append(953)\n        lst.append(967)\n        lst.append(971)\n        lst.append(977)\n        lst.append(983)\n        lst.append(993)\n        lst.append(997)\n        lst.append(1009)\n        lst.append(1013)\n        lst.append(1019)\n        lst.append(1021)\n        lst.append(1031)\n        lst.append(1033)\n        lst.append(1037)\n        lst.append(1039)\n        lst.append(1057)\n        lst.append(1063)\n        lst.append(1071)\n        lst.append(1081)\n        lst.append(1087)\n        lst.append(1091)\n        lst.append(1093)\n        lst.append(1097)\n        lst.append(1101)\n        lst.append(1103)\n        lst.append(1109)\n        lst.append(1113)\n        lst.append(1117)\n        lst.append(1119)\n        lst.append(1121)\n        lst.append(1127)\n        lst.append(1129)\n        lst.append(1137)\n        lst.append(1141)\n        lst.append(1147)\n        lst.append(1153)\n        lst.append(1159)\n        lst.append(1161)\n        lst.append(1163)\n        lst.append(1169)\n        lst.append(1187)\n        lst.append(1193)\n        lst.append(1209)\n        lst.append(1217)\n        lst.append(1219)\n        "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def n_th_prime(n):\n        '''\n        Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        lst = [1]\n        i = 2\n        while lst[-1] < n:\n            i += 1\n            while i <= (n-1)/2:\n                if i%2 == 0:\n                    i += 1\n                    continue\n                lst.append(i)\n                if i%3 == 0:\n                    i += 1\n                    continue\n                if i%5 == 0:\n                    i += 1\n                    continue\n                break\n        return lst[-1]\n    return n_th_prime(n)\n    \ndef fibonacci(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    lst = [0,1]\n    i = 2\n    while i < n+1:\n        lst.append(lst[-1] + lst[-2])\n        i += 1\n    return lst[n]\n    \ndef fibonacci_dp(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    def fibo_dp(n):\n        dp = [1,1]\n        i = 2\n        while i < n+1:\n            dp.append(dp[-1] + dp[-2])\n            i += 1\n        return dp[n]\n    return fibo_dp(n)\n    \ndef reverse_str(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    s = list(s)\n    s.reverse()\n    return ''.join(s)\n    \ndef reverse_str_dp(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    def reverse_str_dp(s):\n        dp = [0 for i in range(len(s))]\n        i = len(s)-1\n        while i >= 0:\n            dp[i] = s[i]\n            i -= 1\n        return dp\n    return ''.join(dp)\n    \ndef to_reverse_str_dp(s):\n    '''\n    Write a function to reverse a string using dp.\n    '''\n    def to_reverse_str_dp(s):\n        dp = [0 for i in range(len(s))]\n        i = len(s)-1\n        while i >= 0:\n            dp[i] = s[i]\n            i -= 1\n        i = 0\n        while i < len(s):\n            dp[i] = s[i]\n            i += 1\n        return dp\n    return ''.join(dp)\n    \ndef palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    s = list(s)\n    s.reverse()\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef palindrome_dp(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    s = list(s)\n    s.reverse()\n    # len(s) - 1 to make sure we compare the middle element in the string\n    for i in range(len(s) - 1):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True\n    \ndef is_anagram_dp(s, t):\n    '''\n    Write a function to check if s and t are anagram or not.\n    '''\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    if s == t:\n        return True\n    return False\n    \ndef is_anagram_dp(s, t):\n    '''\n    Write a function to check if s and t are anagram or not.\n    '''\n    s = list(s)\n    t = list(t)\n    s.sort()\n    t.sort()\n    if s == t:\n        return True\n    return False\n    \ndef has_duplicate(s):\n    '''\n    Write a function to check if string s has any duplicate characters.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return True\n    return False\n    \ndef has_duplicate_dp(s):\n    '''\n    Write a function to check if string s has any duplicate characters.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return True\n    return False\n    \ndef longest_common_substring(s, t):\n    '''\n    Write a function to find the longest common substring.\n    '''\n    s = list(s)\n    t = list(t)\n    len_s = len(s)\n    len_t = len(t)\n    dp = [[0 for i in range(len_t+1)] for j in range(len_s+1)]\n    for i in range(1, len_s+1):\n        for j in range(1, len_t+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 0\n    i = len_s\n    j = len_t\n    longest_substr = ''\n    while i!= 0 and j!= 0:\n        if dp[i][j] == dp[i-1][j-1]:\n            longest_substr = s[i-1] + longest_substr\n            i -= 1\n            j -= 1\n        elif dp[i][j] == dp[i][j-1]:\n            j -= 1\n        else:\n            i -= 1\n    return longest_substr\n    \ndef longest_common_substring_dp(s, t):\n    '''\n    Write a function to find the longest common substring.\n    '''\n    s = list(s)\n    t = list(t)\n    len_s = len(s)\n    len_t = len(t)\n    dp = [[0 for i in range(len_t+1)] for j in range(len_s+1)]\n    for i in range(1, len_s+1):\n        for j in range(1, len_t+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 0\n    i = len_s\n    j = len_t\n    longest_substr = ''\n    while i!= 0 and j!= 0:\n        if dp[i][j] == dp[i-1][j-1]:\n            longest_substr = s[i-1] + longest_substr\n            i -= 1\n            j -= 1\n        elif dp[i][j] == dp[i][j-1]:\n            j -= 1\n        else:\n            i -= 1\n    return longest_substr\n    \ndef longest_common_substring_dp_greed(s, t):\n    '''\n    Write a function to find the longest common substring.\n    '''\n    s = list(s)\n    t = list(t)\n    len_s = len(s)\n    len_t = len(t)\n    dp = [[0 for i in range(len_t+1)] for j in range(len_s+1)]\n    for i in range(1, len_s+1):\n        for j in range(1, len_t+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 0\n    i = len_s\n    j = len_t\n    longest_substr = ''\n    while i!= 0 and j!= 0:\n        if dp"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if type(n)!= int:\n        raise TypeError('Input must be an integer')\n    if n < 1:\n        raise ValueError('Input must be at least 1')\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    i = 0\n    prime = 0\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1_list = test_tup1\n    tup2_list = test_tup2\n    tup1_len = len(tup1_list)\n    tup2_len = len(tup2_list)\n    if tup1_len!= tup2_len:\n        print('Tuples are of unequal length!')\n        return\n    for i in range(tup1_len):\n        tup1_list[i] /= tup2_list[i]\n    return tup1_list\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple, 'Inputs must be tuples.'\n    assert len(test_tup1) == len(test_tup2), 'Input tuples must be the same length.'\n    return tuple(i/j for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(0,len(test_tup1)):\n        test_tup1[i] = test_tup1[i]/test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i])\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple, \"test_tup1 should be a tuple\"\n    assert type(test_tup2) == tuple, \"test_tup2 should be a tuple\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length to perform division operation.\")\n        return\n    else:\n        return list(map(lambda x, y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #YOUR CODE HERE\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n        test_tup2[i] = int(test_tup2[i])\n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Invalid Input\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n        test_tup2[i] = int(test_tup2[i])\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #new_list1 = list1[L:]\n    #return (new_list1[:L], new_list1[L:])\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return ()\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Separate into two parts\n    index = len(list1)//2\n    first_part = list1[:index]\n    second_part = list1[index:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l, r = list1[:L], list1[L:]\n    return (l, r)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L_part1, L_part2 = list1[:L], list1[L:]\n    return L_part1, L_part2\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # YOUR CODE HERE\n    return (list1[:L],list1[L:])\n    \n    # OR\n    # return (list1[:L],list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return list1, list1\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        return (list1[0:L], list1[L:])\n    return (list1, None)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts based on L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n    \nlist1 = [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n    else:\n        dog_age = 17.0\n        return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print('Inside dog_age() function')\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #Code here\n    return h_age * 7\n    "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n    \ndef dog_years(age_in_months, growth_rate_in_months):\n    '''\n    Write a function that converts a dog's age in months to dog's age in dog's years.\n    '''\n    return age_in_months / 12 + growth_rate_in_months\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 0:\n        return h_age * 7\n    elif h_age < 0:\n        return h_age / 7\n    else:\n        print('The number must be > 0!')\n    \ndef dog_years(age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(age)\n    if age >= 0:\n        return (age * 7)\n    elif age < 0:\n        return (age / 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_human_years(h_age):\n    '''\n    Write a function to convert a dog's age in human years to dog's age in dog's years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age + 7)\n    elif age < 0:\n        return (age - 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_human_years(h_age):\n    '''\n    Write a function to convert a dog's age in human years to dog's age in dog's years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_in_human_years(h_age):\n    '''\n    Write a function to convert a dog's age in human years to dog's age in dog's years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age + 7)\n    elif age < 0:\n        return (age - 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age + 7)\n    elif age < 0:\n        return (age - 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age + 7)\n    elif age < 0:\n        return (age - 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(dog_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    age = int(h_age)\n    if age >= 0:\n        return (age - 7)\n    elif age < 0:\n        return (age + 7)\n    else:\n        print('The number must be >= 0!')\n    \ndef dog_age_in_dog_years(dog_age):\n    '''\n    Write "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age*7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n    else:\n        return (h_age*7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 2 * h_age + 5\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    if len(S) == 0:\n        return []\n    else:\n        return_list = []\n        iter = 0\n        while iter < len(S):\n            sublist = S[iter:iter+step]\n            return_list.append(sublist)\n            iter += step\n        return return_list\n        "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    else:\n        return list_split(S[::step], step-1) + list_split(S[::step], step-1)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(len(S)):\n        out.append(S[i::step])\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize the final list\n    final_list = []\n    # initialize the index\n    index = 0\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    if len(S)%step!= 0:\n        for i in range(0, len(S), step):\n            new_list.append(S[i:i+step])\n        return new_list\n    else:\n        for i in range(0, len(S)-step+1, step):\n            new_list.append(S[i:i+step])\n        return new_list\n    \ndef find_letter_count(S):\n    '''\n    Write a function that takes a string and returns a dictionary with the letters of the alphabet as keys and the count of their occurrences as values.\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    final = []\n    for i in range(0, len(S), step):\n        final.append(S[i:i+step])\n    return final\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    if len(S)%step!= 0:\n        step = int(step - len(S)%step)\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<=0:\n        return 0\n    else:\n        return l*l*6\nprint(lateralsurface_cube(2))\nprint(lateralsurface_cube(3))\nprint(lateralsurface_cube(4))\nprint(lateralsurface_cube(5))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n    #return 4 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #   side_length = l\n    side_length = math.sqrt(math.pow(l, 2) + math.pow(l, 2))\n    surf = 4 * math.pi * side_length\n    return surf\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<=0:\n        return 0\n    if l==1:\n        return 6\n    return 2*lateralsurface_cube(l-1)+6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    S = l*6\n    return S\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l * l * 6.0) + (l * 6.0)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #define the formula for lateral surface of a cube\n    area = l ** 2 * 6\n    return area\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    print(sum)\n    \ndef square_Sum_2(n):\n    return sum(i**2 for i in range(1, n+1))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if (i%2 == 1):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # Python program to illustrate\n    # simple calculator\n    # from mathymath module\n    from mathymath import sqrt\n    \n    # initializing sum\n    sum = 0\n    \n    # taking input from the user\n    # for calculating sum of squares\n    # of first n odd numbers\n    n = int(input(\"Enter a number: \"))\n    \n    # checking if the given number is positive\n    # or not\n    if n < 0:\n        print(\"Sorry! No negative numbers allowed.\")\n        \n    # iterating till the range\n    # and adding the sum of squares\n    # of the first n odd numbers\n    else:\n        for i in range(n + 1):\n            if i % 2 == 1:\n                sum = sum + i**2\n        print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    i = 1\n    total = 0\n    while i < n:\n        total = total + i**2\n        i = i + 2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1,n+1):\n        total_sum += (i**2)\n    return total_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    sum1 = 0\n    for i in range(1, n+1, 2):\n        sum1 += i**2\n    return sum1\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    i = 1\n    sum_of_squares = 0\n    while i <= n:\n        sum_of_squares += i**2\n        i += 1\n    return sum_of_squares\n    \nprint(square_Sum(15))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i < n:\n        i += 2\n        total += i**2\n    return total\nprint(square_Sum(10)) # should print 385\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    def find_star_num_helper(n, count, star_num, index):\n        if index == n:\n            return\n        if star_num == 0:\n            star_num = 1\n        if count == index:\n            return\n        else:\n            find_star_num_helper(n, count+1, star_num, index)\n            find_star_num_helper(n, count, star_num-1, index)\n            \n    find_star_num_helper(n, 0, 0, 0)\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 3 * find_star_num(n - 1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case\n    if n == 0: \n        return n \n    else: \n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n - 1\n    fact = 1\n    while n > 0:\n        fact = fact * n\n        n = n - 1\n    return fact\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    res = 0\n    for i in range(n):\n        res = res + i * (i + 1) // 2\n    return res\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Write your code here\n    return n ** 3\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        a = 0\n        b = 0\n        for j in range(1, i):\n            if i % j == 0:\n                a += 1\n            else:\n                b += 1\n        if a == i-1 and b == 0:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    answer = n\n    for i in range(1, n + 1):\n        answer = answer * (i + 1)\n    return answer\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    while num < n:\n        num += 1\n        if num % 3 == 0 or num % 5 == 0:\n            continue\n        else:\n            return num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (2**n) - 1\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(ord('a'), ord('z')+1):\n        if k == chr(i):\n            return i\n    return ord('_')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    sum_even_index = sum_even_index + arr[0]\n    if arr[1] % 2 == 0:\n        sum_even_index = sum_even_index + arr[1]\n    if arr[2] % 2 == 0:\n        sum_even_index = sum_even_index + arr[2]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0 and arr[i]%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if arr[i] % 2 == 0:\n            even_index = even_index + 1\n            even_sum = even_sum + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == None:\n        return 0\n    if len(arr) == 0:\n        return 0\n    res = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_and_even_index = 0\n    sum_even_index = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_and_even_index += arr[i]\n            sum_even_index += 1\n    return sum_even_and_even_index, sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if i%2==0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_pos = 0\n    while(True):\n        if (even_pos > len(arr)):\n            break\n        elif(arr[even_pos] % 2 == 0):\n            even_sum = even_sum + arr[even_pos]\n            even_pos += 2\n        else:\n            even_pos += 2\n    print(\"Sum of even numbers at even positions in list: \", even_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0,len(arr)-1,2):\n        if arr[i]%2==0:\n            s+=arr[i]\n    return s\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_pos = []\n    even_sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i] % 2 == 0:\n            even_pos.append(i)\n            even_sum += arr[i]\n    print(even_sum)\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i**5\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    i = 0\n    while i < n:\n        sum_even += 5**i\n        i += 1\n    print(sum_even)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**5\n    return s\nprint(\"sum of even powers of 5 from 1 to 10 is : \",even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    print(sum(i**5 for i in range(1, n+1) if i%2 == 0))\n    \ndef even_Power_Sum_II(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    print(sum(i**5 for i in range(1, n+1) if i%2!= 0))\n    \ndef odd_Power_Sum_II(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_II(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_III(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_III(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef even_Power_Sum_IV(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_IV(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef odd_Power_Sum_V(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_V(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_VI(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_VI(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_VII(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_VII(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_VIII(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_VIII(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_IX(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2!= 0))\n    \ndef even_Power_Sum_IX(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) for i in range(1, n+1) if i%2 == 0))\n    \ndef odd_Power_Sum_X(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power. \n    The values should be printed in a space separated list with no spaces in between each value.\n    '''\n    print(' '.join(str(i**5) fo"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            total = total + i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return int((5**n)/n)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    total_sum = 0\n    \n    for i in range(1,n+1):\n        if i%2 == 0:\n            total_sum = total_sum + (i**5)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    res = []\n    for item in test_list:\n        res.append(item[1])\n    return res\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for tup in test_list:\n        output.append(tup[-1])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extract = []\n    for i in test_list:\n        extract.append(i[1])\n    return extract\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst = []\n    for x in range(0,len(test_tup1)):\n        lst.append(test_tup1[x] - test_tup2[x])\n    return lst\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(list(test_tup1) - list(test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] - list2[i])\n    return tuple(list3)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3,1)\n    # tuple2 = (4,8,9,5,7,2)\n    # output = (5,2,2,4,7,3)\n    \n    # tuple1 = (5,2,7,5,3"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup1)):\n        test_dict[i] = test_tup1[i] - test_tup2[i]\n    return test_dict\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for tup_el in test_tup1:\n        if tup_el in test_tup2:\n            new_tup.append(tup_el - test_tup2[test_tup2.index(tup_el)])\n        else:\n            new_tup.append(tup_el)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y:x-y, test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        if i%2 ==0:\n            Sum += (n-i+1)/(2*i-1)\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #check if n is integer\n    if not isinstance(n, int):\n        raise ValueError(\"Please provide a positive integer for n.\")\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a = a*(i+1)//i\n    return a\n    \nprint(even_binomial_Coeff_Sum(4))  # should return 8\nprint(even_binomial_Coeff_Sum(10))  # should return 55\nprint(even_binomial_Coeff_Sum(25))  # should return 76400\nprint(even_binomial_Coeff_Sum(99))  # should return 377831760\nprint(even_binomial_Coeff_Sum(1000))  # should return 305282036480136.0\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(1,n+1):\n        if i%2 == 0:\n            ans += binomial_coefficients[n]\n        else:\n            ans -= binomial_coefficients[n]\n    return ans\n    \ndef un_sum_coeff( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(1,n+1):\n        ans += binomial_coefficients[n]\n    return ans\n    \ndef even_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(n+1):\n        if i%2 == 0:\n            ans += binomial_coefficients[n]\n        else:\n            ans -= binomial_coefficients[n]\n    return ans\n    \ndef un_sum_coeff_list( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(n+1):\n        ans += binomial_coefficients[n]\n    return ans\n    \ndef even_binomial_Coeff_Sum_List_nth( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(n+1):\n        if i%2 == 0:\n            ans += binomial_coefficients[n]\n        else:\n            ans -= binomial_coefficients[n]\n    return ans\n    \ndef un_sum_coeff_list_nth( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    ans = 0\n    binomial_coefficients = []\n    for i in range(n+1):\n        binomial_coefficients.append(0)\n        binomial_coefficients[i] = 1\n        for j in range(1,i):\n            binomial_coefficients[i] += j * binomial_coefficients[i-j]\n    for i in range(n+1):\n        ans += binomial_coefficients[n]\n    return ans\n    \ndef exact_binomial_coefficient( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the exact binomial coefficient.\n    '''\n    ans = 1\n    for i in range(n+1):\n        ans *= (2*i)/(i+1)\n    return ans\n    \ndef odd_binomial_coefficient( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the odd binomial coefficient.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1)/(i+2)\n    return ans\n    \ndef even_binomial_coefficient( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the even binomial coefficient.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i-1)/(i+2)\n    return ans\n    \ndef binomial_coefficient_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef odd_binomial_coefficient_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the odd binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef even_binomial_coefficient_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the even binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i-1) / (i+2)\n    return ans\n    \ndef binomial_coefficient_sum_list(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef odd_binomial_coefficient_sum_list(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the odd binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef even_binomial_coefficient_sum_list(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the even binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i-1) / (i+2)\n    return ans\n    \ndef binomial_coefficient_sum_list_nth(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef odd_binomial_coefficient_sum_list_nth(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the odd binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += i * (2*i+1) / (i+2)\n    return ans\n    \ndef even_binomial_coefficient_sum_list_nth(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the even binomial coefficients.\n    '''\n    ans = 0\n    for i in range("
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial(x,y):\n        return math.factorial(x)/(math.factorial(x-y)*math.factorial(y))\n    sum_val = 0\n    for i in range(1,n+1):\n        if i%2 ==0:\n            sum_val += binomial(n,i)\n    return sum_val\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    binomial_coefficient_sum = 0\n    coeff = 1\n    if n == 0:\n        return binomial_coefficient_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coefficients_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_binomial_coefficients_sum += binomial_coefficients[i]\n    return even_binomial_coefficients_sum\n    \n    \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"n must be integer\")\n    if n <= 0:\n        raise ValueError(\"n must be positive integer\")\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    \n    for i in range(n):\n        if (i%2==0):\n            Sum = Sum + math.factorial(i)/((math.factorial(i-1))*math.factorial(i))\n        else:\n            Sum = Sum + math.factorial(i)/((math.factorial(i+1))*math.factorial(i))\n            \n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    \n    for i in range(n+1):\n        Sum += (2**i) / math.factorial(i)\n    return Sum\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    v = pi * (r ** 2) * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    pi=3.14\n    volume=pi*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    from math import pi\n    v = r*r*pi*h\n    return v\n    #raise NotImplementedError()\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.141592653\n    vol=pi*r**2*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * (r**2) * (h)\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159265*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    r = float(r)\n    h = float(h)\n    volume = pi*r**2*h\n    return volume\n    "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for k,v in dict_copy.items():\n        if v >= n:\n            dict[k] = v\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    #Your code here\n    \n    \n    new_dict = {k:v for k,v in dict.items() if v > n}\n    return new_dict\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values() >= n\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict()\n    for key in dict:\n        if dict[key] >= n:\n            d[key] = dict[key]\n    return d\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    if len(test_tup) == 0:\n        return 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def first_elements(tup, num):\n        if len(tup) == 1:\n            return tup[0] == num\n        else:\n            return first_elements(tup[1:], num)\n    return first_elements(test_tup, num)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    temp = 0\n    for i in range(0,len(test_tup)):\n        for j in range(0,i):\n            if(test_tup[i]==test_tup[j]):\n                temp+=1\n    return temp\n    \ntest_tup = (1,1,2,2,2,3,4,4,5,5)\nprint(count_first_elements(test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in range(len(test_tup)):\n        if test_tup[element] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return 0\n    else:\n        return test_tup[0] + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count = count + 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if item > test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    k = 1\n    ans = 1\n    while k <= n:\n        ans = ans*10 + (1 + 1)*(n - k)\n        k += 1\n    return ans\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    res = 1\n    k = 1\n    while k <= n:\n        res = res*1\n        res = res + k*(k+1)//2\n        k += 1\n    return res\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    x = 0\n    for i in range(1, n + 1):\n        x = x*10 + i\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a, b = 1, 2\n    for i in range(1, n+1):\n        # print(a, b)\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(pow(n, 1/2))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    n = n + 1\n    while n > 0:\n        x = x + 1/x\n        n -= 1\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal = i * (i+1) // 2\n        i += 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    res = 1\n    for i in range(n):\n        res = res * (n + 1)\n        res = res // n\n    return res\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 1\n    for i in range(n-1):\n        result = result*2 + 1\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    m = 1\n    while n >= 0:\n        m *= 10\n        n -= m\n    return m // 10\n    \ndef is_num_ascending(n):\n    '''\n    Write a function to check if a number is an ascending number.\n    '''\n    while n >= 0:\n        n -= 1\n    return True if n == 0 else False\n    \ndef is_num_ascending_sub_sorted(n):\n    '''\n    Write a function to check if a number is an ascending sub-sorted number.\n    '''\n    if n == 0:\n        return True\n    while n >= 1:\n        n -= 1\n        if n >= 1:\n            if is_num_ascending(n) == True:\n                return False\n    return True\n    \ndef is_num_ascending_super_sorted(n):\n    '''\n    Write a function to check if a number is an ascending super-sorted number.\n    '''\n    if n == 0:\n        return True\n    while n >= 1:\n        n -= 1\n        if n >= 1:\n            if is_num_ascending_sub_sorted(n) == True:\n                return False\n    return True\n    \ndef is_num_decagonal_super_sorted(n):\n    '''\n    Write a function to check if a number is a decagonal super-sorted number.\n    '''\n    if n == 0:\n        return True\n    while n >= 1:\n        n -= 1\n        if n >= 1:\n            if is_num_decagonal(n) == True:\n                return False\n    return True\n    \ndef count_ascending(n):\n    '''\n    Write a function that counts the number of ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal(n):\n    '''\n    Write a function that counts the number of decagonal numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_super_sorted(n):\n    '''\n    Write a function that counts the number of ascending super-sorted numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_ascending_super_sorted(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_super_sorted(n):\n    '''\n    Write a function that counts the number of decagonal super-sorted numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_super_sorted(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_ascending_sub_sorted(n):\n    '''\n    Write a function that counts the number of ascending sub-sorted numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_ascending_sub_sorted(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_sub_sorted(n):\n    '''\n    Write a function that counts the number of decagonal sub-sorted numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_sub_sorted(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_ascending_super_sorted_decagonal(n):\n    '''\n    Write a function that counts the number of ascending super-sorted decagonal numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_ascending_super_sorted_decagonal(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_super_sorted_ascending(n):\n    '''\n    Write a function that counts the number of decagonal super-sorted ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_super_sorted_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_ascending_decagonal(n):\n    '''\n    Write a function that counts the number of ascending decagonal numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_ascending_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of ascending decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_ascending_decagonal(n):\n    '''\n    Write a function that counts the number of decagonal ascending decagonal numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_ascending_ascending(n):\n    '''\n    Write a function that counts the number of decagonal ascending ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of decagonal descending decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_ascending_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of decagonal ascending decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_decagonal_ascending_ascending(n):\n    '''\n    Write a function that counts the number of decagonal descending decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_decagonal_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of decagonal descending decagonal ascending numbers in a list.\n    '''\n    cnt = 0\n    while n >= 1:\n        n -= 1\n        if is_num_decagonal_decagonal_ascending(n) == True:\n            cnt += 1\n    return cnt\n    \ndef count_decagonal_decagonal_decagonal_ascending(n):\n    '''\n    Write a function that counts the number of decagonal descending decagonal ascending numbers in a list.\n    '''\n    cnt = 0"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == None:\n        return None, None\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n            return position, True\n    return position, False\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Create an empty list of results\n    results = []\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    counter = 0\n    while not found and counter < len(dlist):\n        if dlist[counter] == item:\n            found = True\n        else:\n            counter += 1\n    return found, counter\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos+1\n    if found:\n        return True, pos\n    else:\n        return False, pos\n    \n    \n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        elif dlist[pos] > item:\n            break\n        else:\n            pos = pos+1\n    if found:\n        return True, pos\n    else:\n        return False, pos\n    \ndef binary_search_iterative(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    lo = 0\n    hi = len(dlist)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if dlist[mid] == item:\n            return True, mid\n        elif dlist[mid] > item:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return False, lo\n    \ndef binary_search_recursive(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return False, -1\n    else:\n        lo = 0\n        hi = len(dlist)\n        mid = (lo + hi)//2\n        if dlist[mid] == item:\n            return True, mid\n        elif dlist[mid] > item:\n            return binary_search_recursive(dlist[0:mid], item)\n        else:\n            return binary_search_recursive(dlist[mid+1:], item)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_list = []\n    if len(test_list) == 0:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_unique = set()\n    for item in test_list:\n        if item not in set_unique:\n            set_unique.add(item)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \nall_unique([1,2,3,4,5,6,7,8,8,8]"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(1,len(test_list)):\n        if test_list[i-1] == test_list[i]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            print('%s is duplicate of %s'%(test_list[i],test_list[i+1]))\n            return False\n    return True\n    "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums2)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    subtracted = []\n    for i in range(len(nums1)):\n        subtracted.append(nums1[i]-nums2[i])\n    return subtracted\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x]-=nums2[x]\n    return nums1\n    \ndef sub_iter(nums1,nums2):\n    '''\n    Write an iterator to subtract two numbers\n    '''\n    for i in range(len(nums1)):\n        nums1[i] -= nums2\n    return nums1\n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x] /= nums2[x]\n    return nums1\n    \ndef div_iter(nums1,nums2):\n    '''\n    Write an iterator to divide two numbers\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1\n    \ndef multi_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x] *= nums2[x]\n    return nums1\n    \ndef multi_iter(nums1,nums2):\n    '''\n    Write an iterator to multiply two numbers\n    '''\n    for i in range(len(nums1)):\n        nums1[i] *= nums2[i]\n    return nums1\n    \ndef sub_mult_list(nums1,nums2,nums3):\n    '''\n    Write a function to subtract a list from another list element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x]-=nums3[x]\n    return nums1\n    \ndef sub_mult_iter(nums1,nums2,nums3):\n    '''\n    Write an iterator to subtract a list from another list element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]-=nums3[i]\n    return nums1\n    \ndef add_mult_list(nums1,nums2,nums3):\n    '''\n    Write a function to add a list to another list element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x] += nums2[x]\n    return nums1\n    \ndef add_mult_iter(nums1,nums2,nums3):\n    '''\n    Write an iterator to add a list to another list element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] += nums2[i]\n    return nums1\n    \ndef conc_list(nums1,nums2):\n    '''\n    Write a function to concatenate two lists element-wise.\n    '''\n    for x in range(len(nums1)):\n        nums1[x].extend(nums2[x])\n    return nums1\n    \ndef conc_iter(nums1,nums2):\n    '''\n    Write an iterator to concatenate two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i].extend(nums2[i])\n    return nums1\n    \ndef repeat_list(nums1,num):\n    '''\n    Write a function to repeat a list num times.\n    '''\n    for x in range(num):\n        for y in range(len(nums1)):\n            nums1[y].append(nums1[y])\n    return nums1\n    \ndef repeat_iter(nums1,num):\n    '''\n    Write an iterator to repeat a list num times.\n    '''\n    for i in range(num):\n        for j in range(len(nums1)):\n            nums1[j].append(nums1[j])\n    return nums1\n    \ndef num_list(nums1,num):\n    '''\n    Write a function to reverse a list num times.\n    '''\n    for x in range(num):\n        nums1.reverse()\n    return nums1\n    \ndef num_iter(nums1,num):\n    '''\n    Write an iterator to reverse a list num times.\n    '''\n    for i in range(num):\n        nums1.reverse()\n    return nums1\n    \ndef max_min_list(nums1,max_min):\n    '''\n    Write a function to reverse a list num times.\n    '''\n    for x in range(len(nums1)):\n        nums1[x] = max_min[x][1]\n    return nums1\n    \ndef max_min_iter(nums1,max_min):\n    '''\n    Write an iterator to reverse a list num times.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = max_min[i][1]\n    return nums1\n    \ndef reverse_int(nums):\n    '''\n    Write a function to reverse a list of integers.\n    '''\n    s = \"\"\n    for i in range(len(nums)-1,-1,-1):\n        s = s + str(nums[i])\n    return int(s)\n    \ndef reverse_iter(nums):\n    '''\n    Write an iterator to reverse a list of integers.\n    '''\n    s = \"\"\n    for i in range(len(nums)-1,-1,-1):\n        s = s + str(nums[i])\n    return int(s)\n    \ndef swap_int(nums):\n    '''\n    Write a function to swap the integers in a list.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        nums[i],nums[i-1] = nums[i-1],nums[i]\n    return nums\n    \ndef swap_iter(nums):\n    '''\n    Write an iterator to swap the integers in a list.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        nums[i],nums[i-1] = nums[i-1],nums[i]\n    return nums\n    \ndef sort_list(nums):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n    \ndef sort_iter(nums):\n    '''\n    Write an iterator to sort a list of integers.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n    \ndef sum_list(nums):\n    '''\n    Write a function to sum a list of integers.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s = s + nums[i]\n    return s\n    \ndef sum_iter(nums):\n    '''\n    Write an iterator to sum a list of integers.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s = s + nums[i]\n    return s\n    \ndef sum_list_iter(nums):\n    '''\n    Write an iterator to sum a list of integers.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s = s + nums[i]\n    return s\n    \ndef reverse_list"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y,nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n1_len = len(nums1)\n    n2_len = len(nums2)\n    res = []\n    for i in range(n1_len):\n        for j in range(n2_len):\n            res.append(nums1[i] - nums2[j])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    res = []\n    if n > m:\n        for i in range(m):\n            res.append(nums1[i])\n        for j in range(n-m):\n            res.append(nums2[j])\n    else:\n        for i in range(n):\n            res.append(nums1[i])\n        for j in range(m-n):\n            res.append(nums2[j])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n    \ndef super_fun(nums1,nums2):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    sum=0\n    for i in range(len(nums1)):\n        sum=sum+nums1[i]\n    return sum\n    \ndef pal_str(st):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    st=st.lower()\n    return st==st[::-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = list(nums1)\n    l2 = list(nums2)\n    l3 = []\n    for i in range(len(l1)):\n        l3.append(l1[i]-l2[i])\n    return l3\nprint(sub_list([4,5,6],[1,2,3]))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]-nums2[i]\n    return nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"Invalid input\")\n    elif n < 0:\n        raise ValueError(\"Input cannot be negative\")\n    else:\n        digits = list(map(int, str(n)))\n        count = 0\n        for i in range(len(digits)):\n            if digits[i] <= digits[i]:\n                count += 1\n            else:\n                break\n        return count == len(digits)\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n//10\n    if count <= n:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n <= int(str(n)[::-1])\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    count_dict = {}\n    for i in n:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    for key in count_dict:\n        if count_dict[key] > key:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    i = 0\n    while n>0:\n        if n%10 == 0:\n            i+=1\n        n //= 10\n    if i <= 1:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if int(s[i])<=int(s[i]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    count = 0\n    while n>0:\n        count += 1\n        n = n//10\n    return count <= 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Python program to demonstrate working of \n    # count_frequency() \n    # using if else \n    # l = [] \n    # no_of_digits = int(input(\"Enter number of digits in the integer: \"))\n    \n    # for i in range(0,no_of_digits): \n    #     element = int(input(\"Enter integer: \")) \n    #     l.append(element) \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n!=0:\n        count+=1\n        n = n//10\n    if count <= count:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=str(n)\n    d=list(s)\n    s1=len(s)\n    for i in range(s1):\n        count = d.count(d[i])\n        if count > 1:\n            return False\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag=1\n    for item in list:\n        if item!= element:\n            flag=0\n            break\n    return flag\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    elif len(list) == 2:\n        if list[0] == element and list[1] == element:\n            return True\n        else:\n            return False\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        elif list[1] == element:\n            return check_element(list[2:],element)\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #To implement a check element function\n    #a) Explain the function\n    #b) Write code\n    index = 0\n    if(list == None):\n        return False\n    if(element == None):\n        return False\n    for i in range(len(list)):\n        if(list[i]!= element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    try:\n        i = 0\n        for i in list:\n            if i == element:\n                print(f'{element} is in the list')\n                return True\n        print(f'{element} is not in the list')\n        return False\n    except:\n        print('Please enter an integer')\n        return False\ndef binary_search(list,element):\n    '''\n    Write a function that takes in a list and element and returns the index of the first occurrence of the element in the list, or the index of the last occurrence of the element in the list, or -1 if the element is not in the list.\n    '''\n    lo = 0\n    hi = len(list) - 1\n    index = -1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if element == list[mid]:\n            index = mid\n            break\n        else:\n            if element < list[mid]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n    return index\ndef factorial(num):\n    '''\n    Write a function that computes the factorial of a given number. The function should have one parameter, n, the integer value to compute the factorial of. The function should return the factorial of n.\n    '''\n    try:\n        x = 1\n        while num > 0:\n            x *= num\n            num -= 1\n        return x\n    except:\n        print('Please enter a number')\n        return 'Error'\ndef fibonacci(num):\n    '''\n    Write a function that computes the nth Fibonacci number. The function should have one parameter, n, the integer value to compute the Fibonacci number of. The function should return the Fibonacci number of n.\n    '''\n    try:\n        if num < 0:\n            return 'Error'\n        else:\n            if num == 1 or num == 0:\n                return 1\n            else:\n                return fibonacci(num - 1) + fibonacci(num - 2)\n    except:\n        print('Please enter a positive integer')\n        return 'Error'\ndef reverse(word):\n    '''\n    Write a function that takes in a word and returns the word in reverse order. For example, if the word is \"computer\" it should return \"computer\" as the result.\n    '''\n    if type(word)!= str:\n        return 'Error'\n    else:\n        x = len(word) - 1\n        reverse = ''\n        while x >= 0:\n            reverse += word[x]\n            x -= 1\n        return reverse\ndef is_sorted(list):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    try:\n        if type(list)!= list:\n            return 'Error'\n        else:\n            for i in range(len(list) - 1):\n                if list[i] > list[i + 1]:\n                    return False\n            return True\n    except:\n        print('Please enter a list')\n        return False\ndef is_prime(num):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False otherwise.\n    '''\n    try:\n        if type(num)!= int:\n            return 'Error'\n        elif num < 0:\n            return False\n        elif num == 0:\n            return False\n        elif num == 1:\n            return False\n        else:\n            div = 2\n            while div <= (num // div):\n                if (num % div) == 0:\n                    return False\n                div += 1\n            return True\n    except:\n        print('Please enter a number')\n        return False\ndef is_pythagorean(num1, num2):\n    '''\n    Write a function that takes in two numbers and returns True if the sum of the squares of each of the numbers is equal to the square of the sum of the numbers, and False otherwise.\n    '''\n    try:\n        if type(num1)!= int or type(num2)!= int:\n            return 'Error'\n        elif num1 < 0 or num2 < 0:\n            return False\n        elif num1 == 0 or num2 == 0:\n            return False\n        elif num1 == num2:\n            return False\n        else:\n            a = num1**2\n            b = num2**2\n            c = (num1 + num2)**2\n            return a == b == c\n    except:\n        print('Please enter integers')\n        return False\ndef multiplication(list):\n    '''\n    Write a function that takes in a list and returns a list that contains each number in the list multiplied by each other. For example, if the input is [2, 5, 6] the output should be [2*2, 5*5, 6*6].\n    '''\n    try:\n        if type(list)!= list:\n            return 'Error'\n        else:\n            return [num * num for num in list]\n    except:\n        print('Please enter a list')\n        return 'Error'\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns True if the word is a palindrome, and False otherwise. A palindrome is a word that is spelled the same forwards and backwards, such as \"racecar\".\n    '''\n    try:\n        if type(word)!= str:\n            return 'Error'\n        else:\n            if word == word[::-1]:\n                return True\n            else:\n                return False\n    except:\n        print('Please enter a word')\n        return False\ndef find_smallest_odd_number(list):\n    '''\n    Write a function that takes in a list of positive numbers and returns the smallest odd number in the list.\n    '''\n    try:\n        if type(list)!= list:\n            return 'Error'\n        else:\n            x = list[0]\n            for i in range(len(list)):\n                if list[i] % 2 == 1 and list[i] < x:\n                    x = list[i]\n            return x\n    except:\n        print('Please enter a list')\n        return 'Error'\ndef is_valid_port(port):\n    '''\n    Write a function that takes in a port number and returns True if the port number is between 0 and 65535, and False otherwise.\n    '''\n    try:\n        if type(port)!= int:\n            return 'Error'\n        elif port < 0 or port > 65535:\n            return False\n        else:\n            return True\n    except:\n        print('Please enter a positive integer')\n        return False\ndef is_prime_string(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a prime word, and False otherwise. A prime word is a word that has only prime letters. For example, the word \"computer\" is a prime word because all letters except e are prime letters. The word \"safe\" is not a prime word because the letters b, d, and r are not prime letters.\n    '''\n    try:\n        if type(string)!= str:\n            return 'Error'\n        elif string.lower() == string:\n            return 'Error'\n        else:\n            for i in range(len(string)):\n                if string[i]!= 'a' and string[i]!= 'e' and string[i]!= 'i' and string[i]!= 'o' and string[i]!= 'u':\n                    return False\n            return True\n    except:\n        print('Please enter a string')\n        return False\ndef is_prime_numbers(list):\n    '''\n    Write a function that takes in a list of positive integers and returns True if the list is a prime list, and False otherwise. A prime list is a list of integers that contains only prime numbers. For example, the list [1, 2, 3, 4, 5, 6, 7, 8, 9] is a prime list because all of its numbers are prime. The list [1, 2, 4, 6, 8] is not a prime list because its first two numbers are not prime.\n    '''\n    try:\n        if type(list)!= list:\n            return 'Error'\n        else:\n            for i in range(len(list)):\n                if type(list[i])!= int:\n                    return 'Error'\n            for i in range(len(list)):\n                if is_prime_strin"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        return all(elem == element for elem in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if list.count(element) == len(list) else False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == [] or list == None:\n        return False\n    if len(list) == 1 and list[0] == element:\n        return True\n    if list[0] == element:\n        return True\n    if check_element(list[1:],element):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2,}b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b)*b'\n    string_match = re.search(pattern, text)\n    print(string_match)\n    return string_match\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)<3 or len(text)>=5:\n        return False\n    else:\n        if text.count('a')==2 or text.count('a')==3:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # method1\n    # res = re.search(r\"\\ba+b\", text)\n    # print(res)\n    # print(type(res))\n    \n    # method2\n    res = re.search(r\"(ab)*\", text)\n    print(res)\n    print(type(res))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"a.{2,3}b\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"a.b\", text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = r'a{2,3}b'\n    return re.search(regex, text)\n    \n    \n    \ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    regex = r'a{2}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    regex = r'a{2}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentyfive(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentysix(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = r'a{4}b'\n    return re.search(regex, text)\n    \n    \ndef text_match_twentyseven(text):\n    '''\n    Write "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_regex = re.compile(r\"a(b(?:b|B)?)\")\n    if re.search(text_regex, text):\n        print(\"It is a palindrome\")\n    else:\n        print(\"It is not a palindrome\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return 'ab' in text\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return(re.search(r'a(b+|b+)',text))\n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    global_max = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1000000\n    x = a.copy()\n    for i in range(k):\n        for j in range(n):\n            x[j] = x[j] + a[j]\n    for i in range(n):\n        max_sum = max(max_sum, x[i])\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Input: a = [-2, 1, -3, 4, -1, 2, 1, -5, 4], n = 8, k = 2\n    # Output: 6\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # base case\n    if n < k:\n        return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array = []\n    temp = 0\n    max_sum = 0\n    for i in range(n):\n        temp += a[i]\n        if temp >= k:\n            sub_array.append(temp)\n            temp = 0\n        if len(sub_array) > max_sum:\n            max_sum = len(sub_array)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return a[0]\n    if n==2:\n        return max(a[0], a[1])\n    \n    max_sum = 0\n    k_sum = 0\n    \n    temp = a[0]\n    i = 1\n    while i<=n:\n        k_sum = k_sum + a[i-1]\n        if k_sum==k:\n            max_sum = max(max_sum, k_sum)\n        k_sum = max(0, k_sum)\n        i+=1\n    \n    temp = a[n-1]\n    i = n-2\n    while i>=0:\n        k_sum = k_sum + a[i+1]\n        if k_sum==k:\n            max_sum = max(max_sum, k_sum)\n        k_sum = max(0, k_sum)\n        i-=1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -999999999999\n    current_sum = 0\n    for i in range(n): \n        current_sum = 0\n        for j in range(i, i + k): \n            current_sum += a[j] \n        max_sum = max(max_sum, current_sum) \n    return max_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    current_index = 0\n    for i in range(n): \n        curr_sum = curr_sum + a[i]\n        if (curr_sum == 0): \n            max_sum = max_sum + a[i]\n        if (curr_sum == 0 and current_index < i): \n            max_sum = max_sum + a[i]\n        if (curr_sum == 0 and current_index > i): \n            max_sum = max(max_sum, a[i] * k)\n        if (curr_sum!= 0 and current_index < i): \n            max_sum = max(max_sum, (k * curr_sum) + a[i])\n        if (curr_sum!= 0 and current_index > i): \n            max_sum = max(max_sum, (curr_sum * k) + a[i])\n        if (max_sum >= k): \n            return max_sum\n    return max_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n<=0: return 0\n    if k==0 or k>n: return 0\n    \n    if k>=n:\n        return max(a)\n        \n    max_sum=0\n    for i in range(n):\n        for j in range(1,k):\n            if i+j>=n:\n                break\n            if a[i]==0:\n                continue\n            else:\n                temp=a[i]+a[i+j]\n                if temp>max_sum:\n                    max_sum=temp\n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def find_max_sum_sub_array_repeated(arr,n,k): \n        # max_ending_here will be used to store the maximum \n        # sum of a subarray that has been repeated k times \n        max_ending_here = 0\n        # Initialize the starting sum as 0 \n        max_so_far = 0\n        # Initialize the starting point of the subarray \n        # as the first element of the array \n        starting_point = 0\n        for i in range(k): \n            max_ending_here += arr[i] \n        # Traverse the array from starting point to ending point \n        for i in range(k,n): \n            max_ending_here += arr[i] - arr[i - k] \n            max_so_far = max(max_so_far, max_ending_here) \n            max_ending_here = max_so_far - arr[i - k] \n        return max_so_far \n      \n      \n    if __name__ == '__main__': \n        arr = list(map(int, input().strip().split()))\n        n = len(arr) \n        k = int(input())\n        result = find_max_sum_sub_array_repeated(arr, n, k) \n        print(result) \n    \n    \n    '''\n    Write a program to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. \n    Input Format\n    An integer array containing only 0s and 1s.\n    Output Format\n    An integer representing the maximum sum of a contiguous subarray.\n    Constraints\n    1 <= len(arr) <= 10^4\n    1 <= arr[i] <= 1\n    Example 1\n    Input:\n    arr = [1, -2, 2, 3, 3, 4, 5, 0, 5, 1, 0]\n    Output: 9\n    Explanation:\n       The subarray arr[3] and arr[4] are both 1's, so they both have sum 9.\n    '''\n    \n    def max_sub_array_sum(arr,n):\n        # find the size of the array\n        size = len(arr)\n        # initialize the maximum so far\n        max_so_far = -2**32\n        max_ending_here = 0\n        # Traverse the array\n        for i in range(size):\n            max_ending_here += arr[i]\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n      \n      \n    if __name__ == '__main__': \n        arr = list(map(int, input().strip().split()))\n        result = max_sub_array_sum(arr, len(arr)) \n        print(result) \n    \n    \n    '''\n    Write a program to count number of sub-strings with given number of repetitions in a given string.\n    Input Format\n    A string S of length N\n    An integer K\n    Output Format\n    Integer N\n    Constraints\n    0 <= K <= N\n    Example 1\n    Input:\n    S = \"abcdabcdabcd\"\n    K = 2\n    Output: 14\n    Explanation:\n    The number of repetitions for each of the given string \"abcdabcdabcd\" are:\n    a = 2\n    b = 2\n    c = 2\n    d = 2\n    ab = 2\n    ac = 2\n    ad = 2\n    bc = 2\n    cd = 2\n    abcd = 2\n    abcdab = 2\n    abcdabcd = 2\n    The number of strings in the given string are: 14\n    Example 2\n    Input:\n    S = \"abcdabcdabcd\"\n    K = 3\n    Output: 10\n    Explanation:\n    The number of repetitions for each of the given string \"abcdabcdabcd\" are:\n    a = 3\n    b = 3\n    c = 3\n    d = 3\n    ab = 3\n    ac = 3\n    ad = 3\n    bc = 3\n    cd = 3\n    abcd = 3\n    abcdab = 3\n    abcdabcd = 3\n    The number of strings in the given string are: 10\n    Example 3\n    Input:\n    S = \"abcdabcdabcd\"\n    K = 4\n    Output: 13\n    Explanation:\n    The number of repetitions for each of the given string \"abcdabcdabcd\" are:\n    a = 4\n    b = 4\n    c = 4\n    d = 4\n    ab = 4\n    ac = 4\n    ad = 4\n    bc = 4\n    cd = 4\n    abcd = 4\n    abcdab = 4\n    abcdabcd = 4\n    The number of strings in the given string are: 13\n    '''\n    def count_sub_strings(s,n): \n        if n == 1: \n            return n \n        dp = [[0 for i in range(n)] for j in range(n)]\n        def count(s,n,k): \n            if n <= 0: \n                return 0\n            if k == 1: \n                return 1\n            if dp[n-1][k-1]!= 0: \n                return dp[n-1][k-1] \n            max_count = 0 \n            for i in range(n): \n                if s[i] == s[n-k+i]: \n                    max_count = max(max_count,count(s,i,k-1)+1) \n            dp[n-1][k-1] = max_count \n            return max_count \n        return count(s,n,n) \n      \n      \n    if __name__ == '__main__': \n        s = input()\n        k = int(input())\n        result = count_sub_strings(s,len(s)) \n        print(result) \n    \n    \n    '''\n    Write a program to find the largest number in a list.\n    Input Format\n    An array of integers \n    Constraints\n    0 < n <= 10^6 \n    Output Format\n    An integer denoting the largest number \n    '''\n    def largest_num(arr): \n        '''\n        largest_num is a helper function to find the largest number in a list\n        '''\n        if len(arr) == 1: \n            return arr[0] \n        else: \n            # compare all numbers in the array \n            for i in range(len(arr)): \n                # loop through all the numbers in the array \n                for j in range(i + 1, len(arr)): \n                    # compare the current number with the number in the middle \n                    if arr[i] > arr[j]: \n                        # swap the numbers if the current number is greater than the middle number\n                        temp = arr[i] \n                        arr[i] = arr[j] \n                        arr[j] = temp \n            return arr[len(arr) - 1]\n      \n      \n    if __name__ == '__main__': \n        arr = list(map(int, input().strip().split()))\n        result = largest_num(arr) \n        print(result) \n    \n    \n    '''\n    Write a program to find the longest word in a given string.\n    Input Format\n    A single line containing a string S.\n    Constraints\n    0 < len(S) < 1000\n    Output Format\n    A single line containing the longest word in the given string.\n    '''\n    def max_len(arr): \n        '''\n        max_len is a helper function to find the longest word in a string\n        '''\n        max_len = 0\n        for i in range(len(arr)): \n            if len(arr[i]) > max_len: \n                max_len = le"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**2\n    return sum\ndef square_Diff(n):\n    '''\n    Write a python function takes in an integer n and returns the difference between the sum of squares and the square of the sum.\n    '''\n    return square_Sum(n) - (n**2)\ndef square_Ratio(n):\n    '''\n    Write a python function takes in an integer n and returns the ratio of the difference between the sum of squares and the square of the sum and the sum of squares.\n    '''\n    return square_Diff(n) / square_Sum(n)\ndef max_num(x, y):\n    '''\n    Write a python function takes in two integers and returns the maximum of the two numbers.\n    '''\n    if x > y:\n        return x\n    else:\n        return y\ndef min_num(x, y):\n    '''\n    Write a python function takes in two integers and returns the minimum of the two numbers.\n    '''\n    if x < y:\n        return x\n    else:\n        return y\ndef lcm(x, y):\n    '''\n    Write a python function takes in two integers and returns the least common multiple of the two numbers.\n    '''\n    lcm= x*y//max_num(x,y)\n    return lcm\ndef gcd(x, y):\n    '''\n    Write a python function takes in two integers and returns the greatest common divisor of the two numbers.\n    '''\n    return max_num(x, y)//min_num(x, y)\ndef reverse_Str(x):\n    '''\n    Write a python function takes in a string and returns the reverse of the string.\n    '''\n    rev_str= ''\n    for i in range(len(x)):\n        rev_str = rev_str + x[i]\n    return rev_str\ndef reverse_number(x):\n    '''\n    Write a python function takes in a number and returns the reverse of the number.\n    '''\n    if x < 0:\n        return reverse_Str(str(x)[1:])\n    else:\n        return reverse_Str(str(x))\ndef is_even(x):\n    '''\n    Write a python function takes in a number and returns true if the number is even, otherwise false.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\ndef is_odd(x):\n    '''\n    Write a python function takes in a number and returns true if the number is odd, otherwise false.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False\ndef is_prime(x):\n    '''\n    Write a python function takes in a number and returns true if the number is prime, otherwise false.\n    '''\n    flag = 0\n    for i in range(2,int(math.sqrt(x))):\n        if x%i==0:\n            flag = 1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\ndef is_palindrome(x):\n    '''\n    Write a python function takes in a string and returns True if the string is a palindrome, otherwise false.\n    '''\n    str1 = ''\n    rev_str = reverse_Str(str1)\n    if rev_str == str1:\n        return True\n    else:\n        return False\ndef sum_of_digits(n):\n    '''\n    Write a python function takes in a number and returns the sum of the digits of the number.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+n%10\n        n=n//10\n    return sum\ndef is_palindrome(x):\n    '''\n    Write a python function takes in a string and returns True if the string is a palindrome, otherwise false.\n    '''\n    str1 = ''\n    rev_str = reverse_Str(str1)\n    if rev_str == str1:\n        return True\n    else:\n        return False\ndef sum_of_even_digits(n):\n    '''\n    Write a python function takes in a number and returns the sum of the even digits of the number.\n    '''\n    sum=0\n    while n!=0:\n        if n%10%2==0:\n            sum=sum+n%10\n        n=n//10\n    return sum\ndef sum_of_odd_digits(n):\n    '''\n    Write a python function takes in a number and returns the sum of the odd digits of the number.\n    '''\n    sum=0\n    while n!=0:\n        if n%10%2!=0:\n            sum=sum+n%10\n        n=n//10\n    return sum\ndef sum_of_greater_number(lst):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are greater than their neighbor.\n    '''\n    i=1\n    while i<len(lst):\n        if lst[i]>lst[i-1]:\n            return sum_of_greater_number(lst[i+1:])+lst[i-1]\n        i=i+1\n    return sum(lst)\ndef sum_of_tuple(tup):\n    '''\n    Write a python function takes in a tuple of numbers and returns the sum of the numbers.\n    '''\n    sum=0\n    while tup!=0:\n        sum=sum+tup%10\n        tup=tup//10\n    return sum\ndef sum_of_list(lst):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers.\n    '''\n    sum=0\n    while lst!=0:\n        sum=sum+lst%10\n        lst=lst//10\n    return sum\ndef sum_of_list_with_range(lst,n,m):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are between the specified numbers.\n    '''\n    sum=0\n    while n<=m:\n        if n>lst:\n            sum=sum+n\n        n=n+1\n    return sum\ndef sum_of_list_with_range_2(lst,n,m):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are between the specified numbers.\n    '''\n    if m>n:\n        return 0\n    while n<=m:\n        if lst[n]%2==0:\n            return lst[n]+sum_of_list_with_range(lst,n+1,m)\n        n=n+1\n    return sum_of_list(lst)\ndef sum_of_list_with_range_3(lst,n,m):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are between the specified numbers.\n    '''\n    if m>n:\n        return 0\n    while n<=m:\n        if lst[n]%2==0:\n            return lst[n]+sum_of_list_with_range(lst,n+1,m)\n        n=n+1\n    return sum_of_list(lst)\ndef sum_of_list_with_range_4(lst,n,m):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are between the specified numbers.\n    '''\n    if m>n:\n        return 0\n    while n<=m:\n        if lst[n]%2==0:\n            return lst[n]+sum_of_list_with_range_4(lst,n+1,m)\n        n=n+1\n    return sum_of_list(lst)\ndef sum_of_list_with_range_5(lst,n,m):\n    '''\n    Write a python function takes in a list of numbers and returns the sum of the numbers which are between the specified numbers.\n    '''\n    if m>n:\n        return 0\n   "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum+i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum += i**2\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    x=0\n    i=0\n    while(x<n):\n        i+=1\n        x=x+i*i\n    print(x)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    '''\n    To do this we can write a for loop using range() and incrementing the value of i\n    to compute the sum of squares.\n    '''\n    \n    total_sum = 0\n    \n    for i in range(1,n+1):\n        if i%2==0:\n            total_sum += i*i\n        \n    return total_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sq_sum = 0\n    for i in range(1, n+1, 2):\n        even_sq_sum += i*i\n    return even_sq_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int((n * (n + 1) * (2 * n + 1))/6)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2 == 0:\n            s = s + i**2\n    return s\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    x = []\n    for i in list1:\n        x.append(len(i))\n    return max(x)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        max_list.append(len(list1[i]))\n    return max(max_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > count:\n            count = len(list1[i])\n    return count\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == None:\n        return None\n    else:\n        max_length = 0\n        for i in range(len(list1)):\n            if max_length < len(list1[i]):\n                max_length = len(list1[i])\n        return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    print(max_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    i = 0\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                \n    return dp[n][k]\n    \n    \ndef count_no_of_ways2(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    dp[0][0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                \n    return dp[n][k]\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    \n    if n == 2:\n        return k * k\n    \n    if k == 1:\n        return n * n\n    \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # from collections import defaultdict\n    # def paint_count(n,k,d):\n    #     if n == 0:\n    #         return 1\n    #     else:\n    #         if d[n] > -1:\n    #             return d[n]\n    #         else:\n    #             d[n] = paint_count(n-1,k,d) + paint_count(n-2,k,d) + paint_count(n-3,k,d)\n    #             return d[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[[0]*k for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(k+1):\n        for j in range(n+1):\n            if i == 0:\n                ways[i][j] = 1\n            elif j == 0:\n                ways[i][j] = 0\n            elif i == j:\n                ways[i][j] = 1\n            else:\n                for k in range(1,i+1):\n                    ways[i][j] += ways[k-1][j-1]\n                ways[i][j] += ways[i-1][j]\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n==1):\n        if(k==0):\n            return 1\n        return 0\n    if(k==0):\n        return 0\n    if(n<2):\n        return 0\n    if(k==1):\n        return 2**(n-2)\n    res=count_no_of_ways(n-1, k)\n    res+=count_no_of_ways(n-2, k)\n    return res\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #arr = [[0 for x in range(k)] for x in range(n)] \n    #arr[0][0]=1\n    #for i in range(n): \n        #for j in range(k): \n            #arr[i][j] = arr[i-1][j] + arr[i-1][j+1] \n    \n    #return arr[n-1][k-1]\n    \n    # O(n*k)\n    \n    #count = 0\n    #for i in range(k):\n        #count += (n-1)\n        #count -= (n-1)\n        #count *= 2\n    #return count\n    \n    #O(n*k)\n    #n = 3\n    #k = 2\n    #dp = [[0 for x in range(k)] for x in range(n)]\n    \n    #dp[0][0] = 1\n    #for i in range(1, n):\n        #dp[i][0] = 1\n        \n    #for j in range(1, k):\n        #dp[0][j] = dp[0][j-1] + 1\n        \n    #for i in range(1, n):\n        #for j in range(1, k):\n            #dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            \n    #return dp[n-1][k-1]\n    \n    #O(n*k)\n    \n    #dp = [[0 for x in range(k)] for x in range(n)]\n    \n    #for i in range(1, n):\n        #for j in range(1, k):\n            #dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            \n    #return dp[n-1][k-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count(n, k, memo):\n        if n == 1:\n            return k\n        if n == 2:\n            if k == 1:\n                return 2\n            if k == 2:\n                return 4\n        if (n, k) in memo:\n            return memo[(n, k)]\n        else:\n            memo[(n, k)] = count(n-1, k, memo) + count(n-1, k-1, memo) + count(n-1, k-2, memo)\n            return memo[(n, k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n    \n    return f[2]\n        \n        \n    \n    \n    \n    \ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, color, arr):\n        #arr = [0]*k\n        cnt = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                arr[color] += 1\n            for j in range(i):\n                cnt += arr[color]\n            arr[color] = 0\n        return cnt \n        \n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    \n    f = [0]*k\n    #f[0] = ways(n, k, 0, f)\n    #f[1] = ways(n, k, 1, f)\n    f[2] = ways(n, k, 2, f)\n    #f[3] = ways(n, k, 3, f)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n==0:\n        return 0\n    else:\n        return int(m/n)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    \ndef addition(n1,n2):  \n    '''\n    Write a python function to add two numbers.\n    '''\n    return n1+n2\n    \ndef sub(n1,n2):  \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return n1-n2\n    \ndef div(n1,n2):  \n    '''\n    Write a python function to divide two numbers.\n    '''\n    return n1/n2\n    \ndef multi(n1,n2):  \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return n1*n2\n    \ndef mod(n1,n2):  \n    '''\n    Write a python function to find remainder of two numbers.\n    '''\n    return n1%n2\n    \ndef exp(x,y):\n    '''\n    Write a python function to find the value of x to the y power.\n    '''\n    return x**y\n    \ndef sqr(x):\n    '''\n    Write a python function to square a number.\n    '''\n    return x*x\n    \ndef divi(x,y):\n    '''\n    Write a python function to find the division of x by y.\n    '''\n    return x/y\n    \ndef pwr(x,y):\n    '''\n    Write a python function to find the value of x to the y power.\n    '''\n    return x**y\n    \ndef flr(x,y):\n    '''\n    Write a python function to find the floor value of x to the y power.\n    '''\n    return x//y\n    \ndef remd(x,y):\n    '''\n    Write a python function to find the remainder of x by y.\n    '''\n    return x%y\n    \ndef gcd(x,y):\n    '''\n    Write a python function to find the greatest common divisor of x by y.\n    '''\n    return x%y\n    \ndef lgcd(x,y):\n    '''\n    Write a python function to find the least common divisor of x by y.\n    '''\n    return x//y\n    \ndef llgcd(x,y):\n    '''\n    Write a python function to find the least common multiple of x by y.\n    '''\n    return x*y//lgcd(y,x)\n    \ndef ca(x,y):\n    '''\n    Write a python function to find the coefficients of linear equation of the form ax+by=c.\n    '''\n    return (x*y,x,y,x*y-x)\n    \ndef main():\n    '''\n    Write a main function to test the above functions.\n    '''\n    print(find(10,5))\n    print(addition(10,5))\n    print(sub(10,5))\n    print(div(10,5))\n    print(multi(10,5))\n    print(mod(10,5))\n    print(exp(2,3))\n    print(sqr(5))\n    print(divi(10,5))\n    print(pwr(2,3))\n    print(flr(10,3))\n    print(remd(10,3))\n    print(gcd(10,5))\n    print(lgcd(10,5))\n    print(llgcd(10,5))\n    print(ca(10,5))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # if (n==0 or m==0): \n    #     return 0\n    # return (n//m)\n    return int(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    if n==0:\n        return -1\n    if n<0 and m<0:\n        return -1\n    if n<0:\n        n=m-n\n        return -n\n    if m<0:\n        m=n-m\n        return m\n    else:\n        return n//m\n        \nprint(find(-3,1))\nprint(find(2.5,10))\nprint(find(2.5,5))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        temp = n\n        n = m\n        m = temp\n    a = n\n    b = m\n    ans = 0\n    while a < b:\n        a += 1\n        ans += 1\n    return ans\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n // m\n    y = n % m\n    if y == 0:\n        return x\n    else:\n        return x+1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)-math.sqrt(w**2+h**2)\ndef find_area(s1,s2,s3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (s1*s2)/2\ndef triangle_type(s1,s2,s3):\n    '''\n    Write a function to determine whether a triangle is a scalene, isosceles or equilateral triangle.\n    '''\n    if s1 == s2 and s1 == s3:\n        return 'isosceles'\n    elif s1 == s2 or s1 == s3 or s2 == s3:\n        return 'isosceles'\n    else:\n        return'scalene'\ndef polygon_area(sides):\n    '''\n    Write a function to calculate the area of a regular polygon.\n    '''\n    x1 = 0\n    x2 = sides\n    x3 = sides\n    x4 = 0\n    x5 = 0\n    return (sides*(sides-1)*(x2**2)+(sides-1)*(x3**2))/2\ndef square_area(n):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return n*n\ndef longest_side(n):\n    '''\n    Write a function to calculate the length of a side of a square.\n    '''\n    return math.sqrt(n**2)\ndef x_square(n):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*n\ndef rectangle_area(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef square_area_reduced(n):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*n\ndef rectangle_area_reduced_2(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_3(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_4(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_5(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_6(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_7(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_8(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_9(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_10(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_11(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_12(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_13(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_14(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_15(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_16(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_17(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_18(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_19(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_20(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_21(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_22(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_23(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_24(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_25(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_26(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_27(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_28(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_29(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_30(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_31(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_32(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_33(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_34(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_35(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_36(n,m):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return n*m\ndef rectangle_area_reduced_37(n,m):\n    '''\n    Write a function t"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.radians(180)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return (s,math.sqrt(w**2 - h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w=float(w)\n    h=float(h)\n    \n    b=math.sqrt((h**2)-(w**2))\n    a=(b/h)\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_1 = w\n    side_2 = h\n    side_3 = math.sqrt(((side_2 ** 2) - (side_1 ** 2)))\n    return side_3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_triangle=math.sqrt((w**2)+((h*0.5)**2))\n    print('side of the triangle',side_triangle)\n    return(side_triangle)\ndef slope_y_given_x(x1,y1,x2,y2):\n    '''\n    Write a function that takes in x1,y1,x2,y2 and returns the slope of the line that crosses the x1 and y1 points\n    '''\n    slope=(y2-y1)/(x2-x1)\n    print('slope of the line',slope)\n    return(slope)\ndef distance_between_points(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two x and y coordinates of two points and returns the distance between the two points\n    '''\n    dist=math.sqrt(((x1-x2)**2)+((y1-y2)**2))\n    print('distance between two points',dist)\n    return(dist)\ndef perimeter_triangle(w,h):\n    '''\n    Write a function that takes in the width and height of a triangle and returns its perimeter\n    '''\n    perimeter=w+h+math.sqrt((w**2)+((h/2)**2))\n    print('perimeter of the triangle',perimeter)\n    return(perimeter)\ndef perimeter_of_a_right_angle(w,h):\n    '''\n    Write a function that takes in the width and height of a right angle triangle and returns its perimeter\n    '''\n    perimeter=w+h+w*h*0.5\n    print('perimeter of the right angle triangle',perimeter)\n    return(perimeter)\ndef area_of_triangle(w,h):\n    '''\n    Write a function that takes in the width and height of a triangle and returns its area\n    '''\n    area=math.sqrt((w**2)*(h**2)-(w**2)+((h/2)**2))\n    print('area of the triangle',area)\n    return(area)\ndef area_of_a_right_angle(w,h):\n    '''\n    Write a function that takes in the width and height of a right angle triangle and returns its area\n    '''\n    area=w*h*0.5\n    print('area of the right angle triangle',area)\n    return(area)\ndef area_of_rectangle(w,h):\n    '''\n    Write a function that takes in the width and height of a rectangle and returns its area\n    '''\n    area=w*h\n    print('area of the rectangle',area)\n    return(area)\ndef area_of_a_right_rectangle(w,h):\n    '''\n    Write a function that takes in the width and height of a right rectangle and returns its area\n    '''\n    area=w*h*0.5\n    print('area of the right rectangle',area)\n    return(area)\ndef area_of_circle(radius):\n    '''\n    Write a function that takes in the radius of a circle and returns its area\n    '''\n    area=math.pi*(radius**2)\n    print('area of the circle',area)\n    return(area)\ndef area_of_a_right_circle(radius):\n    '''\n    Write a function that takes in the radius of a right circle and returns its area\n    '''\n    area=math.pi*(radius**2)*0.5\n    print('area of the right circle',area)\n    return(area)\ndef area_of_sphere(radius):\n    '''\n    Write a function that takes in the radius of a sphere and returns its area\n    '''\n    area=4*math.pi*(radius**2)\n    print('area of the sphere',area)\n    return(area)\ndef area_of_a_right_sphere(radius):\n    '''\n    Write a function that takes in the radius of a right sphere and returns its area\n    '''\n    area=4*math.pi*(radius**2)*0.5\n    print('area of the right sphere',area)\n    return(area)\ndef area_of_cylinder(radius,height):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns its area\n    '''\n    area=math.pi*(radius**2)*height\n    print('area of the cylinder',area)\n    return(area)\ndef area_of_a_right_cylinder(radius,height):\n    '''\n    Write a function that takes in the radius and height of a right cylinder and returns its area\n    '''\n    area=math.pi*(radius**2)*(height+2*radius)\n    print('area of the right cylinder',area)\n    return(area)\ndef volume_of_sphere(radius):\n    '''\n    Write a function that takes in the radius of a sphere and returns its volume\n    '''\n    volume=4/3*math.pi*(radius**3)\n    print('volume of the sphere',volume)\n    return(volume)\ndef volume_of_a_right_sphere(radius):\n    '''\n    Write a function that takes in the radius of a right sphere and returns its volume\n    '''\n    volume=4/3*math.pi*(radius**3)*0.5\n    print('volume of the right sphere',volume)\n    return(volume)\ndef volume_of_cylinder(radius,height):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns its volume\n    '''\n    volume=math.pi*(radius**2)*height\n    print('volume of the cylinder',volume)\n    return(volume)\ndef volume_of_a_right_cylinder(radius,height):\n    '''\n    Write a function that takes in the radius and height of a right cylinder and returns its volume\n    '''\n    volume=math.pi*(radius**2)*(height+2*radius)\n    print('volume of the right cylinder',volume)\n    return(volume)\ndef area_of_square(length):\n    '''\n    Write a function that takes in the length of a square and returns its area\n    '''\n    area=length*length\n    print('area of the square',area)\n    return(area)\ndef area_of_a_right_square(length):\n    '''\n    Write a function that takes in the length of a right square and returns its area\n    '''\n    area=length*length*0.5\n    print('area of the right square',area)\n    return(area)\ndef area_of_triangle(w,h):\n    '''\n    Write a function that takes in the width and height of a triangle and returns its area\n    '''\n    area=0.5*(w*h)\n    print('area of the triangle',area)\n    return(area)\ndef area_of_a_right_triangle(w,h):\n    '''\n    Write a function that takes in the width and height of a right triangle and returns its area\n    '''\n    area=0.5*(w*h)\n    print('area of the right triangle',area)\n    return(area)\ndef area_of_rectangle(w,h):\n    '''\n    Write a function that takes in the width and height of a rectangle and returns its area\n    '''\n    area=w*h\n    print('area of the rectangle',area)\n    return(area)\ndef area_of_a_right_rectangle(w,h):\n    '''\n    Write a function that takes in the width and height of a right rectangle and returns its area\n    '''\n    area=w*h*0.5\n    print('area of the right rectangle',area)\n    return(area)\ndef area_of_circle(radius):\n    '''\n    Write a function that takes in the radius of a circle and returns its area\n    '''\n    area=math.pi*(radius**2)\n    print('area of the circle',area)\n    return(area)\ndef area_of_a_right_circle(radius):\n    '''\n    Write a function that takes in the radius of a right circle and returns its area\n    '''\n    area=math.pi*(radius**2)*0.5\n    print('area of the right circle',area)\n    return(area"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a = float(input(\"Enter the first side: \"))\n    side_b = float(input(\"Enter the second side: \"))\n    side_c = math.sqrt(side_a**2 + side_b**2)\n    print(\"The third side is \", side_c)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (((w*w)/2)+(h*h)/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    a = []\n    for i in range(0,len(listval)):\n        if type(listval[i])==int:\n            a.append(listval[i])\n        else:\n            a = a + listval[i]\n    max = 0\n    for i in range(0,len(a)):\n        if a[i]>max:\n            max = a[i]\n    print(\"max val is: \",max)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_int = max(listval)\n    max_float = max(float(x) for x in listval)\n    return max(max_int, max_float)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n        else:\n            if i > max_val:\n                max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(range(1, number + 1))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(number / 2) + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n    \n    \ndef palindromic_substring(string):\n    '''\n    Write a function that checks whether a given string is a palindrome.\n    A palindrome is a string that is written the same forward and backward.\n    '''\n    left = 0\n    right = len(string) - 1\n    \n    while left < right:\n        if string[left]!= string[right]:\n            return False\n        left += 1\n        right -= 1\n        \n    return True\n    \n    \ndef first_non_repeating_character(string):\n    '''\n    Write a function that takes a string and returns the first character that is not repeated anywhere in the string.\n    '''\n    check = {}\n    \n    for char in string:\n        if char in check:\n            check[char] += 1\n        else:\n            check[char] = 1\n            \n    for char in string:\n        if check[char] == 1:\n            return char\n    \n    return None\n    \n    \ndef two_sum(array, target_sum):\n    '''\n    Write a function that takes a non-empty array of distinct integers and an integer representing a target sum, \n    and returns an array of two integers from the array that sum to the target sum.\n    If no two integers in the array sum to the target sum, the function should return an empty array.\n    '''\n    hash = {}\n    for num in array:\n        hash[num] = hash.get(num, 0) + 1\n    \n    for num in array:\n        complement = target_sum - num\n        if complement in hash and hash[complement] > 0:\n            return [num, complement]\n        else:\n            hash[num] -= 1\n    \n    return []\n    \n    \ndef find_missing_number(array):\n    '''\n    Write a function that takes an array of consecutive integers and returns the missing number\n    in the array.\n    \n    Assume that you cannot access an array of length zero.\n    '''\n    for i in range(len(array)):\n        if array[i]!= i:\n            return i\n    return array[-1] + 1\n    \n    \ndef two_sum_reverse(array, target_sum):\n    '''\n    Write a function that takes a non-empty array of distinct integers and an integer representing a target sum, \n    and returns an array of two integers from the array that sum to the target sum.\n    If no two integers in the array sum to the target sum, the function should return an empty array.\n    '''\n    hash = {}\n    for num in array:\n        hash[num] = hash.get(num, 0) + 1\n        \n    for num in array:\n        complement = target_sum - num\n        if complement in hash and hash[complement] > 0:\n            return [num, complement]\n        else:\n            hash[num] -= 1\n    return []\n    \n    \ndef all_anagrams(string):\n    '''\n    Write a function that takes a string and an array of strings, and returns an array of all anagrams of the string.\n    \n    The order of the output array should match the order in which the anagrams are found.\n    '''\n    hash = {}\n    \n    for char in string:\n        hash[char] = hash.get(char, 0) + 1\n    \n    anagrams = []\n    for word in array:\n        temp = ''\n        for char in word:\n            temp += hash[char]\n            hash[char] = temp\n        if temp == string:\n            anagrams.append(word)\n    \n    return anagrams\n    \n    \ndef check_valid_parenthesis(string):\n    '''\n    Write a function that takes a string and returns True if the string is a valid parenthesis string,\n    and False otherwise. A parenthesis string is valid if and only if it has the exact form (round brackets).\n    '''\n    left = 0\n    right = 0\n    \n    for char in string:\n        if char == '(':\n            left += 1\n        if char == ')':\n            right += 1\n            \n    return left == right\n    \n    \ndef even_fibonacci(n):\n    '''\n    Write a function that returns a list of the first n even fibonacci numbers.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    fib = [1, 2]\n    \n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n        \n    return fib[:n]\n    \n    \ndef get_median(array):\n    '''\n    Write a function that returns the median (middle value) of an array of integers.\n    '''\n    array = sorted(array)\n    \n    if len(array) % 2 == 0:\n        return (array[len(array) // 2] + array[len(array) // 2 - 1]) / 2\n    else:\n        return array[len(array) // 2]\n        \n    \ndef amicable_numbers(n):\n    '''\n    Write a function that takes a positive integer n, and returns a list of all of the amicable numbers under n.\n    A number a and b are called amicable if a == b and b = a + b.\n    '''\n    amicable = []\n    \n    for i in range(1, n):\n        if sum(amicable) == n:\n            return amicable\n        if i in amicable:\n            continue\n        \n        for num in amicable:\n            if num + i == n and num!= i:\n                amicable.append(i)\n                break\n    \n    return amicable\n    \n    \ndef is_prime(number):\n    '''\n    Write a function that takes a non-negative integer n and returns True if n is prime and False otherwise.\n    '''\n    if number <= 1:\n        return False\n        \n    for i in range(2, number):\n        if number % i == 0:\n            return False\n            \n    return True\n    \n    \ndef three_sum(array):\n    '''\n    Write a function that takes an array of distinct integers and finds all unique triplets in the array that sum to zero.\n    The function should return an array of triplets.\n    '''\n    result = []\n    array = sorted(array)\n    \n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        \n        while left < right:\n            summation = array[i] + array[left] + array[right]\n            if summation == 0:\n                result.append((array[i], array[left], array[right]))\n                left += 1\n                right -= 1\n            elif summation < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return result\n    \n    \ndef two_sum(array, target_sum):\n    '''\n    Write a function that takes an array of integers and an integer representing a target sum and returns the indices of the two numbers such that they add up to the target sum.\n    Return the indices in an array, ordered in ascending order. If no two numbers sum to the target sum, then return an empty array.\n    '''\n    result = []\n    array = sorted(array)\n    \n    for i in range(len(array)):\n        left = i + 1\n        right = len(array) - 1\n        \n        while left < right:\n            summation = array[i] + array[left] + array[right]\n            if summation == target_sum:\n                result.append((array[i], array[left], array[right]))\n                left += 1\n                right -= 1\n            elif summation < target_sum:\n                left += 1\n            else:\n                right -= 1\n                \n    return result\n    \n    \ndef three_sum_two_sums(array, target_sum):\n    '''\n    Write a function that takes an array of integers and an integer representing a target sum and returns the indices of the three numbers such that they add up to the target sum.\n    Return the indices in an array, ordered in ascending order. If no three numbers sum to the target sum, then return an empty array.\n    '''"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 1:\n        return 1\n    if number == 2:\n        return 2\n    elif number > 2:\n        sum = 2\n        for i in range(2, number):\n            if number % i == 0:\n                sum += i\n        return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 1\n    for i in range(1,number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            sum += divisor\n        divisor += 1\n    return sum\n    \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divs += i\n    return divs\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number+1) if number % i == 0)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def mergeSort(arr, l, r): \n        if l < r: \n            m = (l+(r-1))//2\n            mergeSort(arr, l, m) \n            mergeSort(arr, m+1, r) \n            merge(arr, l, m, r) \n        return arr \n    def merge(arr, l, m, r): \n        n1 = m - l + 1\n        n2 = r - m \n        L = [0]*n1 \n        R = [0]*n2 \n        for i in range(0, n1): \n            L[i] = arr[l + i] \n        for j in range(0, n2): \n            R[j] = arr[m + 1 + j] \n        i = 0     \n        j = 0\n        k = l \n        while i < n1 and j < n2 : \n            if L[i] <= R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n            k += 1\n        while i < n1: \n            arr[k] = L[i] \n            i += 1\n            k += 1\n        while j < n2: \n            arr[k] = R[j] \n            j += 1\n            k += 1\n    def partition(arr, l, r): \n        x = arr[l]\n        j = l \n        for i in range(l + 1, r + 1): \n            if arr[i] < x: \n                j += 1\n                arr[i], arr[j] = arr[j], arr[i] \n        arr[l], arr[j] = arr[j], arr[l] \n        return j \n    def count_inversions(arr, l, r): \n        if l < r: \n            m = partition(arr, l, r) \n            count_inversions(arr, l, m - 1) \n            count_inversions(arr, m + 1, r) \n    count_inversions(arr, l, r) \n    return arr\n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_Inv_Count_Helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Implement the below function and run this file\n    arr.sort()\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                res+=1\n    return res\n    \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    i = 0\n    while i < len(arr)-1:\n        j = i + 1\n        while j < len(arr):\n            if arr[i] > arr[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def get_Inv_Count_Recursive(arr, low, high): \n        if low >= high: \n            return 0\n        mid = low + ((high - low) >> 1)\n        inv_count = (get_Inv_Count_Recursive(arr, low, mid) +\n                    get_Inv_Count_Recursive(arr, mid + 1, high) +\n                    get_Inversion_count_helper(arr, low, mid, high))\n        return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # A temporary array to store all the elements of  \n    # array in sorted order. \n    sorted_arr = [0] * n \n    res = 0\n    for i in range(0, n): \n        res += i * sorted_arr[i] \n        sorted_arr[i] = arr[i] \n    sorted_arr[n - 1] = arr[n - 1] \n    \n    print(\"Before sort\", arr)\n    print(\"sorted_arr\", sorted_arr)\n    print(\"res\", res)\n    for i in range(n): \n        print(sorted_arr[i])\n        if sorted_arr[i]!= arr[i]: \n            res += 1\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    return count_inversions(arr, 0, len(arr)-1)\n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr) \n    count = 0\n    for i in range(0,n-1): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1: return []\n    if not isinstance(list1, list): return list1\n    output = []\n    for item in list1:\n        if isinstance(item, list):\n            output.extend(flatten_list(item))\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # list1 = [[[1, 2], 3], 4]\n    flatten = []\n    for lst in list1:\n        for sub_list in lst:\n            for item in sub_list:\n                flatten.append(item)\n    return flatten\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2 = list2 + flatten_list(i)\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == type([]):\n        list1 = flatten_list(list1)\n    else:\n        return(list1)\n    \n    return(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    list2 = []\n    for i in list1:\n        if isinstance(i, list):\n            for j in flatten_list(i):\n                list2.append(j)\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 ==[]:\n        return list1\n    if type(list1[0]) == list:\n        flatten_list(list1[0])\n        flatten_list(list1[1:])\n        return list1\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sub_list in list1:\n        if type(sub_list) is not list:\n            new_list.append(sub_list)\n        else:\n            new_list.extend(flatten_list(sub_list))\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_s = 0\n    sums = 0\n    for st, val in stdata:\n        sums += val\n        if sums > max_s:\n            max_s = sums\n    return max_s\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for i in stdata:\n        for j in i:\n            if j > max_val:\n                max_val = j\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    for st in stdata:\n        curr_sum = 0\n        for item in st:\n            curr_sum += item\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    _max = -999\n    _d = defaultdict(list)\n    for ele in stdata:\n        _d[ele[1]].append(ele[0])\n    for key,val in _d.items():\n        _max = max(_max,sum(val))\n    return _max\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # {1: 1, 3: 2}\n    num_dict = defaultdict(int)\n    \n    for k, v in stdata:\n        num_dict[k] += v\n        \n    m = max(num_dict.values())\n    return m\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    keys = stdata[0][0]\n    \n    aggregates = defaultdict(int)\n    \n    for key in keys:\n        for values in stdata:\n            aggregates[key] += values[1][key]\n    \n    aggregates = {k: v for k, v in sorted(aggregates.items(), key=lambda item: item[1], reverse=True)}\n    \n    return max(aggregates.keys(), key=(lambda k: aggregates[k]))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # your code here\n    d={}\n    for i in stdata:\n        if i[0] in d.keys():\n            d[i[0]]+=i[1]\n        else:\n            d[i[0]]=i[1]\n    key=max(d, key=d.get)\n    return (key,d[key])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if stdata == None:\n        return None\n    max_a = 0\n    stdata = sorted(stdata, key=lambda x: x[0])\n    max_a = stdata[0][1]\n    for i in range(1,len(stdata)):\n        max_a = max(max_a,stdata[i][1])\n    return max_a\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    def max_aggregate_helper(lst,n):\n        if len(lst)==0:\n            return 0\n        else:\n            if(n==1):\n                return max(lst)\n            else:\n                lst1=lst[0:n]\n                lst2=lst[n:n*2]\n                lst3=lst[n*2:]\n                return max(max_aggregate(lst1),max_aggregate(lst2),max_aggregate(lst3))\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    l=len(stdata)\n    max_sum_1=max_aggregate(stdata,1)\n    max_sum_2=max_aggregate(stdata,2)\n    max_sum_3=max_aggregate(stdata,3)\n    max_sum_4=max_aggregate(stdata,4)\n    max_sum_5=max_aggregate(stdata,5)\n    max_sum_6=max_aggregate(stdata,6)\n    max_sum_7=max_aggregate(stdata,7)\n    max_sum_8=max_aggregate(stdata,8)\n    max_sum_9=max_aggregate(stdata,9)\n    max_sum_10=max_aggregate(stdata,10)\n    max_sum_11=max_aggregate(stdata,11)\n    max_sum_12=max_aggregate(stdata,12)\n    max_sum_13=max_aggregate(stdata,13)\n    max_sum_14=max_aggregate(stdata,14)\n    max_sum_15=max_aggregate(stdata,15)\n    max_sum_16=max_aggregate(stdata,16)\n    max_sum_17=max_aggregate(stdata,17)\n    max_sum_18=max_aggregate(stdata,18)\n    max_sum_19=max_aggregate(stdata,19)\n    max_sum_20=max_aggregate(stdata,20)\n    max_sum_21=max_aggregate(stdata,21)\n    max_sum_22=max_aggregate(stdata,22)\n    max_sum_23=max_aggregate(stdata,23)\n    max_sum_24=max_aggregate(stdata,24)\n    max_sum_25=max_aggregate(stdata,25)\n    max_sum_26=max_aggregate(stdata,26)\n    max_sum_27=max_aggregate(stdata,27)\n    max_sum_28=max_aggregate(stdata,28)\n    max_sum_29=max_aggregate(stdata,29)\n    max_sum_30=max_aggregate(stdata,30)\n    max_sum_31=max_aggregate(stdata,31)\n    max_sum_32=max_aggregate(stdata,32)\n    max_sum_33=max_aggregate(stdata,33)\n    max_sum_34=max_aggregate(stdata,34)\n    max_sum_35=max_aggregate(stdata,35)\n    max_sum_36=max_aggregate(stdata,36)\n    max_sum_37=max_aggregate(stdata,37)\n    max_sum_38=max_aggregate(stdata,38)\n    max_sum_39=max_aggregate(stdata,39)\n    max_sum_40=max_aggregate(stdata,40)\n    max_sum_41=max_aggregate(stdata,41)\n    max_sum_42=max_aggregate(stdata,42)\n    max_sum_43=max_aggregate(stdata,43)\n    max_sum_44=max_aggregate(stdata,44)\n    max_sum_45=max_aggregate(stdata,45)\n    max_sum_46=max_aggregate(stdata,46)\n    max_sum_47=max_aggregate(stdata,47)\n    max_sum_48=max_aggregate(stdata,48)\n    max_sum_49=max_aggregate(stdata,49)\n    max_sum_50=max_aggregate(stdata,50)\n    max_sum_51=max_aggregate(stdata,51)\n    max_sum_52=max_aggregate(stdata,52)\n    max_sum_53=max_aggregate(stdata,53)\n    max_sum_54=max_aggregate(stdata,54)\n    max_sum_55=max_aggregate(stdata,55)\n    max_sum_56=max_aggregate(stdata,56)\n    max_sum_57=max_aggregate(stdata,57)\n    max_sum_58=max_aggregate(stdata,58)\n    max_sum_59=max_aggregate(stdata,59)\n    max_sum_60=max_aggregate(stdata,60)\n    max_sum_61=max_aggregate(stdata,61)\n    max_sum_62=max_aggregate(stdata,62)\n    max_sum_63=max_aggregate(stdata,63)\n    max_sum_64=max_aggregate(stdata,64)\n    max_sum_65=max_aggregate(stdata,65)\n    max_sum_66=max_aggregate(stdata,66)\n    max_sum_67=max_aggregate(stdata,67)\n    max_sum_68=max_aggregate(stdata,68)\n    max_sum_69=max_aggregate(stdata,69)\n    max_sum_70=max_aggregate(stdata,70)\n    max_sum_71=max_aggregate(stdata,71)\n    max_sum_72=max_aggregate(stdata,72)\n    max_sum_73=max_aggregate(stdata,73)\n    max_sum_74=max_aggregate(stdata,74)\n    max_sum_75=max_aggregate(stdata,75)\n    max_sum_76=max_aggregate(stdata,76)\n    max_sum_77=max_aggregate(stdata,77)\n    max_sum_78=max_aggregate(stdata,78)\n    max_sum_79=max_aggregate(stdata,79)\n    max_sum_80=max_aggregate(stdata,80)\n    max_sum_81=max_aggregate(stdata,81)\n    max_sum_82=max_aggregate(stdata,82)\n    max_sum_83=max_aggregate(stdata,83)\n    max_sum_84=max_aggregate(stdata,84)\n    max_sum_85=max_aggregate(stdata,85)\n    max_sum_86=max_aggregate(stdata,86)\n    max_sum_87=max_aggregate(stdata,87)\n    max_sum_88=max_aggregate(stdata,88)\n    max_sum_89=max_aggregate(stdata,89)\n    max_sum_90=max_aggregate(stdata,90)\n    max_sum_91=max_aggregate(stdata,91)\n    max_sum_92=max_aggregate(stdata,92)\n    max_sum_93=max_aggregate(stdata,93)\n    max_sum_94=max_aggregate(stdata,94)\n    max_sum_95=max_aggregate(stdata,95)\n    max_sum_96=max_aggregate(stdata,96)\n    max_sum_97=max_aggregate(stdata,97)\n    ma"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dict_max = {}\n    for i in stdata:\n        if i[1] in dict_max:\n            dict_max[i[1]] += i[0]\n        else:\n            dict_max[i[1]] = i[0]\n    return (max(dict_max.values()), dict_max)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # sol = 0\n    # for i in range(2**n):\n    #     s = 0\n    #     for j in range(n):\n    #         s += (i>>j)&1\n    #     if s==(2**n)-1:\n    #         sol+=1\n    # return sol\n    s = 0\n    for i in range(2**n):\n        s += (i>>n)&1\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i = 0\n    count = 0\n    while i <= n:\n        count = count + 2**i\n        i = i + 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    b = 0\n    c = 0\n    sum_n = 0\n    sum_n_half = 0\n    sum_n_minus_half = 0\n    if n == 1:\n        return 1\n    for i in range(1, (2*n)):\n        b = i%2\n        sum_n += b\n        sum_n_half += b\n        sum_n_minus_half -= b\n        if sum_n_half == sum_n_minus_half:\n            c += 1\n        else:\n            return c\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    return bin(2**n - 1)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def is_binary_number(num):\n        return isinstance(num, int) and (num & (num - 1) == 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # recursive\n    def helper(n, count): \n        # base condition \n        if n <= 1: \n            return count \n        \n        # recursive step \n        count += 1\n        return helper(n-1, count)\n    \n    # base condition \n    if n == 1: \n        return 0\n    \n    # recursive step \n    count = 0\n    return helper(n-1, count)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def _count_binary_seq(n):\n        \n        def _get_xor_sum(b1,b2):\n            return (b1^b2)\n        \n        def _get_xor_sum_seq(n,val):\n            if n == 1:\n                return val\n            else:\n                return _get_xor_sum_seq(n-1,val) + val\n        \n        def _get_xor_sum_seq_list(n,val):\n            if n == 1:\n                return [val]\n            else:\n                return _get_xor_sum_seq_list(n-1,val) + [val]\n        \n        def _get_xor_sum_list(n,val_list):\n            if n == 1:\n                return val_list\n            else:\n                return _get_xor_sum_list(n-1,val_list) + val_list\n        \n        def _get_seq_list(n,val):\n            if n == 1:\n                return [[val]]\n            else:\n                return [[val]] + _get_seq_list(n-1,val)\n        \n        def _get_seq_list_str(n,val):\n            if n == 1:\n                return val\n            else:\n                return _get_seq_list_str(n-1,val) + val\n        \n        def _get_seq_list_str_list(n,val):\n            if n == 1:\n                return val\n            else:\n                return _get_seq_list_str_list(n-1,val) + [val]\n        \n        def _get_seq_list_str_list_list(n,val):\n            if n == 1:\n                return [[val]]\n            else:\n                return [[val]] + _get_seq_list_str_list_list(n-1,val)\n        \n        def _get_binary_seq_list(n):\n            if n == 1:\n                return ['0','1']\n            else:\n                return ['0','1'] + _get_binary_seq_list(n-1)\n        \n        binary_seq_list = _get_binary_seq_list(n)\n        return (sum([_get_xor_sum_seq(i,binary_seq_list[i]) for i in range(len(binary_seq_list))]))\n    \n    return _count_binary_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    seq_count = 0\n    \n    for i in range(1<<(2*n-1)):\n        if sum_binary_seq(i,n) == sum_binary_seq(i^(2*n-1),n):\n            seq_count += 1\n    \n    return seq_count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = n * (1 << n)\n    res = 0\n    while a >= 1:\n        res += 1\n        if bin(a).count('1') == bin(a).count('0'):\n            a -= 1\n        else:\n            a -= 2\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    x = 0\n    m = n\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    n = 0\n    for k,v in d.items():\n        n = max(n,dict_depth(v))\n    return 1 + n\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for key in d.keys():\n        if type(d[key]) == dict:\n            return 1 + dict_depth(d[key])\n        else:\n            return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        return max([dict_depth(i) for i in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(x) for x in d.values()])\n    elif isinstance(d, list):\n        return 1 + max([dict_depth(x) for x in d])\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d.keys():\n        if isinstance(d[k], dict):\n            depth = max(depth, dict_depth(d[k]))\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    from collections import deque\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(lambda k: dict_depth(d[k]) if k in d else 0, d)) + 1 if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    n = 0\n    for i in d.keys():\n        n = max(n, 1 + dict_depth(d[i]))\n    return n\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index > len(arr)) :\n        print(\"Index out of bound\")\n        return\n    if(index == len(arr)-1) :\n        return arr[-1]\n    # if the index is not even then we need to reverse the array\n    if(index % 2 == 0) :\n        arr.reverse()\n    # find the element in the list after number of rotations\n    for i in range(ranges) :\n        for j in range(len(arr)) :\n            if(j + index >= len(arr)) :\n                print(\"Index out of bound\")\n                return\n            if arr[j+index] == index :\n                print(arr[j+index])\n                return\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)-ranges+1):\n        if arr[i] >= ranges :\n            return i\n    return -1\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # r1 = int(input(\"Enter rotation number 1: \"))\n    # r2 = int(input(\"Enter rotation number 2: \"))\n    # r3 = int(input(\"Enter rotation number 3: \"))\n    # r4 = int(input(\"Enter rotation number 4: \"))\n    # r5 = int(input(\"Enter rotation number 5: \"))\n    # r6 = int(input(\"Enter rotation number 6: \"))\n    # r7 = int(input(\"Enter rotation number 7: \"))\n    # r8 = int(input(\"Enter rotation number 8: \"))\n    # r9 = int(input(\"Enter rotation number 9: \"))\n    # r10 = int(input(\"Enter rotation number 10: \"))\n    # r11 = int(input(\"Enter rotation number 11: \"))\n    # r12 = int(input(\"Enter rotation number 12: \"))\n    # r13 = int(input(\"Enter rotation number 13: \"))\n    # r14 = int(input(\"Enter rotation number 14: \"))\n    # r15 = int(input(\"Enter rotation number 15: \"))\n    # r16 = int(input(\"Enter rotation number 16: \"))\n    # r17 = int(input(\"Enter rotation number 17: \"))\n    # r18 = int(input(\"Enter rotation number 18: \"))\n    # r19 = int(input(\"Enter rotation number 19: \"))\n    # r20 = int(input(\"Enter rotation number 20: \"))\n    # r21 = int(input(\"Enter rotation number 21: \"))\n    # r22 = int(input(\"Enter rotation number 22: \"))\n    # r23 = int(input(\"Enter rotation number 23: \"))\n    # r24 = int(input(\"Enter rotation number 24: \"))\n    # r25 = int(input(\"Enter rotation number 25: \"))\n    # r26 = int(input(\"Enter rotation number 26: \"))\n    # r27 = int(input(\"Enter rotation number 27: \"))\n    # r28 = int(input(\"Enter rotation number 28: \"))\n    # r29 = int(input(\"Enter rotation number 29: \"))\n    # r30 = int(input(\"Enter rotation number 30: \"))\n    # r31 = int(input(\"Enter rotation number 31: \"))\n    # r32 = int(input(\"Enter rotation number 32: \"))\n    # r33 = int(input(\"Enter rotation number 33: \"))\n    # r34 = int(input(\"Enter rotation number 34: \"))\n    # r35 = int(input(\"Enter rotation number 35: \"))\n    # r36 = int(input(\"Enter rotation number 36: \"))\n    # r37 = int(input(\"Enter rotation number 37: \"))\n    # r38 = int(input(\"Enter rotation number 38: \"))\n    # r39 = int(input(\"Enter rotation number 39: \"))\n    # r40 = int(input(\"Enter rotation number 40: \"))\n    # r41 = int(input(\"Enter rotation number 41: \"))\n    # r42 = int(input(\"Enter rotation number 42: \"))\n    # r43 = int(input(\"Enter rotation number 43: \"))\n    # r44 = int(input(\"Enter rotation number 44: \"))\n    # r45 = int(input(\"Enter rotation number 45: \"))\n    # r46 = int(input(\"Enter rotation number 46: \"))\n    # r47 = int(input(\"Enter rotation number 47: \"))\n    # r48 = int(input(\"Enter rotation number 48: \"))\n    # r49 = int(input(\"Enter rotation number 49: \"))\n    # r50 = int(input(\"Enter rotation number 50: \"))\n    # r51 = int(input(\"Enter rotation number 51: \"))\n    # r52 = int(input(\"Enter rotation number 52: \"))\n    # r53 = int(input(\"Enter rotation number 53: \"))\n    # r54 = int(input(\"Enter rotation number 54: \"))\n    # r55 = int(input(\"Enter rotation number 55: \"))\n    # r56 = int(input(\"Enter rotation number 56: \"))\n    # r57 = int(input(\"Enter rotation number 57: \"))\n    # r58 = int(input(\"Enter rotation number 58: \"))\n    # r59 = int(input(\"Enter rotation number 59: \"))\n    # r60 = int(input(\"Enter rotation number 60: \"))\n    # r61 = int(input(\"Enter rotation number 61: \"))\n    # r62 = int(input(\"Enter rotation number 62: \"))\n    # r63 = int(input(\"Enter rotation number 63: \"))\n    # r64 = int(input(\"Enter rotation number 64: \"))\n    # r65 = int(input(\"Enter rotation number 65: \"))\n    # r66 = int(input(\"Enter rotation number 66: \"))\n    # r67 = int(input(\"Enter rotation number 67: \"))\n    # r68 = int(input(\"Enter rotation number 68: \"))\n    # r69 = int(input(\"Enter rotation number 69: \"))\n    # r70 = int(input(\"Enter rotation number 70: \"))\n    # r71 = int(input(\"Enter rotation number 71: \"))\n    # r72 = int(input(\"Enter rotation number 72: \"))\n    # r73 = int(input(\"Enter rotation number 73: \"))\n    # r74 = int(input(\"Enter rotation number 74: \"))\n    # r75 = int(input(\"Enter rotation number 75: \"))\n    # r76 = int(input(\"Enter rotation number 76: \"))\n    # r77 = int(input(\"Enter rotation number 77: \"))\n    # r78 = int(input(\"Enter rotation number 78: \"))\n    # r79 = int(input(\"Enter rotation number 79: \"))\n    # r80 = int(input(\"Enter rotation number 80: \"))\n    # r81 = int(input(\"Enter rotation number 81: \"))\n    # r82 = int(input(\"Enter rotation number 82: \"))\n    # r83 = int(input(\"Enter rotation number 83: \"))\n    # r84 = int(input(\"Enter rotation number 84: \"))\n    # r85 = int(input(\"Enter rotation number 85: \"))\n    # r86 = int(input(\"Enter rotation number 86: \"))\n    # r87 = int(input(\"Enter rotation number 87: \"))\n    # r88 = int(input(\"Enter rotation number 88: \"))\n    # r89 = int(input(\"Enter rotation number 89: \"))\n    # r90 = int(input(\"Enter rotation number 90: \"))\n    # r91 = int(input(\"Enter rotation number 91: \"))\n    # r92 = int(input(\"Enter rotation number 92: \"))\n    # r93 = int(input(\"Enter rotation number 93: \"))\n    # r94 = int(input(\"Enter rotation number 94: \"))\n    # r95 = int(input(\"Enter rotation number 95: \"))\n    # r96 = int(input(\"Enter rotation number 96: \"))\n    # r97 = int(input(\"Enter rotation number 97: \"))\n    # r98 = int(input(\"Enter rotation number 98: \"))\n    # r99 = int(input(\"Enter rotation number 99: \"))\n    # r100 = int(input(\"Enter rotation number 100: \"))\n    #\n    # \n    #\n    # r1 = int(input(\"Enter rotation number 1: \"))\n    # r2 = int(input(\"Enter rotation number 2: \"))\n    # r3 = int(input(\"Enter rotation number 3: \"))\n    # r4 = int(input(\"Enter rotation number 4: \"))\n    # r5 = int(input(\"Enter rotation number 5: \"))\n    # r6 = int(input(\"Enter rotation number 6: \"))\n    # r7 = int(input(\"Enter rotation number 7: \"))\n    # r8 = int(input(\"Enter rotation number 8: \"))\n    # r9 = int(input(\"Enter rotation number 9: \"))\n    # r10 = int(input(\"Enter rotation number 10: \"))\n    # r11 = int(input(\"Enter rotation number 11: \"))\n    # r12 = int(input(\"Enter rotation number 12: \"))\n    # r13 = int(input(\"Enter rotation number 13: \"))\n    # r14 = int(input(\"Enter rotation number 14: \"))\n    # r15 = int(input(\"Enter rotation number 15: \"))\n    # r16 = int(input(\"Enter rotation number 16: \"))\n    # r17 = int(input(\"Enter rotation number 17: \"))\n    # r1"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x_sum = 0\n    y_sum = 0\n    for i in range(len(arr)) :\n        x_sum += arr[i][0] * ranges[i][0] * rotations[index][0]\n        y_sum += arr[i][1] * ranges[i][1] * rotations[index][1]\n    if (x_sum + y_sum) % 2 == 0 :\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        raise Exception(\"Invalid index\")\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    flag = 0\n    for i in range(len(arr)) :\n        if arr[i] in ranges and flag == 0 :\n            if i == index :\n                return arr[i]\n            else :\n                flag = 1\n    if flag == 0 :\n        for i in range(len(arr)) :\n            if arr[i] in rotations :\n                if i == index :\n                    return arr[i]\n                else :\n                    continue\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if(arr[i]<index) :\n            arr[i]=index\n            return i\n    for i in range(len(arr)) :\n        arr[i]=arr[i]*(rotations)\n    for i in range(len(arr)) :\n        if(arr[i]<index) :\n            arr[i]=index\n            return i\n    for i in range(len(arr)) :\n        arr[i]=arr[i]*(rotations)\n    for i in range(len(arr)) :\n        if(arr[i]<index) :\n            arr[i]=index\n            return i\n    \n        \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    first = 0\n    last = ranges-1\n    mid = (first+last)//2\n    if(index>=ranges) :\n        print(\"Incorrect Index\")\n        return -1\n    if (rotations < 0) :\n        print(\"Index is not possible\")\n        return -1\n    elif(index == first or index == last) :\n        return arr[index]\n    elif(rotations == 0 and index < (ranges//2)) :\n        return arr[index]\n    elif(rotations > 0 and index > (ranges//2)) :\n        return find_Element(arr,ranges,rotations-1,index)\n    elif(rotations == 0 and index > (ranges//2)) :\n        return arr[last]\n    else :\n        while(first<last) :\n            mid = (first+last)//2\n            if(arr[mid] == index) :\n                return arr[mid]\n            elif(arr[mid]<index) :\n                first = mid+1\n            else :\n                last = mid-1\n        return find_Element(arr,ranges,rotations-1,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == 0 : \n        return arr[ranges[index]]\n    else : \n        index = index - 1\n        return find_Element(arr,ranges,rotations,index) + find_Element(arr,ranges,rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index) :\n        arr = rotate_left(arr,rotations)\n    for i in range(len(arr)) :\n        if arr[i] == r :\n            break\n    return i\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[0] == 'p':\n            p.append(i)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == \"p\" or word[0] == \"P\":\n            return word,words.pop(words.index(word))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p='p'\n    word=[]\n    for i in words:\n        if i.startswith(p):\n            word.append(i)\n    return word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w.startswith('p'):\n            return w, words.index(w)\n    return None, None\ndef contains(words, w):\n    '''\n    Write a function to return true if a word is contained in a sentence.\n    '''\n    for i in range(len(words)):\n        if w == words[i]:\n            return True\n    return False\ndef start_with(words, w):\n    '''\n    Write a function to return a list of words in a sentence that start with a letter 'w'.\n    '''\n    start = []\n    for w in words:\n        if w.startswith(w):\n            start.append(w)\n    return start\ndef length(words):\n    '''\n    Write a function to return the length of a sentence.\n    '''\n    return len(words)\ndef end_withp(words):\n    '''\n    Write a function to return the last word in a sentence ending with letter 'p'.\n    '''\n    w = None\n    for w in words:\n        if w.endswith('p'):\n            return w\n    return None\ndef end_with(words, w):\n    '''\n    Write a function to return a list of words in a sentence ending with letter 'w'.\n    '''\n    end = []\n    for w in words:\n        if w.endswith(w):\n            end.append(w)\n    return end\ndef reverse(words):\n    '''\n    Write a function to reverse a sentence.\n    '''\n    words = words[::-1]\n    return words\ndef contain(words, w):\n    '''\n    Write a function to return True if a word is contained in a sentence.\n    '''\n    for i in range(len(words)):\n        if w == words[i]:\n            return True\n    return False\ndef remove_punctuation(words):\n    '''\n    Write a function to remove all punctuation in a sentence.\n    '''\n    pattern = re.compile('[.?!,;:()]')\n    new_list = []\n    for w in words:\n        new_list.append(pattern.sub('', w))\n    return new_list\ndef remove_stop(words, w):\n    '''\n    Write a function to return a list of words in a sentence that don't contain 'w'\n    '''\n    stop = []\n    for i in range(len(words)):\n        if w not in words[i]:\n            stop.append(words[i])\n    return stop\ndef count_words(words, w):\n    '''\n    Write a function to count the number of 'w' in a sentence.\n    '''\n    count = 0\n    for i in range(len(words)):\n        if w == words[i]:\n            count += 1\n    return count\ndef check(words, w):\n    '''\n    Write a function to return true if a word 'w' occurs more than once in a sentence.\n    '''\n    for i in range(len(words)):\n        if w == words[i]:\n            return True\n    return False\ndef check_if_numeric(word):\n    '''\n    Write a function to check if a word is numeric.\n    '''\n    return word.isdigit()\ndef remove_numbers(words):\n    '''\n    Write a function to remove all numbers from a sentence.\n    '''\n    pattern = re.compile('\\d+')\n    new_list = []\n    for w in words:\n        new_list.append(pattern.sub('', w))\n    return new_list\ndef sort_words(words, reverse):\n    '''\n    Write a function to sort a list of words.\n    '''\n    words = words.sort()\n    return words\ndef sort_numbers(words, reverse):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    words = words.sort(reverse = reverse)\n    return words\ndef sort_punctuation(words, reverse):\n    '''\n    Write a function to sort a list of words by the length of the words.\n    '''\n    words = words.sort(key = len, reverse = reverse)\n    return words\ndef sort_length_punctuation(words, reverse):\n    '''\n    Write a function to sort a list of words by the length of the words,\n    then by the number of punctuation marks after the word.\n    '''\n    words = words.sort(key = length_punctuation, reverse = reverse)\n    return words\ndef length_punctuation(words):\n    '''\n    Write a function to count the number of punctuation marks in a word.\n    '''\n    count = 0\n    for w in words:\n        for c in w:\n            if c in punctuation:\n                count += 1\n    return count\ndef length_words(words):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    count = 0\n    for i in range(len(words)):\n        count += 1\n    return count\ndef capital_words(words):\n    '''\n    Write a function to return the list of capital words in a sentence.\n    '''\n    pattern = re.compile('[A-Z]')\n    capital = []\n    for w in words:\n        if pattern.match(w):\n            capital.append(w)\n    return capital\ndef capital_sentences(sentences):\n    '''\n    Write a function to return the list of capital sentences in a sentence.\n    '''\n    pattern = re.compile('[A-Z]')\n    capital = []\n    for i in range(len(sentences)):\n        w = sentences[i].split('.')\n        for i in range(len(w)):\n            if pattern.match(w[i]):\n                capital.append(w[i])\n    return capital\ndef number_sentences(sentences):\n    '''\n    Write a function to return the list of sentences which contain at least one number.\n    '''\n    pattern = re.compile('\\d')\n    number = []\n    for i in range(len(sentences)):\n        w = sentences[i].split('.')\n        for i in range(len(w)):\n            if pattern.match(w[i]):\n                number.append(w[i])\n    return number\ndef number_words(words):\n    '''\n    Write a function to return the number of words which contain at least one number.\n    '''\n    pattern = re.compile('\\d')\n    number = 0\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            number += 1\n    return number\ndef uppercase(sentences):\n    '''\n    Write a function to return a list of sentences which contain at least one uppercase letter.\n    '''\n    pattern = re.compile('[A-Z]')\n    upper = []\n    for i in range(len(sentences)):\n        w = sentences[i].split('.')\n        for i in range(len(w)):\n            if pattern.match(w[i]):\n                upper.append(w[i])\n    return upper\ndef uppercase_words(words):\n    '''\n    Write a function to return a list of words which contain at least one uppercase letter.\n    '''\n    pattern = re.compile('[A-Z]')\n    upper = []\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            upper.append(words[i])\n    return upper\ndef unique_words(words):\n    '''\n    Write a function to return a list of words which contain only unique letters.\n    '''\n    pattern = re.compile('[A-Z]')\n    unique = []\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            if words[i] not in unique:\n                unique.append(words[i])\n    return unique\ndef unique_letters(words):\n    '''\n    Write a function to return a list of words which contain only unique letters.\n    '''\n    pattern = re.compile('[A-Z]')\n    unique = []\n    for i in range(len(words)):\n        if pattern"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for i in words:\n        if i[0] == 'p':\n            words_list.append(i)\n    return words_list[0], words_list[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p =[]\n    for word in words:\n        if word.startswith('p'):\n            p.append(word)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    letter = 'p'\n    found = False\n    for word in words:\n        if word[0] == letter:\n            found = True\n            break\n    return (word[1], word[2]) if found else False\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"p\"):\n            return words[i], words[i+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return words[i:i+2]\ndef find_indices_p(words):\n    '''\n    Write a function to return all the indices of a list of words where first word starts with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return words[i:]\ndef palindrome_p(words):\n    '''\n    Write a function to check if the words in a list are palindrome or not.\n    '''\n    for i in range(len(words)):\n        if words[i][::-1]==words[i]:\n            return 'True'\ndef find_greatest_char_and_index_p(words):\n    '''\n    Write a function to return the greatest character and its index in a string.\n    '''\n    max_value=None\n    max_index=None\n    for i in range(len(words)):\n        if words[i]>max_value:\n            max_value=words[i]\n            max_index=i\n    return max_value,max_index\ndef reverse_words_p(words):\n    '''\n    Write a function to return the reverse of the list of words.\n    '''\n    rev_words=words[::-1]\n    return rev_words\ndef contains_any_of_the_words_p(words,words2):\n    '''\n    Write a function to check if any word is present in the list of words.\n    '''\n    for i in words2:\n        if i in words:\n            return 'True'\n    return 'False'\ndef sort_all_words_p(words):\n    '''\n    Write a function to sort the words alphabetically and then print it.\n    '''\n    words.sort()\n    return words\ndef check_for_even_and_odd_values_p(words):\n    '''\n    Write a function to check if all the values in a list are even or odd.\n    '''\n    even_count=0\n    odd_count=0\n    for i in words:\n        if i%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    if even_count==len(words) and odd_count==0:\n        return 'Even'\n    elif even_count==0 and odd_count==len(words):\n        return 'Odd'\n    else:\n        return 'False'\ndef check_for_even_and_odd_values_p(words):\n    '''\n    Write a function to check if all the values in a list are even or odd.\n    '''\n    even_count=0\n    odd_count=0\n    for i in words:\n        if i%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    if even_count==len(words) and odd_count==0:\n        return 'Even'\n    elif even_count==0 and odd_count==len(words):\n        return 'Odd'\n    else:\n        return 'False'\ndef last_word_p(words):\n    '''\n    Write a function to return the last word of a list.\n    '''\n    if len(words)==0:\n        return 'Empty'\n    last_word=words[-1]\n    return last_word\ndef sort_in_increasing_order_p(words):\n    '''\n    Write a function to sort the words in a list in increasing order.\n    '''\n    words.sort(key=len)\n    return words\ndef sort_in_decreasing_order_p(words):\n    '''\n    Write a function to sort the words in a list in decreasing order.\n    '''\n    words.sort(key=len,reverse=True)\n    return words\ndef count_odd_and_even_p(words):\n    '''\n    Write a function to count the number of even and odd numbers in a list.\n    '''\n    odd=0\n    even=0\n    for i in words:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return odd,even\ndef count_even_and_odd_p(words):\n    '''\n    Write a function to count the number of even and odd numbers in a list.\n    '''\n    odd=0\n    even=0\n    for i in words:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return odd,even\ndef count_even_and_odd_p(words):\n    '''\n    Write a function to count the number of even and odd numbers in a list.\n    '''\n    odd=0\n    even=0\n    for i in words:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return odd,even\ndef contains_even_p(words):\n    '''\n    Write a function to check if any word in a list contains a even number.\n    '''\n    for i in words:\n        if i%2==0:\n            return 'True'\n    return 'False'\ndef contains_odd_p(words):\n    '''\n    Write a function to check if any word in a list contains a odd number.\n    '''\n    for i in words:\n        if i%2==1:\n            return 'True'\n    return 'False'\ndef check_p(words):\n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if words==words[::-1]:\n        return 'True'\n    else:\n        return 'False'\ndef check_p(words):\n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    words=words[::-1]\n    if words==words:\n        return 'True'\n    else:\n        return 'False'\ndef is_sorted_p(words):\n    '''\n    Write a function to check if a given string is sorted or not.\n    '''\n    temp=[]\n    for i in range(len(words)-1):\n        if words[i]<words[i+1]:\n            temp.append(words[i])\n            temp.append(words[i+1])\n    if words==temp:\n        return 'True'\n    else:\n        return 'False'\ndef is_sorted_p(words):\n    '''\n    Write a function to check if a given string is sorted or not.\n    '''\n    temp=[]\n    for i in range(len(words)-1):\n        if words[i]<words[i+1]:\n            temp.append(words[i])\n            temp.append(words[i+1])\n    if words==temp:\n        return 'True'\n    else:\n        return 'False'\ndef is_anagram_p(word1,word2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    list1=list(word1)\n    list2=list(word2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return 'True'\n    else:\n        return 'False'\ndef is_anagram_p(word1,word2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    list1=list(word1)\n    list2=list(word2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return 'True'\n    else:\n        return 'False'\ndef is_anagram_p(word1,word2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    list1=list(word1)\n    list2=list(word2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return 'True'\n    else:\n        return 'False'\ndef is_anagram_p(word1,word2):\n    '''\n    Write a function to check if two strings are anagrams or not"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i.startswith('p')]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n: return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # 1. if index is greater than n-1, then we have the maximum sum subsequence\n    if index > n-1:\n        return k\n    \n    # 2. if k is greater than prefix[index], then we have the maximum sum subsequence\n    if k > a[index]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    # 3. otherwise, we can get a max sum with or without kth element\n    ans = 0\n    # case 3.1\n    ans = max(ans, k+max_sum_increasing_subseq(a, n, index+1, k))\n    # case 3.2\n    ans = max(ans, a[index] + max_sum_increasing_subseq(a, n, index+1, k-a[index]))\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    max_subseq = []\n    \n    for j in range(index+1):\n        if a[j] > k:\n            max_subseq.append(a[j])\n        else:\n            max_sum = max(max_sum, a[j] + max_subseq[-1])\n            max_subseq.append(a[j])\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # we are not allowed to use a dp array here because we want to make sure that we can reach the kth element.\n    max_sum = 0\n    min_index = index\n    for i in range(n):\n        if a[i] >= k and max_sum < k + a[i]:\n            max_sum = k + a[i]\n            min_index = i\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global maximum\n    if index == n:\n        if maximum < k:\n            maximum = k\n        return\n    elif index < n:\n        max_sum_increasing_subseq(a, n, index + 1, k)\n        current = a[index]\n        if current <= k and current + maximum > k:\n            maximum = current + maximum\n        max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global_max_sum = float('-inf')\n    subseq_sum = 0\n    subseq = list()\n    for i in range(0, n):\n        if(i < index):\n            subseq_sum = 0\n        else:\n            subseq_sum += a[i]\n        subseq.append(subseq_sum)\n        if(subseq_sum > global_max_sum):\n            global_max_sum = subseq_sum\n    return global_max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # if k > n then it will be not possible to find max_sum_subseq_ending_here\n    if k > n:\n        return 0\n    \n    # if index == 0, then return 0 for subseq ending at ith index\n    if index == 0:\n        return 0\n    \n    # recursion base condition, k == 0\n    if k == 0:\n        return a[index]\n    \n    # Recursion step\n    \n    # Find max sum of increasing subsequence ending at i-1\n    max_ending_at_i_minus_1 = max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    # Find max sum of decreasing subsequence ending at i-1\n    max_ending_at_i_minus_1 = max(max_ending_at_i_minus_1, 0)\n    \n    # Find max of max sum of increasing subsequence ending at i-1, max ending at i-1 and k, i.e., a[i-1]+a[i-2]+...+a[i]+k\n    max_ending_at_i = a[index] + max_ending_at_i_minus_1\n    \n    # If k is smaller than a[i], then max_ending_at_i will be 0\n    if k < a[index]:\n        return max_ending_at_i\n    \n    # else, max_ending_at_i will be equal to max of max_ending_at_i_minus_1 and max_ending_at_i\n    return max(max_ending_at_i, max_ending_at_i_minus_1)\n    \ndef max_sum_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # if k > n then it will be not possible to find max_sum_subseq_ending_here\n    if k > n:\n        return 0\n    \n    # if index == 0, then return 0 for subseq ending at ith index\n    if index == 0:\n        return 0\n    \n    # recursion base condition, k == 0\n    if k == 0:\n        return a[index]\n    \n    # Recursion step\n    \n    # Find max sum of decreasing subsequence ending at i-1\n    max_ending_at_i_minus_1 = max_sum_subseq(a, n, index - 1, k)\n    \n    # Find max sum of decreasing subsequence ending at i-1\n    max_ending_at_i_minus_1 = max(max_ending_at_i_minus_1, 0)\n    \n    # Find max of max sum of decreasing subsequence ending at i-1, max ending at i-1 and k, i.e., a[i-1]+a[i-2]+...+a[i]+k\n    max_ending_at_i = a[index] + max_ending_at_i_minus_1\n    \n    # If k is smaller than a[i], then max_ending_at_i will be 0\n    if k < a[index]:\n        return max_ending_at_i\n    \n    # else, max_ending_at_i will be equal to max of max_ending_at_i_minus_1 and max_ending_at_i\n    return max(max_ending_at_i, max_ending_at_i_minus_1)\n    \nif __name__ == \"__main__\":\n    a = [4, 2, 5, 3, 7, 4, 5, 6, 8, 1]\n    n = len(a)\n    index = 3\n    k = 8\n    print(max_sum_increasing_subseq(a, n, index, k))\n    print(max_sum_subseq(a, n, index, k))\n    \n    '''\n    Output:\n    13\n    5\n    '''"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index > n-1):\n        return 0\n    if(k == index):\n        return a[index]\n    if(max_sum_increasing_subseq(a, n, index+1, k) == a[index]):\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    if(max_sum_increasing_subseq(a, n, index+1, k) + a[index] >= a[index+1]):\n        return max_sum_increasing_subseq(a, n, index+1, k) + a[index]\n    if(max_sum_increasing_subseq(a, n, index+1, k) + a[index+1] >= a[index+2]):\n        return max_sum_increasing_subseq(a, n, index+2, k) + a[index+1]\n    if(max_sum_increasing_subseq(a, n, index+2, k) + a[index+1] >= a[index+2]):\n        return max_sum_increasing_subseq(a, n, index+2, k) + a[index+1]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Base cases\n    if n == 0:\n        return 0\n    \n    if k == index:\n        return a[index]\n    \n    # MaxSum = -infinity\n    max_sum = float('-inf')\n    \n    # Initialize a variable to store current and previous sums\n    curr_sum = 0\n    prev_sum = 0\n    \n    # Consider all possible ending indices\n    for i in range(index, n):\n        \n        # If current element is greater than the previous element then,\n        # update the curr_sum and the prev_sum\n        if a[i] > a[i-1]:\n            curr_sum = a[i] + curr_sum\n            prev_sum = a[i-1]\n        \n        # Else if curr_sum is greater than max_sum\n        else:\n            curr_sum = a[i] + curr_sum\n            \n            # Update max_sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                \n            # Update curr_sum and prev_sum\n            curr_sum = a[i-1]\n            prev_sum = a[i]\n            \n    # If k is greater than the maximum sum, then return the maximum sum\n    if k > max_sum:\n        return max_sum\n    \n    # Else return the sum of the subarray\n    return max_sum + k\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if i==j:\n                tuplex[i][j] = ':'\n            else:\n                tuplex[i][j] =''\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = (m-1,n-1)\n    return colon\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = (m-1,n-1)\n    return colon\ndef arlo(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_mn(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_mn_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_mn_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_m(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_m_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_m_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_n_m_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False\ndef arlo_m_n_n_n_n_n(tuplex,tupley):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    colon = colon_tuplex(tuplex,m,n)\n    colony = colon_tupley(tupley,m,n)\n    if colon == colony:\n        return True\n    return False"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    col_tuplex=tuplex[:m]+tuplex[m+1:]\n    return col_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    newtup = (tuplex[0],tuplex[1:])\n    return newtup\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[:m])+tuple(tuplex[m:n])+tuple(tuplex[n:])\ndef cm_tuplex(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex)\ndef cm_tuplex_rev(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_2(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))[::-1]\ndef cm_tuplex_rev_3(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))[::-1]\ndef cm_tuplex_rev_4(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))[::-1]\ndef cm_tuplex_rev_5(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_6(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_7(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_8(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_9(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_10(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_11(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_12(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_13(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_14(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_15(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_16(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_17(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_18(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_19(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_20(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_21(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_22(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_23(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_24(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_25(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_26(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_27(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_28(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_29(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_30(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_31(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_32(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_33(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_34(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_35(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_36(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_37(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_38(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef cm_tuplex_rev_39(tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = tuplex[0][0]\n    if tuplex[0]==(0,0):\n        return\n    if c=='#':\n        return\n    else:\n        x = tuplex[0][1]\n        y = tuplex[0][0]\n        new_tuple = ((x,y),tuplex[1])\n        m[y][x] = new_tuple\n        colon_tuplex(new_tuple,m,n)\n        return m\ndef get_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = tuplex[0][0]\n    if tuplex[0]==(0,0):\n        return\n    if c=='#':\n        return\n    else:\n        x = tuplex[0][1]\n        y = tuplex[0][0]\n        new_tuple = ((x,y),tuplex[1])\n        m[y][x] = new_tuple\n        return m\ndef colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_sum(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef colon_sum(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_sum(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef get_colon_sum_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return 0\n    else:\n        new_tuple = ((0,0),c)\n        return new_tuple\ndef colon_tuplex_2d(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = len(m)\n    y = len(m[0])\n    c = tuplex[0][0]\n    if c=='#':\n        return\n    else:\n        new_tuple = ((0,0),c)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].append(new_tuple)\n        m[0].appen"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=''\n    for i in range(m):\n        colon+=str(tuplex[i])+':'\n    colon+=' '\n    for i in range(m,m+n):\n        colon+=str(tuplex[i])+':'\n    colon+='\\n'\n    return colon\ndef col_mat(matrix,m,n):\n    '''\n    Write a function to get a colon of a matrix.\n    '''\n    colon=''\n    for i in range(m):\n        colon+=str(matrix[i])+':'\n    colon+='\\n'\n    for i in range(m,m+n):\n        colon+=str(matrix[i])+':'\n    colon+='\\n'\n    return colon\ndef is_word_in_tuplex(tuplex,word):\n    '''\n    Write a function to check whether a word in a tuple.\n    '''\n    return word in tuplex\ndef is_word_in_matrix(matrix,word):\n    '''\n    Write a function to check whether a word in a matrix.\n    '''\n    for i in range(len(matrix)):\n        if word in matrix[i]:\n            return True\n    return False\ndef is_word_in_col(col,word):\n    '''\n    Write a function to check whether a word in a col.\n    '''\n    return word in col\ndef is_word_in_row(row,word):\n    '''\n    Write a function to check whether a word in a row.\n    '''\n    return word in row\ndef is_word_in_grid(matrix,word):\n    '''\n    Write a function to check whether a word in a grid.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        if is_word_in_col(matrix[i],word) or is_word_in_row(matrix[i],word) or is_word_in_col(col_mat(matrix,i,n),word) or is_word_in_row(col_mat(matrix,m,i),word):\n            return True\n    return False\ndef get_word_pos(pos,n):\n    '''\n    Write a function to get the word position in a grid.\n    '''\n    return pos%n\ndef word_in_grid(matrix,word,n):\n    '''\n    Write a function to check whether a word in a grid.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if is_word_in_col(matrix[i][j],word) or is_word_in_row(matrix[i][j],word) or is_word_in_col(col_mat(matrix,i,n),word) or is_word_in_row(col_mat(matrix,m,i),word):\n                return True\n    return False\ndef all_words_in_grid(matrix,words,n):\n    '''\n    Write a function to check whether all words in a grid.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if not is_word_in_grid(matrix,words[get_word_pos(i*n+j,n)],n):\n                return False\n    return True\ndef is_palindrome_in_tuplex(tuplex,word):\n    '''\n    Write a function to check whether a word in a tuple is a palindrome.\n    '''\n    m=len(tuplex)\n    for i in range(m):\n        if tuplex[i]!=word[0:m-i]:\n            return False\n    return True\ndef is_palindrome_in_matrix(matrix,word):\n    '''\n    Write a function to check whether a word in a matrix is a palindrome.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if is_palindrome_in_tuplex(matrix[i][j],word):\n                return True\n    return False\ndef is_palindrome_in_col(col,word):\n    '''\n    Write a function to check whether a word in a col is a palindrome.\n    '''\n    m=len(col)\n    for i in range(m):\n        if is_palindrome_in_tuplex(col[i],word):\n            return True\n    return False\ndef is_palindrome_in_row(row,word):\n    '''\n    Write a function to check whether a word in a row is a palindrome.\n    '''\n    m=len(row)\n    for i in range(m):\n        if is_palindrome_in_tuplex(row[i],word):\n            return True\n    return False\ndef is_palindrome_in_grid(matrix,word,n):\n    '''\n    Write a function to check whether a word in a grid is a palindrome.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if is_palindrome_in_col(matrix[i][j],word):\n                return True\n    return False\ndef is_palindrome_in_grid_v2(matrix,word,n):\n    '''\n    Write a function to check whether a word in a grid is a palindrome.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if not is_palindrome_in_grid(matrix,word,n):\n                return False\n    return True\ndef is_palindrome_in_grid_v3(matrix,word,n):\n    '''\n    Write a function to check whether a word in a grid is a palindrome.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if not is_palindrome_in_grid(matrix,word,n):\n                return False\n    return True\ndef check_word(matrix,words,n):\n    '''\n    Write a function to check whether all words in a grid are palindromes.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if not is_palindrome_in_grid(matrix,words[get_word_pos(i*n+j,n)],n):\n                return False\n    return True\ndef is_word_in_tuplex(tuplex,word):\n    '''\n    Write a function to check whether a word in a tuple.\n    '''\n    return word in tuplex\ndef is_word_in_matrix(matrix,word):\n    '''\n    Write a function to check whether a word in a matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if word in matrix[i][j]:\n                return True\n    return False\ndef is_word_in_col(col,word):\n    '''\n    Write a function to check whether a word in a col.\n    '''\n    return word in col\ndef is_word_in_row(row,word):\n    '''\n    Write a function to check whether a word in a row.\n    '''\n    return word in row\ndef is_word_in_grid(matrix,word):\n    '''\n    Write a function to check whether a word in a grid.\n    '''\n    m=len(matrix)\n    n=len(matrix[0])\n    for i in range("
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list=[]\n    for i in range(n):\n        tuplex_list.append(tuplex[i])\n    return tuple(tuplex_list)\ndef data_type(a):\n    '''\n    Write a function to get the data type of a value\n    '''\n    try:\n        return a.__class__\n    except AttributeError:\n        return type(a)\ndef get_dict(a):\n    '''\n    Write a function to get a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef get_key(a):\n    '''\n    Write a function to get a dictionary's key\n    '''\n    try:\n        return a.keys()\n    except AttributeError:\n        return a\ndef get_value(a):\n    '''\n    Write a function to get a dictionary's value\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef check_for_key(a,b):\n    '''\n    Write a function to check if a dictionary has a key\n    '''\n    try:\n        return a.has_key(b)\n    except AttributeError:\n        return True\ndef check_for_value(a,b):\n    '''\n    Write a function to check if a dictionary has a value\n    '''\n    try:\n        return a.has_key(b)\n    except AttributeError:\n        return True\ndef del_dict_key(a,b):\n    '''\n    Write a function to delete a key of a dictionary\n    '''\n    try:\n        return a.pop(b)\n    except AttributeError:\n        return a\ndef del_dict_value(a,b):\n    '''\n    Write a function to delete a value of a dictionary\n    '''\n    try:\n        return a.pop(b)\n    except AttributeError:\n        return a\ndef check_for_key_value(a,b):\n    '''\n    Write a function to check if a dictionary has a key and a value\n    '''\n    try:\n        return a.has_key(b)\n    except AttributeError:\n        return True\ndef check_for_value_value(a,b):\n    '''\n    Write a function to check if a dictionary has a value and a value\n    '''\n    try:\n        return a.has_key(b)\n    except AttributeError:\n        return True\ndef del_dict_key_value(a,b):\n    '''\n    Write a function to delete a key and a value of a dictionary\n    '''\n    try:\n        return a.pop(b)\n    except AttributeError:\n        return a\ndef del_dict_value_value(a,b):\n    '''\n    Write a function to delete a value and a value of a dictionary\n    '''\n    try:\n        return a.pop(b)\n    except AttributeError:\n        return a\ndef join_dict_key_value(a,b):\n    '''\n    Write a function to join two dictionaries\n    '''\n    try:\n        return a.update(b)\n    except AttributeError:\n        return a\ndef join_dict_value_value(a,b):\n    '''\n    Write a function to join two dictionaries\n    '''\n    try:\n        return a.update(b)\n    except AttributeError:\n        return a\ndef copy_dict(a):\n    '''\n    Write a function to copy a dictionary\n    '''\n    try:\n        return deepcopy(a)\n    except AttributeError:\n        return a\ndef get_dict_value(a,key):\n    '''\n    Write a function to get a dictionary's value\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef get_dict_key(a):\n    '''\n    Write a function to get a dictionary's key\n    '''\n    try:\n        return a.keys()\n    except AttributeError:\n        return a\ndef get_dict_value(a,key):\n    '''\n    Write a function to get a dictionary's value\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef get_dict_key(a):\n    '''\n    Write a function to get a dictionary's key\n    '''\n    try:\n        return a.keys()\n    except AttributeError:\n        return a\ndef get_dict_key_value(a,key):\n    '''\n    Write a function to get a dictionary's key and value\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef get_dict_value_value(a,key):\n    '''\n    Write a function to get a dictionary's value and value\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef add_dict_key_value(a,key,value):\n    '''\n    Write a function to add a key and a value to a dictionary\n    '''\n    try:\n        a[key]=value\n        return a\n    except AttributeError:\n        return a\ndef add_dict_value_value(a,value,value1):\n    '''\n    Write a function to add a value and a value to a dictionary\n    '''\n    try:\n        a[value]=value1\n        return a\n    except AttributeError:\n        return a\ndef get_dict_keys(a):\n    '''\n    Write a function to get a dictionary's keys\n    '''\n    try:\n        return a.keys()\n    except AttributeError:\n        return a\ndef get_dict_values(a):\n    '''\n    Write a function to get a dictionary's values\n    '''\n    try:\n        return a.values()\n    except AttributeError:\n        return a\ndef add_dict_key_value(a,key,value):\n    '''\n    Write a function to add a key and a value to a dictionary\n    '''\n    try:\n        a[key]=value\n        return a\n    except AttributeError:\n        return a\ndef add_dict_value_value(a,value,value1):\n    '''\n    Write a function to add a value and a value to a dictionary\n    '''\n    try:\n        a[value]=value1\n        return a\n    except AttributeError:\n        return a\ndef add_dict_key_value(a,key,value):\n    '''\n    Write a function to add a key and a value to a dictionary\n    '''\n    try:\n        a[key]=value\n        return a\n    except AttributeError:\n        return a\ndef add_dict_value_value(a,value,value1):\n    '''\n    Write a function to add a value and a value to a dictionary\n    '''\n    try:\n        a[value]=value1\n        return a\n    except AttributeError:\n        return a\ndef dict_map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef dict_map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef dict_map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef dict_map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef dict_map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef map(a,b):\n    '''\n    Write a function to map a dictionary\n    '''\n    try:\n        return a.items()\n    except AttributeError:\n        return a\ndef map(a,b):"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n+1]\ndef colon(list1,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return list1[m:n+1]\ndef remove_duplicates(tuplex):\n    '''\n    Write a function to remove duplicates in a tuple.\n    '''\n    return tuple(set(tuplex))\ndef check_sublist(list1,list2):\n    '''\n    Write a function to check if list1 contains sublist of list2 or not.\n    '''\n    if list1 in list2:\n        return True\n    return False\ndef check_substring(list1,list2):\n    '''\n    Write a function to check if list1 contains substring of list2 or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False\ndef get_count(list1,list2):\n    '''\n    Write a function to get count of sublist in a list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i:i+len(list2)] == list2:\n            count += 1\n    return count\ndef get_count_for_second_list(list1,list2):\n    '''\n    Write a function to get count of sublist in a list for second list.\n    '''\n    count = 0\n    for i in range(0,len(list2)):\n        if list1[i:i+len(list2)] == list2:\n            count += 1\n    return count\ndef check_subtuple(list1,list2):\n    '''\n    Write a function to check if list1 contains any subtuple of list2 or not.\n    '''\n    if len(list1) >= len(list2):\n        for i in range(0,len(list2)):\n            for j in range(i,len(list1)):\n                if list1[j:j+len(list2)] == list2:\n                    return True\n    return False\ndef check_substring_for_sublist(list1,list2):\n    '''\n    Write a function to check if list1 contains any substring of list2 or not.\n    '''\n    if list1 in list2:\n        return True\n    return False\ndef check_contains(list1,list2):\n    '''\n    Write a function to check if list1 contains any item of list2 or not.\n    '''\n    if list2 in list1:\n        return True\n    return False\ndef check_contains_substring(list1,list2):\n    '''\n    Write a function to check if list1 contains any substring of list2 or not.\n    '''\n    if list1 in list2:\n        return True\n    return False\ndef check_contains_for_sublist(list1,list2):\n    '''\n    Write a function to check if list1 contains any sublist of list2 or not.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i,len(list2)):\n            if list1[i:i+len(list2)] == list2:\n                return True\n    return False\ndef check_subset(list1,list2):\n    '''\n    Write a function to check if list1 is a subset of list2 or not.\n    '''\n    if sorted(list1) == sorted(list2):\n        return True\n    return False\ndef check_subset_for_sublist(list1,list2):\n    '''\n    Write a function to check if list1 is a subset of list2 or not.\n    '''\n    if sorted(list1) == sorted(list2):\n        return True\n    return False\ndef common_subset(list1,list2):\n    '''\n    Write a function to find common sublist.\n    '''\n    c_subset = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i:j+1] in list2:\n                if list1[i:j+1] not in c_subset:\n                    c_subset.append(list1[i:j+1])\n    return c_subset\ndef common_subset_for_sublist(list1,list2):\n    '''\n    Write a function to find common sublist.\n    '''\n    c_subset = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i:j+1] in list2:\n                if list1[i:j+1] not in c_subset:\n                    c_subset.append(list1[i:j+1])\n    return c_subset\ndef is_subsequence(s,t):\n    '''\n    Write a function to check if string s is a subsequence of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return is_subsequence(s[1:],t[1:])\n    return is_subsequence(s[1:],t)\ndef is_subsequence_for_sublist(s,t):\n    '''\n    Write a function to check if string s is a subsequence of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return is_subsequence_for_sublist(s[1:],t[1:])\n    return is_subsequence_for_sublist(s[1:],t)\ndef check_subsequence(s,t):\n    '''\n    Write a function to check if string s is a subsequence of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return check_subsequence(s[1:],t[1:])\n    return check_subsequence(s,t[1:])\ndef check_subsequence_for_sublist(s,t):\n    '''\n    Write a function to check if string s is a subsequence of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return check_subsequence_for_sublist(s[1:],t[1:])\n    return check_subsequence_for_sublist(s,t[1:])\ndef is_substring(s,t):\n    '''\n    Write a function to check if string s is a substring of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return is_substring(s[1:],t[1:])\n    return is_substring(s,t[1:])\ndef is_substring_for_sublist(s,t):\n    '''\n    Write a function to check if string s is a substring of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return is_substring_for_sublist(s[1:],t[1:])\n    return is_substring_for_sublist(s,t[1:])\ndef check_substring(s,t):\n    '''\n    Write a function to check if string s is a substring of string t or not.\n    '''\n    if s == \"\":\n        return True\n    if t == \"\":\n        return False\n    if s[0] == t[0]:\n        return check_substring(s[1:],t[1:])\n    return check_substring(s,t[1:])\ndef check_substring_for_sublist"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # initialise a list\n    colon = []\n    # loop through each value in tuplex\n    for i in tuplex:\n        # store each value in a list\n        colon.append(i)\n    # add a colon to the list at the correct index\n    colon.insert(m,':')\n    colon.insert(n,':')\n    # return the colon\n    return colon\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    # Sort lists to ensure correct order\n    nums1 = sorted(nums1, reverse = True)\n    nums2 = sorted(nums2, reverse = True)\n    \n    # Initialize the result\n    result = []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    if N > len(nums1) or N > len(nums2):\n        return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [1,2,3,4,5]\n    # nums2 = [6,7,8,9,10]\n    # N = 3\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def prod(nums):\n        '''\n        Find the product of all factors of nums\n        '''\n        prod = 1\n        for num in nums:\n            prod *= num\n        return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def get_product(nums, i):\n        product = 1\n        for num in nums:\n            product *= num\n        return product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Time: O(nlogn) | Space: O(n)\n    num1 = sorted(nums1)\n    num2 = sorted(nums2)\n    i1 = i2 = 0\n    result = []\n    while i1 < N and i2 < N:\n        if num1[i1] < num2[i2]:\n            i1 += 1\n        elif num1[i1] > num2[i2]:\n            i2 += 1\n        else:\n            result.append(num1[i1] * num2[i2])\n            i1 += 1\n            i2 += 1\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #n = len(nums1)\n    #m = len(nums2)\n    #product = 0\n    #if N > m:\n    #    N = m\n    #for i in range(0, N):\n    #    product = nums1[i] * nums2[i]\n    #return product\n    '''\n    [7, 5, 2, 8, 6, 8, 4]\n    [2, 3, 4, 8]\n    '''\n    max_product = 0\n    \n    #max_factor_pos = 0\n    max_index_pos = 0\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[max_index_pos]:\n            #max_factor_pos = i\n            max_index_pos = nums2.index(nums1[i])\n            print(f\"max_index_pos: {max_index_pos}\")\n            break\n        elif nums1[i] == nums2[max_index_pos]:\n            if max_index_pos > max_index_pos:\n                max_index_pos = i\n        else:\n            max_product = nums1[i] * nums2[max_index_pos]\n            print(f\"max_product: {max_product}\")\n            break\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product = []\n    for i in range(N):\n        product.append(max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1], nums1[N-i-1]*nums2[i]))\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product_arrays(nums1, nums2, N):\n        '''\n        Given a list of numbers, return a list of the products of each pair of numbers.\n        '''\n        products = []\n        for i in range(0, len(nums1)):\n            for j in range(0, len(nums2)):\n                products.append(nums1[i]*nums2[j])\n        return products\n    \n    def largest_product_helper(array, N, product_arrays):\n        '''\n        Given a list of numbers, return the largest product of at most N numbers.\n        '''\n        if len(array) == 0:\n            return -1\n        \n        if len(array) == 1:\n            return array[0]\n        \n        # Take the largest element\n        largest_product = array[0]\n        \n        for i in range(1, N+1):\n            if product_arrays[i] > product_arrays[largest_product]:\n                largest_product = i\n        \n        # Reduce list of products and recurse\n        return largest_product_helper(array[1:], N, product_arrays)\n    \n    return largest_product_helper(nums1, N, product_arrays)\n    \ndef reverse_list(nums):\n    '''\n    Given a list of numbers, reverse the order of the numbers in the list.\n    '''\n    def reverse_list_helper(array):\n        '''\n        Given a list of numbers, return the reversed list.\n        '''\n        if len(array) == 0:\n            return []\n        \n        # Take the largest element\n        largest = array[0]\n        \n        for i in range(1, len(array)):\n            if array[i] > largest:\n                largest = array[i]\n        \n        # Reduce list of numbers and recurse\n        return reverse_list_helper(array[1:]) + [largest]\n    \n    return reverse_list_helper(nums)\n    \ndef find_two_numbers(nums, N):\n    '''\n    Given a list of numbers, return the two numbers that sum to N.\n    If there are multiple answers, return the smallest pair.\n    '''\n    def find_two_numbers_helper(nums, N, index):\n        '''\n        Given a list of numbers, return the two numbers that sum to N.\n        If there are multiple answers, return the smallest pair.\n        '''\n        # Check to see if we have found the sum\n        if N == 0:\n            return True\n        \n        # Check to see if we have exceeded the list length\n        if index == len(nums):\n            return False\n        \n        # Check to see if the sum is smaller than the current answer\n        if N-nums[index] < nums[index]:\n            return find_two_numbers_helper(nums, N, index+1)\n        \n        # Check to see if the sum is bigger than the current answer\n        if N-nums[index] > nums[index]:\n            if index == len(nums)-1:\n                return False\n            return find_two_numbers_helper(nums, N, index+1)\n        \n    return find_two_numbers_helper(nums, N, 0)\n    \ndef balanced_binary_tree(nums):\n    '''\n    Given a list of numbers, return a tree representing a balanced binary tree.\n    '''\n    def balanced_binary_tree_helper(nums, N, start, end):\n        '''\n        Given a list of numbers, return a tree representing a balanced binary tree.\n        '''\n        # Check to see if we have reached the end of the list\n        if end >= len(nums):\n            return\n        \n        # Check to see if we have exceeded the list length\n        if end >= len(nums):\n            return\n        \n        # Check to see if the sum is smaller than the current answer\n        if N-nums[start] < nums[start]:\n            return balanced_binary_tree_helper(nums, N, start+1, end)\n        \n        # Check to see if the sum is bigger than the current answer\n        if N-nums[start] > nums[start]:\n            if start == len(nums)-1:\n                return None\n            return balanced_binary_tree_helper(nums, N, start+1, end)\n        \n        # Create the node with the value\n        root = TreeNode(nums[start])\n        \n        # Create the left branch\n        root.left = balanced_binary_tree_helper(nums, N, start+1, end)\n        \n        # Create the right branch\n        root.right = balanced_binary_tree_helper(nums, N, start+1, end)\n        \n        return root\n    \n    return balanced_binary_tree_helper(nums, N, 0, len(nums)-1)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if (b > max):\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"%d is maximum\"%a)\n    else:\n        print(\"%d is maximum\"%b)\nmaximum(5,6)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"Maximum number is %d\"%a)\n    else:\n        print(\"Maximum number is %d\"%b)\nmaximum(30,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = str1.split(' ')\n    for index in range(len(str_list)):\n        str_list[index] = int(str_list[index])\n    return tuple(str_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(',')\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # YOUR CODE GOES HERE\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_ = tuple(str1)\n    print(tuple_)\n    \n    \ndef find_kth_char(str1,k):\n    '''\n    Write a function to find the kth character in a string.\n    '''\n    str1 = str(str1)\n    str1 = list(str1)\n    str1.reverse()\n    str1 = ''.join(str1)\n    k = int(k)\n    print(str1[k-1])\n    \n    \ndef is_palin_perm(str1,str2):\n    '''\n    Write a function to check if two given strings are palindromes or not.\n    '''\n    str1 = str(str1)\n    str1 = list(str1)\n    str2 = str(str2)\n    str2 = list(str2)\n    str1.reverse()\n    str2.reverse()\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    if str1 == str2:\n        print('True')\n    else:\n        print('False')\n        \n        \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check whether two given strings are anagrams or not.\n    '''\n    str1 = str(str1)\n    str1 = list(str1)\n    str2 = str(str2)\n    str2 = list(str2)\n    if sorted(str1) == sorted(str2):\n        print('True')\n    else:\n        print('False')\n        \n        \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a given matrix by 90 degrees\n    '''\n    for i in range(0,len(matrix)):\n        for j in range(i,len(matrix[0])):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n            \n    for i in range(0,len(matrix)):\n        for j in range(0,len(matrix[0])):\n            print(matrix[i][j],end=' ')\n        print()\n        \n        \ndef swap_tuple(tup):\n    '''\n    Write a function to swap two given tuples of characters.\n    '''\n    tup1 = tup[0]\n    tup2 = tup[1]\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    tup1.reverse()\n    tup2.reverse()\n    tup1 = ''.join(tup1)\n    tup2 = ''.join(tup2)\n    tup = (tup1,tup2)\n    return tup\n        \n        \ndef swap_string(str1,str2):\n    '''\n    Write a function to swap two given strings.\n    '''\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    return (str1,str2)\n    \n    \ndef rotate_matrix_v2(matrix):\n    '''\n    Write a function to rotate a given matrix by 90 degrees\n    '''\n    n = len(matrix)\n    for i in range(0,int(n/2)):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n            matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\n            matrix[j][n-i-1] = temp\n            \n    for i in range(0,int(n/2)):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n            matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\n            matrix[j][n-i-1] = temp\n            \n    for i in range(0,int(n/2)):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][n-i-1]\n            matrix[j][n-i-1] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = matrix[n-i-1][j]\n            matrix[n-i-1][j] = temp\n            \n    return matrix\n        \n    \ndef rotate_matrix_v3(matrix):\n    '''\n    Write a function to rotate a given matrix by 90 degrees\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            matrix[j][i] = matrix[i][j]\n    for i in range(n):\n        for j in range(int(n/2)):\n            matrix[i][j],matrix[i][n-j-1] = matrix[i][n-j-1],matrix[i][j]\n    for i in range(int(n/2)):\n        for j in range(n):\n            matrix[i][j],matrix[n-j-1][i] = matrix[n-j-1][i],matrix[i][j]\n    return matrix\n    \n    \ndef find_nth_occurence_in_string(string,char,n):\n    '''\n    Write a function to find the nth occurrence of a given character in a string.\n    '''\n    string = str(string)\n    string = list(string)\n    string.reverse()\n    string = ''.join(string)\n    char = str(char)\n    n = int(n)\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == char:\n            count += 1\n            if count == n:\n                print(i)\n                return i\n        \n    \ndef find_nth_occurence_in_string_v2(string,char,n):\n    '''\n    Write a function to find the nth occurrence of a given character in a string.\n    '''\n    string = str(string)\n    string = list(string)\n    string.reverse()\n    string = ''.join(string)\n    char = str(char)\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == char:\n            count += 1\n            if count == n:\n                return i\n    return -1\n    \n    \ndef count_occurence_in_string(string,char):\n    '''\n    Write a function to count the number of occurrences of a given character in a string.\n    '''\n    string = str(string)\n    string = list(string)\n    string.reverse()\n    string = ''.join(string)\n    char = str(char)\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n    \n    \ndef count_occurence_in_string_v2(string,char):\n    '''\n    Write a function to count the number of occurrences of a given character in a string.\n    '''\n    string = str(string)\n    string = list(string)\n    string.reverse()\n    string = ''.join(string)\n    char = str(char)\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n    \n    \ndef find_first_occurenc"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = ()\n    for x in str1:\n        res += (x,)\n    return res\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (1 << (n.bit_length() - 1)))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #code here\n    n = n - 1\n    n = n << 1\n    n = n + 1\n    print(n)\n    "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n == 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    if (n == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_set_bit_using_or(n): \n    '''\n    Write a python function to set the left most set bit using or.\n    '''\n    if (n & 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_unset_bit_using_or(n): \n    '''\n    Write a python function to set the left most unset bit using or.\n    '''\n    if (n & ~(1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_unset_bit_using_or_using_xor(n): \n    '''\n    Write a python function to set the left most unset bit using or.\n    '''\n    if (n & ~(1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_set_bit_using_and(n): \n    '''\n    Write a python function to set the left most set bit using and.\n    '''\n    if (n & 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_unset_bit_using_and(n): \n    '''\n    Write a python function to set the left most unset bit using and.\n    '''\n    if (n & ~(1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_set_bit_using_and_using_xor(n): \n    '''\n    Write a python function to set the left most set bit using and.\n    '''\n    if (n & 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef set_left_most_unset_bit_using_and_using_xor(n): \n    '''\n    Write a python function to set the left most unset bit using and.\n    '''\n    if (n & ~(1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=n&(~1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (~(n-1))\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length() - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (1 << n.bit_length() - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | 0x000001\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n!= 0\n    if (n & (n-1)) == 0:\n        return n\n    return n - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Explanation:\n    \n    \n    n = 8\n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1101 = 0110\n    \n    \n    \n    \n    \n    n = 9\n    \n    \n    \n    1111(bin(n))\n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1101 = 0011\n    \n    \n    \n    \n    \n    n = 10\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 0111\n    \n    \n    \n    \n    n = 11\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1001\n    \n    \n    \n    \n    n = 12\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 13\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 14\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 15\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1111\n    \n    \n    \n    \n    n = 16\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 17\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 18\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 19\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 20\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 21\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 22\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 23\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 24\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 25\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 26\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 27\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1110\n    \n    \n    \n    \n    n = 28\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 29\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 30\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 31\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 32\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 33\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 34\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 35\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 36\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 37\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 38\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 39\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 40\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 41\n    \n    \n    \n    1111(bin(n)) \n    1101\n    \n    1111 = 1111 | 1\n    1101 = 0000\n    \n    \n    1111 = 1101\n    \n    \n    \n    \n    n = 42\n    \n    \n    \n    1111(bin(n)) "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius=r\n    height=h\n    volume=3.14*radius*height\n    return volume\ndef volume_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height/3\n    return volume\ndef volume_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius=r\n    height=h\n    volume=3.14*radius*height/3\n    return volume\ndef volume_cone_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height\n    return volume\ndef volume_cylinder_radius(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius=r\n    height=h\n    volume=3.14*radius*height\n    return volume\ndef volume_cone_radius(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height/3\n    return volume\ndef volume_cone_radius_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height\n    return volume\ndef volume_cylinder_radius_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius=r\n    height=h\n    volume=3.14*radius*height\n    return volume\ndef volume_cone_cylinder_radius_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height\n    return volume\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_radius(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_radius(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_cylinder_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder_radius(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder_radius(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef surface_area_cylinder_cylinder_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*radius*height\n    return surface_area\ndef surface_area_cone_cylinder_cylinder_radius_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    radius=r\n    height=h\n    surface_area=3.14*(radius**2)*height\n    return surface_area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=r\n    height=h\n    volume=3.14*(radius**2)*height/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    radius=r\n    height=h\n    volume=3.14*radius*height\n    return volume\ndef volume_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone."
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    vol = pi * (r**2) * (h/3)\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**2*math.pi*h/3\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r ** 2) * (h / 2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    vol = math.pi*r**2*h\n    return vol\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    vol = pi*r**2*h\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt, pi\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt, pi\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    vol = pi * r**2 * h\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    vol = pi * r**2 * h\n    return vol\ndef volume_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone with a pyramid in it.\n    '''\n    from math import pi\n    vol = pi*r**2*h*2\n    return vol\ndef volume_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone with a pyramid in it.\n    '''\n    from math import pi\n    vol = pi*r**2*h*2\n    return vol\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone with a cylinder in it.\n    '''\n    from math import pi\n    vol = pi*r**2*h*2\n    return vol\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone with a cylinder in it.\n    '''\n    from math import pi\n    vol = pi*r**2*h*2\n    return vol\ndef volume_rectangle(w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import sqrt\n    vol = w * h\n    return vol\ndef volume_rectangle(w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import sqrt\n    vol = w * h\n    return vol\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    from math import pi\n    vol = (4/3) * pi * r**3\n    return vol\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    from math import pi\n    vol = (4/3) * pi * r**3\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_cube(w,h,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol = w*h*l\n    return vol\ndef volume_cube(w,h,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol = w*h*l\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    from math import sqrt\n    vol = a*b*c\n    return vol\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    from math import sqrt\n    vol = a*b*c\n    return vol\ndef volume_cube(w,h,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol = w*h*l\n    return vol\ndef volume_cube(w,h,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol = w*h*l\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import sqrt\n    vol = a * b * (2*sqrt(3)/3)\n    return vol\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    from math import sqrt\n    vol = a*b*c\n    return vol\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    from math import sqrt\n    vol = a*b*c\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    vol = (4/3) * pi * (r**3) * r\n    return vol\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    vol = pi*r**2*h\n    return vol\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    vol = pi*r**2*h\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    vol = pi*r**2*h\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    vol = pi*r**2*h\n    return vol\ndef volume_cone_pyramid(r,h):\n    '''\n    Write a function to fin"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi * r**2 * h)\n    return volume\ndef diameter_cone(r,h):\n    '''\n    Write a function to find the diameter of a cone.\n    '''\n    diameter = 2 * r + 2 * h\n    return diameter\ndef height_cone(r,h):\n    '''\n    Write a function to find the height of a cone.\n    '''\n    height = (2 * r * h) + r\n    return height\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (r**2)*math.pi*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = math.pi * (r ** 2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<=0 or h<=0:\n        return \"Error\"\n    else:\n        return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = 2*i\n        if i == n:\n            break\n    print(i)\n    print(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            n = n - 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_power_2 = 0\n    while(n>=2):\n        n = n/2\n        if n<=high_power_2:\n            return -1\n        else:\n            high_power_2 = n\n    return high_power_2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Here we use bitwise AND operator for this task \n    # and OR operator for this task because \n    # the 2^0 = 0, 2^1 = 1, 2^2 = 2,.... \n    # which is greater than n. \n    \n    # Bitwise AND operator gives us the boolean value. \n    # If the bit is set, the corresponding value is 1. \n    # If it is not set, the corresponding value is 0. \n    \n    # Then, we use xor operator to get the result. \n    # If both the bits are set, then it is 1. \n    # If both bits are not set, then it is 0. \n    \n    # Thus, by using bitwise AND operator, \n    # we can get the result of n^2. \n    \n    # For this task, we need to do the following \n    # steps: 1. Take an integer, n. \n    # 2. Create a variable i, and initialize i=2. \n    # 3. Repeat the following while i <= n: \n    #    4. Create a variable j, and initialize j=2. \n    # 5. Check if i^j <= n. If it is true, then assign i as j. \n    # 6. Else, set i = i * 2, and increase j. \n    \n    # As mentioned above, it is possible to define a while loop. \n    # In this case, we must keep iterating while i <= n. \n    # That's why we need to create a variable i, \n    # and initialize i=2. \n    \n    # Now we need to increment i. To achieve this, \n    # we use the following equation: \n    \n    # i = i * 2\n    # print(i)\n    \n    # Which gives us the result of i*2 = 4\n    \n    i = 2\n    while i <= n:\n        i = i * 2\n        print(i)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #create an empty list\n    dp_list = []\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_power_2 = 1\n    while high_power_2 <= n:\n        high_power_2 <<= 1\n    return high_power_2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while x <= n:\n        x = 2**x\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n >= 2:\n        count += 1\n        n = n // 2\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = n\n    while(2**result <= n):\n        result = result - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power=0\n    while True:\n        if (2**power)<n:\n            power+=1\n        else:\n            break\n    print(power)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (2 * n - 1) \n    \ndef test_find_lucas(): \n    assert find_lucas(1) == 2 \n    assert find_lucas(2) == 3\n    assert find_lucas(3) == 4\n    assert find_lucas(4) == 5\n    assert find_lucas(5) == 8\n    assert find_lucas(6) == 13\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas_numbers[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        else:\n            return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n -= 1\n    if n == 0: return 2\n    return find_lucas(n // 2) + find_lucas(n // 2 + 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num = 0\n    counter = 1\n    if n == 1:\n        num = 1\n    else:\n        while counter < n:\n            num = num + 2\n            counter = counter + 1\n    return num\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Initialize variables\n    lucas = 0 \n    next_lucas = 1\n    \n    # Populate the lucas\n    for i in range(n):\n        lucas = next_lucas\n        next_lucas = next_lucas + lucas\n    \n    # Return then'th lucas number\n    return next_lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # if n == 1:\n    #     return 2\n    # else:\n    #     return lucas(n-1) + lucas(n-2)\n    \n    # code starts here\n    return lucas(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # code here\n    return lucas_cache[n]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__format__(string)\n    # <statement>\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # new_list = []\n    # for word in list_:\n    #     new_list.append(string.format(word))\n    # return new_list\n    return [string.format(word) for word in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_ + [string]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for elem in list_:\n        list_.append(string.format(elem))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return list_.format(string)\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    temp = {}\n    for i in range(len(l1)):\n        temp[l1[i]] = l2[i]\n        temp[l2[i]] = l3[i]\n    return temp\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dic = {}\n    out_dic.update(l1)\n    out_dic.update(l2)\n    out_dic.update(l3)\n    return out_dic\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    dict1 = {l1[i]: l2[i] for i in range(len(l1))}\n    dict2 = {l3[i]: l4[i] for i in range(len(l3))}\n    \n    return dict1, dict2\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_list = []\n    for i in range(len(l1)):\n        nested_list.append({l1[i]: l2[i], l3[i]: l4[i]})\n    return nested_list\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    final_dictionary = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    i = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            dictionary[l1[i]] = l2[j]\n        dictionary[l1[i]] = l3[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # new_dict = {}\n    # for i in range(len(l1)):\n    #     new_dict[l1[i]] = l2[i]\n    # return new_dict\n    \n    #Another way\n    return {l1[i] : l2[i] for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:l2[i] for i in range(len(l1))}\n    # l1_dict = {}\n    # l2_dict = {}\n    # for i in range(len(l1)):\n    #     l1_dict[l1[i]] = l2[i]\n    #     l2_dict[l2[i]] = l1[i]\n    # return l1_dict, l2_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) > 0 and len(l2) > 0 and len(l3) > 0:\n        dictionary = {'first': l1,'second': l2, 'third': l3}\n    else:\n        dictionary = {}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_ = {}\n    for i, item in enumerate(l1):\n        if i in l2:\n            if i in l3:\n                dict_[item] = {l2[i]: l3[i]}\n            else:\n                dict_[item] = {l2[i]: None}\n        else:\n            dict_[item] = None\n    return dict_\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #return max( (get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)), n)\n    #return n if n == 0 else max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    return (get_max_sum(n/2) if n%2 else n) + (get_max_sum(n/3) if n%3 else n) + (get_max_sum(n/4) if n%4 else n) + (get_max_sum(n/5) if n%5 else n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # if n <= 1:\n    #     return n\n    # return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n==0:\n            return 0\n        if n%2 == 0:\n            return max(f(n//2), f(n//3), f(n//4), f(n//5), n)\n        return f(n//2) + f(n//3) + f(n//4) + f(n//5) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        f_n = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    return max(f_n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(n // 2 + n // 3 + n // 4 + n // 5, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n <= 1, it's max sum is n\n    if (n <= 1):\n        return n\n    # recursive case\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = max(result, (get_max_sum(i/2) + get_max_sum(i/3) + get_max_sum(i/4) + get_max_sum(i/5)), i)\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for i in range(len(input_list)):\n        max_list.append(input_list[i][0])\n    return max(max_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    # write your solution below\n    for val in input_list:\n        if len(val) > max_length:\n            max_length = len(val)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for i in range(len(input_list)):\n        if len(max_list) == 0:\n            max_list = input_list[i]\n        elif len(max_list) < len(input_list[i]):\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > maximum:\n            maximum = len(input_list[i])\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return input_list\n    max_length = 0\n    for i in range(len(input_list)):\n        if max_length < len(input_list[i]):\n            max_length = len(input_list[i])\n    if max_length == 0:\n        return input_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    for i in input_list:\n        if(len(i) > max_length):\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    curr_len = 0\n    max_list = []\n    for i in input_list:\n        curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n            max_list = []\n            max_list.append(i)\n        elif curr_len == max_len:\n            max_list.append(i)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list)\n    if length == 0:\n        return\n    elif length == 1:\n        return input_list[0]\n    max = input_list[0]\n    for i in range(1, length):\n        if len(max) < len(input_list[i]):\n            max = input_list[i]\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    \n    for item in input_list:\n        length_list.append(len(item))\n    \n    max_length = max(length_list)\n    \n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    while input_list:\n        new_max_length = len(input_list[0])\n        if max_length < new_max_length:\n            max_length = new_max_length\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) > 2:\n        return False\n    for ele in test_tup:\n        if test_tup.count(ele) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    no_duplicates = True\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            no_duplicates = False\n    return no_duplicates\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Your code here\n    my_list = list(test_tup)\n    for item in my_list:\n        if my_list.count(item) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_list = []\n    for item in test_tup:\n        if item not in my_list:\n            my_list.append(item)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_set = set(test_tup)\n    if len(test_tup_set)!= len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # for i in range(0,len(str1)-1):\n    #     if str1[i] == str1[i+1]:\n    #         return -1\n    # return i\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    '''\n    Time Complexity\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In worst case the string is empty and there are no repeats\n    -> Time complexity is O(1)\n    In case of cases when the string is not empty\n    -> Time complexity is O(n)\n    ----------------------------------\n    Space Complexity\n    -----------------\n    In worst case the string is empty and there are no repeats\n    -> Space complexity is O(1)\n    In case of cases when the string is not empty\n    -> Space complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 1\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    if str1 == '':\n        return -1\n    else:\n        return str1[0]\n    \n    '''\n    Solution - 2\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 3\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 4\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 5\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 6\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 7\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 8\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 9\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 10\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 11\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 12\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 13\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 14\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 15\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 16\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 17\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 18\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 19\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 20\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 21\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 22\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 23\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 24\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 25\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 26\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 27\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 28\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O(n)\n    ----------------------------------\n    '''\n    '''\n    Solution - 29\n    ---------------\n    Algorithm:\n    ----------------------------------\n    In case of no string\n    -> Time complexity is O(1)\n    In case of non empty string\n    -> Time complexity is O"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # Define a dictionary which contains the count of each character\n    count_dict = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n            \nif __name__ == \"__main__\":\n    print(first_non_repeating_character(\"sarkar\")) # => s\n    print(first_non_repeating_character(\"cba\")) # => a\n    print(first_non_repeating_character(\"pwwkew\")) # => w\n    print(first_non_repeating_character(\"pwwkewR\")) # => "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for i in str1:\n        if i in chars:\n            chars[i] += 1\n        else:\n            chars[i] = 1\n    for i in str1:\n        if chars[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) < 1:\n        print(\"string can not be empty.\")\n        return -1\n    \n    character_occurence = {}\n    for character in str1:\n        if character in character_occurence:\n            character_occurence[character] += 1\n        else:\n            character_occurence[character] = 1\n    for character in str1:\n        if character_occurence[character] == 1:\n            return character\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # SOLUTION\n    # loop through all the characters\n    # if a character is encountered again return -1, else return the index of the character\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return -1\n    return str1.find(' ')\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a character hash map with the count of each character in the string\n    count_map = {}\n    for char in str1:\n        count_map[char] = count_map.get(char, 0) + 1\n    # iterate over the string again\n    for char in str1:\n        if count_map[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0] if str1.count(str1[0]) == 1 else None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for x in str1:\n        if x in freq.keys():\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    for x in str1:\n        if freq[x] == 1:\n            return x\n    return ''\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(bool(re.search(regex,string)))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n        \ndef check_char_rec(string):\n    if not string:\n        return True\n    else:\n        if re.match(regex,string):\n            return True\n        else:\n            return False\n    \ndef check_char_rec2(string):\n    if not string:\n        return True\n    else:\n        if re.match(regex,string):\n            return True\n        else:\n            if string[0] == string[-1]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\nstring=input()\nprint(check_char(string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)): \n        print(\"Yes\")\n    else: \n        print(\"No\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #code here\n    str1 = string.strip()\n    str2 = str1[0] + str1[-1]\n    if str1 == str2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string) is not None:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ncheck_char('abc')\ncheck_char('xyz')\ncheck_char('a')\ncheck_char('abc1')\ncheck_char('abcd')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.search(regex, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a<b and b<c):\n        return a\n    if(a<c and c<b):\n        return b\n    if(b<a and a<c):\n        return a\n    return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    if len(sorted_numbers)%2!= 0:\n        return sorted_numbers[(len(sorted_numbers)-1)//2]\n    else:\n        return float((sorted_numbers[len(sorted_numbers)//2-1] + sorted_numbers[len(sorted_numbers)//2]))/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list = sorted([a, b, c])\n    print(list[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    myList = (a,b,c)\n    myList.sort()\n    print(myList)\n    if len(myList) == 0:\n        return None\n    if len(myList) == 1:\n        return myList[0]\n    if len(myList) == 2:\n        return (myList[0] + myList[1])/2\n    else:\n        middle = len(myList)//2\n        if myList[middle] > myList[middle-1]:\n            return median_numbers(myList[:middle], myList[middle:], myList[middle+1:])\n        else:\n            return median_numbers(myList[middle+1:], myList[:middle], myList[middle-1:])\n    \nprint(median_numbers(2,4,1))\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s=a+b+c\n    s=s//2\n    print(s)\n    return s\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = []\n    for num in [a,b,c]:\n        if num >=0:\n            numbers.append(num)\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return statistics.median(numbers)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    result = 0\n    if a <= b <= c:\n        if a <= c <= b:\n            return c\n        elif c <= a <= b:\n            return a\n        else:\n            return b\n    elif a <= c <= b:\n        if a <= b <= c:\n            return b\n        elif c <= a <= b:\n            return a\n        else:\n            return c\n    elif a <= b <= c:\n        if a <= c <= b:\n            return c\n        elif c <= a <= b:\n            return a\n        else:\n            return b\n    elif a <= c <= b:\n        if a <= b <= c:\n            return b\n        elif c <= a <= b:\n            return a\n        else:\n            return c\n    elif a <= b <= c:\n        if a <= b <= c:\n            return b\n        elif b <= a <= c:\n            return a\n        else:\n            return c\n    elif a <= b <= c:\n        if a <= c <= b:\n            return c\n        elif c <= a <= b:\n            return a\n        else:\n            return b\n    elif b <= a <= c:\n        if b <= c <= a:\n            return c\n        elif a <= b <= c:\n            return a\n        else:\n            return b\n    elif b <= c <= a:\n        if b <= a <= c:\n            return a\n        elif c <= b <= a:\n            return b\n        else:\n            return c\n    elif c <= a <= b:\n        if c <= b <= a:\n            return b\n        elif a <= c <= b:\n            return a\n        else:\n            return c\n    elif c <= b <= a:\n        if c <= a <= b:\n            return a\n        elif a <= c <= b:\n            return b\n        else:\n            return c\n    elif c <= b <= a:\n        if c <= a <= b:\n            return a\n        elif a <= c <= b:\n            return b\n        else:\n            return c\n    elif a <= b <= c:\n        if a <= c <= b:\n            return c\n        elif c <= a <= b:\n            return a\n        else:\n            return b\n    elif a <= c <= b:\n        if a <= b <= c:\n            return b\n        elif b <= a <= c:\n            return a\n        else:\n            return c\n    elif a <= c <= b:\n        if a <= b <= c:\n            return b\n        elif b <= a <= c:\n            return a\n        else:\n            return c\n    else:\n        return \"None\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = max(a,b,c)\n    y = min(a,b,c)\n    if x == y:\n        return x\n    if x == a:\n        return (y+x)/2\n    if x == b:\n        return (y+x)/2\n    if x == c:\n        return (y+x)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # https://stackoverflow.com/questions/5098438/sum-of-digits-in-a-number\n    digits_sum = 0\n    for i in nums:\n        digits_sum += sum_of_digits(int(i))\n    return digits_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += (num % 10)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for x in nums:\n        sum_of_digits += len(str(x))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return nums\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += sum_of_digits_helper(i)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num%10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(val1 ^ val2 for val1, val2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (tup1, tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = (test_tup1[0], test_tup1[1])\n    for i in range(2, len(test_tup1)):\n        res = (res[0] ^ test_tup1[i], res[1] ^ test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert type(test_tup1) is tuple\n    assert type(test_tup2) is tuple\n    return tuple(x^y for (x,y) in zip(test_tup1, test_tup2))\n    \n    \nif __name__ == '__main__':\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    print(bitwise_xor(test_tup1, test_tup2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"ERROR: Length of tuples are not same\")\n        return\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        x = test_tup1[0]\n        y = test_tup2[1]\n        res = x ^ y\n        return(res)\n    else:\n        return(test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        xor = test_tup1[i] ^ test_tup2[i]\n        lst.append(xor)\n    return tuple(lst)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    \n    \n    \n    "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #add your code here\n    freq = {}\n    for x in test_list:\n        for y in x:\n            if y in freq:\n                freq[y] = freq[y] + 1\n            else:\n                freq[y] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for x in range(0, len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        freq[i] = freq.get(i,0) + 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = sorted(set(tuple(i) for i in test_list))\n    print(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if not test_list:\n        return 0\n    if len(test_list) == 1:\n        return 1\n    if len(test_list) == 2:\n        return len(set(test_list))\n    if len(test_list) == 3:\n        if test_list[0][0] == test_list[1][0]:\n            return 1 + extract_freq(test_list[2:])\n        if test_list[0][1] == test_list[1][1]:\n            return 1 + extract_freq(test_list[2:])\n        if test_list[0][0]!= test_list[1][0] and test_list[0][1]!= test_list[1][1]:\n            return 1 + extract_freq(test_list[2:])\n        return 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #funtion takes a list of lists as input\n    #function should return the number of unique tuples in the list\n    \n    freq_dict = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] in freq_dict:\n                freq_dict[test_list[i][j]] += 1\n            else:\n                freq_dict[test_list[i][j]] = 1\n    return len(freq_dict)\n        \nprint(extract_freq([[1,2,2,4,3,3], [1,2,3,4,5,6], [1,2,3,4,5,6]]))"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 1:\n        return 1\n    else:\n        return extract_freq(test_list[1:]) + test_list[0]\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tuple_list = []\n    for item in test_list:\n        if item not in tuple_list:\n            tuple_list.append(item)\n    return len(tuple_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1 < l2:\n        new_tup = tuple(map(lambda x, y: x+y, test_tup1, test_tup2[len(test_tup1):]))\n    else:\n        new_tup = tuple(map(lambda x, y: x+y, test_tup1[len(test_tup2):], test_tup2))\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get length of test_tup1 and test_tup2\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    \n    # initialize empty list to store the result\n    res = []\n    \n    # iterate through each element in test_tup1\n    for i in range(l1):\n        # initialize empty list to store the result\n        curr = []\n        \n        # iterate through each element in test_tup2\n        for j in range(l2):\n            # add both the elements in test_tup1 and test_tup2\n            curr.append(test_tup1[i] + test_tup2[j])\n        \n        # add the result in curr to res\n        res.append(curr)\n    \n    # return the result\n    return res\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((x1 + x2) for x1, x2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_len = len(test_tup1)\n    else:\n        max_len = len(test_tup2)\n    for index in range(max_len):\n        try:\n            test_tup1[index] += test_tup2[index]\n        except IndexError:\n            test_tup1 += (0,)\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst_1 = list(test_tup1)\n    lst_2 = list(test_tup2)\n    result = []\n    for i in range(len(lst_1)):\n        result.append(lst_1[i]+lst_2[i])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    first_tuple = tuple(map(sum, zip(test_tup1, test_tup2)))\n    return first_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        new_tup = new_tup + (i + j,)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    final_list = []\n    for i in range(len(test_tup1_list)):\n        final_list.append(test_tup1_list[i] + test_tup2_list[i])\n    return tuple(final_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = []\n    for i in range(0, len(test_tup1)):\n        test_tup3.append((test_tup1[i] + test_tup2[i]))\n    return test_tup3\n    \nprint(add_nested_tuples((1,2),(3,4)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    final_list = []\n    for i in range(len(list1)):\n        final_list.append((list1[i] + list2[i]))\n    return tuple(final_list)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(f'{a} is less than {b}')\n    elif(a>b):\n        print(f'{b} is less than {a}')\n    else:\n        print(f'Both are equal')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\n    \ndef add(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n    \ndef subtract(a,b):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b\n    \ndef calculate(a,b,c,d):\n    '''\n    Write a python function to perform the calculation.\n    '''\n    if c==\"+\":\n        return add(a,b)\n    elif c==\"-\":\n        return subtract(a,b)\n    elif c==\"*\":\n        return multiply(a,b)\n    elif c==\"/\":\n        return divide(a,b)\n    else:\n        print(\"Invalid Operation\")\n        \nprint(\"Welcome to the Calculator.\\n\")\nwhile True:\n    a=int(input(\"Enter the first number: \"))\n    b=int(input(\"Enter the second number: \"))\n    print(\"Select the operation.\")\n    print(\"1.Addition\")\n    print(\"2.Subtraction\")\n    print(\"3.Multiplication\")\n    print(\"4.Division\")\n    print(\"5.Exit\")\n    c=int(input(\"Enter your choice: \"))\n    if c==1:\n        print(calculate(a,b,\"+\",c))\n    elif c==2:\n        print(calculate(a,b,\"-\",c))\n    elif c==3:\n        print(calculate(a,b,\"*\",c))\n    elif c==4:\n        print(calculate(a,b,\"/\",c))\n    elif c==5:\n        break\n    else:\n        print(\"Invalid Operation\")\n        "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(b,\"is minimum\")\n    else:\n        print(a,\"is minimum\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (len(tuplex)==len(tuple1)):\n        for i in range(len(tuplex)):\n            if tuplex[i]==tuple1[i]:\n                pass\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for x in range(len(tuple1)):\n        if tuplex == tuple1[x]:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\ntuplex = (1,4,3)\ntuple1 = (1,4,3,6)\nprint(check_tuplex(tuplex,tuple1))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print('Present')\n    else:\n        print('Not present')\n    \ncheck_tuplex((1, 2, 3, 5, 7, 8),(1, 2, 3, 5, 7, 8))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in range(len(tuplex)): \n        if tuplex[x] == tuple1: \n            return True\n    else:\n        return False\n    \nprint(check_tuplex((1,2,3,4),1))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (1,3,5,7,9)\n    return (7 in tuplex)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x & 1) :\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return(x%2==0)\n    else: \n        return(x%2==1) \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x\n    while(y & 1) == 0:\n        y = y >> 1\n    if y == 0:\n        return 1\n    else:\n        return 0\n    \ndef find_sum(n):\n    '''\n    Write a python function to find the sum of its first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i+1\n    return sum\n    \ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n    \ndef find_square_root(x):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    return math.sqrt(x)\n    \ndef find_proper_divisor(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i*i <= n:\n        if n%i == 0:\n            factors.append(i)\n            n = n//i\n            i = 2\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n = n//i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n    \ndef find_common_divisor(n1, n2):\n    '''\n    Write a python function to find the common divisor of two given numbers.\n    '''\n    while n2!= 0:\n        n1, n2 = n2, n1%n2\n    return n1\n    \ndef find_repetitive_pattern(pat):\n    '''\n    Write a python function to find the first occurance of the given pattern in a string.\n    '''\n    if pat == \"\":\n        return -1\n    for i in range(len(pat)-1):\n        if pat[i]!= pat[i+1]:\n            return i\n    return -1\n    \ndef find_prime_factor(x):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if x == 1:\n        return 0\n    i = 2\n    factors = []\n    while i*i <= x:\n        if x%i == 0:\n            factors.append(i)\n            x = x//i\n            i = 2\n        else:\n            i += 1\n    if x!= 1:\n        factors.append(x)\n    return factors\n    \ndef find_lcm(x, y):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    x = abs(x)\n    y = abs(y)\n    while x % y!= 0:\n        x, y = y, x % y\n    return y\n    \ndef find_prime_factor_rec(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec2(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec3(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec4(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        while n % i == 0:\n            n = n // i\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec5(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec6(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec7(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec8(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec9(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            factors.append(i)\n        i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n    \ndef find_prime_factor_rec10(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return 0\n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n    \ndef find_number(x): \n    '''\n    Write a python function to find whether the number is even or odd.\n    '''\n    return (x % 2)\n    \ndef find_minus(x): \n    '''\n    Write a python function to find the minimum value in a list of integers.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return min(l)\n    \ndef find_plus(x): \n    '''\n    Write a python function to find the maximum value in a list of integers.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return max(l)\n    \ndef find_multiply(x): \n    '''\n    Write a python function to find the product of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return reduce(lambda x,y:x*y,l)\n    \ndef find_square(x): \n    '''\n    Write a python function to find the square of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return map(lambda x:x**2,l)\n    \ndef find_cube(x): \n    '''\n    Write a python function to find the cube of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return map(lambda x:x**3,l)\n    \ndef find_average(x): \n    '''\n    Write a python function to find the average of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return sum(l)/len(l)\n    \ndef find_sum(x): \n    '''\n    Write a python function to find the sum of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return sum(l)\n    \ndef find_product(x): \n    '''\n    Write a python function to find the product of all the integers in a list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    return reduce(lambda x,y:x*y,l)\n    \ndef find_decimal(x): \n    '''\n    Write a python function to find the decimal value of an integer.\n    '''\n    return x%1\n    \ndef find_octal(x): \n    '''\n    Write a python function to find the octal value of an integer.\n    '''\n    return x%8\n    \ndef find_hexadecimal(x): \n    '''\n    Write a python function to find the hexadecimal value of an integer.\n    '''\n    return x%16\n    \ndef find_binary(x): \n    '''\n    Write a python function to find the binary value of an integer.\n    '''\n    return x%2\n    \ndef find_odd_even(x): \n    '''\n    Write a python function to find whether a given integer is odd or even.\n    '''\n    return (x % 2)\n    \ndef find_smallest_larger(x,y): \n    '''\n    Write a python function to find the smallest of two numbers.\n    '''\n    return min(x,y)\n    \ndef find_largest_smaller(x,y): \n    '''\n    Write a python function to find the largest of two numbers.\n    '''\n    return max(x,y)\n    \ndef find_smallest_larger(x,y,z): \n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    return min(x,y,z)\n    \ndef find_largest_smaller(x,y,z): \n    '''\n    Write a python function to find the largest of three numbers.\n    '''\n    return max(x,y,z)\n    \ndef find_smallest_larger_three(x,y,z): \n    '''\n    Write a python function to find the smallest of four numbers.\n    '''\n    return min(x,y,z,z)\n    \ndef find_largest_smaller_three(x,y,z): \n    '''\n    Write a python function to find the largest of four numbers.\n    '''\n    return max(x,y,z,z)\n    \ndef find_nth_prime(x): \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    n = x-1\n    i = 0\n    while(i < n):\n        if(primes[i]>x):\n            n = n-1\n        i = i+1\n    return primes[n]\n    \ndef find_prime_factors(x): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    factors = []\n    i = 0\n    while(i<len(primes)):\n        if(primes[i]>x):\n            break\n        if(x%primes[i] == 0):\n            factors.append(primes[i])\n            while(x%primes[i] == 0):\n                x = x/primes[i]\n        i = i+1\n    if(x>1):\n        factors.append(x)\n    return factors\n    \ndef find_smallest_larger_prime(x,y): \n    '''\n    Write a python function to find the smallest of two prime numbers.\n    '''\n    return min(x,y)\n    \ndef find_largest_smaller_prime(x,y): \n    '''\n    Write a python function to find the largest of two prime numbers.\n    '''\n    return max(x,y)\n    \ndef find_smallest_larger_prime(x,y,z): \n    '''\n    Write a python function to find the smallest of three prime numbers.\n    '''\n    return min(x,y,z)\n    \ndef find_largest_smaller_prime(x,y,z): \n    '''\n    Write a python function to find the largest of three prime numbers.\n    '''\n    return max(x,y,z)\n    \ndef find_prime_product(x): \n    '''\n    Write a python function to find the product of all the prime numbers in a given list.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    res = 1\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if(find_prime_factors(l[i]) == find_prime_factors(l[j])):\n                res = res*l[i]\n    return res\n    \ndef find_prime_factors_product(x): \n    '''\n    Write a python function to find the product of all the prime factors of a given number.\n    '''\n    l = []\n    for i in range(1,x+1):\n        l.append(i)\n    res = 1\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if(find_prime_factors(l[i]) == find_prime_factors(l[j])):\n            "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(map(int, str(n)))\n    for i in range(len(n) - 1, 0, -1):\n        if n[i - 1] < n[i]:\n            n[i], n[i - 1] = n[i - 1], n[i]\n    return int(''.join(map(str, n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n)-1\n    while i >= 0:\n        if n[i] >= n[i-1]:\n            i -= 1\n        else:\n            n[i],n[i-1] = n[i-1],n[i]\n            i -= 1\n    n = int(''.join(n))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if n == '0':\n        return '0'\n    i = 0\n    n = n[::-1]\n    while i < len(n) and n[i] == '0':\n        i += 1\n    if i == len(n):\n        return '0'\n    k = 0\n    while k < len(n):\n        if k == i:\n            k += 1\n            continue\n        else:\n            temp = int(n[i])\n            n = n[:i] + str(temp) + n[i+1:]\n            k += 1\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Write your code here\n    if n <= 0:\n        return False\n    s = str(n)\n    s = s[::-1]\n    new_s = list(s)\n    if int(\"\".join(new_s)) < n:\n        return False\n    else:\n        new_s = \"\".join(new_s)\n        new_s = int(new_s)\n        return new_s\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    max_val = max(digits)\n    digits.remove(max_val)\n    for i in range(len(digits)):\n        max_val = max(digits)\n        max_ind = digits.index(max_val)\n        digits.remove(max_val)\n        digits.insert(max_ind + i, max_val)\n    return int(''.join([str(i) for i in digits]))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        n_str = str(n)\n        len_str = len(n_str)\n        num_str = n_str[::-1]\n        print(num_str)\n        num_str = int(num_str)\n        \n        while len(str(num_str)) < len_str:\n            num_str = str(num_str)\n            num_str = int(num_str)\n            num_str = int(num_str + 1)\n            print(num_str)\n            num_str = str(num_str)\n            num_str = int(num_str)\n            print(num_str)\n        return num_str\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if not s:\n        return -1\n    if s == '1':\n        return 99999999\n    if n > 99999999:\n        return -1\n    if n < 99999999:\n        x = list(map(int, s))\n        if x[0] < x[1]:\n            x[0], x[1] = x[1], x[0]\n        if x[0] < x[1]:\n            x[0], x[1] = x[1], x[0]\n        for i in range(2, len(x)):\n            if x[i] < x[i - 1]:\n                x[i], x[i - 1] = x[i - 1], x[i]\n        s = str(int(''.join(map(str, x))))\n        return s\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 1:\n        return 9\n    num = n\n    s = str(num)\n    for i in range(1, len(s)):\n        s = s[1:] + s[0]\n        print(s)\n        if int(s) > int(n):\n            return int(s)\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #initializing the digits in the given string and convert it into integers\n    digits = list(str(n))\n    #converting the digits into integers\n    #list comprehension\n    #assuming the digit is of even length\n    #converting the digit to integer\n    #for example if we have '54' then the digits are '54'\n    #then we want to convert the digits into integers and then convert them into integers\n    #so that the list is of length '2' and the number is converted to '54' which is of length '2'\n    #so that we get '54'\n    #list of integers with length '2'\n    #we can use the '+' operator to concatenate the elements of the list and assign the results to the list\n    #we can use * to repeat the elements of the list\n    #'*' operator is equivalent to the '*' operator in java\n    #for example in case of '54' we want to concatenate '54'\n    #and '54' again so that the list becomes ['54', '54']\n    #we can use '+' operator to concatenate the elements of the list\n    #we can use * to repeat the elements of the list\n    #it is used to repeat the elements of the list\n    #[1,2,3]\n    #* repeats the elements of the list\n    #[1,2,3,1,2,3]\n    #* repeats the elements of the list\n    #[1,2,3,4,5,6,7]\n    #* repeats the elements of the list\n    #[1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7]\n    #so that the list becomes ['54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54']\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #example\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #[1,2,3]\n    #[1,2,3,1,2,3]\n    #[1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7]\n    #so that the list becomes ['54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54']\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #example\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #[1,2,3]\n    #[1,2,3,1,2,3]\n    #[1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7]\n    #so that the list becomes ['54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54']\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #example\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #[1,2,3]\n    #[1,2,3,1,2,3]\n    #[1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7]\n    #so that the list becomes ['54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54']\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concatenate '54'\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #example\n    #concatenation is one of the most common and common operations\n    #for the concatenation we use '+' operator\n    #[1,2,3]\n    #[1,2,3,1,2,3]\n    #[1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7]\n    #[1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7]\n    #so that the list becomes ['54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54', '54']\n    #instead of repeated elements we can just concatenate the elements by using '+' operator\n    #for example in case of '54' we want to concate"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    if len(nums1) == 0:\n        return result\n    if len(nums2) == 0:\n        return result\n    if len(nums1) == 1:\n        return result\n    if len(nums2) == 1:\n        return result\n    if k == 0:\n        return []\n    if k > len(nums1) + len(nums2):\n        return result\n    result.append([nums1[0], nums2[0]])\n    temp = []\n    heapq.heapify(temp)\n    heapq.heappush(temp, [nums1[1], nums2[0]])\n    for i in range(2, len(nums1)):\n        if nums1[i] < nums1[i-1]:\n            return result\n        heapq.heappush(temp, [nums1[i], nums2[0]])\n    for i in range(2, len(nums2)):\n        if nums2[i] < nums2[i-1]:\n            return result\n        heapq.heappush(temp, [nums1[0], nums2[i]])\n    for i in range(1, k):\n        nums = heapq.heappop(temp)\n        if len(nums) > 1:\n            result.append([nums[0], nums[1]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # # Solution using heap\n    # heap = []\n    # for i in range(0, min(len(nums1), k)):\n    #     heapq.heappush(heap, (nums1[i], nums2[0]))\n    #     while len(heap) > k:\n    #         heapq.heappop(heap)\n    #     return [(heapq.heappop(heap)[1], heapq.heappop(heap)[0])]\n    # return []\n    \n    # Solution using sort + merge\n    nums1.sort()\n    nums2.sort()\n    i, j, res = 0, 0, []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            res.append((nums1[i], nums2[j]))\n            i += 1\n        else:\n            j += 1\n    return res[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # print(nums1)\n    # print(nums2)\n    # print(k)\n    ans = []\n    # two points\n    p1 = 0\n    p2 = 0\n    n = len(nums1)\n    m = len(nums2)\n    while k > 0 and p1 < n and p2 < m:\n        # print(\"index 1 \", p1, \"index 2\", p2)\n        # print(nums1[p1], nums2[p2])\n        if nums1[p1] < nums2[p2]:\n            ans.append((nums1[p1], nums2[p2]))\n            p1 += 1\n        else:\n            ans.append((nums2[p2], nums1[p1]))\n            p2 += 1\n        k -= 1\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[i], i, i))\n    \n    res = []\n    while heap:\n        # print(heap, res)\n        val, i1, i2 = heapq.heappop(heap)\n        res.append([nums1[i1], nums2[i2]])\n        if i2 + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i1] + nums2[i2 + 1], i1, i2 + 1))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n    while len(res) < k and heap:\n        val, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i+1]+nums2[j], i+1, j))\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i]+nums2[j+1], i, j+1))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) or k > len(nums2): return []\n    \n    # Step 1: First generate the heap with the length of the first array and the second array\n    # Step 2: Convert to a heap, pop out first element and move onto the next\n    # Step 3: Convert to a heap, pop out second element and move onto the next\n    # Step 4: while the heap size is lesser than the k, pop from the heaps, convert to a heap, then pop again\n    # Step 5: repeat steps 2 to 4 until the heap is empty.\n    \n    \n    # generate heap\n    heap = []\n    heapq.heapify(heap)\n    for x in nums1:\n        heapq.heappush(heap, (x, 0))\n    for x in nums2:\n        heapq.heappush(heap, (x, 1))\n    \n    # convert to heap\n    nums1 = []\n    nums2 = []\n    while heap:\n        x, y = heapq.heappop(heap)\n        nums1.append(x)\n        if y == 0:\n            nums2.append(x)\n    \n    # find k\n    res = []\n    i = 0\n    j = 0\n    while i < k and j < len(nums1):\n        if nums1[i] < nums2[j]:\n            res.append([nums1[i], nums2[j]])\n            i += 1\n        else:\n            j += 1\n    \n    return res\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time: O(n log k) | Space: O(n)\n    # create heap\n    arr1 = []\n    arr2 = []\n    for i in range(len(nums1)):\n        heapq.heappush(arr1, [nums1[i], i])\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(h, (n1 + n2, (n1,n2)))\n    return sorted([pair for pair in h][:k])\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    #min_heap for storing k pairs with smallest sum in array1\n    min_heap = []\n    #pair_index is the index of the element in array1 and array2.\n    pair_index = 0\n    #while len(min_heap) < k and pair_index < len(nums1):\n    while len(min_heap) < k and pair_index < len(nums1):\n        #add all pairs that have a pair of elements from array1\n        if len(min_heap) < k:\n            #add all pairs with one element from array1\n            for index in range(len(nums1)):\n                pair = (nums1[index] + nums2[pair_index], index, pair_index)\n                heapq.heappush(min_heap,pair)\n            pair_index += 1\n        #get the first pair with smallest sum\n        min_pair = min_heap[0]\n        pairs.append(min_pair[0])\n        #remove the first pair in heap\n        heapq.heappop(min_heap)\n        #remove the first element in min_heap if it is in the second array, otherwise keep removing it\n        #if there is one element in second array that is smaller than the first element in min heap, remove it\n        while min_pair[1] in nums2 and min_pair[2] < len(nums2) - 1:\n            heapq.heappop(min_heap)\n            min_pair = min_heap[0]\n        #once the first element from min heap is in second array, remove it from min_heap\n        if min_pair[1] in nums2:\n            heapq.heappop(min_heap)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    i = 0\n    j = 0\n    res = []\n    m = len(nums1)\n    n = len(nums2)\n    while k:\n        if nums1[i] < nums2[j]:\n            res.append((nums1[i], nums2[j]))\n            k -= 1\n            i += 1\n        elif nums1[i] == nums2[j]:\n            res.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(0,len(list1)):\n        if list1[i][0]*list1[i][1] < min_product:\n            min_product = list1[i][0]*list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = [(x,y) for x,y in list1]\n    if len(l) == 0:\n        return 0\n    min_product = min(l, key=lambda x: (x[0] * x[1]))\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if list1[i][0]*list1[i][1]<min_prod:\n            min_prod = list1[i][0]*list1[i][1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 100\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    for i in new_list:\n        if i[0] * i[1] < min:\n            min = i[0] * i[1]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, (list1[i][0] * list1[i][1], list1[i][0] * list1[j][1], list1[j][0] * list1[i][1], list1[j][0] * list1[j][1]))\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # return min(x*y for x,y in list1)\n    min_product = 1\n    for x, y in list1:\n        min_product = min(x * y, min_product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        min_product = list1[0]\n        return min_product\n    else:\n        for i in range(len(list1)):\n            temp_product = list1[i][0] * list1[i][1]\n            if min_product == None:\n                min_product = temp_product\n            elif temp_product < min_product:\n                min_product = temp_product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(1,len(list1)):\n        if(min_product[0] > list1[i][0]):\n            min_product = list1[i]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    a,b,c,d,e = list1\n    return min(a,b,c,d,e)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = list1[0][0]\n    for pair in list1:\n        product = min(product, pair[0]*pair[1])\n    return product\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=listval[0]\n    for i in range(len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    m = listval[0]\n    for i in range(1, len(listval)):\n        if m > listval[i]:\n            m = listval[i]\n    return m"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    def min(val):\n        if val:\n            if len(val) == 1:\n                return val[0]\n            else:\n                min_val = val[0]\n                for i in range(1, len(val)):\n                    if min_val > val[i]:\n                        min_val = val[i]\n                return min_val\n        else:\n            return 0\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min:\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    m = listval[0]\n    for i in listval:\n        if i < m:\n            m = i\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1,len(listval)):\n        if min_value > listval[i]:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_', '-')\n    result = ''\n    for c in word:\n        if c.isupper():\n            result += c\n        else:\n            result += c.lower()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    output = ''.join(x for x in word.title() if not x.isspace())\n    return output[0].lower() + output[1:]\n    \nprint(snake_to_camel('snake_case_string'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title() if i == 0 else word[:1].upper() + word[1:].lower()\n    for i, word in enumerate(re.findall(r'\\w+', word.strip())))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    return re.sub(r\"(?<=[a-z])(?=[A-Z])\", \"\", word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your code here\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word[0].lower() + re.sub('_([a-z])', lambda x: x.group(1).upper(), word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def camel_case(word):\n        return ''.join(i for i in word.title() if not i.isalpha())\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return word.title()\n    return ''.join([x.capitalize() for x in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_','',word)\n    word = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n    \nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] % 2!= 0:\n            i += 1\n        if l[j] % 2!= 0:\n            j -= 1\n        if l[i] % 2 == 0 and l[j] % 2 == 0:\n            l[i], l[j] = l[j], l[i]\n            i += 1\n            j -= 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i%2 == 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            l.remove(l[i])\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2 == 1:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # if no element is given\n    if len(l) == 0:\n        return l\n    # odd numbers\n    odd_nums = []\n    for i in l:\n        if i % 2!= 0:\n            odd_nums.append(i)\n    return odd_nums\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #l = [-1, -2, -3, 0, 1, 2, 3, 4]\n    numbers = []\n    for i in l:\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.pop(0)\n    for x in range(len(l)):\n        if l[x]%2 == 0:\n            l.pop(x)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.pop(0)\n    l.pop(0)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l.pop(i)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) <= n:\n        raise ValueError(\"List is shorter than n.\")\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list2 = []\n    # for i in range(len(list1)):\n    #     list2.append(list1[i][n])\n    # return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,4)]\n    # n = 2\n    # output = (3, 4)\n    # print(list1)\n    # print(n)\n    # print(output)\n    # print(list1[n - 1])\n    # list1 = [(1,2), (1,4), (3,"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1)[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # print(f'Original list: {list1}')\n    # print(f'n: {n}')\n    # print(f'Original list: {list1}')\n    new_list = []\n    for i in list1:\n        if i[1] == n:\n            new_list.append(i[0])\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    length = len(list1)\n    if n <= length:\n        return list1[n-1]\n    else:\n        return None\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_second_element(list1):\n    '''\n    Write a function to extract the second element from a given list of tuples.\n    '''\n    if len(list1) < 2:\n        raise ValueError\n    return list1[1]\n    \n    \ndef extract_nth_element_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_second_element_by_index(list1):\n    '''\n    Write a function to extract the second element from a given list of tuples.\n    '''\n    if len(list1) < 2:\n        raise ValueError\n    return list1[1]\n    \n    \ndef extract_nth_element_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_second_element_by_position(list1):\n    '''\n    Write a function to extract the second element from a given list of tuples.\n    '''\n    if len(list1) < 2:\n        raise ValueError\n    return list1[1]\n    \n    \ndef extract_last_element(list1):\n    '''\n    Write a function to extract the last element from a given list of tuples.\n    '''\n    return list1[-1]\n    \n    \ndef extract_last_element_by_index(list1):\n    '''\n    Write a function to extract the last element from a given list of tuples.\n    '''\n    if len(list1) < 1:\n        raise ValueError\n    return list1[-1]\n    \n    \ndef extract_last_element_by_position(list1):\n    '''\n    Write a function to extract the last element from a given list of tuples.\n    '''\n    if len(list1) < 1:\n        raise ValueError\n    return list1[-1]\n    \n    \ndef extract_first_element(list1):\n    '''\n    Write a function to extract the first element from a given list of tuples.\n    '''\n    return list1[0]\n    \n    \ndef extract_first_element_by_index(list1):\n    '''\n    Write a function to extract the first element from a given list of tuples.\n    '''\n    if len(list1) < 1:\n        raise ValueError\n    return list1[0]\n    \n    \ndef extract_first_element_by_position(list1):\n    '''\n    Write a function to extract the first element from a given list of tuples.\n    '''\n    if len(list1) < 1:\n        raise ValueError\n    return list1[0]\n    \n    \ndef extract_nth_element_from_last(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_from_last_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_from_last_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_from_first(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_nth_element_from_first_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_nth_element_from_first_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_nth_element_from_last_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_nth_element_from_last_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n-1]\n    \n    \ndef extract_nth_element_by_index_from_first(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_nth_element_by_index_from_first_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_nth_element_by_index_from_first_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_nth_element_by_index_from_last(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_by_index_from_last_by_index(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_by_index_from_last_by_position(list1, n):\n    '''\n    Write a function to extract the nth element from the last element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[len(list1)-n]\n    \n    \ndef extract_nth_element_by_position_from_first(list1, n):\n    '''\n    Write a function to extract the nth element from the first element of a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError\n    return list1[n]\n    \n    \ndef extract_nth"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #nth_element = []\n    #for i in range(len(list1)):\n    #    if i == n-1:\n    #        nth_element.append(list1[i][1])\n    #return nth_element\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print('Given list 1 = {}'.format(list1))\n    print('Given list 2 = {}'.format(list2))\n    i = 0\n    j = 0\n    count = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        else:\n            j += 1\n    if count == len(list2):\n        print('Overlapping')\n    else:\n        print('No Overlapping')\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #code here\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                return True\n            else:\n                continue\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                flag = True\n    return flag\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    n1 = len(list1)\n    n2 = len(list2)\n    if n1 > n2:\n        for i in range(n1-n2):\n            if list1[i] == list2[0]:\n                return True\n        return False\n    else:\n        for i in range(n2-n1):\n            if list2[i] == list1[0]:\n                return True\n        return False\n    \nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5]\nlist3 = [1,2,3,4,5]\nlist4 = [6,7,8,9,10]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                pass\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 == [] or list2 == []:\n        return 0\n    for i in list1:\n        if i in list2:\n            return 1\n    return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return -1\n    high_pair = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > arr[-1]:\n                high_pair = arr[i], arr[j]\n                break\n    return high_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>max_product:\n                max_product=arr[i]*arr[j]\n    print(max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    ans = max(arr)\n    arr.remove(max(arr))\n    for i in arr:\n        if max(arr)%i==0:\n            ans = max(ans,i)\n            break\n    return ans \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n    print(res)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_value = arr[0] * arr[1]\n    min_value = arr[0] * arr[1]\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n    print(\"Maximum element: \",max_value)\n    print(\"Minimum element: \",min_value)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product = arr[0]*arr[1]\n    first_number = arr[0]\n    second_number = arr[1]\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j]>highest_product:\n                highest_product = arr[i]*arr[j]\n                first_number = arr[i]\n                second_number = arr[j]\n    return (first_number,second_number)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(len(arr)-1): \n        for j in range(i+1,len(arr)):\n            if (arr[i]*arr[j] > max_product) :\n                max_product = arr[i]*arr[j] \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr,reverse=True) \n    count = 1\n    i = 0\n    while i < len(arr)-1: \n        if arr[i]*arr[i+1] < 0: \n            count+=1\n            i += 2\n        else: \n            i+=1\n    print(count)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 1: \n        return -1\n    min1 = arr[0]\n    min2 = arr[1]\n    maxProd = min1 * min2\n    for i in range(n):\n        if arr[i] > maxProd:\n            maxProd = arr[i]\n            max1 = i\n        elif arr[i] < maxProd:\n            maxProd = arr[i]\n            max2 = i\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = 0\n    maxProduct = arr[0]*arr[1]\n    while(i<len(arr)):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]*arr[l+1]\n    while(i<h):\n        if(maxProduct<arr[i]*arr[i+1]):\n            maxProduct = arr[i]*arr[i+1]\n        i = i+1\n    return maxProduct\ndef max_Product(arr,l,h):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #maxProduct(arr,0,len(arr)-1)\n    i = l\n    maxProduct = arr[l]"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(0, len(Input)):\n        l1.append(Input[i][0])\n        l2.append(Input[i][1])\n    l1 = set(l1)\n    l2 = set(l2)\n    res = (l1 & l2)\n    if len(res) == 0:\n        return None\n    else:\n        return min(res)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_set = set()\n    for index, val in enumerate(Input):\n        if val[0] not in group_set:\n            group_set.add(val[0])\n            continue\n        group_set.add(val[0])\n        if val[1] not in group_set:\n            group_set.add(val[1])\n            continue\n        group_set.add(val[1])\n    return group_set\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    if n == 0:\n        return False\n    if n == 1:\n        return Input[0][0]\n    first = Input[0][0]\n    for i in range(n-1):\n        if first!= Input[i][0]:\n            return first\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if Input[i][0]==Input[j][0]:\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v2(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v3(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v4(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v5(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v6(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v7(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v8(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v9(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v10(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v11(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v12(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    return []\ndef group_list_of_numbers_by_decimal_places_in_order_v13(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return []\n    Input.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if (Input[i][1]==Input[j][1]) and (Input[i][2]==Input[j][2]):\n                return Input[i]\n    retur"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # creating a set of unique elements in the list of tuple\n    set1 = set(Input)\n    \n    # getting the first element from each tuple\n    for i in set1:\n        First = i[0]\n        \n    # creating a dictionary to map the first element with the tuple that has that element\n    First_to_tuple = dict()\n    \n    # iterating through each tuple\n    for i in Input:\n        if i[0] == First:\n            First_to_tuple[i] = First\n    \n    # getting all the values of the dictionary\n    values = list(First_to_tuple.values())\n    \n    # getting the length of the tuple\n    length = len(values)\n    \n    # getting the maximum length of the tuple\n    max_len = max(length)\n    \n    # getting the minimum length of the tuple\n    min_len = min(length)\n    \n    # creating a list for storing the required elements\n    list1 = []\n    \n    # getting all the minimum length of the tuple\n    for i in range(0, min_len):\n        a = First_to_tuple[values[i]]\n        list1.append(a)\n    \n    # getting all the maximum length of the tuple\n    for i in range(min_len, max_len):\n        a = First_to_tuple[values[i]]\n        list1.append(a)\n    \n    # printing the list\n    print(list1)\n    \ndef pop_last_element(Input):\n    '''\n    Write a function to remove the last element from the tuple.\n    '''\n    # getting the length of the list\n    len_of_list = len(Input)\n    \n    # getting the last element of the list\n    last_element = Input[-1]\n    \n    # removing the last element\n    Input.pop()\n    \n    # printing the result\n    print(last_element)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    # print(n)\n    # print(type(Input))\n    # print(Input)\n    # print('----------------------------------------')\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = {} \n    for tuple in Input: \n        Output[tuple[0]] = 0\n    for tuple in Input: \n        Output[tuple[0]] = Output[tuple[0]] + tuple[1] \n    # Output = {key: value for key, value in Output.items() if value == max(Output.values())}\n    Output = {key: value for key, value in Output.items() if value == max(Output.values())}\n    return Output.keys()\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    common = []\n    for i in range(len(Input)):\n        lst.append(Input[i][0])\n    for j in range(len(lst)):\n        if lst[j] in lst[j+1:]:\n            common.append(lst[j])\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input, key=lambda x: x[0])\n    print(Input)\n    i = 0\n    while i < len(Input)-1:\n        print(Input[i][0],Input[i+1][0])\n        if Input[i][0] == Input[i+1][0]:\n            print(Input[i][1],Input[i+1][1])\n            if Input[i][1] < Input[i+1][1]:\n                Input.pop(i+1)\n                i -= 1\n            else:\n                Input.pop(i)\n        i += 1\n    return Input\nprint(group_tuples(['a','a','b','c','c','c']))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_first_elem = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if (Input[i][0] == Input[j][0]):\n                Common_first_elem.append(Input[i][1])\n    Common_first_elem = set(Common_first_elem)\n    Common_first_elem = sorted(Common_first_elem)\n    return Common_first_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_length_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_length_index = i\n    print('The element having maximum length is : ', lst[max_length_index])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        print(\"Empty list\")\n        return\n    else:\n        max_len = max(lst, key=len)\n        print(\"Element with maximum length is\", max_len) \n        \nlst = ['I', 'am', 'a', 'boy', 'of', 'kar', 'ana', 'ko', 'ko', 'ko', 'ko'] \nFind_Max(lst) \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)): \n        if(len(lst[i]) > m): \n            m = len(lst[i])\n            max_val = lst[i]\n    return max_val \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max=0\n    for i in range(len(lst)):\n        if len(lst[i])>=Max:\n            Max=len(lst[i])\n            Max_i=i\n    return Max_i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    max_len_element=''\n    for i in range(0,len(lst)):\n        if max_len<len(lst[i]):\n            max_len=len(lst[i])\n            max_len_element=lst[i]\n    return max_len_element\nprint(Find_Max([['abc', 'def', 'ghi'], [], ['jkl','mno']]))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max:\n            Max = len(lst[i])\n    print(\"The maximum length element is : \",Max)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_length = len(lst)\n    max_length = lst_length\n    \n    for i in range(lst_length):\n        cur_length = len(lst[i])\n        if cur_length > max_length:\n            max_length = cur_length\n            max_index = i\n            \n    return lst[max_index]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max_len=0\n    for i in range(0,len(lst)):\n        if(len(lst[i])>max_len):\n            max_len=len(lst[i])\n            max_idx=i\n            \n    return max_idx\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            print(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in range(len(lst)):\n        if len(lst[i])>max:\n            max=len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i])==max:\n            return lst[i]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = sorted(list1)\n    numbers = []\n    for x in list1:\n        numbers.append(round(x,2))\n    print(\"Sum of the list is: \", sum(numbers)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    x = [i for i in list1]\n    x = [round(i) for i in x]\n    print(sum([i*len(x) for i in x]))\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summation = 0\n    list_summation = []\n    for i in range(len(list1)):\n        number = round(list1[i], 2)\n        list_summation.append(number)\n    return summation\n    \nround_and_sum([1.3, 1.7, 1.9])\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num_sum = 0\n    for i in range(len(list1)):\n        num_sum += list1[i]\n        list1[i] = round(list1[i])\n    print('The sum of the list:', num_sum)\n    print('The length of the list:', len(list1))\n    print('The list rounded and summed:', num_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    for i in list1:\n        round_list.append(round(i))\n    sum_list = sum(round_list)\n    print(round_list)\n    print(\"The total sum multiplied by the length of the list is:\", sum_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total = total + i\n    print(\"Sum of all the numbers in the list: \", total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    print(round(sum * len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        list1[i] = math.ceil(list1[i])\n        sum1 += list1[i]*len(list1)\n    return sum1\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_and_sum = (sum(list1) // len(list1))\n    for i in range(0,len(list1)):\n        list1[i] = round(list1[i])\n    return round_and_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n):\n        cube_sum = cube_sum + (i**3)\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(input(\"Enter the number : \"))\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n        print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    print(sum)\ncube_Sum(2)\ncube_Sum(9)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    print(result)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if i%2==0:\n            sum=sum+i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize result\n    result = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*n*n\n    \nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    while(n > 0):\n        result = result + (n ** 3)\n        n = n - 2\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Your Code Below:\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out_string = \"\"\n    for element in test_tup:\n        out_string += element + \" \"\n    return out_string\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f'{test_tup[0]}{test_tup[1]}{test_tup[2]}{test_tup[3]}{test_tup[4]}{test_tup[5]}{test_tup[6]}'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    string = ''\n    for tup in test_tup:\n        string += tup + \" \"\n    return string\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)\n    \ndef join_string_tuple(test_tup):\n    '''\n    Write a function to join the given tuple elements by the delimiter.\n    '''\n    return test_tup.join()\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    total = 0\n    while i <= n:\n        total += i**3\n        i += 1\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cube = 0\n    for i in range(1,n+1):\n        sum_of_cube = sum_of_cube + (i**3)\n    print(sum_of_cube/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a=int(input(\"Enter no. of numbers:\"))\n    count=0\n    sum1=0\n    for i in range(1,n+1):\n        sum1 = sum1 + pow(i,3)\n        count = count + 1\n    print(sum1/count)\n    print(\"Average of cubes of first\",a,\"natural numbers is:\",sum1/count)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    while count<=n:\n        total += (count**3)\n        count += 1\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i**3)\n    return sum/n\ndef find_Maximum_Of_Cube(n):  \n    '''\n    Write a python function to find the maximum of cubes of first n natural numbers.\n    '''\n    max=0\n    for i in range(1,n+1):\n        if(i**3>max):\n            max=i**3\n    return max\ndef find_Minimum_Of_Cube(n):  \n    '''\n    Write a python function to find the minimum of cubes of first n natural numbers.\n    '''\n    min=0\n    for i in range(1,n+1):\n        if(i**3<min):\n            min=i**3\n    return min\ndef find_Probable_Divisors(n):  \n    '''\n    Write a python function to find the probable divisors of n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum=sum+i\n    return sum\ndef find_Minimum_Of_Factors(n):  \n    '''\n    Write a python function to find the minimum of factors of n.\n    '''\n    i=1\n    while(n%i!=0):\n        i=i+1\n    return i\ndef find_Maximum_Of_Factors(n):  \n    '''\n    Write a python function to find the maximum of factors of n.\n    '''\n    i=1\n    while(n%i!=0):\n        i=i+1\n    return i\ndef find_Maximum_Of_Divisors(n):  \n    '''\n    Write a python function to find the maximum of divisors of n.\n    '''\n    i=1\n    while(n%i!=0):\n        i=i+1\n    return i\ndef find_Minimum_Of_Divisors(n):  \n    '''\n    Write a python function to find the minimum of divisors of n.\n    '''\n    i=1\n    while(n%i!=0):\n        i=i+1\n    return i\ndef find_Probable_Divisors_using_sieve(n):  \n    '''\n    Write a python function to find the probable divisors of n.\n    '''\n    is_prime=True\n    is_found=False\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            is_found=True\n            is_prime=False\n            n=n/i\n            while(n%i==0):\n                n=n/i\n    if(is_found==False):\n        print(n)\n    if(is_prime):\n        print(\"{} is prime.\".format(n))\n    else:\n        print(\"{} is not prime.\".format(n))\ndef find_Probable_Divisors_using_sieve_and_testing(n):  \n    '''\n    Write a python function to find the probable divisors of n.\n    '''\n    is_prime=True\n    is_found=False\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            is_found=True\n            is_prime=False\n            n=n/i\n            while(n%i==0):\n                n=n/i\n    if(is_found==False):\n        print(n)\n    if(is_prime):\n        print(\"{} is prime.\".format(n))\n    else:\n        print(\"{} is not prime.\".format(n))\ndef find_Minimum_Of_Factors_using_sieve(n):  \n    '''\n    Write a python function to find the minimum of factors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Maximum_Of_Factors_using_sieve(n):  \n    '''\n    Write a python function to find the maximum of factors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Minimum_Of_Divisors_using_sieve(n):  \n    '''\n    Write a python function to find the minimum of divisors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Maximum_Of_Divisors_using_sieve(n):  \n    '''\n    Write a python function to find the maximum of divisors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Probable_Divisors_using_sieve_and_testing_again(n):  \n    '''\n    Write a python function to find the probable divisors of n.\n    '''\n    is_prime=True\n    is_found=False\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            is_found=True\n            is_prime=False\n            n=n/i\n            while(n%i==0):\n                n=n/i\n    if(is_found==False):\n        print(n)\n    if(is_prime):\n        print(\"{} is prime.\".format(n))\n    else:\n        print(\"{} is not prime.\".format(n))\ndef find_Minimum_Of_Factors_using_sieve_and_testing_again(n):  \n    '''\n    Write a python function to find the minimum of factors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Maximum_Of_Factors_using_sieve_and_testing_again(n):  \n    '''\n    Write a python function to find the maximum of factors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Minimum_Of_Divisors_using_sieve_and_testing_again(n):  \n    '''\n    Write a python function to find the minimum of divisors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Maximum_Of_Divisors_using_sieve_and_testing_again(n):  \n    '''\n    Write a python function to find the maximum of divisors of n.\n    '''\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n        else:\n            i=i+1\n    print(n)\ndef find_Probable_Divisors_using_sieve_and_testing_again_again(n):  \n    '''\n    Write a python function to find the probable divisors of n.\n    '''\n    is_prime=True\n    is_found=False\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            is_found=True\n            is_prime=False\n            n=n/i\n            while(n%i==0):\n                n=n/i\n    if(is_found==False):\n        print(n)\n    if(is_prime):\n        print(\"{} is prime.\".format"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<=n:\n        sum = sum + i**3\n        i = i+1\n    print(\"The average of cube is:\",sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n_cube = 0\n    counter = 0\n    while counter < n:\n        counter += 1\n        n_cube = n_cube + counter**3\n    n_average = n_cube / n\n    return n_average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #brute force\n    #iterate through the first n\n    #sum up the cubes of the numbers\n    #divide by the n\n    #return the answer\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if test_tuple is None or type(test_tuple)!= tuple:\n        return None\n    return tuple(map(lambda x:x[-1] if type(x) == str else x, test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = tuple(reversed(test_tuple[0]))\n    return output\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in test_tuple:\n        i = i[::-1]\n        print(i, end=' ')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    res = ()\n    for string in test_tuple:\n        res += (string[-1],)\n    return res\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([tuple(test_tuple)[-1]])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for index, element in enumerate(test_tuple):\n        if index == 0:\n            rear_index_list.append(index)\n        elif index == len(test_tuple)-1:\n            rear_index_list.append(index)\n        else:\n            if element == test_tuple[index+1]:\n                continue\n            else:\n                rear_index_list.append(index)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[1])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort()\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n    \n    \nlist1 = [1,2,3,4,5,1,1,2,4,5,1,2,1]\nprint(count_element_in_list(list1,1))\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] == x or list1[j] == x:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n    \ndef count_all_elements_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n    \n    \n    \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x == list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = None\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n    # This would be a way to write this in one line:\n    # return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            oddnumbers.append(nums[i])\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if (num % 2) == 1:\n            oddnumbers.append(num)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return(filter(lambda n: n%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for i in nums:\n        if i%2!= 0:\n            result.append(i)\n    return result\n    \ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n    \ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for x in nums:\n        if x%2!= 0:\n            oddnumbers.append(x)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for i in nums:\n        if i % 2 == 1:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda i: i%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2 == 1:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt, str):\n        raise ValueError(\"Please provide a valid date string\")\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here\n    return '{}-{}-{}'.format(dt[6:],dt[3:5],dt[:2])\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    year = int(dt[0:4])\n    month = int(dt[5:7])\n    day = int(dt[8:10])\n    dt_new = \"{:02d}-{:02d}-{:04d}\".format(day,month,year)\n    \n    return dt_new\n    \ndef check_number(number):\n    '''\n    Write a function to check if a number is an integer or not.\n    '''\n    \n    try:\n        int(number)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # dt = '2020-01-12'\n    date_format = re.findall(r'\\d\\d\\d\\d-\\d\\d-\\d\\d', dt)\n    return date_format[0] + '-' + date_format[1] + '-' + date_format[2]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.search(\"^\\d+-\\d+-\\d+$\",dt):\n        dt_list = list(map(int,dt.split(\"-\")))\n        dt_list = dt_list[::-1]\n        dt = \"-\".join(map(str,dt_list))\n    return(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_names_eng = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    month_names_fra = [\"janvier\", \"f\u00e9vrier\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"ao\u00fbt\", \"septembre\", \"octobre\", \"novembre\", \"d\u00e9cembre\"]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date=dt.split('-')\n    return date[2]+'-'+date[1]+'-'+date[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return dt\n    date = dt.split('-')\n    new_date = []\n    if int(date[0]) >= 2000:\n        new_date.append(date[2])\n        new_date.append(date[1])\n        new_date.append(date[0])\n        new_date = \"-\".join(new_date)\n    else:\n        new_date.append(date[0])\n        new_date.append(date[1])\n        new_date.append(date[2])\n        new_date = \"-\".join(new_date)\n    return new_date\n    \ndef remove_all_spaces(txt):\n    '''\n    Write a function that takes a text and remove all spaces in the text.\n    '''\n    if not txt:\n        return txt\n    new_txt = txt.replace(' ', '')\n    return new_txt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split(\"-\")\n    if len(d) == 3:\n        return d[0]+\"-\"+d[1]+\"-\"+d[2]\n    else:\n        return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # waktu: O(n)\n    for i in range(len(my_list) - 1, 0, -1):\n        j = 0\n        while j < i:\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n            j += 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size//2\n    while gap>=1:\n        for i in range(gap,size):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>temp:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = temp\n        gap = gap//2\n        "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            current_value = my_list[i]\n            position = i\n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position = position - gap\n            my_list[position] = current_value\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def swap(i,j):\n        #swap elements i and j in my_list using a min-heap.\n        while i >= 1 and my_list[i] < my_list[i - 1]:\n            my_list[i], my_list[i - 1] = my_list[i - 1], my_list[i]\n            i -= 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            while (my_list[i] < my_list[i-gap] and i >= gap):\n                my_list[i], my_list[i-gap] = my_list[i-gap], my_list[i]\n                i = i-gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"Inside shell_sort: {}\".format(my_list))\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            for j in range(i, 0, -gap):\n                if my_list[j] < my_list[j - gap]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n        gap //= 2\n    print(\"Outside shell_sort: {}\".format(my_list))\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return ()\n    else:\n        return (tuple(x and y for x, y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0]) and (tup1[1] and tup2[1])\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return (tup1[0] or tup2[0]) or (tup1[1] or tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = (1,2,3)\n    b = (4,5,6)\n    return (a and b)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for (x, y) in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x,y in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #start writing your code here\n    list1=list(test_tup1)\n    list2=list(test_tup2)\n    len1=len(list1)\n    len2=len(list2)\n    i=0\n    if len1==len2:\n        while i<len1:\n            list1[i]=list1[i]+list2[i]\n            i=i+1\n        tuple1=tuple(list1)\n        return tuple1\n    else:\n        if len1<len2:\n            while i<len1:\n                list1[i]=list1[i]+list2[i]\n                i=i+1\n            tuple1=tuple(list1)\n            return tuple1\n        else:\n            while i<len2:\n                list1[i]=list1[i]+list2[i]\n                i=i+1\n            tuple1=tuple(list1)\n            return tuple1\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple((test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)) if test_tup1[i] == test_tup2[i])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x, y in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a**2+c**2) < 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*c)\n        x3 = a/(2*a)\n        x4 = a/(2*c)\n        x5 = -b/(2*c)\n        x6 = -b/(2*a)\n        x7 = c/(2*a)\n        x8 = c/(2*c)\n        x9 = -a/(2*a)\n        x10 = -a/(2*c)\n        x11 = -c/(2*a)\n        x12 = -c/(2*c)\n        return [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12]\n    else:\n        print('Your parabola does not have a directrix')\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((-b - sqrt(b**2 - 4*a*c))/(2*a), (-b + sqrt(b**2 - 4*a*c))/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a, b)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    while x < b:\n        x = x ** 2 + c\n        yield x\n        \ndef directrix(a, b):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    for x in range(a, b):\n        yield x * x\n        \ndef directrix(a, b):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (x**2+b)/2 for x in range(a, b)\n    \n    \n    \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b**2 - 2*a*c)/(b**2 - 2*a*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = -a*c*c*c/3+a*a*b/3\n    return d\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -a * (b - c)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    X1 = -(b**2 / (4 * a**2 * c))\n    X2 = (b**2 / (4 * a**2 * c))\n    X3 = X1 + X2\n    return X1, X2, X3\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -a/(2*b) + c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    x = a\n    y = b\n    while True:\n        r = (x**2 + y**2)**.5\n        print(r)\n        if r == 0:\n            print(a, b)\n            break\n        x = a - (x**2)/(y**2)\n        y = b - (x**2)/(y**2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) >= 1:\n        return True\n    else:\n        return False\n    \ndef element_at_index(n, list1):\n    '''\n    Write a function that takes a list and returns the element at index n\n    '''\n    return list1[n]\n    \ndef even_odd_list(list1):\n    '''\n    Write a function that takes a list and returns a new list with the elements of the original list but in even-odd order.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even + odd\n    \ndef two_evens_or_less(list1):\n    '''\n    Write a function that takes a list and returns a new list with the elements of the original list where either the number is even or if it is a string, the length of that string is less than or equal to 2.\n    '''\n    new_list = []\n    for i in list1:\n        if i % 2 == 0 or type(i) == str and len(i) <= 2:\n            new_list.append(i)\n    return new_list\n    \ndef all_unique(list1):\n    '''\n    Write a function that takes a list and returns True if there are no duplicates and False otherwise.\n    '''\n    seen = []\n    for i in list1:\n        if i not in seen:\n            seen.append(i)\n        else:\n            return False\n    return True\n    \ndef number_of_lines(filename):\n    '''\n    Write a function that takes a filename and returns the number of lines in the file.\n    '''\n    with open(filename) as f:\n        lines = f.readlines()\n        return len(lines)\n    \ndef sum_of_numbers(filename):\n    '''\n    Write a function that takes a filename and returns the sum of all the numbers in the file.\n    '''\n    with open(filename) as f:\n        lines = f.readlines()\n        sum = 0\n        for i in lines:\n            line = i.strip('\\n')\n            sum += int(line)\n        return sum\n    \ndef get_lines_starting_with_word(filename, word):\n    '''\n    Write a function that takes a filename and returns a new list that contains only lines starting with the word in the file.\n    '''\n    new_list = []\n    with open(filename) as f:\n        lines = f.readlines()\n        for i in lines:\n            line = i.strip('\\n')\n            if line.startswith(word):\n                new_list.append(line)\n        return new_list\n        \ndef test_file_exists(filename):\n    '''\n    Write a function that takes a filename and returns True if it exists and False otherwise.\n    '''\n    if filename.strip('\\n') == '':\n        return False\n    else:\n        return True\n        \ndef print_if_string_is_an_even_number(string):\n    '''\n    Write a function that takes a string and returns True if it is an even number and False otherwise.\n    '''\n    return int(string) % 2 == 0\n    \ndef print_if_string_is_an_odd_number(string):\n    '''\n    Write a function that takes a string and returns True if it is an odd number and False otherwise.\n    '''\n    return int(string) % 2 == 1\n    \ndef print_if_string_is_equal_to_its_reverse(string):\n    '''\n    Write a function that takes a string and returns True if it is equal to its reverse and False otherwise.\n    '''\n    rev = string[::-1]\n    return string == rev\n    \ndef max_word_length(filename):\n    '''\n    Write a function that takes a filename and returns the length of the longest word in the file.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length:\n                    max_word_length = len(word)\n    return max_word_length\n    \ndef longest_word(filename):\n    '''\n    Write a function that takes a filename and returns the word with the longest length.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length:\n                    max_word_length = len(word)\n                    longest_word = word\n    return longest_word\n    \ndef min_word_length(filename):\n    '''\n    Write a function that takes a filename and returns the word with the shortest length.\n    '''\n    min_word_length = 100\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) < min_word_length:\n                    min_word_length = len(word)\n                    shortest_word = word\n    return shortest_word\n    \ndef max_word_length_with_punctuation(filename):\n    '''\n    Write a function that takes a filename and returns the word with the longest length that contains at least one punctuation mark.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length and word.count(',') + word.count('.') + word.count('!') + word.count('?') > 0:\n                    max_word_length = len(word)\n                    longest_word = word\n    return longest_word\n    \ndef max_word_length_with_question_mark(filename):\n    '''\n    Write a function that takes a filename and returns the word with the longest length that contains at least one question mark.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length and word.count('?') > 0:\n                    max_word_length = len(word)\n                    longest_word = word\n    return longest_word\n    \ndef max_word_length_with_period_and_question_mark(filename):\n    '''\n    Write a function that takes a filename and returns the word with the longest length that contains at least one period and question mark.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length and word.count('?') > 0:\n                    max_word_length = len(word)\n                    longest_word = word\n    return longest_word\n    \ndef max_word_length_with_ellipsis(filename):\n    '''\n    Write a function that takes a filename and returns the word with the longest length that contains at least one period and question mark.\n    '''\n    max_word_length = 0\n    with open(filename) as f:\n        lines = f.readlines()\n        for line in lines:\n            words = line.split()\n            for word in words:\n                if len(word) > max_word_length and word.count('?') > 0:\n                    max_word_length = len(word)\n                    longest_word = word\n    return longest_word\n    \ndef most_frequent_word(filename):\n    '''\n    Write a function that takes a filename and returns the word with the most numbe"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return(list1 and list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common_elements.append(list1[i])\n    return common_elements\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set_list1 = set(list1)\n    set_list2 = set(list2)\n    return set_list1.intersection(set_list2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1+base2)==2*height:\n        return height\n    if (base1+base2)==height:\n        return (base1+base2)/2.0\n    if base1==base2:\n        return base1\n    if base1>height:\n        return median_trapezium(base1,height,height)\n    if base2>height:\n        return median_trapezium(base1,height,height)\n    if base1<height and base2<height:\n        return 0.5*(base1+base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1+base2)<=height:\n        print(\"Wrong Input\")\n    else:\n        print(round(height/(base1+base2),2))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1==base2:\n        return (height/2)\n    else:\n        return (height/2+base1+base2)/2\n    "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_height = height//2\n    median_width = base1 + base2\n    median = height + (median_width//2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    if number > arr[n-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)-1):\n        if number == arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number < arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            print('True')\n            return True\n    print('False')\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[-1]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    if arr_len == 0:\n        return False\n    for i in range(arr_len):\n        if arr[i] >= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number > num:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^[ab]', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^a*b', text))\n    # print(bool(re.match(r'^a*b', text)))\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^ab*$', text))\n    # print(bool(re.match(r'^ab*$', text)))\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+$', text))\n    # print(bool(re.match(r'^(?:ab)+$', text)))\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+$', text))\n    # print(bool(re.match(r'^(?:ab)+$', text)))\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+$', text))\n    # print(bool(re.match(r'^(?:ab)+$', text)))\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.match(r'^[ab]', text)\n    # if matches:\n    #     return matches.group()\n    # else:\n    #     return False\n    return bool(re.match(r'^(?:ab)+', text))\n    # print(bool(re.match(r'^(?:ab)+', text)))\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(re.match(r'^ab', text))\n    # matches = re.matc"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Your code here\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"ab*\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r\"ab\", text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'^[ab]{1}$', text) == None:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    result = re.match(pattern,text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a.*b')\n    return text_regex.search(text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a+b')\n    return text_regex.search(text)\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a*b')\n    return text_regex.search(text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a+?')\n    return text_regex.search(text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1}b')\n    return text_regex.search(text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,2}b')\n    return text_regex.search(text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,2}?b')\n    return text_regex.search(text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?')\n    return text_regex.search(text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?')\n    return text_regex.search(text)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}b')\n    return text_regex.search(text)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_regex = re.compile(r'a{1,}?b')\n    return text_regex.search(text)\n    \ndef text_match_twenty_eight(text):"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    ans = re.match('ab.*', text)\n    if ans:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Your code here\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # code here\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    r = 0\n    while n!= 0:\n        r = n % 10 + r\n        n = n // 10\n    return r\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        n = n // 10\n        return last_Digit(n)\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    # Using the MOD (%) operator\n    return n%10\n    \ndef get_next_digit(n):\n    '''\n    Write a python function to find the next digit of a given number.\n    '''\n    \n    # For loop to get the last digit\n    # Subtraction of 1 is used to get the next digit\n    n = last_Digit(n)-1\n    return n\n    \ndef sum_of_next_n_digits(n, n_digits):\n    '''\n    Write a python function to get the sum of the next N digits of a given number.\n    '''\n    \n    # n_digits = 5\n    sum = 0\n    for i in range(n_digits):\n        # n_digits = 5\n        sum += get_next_digit(n)\n        n = get_next_digit(n)\n    return sum\n    \n    \ndef check_palindrome_sequence(n, n_digits):\n    '''\n    Write a python function to check if the sequence of next n digits is palindrome.\n    '''\n    \n    # n_digits = 5\n    while n > 0:\n        # If the next n digits is palindrome\n        # Then break the loop\n        if n_digits == 5 and (last_Digit(n) == 1 or last_Digit(n) == 4):\n            break\n        elif n_digits == 4 and (last_Digit(n) == 1 or last_Digit(n) == 3 or last_Digit(n) == 6):\n            break\n        elif n_digits == 3 and (last_Digit(n) == 1 or last_Digit(n) == 2 or last_Digit(n) == 7):\n            break\n        n = get_next_digit(n)\n        n_digits -= 1\n    # If there are more than 1 digit left, return False\n    if n > 0:\n        return False\n    # If there is 1 digit left, return True\n    else:\n        return True\n    \nif __name__ == \"__main__\":\n    '''\n    a = 11\n    b = a\n    print(last_Digit(b))\n    print(get_next_digit(b))\n    print(last_Digit(b))\n    print(check_palindrome_sequence(a,4))\n    '''\n    \n    a = 372857\n    b = a\n    print(last_Digit(a))\n    print(get_next_digit(a))\n    print(last_Digit(a))\n    print(check_palindrome_sequence(a,5))\n    print(last_Digit(b))\n    print(get_next_digit(b))\n    print(last_Digit(b))\n    print(check_palindrome_sequence(b,5)"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \n    \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    temp=n%10\n    return temp\n    \ndef last_Digit_2(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    res = 0\n    while(n > 0):\n        res = res*10 + n%10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    if n == 0 : return 0\n    if n < 0 : n = abs(n)\n    if n == 0: return 0\n    else : \n        while n :\n            n, rem = divmod(n, 10)\n        return rem\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(int(str(n)[-1]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for i in list1:\n        if i<0:\n            l.append(i)\n    print(l)\nneg_nos([1,2,3,-4,5,-2])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # return a list of the negative numbers in the list\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -1 * list1[i]\n    return list1\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    final_list = []\n    for item in list1:\n        if item < 0:\n            final_list.append(-1 * item)\n        else:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative.append(list1[i])\n    return negative\n        \nlist1 = [-1, -2, -3, -4, 5]\nprint(neg_nos(list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1.sort()\n    count = 0\n    new_list = []\n    while count < len(list1):\n        if list1[count] < 0:\n            new_list.append(list1[count])\n        count += 1\n    return new_list\nprint(neg_nos([-7, -3, -5, -9, -2]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            newlist.append(list1[i])\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\nprint(neg_nos([2,5,-3,12,-1,3,-4]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            list2.append(list1[i])\n    print(list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(-list1[i])\n    return l\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = str1[0:len(str1):2]\n    new_str = str1.replace(odd, '')\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([''.join([char for i, char in enumerate(str) if i % 2!= 0]), str1])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace(\"a\",\"\")\n    str1 = str1.replace(\"e\",\"\")\n    str1 = str1.replace(\"i\",\"\")\n    str1 = str1.replace(\"o\",\"\")\n    str1 = str1.replace(\"u\",\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    for i in range(len(str1)):\n        if int(str1[i])%2 == 0:\n            str1 = str1.replace(str1[i], '')\n            \n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= '0':\n            count += 1\n    str1 = str1[count:]\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] not in ('0','1','2','3','4','5','6','7','8','9'):\n            new_str += str1[i]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('a','')\n    str1 = str1.replace('e','')\n    str1 = str1.replace('i','')\n    str1 = str1.replace('o','')\n    str1 = str1.replace('u','')\n    str1 = str1.replace('A','')\n    str1 = str1.replace('E','')\n    str1 = str1.replace('I','')\n    str1 = str1.replace('O','')\n    str1 = str1.replace('U','')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 0:\n            continue\n        else:\n            str1 = str1[:i] + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if not i.isalpha():\n            new_str += i\n    print(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = str1.strip()\n    result = ''\n    for i in range(len(s)):\n        if s[i] not in 'aeiou':\n            result += s[i]\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        count += 1\n        if test_list[i][1] < test_list[i+1][1]:\n            count += 1\n        elif test_list[i][1] == test_list[i+1][1] and test_list[i][0] < test_list[i+1][0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    if not test_list:\n        return 0\n    \n    counter = 0\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]):\n                counter += 1\n    \n    return counter\n    \nprint(count_bidirectional([(1,2),(3,4),(1,5)]))\nprint(count_bidirectional([(1,2),(3,4),(1,5),(5,6),(1,7),(2,8),(3,9),(4,10),(5,11)]))\nprint(count_bidirectional([(1,1),(2,2),(3,3),(4,4)]))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n            elif test_list[i][0] < test_list[j][1] and test_list[i][1] < test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #test_list = [('a', 'a'), ('b', 'c'), ('c', 'b')]\n    #test_list = [(1,1), (2,3), (3,2)]\n    test_list.sort()\n    i = 0\n    j = len(test_list)-1\n    count = 0\n    while i < j:\n        if test_list[i] == test_list[j]:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dict = {}\n    for t in test_list:\n        dict[t] = dict.get(t, 0) + 1\n    for t in dict:\n        if (dict[t] >= 2):\n            return True\n    return False\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] == 0:\n                counter += 1\n    print(counter)\n    return\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    odd_length = len(test_list) % 2\n    if odd_length == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(test_list),2):\n            count += 1\n            for j in range(i+1,len(test_list),2):\n                count += 1\n        return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_pairs = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import defaultdict\n    ans = defaultdict(int)\n    for t in test_list:\n        if len(t) == 2:\n            if t[0] <= t[1]:\n                t_rev = t[1], t[0]\n                if t_rev in ans:\n                    ans[t_rev] += 1\n            else:\n                t_rev = t[0], t[1]\n                if t_rev in ans:\n                    ans[t_rev] += 1\n    return ans\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = ''\n    for i in range(len(L)):\n        result += str(L[i]) +''\n    return result[0:len(result)-1]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_L = []\n    for i in range(len(L)):\n        new_L.append(L[i]*10**i)\n    return sum(new_L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L)[1:][:-1])\n    \nmultiple_to_single([1,2,3,4,5,6,7])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce((lambda x, y: x * 10 + y), L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # join_list = ''.join(str(e) for e in L)\n    join_list = ''.join(map(str, L))\n    return int(join_list)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    assert type(L)==list and all(type(x)==int for x in L), \"L must be a list of ints\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i=0\n    count=0\n    for j in range(len(L)):\n        if (L[j]>=0):\n            count+=1\n            i=i+L[j]\n    return i,count\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['it', 'it\\'s', 'i\\'m', 'i\\'ve', 'i\\'ll', 'i\\'d', 'i\\'ve', 'is', 'was', 'am', 'are', 'were', 'were', 'as', 'it\\'s', 'it\\'s', 'it\\'ll', '\\'ll', '\\'ll', '\\'d', '\\'d', '\\'d', '\\'ve', '\\'ve', '\\'s', '\\'s', '\\'s', '\\'s', '\\'re', '\\'re', '\\'re', '\\'ve', '\\'ve', '\\'ve', '\\'ve', '\\'s', '\\'s', '\\'s', '\\'s', '\\'ve', '\\'ve', '\\'ve', '\\'ve', '\\',\\',\\'\\'s', '\\',\\',\\'\\'s', '\\',\\',\\'\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', '\\',\\',\\'ve', "
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    test_string = text\n    positions = []\n    all_adverbs = []\n    all_adverbs_re = r'(^|[^\\w])\\b(ADVERB)\\b(.*?)\\2\\b(?!\\w)'\n    # result = re.findall(all_adverbs_re, test_string)\n    result = re.findall(all_adverbs_re, test_string)\n    for i in range(len(result)):\n        if result[i][2]!= '':\n            positions.append([result[i][2], i])\n            all_adverbs.append(result[i][2])\n    return positions, all_adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    for index, word in enumerate(text.split()):\n        if word in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') and word in ('adverb', 'abverb', 'advverb', 'a', 'adverb', 'abverb', 'advverb', 'adverb', 'a', 'abverb', 'advverb', 'a', 'adverb', 'abverb', 'advverb', 'adverb'):\n            adverb_positions.append(index)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start_index = 0\n    end_index = 0\n    pattern = re.compile(r'\\b(?i)(?<!to)\\b(?:r|rt)\\b')\n    matches = pattern.finditer(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    sentence = re.split(\"[.,:?! ]+\", text)\n    positions = []\n    adverb = \"\"\n    for i in range(len(sentence)):\n        sentence[i] = sentence[i].replace(\",\", \"\")\n        sentence[i] = sentence[i].replace(\":\",\"\")\n        sentence[i] = sentence[i].replace(\".\",\"\")\n        sentence[i] = sentence[i].replace(\"?\",\"\")\n        sentence[i] = sentence[i].replace(\"!\",\"\")\n        #print(sentence[i])\n        for j in range(len(sentence[i])):\n            if sentence[i][j] == \"a\":\n                if sentence[i][j+1] == \"d\" or sentence[i][j+1] == \"n\":\n                    adverb = sentence[i][j+1:j+2]\n                    print(adverb)\n        positions.append(adverb)\n    return positions\nprint(find_adverb_position(\"My sister has a dog, and she loves him.\"))"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"\\b(?:(?<!not )\\w+)\"\n    regex = re.compile(pattern)\n    #def find_adverb(text):\n    adverbs = regex.finditer(text)\n    \n    #print(adverbs)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    for index, word in enumerate(text.split()):\n        if word in ['am', 'are', 'is', 'was', 'were']:\n            adverbs.append(index)\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # write your code here\n    return(None)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return_text = []\n    text = text.lower()\n    find_position = re.finditer(r'\\b(a|an|the)\\b', text, flags=re.I)\n    for i in find_position:\n        i = i.span()\n        return_text.append(text[i[0]:i[1]])\n    return return_text\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in a sentence\n    # Create an empty list to store the results\n    adverbs = []\n    # Use a for loop to find all adverbs\n    # Use a regular expression to check if the adverb is in the sentence.\n    # If so, add the adverb's position to the list.\n    for i in range(len(text)):\n        if re.search(r'(?i)(\\w+\\/?)\\/\\w+',text[i]):\n            adverbs.append(i)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l * l * l\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea_cube = 6*l**2\n    return surfacearea_cube\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 4 * l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l**2*6\n    return s\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_cnt = 0\n    for num in nums:\n        if num > 0:\n            pos_cnt += 1\n    return pos_cnt\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #return len([n for n in nums if n > 0]) / len(nums)\n    return sum(1 for n in nums if n > 0)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    elif nums[0] > 0:\n        return 1 + positive_count(nums[1:])\n    elif nums[0] < 0:\n        return 1 + positive_count(nums[1:])\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([i for i in nums if i>0])\n    # your code here\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    \n    sum_pos_nums = 0\n    sum_neg_nums = 0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos += 1\n        else:\n            neg += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if max_neg is None or max_neg < num:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-99\n    for i in list1:\n        if i<0:\n            if i>max:\n                max=i\n    print(max)\nlargest_neg([-10, -5, -3, -2])    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1,key=lambda x:x<0)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    for i in range(len(list1)):\n        if list1[i]<0:\n            largest_num = max(list1[i], largest_num)\n    return largest_num\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -99999999\n    fo"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg=list1[0]\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            if(list1[i]>largest_neg):\n                largest_neg=list1[i]\n    print(\"The largest negative number from the list is: \", largest_neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest:\n                largest = list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest=-1\n    for i in range(len(list1)):\n        if list1[i]<0 and list1[i]>largest:\n            largest=list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -10000\n    for i in list1:\n        if i < 0 and i > max_num:\n            max_num = i\n    print(max_num)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) if -(max(list1)) < 0 else -1\nprint(largest_neg([4, -3, -5, -5, -7, -2]))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)-1, -1, -1):\n        test_list[i] = (test_list[i][0], test_list[i][1][K:])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 0:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Write your code here.\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = test_list[i][j:j+K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        if i[0] <= K and i[1] <= K:\n            trimmed_list.append(i)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i])!= K:\n            test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[:K], x[K:]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    if K == 0:\n        for t in test_list:\n            trimmed_list.append(t[:])\n        return trimmed_list\n    else:\n        for t in test_list:\n            if K <= len(t):\n                trimmed_list.append(t[:K])\n            else:\n                trimmed_list.append(t[:K-1])\n    return trimmed_list\n    \ndef flatten_tuple(test_list):\n    '''\n    Write a function to flatten a tuple.\n    '''\n    flat_list = []\n    for t in test_list:\n        for i in t:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        res_tup = ()\n        for i in range(len(test_tup1)):\n            res_tup += (test_tup1[i]*test_tup2[i],)\n        return res_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Can't do multiplication\")\n        return\n    result = tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1_list[i] *= test_tup2_list[i]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list = []\n    for i in range(len(test_tup1)):\n        index_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(index_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    # print(test_tup1)\n    # print(test_tup2)\n    \n    # print(type(test_tup1))\n    # print(type(test_tup2))\n    \n    # print(type(test_tup1[0]))\n    # print(type(test_tup2[0]))\n    \n    return tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    \n    \nif __name__ == '__main__':\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    \n    print(index_multiplication(test_tup1, test_tup2))\n    \n    print(index_multiplication((1,2,3), (4,5,6)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code here\n    newTup = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return newTup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        index_multiplication = []\n        for index1 in range(len(test_tup1)):\n            index_multiplication.append(test_tup1[index1] * test_tup2[index1])\n        print(f'The result of multiplication is: {index_multiplication}')\n    else:\n        print('Invalid inputs!')\n        \ndef add_numbers(*args):\n    '''\n    Write a function which accepts unlimited number of arguments and returns the sum of all the numbers.\n    '''\n    sum = 0\n    for i in args:\n        sum += i\n    print(f'Sum of args: {sum}')\n    \ndef print_square(num):\n    '''\n    Write a function which accepts a number and prints its square.\n    '''\n    num = num ** 2\n    print(f'The square of {num} is {num}')\n    \ndef reverse_words(str):\n    '''\n    Write a function which accepts a string and reverses the string word by word.\n    '''\n    str = str.split()\n    reverse = ''\n    for word in str:\n        reverse = word + reverse\n    print(f'The reverse word is: {reverse}')\n    \ndef reverse_sentence(str):\n    '''\n    Write a function which accepts a string and reverses the string sentence by word.\n    '''\n    str = str.split()\n    str = str[::-1]\n    str =''.join(str)\n    print(f'The reverse sentence is: {str}')\n    \ndef create_num(num_list):\n    '''\n    Write a function which accepts a list and returns a list with unique elements from the given list.\n    '''\n    new_num = []\n    for i in num_list:\n        if i not in new_num:\n            new_num.append(i)\n    print(f'The unique numbers are: {new_num}')\n    \ndef most_frequent(str):\n    '''\n    Write a function which accepts a string and returns the most frequent character in the string.\n    '''\n    str = str.lower()\n    count = {}\n    for i in str:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n    print(f'The most frequent character is: {max(count, key=count.get)}')\n    \ndef fibonacci(num):\n    '''\n    Write a function which accepts a number and returns a list containing the Fibonacci series up to that point.\n    '''\n    if num < 2:\n        return\n    else:\n        a, b = 0, 1\n        for i in range(num):\n            print(a)\n            a, b = b, a + b\n            \ndef factorial(num):\n    '''\n    Write a function which accepts a number and returns the factorial of that number.\n    '''\n    if num <= 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef print_numbers(num):\n    '''\n    Write a function which accepts a number and prints all the numbers between 0 and that number.\n    '''\n    for i in range(num + 1):\n        print(i)\n        \ndef is_prime(num):\n    '''\n    Write a function which accepts a number and returns True if it is prime and False otherwise.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef average_numbers(*args):\n    '''\n    Write a function which accepts a list of numbers and returns their average.\n    '''\n    sum = 0\n    for i in args:\n        sum += i\n    print(f'The average of the list is: {sum / len(args)}')\n    \ndef grade_converter(grade):\n    '''\n    Write a function which takes in a numeric grade and returns its equivalent letter grade.\n    '''\n    if grade < 60:\n        return 'F'\n    elif grade < 70:\n        return 'D'\n    elif grade < 80:\n        return 'C'\n    elif grade < 90:\n        return 'B'\n    elif grade < 100:\n        return 'A'\n    else:\n        return 'Error'\n    \ndef is_prime_by_list(num):\n    '''\n    Write a function which accepts a number and returns True if it is prime and False otherwise.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef max_numbers(*args):\n    '''\n    Write a function which accepts a list of numbers and returns the largest number among them.\n    '''\n    max_num = args[0]\n    for i in args:\n        if i > max_num:\n            max_num = i\n    print(f'The largest number in the list is: {max_num}')\n    \ndef multiple_list(*args):\n    '''\n    Write a function which accepts a list of numbers and returns a new list which sums the given list.\n    '''\n    result = []\n    for i in args:\n        result.append(sum(args))\n    print(f'The sum of the given list is: {sum(args)}')\n    \ndef is_palindrome(str):\n    '''\n    Write a function which accepts a string and returns True if it is a palindrome and False otherwise.\n    '''\n    if len(str) <= 1:\n        return True\n    if str[0] == str[-1]:\n        return is_palindrome(str[1:-1])\n    else:\n        return False\n    \ndef number_of_odd_numbers(num):\n    '''\n    Write a function which accepts a number and returns the number of odd numbers present in that number.\n    '''\n    if num == 1:\n        return 0\n    else:\n        return num % 2!= 0\n        \ndef is_prime_by_generator(num):\n    '''\n    Write a function which accepts a number and returns True if it is prime and False otherwise.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n        \ndef compare_strings(string1, string2):\n    '''\n    Write a function which accepts two strings and returns True if both the strings are equal or they are one letter different.\n    '''\n    if string1 == string2:\n        return True\n    elif len(string1) == 1 and len(string2) == 1:\n        return True\n    elif string1.upper() == string2.upper():\n        return True\n    else:\n        return False\n    \ndef digits_to_words(num):\n    '''\n    Write a function which accepts a number and returns its corresponding words.\n    '''\n    num = str(num)\n    if num[-1] == '1':\n        return num +'st'\n    elif num[-1] == '2':\n        return num + 'nd'\n    elif num[-1] == '3':\n        return num + 'rd'\n    else:\n        return num + 'th'\n    \ndef print_list_in_reverse(list1):\n    '''\n    Write a function which takes in a list and prints it in reverse.\n    '''\n    list1.reverse()\n    for i in list1:\n        print(i)\n    \ndef max_characters(string1, string2):\n    '''\n    Write a function which accepts two strings and returns the number of characters which are common between them.\n    '''\n    if len(string1) < len(string2):\n        min_len = len(string2)\n    else:\n        min_len = len(string1)\n    common = ''\n    for i in range(min_len):\n        if string1[i] == string2[i]:\n            common += string1[i]\n    return len(common)\n    \ndef find_missing_numbers(list1, lis"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (x * y for x, y in zip(test_tup1, test_tup2))\n    \ntest_tup1 = (10, 20)\ntest_tup2 = (20, 30)\nprint(index_multiplication(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup += (test_tup1[i] * test_tup2[i],)\n    return final_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for i, j in zip(test_tup1, test_tup2):\n        result_tuple = result_tuple + (i*j,)\n    return result_tuple\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if(tup[i] == lst[i]):\n            count = count+1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    count_4 = 0\n    for i in lst:\n        if i == tup[0]:\n            count_1 += 1\n        if i == tup[1]:\n            count_2 += 1\n        if i == tup[2]:\n            count_3 += 1\n        if i == tup[3]:\n            count_4 += 1\n    return (count_1,count_2,count_3,count_4)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for item in lst:\n        if item in tup:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = []\n    # code here\n    for i in range(len(lst)):\n        counts.append((lst.count(lst[i])))\n    print(tup,counts)\n    # return counts \n    return len(counts) \ncount_Occurrence((1, 2, 3, 4),[1, 2, 3, 4])\ncount_Occurrence((2, 3, 1, 3),[1, 2, 3, 4])\ncount_Occurrence((3, 2, 1, 3),[1, 2, 3, 4])\ncount_Occurrence((3, 2, 1, 2),[1, 2, 3, 4])\ncount_Occurrence((3, 2, 1, 4),[1, 2, 3, 4])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for num in lst:\n        if num in tup:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count = count+1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #lst = ['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R']\n    #lst = ['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R']\n    #lst = ['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R']\n    #lst = ['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', '"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return nums * nums * nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = lambda x: x * x * x\n    return map(cube, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    ans = []\n    for num in nums:\n        ans.append(num**3)\n    return ans\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total=0\n    for i in range(1,n+1):\n        if i%2==0:\n            total+=i\n        else:\n            total+=i*10\n    return total\n    \ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(i for i in range(1,n+1) if i%2==0)\n    \n    \ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1)) if n%2==0 else sum(range(1,n+1)*10)\n    \n    \ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum([i for i in range(1,n+1) if i%2==0]) if n%2==0 else sum([i for i in range(1,n+1)])*10\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n - 1) * (n - 2) + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1: \n        return 1\n    return n + cal_sum(n - 1) \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n + 1):\n        s = s + i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0: \n        return 0 \n    else: \n        return n + cal_sum(n - 1) \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin = 0\n    n = int(n)\n    for k in range(n+1):\n        sum_of_perrin = sum_of_perrin + int(k)\n    return sum_of_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 0\n    while n > 0:\n        perrin += n % 10\n        n //= 10\n    return perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #return ((n + 1) * (n + 2)) / 2\n    s = 0\n    while n > 0:\n        s += n\n        n -= 1\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i + l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        #print(str + \" \" + str(l[i]))\n        #print(\"size: \" + str(len(l[i])))\n        l[i] = l[i].strip()\n        if len(l[i]) < l[i].find(str):\n            return l[i]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = str.split()\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            l[i] = l[i][0:l[i].index('.')] + '.'\n        else:\n            l[i] = l[i][0:l[i].index('.')] + '.' + l[i][l[i].index('.') + 1:]\n    \n    l = l[0:l.index('.')] + '.' + l[l.index('.') + 1:]\n    return l[:l.index('.')]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[i: i + l] for x in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str == \"\":\n        return []\n    else:\n        if len(str) < l:\n            return str\n        else:\n            return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(str)):\n        if (len(str[i]) >= l):\n            yield str[i][:l]\n        else:\n            yield str[i]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ret_lst = []\n    if l:\n        if len(l) > 1:\n            for i in range(len(l)-1):\n                if len(l[i]) == l[i+1]:\n                    ret_lst.append(l[i])\n        else:\n            ret_lst.append(l[0])\n        return ret_lst\n    else:\n        return ret_lst\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(map(lambda x: x[l], str))\n    return l\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 == \"\":\n        return text1\n    else:\n        text2 = text1.strip()\n        return text2\n    \ndef remove_white"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    return re.sub('\\s', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #Write your Code here\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using split()\n    # return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    output = ''\n    for i in text1:\n        if i not in'\\t\\n\\r':\n            output += i\n    return output\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n    # Replace all whitespaces with a single space in the string.\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #Your code here\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        loss_amount=actual_cost-sale_amount\n    else:\n        loss_amount=0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return sale_amount\n    else:\n        return actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if actual_cost>=sale_amount:\n        loss_amount=sale_amount\n    else:\n        loss_amount=actual_cost\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1) : \n        if (n % i == 0) : \n            sum = sum + i\n    print(\"Sum of even factors of \", n,\" is \",sum)\n    return sum\ndef sumofFactors2(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            sum = sum + i\n    print(\"Sum of odd factors of \", n,\" is \",sum)\n    return sum\ndef sumofFactors3(n):\n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n%i==0):\n            sum=sum+i\n    print(\"Sum of factors of \", n,\" is \",sum)\n    return sum\ndef sumofFactors4(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n):\n        if (n % i == 0):\n            sum = sum + i\n    print(\"Sum of even factors of \", n,\" is \",sum)\n    return sum\ndef sumofFactors5(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            sum = sum + i\n    print(\"Sum of odd factors of \", n,\" is \",sum)\n    return sum\ndef sumofFactors6(n):\n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(n%i==0):\n            sum = sum+i\n    print(\"Sum of factors of \", n,\" is \",sum)\n    return sum\ndef findgcd(x, y): \n    # choose the smaller number \n    if x > y: \n        small = y  \n    else: \n        small = x \n    for i in range(1, small+1): \n        if((x % i == 0) and (y % i == 0)): \n            gcd = i \n    return gcd\ndef findlcm(x, y): \n    # choose the greater number \n    if x > y: \n        greater = x \n    else: \n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm\ndef findLCM(x, y):\n    return findlcm(x, y)\ndef findHCF(x, y):\n    return findgcd(x, y)\ndef findHCF(x, y):\n    return findgcd(x, y)\ndef findGCD(x, y):\n    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small + 1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\ndef findLCM(x, y):\n    return findlcm(x, y)\ndef findHCF(x, y):\n    return findgcd(x, y)\ndef findHCF(x, y):\n    return findgcd(x, y)\ndef findallDivisors(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors2(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors3(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors4(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors5(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors6(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors7(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors8(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors9(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors10(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors11(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors12(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors13(n):\n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(2,n):\n        if(n % i == 0):\n            divisors.append(i)\n    return divisors\ndef findDivisors14(n):\n    '''"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0 \n    for i in range(1,n+1): \n        if(i%2 == 0 and i!=2): \n            result += i \n    return result \n    \n    \nprint(sumofFactors(6)) \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n % i == 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,n):\n        if(n%i==0):\n            total=total+i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    while (i * i < n): \n        if (n % i == 0): \n            print(i,end=\" \") \n            n = n // i \n            i = 2\n        else: \n            i += 1\n    print(n)\n    print(n * (n-1)//2)\n    print((n*(n-1)//2)+n)\ndef drawCircle(n):\n    i = 0\n    while i < n:\n        print('*'*n)\n        i += 1\ndef main():\n    #sumofFactors(100)\n    drawCircle(3)\nmain()"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n):\n        if (n%i == 0):\n            total = total + i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n == 0): \n        return n \n    else: \n        return n % 2 + sumofFactors(n // 2) \ndef isPrime(n) : \n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if(n == 0 or n == 1): \n        return False\n    elif(n == 2): \n        return True\n    else: \n        if(n % 2 == 0): \n            return False\n        else: \n            return all(n % i for i in range(3,int(math.sqrt(n))+1, 2)) \ndef isPalindrome(n) : \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if(n == 0): \n        return True\n    else: \n        rev = 0\n        while(n > rev): \n            pop = n % 10\n            rev = rev * 10 + pop\n            n = n // 10\n        return n == rev or n == rev // 10\ndef sumOfDigits(n) : \n    '''\n    Write a python function to find sum of digits in the given number.\n    '''\n    sum = 0\n    while(n > 0): \n        sum = sum + (n%10)\n        n = n//10\n    return sum\ndef sumOfDigits2(n) : \n    '''\n    Write a python function to find sum of digits in the given number.\n    '''\n    return sum(int(i) for i in str(n)) \ndef power(n,k) : \n    '''\n    Write a python function to find power of n with given k.\n    '''\n    if(k == 0): \n        return 1\n    elif(k == 1): \n        return n \n    else: \n        return n*power(n, k-1)\ndef powerOfTwo(n): \n    '''\n    Write a python function to find power of 2 of given number.\n    '''\n    return (n&(n-1)) == 0\ndef countPairs(a,b): \n    '''\n    Write a python function to find the number of pairs in a list whose sum is equal to a given number.\n    '''\n    count = 0\n    for i in range(len(a)): \n        for j in range(i+1, len(a)): \n            if(a[i]+a[j]==b): \n                count+=1\n    return count\ndef findPairs(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    pairs = 0\n    for i in range(len(a)): \n        for j in range(i+1, len(a)): \n            if(a[i] + a[j] == b): \n                pairs+=1\n    return pairs\ndef findPairs2(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    pairs = 0\n    a = sorted(a) \n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs3(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs4(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs5(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs6(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs7(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs8(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs9(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n            i+=1\n            j-=1\n        elif(a[i] + a[j] < b): \n            i+=1\n        else: \n            j-=1\n    return pairs\ndef findPairs10(a, b): \n    '''\n    Write a python function to find pairs in a list whose sum is equal to a given number.\n    '''\n    a = sorted(a) \n    pairs = 0\n    i, j = 0, len(a)-1\n    while i < j: \n        if(a[i] + a[j] == b): \n            pairs+=1\n        "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum=sum+i\n    return sum\ndef factorial(n): \n    '''\n    Write a python function that takes as input a non-negative integer and computes \n    the product of 1 to that number. \n    '''\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    return n*factorial(n-1)\ndef factorial1(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    result=1\n    for i in range(1,n+1):\n        result=result*i\n    return result\ndef factorial2(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    i=1\n    result=1\n    while(i<=n):\n        result=result*i\n        i=i+1\n    return result\ndef factorial3(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    result=1\n    for i in range(1,n+1):\n        result=result*i\n    return result\ndef factorial4(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    result=1\n    for i in range(2,n+1):\n        result=result*i\n    return result\ndef factorial5(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 6\n    if(n==4):\n        return 24\n    if(n==5):\n        return 120\n    if(n==6):\n        return 720\n    if(n==7):\n        return 5040\n    if(n==8):\n        return 40320\n    if(n==9):\n        return 362880\n    if(n==10):\n        return 3628800\n    if(n==11):\n        return 39916800\n    if(n==12):\n        return 479001600\n    if(n==13):\n        return 4790016000\n    if(n==14):\n        return 6227020800\n    if(n==15):\n        return 87178291200\n    if(n==16):\n        return 1307674368000\n    if(n==17):\n        return 20922789888000\n    if(n==18):\n        return 355687428096000\n    if(n==19):\n        return 6402373705728000\n    if(n==20):\n        return 9227465384096000\ndef factorial6(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 6\n    if(n==4):\n        return 24\n    if(n==5):\n        return 120\n    if(n==6):\n        return 720\n    if(n==7):\n        return 5040\n    if(n==8):\n        return 40320\n    if(n==9):\n        return 362880\n    if(n==10):\n        return 3628800\n    if(n==11):\n        return 39916800\n    if(n==12):\n        return 479001600\n    if(n==13):\n        return 4790016000\n    if(n==14):\n        return 6227020800\n    if(n==15):\n        return 87178291200\n    if(n==16):\n        return 1307674368000\n    if(n==17):\n        return 20922789888000\n    if(n==18):\n        return 355687428096000\n    if(n==19):\n        return 6402373705728000\n    if(n==20):\n        return 9227465384096000\ndef factorial7(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 6\n    if(n==4):\n        return 24\n    if(n==5):\n        return 120\n    if(n==6):\n        return 720\n    if(n==7):\n        return 5040\n    if(n==8):\n        return 40320\n    if(n==9):\n        return 362880\n    if(n==10):\n        return 3628800\n    if(n==11):\n        return 39916800\n    if(n==12):\n        return 479001600\n    if(n==13):\n        return 4790016000\n    if(n==14):\n        return 6227020800\n    if(n==15):\n        return 87178291200\n    if(n==16):\n        return 1307674368000\n    if(n==17):\n        return 20922789888000\n    if(n==18):\n        return 355687428096000\n    if(n==19):\n        return 6402373705728000\n    if(n==20):\n        return 9227465384096000\ndef factorial8(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 6\n    if(n==4):\n        return 24\n    if(n==5):\n        return 120\n    if(n==6):\n        return 720\n    if(n==7):\n        return 5040\n    if(n==8):\n        return 40320\n    if(n==9):\n        return 362880\n    if(n==10):\n        return 3628800\n    if(n==11):\n        return 39916800\n    if(n==12):\n        return 479001600\n    if(n==13):\n        return 4790016000\n    if(n==14):\n        return 6227020800\n    if(n==15):\n        return 87178291200\n    if(n==16):\n        return 1307674368000\n    if(n==17):\n        return 20922789888000\n    if(n==18):\n        return 355687428096000\n    if(n==19):\n        return 6402373705728000\n    if(n==20):\n        return 9227465384096000\ndef factorial9(n):\n    if(n<0):\n        return None\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 6\n    if(n==4):\n        return 24\n    if(n==5):\n        return 120\n    if(n==6):\n        return 720\n    if(n==7):\n        return 5040\n    if(n==8):\n        return 40320\n    if(n==9):\n        return 362880\n    if(n==10):\n        return 3628800\n    if(n==11):\n        return 39916800\n    if(n==12):\n        return 479001600\n    if(n==13):\n        return 4790016000\n    if(n==14):\n        return 6227020800\n    if(n==15):\n        return 87178291200\n    if(n==16):\n        return 1307674368000\n    if(n==17):\n        return 20922789888000\n    if(n==18):\n        return 355687428096000\n    if(n==19):\n        return 6402373705728000\n    if(n==20):\n        return 9227465384096000\ndef factorial10(n):\n    if(n<0):\n        return None\n    if"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # match = re.search(r'z', text)\n    # if match:\n    #     print(f'The first word containing z: {match.group()}')\n    # else:\n    #     print('No match found')\n    # print()\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.search(text)\n    \n    \ndef remove_wordz(text):\n    '''\n    Write a function that removes all words containing 'z' from a string.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.sub('',text)\n    \ndef remove_upper(text):\n    '''\n    Write a function that removes all upper case words from a string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\b')\n    return pattern.sub('',text)\n    \ndef count_upper(text):\n    '''\n    Write a function that counts the number of upper case words in a string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\b')\n    return pattern.findall(text)\n    \ndef find_a_number(text):\n    '''\n    Write a function that finds a word in a string which contains a number.\n    '''\n    pattern = re.compile(r'\\d')\n    return pattern.findall(text)\n    \ndef not_a_number(text):\n    '''\n    Write a function that finds a word in a string which doesn't contain a number.\n    '''\n    pattern = re.compile(r'\\D')\n    return pattern.findall(text)\n    \ndef count_words(text):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    pattern = re.compile(r'\\w')\n    return pattern.findall(text)\n    \ndef add_and_remove_spaces(text):\n    '''\n    Write a function that adds and removes extra spaces in a string.\n    '''\n    pattern = re.compile(r'\\s{2,}')\n    return pattern.sub(' ',text)\n    \ndef add_and_remove_numbers(text):\n    '''\n    Write a function that adds and removes extra numbers in a string.\n    '''\n    pattern = re.compile(r'\\d+')\n    return pattern.sub('',text)\n    \ndef add_and_remove_characters(text):\n    '''\n    Write a function that adds and removes extra characters in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z ]')\n    return pattern.sub('',text)\n    \ndef reverse_word(text):\n    '''\n    Write a function that reverses the order of the words in a string.\n    '''\n    pattern = re.compile(r'\\w')\n    words = pattern.findall(text)\n    return''.join(words[::-1])\n    \ndef split_by_hyphen(text):\n    '''\n    Write a function that splits a string into words based on hyphenations.\n    '''\n    pattern = re.compile(r'\\s-\\s')\n    return pattern.split(text)\n    \ndef merge_two_words(text):\n    '''\n    Write a function that merges two words in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b\\s+\\b\\w+\\b')\n    return pattern.findall(text)\n    \ndef strip_non_word_chars(text):\n    '''\n    Write a function that strips any non-word characters in a string.\n    '''\n    pattern = re.compile(r'\\W+')\n    return pattern.sub(' ',text)\n    \ndef drop_letter_case(text):\n    '''\n    Write a function that drops letter case in a string.\n    '''\n    pattern = re.compile(r'[A-Z][a-z]+')\n    return pattern.sub('',text)\n    \ndef replace_spaces_with_underscore(text):\n    '''\n    Write a function that replaces spaces in a string with underscores.\n    '''\n    pattern = re.compile(r'\\s')\n    return pattern.sub('_',text)\n    \ndef remove_duplicate_spaces(text):\n    '''\n    Write a function that removes any duplicate spaces in a string.\n    '''\n    pattern = re.compile(r'\\s\\s+')\n    return pattern.sub(' ',text)\n    \ndef remove_duplicate_underscores(text):\n    '''\n    Write a function that removes any duplicate underscores in a string.\n    '''\n    pattern = re.compile(r'_+')\n    return pattern.sub('_',text)\n    \ndef remove_leading_spaces(text):\n    '''\n    Write a function that removes any leading spaces in a string.\n    '''\n    pattern = re.compile(r'^\\s+')\n    return pattern.sub('',text)\n    \ndef remove_trailing_spaces(text):\n    '''\n    Write a function that removes any trailing spaces in a string.\n    '''\n    pattern = re.compile(r'\\s+$')\n    return pattern.sub('',text)\n    \ndef remove_bacon_and_duplicate_spaces(text):\n    '''\n    Write a function that removes the bacon character and any duplicate spaces in a string.\n    '''\n    pattern = re.compile(r'[BAC]+\\s+')\n    return pattern.sub('',text)\n    \ndef remove_punctuations_and_duplicate_spaces(text):\n    '''\n    Write a function that removes any punctuations and duplicate spaces in a string.\n    '''\n    pattern = re.compile(r'\\W+')\n    return pattern.sub(' ',text)\n    \ndef remove_spaces_and_multiple_underscores(text):\n    '''\n    Write a function that removes any spaces and multiple underscores in a string.\n    '''\n    pattern = re.compile(r'\\s+_+')\n    return pattern.sub('_',text)\n    \ndef remove_duplicate_hyphens(text):\n    '''\n    Write a function that removes any duplicate hyphens in a string.\n    '''\n    pattern = re.compile(r'-+')\n    return pattern.sub(' ',text)\n    \ndef remove_multiple_spaces(text):\n    '''\n    Write a function that removes any multiple spaces in a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub(' ',text)\n    \ndef remove_duplicate_spaces_and_underscores(text):\n    '''\n    Write a function that removes any duplicate spaces and underscores in a string.\n    '''\n    pattern = re.compile(r'\\s+_+')\n    return pattern.sub(' ',text)\n    \ndef remove_trailing_spaces_and_underscores(text):\n    '''\n    Write a function that removes any trailing spaces and underscores in a string.\n    '''\n    pattern = re.compile(r'\\s+_+')\n    return pattern.sub(' ',text)\n    \ndef convert_to_lowercase(text):\n    '''\n    Write a function that converts all upper case letters in a string to lower case.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('',text)\n    \ndef upper_case_every_word(text):\n    '''\n    Write a function that converts all lower case letters in a string to upper case.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('',text)\n    \ndef remove_all_digits(text):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    pattern = re.compile(r'\\d+')\n    return pattern.sub('',text)\n    \ndef remove_digits(text):\n    '''\n    Write a function that removes all digits from a string.\n    '''\n    pattern = re.compile(r'\\D+')\n    return pattern.sub('',text)\n    \ndef add_two_digits(text):\n    '''\n    Write a function that adds two digits to a string.\n    '''\n    pattern = re.com"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # this method returns a tuple of the groups found inside the matched string \n    pat = re.compile(r'z')\n    result = pat.findall(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #for word in text:\n    #    if re.match(r'z', word):\n    #        print(word)\n    #        break\n    \n    #return word\n    return re.findall(r'z+',text)\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pat = r\"\\b\\w*z\\b\"\n    matches = re.findall(pat, text)\n    if len(matches) > 0:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # pattern = r\"z\"\n    # matches = re.findall(pattern, text)\n    # return matches\n    pattern = re.compile(r\"z\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz_match = re.search(r\"z\", text)\n    if wordz_match:\n        return True\n    else:\n        return False\n        \ndef text_match_pronoun(text):\n    '''\n    Write a function that matches a word that contains'me' and 'he','she', 'it', or 'they'.\n    '''\n    pro_match = re.search(r\"me\", text) or re.search(r\"he\", text) or re.search(r\"she\", text) or re.search(r\"it\", text) or re.search(r\"they\", text)\n    if pro_match:\n        return True\n    else:\n        return False\n        \ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'word'.\n    '''\n    word_match = re.search(r\"word\", text)\n    if word_match:\n        return True\n    else:\n        return False\n        \ndef text_match_numbers(text):\n    '''\n    Write a function that matches a word containing numbers.\n    '''\n    num_match = re.search(r\"\\d+\", text)\n    if num_match:\n        return True\n    else:\n        return False\n        \ndef text_match_symbol(text):\n    '''\n    Write a function that matches a word containing '.', ',', '?', or '!'.\n    '''\n    sym_match = re.search(r\"\\.\", text) or re.search(r\",\", text) or re.search(r\"?\", text) or re.search(r\"!\", text)\n    if sym_match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if 31%7 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if 31%7 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2%2==0:\n            if 31%7 == 0:\n                return True\n            else:\n                return False\n        else:\n            if 31%7 == 0:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 1):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 2):\n        if(29 == 29):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 3):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 4):\n        if(30 == 30):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 5):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 6):\n        if(30 == 30):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 7):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 8):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 9):\n        if(30 == 30):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 10):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 11):\n        if(30 == 30):\n            return True\n        else:\n            return False\n    elif(monthnum2 == 12):\n        if(31 == 31):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return \"31 days\"\n    else:\n        return \"30 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        print(monthnum2,\" has 31 days\")\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print(monthnum2,\" has 30 days\")\n    else:\n        print(monthnum2,\" has 29 days\")\n    \ndef check_monthnumb_name(monthnum):\n    '''\n    Write a function to check whether the given month name contains 31 days or not.\n    '''\n    if monthnum==\"january\" or monthnum==\"february\" or monthnum==\"march\" or monthnum==\"april\" or monthnum==\"may\" or monthnum==\"june\" or monthnum==\"july\" or monthnum==\"august\" or monthnum==\"september\" or monthnum==\"october\" or monthnum==\"november\":\n        print(monthnum,\" has 31 days\")\n    elif monthnum==\"april\" or monthnum==\"june\" or monthnum==\"september\" or monthnum==\"november\":\n        print(monthnum,\" has 30 days\")\n    elif monthnum==\"march\":\n        print(monthnum,\" has 31 days\")\n    else:\n        print(monthnum,\" has 28 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n    \ndef check_yearnumb_number(yearnum2):\n    '''\n    Write a function to check whether the given year number contains leap year or not.\n    '''\n    if yearnum2 % 4 == 0:\n        return True\n    elif yearnum2 % 100 == 0:\n        return False\n    elif yearnum2 % 400 == 0:\n        return True\n    else:\n        return False\n    \ndef check_day_numb_number(daynum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    if daynum2 == 1:\n        return True\n    elif daynum2 == 2:\n        return True\n    elif daynum2 == 3:\n        return True\n    elif daynum2 == 4:\n        return True\n    elif daynum2 == 5:\n        return True\n    elif daynum2 == 6:\n        return True\n    elif daynum2 == 7:\n        return True\n    elif daynum2 == 8:\n        return True\n    elif daynum2 == 9:\n        return True\n    elif daynum2 == 10:\n        return True\n    elif daynum2 == 11:\n        return True\n    elif daynum2 == 12:\n        return True\n    elif daynum2 == 13:\n        return True\n    elif daynum2 == 14:\n        return True\n    elif daynum2 == 15:\n        return True\n    elif daynum2 == 16:\n        return True\n    elif daynum2 == 17:\n        return True\n    elif daynum2 == 18:\n        return True\n    elif daynum2 == 19:\n        return True\n    elif daynum2 == 20:\n        return True\n    elif daynum2 == 21:\n        return True\n    elif daynum2 == 22:\n        return True\n    elif daynum2 == 23:\n        return True\n    elif daynum2 == 24:\n        return True\n    elif daynum2 == 25:\n        return True\n    elif daynum2 == 26:\n        return True\n    elif daynum2 == 27:\n        return True\n    elif daynum2 == 28:\n        return True\n    elif daynum2 == 29:\n        return True\n    elif daynum2 == 30:\n        return True\n    elif daynum2 == 31:\n        return True\n    else:\n        return False\n    \ndef check_month_numb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n    \ndef check_leap_year(yearnum2):\n    '''\n    Write a function to check whether the given year number contains leap year or not.\n    '''\n    if yearnum2 % 4 == 0:\n        return True\n    elif yearnum2 % 100 == 0:\n        return False\n    elif yearnum2 % 400 == 0:\n        return True\n    else:\n        return False\n    \ndef check_leap_month(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n    \ndef check_leap_day(daynum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    if daynum2 == 1:\n        return True\n    elif daynum2 == 2:\n        return True\n    elif daynum2 == 3:\n        return True\n    elif daynum2 == 4:\n        return True\n    elif daynum2 == 5:\n        return True\n    elif daynum2 == 6:\n        return True\n    elif daynum2 == 7:\n        return True\n    elif daynum2 == 8:\n        return True\n    elif daynum2 == 9:\n        return True\n    elif daynum2 == 10:\n        return True\n    elif daynum2 == 11:\n        return True\n    elif daynum2 == 12:\n        return True\n    elif daynum2 == 13:\n        return True\n    elif daynum2 == 14:\n        return True\n    elif daynum2 == 15:\n        return True\n    elif daynum2 == 16:\n        return True\n    elif daynum2 == 17:\n        return True\n    elif daynum2 == 18:\n        return True\n    elif daynum2 == 19:\n        return True\n    elif daynum2 == 20:\n        return True\n    elif daynum2 == 21:\n        return True\n    elif daynum2 == 22:\n        return True\n    elif daynum2 == 23:\n        return True\n    elif daynum2 == 24:\n        return True\n    elif daynum2 == 25:\n        return True\n    elif daynum2 == 26:\n        return True\n    elif daynum2 == 27:\n        return True\n    elif daynum2 == 28:\n        return True\n    elif daynum2 == 29:\n        return True\n    elif daynum2 == 30:\n        return True\n    elif daynum2 == 31:\n        return True\n    else:\n        return False\n    \ndef check_day_in_month(daynum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    if daynum2 == 1:\n        return True\n    elif daynum2 == 2:\n        return True\n    elif daynum2 == 3:\n        return True\n    elif daynum2 == 4:\n        return True\n    elif daynum2 == 5:\n        return True\n    elif daynum2 == 6:\n        return True\n    elif daynum2 == 7:\n        return True\n    elif daynum2 == 8:\n        return True\n    elif daynum2 == 9:\n        return True\n    elif daynum2 == 10:\n        return True\n    elif daynum2 == 11:\n        return True\n    elif daynum2 == 12:\n        return True\n    elif daynum2 == 13:\n        return True\n    elif daynum2 == 14:\n        return True\n    eli"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2) == 1 or (monthnum2) == 3 or (monthnum2) == 5 or (monthnum2) == 7 or (monthnum2) == 8 or (monthnum2) == 10 or (monthnum2) == 12:\n        print(\"31 days in month\")\n    else:\n        print(\"not 31 days in month\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in range(1,13):\n        if monthnum2 in range(1,13):\n            if monthnum2 in range(1,13):\n                if monthnum2 in range(1,13):\n                    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n                        return '31'\n                    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                        return '30'\n                    elif monthnum2 == 2:\n                        return '28'\n                    else:\n                        return '30'\n                elif monthnum2 == 4:\n                    return '31'\n                elif monthnum2 == 6:\n                    return '30'\n                elif monthnum2 == 9:\n                    return '31'\n                elif monthnum2 == 11:\n                    return '30'\n                elif monthnum2 == 2:\n                    return '28'\n            elif monthnum2 == 4:\n                return '31'\n            elif monthnum2 == 6:\n                return '30'\n            elif monthnum2 == 9:\n                return '31'\n            elif monthnum2 == 11:\n                return '30'\n            elif monthnum2 == 2:\n                return '28'\n        elif monthnum2 == 2:\n            return '29'\n    elif monthnum2 == 2:\n        return '28'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == '12':\n        print('31')\n    else:\n        print('31')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"January contains 31 days.\")\n    elif monthnum2 == 2:\n        print(\"February contains 28 days.\")\n    elif monthnum2 == 3:\n        print(\"March contains 31 days.\")\n    elif monthnum2 == 4:\n        print(\"April contains 30 days.\")\n    elif monthnum2 == 5:\n        print(\"May contains 31 days.\")\n    elif monthnum2 == 6:\n        print(\"June contains 30 days.\")\n    elif monthnum2 == 7:\n        print(\"July contains 31 days.\")\n    elif monthnum2 == 8:\n        print(\"August contains 31 days.\")\n    elif monthnum2 == 9:\n        print(\"September contains 30 days.\")\n    elif monthnum2 == 10:\n        print(\"October contains 31 days.\")\n    elif monthnum2 == 11:\n        print(\"November contains 30 days.\")\n    elif monthnum2 == 12:\n        print(\"December contains 31 days.\")\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n    # return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for word in stringlist:\n        reversed_string_list.append(word[::-1])\n    return reversed_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return \"\".join(stringlist[::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    i = 0\n    while i < len(stringlist):\n        stringlist[i] = stringlist[i][::-1]\n        i += 1\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_list = []\n    for item in stringlist:\n        rev_list.append(item[::-1])\n    return rev_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0][0]\n    min_lst = []\n    for i in lst:\n        if i[0] < min_len:\n            min_len = i[0]\n            min_lst = [i]\n        elif i[0] == min_len:\n            min_lst.append(i)\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length=0\n    temp=lst[0]\n    for i in lst:\n        if len(i)>length:\n            temp=i\n            length=len(i)\n    return temp\nlst=[]\nsize=int(input(\"Enter the list size: \"))\nfor i in range(0,size):\n    a=input(\"Enter the list element: \")\n    lst.append(a)\nprint(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst)\n    \n    min_len = lst[0]\n    min_ind = []\n    for i in range(len(lst)):\n        if lst[i] == min_len:\n            min_ind.append(i)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLen = len(lst[0])\n    minLenIndex = 0\n    minLenSublist = []\n    for i in range(1,len(lst)):\n        if len(lst[i])<minLen:\n            minLen = len(lst[i])\n            minLenIndex = i\n            minLenSublist = [lst[i]]\n        elif len(lst[i])==minLen:\n            minLenSublist.append(lst[i])\n    return minLenIndex, minLen, minLenSublist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = []\n    for num in lst:\n        length.append(len(num))\n    min_length = min(length)\n    result = []\n    for i in range(len(length)):\n        if length[i] == min_length:\n            result.append(lst[i])\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst)\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(0,len(lst)):\n        if len(lst[i])<len(min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    temp = lst[start]\n    while end < n:\n        if temp > lst[end]:\n            temp = lst[end]\n            start += 1\n        else:\n            end += 1\n        if end - start == 1:\n            return start\n        elif end - start == 2:\n            if temp < lst[start + 1]:\n                temp = lst[start + 1]\n                start = start + 1\n            else:\n                temp = lst[start]\n                start = start + 1\n    return start\n    \n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    temp = lst[start]\n    while end < n:\n        if temp < lst[end]:\n            temp = lst[end]\n            start += 1\n        else:\n            end += 1\n        if end - start == 1:\n            return start\n        elif end - start == 2:\n            if temp > lst[start + 1]:\n                temp = lst[start + 1]\n                start = start + 1\n            else:\n                temp = lst[start]\n                start = start + 1\n    return start\n    \n    \ndef Sort_Sublist(lst, start, end): \n    '''\n    Write a python function to sort a list of list (sublist).\n    '''\n    if len(lst[start:end+1]) <= 2:\n        return\n    \n    minimum = Find_Min(lst[start:end+1])\n    maximum = Find_Max(lst[start:end+1])\n    if minimum == maximum:\n        return\n    \n    lst[start:end+1] = sorted(lst[start:end+1], key=lst.index)\n    temp = lst[minimum]\n    lst[minimum] = lst[maximum]\n    lst[maximum] = temp\n    Sort_Sublist(lst, start, minimum-1)\n    Sort_Sublist(lst, minimum+1, end)\n    \n    \ndef Sort_List(lst): \n    '''\n    Write a python function to sort a list of list (sublist).\n    '''\n    Sort_Sublist(lst, 0, len(lst)-1)\n    \n    \ndef Find_Mid(lst): \n    '''\n    Write a python function to find the middle element of a given list.\n    '''\n    return lst[(len(lst) - 1) // 2]\n    \n    \ndef Remove_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] == lst[end]:\n            end += 1\n        else:\n            lst[start] = lst[end]\n            start += 1\n            end += 1\n    return lst[start:]\n    \n    \ndef Remove_Duplicates_2(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    n = len(lst) \n    if n == 0:\n        return\n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] == lst[end]:\n            end += 1\n        else:\n            lst[start] = lst[end]\n            start += 1\n            end += 1\n    return lst[start:]\n    \n    \ndef Insertion_Sort(lst): \n    '''\n    Write a python function to sort a list of list (sublist).\n    '''\n    n = len(lst) \n    for i in range(1, n):\n        key = lst[i]\n        j = i-1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    \n    \ndef Is_Strictly_Increasing(lst): \n    '''\n    Write a python function to check if a list is strictly increasing.\n    '''\n    n = len(lst) \n    for i in range(0, n-1):\n        if lst[i+1] < lst[i]:\n            return False\n    return True\n    \n    \ndef Is_Strictly_Decreasing(lst): \n    '''\n    Write a python function to check if a list is strictly decreasing.\n    '''\n    n = len(lst) \n    for i in range(0, n-1):\n        if lst[i+1] > lst[i]:\n            return False\n    return True\n    \n    \ndef Two_Pointer(lst): \n    '''\n    Write a python function to find the 2nd largest element of a given list.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] > lst[end]:\n            start += 1\n        else:\n            end += 1\n    return lst[start+1]\n    \n    \ndef Three_Pointer(lst): \n    '''\n    Write a python function to find the 3rd largest element of a given list.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] > lst[end]:\n            start += 1\n        else:\n            end += 1\n    return lst[start+2]\n    \n    \ndef Sort_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] == lst[end]:\n            end += 1\n        else:\n            lst[start] = lst[end]\n            start += 1\n            end += 1\n    return lst[start:]\n    \n    \ndef Sort_Nested_List(lst): \n    '''\n    Write a python function to sort a list of nested lists.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if len(lst[start]) <= 1:\n            start += 1\n            end += 1\n        elif len(lst[start]) > 1:\n            Sort_Duplicates(lst[start])\n            start += 1\n            end += 1\n    for i in range(start, n):\n        lst[i] = sorted(lst[i], key=lst[i].index)\n    \n    \ndef Unique_List(lst): \n    '''\n    Write a python function to check whether a list is unique.\n    '''\n    n = len(lst) \n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] == lst[end]:\n            end += 1\n        else:\n            end += 1\n            start += 1\n    return start == end\n    \n    \ndef Delete_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    n = len(lst) \n    if n == 0:\n        return\n    start = 0\n    end = 1\n    while end < n:\n        if lst[start] == lst[end]:\n            end += 1\n        else:\n            lst[start] = lst[end]\n            start += 1\n            end += 1\n    return lst[start:]\n    \n    \ndef Print_Sorted_List(lst): \n    '''\n    Write a python function to print the sorted list.\n    '''\n    print(sorted(lst))\n    \n    \ndef Count_Sort(lst): \n    '''\n    Write a python function to count the number of occurrences of elements in a given list.\n    '''\n    n = len(lst)"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # We only need to check for unique elements\n    n = len(lst)\n    m = 0\n    for i in range(0, n):\n        if (lst[i] == lst[m]):\n            m += 1\n        elif (m < i):\n            m = i\n    \n    # We only need to check for sublists having length of 3\n    for i in range(0, n-m+1):\n        if (len(lst[i:i+m]) == 3):\n            return lst[i:i+m]\n    return 'No Sublist'\n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    size = len(lst)\n    for i in range(size):\n        for j in range(i+1,size):\n            if(len(lst[i])<len(lst[j])):\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\nrectangle_area(5,7)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\nprint(rectangle_area(5,8))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef rectangle_area_test(rectangle_area):\n    '''\n    Write a test function that passes areas.\n    '''\n    print(rectangle_area(10,15))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(char for char in str1 if not char.isupper())\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    new_string = str1.replace(\"A\",\"\")\n    new_string = new_string.replace(\"B\",\"\")\n    new_string = new_string.replace(\"C\",\"\")\n    new_string = new_string.replace(\"D\",\"\")\n    new_string = new_string.replace(\"E\",\"\")\n    new_string = new_string.replace(\"F\",\"\")\n    new_string = new_string.replace(\"G\",\"\")\n    new_string = new_string.replace(\"H\",\"\")\n    new_string = new_string.replace(\"I\",\"\")\n    new_string = new_string.replace(\"J\",\"\")\n    new_string = new_string.replace(\"K\",\"\")\n    new_string = new_string.replace(\"L\",\"\")\n    new_string = new_string.replace(\"M\",\"\")\n    new_string = new_string.replace(\"N\",\"\")\n    new_string = new_string.replace(\"O\",\"\")\n    new_string = new_string.replace(\"P\",\"\")\n    new_string = new_string.replace(\"Q\",\"\")\n    new_string = new_string.replace(\"R\",\"\")\n    new_string = new_string.replace(\"S\",\"\")\n    new_string = new_string.replace(\"T\",\"\")\n    new_string = new_string.replace(\"U\",\"\")\n    new_string = new_string.replace(\"V\",\"\")\n    new_string = new_string.replace(\"W\",\"\")\n    new_string = new_string.replace(\"X\",\"\")\n    new_string = new_string.replace(\"Y\",\"\")\n    new_string = new_string.replace(\"Z\",\"\")\n    return new_string\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', \"\", str1)\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check if two strings are rotation of each other.\n    '''\n    s1 = remove_uppercase(str1)\n    s2 = remove_uppercase(str2)\n    return s1 == s2 + s2\n    \ndef is_balanced_paren(str1):\n    '''\n    Write a function to check if a given string has balanced parentheses.\n    '''\n    # Your code here\n    balanced_list = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    count = 0\n    for i in str1:\n        if i in balanced_list:\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # return re.sub(r'\\b[A-Z]+\\b', \"\", str1)\n    # return re.sub(r'([A-Z])\\b', r'\\1', str1)\n    return re.sub(r'([a-z])\\b', r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #pattern = re.compile('[A-Z]+')\n    return re.sub(r'[A-Z]+', r'', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(str1.upper(),'')\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    import pandas as pd\n    import numpy as np\n    import re\n    \n    df = pd.DataFrame(lst)\n    df1 = df.apply(lambda x: x.str.split(\",\").tolist(), axis=1)\n    df1 = df1.applymap(lambda x: x[0])\n    df1.columns = [\"name\", \"profession\"]\n    df1[\"name\"] = df1[\"name\"].str.lower()\n    df1[\"profession\"] = df1[\"profession\"].str.lower()\n    df1[\"profession\"] = df1[\"profession\"].str.strip()\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\" \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"-\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\".\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"_\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"-\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"/\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\u2019\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\u2018\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\u201c\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\u201d\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\\n\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"\\t\", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = df1[\"profession\"].str.replace(\"  \", \"\")\n    df1[\"profession\"] = d"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(0,len(lst),1):\n        res.append(lst[i][0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst_of_list = []\n    for sublist in lst:\n        lst_of_list.append(sublist[0])\n    return lst_of_list\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            new_lst.append(Extract(lst[i]))\n        else:\n            new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            out.append(lst[i][j])\n    return out\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(lst[i][0])\n    return l\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i][0]\n    return lst\n    \nif __name__=='__main__': \n    lst = []\n    for i in range(int(input())): \n        lst.append(input().strip().split()) \n    result = Extract(lst) \n    print('\\n'.join(result)) \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [v[0] for v in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Convert the string into list of char\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print('The count of upper case characters is : ', count)\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Write your code here\n    count=0\n    for i in range(len(str)):\n        if (str[i]>='a' and str[i]<='z'):\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #print(count)\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # count the number of upper case characters in the string\n    count = 0\n    # for each character in the string, check if its an upper case character\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if ord(str[i]) >= 97 and ord(str[i]) <= 122:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return list1\n    else:\n        for i in range(len(list1)):\n            new_list = list1[i+1:]\n            result.append([list1[i]] + combinations_list(new_list))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                for n in range(k+1,len(list1)):\n                    l.append([list1[i],list1[j],list1[k],list1[n]])\n    return l\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # example\n    # input = [\"a\", \"b\", \"c\"]\n    # output =\n    # ['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c']\n    \n    # your code here\n    combinations = []\n    \n    # for each element in the list\n    for i in range(0, len(list1)):\n        \n        # a new string starting with the element\n        string = list1[i]\n        \n        # for each element in the list\n        for j in range(i+1, len(list1)):\n            string +='' + list1[j]\n            \n            # if we've reached the end of the string\n            if j == len(list1)-1:\n                # append it to the combinations list\n                combinations.append(string)\n    \n    # return the list\n    return combinations\n    \n    \ncombinations_list([\"a\", \"b\", \"c\"])"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    if len(list1) == 2:\n        return [[list1[0]], [list1[1]]]\n    else:\n        return combinations_list(list1[1:]) + [[list1[0]] + line for line in combinations_list(list1[2:])]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        comb = []\n        for i in range(len(list1)):\n            rest = list1[i+1:]\n            for r in combinations_list(rest):\n                comb.append(list1[i:i+1] + r)\n        return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        result = [[list1[0]]]\n    else:\n        for i in range(len(list1)):\n            new = []\n            for j in range(len(list1)):\n                if i!= j:\n                    new = new + combinations_list(list1[:j] + list1[j+1:])\n            result.append(new)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            comb.append([list1[i], list1[j]])\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    n = len(list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [[list1[0]]]\n    else:\n        result=[]\n        for i in range(len(list1)):\n            if i==0:\n                new_list=[list1[i]]\n                result.append(new_list)\n            else:\n                new_list=[]\n                for j in range(len(result)):\n                    for item in result[j]:\n                        new_list.append(item+list1[i])\n                result.extend(new_list)\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    for i in range(len(list1)+1):\n        for combination in combinations(list1,i):\n            combinations_list.append(combination)\n    return combinations_list\n    \ndef combinations_list_recursion(list1, start=0):\n    '''\n    Write a recursive function that takes a list and start position, and returns a list of all possible combinations of the elements in the list.\n    '''\n    if start == len(list1):\n        return []\n    return_list = []\n    for i in range(start, len(list1)):\n        combination = combinations_list_recursion(list1, start+1)\n        for combination in combination:\n            return_list.append(list1[i])\n    return return_list\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product, temp_max, temp_min = 0, 1, -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = float(\"-inf\")\n    \n    for i in range(len(arr)):\n        product = arr[i]\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            result = max(result, product)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr.sort()\n    max_prod = arr[0]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            max_prod = max(max_prod,max_product(arr,i,j))\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    left = 0\n    right = 0\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            left = i + 1\n            right = i\n            continue\n        max_product = max(max_product, arr[i])\n        while left <= right:\n            if left == right:\n                break\n            sub_product = max_product * arr[left]\n            if sub_product > max_product:\n                max_product = sub_product\n            left += 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    # for each element, we create a variable that keeps track of the product\n    # we're going to use as our max value\n    # we also keep track of the current max value for each array\n    max_product = float('-inf')\n    max_product_start_index = 0\n    max_product_end_index = 0\n    # we'll want to keep track of the previous element in the array\n    # so we'll go through the array and find the max product\n    # and max product start index\n    prev_element = arr[0]\n    max_product_start_index = 0\n    for i in range(len(arr)):\n        # we'll need to update the max product\n        # and max product start index\n        # if the current element is greater than\n        # the previous element, we need to update them\n        if arr[i] > prev_element:\n            max_product_start_index = i\n            max_product = arr[i]\n            max_product_end_index = i\n            # we'll want to keep track of the previous element in the array\n            # so we'll go through the array and find the max product\n            # and max product start index\n            prev_element = arr[i]\n        # if the current element is less than\n        # the previous element, we need to update them\n        elif arr[i] < prev_element:\n            # we'll reset the max product to the previous element\n            max_product = prev_element\n            # we'll update the max product start index\n            max_product_start_index = i\n            # we'll reset the max product\n            # to the current element\n            max_product = arr[i]\n            # we'll update the max product end index\n            max_product_end_index = i\n            # we'll keep track of the previous element in the array\n            prev_element = arr[i]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    min_n, max_n = arr[0], arr[0]\n    min_i, max_i = 0, 0\n    max_p = 1\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_p = max(max_p, arr[i])\n        else:\n            max_p = max(max_p, arr[i]*min_n)\n            min_n = min(arr[i], min_n)\n        max_n = max(max_n, arr[i])\n        if min_n*max_p < 0:\n            min_i = i\n            max_i = i\n        if min_n*max_p >= 0:\n            min_i = min(min_i, i)\n            max_i = max(max_i, i)\n        print(arr[i], min_n, max_n, min_i, max_i)\n    return arr[min_i: max_i+1]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(current_max * arr[i], arr[i])\n        current_min = min(current_min * arr[i], arr[i])\n    return max(current_max, current_min)\n    \ndef max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    '''\n    Note: This is not a common interview question as we have to find the maximum \n    product of any subarray within the array. So this is a classic DP problem.\n    '''\n    '''\n    Let the approach here be to take the product of the first two elements of\n    the array and repeat this process for the rest of the array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    #arr[0] * arr[1] * arr[2] *... * arr[n - 1]\n    prod = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        prod = max(prod, arr[i] * arr[i-1], arr[i-1] * arr[i-2])\n    return prod\n    '''\n    Here, we go back to the original problem. Now, for the subarray with maximum product\n    there are multiple cases, which we have to consider.\n    '''\n    '''\n    The maximum product subarray of array is the product of the largest product \n    subarray on the left and the product of the largest product subarray on the right.\n    So, we have to consider the first element to the left of the subarray and the last\n    element to the right of the subarray. Let's say if we have a left product X and a\n    right product Y and the subarray is [X, Y, Z], then we can say that the maximum \n    product subarray is X * Y * Z.\n    '''\n    max_left = arr[0]\n    max_right = arr[len(arr)-1]\n    max_product = max_left * max_right\n    for i in range(1, len(arr)-1):\n        left_product = max_left * arr[i]\n        right_product = arr[len(arr)-i-1] * max_right\n        max_product = max(max_product, left_product, right_product)\n        max_left = max(left_product, max_left)\n        max_right = max(right_product, max_right)\n    return max_product\n    \ndef max_subarray_product(arr):\n    '''\n    We can also solve this problem using Kadane's Algorithm, as we have seen in\n    all other problems.\n    '''\n    '''\n    If we have a negative element, then the product of this element and its negative\n    will not contribute to the max product subarray.\n    '''\n    negative_found = False\n    result = arr[0]\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        result = max(result + arr[i], arr[i])\n        max_sum = max(max_sum, result)\n        if result < 0:\n            result = 0\n            negative_found = True\n    if negative_found:\n        result = max_sum * -1\n    return result\n    \ndef max_subarray_product(arr):\n    '''\n    This is a classic Dynamic Programming problem.\n    '''\n    '''\n    Let us try to build a solution for this problem using a 1-D array.\n    Let us denote the first element of the array as X and the last element of the array as Y.\n    Then, the value of X * Y will be the maximum value that we can achieve.\n    \n    Let us call the largest product subarray on the left of the current element as A\n    and the largest product subarray on the right of the current element as B.\n    Then, the value of A * B will be the maximum value that we can achieve.\n    \n    Then, we can construct the solution by finding the maximum product of A and B.\n    '''\n    max_left = arr[0]\n    max_right = arr[len(arr)-1]\n    max_product = max_left * max_right\n    for i in range(1, len(arr)-1):\n        left_product = max_left * arr[i]\n        right_product = arr[len(arr)-i-1] * max_right\n        max_product = max(max_product, left_product, right_product)\n        max_left = max(left_product, max_left)\n        max_right = max(right_product, max_right)\n    return max_product\n    \ndef max_subarray_product(arr):\n    '''\n    We can also write this using a 1-D array.\n    Let us construct the 1-D array X.\n    In the above problem, we have to find the maximum product subarray on the left of\n    the current element.\n    \n    We can do this by just keeping a running variable.\n    '''\n    x = arr[0]\n    for i in range(1, len(arr)):\n        x *= arr[i]\n    \n    '''\n    Now, let us construct the 1-D array Y.\n    In the above problem, we have to find the maximum product subarray on the right of\n    the current element.\n    \n    We can do this by just keeping a running variable.\n    '''\n    y = 1\n    for i in range(1, len(arr)):\n        y *= arr[len(arr)-i]\n    return x * y\n    \ndef max_subarray_product(arr):\n    '''\n    We can also write this using a 1-D array.\n    Let us construct the 1-D array X.\n    In the above problem, we have to find the maximum product subarray on the left of\n    the current element.\n    \n    We can do this by just keeping a running variable.\n    '''\n    result = arr[0]\n    max_left = arr[0]\n    max_right = arr[len(arr)-1]\n    for i in range(1, len(arr)):\n        result *= arr[i]\n        max_left *= arr[i]\n        max_right *= arr[len(arr)-i]\n    return max(result, max_left, max_right)\n    \ndef max_subarray_product(arr):\n    '''\n    We can also write this using a 1-D array.\n    Let us construct the 1-D array X.\n    In the above problem, we have to find the maximum product subarray on the left of\n    the current element.\n    \n    We can do this by just keeping a running variable.\n    '''\n    result = arr[0]\n    max_left = arr[0]\n    max_right = arr[len(arr)-1]\n    for i in range(1, len(arr)):\n        result *= arr[i]\n        max_left *= arr[i]\n        max_right *= arr[len(arr)-i]\n    return max(result, max_left, max_right)\n    \ndef max_subarray_product(arr):\n    '''\n    Let us try to solve this problem using a 2-D array.\n    Let us call the first element of the array as X and the last element of the array as Y.\n    Then, the value of X * Y will be the maximum value that we can achieve.\n    \n    Let us call the maximum product subarray on the left of the current element as A\n    and the maximum product subarray on the right of the current element as B.\n    Then, the value of A * B will be the maximum value that we can achieve.\n    \n    Now, we can construct the solution by finding the maximum product of A and B.\n    '''\n    max_left = arr[0]\n    max_right = arr[len(arr)-1]\n    max_product = max_left * max_right\n    for i in range(1, len(arr)-1):\n        current_product = arr[i] * max_right\n        max_product = max(current_product, max_product)\n        max_left = max(current_product, max_left)\n        max_right = max(max_right, arr"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_product(array):\n        if not array:\n            return 0\n        max_so_far = array[0]\n        min_so_far = array[0]\n        max_end = array[0]\n        for num in array[1:]:\n            if num > max_so_far:\n                max_so_far = num\n            if num < min_so_far:\n                min_so_far = num\n            if num > max_end:\n                max_end = num\n            if min_so_far * max_end > 0:\n                return max_so_far * max_end\n        return max_so_far * max_end\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            max_product = max(max_product, get_product(arr, i, j))\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    max_product = -float('inf')\n    max_product_index = -1\n    max_product_list = []\n    for index, item in enumerate(arr):\n        temp_product = item\n        for i in range(index + 1, len(arr)):\n            temp_product = temp_product * arr[i]\n            if temp_product > max_product:\n                max_product = temp_product\n                max_product_list = arr[index:i + 1]\n                max_product_index = index\n    return max_product_index, max_product_list\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not(n in dict):\n        return False\n    if len(dict) == 1:\n        return True\n    if len(dict) == 2:\n        return dict[n] == dict[list(dict.keys())[0]]\n    if len(dict) == 3:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]]\n    if len(dict) == 4:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]]\n    if len(dict) == 5:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]]\n    if len(dict) == 6:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]]\n    if len(dict) == 7:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]]\n    if len(dict) == 8:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]]\n    if len(dict) == 9:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]]\n    if len(dict) == 10:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]]\n    if len(dict) == 11:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]] and dict[n] == dict[list(dict.keys())[9]]\n    if len(dict) == 12:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]] and dict[n] == dict[list(dict.keys())[9]] and dict[n] == dict[list(dict.keys())[10]]\n    if len(dict) == 13:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]] and dict[n] == dict[list(dict.keys())[9]] and dict[n] == dict[list(dict.keys())[10]] and dict[n] == dict[list(dict.keys())[11]]\n    if len(dict) == 14:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]] and dict[n] == dict[list(dict.keys())[9]] and dict[n] == dict[list(dict.keys())[10]] and dict[n] == dict[list(dict.keys())[11]] and dict[n] == dict[list(dict.keys())[12]]\n    if len(dict) == 15:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] == dict[list(dict.keys())[1]] and dict[n] == dict[list(dict.keys())[2]] and dict[n] == dict[list(dict.keys())[3]] and dict[n] == dict[list(dict.keys())[4]] and dict[n] == dict[list(dict.keys())[5]] and dict[n] == dict[list(dict.keys())[6]] and dict[n] == dict[list(dict.keys())[7]] and dict[n] == dict[list(dict.keys())[8]] and dict[n] == dict[list(dict.keys())[9]] and dict[n] == dict[list(dict.keys())[10]] and dict[n] == dict[list(dict.keys())[11]] and dict[n] == dict[list(dict.keys())[12]] and dict[n] == dict[list(dict.keys())[13]]\n    if len(dict) == 16:\n        return dict[n] == dict[list(dict.keys())[0]] and dict[n] ="
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return True if len(dict) == 1 and list(dict.keys())[0] == list(dict.values())[0] else False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if len(dict) < 1:\n    #     print(\"Error\")\n    #     return False\n    # if len(dict) == 1:\n    #     return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[n]\n    for key, val in dict.items():\n        if key == n or val!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    #First approach:\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    if len(dict) > 1:\n        first_element = dict[list(dict.keys())[0]]\n        if all([first_element == v for v in dict.values()]):\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)==0 or n not in dict:\n        return False\n    if n!= dict[n]:\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    if dict1 == {}:\n        return {}\n    else:\n        for key,value in dict1.items():\n            if value == {}:\n                del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = {}\n    for key,value in dict1.items():\n        if value!= empty:\n            empty[key] = value\n    print(empty)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return dict1\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    n = 0\n    for k, v in dict1.items():\n        if v == {}:\n            n += 1\n        else:\n            break\n    return {k: v for k, v in dict1.items() if v!= {}}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return []\n    elif len(dict1) == 1:\n        return dict1\n    else:\n        return {k: v for k, v in dict1.items() if v!= []}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop('', None)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key in dict1:\n        if dict1[key]!= \"\":\n            dict2[key] = dict1[key]\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {x:y for x, y in dict1.items() if y}\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    for i in range(1, n):\n        max_prod = max(max_prod, arr[i])\n        max_prod = max(max_prod, max_prod*arr[i])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i]<0:\n            arr[i] = -arr[i]\n    for i in range(n-1,-1,-1):\n        if arr[i]>0:\n            break\n    for i in range(i,n):\n        if arr[i]<0:\n            arr[i] = -arr[i]\n    ans = -(2**31)\n    max_prod = 1\n    for i in range(i,n):\n        if arr[i]*max_prod>=0:\n            max_prod = arr[i]*max_prod\n        else:\n            max_prod = 1\n            break\n        ans = max(ans,max_prod)\n    return ans\n    \n    \narr = [-4,-2,-3,-5,-1]\nprint(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0]*arr[1]*arr[2], max_product(arr[1:]))\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i-1] > 0:\n            max_product = max(max_product, max_product*arr[i-1])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0: return 0\n    if len(arr)==1: return arr[0]\n    \n    product = arr[0]\n    curr_max = product\n    curr_min = arr[0]\n    for i in range(1,len(arr)):\n        curr_max = max(curr_max, curr_min*arr[i], curr_min*arr[i-1])\n        curr_min = min(curr_min*arr[i], curr_min*arr[i-1], curr_max*arr[i])\n        product = max(product, curr_max)\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    start = 0\n    end = 1\n    \n    max_product = arr[0] * arr[1]\n    \n    while end <= len(arr) - 1:\n        if arr[end] > max_product:\n            max_product = arr[end]\n        if arr[end] >= arr[start]:\n            if arr[start] * arr[end] > max_product:\n                max_product = arr[start] * arr[end]\n        start += 1\n        end += 1\n    \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_product = arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) < 3:\n        return -1\n    if len(arr) == 3:\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[2] * arr[1])\n    res = -1\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            res = max(res, prod)\n    return res\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) < 3:\n        return -1\n    if len(arr) == 3:\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[2] * arr[1])\n    res = -1\n    for i in range(len(arr)-2):\n        res = max(arr[i] * arr[i+1] * arr[i+2], res)\n    return res"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(len(arr)-1):\n        if arr[i] < 0:\n            if arr[i+1] >= 0:\n                max_product = max(max_product, arr[i] * arr[i+1])\n            else:\n                max_product = max(max_product, arr[i] * arr[i+1])\n        elif arr[i+1] < 0:\n            max_product = max(max_product, arr[i] * arr[i+1])\n        else:\n            max_product = max(max_product, arr[i] * arr[i+1])\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x,y = test_tup\n    return (x+1,y+1),(x+1,y-1),(x-1,y-1),(x-1,y+1)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b, c = test_tup\n    return (a+b, b+c, a+c)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    A, B, C, D = test_tup\n    return (A + B + C + D,\n    A + 2 * (B + D),\n    2 * (A + B + C),\n    A + 3 * (B + C + D))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)):\n        result += test_tup[i]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    addition = 0\n    if len(test_tup) == 0:\n        return 0\n    elif len(test_tup) == 1:\n        return test_tup[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    temp_list = []\n    for i in range(len(test_tup) - 1):\n        temp_list.append(test_tup[i] + test_tup[i+1])\n    return temp_list\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    try:\n        list = []\n        for i in range(0, len(test_tup), 1):\n            x = test_tup[i]\n            if i == len(test_tup)-1:\n                list.append(x)\n            else:\n                y = test_tup[i+1]\n                list.append(x+y)\n        print(list)\n    except IndexError:\n        print(\"Sorry, tuple is too small for operation\")\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup[0] = test_tup[0] + test_tup[1]\n    test_tup[1] = test_tup[0] + test_tup[1]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    test_tup.append(sum)\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = list(test_tup)\n    l_2 = []\n    for i in range(len(l)):\n        if i == 0:\n            l_2.append(l[0])\n            l_2.append(l[1])\n        elif i == 1:\n            l_2.append(l[i-1] + l[i])\n            l_2.append(l[i])\n        else:\n            l_2.append(l[i-1] + l[i])\n            l_2.append(l[i])\n    return tuple(l_2)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    if n > 1:\n        for i in range(n):\n            product = (product * arr[i]) % n\n    else:\n        return (product * arr[0]) % n\n    \n    return product\n    \ndef find_multiplication_factor(arr, n): \n    '''\n    Write a python function to find the multiplication factor of the array multiplication modulo n.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    product = find_remainder(arr, n)\n    \n    if product == 1:\n        return 1\n    \n    i = 1\n    \n    while product!= 1:\n        i += 1\n        product = find_remainder(arr, n)\n    \n    return i\n    \narr = [1,2,3,4,5,6,7,8,9,10]\nn = 10\n    \nprint('The multiplication factor of the array is:', find_multiplication_factor(arr, n)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = prod * num % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return sum(a*b for a, b in zip(arr, itertools.cycle(arr))) % n \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (find_multiplicative_inverse(find_multiplicative_inverse(arr, n), n) * sum(arr)) % n\n    \n    \n    \n    \ndef find_multiplicative_inverse(arr, n):\n    '''\n    Write a python function to find the multiplicative inverse of a number using extended Euclidean Algorithm.\n    '''\n    arr = list(arr)\n    inv = 0\n    \n    for i in range(n):\n        if (arr[i] % n) == 1:\n            inv = i\n            break\n    \n    for j in range(n):\n        if (j == inv):\n            continue\n        else:\n            if arr[j] % n == arr[inv] % n:\n                arr[j], arr[inv] = arr[inv], arr[j]\n                break\n            else:\n                arr[j], arr[inv] = arr[inv], arr[j]\n                inv = j\n    \n    \n    \n    return inv\n    \n    \n    \n    \n    \n    \ndef palindrome_reverse(word):\n    '''\n    Write a python function to find the palindrome reverse of a word.\n    '''\n    word = word.lower()\n    word = word.replace(\" \", \"\")\n    \n    if len(word) == 0:\n        return word\n    \n    if len(word) == 1:\n        return word\n    \n    if len(word) == 2:\n        if word[0]!= word[1]:\n            return word[1] + word[0]\n        else:\n            return word[1]\n        \n    \n    for i in range(len(word)//2):\n        if word[i]!= word[-i-1]:\n            return word[-i-1] + word[i]\n        \n    return word[-1] + word[0]\n        \n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \ndef right_justify(text, ch):\n    '''\n    Write a python function to print the text right justified by character ch.\n    '''\n    \n    text = list(text)\n    \n    for i in range(len(text)):\n        if text[i] =='':\n            text[i] =''\n        else:\n            text[i] = ch\n    \n    text = ''.join(text)\n    text = text.replace(' ', ch)\n    \n    return text\n        \n        \n        \n        \n    \ndef swap_case(str):\n    '''\n    Write a python function to swap case of the entire string.\n    '''\n    str = list(str)\n    for i in range(len(str)):\n        if str[i] == 'a':\n            str[i] = str[i].upper()\n        else:\n            str[i] = str[i].lower()\n    \n    return ''.join(str)\n    \n    \n    \n    \n    \n    \ndef convert_to_number(s):\n    '''\n    Write a python function to convert a string to a number.\n    '''\n    s = s.replace('.', '').replace('-', '')\n    if s[0] == '+':\n        s = s[1:]\n    \n    try:\n        return int(s)\n    except:\n        try:\n            return float(s)\n        except:\n            return 0\n    \n    \n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    \n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef palindrome(s):\n    '''\n    Write a python function to convert a string to palindrome.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    \n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef minimum_difference(arr):\n    '''\n    Write a python function to find the minimum difference between any pair of two numbers in a list.\n    '''\n    arr = sorted(arr)\n    diff = arr[1] - arr[0]\n    \n    for i in range(1, len(arr)-1):\n        if diff > arr[i+1] - arr[i]:\n            diff = arr[i+1] - arr[i]\n            \n    \n    \n    \n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = s1.replace(' ', '')\n        s2 = s2.replace(' ', '')\n        if sorted(s1) == sorted(s2):\n            return True\n        else:\n            return False\n    \n    \n    \n    \n    \n    \ndef is_palindrome_rec(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    \n    s = s.replace(' ', '')\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef maximum_count(arr, k):\n    '''\n    Write a python function to find the maximum number of occurrences of any value in an array of numbers.\n    '''\n    if k == 0:\n        return 0\n    \n    k = k + 1\n    \n    arr = list(arr)\n    \n    \n    \n    \n    \n    \n    \ndef is_palindrome_rec_dp(s, n):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        if s[0]!= s[1]:\n            return False\n        else:\n            return True\n    else:\n        if s[0]!= s[n-1]:\n            return False\n        else:\n            return is_palindrome_rec_dp(s, n-1)\n        \n        \n        \n        \n    \n    \n    \n    \n    \n    \ndef is_prime_rec_dp(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \ndef is_prime_iterative(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n <= 0:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \n    \n    \n    \n    \n    \ndef reverse(s):\n    '''\n    Write a python function to find the reverse of a string.\n    '''\n    s = list(s)\n    for i in range(len(s)//2):\n        s[i], s[-i-1] = s[-i-1], s[i"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #initialize variable\n    cnt=0\n    #checking the length of the list and see whether the element increases consecutively or not.\n    for i in range(len(l)):\n        if i+1==len(l):\n            break\n        elif l[i]<l[i+1]:\n            cnt=cnt+1\n        else:\n            cnt=0\n        #if the consecutive element is equal to zero, means that it is increasing\n        if cnt==0:\n            return True\n        else:\n            cnt=0\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return 1\n    return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print(l)\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while(i<(len(l)-1)):\n        if(l[i]==l[i+1]):\n            i=i+2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            flag = 1\n            break\n    if flag == 1:\n        print('True')\n    else:\n        print('False')\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # global variable \n    i = 0\n    while i < len(l) - 1: \n        if (l[i] == l[i + 1]): \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    for j in range(0, len(l)-1):\n        if l[j] == l[j+1]:\n            i = i+1\n        else:\n            if i==1:\n                return True\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3:\n        print(\"Empty List\")\n    else:\n        l = list(l)\n        l.sort()\n        for i in range(0,len(l)):\n            if i == len(l)-1:\n                break\n            if l[i] + 1!= l[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n=len(l)\n    if n<=1:\n        return False\n    else:\n        for i in range(1,n):\n            if l[i]!=l[i-1]+1:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<2:\n        return False\n    else:\n        for i in range(1, len(l)):\n            if l[i]-l[i-1]==1:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for x in test_list1:\n        if x in test_list2:\n            return x\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    print(\"Tuple Intersection of the given list is :\")\n    print(set1.intersection(set2))\n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    print(\"Tuple Difference of the given list is :\")\n    print(set1.difference(set2))\n    \ndef tuple_union(test_list1, test_list2):\n    '''\n    Write a function to find the tuple union of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    print(\"Tuple Union of the given list is :\")\n    print(set1.union(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # code here\n    \n    return [x for x in test_list1 if x in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # raise NotImplementedError('Need to write function to find the intersection of the tuples')\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Length of the lists are not equal.')\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    intersection = test_list1.intersection(test_list2)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    lst1 = []\n    lst2 = []\n    tup_lst1 = []\n    tup_lst2 = []\n    lst3 = []\n    for i in range(len(test_list1)):\n        lst1.append(test_list1[i])\n        tup_lst1.append(tuple(lst1))\n    for i in range(len(test_list2)):\n        lst2.append(test_list2[i])\n        tup_lst2.append(tuple(lst2))\n    for i in tup_lst1:\n        for j in tup_lst2:\n            if i == j:\n                lst3.append(i)\n    return lst3\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result=[]\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            result.append(newch)\n        else:\n            result.append(str1[i])\n    return ''.join(result)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    temp_string=list(str1)\n    for i in range(len(str1)):\n        if temp_string[i]==ch:\n            temp_string[i]=newch\n    str1=''.join(temp_string)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for ch in str1:\n        if ch == ch:\n            newstr += newch\n        else:\n            newstr += ch\n    return newstr\ndef replace_char1(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr = newstr[:i] + newch + newstr[i+1:]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,'')\n    str1=str1.replace(ch,newch)\n    return str1\n    \n    \ndef swap_char(str1,a,b):\n    '''\n    Write a function to swap characters in a string.\n    '''\n    str1=str1.replace(a,'')\n    str1=str1.replace(b,'')\n    return str1\n    \n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse the string.\n    '''\n    str1=str1.split(' ')\n    str1=str1[::-1]\n    str1=' '.join(str1)\n    return str1\n    \n    \ndef bin_to_dec(str1):\n    '''\n    Write a function to convert binary to decimal.\n    '''\n    str1=str1.replace(' ','')\n    l=list(str1)\n    d=0\n    for i in range(0,len(l)):\n        if l[i]=='1':\n            d=d+2**(len(l)-i-1)\n    return d\n    \n    \ndef dec_to_bin(n):\n    '''\n    Write a function to convert decimal to binary.\n    '''\n    s=''\n    while n>0:\n        if n&1==1:\n            s='1'+s\n        else:\n            s='0'+s\n        n=n>>1\n    return s\n    \n    \ndef string_to_binary(str1):\n    '''\n    Write a function to convert a string to binary.\n    '''\n    str1=str1.replace(' ','')\n    l=list(str1)\n    s=''\n    for i in range(0,len(l)):\n        if l[i]=='1':\n            s+='1'\n        else:\n            s+='0'\n    return s\n    \n    \ndef binary_to_string(b):\n    '''\n    Write a function to convert binary to string.\n    '''\n    s=''\n    for i in range(0,len(b)):\n        if b[i]=='1':\n            s+='1'\n        else:\n            s+='0'\n    return s\n    \n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert decimal to octal.\n    '''\n    s=''\n    octal=0\n    while n>0:\n        octal=octal+(n%8)\n        n=n//8\n    return octal\n    \n    \ndef octal_to_decimal(n):\n    '''\n    Write a function to convert octal to decimal.\n    '''\n    s=0\n    for i in range(0,len(n)):\n        s=s+(int(n[i])*(8**i))\n    return s\n    \n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert decimal to hexadecimal.\n    '''\n    s=''\n    while n>0:\n        if n%16==10:\n            s='A'+s\n        elif n%16==11:\n            s='B'+s\n        elif n%16==12:\n            s='C'+s\n        elif n%16==13:\n            s='D'+s\n        elif n%16==14:\n            s='E'+s\n        elif n%16==15:\n            s='F'+s\n        else:\n            s=str(n%16)+s\n        n=n//16\n    return s\n    \n    \ndef hexadecimal_to_decimal(str1):\n    '''\n    Write a function to convert hexadecimal to decimal.\n    '''\n    s=''\n    if 'A' in str1:\n        s+='10'\n    if 'B' in str1:\n        s+='11'\n    if 'C' in str1:\n        s+='12'\n    if 'D' in str1:\n        s+='13'\n    if 'E' in str1:\n        s+='14'\n    if 'F' in str1:\n        s+='15'\n    else:\n        s=str1\n    return int(s,16)\n    \n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert decimal to binary.\n    '''\n    s=''\n    while n>0:\n        s=str(n%2)+s\n        n=n//2\n    return s\n    \n    \ndef binary_to_decimal(b):\n    '''\n    Write a function to convert binary to decimal.\n    '''\n    s=0\n    for i in range(len(b)):\n        s=s+int(b[i])*2**i\n    return s\n    \n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert decimal to octal.\n    '''\n    s=''\n    while n>0:\n        s=str(n%8)+s\n        n=n//8\n    return s\n    \n    \ndef octal_to_decimal(b):\n    '''\n    Write a function to convert octal to decimal.\n    '''\n    s=0\n    for i in range(len(b)):\n        s=s+int(b[i])*(8**i)\n    return s\n    \n    \ndef octal_to_hexadecimal(n):\n    '''\n    Write a function to convert octal to hexadecimal.\n    '''\n    s=''\n    while n>0:\n        if n%8==8:\n            s='A'+s\n        elif n%8==9:\n            s='B'+s\n        elif n%8==10:\n            s='C'+s\n        elif n%8==11:\n            s='D'+s\n        elif n%8==12:\n            s='E'+s\n        elif n%8==13:\n            s='F'+s\n        else:\n            s=str(n%8)+s\n        n=n//8\n    return s\n    \n    \ndef hexadecimal_to_octal(str1):\n    '''\n    Write a function to convert hexadecimal to octal.\n    '''\n    s=''\n    if 'A' in str1:\n        s+='8'\n    if 'B' in str1:\n        s+='9'\n    if 'C' in str1:\n        s+='10'\n    if 'D' in str1:\n        s+='11'\n    if 'E' in str1:\n        s+='12'\n    if 'F' in str1:\n        s+='13'\n    else:\n        s=str1\n    return s\n    \n    \ndef hexadecimal_to_binary(str1):\n    '''\n    Write a function to convert hexadecimal to binary.\n    '''\n    s=''\n    while len(str1)>0:\n        if '0'<=str1[0]<='9':\n            s=str1[0]+s\n        else:\n            s='1'+s\n        str1=str1[1:]\n    return s\n    \n    \ndef hexadecimal_to_decimal(str1):\n    '''\n    Write a function to convert hexadecimal to decimal.\n    '''\n    s=0\n    for i in range(0,len(str1),2):\n        if str1[i]=='A':\n            s=s+10\n        elif str1[i]=='B':\n            s=s+11\n        elif str1[i]=='C':\n            s=s+12\n        elif str1[i]=='D':\n            s=s+13\n        elif str1[i]=='E':\n            s=s+14\n        elif str1[i]=='F':\n            s=s+15\n        else:\n            s=s+int(str1[i])\n    return s\n    \n    \ndef binary_to"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for ch in str1:\n        if ch!= ch:\n            str2 += ch\n        else:\n            str2 += newch\n    print(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    print(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=lambda k: dict1[k], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n    \ndef reverse_dict(dict1):\n    '''\n    Write a function to get a dictionary with the keys and values reversed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        new_dict[value] = key\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # O(n)\n    # Sorting the dictionary will require the dictionary to be sorted by value, which can be done in constant time.\n    # However, in the case of dictionaries where the values are numbers, the sorting can be done in constant time.\n    # The following is an example of an O(n) sort\n    dic1 = {'a': 10, 'b': 5, 'c': 7, 'd': 4}\n    print(sorted(dic1.items(), key=lambda x: x[1]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(),key = lambda x:x[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda kv:(kv[1],kv[0]))\nprint(sort_counter({'a':6,'b':5,'c':4,'d':3,'e':2,'f':1}))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_list = []\n    sort_list.sort(key=dict1.get, reverse=True)\n    for x in sort_list:\n        print(x, dict1[x])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = list()\n    d = dict()\n    l.append((dict1.items()))\n    l.sort()\n    for i in l:\n        for j in i:\n            d[j[0]] = j[1]\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k in sorted(dict1,key=dict1.get,reverse=True):\n        print(k,dict1[k])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda item:item[1])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    res = 0\n    min = 2**32\n    max = -2**32\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n        res += nums[i]\n    return res, min, max\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n    \n    \ndef filter_map(nums):\n    '''\n    Write a python function to filter out all the elements from a given array which are not in a given range.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    if max_num > 20 or min_num < 1:\n        return []\n    else:\n        filtered = list(filter(lambda x: x >= min_num and x <= max_num, nums))\n        return filtered\n    \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # s = nums[0] + nums[1] + nums[2] + nums[3]\n    # return max(s, min(s))\n    return sum(sorted(nums)[::-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    sum = 0\n    for i in range(0, len(nums)):\n        if (max_val == nums[i]):\n            sum += max_val\n        if (min_val == nums[i]):\n            sum += min_val\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_list = nums\n    num_list.sort()\n    return num_list[0] + num_list[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(max(nums) + min(nums))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string=string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \nis_lower('lower')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for char in string:\n        if ord(char) >= ord('a') and ord(char) <= ord('z'):\n            new_string += chr(ord(char) - 32)\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # return re.sub(r'\\b[a-z]+\\b', '', str1, flags=re.IGNORECASE)\n    pattern = re.compile(r'\\b[a-z]+\\b', flags=re.IGNORECASE)\n    return pattern.sub('', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    # return re.sub(r'\\d', '', str1)\n    pattern = re.compile(r'\\d')\n    return pattern.sub('', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    # return re.sub(r'[^A-Za-z0-9]+', '', str1)\n    pattern = re.compile(r'[^A-Za-z0-9]+')\n    return pattern.sub('', str1)\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    # return re.sub(r'[^\\w]', '', str1)\n    pattern = re.compile(r'[^\\w]+')\n    return pattern.sub('', str1)\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces from a given string.\n    '''\n    # return re.sub(r' +','', str1)\n    pattern = re.compile(r' +')\n    return pattern.sub(' ', str1)\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    # return re.split(r'\\s+', str1)\n    pattern = re.compile(r'\\s+')\n    return len(pattern.split(str1))\ndef count_number(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    # return re.findall(r'\\d+', str1)\n    pattern = re.compile(r'\\d+')\n    return len(pattern.findall(str1))\ndef count_lowercase_letter(str1):\n    '''\n    Write a function to count the number of lowercase letters in a given string.\n    '''\n    # return re.findall(r'[a-z]+', str1)\n    pattern = re.compile(r'[a-z]+')\n    return len(pattern.findall(str1))\ndef count_uppercase_letter(str1):\n    '''\n    Write a function to count the number of uppercase letters in a given string.\n    '''\n    # return re.findall(r'[A-Z]+', str1)\n    pattern = re.compile(r'[A-Z]+')\n    return len(pattern.findall(str1))\ndef count_capital_letter(str1):\n    '''\n    Write a function to count the number of capital letters in a given string.\n    '''\n    # return re.findall(r'[A-Z]+', str1)\n    pattern = re.compile(r'[A-Z]+')\n    return len(pattern.findall(str1))\ndef count_start_with_uppercase(str1):\n    '''\n    Write a function to count the number of uppercase letters in a given string.\n    '''\n    # return re.findall(r'^[A-Z]+', str1)\n    pattern = re.compile(r'^[A-Z]+')\n    return len(pattern.findall(str1))\ndef count_start_with_lowercase(str1):\n    '''\n    Write a function to count the number of uppercase letters in a given string.\n    '''\n    # return re.findall(r'^[a-z]+', str1)\n    pattern = re.compile(r'^[a-z]+')\n    return len(pattern.findall(str1))\ndef count_start_with_digits(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    # return re.findall(r'^\\d+', str1)\n    pattern = re.compile(r'^\\d+')\n    return len(pattern.findall(str1))\ndef count_start_with_special_characters(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    # return re.findall(r'^[^\\w]+', str1)\n    pattern = re.compile(r'^[^\\w]+')\n    return len(pattern.findall(str1))\ndef count_start_with_space(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    # return re.findall(r'^\\s+', str1)\n    pattern = re.compile(r'^\\s+')\n    return len(pattern.findall(str1))\ndef count_uppercase_characters(str1):\n    '''\n    Write a function to count the number of uppercase characters in a given string.\n    '''\n    # return re.findall(r'[A-Z]+', str1)\n    pattern = re.compile(r'[A-Z]+')\n    return len(pattern.findall(str1))\ndef count_lowercase_characters(str1):\n    '''\n    Write a function to count the number of lowercase characters in a given string.\n    '''\n    # return re.findall(r'[a-z]+', str1)\n    pattern = re.compile(r'[a-z]+')\n    return len(pattern.findall(str1))\ndef count_special_characters(str1):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    # return re.findall(r'[^\\w\\s]+', str1)\n    pattern = re.compile(r'[^\\w\\s]+')\n    return len(pattern.findall(str1))\ndef count_numbers(str1):\n    '''\n    Write a function to count the number of numbers in a given string.\n    '''\n    # return re.findall(r'\\d+', str1)\n    pattern = re.compile(r'\\d+')\n    return len(pattern.findall(str1))\ndef count_whitespace(str1):\n    '''\n    Write a function to count the number of whitespaces in a given string.\n    '''\n    # return re.findall(r'\\s+', str1)\n    pattern = re.compile(r'\\s+')\n    return len(pattern.findall(str1))\ndef count_characters(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    # return len(str1)\n    pattern = re.compile(r'[^A-Za-z ]+')\n    return len(pattern.findall(str1))\ndef count_alphabets(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    # return len(str1)\n    pattern = re.compile(r'[a-z]+')\n    return len(pattern.findall(str1))\ndef count_punctuations(str1):\n    '''\n    Write a function to count the number of punctuations in a given string.\n    '''\n    # return re.findall(r'[.,]', str1)\n    pattern = re.compile(r'[.,]')\n    return len(pattern.findall(str1))\ndef count_alphanumeric(str1):\n    '''\n    Write a function to count the number of alphanumeric characters in a given string.\n    '''\n    # return re.findall(r'[A-Za-z0-9]+', str1)\n    pattern = re.compil"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.upper()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    return re.sub('[a-z]', \"\", str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l=[]\n    for i in str1:\n        if i.islower():\n            l.append(i)\n        else:\n            pass\n    \n    return ''.join(l)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str=str1\n    for i in range(0,len(str1)):\n        if(str1[i].islower()):\n            new_str=new_str[:i]+new_str[i+1:]\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    s = pattern.sub('', str1)\n    return s\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(\"[a-z]\", \"\", str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    pattern = re.compile(r'^[a-z]*$')\n    return ''.join([char for char in str1 if not pattern.search(char)])\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    else :\n        return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef First_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef eight_Digit(n) :  \n    '''\n    Write a python function to find the eight digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Eighth_Digit(n) :  \n    '''\n    Write a python function to find the eight digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef nine_Digit(n) :  \n    '''\n    Write a python function to find the nine digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Ninth_Digit(n) :  \n    '''\n    Write a python function to find the nine digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef ten_Digit(n) :  \n    '''\n    Write a python function to find the ten digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Tenth_Digit(n) :  \n    '''\n    Write a python function to find the ten digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n    \ndef eleven_Digit(n) :  \n    '''\n    Write a python function to find the eleven digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleven digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef twelve_Digit(n) :  \n    '''\n    Write a python function to find the twelve digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelve digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef thirteen_Digit(n) :  \n    '''\n    Write a python function to find the thirteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Thirteenth_Digit(n) :  \n    '''\n    Write a python function to find the thirteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef fourteen_Digit(n) :  \n    '''\n    Write a python function to find the fourteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Fourteenth_Digit(n) :  \n    '''\n    Write a python function to find the fourteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef fifteen_Digit(n) :  \n    '''\n    Write a python function to find the fifteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Fifteenth_Digit(n) :  \n    '''\n    Write a python function to find the fifteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef sixteen_Digit(n) :  \n    '''\n    Write a python function to find the sixteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Sixteenth_Digit(n) :  \n    '''\n    Write a python function to find the sixteen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        \ndef seventeen_Digit(n) :  \n    '''\n    Write a python function to find the seventeen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n%10\n        \ndef Seventeenth_Digit(n) :  \n    '''\n    Write a python function to find the seventeen digit of a given number.\n    '''\n    if n < 10 :  \n        return n\n    else :  \n        return n//10\n        "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    return int(s[0])\ndef is_Palindrome(n) :\n    '''\n    Write a python function to find if a given number is a palindrome or not.\n    '''\n    s=str(n)\n    l=list(s)\n    l.reverse()\n    if s==''.join(l) :\n        print('Yes')\n    else:\n        print('No')\ndef first_non_repeating_character(s) :\n    '''\n    Write a python function to find the first non repeating character in a given string.\n    '''\n    if not s:\n        return -1\n    d=dict()\n    for i in s:\n        if i not in d :\n            d[i] = 1\n        else :\n            d[i] += 1\n    for i in d :\n        if d[i]==1 :\n            return i\n    return -1\n    \ndef main() :\n    print(first_Digit(1000000000000))\n    print(first_Digit(12))\n    print(first_Digit(35))\n    print(first_Digit(44))\n    print(first_Digit(1000000000))\n    print(first_Digit(45))\n    print(first_Digit(90))\n    print(first_Digit(1000))\n    print(first_Digit(9000))\n    print(first_Digit(16))\n    print(first_Digit(2000))\n    print(first_Digit(9999))\n    print(first_Digit(2000))\n    print(first_Digit(2000))\n    print(first_Digit(2000))\n    print(first_Digit(200))\n    print(first_Digit(200))\n    print(first_Digit(200))\n    print(first_Digit(300))\n    print(first_Digit(300))\n    print(first_Digit(300))\n    print(first_Digit(400))\n    print(first_Digit(400))\n    print(first_Digit(400))\n    print(first_Digit(500))\n    print(first_Digit(500))\n    print(first_Digit(500))\n    print(first_Digit(600))\n    print(first_Digit(600))\n    print(first_Digit(600))\n    print(first_Digit(700))\n    print(first_Digit(700))\n    print(first_Digit(700))\n    print(first_Digit(800))\n    print(first_Digit(800))\n    print(first_Digit(800))\n    print(first_Digit(900))\n    print(first_Digit(900))\n    print(first_Digit(900))\n    print(first_Digit(1000))\n    print(first_Digit(1000))\n    print(first_Digit(1000))\n    print(first_Digit(1100))\n    print(first_Digit(1100))\n    print(first_Digit(1100))\n    print(first_Digit(1200))\n    print(first_Digit(1200))\n    print(first_Digit(1200))\n    print(first_Digit(1300))\n    print(first_Digit(1300))\n    print(first_Digit(1300))\n    print(first_Digit(1400))\n    print(first_Digit(1400))\n    print(first_Digit(1400))\n    print(first_Digit(1500))\n    print(first_Digit(1500))\n    print(first_Digit(1500))\n    print(first_Digit(1600))\n    print(first_Digit(1600))\n    print(first_Digit(1600))\n    print(first_Digit(1700))\n    print(first_Digit(1700))\n    print(first_Digit(1700))\n    print(first_Digit(1800))\n    print(first_Digit(1800))\n    print(first_Digit(1800))\n    print(first_Digit(1900))\n    print(first_Digit(1900))\n    print(first_Digit(1900))\n    print(first_Digit(2000))\n    print(first_Digit(2000))\n    print(first_Digit(2000))\n    print(first_Digit(2001))\n    print(first_Digit(2001))\n    print(first_Digit(2001))\n    print(first_Digit(2002))\n    print(first_Digit(2002))\n    print(first_Digit(2002))\n    print(first_Digit(2004))\n    print(first_Digit(2004))\n    print(first_Digit(2004))\n    print(first_Digit(2005))\n    print(first_Digit(2005))\n    print(first_Digit(2005))\n    print(first_Digit(2006))\n    print(first_Digit(2006))\n    print(first_Digit(2006))\n    print(first_Digit(2007))\n    print(first_Digit(2007))\n    print(first_Digit(2007))\n    print(first_Digit(2008))\n    print(first_Digit(2008))\n    print(first_Digit(2008))\n    print(first_Digit(2009))\n    print(first_Digit(2009))\n    print(first_Digit(2009))\n    print(first_Digit(2010))\n    print(first_Digit(2010))\n    print(first_Digit(2010))\n    print(first_Digit(2011))\n    print(first_Digit(2011))\n    print(first_Digit(2011))\n    print(first_Digit(2012))\n    print(first_Digit(2012))\n    print(first_Digit(2012))\n    print(first_Digit(2013))\n    print(first_Digit(2013))\n    print(first_Digit(2013))\n    print(first_Digit(2014))\n    print(first_Digit(2014))\n    print(first_Digit(2014))\n    print(first_Digit(2015))\n    print(first_Digit(2015))\n    print(first_Digit(2015))\n    print(first_Digit(2016))\n    print(first_Digit(2016))\n    print(first_Digit(2016))\n    print(first_Digit(2017))\n    print(first_Digit(2017))\n    print(first_Digit(2017))\n    print(first_Digit(2018))\n    print(first_Digit(2018))\n    print(first_Digit(2018))\n    print(first_Digit(2019))\n    print(first_Digit(2019))\n    print(first_Digit(2019))\n    print(first_Digit(2020))\n    print(first_Digit(2020))\n    print(first_Digit(2020))\n    print(first_Digit(2021))\n    print(first_Digit(2021))\n    print(first_Digit(2021))\n    print(first_Digit(2022))\n    print(first_Digit(2022))\n    print(first_Digit(2022))\n    print(first_Digit(2023))\n    print(first_Digit(2023))\n    print(first_Digit(2023))\n    print(first_Digit(2024))\n    print(first_Digit(2024))\n    print(first_Digit(2024))\n    print(first_Digit(2025))\n    print(first_Digit(2025))\n    print(first_Digit(2025))\n    print(first_Digit(2026))\n    print(first_Digit(2026))\n    print(first_Digit(2026))\n    print(first_Digit(2027))\n    print(first_Digit(2027))\n    print(first_Digit(2027))\n    print(first_Digit(2028))\n    print(first_Digit(2028))\n    print(first_Digit(2028))\n    print(first_Digit(2029))\n    print(first_Digit(2029))\n    print(first_Digit(2029))\n    print(first_Digit(2030))\n    print(first_Digit(2030))\n    prin"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    return first_Digit(n//10)\nprint(first_Digit(233),first_Digit(2333),first_Digit(23333),first_Digit(2333323))\ndef sum_of_Digits(n) :\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    s=0\n    while n>0:\n        n,d=divmod(n,10)\n        s=s+d\n    return s\nprint(sum_of_Digits(233),sum_of_Digits(2333),sum_of_Digits(23333),sum_of_Digits(2333323))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    i = 0\n    for i in range(len(s)) :\n        if s[i].isnumeric() :\n            return int(s[i])\n        else :\n            return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef fifth_Digit(n) :\n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef sixth_Digit(n) :\n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef seventh_Digit(n) :\n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef eight_Digit(n) :\n    '''\n    Write a python function to find the eight digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef ninth_Digit(n) :\n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef tenth_Digit(n) :\n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    return n//1 % 10\n    \ndef first_Two_Digits(n) :\n    '''\n    Write a python function to find the first two digits of a given number.\n    '''\n    return n//100 % 10, n//10 % 10\n    \ndef last_Two_Digits(n) :\n    '''\n    Write a python function to find the last two digits of a given number.\n    '''\n    return n//10 % 10, n%10\n    \ndef whole_Number(n) :\n    '''\n    Write a python function to find the whole number of a given number.\n    '''\n    return n\n    \ndef largest_Digit(n) :\n    '''\n    Write a python function to find the largest digit of a given number.\n    '''\n    return max(n//1 % 10, n//1 % 10)\n    \ndef smallest_Digit(n) :\n    '''\n    Write a python function to find the smallest digit of a given number.\n    '''\n    return min(n//1 % 10, n//1 % 10)\n    \ndef maximum_Digit(n) :\n    '''\n    Write a python function to find the maximum digit of a given number.\n    '''\n    return max(n//1 % 10, n//1 % 10)\n    \ndef minimum_Digit(n) :\n    '''\n    Write a python function to find the minimum digit of a given number.\n    '''\n    return min(n//1 % 10, n//1 % 10)\n    \ndef prime_Digit(n) :\n    '''\n    Write a python function to find the prime digit of a given number.\n    '''\n    return max(n//1 % 10, n//1 % 10)\n    \ndef prime_Digit_Two(n) :\n    '''\n    Write a python function to find the prime digit of a given number.\n    '''\n    return max(n//10 % 10, n//1 % 10)\n    \ndef prime_Digit_Three(n) :\n    '''\n    Write a python function to find the prime digit of a given number.\n    '''\n    return max(n//100 % 10, n//10 % 10, n%10)\n    \ndef least_Prime_Digit(n) :\n    '''\n    Write a python function to find the least prime digit of a given number.\n    '''\n    return min(n//1 % 10, n//1 % 10)\n    \ndef most_Prime_Digit(n) :\n    '''\n    Write a python function to find the most prime digit of a given number.\n    '''\n    return min(n//1 % 10, n//1 % 10)\n    \ndef least_Prime_Digit_Two(n) :\n    '''\n    Write a python function to find the least prime digit of a given number.\n    '''\n    return min(n//10 % 10, n//1 % 10)\n    \ndef most_Prime_Digit_Two(n) :\n    '''\n    Write a python function to find the most prime digit of a given number.\n    '''\n    return min(n//100 % 10, n//10 % 10, n%10)\n    \ndef least_Prime_Digit_Three(n) :\n    '''\n    Write a python function to find the least prime digit of a given number.\n    '''\n    return min(n//100 % 10, n//10 % 10, n%10)\n    \ndef most_Prime_Digit_Three(n) :\n    '''\n    Write a python function to find the most prime digit of a given number.\n    '''\n    return min(n//100 % 10, n//10 % 10, n%10)\n    \ndef reverse_Number(n) :\n    '''\n    Write a python function to reverse a given number.\n    '''\n    return n%10, n//10 % 10\n    \ndef next_Number(n) :\n    '''\n    Write a python function to find the next number in a given number.\n    '''\n    return n%10, n//10 % 10\n    \ndef previous_Number(n) :\n    '''\n    Write a python function to find the previous number in a given number.\n    '''\n    return n%10, n//10 % 10\n    \ndef next_Two_Digits(n) :\n    '''\n    Write a python function to find the next two digits in a given number.\n    '''\n    return n//100 % 10, n//10 % 10\n    \ndef previous_Two_Digits(n) :\n    '''\n    Write a python function to find the previous two digits in a given number.\n    '''\n    return n//10 % 10, n//100 % 10\n    \ndef next_Three_Digits(n) :\n    '''\n    Write a python function to find the next three digits in a given number.\n    '''\n    return n//1000 % 10, n//100 % 10, n//10 % 10\n    \ndef previous_Three_Digits(n) :\n    '''\n    Write a python function to find the previous three digits in a given number.\n    '''\n    return n//10 % 10, n//100 % 10, n//1000 % 10\n    \ndef next_Four_Digits(n) :\n    '''\n    Write a python function to find the next four digits in a given number.\n    '''\n    return n//10000 % 10, n//1000 % 10, n//100 % 10, n//10 % 10\n    \ndef previous_Four_Digits(n) :\n    '''\n    Write a python function to find the previous four digits in a given number.\n    '''\n    return n//10 % 10, n//100 % 10, n//1000 % 10, n//10000 % 10\n    \ndef first_Four_Digits(n) :\n    '''\n    Write a python function to find the first four digits in a given number.\n    '''\n    return n//10000 % 10, n//1000 % 10, n//100 % 10, n//10 % 10\n    \ndef first_Five_Digits(n) :\n    '''\n    Write a python function to find the first five digits in a given number.\n    '''\n    return n//10000 % 10, n//1000 % 10, n//100 % 10, n//10 % 10, n%10\n    \ndef second_Five_Digits(n) :\n    '''\n    Write a python function to find the second five digits in a given number.\n    '''\n    return n//100 % 10, n//1000 % 10, n//100 % 10, n//10 % 10, n%10\n    \ndef third_Five_Digits(n) :\n    '''\n    Write a python function to find the third five digits in a given number.\n    '"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n    \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n    \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n // 10) * 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n\n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #your code here\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for item in list:\n        if item%2!= 0:\n            odd_list.append(item)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #return[x for x in list if x%2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(0,len(list)):\n        if list[i] % 2 == 0:\n            continue\n        odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if i % 2!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialization of count variable \n    count = 0\n    # traverse in the list \n    for i in range(0,len(list)): \n        # checking condition \n        if list[i] % 2 == 1: \n            # increment count \n            count += 1\n            # returning count \n            return count \n            \n            \n        "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n*(n+1))*(2*n)\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    sum = sum + n*n*n\n    return sum\n    \ndifference(5)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**3\n    for i in range(1,n+1):\n        s+=i\n    print(\"Difference between the sums of cubes of the first\",n,\"numbers and the sums of the first\",n,\"numbers are : \",s-s**2)\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cube(n) : \n        sum = 0\n        for i in range(1, n+1): \n            sum = sum + i ** 3\n        return sum\n    \n    def sum_natural(n) : \n        sum = 0\n        for i in range(1, n+1): \n            sum = sum + i\n        return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = 0\n    diff = 0\n    for i in range(1, n+1):\n        sum_n += i**3\n    for i in range(1, n+1):\n        diff += i\n    return diff - sum_n\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to calculate the sum of the squares of the first n natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = []\n    # your code here\n    result.append(sum([i**3 for i in range(1, n+1)]))\n    result.append(sum([i**3 for i in range(1, n+1)]))\n    print(result)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = []\n    a = sum(list(map(lambda x : x**3, range(1,n+1))))\n    b = sum(list(map(lambda x : x**3, range(1,n+1))))\n    return a - b\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    sum = sum - n * (n+1) * (2*n+1)/6\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        if A[i] % 2!= 0:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(0,N) : \n            if (A[i] ^ A[j])%2!= 0 : \n                count += 1\n                \n    return count "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j] == 1):\n                odd_pair += 1\n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if A[i] == A[j] and A[i]!= A[count] : \n                count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i < N:\n        if (A[i] ^ 1) == 0 :\n            count = count + 1\n            i = i + 1\n        else :\n            i = i + 1\n    return count\n    "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pair_count = 0\n    \n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                pair_count+=1\n    \n    return pair_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if (A[i] & 1) : \n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x = 0\n    for i in range(N): \n        if A[i] & 1: \n            x = x ^ A[i] \n    return x \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i]^A[j])%2 == 1 :\n                count+=1\n    print('Number of odd pairs = ',count)\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if (string == string.lower()):\n        return string.upper()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    str = string.upper() + string.lower()\n    return str\n    \nif __name__ == \"__main__\":\n    s = 'String'\n    print(s, \"is case sensitive?\", is_case_sensitive(s))\n    s = 'String'\n    print(s, \"is case sensitive?\", toggle_case(s))\n    s = 'String'\n    print(s, \"is case sensitive?\", toggle_case(s))\n    s = 'String'\n    print(s, \"is case sensitive?\", toggle_string(s))\n    s = 'String'\n    print(s, \"is case sensitive?\", toggle_case(s)"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    tog_string = ''\n    for i in string:\n        if i.isupper():\n            tog_string += i.lower()\n        else:\n            tog_string += i.upper()\n    return tog_string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_str = \"\"\n    for char in string:\n        if char.isupper():\n            new_str += char.lower()\n        else:\n            new_str += char.upper()\n    return new_str\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = int(n1), int(n2)\n    return(abs(n1-n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    x = abs(n1 - n2)\n    for i in range(1,3):\n        if x == 0:\n            break\n        elif x % 10!= 0:\n            distance += 1\n        x = (x//10) % 10\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dist = 0\n    for i in range(max(len(n1), len(n2))):\n        dist += abs(int(n1[i]) - int(n2[i]))\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # print(n1, n2)\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = str(n1)\n    d2 = str(n2)\n    total = 0\n    for i in range(len(d1)):\n        if d1[i]!= d2[i]:\n            total += 1\n    return total\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (n1 - n2) + 10\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    if n1 == n2:\n        print(\"Both numbers are same\")\n    else:\n        for i in range(len(str(n1))):\n            digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n        print(f\"Sum of the difference between both numbers is {digit_sum}\")\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Time: O(n) and space: O(1)\n    max_ending_here = a[0]\n    max_so_far = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        sum = 0\n        for j in range(i, size):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_index = 0\n    for i in range(size):\n        max_sum = 0\n        if a[i] > max_sum:\n            max_sum = a[i]\n        if i == size-1:\n            return max_sum\n        for j in range(i+1, size):\n            if a[j] > max_sum:\n                max_sum = a[j]\n            if max_sum > max_sum + a[j]:\n                max_sum = max_sum + a[j]\n                if max_sum > max_sum_index:\n                    max_sum_index = max_sum\n    return max_sum_index\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0 or a == None:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    max_sum = a[0]\n    max_cur = a[0]\n    \n    for i in range(1, size):\n        max_cur = max(max_cur+a[i], a[i])\n        max_sum = max(max_sum, max_cur)\n        \n    return max_sum\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert max_sub_array_sum([], 1) == 0\n    assert max_sub_array_sum([1, 2, 3], 1) == 3\n    assert max_sub_array_sum([2, 3, 4, 1, 5], 5) == 9\n    assert max_sub_array_sum([2, 3, 4, 1, 5], 8) == 11\n    assert max_sub_array_sum([-1, 1, -2, 2, 3], 2) == 5\n    assert max_sub_array_sum([2, 3, 4, 1, 5], 2) == 5\n    assert max_sub_array_sum([1, 1, 1, 1, 1], 2) == 4\n    assert max_sub_array_sum([-1, -2, -3, -4, -5], -4) == -1\n    assert max_sub_array_sum([-1, -2, -3, -4, -5], -5) == -1\n    assert max_sub_array_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12], -1) == -13\n    assert max_sub_array_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12], -12) == -1\n    assert max_sub_array_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12], -13) == -1\n    assert max_sub_array_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12], -14) == -1\n    assert max_sub_array_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432, -433, -434, -435, -436, -437, -438, -439, -440, -441, -442, -443, -444, -445, -446, -447, -448, -449, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # solution 1\n    # for loop\n    max_sum = a[0]\n    for i in range(size):\n        temp_sum = 0\n        for j in range(i, size):\n            temp_sum += a[j]\n            max_sum = max(max_sum, temp_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    min_sum = float('inf')\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    max_sum = float('-inf')\n    max_start = 0\n    curr_sum = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n    return max_sum, max_start\n    \n    \n    \ndef max_sub_array_sum_rec(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    return max(max_sub_array_sum_rec(a, size-1), max_sub_array_sum_rec(a, size-1) + a[size-1])\n    \n    \ndef max_sub_array_sum_2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n    \n    \ndef max_sub_array_sum_3(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        \n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_4(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \n    \ndef max_sub_array_sum_5(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_6(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_7(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_8(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_9(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_10(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_11(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    curr_sum = 0\n    max_sum = -1\n    start = 0\n    for i in range(0, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    return max_sum, start\n    \n    \ndef max_sub_array_sum_12(a, size):\n    '''"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    start = 0\n    for i in range(1, size):\n        temp_sum = 0\n        if a[i] > max_sum:\n            max_sum = a[i]\n            start = i\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_array_sum = 0\n    current_sub_array_sum = 0\n    max_sub_array = 0\n    \n    for i in range(0, size):\n        current_sub_array_sum += a[i]\n        if current_sub_array_sum > max_sub_array:\n            max_sub_array_sum = current_sub_array_sum\n            max_sub_array = i + 1\n        \n        if current_sub_array_sum < 0:\n            current_sub_array_sum = 0\n    \n    return max_sub_array_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    i = 0\n    max_sum = float('-inf')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in final_tuple:\n            final_tuple.append(test_tup1[i])\n        if test_tup2[i] not in final_tuple:\n            final_tuple.append(test_tup2[i])\n    final_tuple.sort()\n    return final_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_list = sorted(list(union_set))\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup = ()\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            temp_tup = temp_tup + (test_tup1[i],)\n        else:\n            temp_tup = temp_tup + (test_tup1[i],)\n    temp_tup = temp_tup + (test_tup2[i],)\n    return temp_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    return sorted(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union_tuple:\n            union_tuple += (test_tup1[i], )\n        if test_tup2[i] not in union_tuple:\n            union_tuple += (test_tup2[i], )\n    union_tuple = sorted(union_tuple)\n    return union_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(set(test_tup1 + test_tup2))\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) & set(test_tup2)))\n    \ndef union_elements_size(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and return their size.\n    '''\n    return len(list(set(test_tup1 + test_tup2)))\n    \ndef intersection_elements_size(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and return their size.\n    '''\n    return len(list(set(test_tup1) & set(test_tup2)))\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = ()\n    for i in range(len(test_tup1)):\n        union_tuple += (test_tup1[i],)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] in union_tuple:\n            pass\n        else:\n            union_tuple += (test_tup2[i],)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_length = 1\n    lst_length = len(lst)\n    for i in range(1, lst_length):\n        temp = 1\n        for j in range(i):\n            if lst[j] <= lst[i]:\n                temp += 1\n        if temp > max_length:\n            max_length = temp\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for element in lst:\n        if type(element)!= int:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = 0\n    for i in lst:\n        if maxi < len(i):\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 1\n    maximum = lst[0]\n    \n    for i in range(1, len(lst)):\n        if lst[i] > maximum:\n            count += 1\n            maximum = lst[i]\n        else:\n            continue\n    \n    return count\n    \nprint(Find_Max_Length([1,2,3,4,5]))"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = 0\n    # Your Code here\n    d = dict()\n    for x in lst:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n        if d[x] > res:\n            res = d[x]\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    else:\n        lst_length = len(lst)\n        for i in range(lst_length):\n            lst_subset = lst[i:lst_length]\n            if len(lst_subset) == 1:\n                return 1\n            else:\n                subset_length = len(lst_subset)\n                if subset_length > max_subset_length:\n                    max_subset_length = subset_length\n    return max_subset_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def findmaxlen(lst):\n        if not lst:\n            return 0\n        else:\n            min_len = 1\n            for item in lst:\n                if len(item) > min_len:\n                    min_len = len(item)\n            return min_len\n    print(findmaxlen(lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    if len(lst) == 2:\n        return 2\n    lst_len = len(lst)\n    if lst_len % 2 == 0:\n        return 2 + Find_Max_Length(lst[:lst_len//2]) + Find_Max_Length(lst[lst_len//2:])\n    else:\n        return 2 + Find_Max_Length(lst[:lst_len//2])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength=0\n    for i in lst:\n        if len(i)>maxlength:\n            maxlength=len(i)\n    return maxlength\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quoted_text = re.findall(r\"[\\\"\\'](.*)[\\\"\\'].*\", text)\n    print(quoted_text)\n    return quoted_text\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotes = re.findall(r'\\\"[^\\\"]*\\\"|\\'[^\\']*\\'', text)\n    values = re.findall(r'[^\\\"]*', text)\n    values = list(filter(lambda x: x!= '', values))\n    values = list(map(lambda x: x.replace('\\\"', '').replace('\\'', ''), values))\n    return dict(zip(quotes, values))\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    if text.find('\"') == -1:\n        return None\n    return text[text.find('\"')+1:text.find('\"', text.find('\"')+1)]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern,text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # mytext = 'The quick brown fox jumps over the lazy dog'\n    # print('Values:', extract_values(mytext))\n    mytext = 'The quick brown fox jumps over the lazy dog'\n    pattern = r'\"([\\w\\d\\s]+)\"'\n    res = re.findall(pattern, mytext)\n    print(res)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #return re.findall(\"\\\"(.*?)\\\"\", text)\n    return re.findall('\"[^\"]*?\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(\"[A-z\\s]{0,}(?=['\"])\",text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quot = text.index('\"')\n    values = text[quot+1:-1]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"[^\\\"]*\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return 'null'\n    text = text.strip()\n    if len(text) == 0:\n        return 'null'\n    val = re.findall(r\"\\\"(.*?)\\\"\",text)\n    if len(val) == 0:\n        return 'null'\n    return val\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(n): \n        for j in range(i+1,n): \n            if (arr[i] == arr[j]): \n                print(arr[i], arr[j]) \n                return count_Pairs(arr, n)\n    return 1\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # sort the given array\n    arr.sort()\n    # count the number of possible unordered pairs.\n    # two pointer method\n    count = 0\n    i = 0\n    j = len(arr)-1\n    while(i < j):\n        if arr[i] == arr[j]:\n            count = count + 1\n            i = i + 1\n            j = j - 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    lst=[]\n    cnt=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            lst.append(arr[i])\n            lst.append(arr[j])\n            if sorted(lst)==lst:\n                cnt+=1\n    return cnt"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    print(\"count of possible unordered pairs : \",count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count = count +1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                c += 1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    i = 0\n    j = n-1\n    count = 0\n    while(i < j):\n        if (arr[i] == arr[j]):\n            i+=1\n            j-=1\n            count+=1\n        else:\n            break\n    return count\nprint(count_Pairs([2,1,3,4],4))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(list(word))\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    new_list = []\n    for char in word:\n        new_list.append(char)\n    return new_list\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split() \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    list_of_words = []\n    for i in range(len(word)):\n        list_of_words.append(word[i])\n    return list_of_words\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n >= 10:\n        n = n % 10 + (n // 10) % 10\n        n = n // 10\n    return n\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(n) % 10 + sum_digits(int(n) // 10) if int(n) > 0 else 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0, 'n must be a non-negative integer.'\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n>0:\n        res += n%10\n        n = n//10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num_digits = 0\n    while n > 0:\n        num_digits += 1\n        n = n // 10\n    return num_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    #checking if the list is sorted in increasing order\n    if list1==sorted(list1):\n        return True\n    else:\n        return False\n    \ndef sort_list(list1):\n    '''\n    Write a function to sort the list in increasing order\n    '''\n    \n    #taking the length of list\n    length = len(list1)\n    i = 0\n    \n    #iterating over the list\n    while i < length-1:\n        j = i+1\n        \n        #checking if the element at i index is bigger or smaller than the element at j index\n        while j < length:\n            if list1[i] > list1[j]:\n                #swapping the elements\n                list1[i], list1[j] = list1[j], list1[i]\n            j+=1\n        i+=1\n        \ndef second_index(list1,x):\n    '''\n    Write a function that finds the index of a specified element in a given array\n    '''\n    \n    #loop and checking for each element in the list\n    for i in range(0,len(list1)):\n        \n        #checking if the current element is equal to the given element\n        if list1[i]==x:\n            #returning the index of the given element\n            return i\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=1\n    while(i<len(list1)):\n        if(list1[i-1]>list1[i]):\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    index = 0\n    if len(list1) == 0:\n        return False\n    else:\n        while index < len(list1)-1:\n            if list1[index] > list1[index + 1]:\n                return False\n            index += 1\n        return True\n    \nprint(issort_list([5,1,2,3,4])) # returns True\nprint(issort_list([3,2,1,3])) # returns False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n    \n'''\nOutput:\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1==sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n    "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            for i in range(2,len(list1)):\n                if list1[i-1] >= list1[i]:\n                    return False\n            return True\n        else:\n            return False\n    \n    "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list(map(lambda x: {}, range(0,length)))\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({\"firstname\": \"\", \"lastname\": \"\"})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0,length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # init helper function\n    def sublist_sort(sub_list):\n        '''\n        Helper function to sort each sublist\n        '''\n        # init variables\n        sub_list_len = len(sub_list)\n        # sublist_sort helper function\n        for i in range(sub_list_len):\n            # sort each sublist\n            sub_list[i] = sorted(sub_list[i])\n        # return list of sublist\n        return sub_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sublist_sort(lst):\n        return sorted(lst, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for item in list1:\n        sorted_list.append(sorted(item))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(list1)\n    for i in range(length):\n        for j in range(length):\n            if i >= j:\n                continue\n            else:\n                if len(list1[i]) < len(list1[j]):\n                    list1[i],list1[j] = list1[j],list1[i]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    sublists.append(list1)\n    \n    while len(sublists) > 0:\n        sublist = sublists.pop()\n        \n        for i in range(0, len(sublist)):\n            for j in range(i+1, len(sublist)):\n                if len(sublist[i]) > len(sublist[j]):\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n        sublists.append(sublist)\n        \n    return sublists\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        nums_set = set(nums)\n    print(nums_set)\n    return (list(nums_set))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #create a new array with the first element\n    new_array = nums[0]\n    #loop through the rest of the array\n    for i in nums[1:]:\n        #compare the new array with the current iteration\n        if new_array!= i:\n            #add the current iteration to the new array\n            new_array = new_array + i\n    return new_array\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_list = []\n    for i in range(len(nums)):\n        final_list.append(list(set(nums[i])))\n    return final_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    \n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if type(nums) is not list:\n        raise ValueError('Please use list type.')\n    uniq = set()\n    result = []\n    for num in nums:\n        if num in uniq:\n            continue\n        uniq.add(num)\n        result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    print(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n):\n            if nums[i] == nums[j] and i!= j:\n                nums[i] = -1\n                break\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # method 1 using two sets\n    # num_set = set(nums)\n    # return [i for i in nums if i in num_set]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return 1\n    "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        result *= i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return len(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list1 = list_data\n    # print(\"The list is :\", list1)\n    # return list1.count(list1[0]) * list1[0]\n    # print(\"The unique product of numbers in the given list is :\", list1.count(list1[0]) * list1[0])\n    # return len(list1)\n    # print(\"The unique product of numbers in the given list is :\",len(list1))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data.sort()\n    unique_data = set(list_data)\n    product = 1\n    for i in unique_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_dict = {}\n    result = 1\n    for i in list_data:\n        if i in my_dict:\n            my_dict[i] = my_dict.get(i) + 1\n        else:\n            my_dict[i] = 1\n    for key, value in my_dict.items():\n        result = result * key\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for num in list_data:\n        if not num % 2:\n            prod *= num\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for x in list_data:\n        if list_data.count(x) == 1:\n            prod *= x\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for i in list_data:\n        if i not in list_data[:-1]:\n            prod *= i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for i in list_data:\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for cylinder = pi*r*h\n    area = math.pi*r*r + math.pi*h*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    area = pi * r**2 * h\n    \n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = pi*(r**2)*h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r==0 or h==0:\n        raise Exception(\"error: r,h must be non-zero\")\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = pi*(r**2)\n    B = 2*pi*r*h\n    S = A+B\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print('The surface area of a cylinder is : ', 4*pi*r*(r+h) )\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return pi*r*r+2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = pi*r**2\n    A = S*h\n    return A\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    surfacearea = 2*pi*r*h+2*pi*r*2\n    return surfacearea\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B = sorted(B)\n    for i in range(len(A)):\n        if A[i] in B:\n            if A[i] == B[i]:\n                continue\n            else:\n                if A[i:i+len(B)] == B:\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    if m >= n:\n        for i in range(n):\n            for j in range(i, n):\n                if A[i:j+1] == B:\n                    return True\n        return False\n    else:\n        for i in range(m):\n            for j in range(i, m):\n                if A[i:j+1] == B:\n                    return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Solution\n    l1 = A\n    l2 = B\n    a = len(A)\n    b = len(B)\n    if a > b:\n        return 0\n    count = 0\n    for i in range(a):\n        if A[i] == B[i]:\n            count += 1\n    if count == b:\n        return 1\n    else:\n        return 0\n    \n    #Solution(using Set)\n    # def is_Sub_Array(A,B):\n    #     A_set = set(A)\n    #     for i in A_set:\n    #         if i not in B:\n    #             return 0\n    #     else:\n    #         return 1\n    #\n    # print(is_Sub_Array([1, 2, 3], [2, 3]))\n    # print(is_Sub_Array([1, 1, 1, 1], [2, 2]))\n    # print(is_Sub_Array([1, 1, 1, 1], [3, 3, 3, 3]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # code here\n    if len(B)>len(A):\n        return False\n    elif len(B)==len(A) and A==B:\n        return True\n    else:\n        n=len(A)\n        for i in range(n-len(B)+1):\n            print(i)\n            if A[i:i+len(B)]==B:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            if i == len(A)-1:\n                return True\n            else:\n                if A[i+1] in B:\n                    return True\n                else:\n                    return False\n                \nif __name__ == '__main__': \n    A = [1, 2, 3, 4, 5, 6] \n    B = [1, 2] \n    if is_Sub_Array(A, B): \n        print(\"Yes\") \n    else: \n        print(\"No\")\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == None or B == None:\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #get length of A\n    n = len(A)\n    #get length of B\n    m = len(B)\n    if n < m:\n        return False\n    #check if length is same\n    if n == m:\n        #if the first element of A is equal to first element of B\n        if A[0] == B[0]:\n            #then there is a loop in the list\n            for i in range(1,n):\n                if A[i]!= B[i]:\n                    return False\n            #if no loop then it is a subset\n            return True\n        #if the first element of A is not equal to first element of B\n        else:\n            return False\n    #if the length of A is greater than length of B\n    else:\n        if A[0] == B[0]:\n            for i in range(1,n):\n                if A[i]!= B[i]:\n                    return False\n            return True\n        #if A[0] is not equal to B[0]\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Solution 1\n    #a = A[:]\n    #b = B[:]\n    #if a == b:\n    #    return True\n    #for x in A:\n    #    if x in b:\n    #        for y in b:\n    #            if y not in A:\n    #                return False\n    #            else:\n    #                b.remove(y)\n    #return True\n    #Solution 2\n    #if A == B:\n    #    return True\n    #else:\n    #    for i in A:\n    #        if i in B:\n    #            B.remove(i)\n    #    return False if B else True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    while n:\n        res = res * n\n        n -= 1\n    return res\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    i = 1\n    while(n>0):\n        factorial*=i\n        i=i+1\n        n=n-1\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    for i in range(1, n+1):\n        res = res * i\n    return res % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #x=1\n    #while x<=n:\n    #    x*=10\n    #return x%10\n    #print(x)\n    #print(int(str(n)[-1]))\n    return int(str(n)[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n%10\n    if (n!=0):\n        return(n*last_Digit_Factorial(n-1))\n    else:\n        return 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    total = 1\n    while(n>0):\n        total = total*(n%10)\n        n = n // 10\n    return(total)\n    \ndef last_Digit_Cube(n): \n    '''\n    Write a python function to find the last digit in cube of a given number.\n    '''\n    n = abs(n)\n    result = 1\n    while(n>0):\n        result = result * result * (n%10)\n        n = n // 10\n    return(result)\n    \n    \n    \ndef last_Digit_Cube(n):\n    '''\n    Write a python function to find the last digit in cube of a given number.\n    '''\n    if n == 0:\n        return 1\n    result = 1\n    while n:\n        result = result * result * (n % 10)\n        n = n // 10\n    return(result)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    last_digit = factorial % 10\n    print('Last digit of factorial is:',last_digit)\n    return last_digit\ndef is_Palindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    reversed_string = ''\n    for i in range(len(string)-1,-1,-1):\n        reversed_string = reversed_string + string[i]\n    if string == reversed_string:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            print('The number is not prime')\n            break\n    else:\n        print('The number is prime')\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if (n%i)==0:\n                print('The number is not prime')\n                break\n        else:\n            print('The number is prime')\n    else:\n        print('The number is not prime')\ndef sum_of_digits(number): \n    '''\n    Write a python function to sum the digits of the given number.\n    '''\n    sum_of_digits = 0\n    while number > 0:\n        sum_of_digits = sum_of_digits + number%10\n        number = number//10\n    print('Sum of digits of given number is:',sum_of_digits)\ndef find_largest_and_smallest_number(list_of_numbers): \n    '''\n    Write a python function to find the largest and smallest number in the given list.\n    '''\n    largest_number = list_of_numbers[0]\n    smallest_number = list_of_numbers[0]\n    for i in range(1,len(list_of_numbers)):\n        if list_of_numbers[i] > largest_number:\n            largest_number = list_of_numbers[i]\n        if list_of_numbers[i] < smallest_number:\n            smallest_number = list_of_numbers[i]\n    print('Largest number in list is:',largest_number)\n    print('Smallest number in list is:',smallest_number)\ndef even_odd(number):\n    '''\n    Write a python function to check whether a number is even or odd.\n    '''\n    if number%2 == 0:\n        print('The given number is even')\n    else:\n        print('The given number is odd')\ndef is_prime_number(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,number):\n        if number%i == 0:\n            print('The number is not prime')\n            break\n    else:\n        print('The number is prime')\ndef is_prime_number(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if number>1:\n        for i in range(2,number):\n            if number%i==0:\n                print('The number is not prime')\n                break\n        else:\n            print('The number is prime')\n    else:\n        print('The number is not prime')\ndef prime_number_of_digits(number):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number>1:\n        for i in range(2,number):\n            if number%i == 0:\n                print('The number is not prime')\n                break\n        else:\n            print('The number is prime')\n    else:\n        print('The number is not prime')\ndef prime_number_of_digits(number):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number>1:\n        for i in range(2,number):\n            if number%i == 0:\n                print('The number is not prime')\n                break\n        else:\n            print('The number is prime')\n    else:\n        print('The number is not prime')\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,number+1):\n        factorial = factorial * i\n    print('The factorial of given number is:',factorial)\ndef factorial_of_number(number): \n    '''\n    Write a python function to find the factorial of a given number.\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Enter a positive number only\")\n        return\n    if n == 0 or n == 1:\n        return 1\n    return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # list1 = list(map(int, list1))\n    # list2 = list(map(int, list2))\n    # list3 = list(map(int, list3))\n    # list1.extend(list2)\n    # list1.extend(list3)\n    # print(list1)\n    output_list = list1.copy()\n    for i in range(0,len(list2)):\n        output_list.append(list2[i])\n        output_list.append(list3[i])\n    return output_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(0, len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list3[i])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list += list1[i]\n        interleaved_list += list2[i]\n        interleaved_list += list3[i]\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create a new list\n    new_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for item in list1 for item in list2 for item in list3]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(itertools.chain.from_iterable([list1, list2, list3]))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    n = len(test_tup1)\n    for i in range(0,n):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i]\n    return \"No such element\"\n        \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    tup1.sort()\n    tup2.sort()\n    for i in range(len(tup1)):\n        if tup1[i]!= tup2[i]:\n            return tup1[i]\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!=test_tup2[i]:\n            print(test_tup1[i])\n            break\n    return\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dif_1 = []\n    dif_2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dif_1.append(test_tup1[i])\n            dif_2.append(test_tup2[i])\n    return (dif_1, dif_2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i]\n    return test_tup1[i]\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1) - set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.intersection(set2)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1)-set(test_tup2))+list(set(test_tup2)-set(test_tup1))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # return sorted(set(test_tup1) - set(test_tup2))\n    res = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            res.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[i])\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            new_tuple.append(i)\n        if i % 2!= 0:\n            even_fnc(i)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    temp_list = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is tuple:\n            temp_list.append(even_ele(test_tuple[i], even_fnc))\n        elif test_tuple[i] % 2 == 0:\n            temp_list.append(even_fnc(test_tuple[i]))\n        else:\n            temp_list.append(test_tuple[i])\n    return tuple(temp_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple)):\n            if test_tuple[i][j] % 2!= 0:\n                test_tuple[i][j] = even_fnc(test_tuple[i][j])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            new_tuple.append(even_ele(ele, even_fnc))\n        else:\n            if even_fnc(ele):\n                new_tuple.append(ele)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for ele in test_tuple:\n        if type(ele) == tuple:\n            result.append(even_ele(ele, even_fnc))\n        else:\n            if even_fnc(ele):\n                result.append(ele)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    for i in range(0, len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            test_tuple[i] = 0\n    \n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple)!= tuple:\n        raise TypeError\n    if type(even_fnc)!= bool:\n        raise TypeError\n    if len(test_tuple) == 0:\n        return test_tuple\n    return even_ele(test_tuple[1:], even_fnc) if even_fnc else even_ele(test_tuple[1:], even_fnc)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple_list = list(test_tuple)\n    tuple_list.sort()\n    for i in range(0,len(tuple_list),2):\n        if i+1 < len(tuple_list):\n            if tuple_list[i+1] % 2!= 0:\n                tuple_list[i+1] = even_fnc(tuple_list[i+1])\n        else:\n            break\n    return tuple(tuple_list)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = s * b\n    return a * a\n    \ndef calculate_Area(x,y): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = surface_Area(x,y) * 3\n    return area\n    \ndef calculate_Area_in_two(x,y,z): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = surface_Area(x,y) * z\n    return area\n    "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s=b*2+s\n    s1=s*b\n    print(\"Surface Area:\",s)\n    print(\"Surface Area:\",s1)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    if(b<0 or s<0):\n        print(\"Invalid value\")\n    else:\n        if(b==0 and s==0):\n            return 0\n        else:\n            return (s*b)/2*math.sqrt(3)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*math.sqrt(s) \n  \ndef minimum_Sum_Cover(a, b): \n    '''\n    Write a python function to find the minimum sum of covers for a given base and height.\n    '''\n    if a == 0 or b == 0:\n        return -1\n    return (a*b)+(a*0.6)+(b*0.6)\n  \ndef unique_Paths(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    return (m-1)*(n-1) \n  \ndef unique_Paths_2(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_3(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_4(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    if i == 1: \n                        dp[i][j] = dp[i][j-1] \n                    elif j == 1: \n                        dp[i][j] = dp[i-1][j] \n                    else: \n                        dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_5(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    if i == 1: \n                        dp[i][j] = dp[i][j-1] \n                    elif j == 1: \n                        dp[i][j] = dp[i-1][j] \n                    else: \n                        dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_6(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    if i == 1: \n                        dp[i][j] = dp[i][j-1] \n                    elif j == 1: \n                        dp[i][j] = dp[i-1][j] \n                    else: \n                        dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_7(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    if i == 1: \n                        dp[i][j] = dp[i][j-1] \n                    elif j == 1: \n                        dp[i][j] = dp[i-1][j] \n                    else: \n                        dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_8(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 1 and j == 1: \n                    dp[i][j] = 1\n                else: \n                    if i == 1: \n                        dp[i][j] = dp[i][j-1] \n                    elif j == 1: \n                        dp[i][j] = dp[i-1][j] \n                    else: \n                        dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[m-1][n-1] \n  \ndef unique_Paths_9(m, n): \n    '''\n    Write a python function to find the number of paths from top left to bottom right\n    in a m*n grid.\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"The surface area of the square pyramid with given base edge and height is:\",2*b*s)\n    return \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    ans=b*b+2*b*s\n    return(ans)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    area = 0.5*math.pi*b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*s)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # print('The surface area of a square pyramid with a given base edge and height is'+ str((s*(s+b)*0.5)) + '.')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*2+2*(b*s)\nprint(surface_Area(8,4)) #return 112\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print(\"This dict is empty\")\n    else:\n        print(\"This dict is not empty\")\n    \nmy_dict({})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Yes, the dictionary is empty\")\n    else:\n        print(\"No, the dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return True if dict1 == {} else False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    C = 0\n    P = 1\n    for i in range(num):\n        C, P = P, (C*(2*P - 1))//(2*P + 1)\n    return int(C)\n    \n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (num * catalan_number(num - 1)) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert type(num)==int, \"Numer must be integer\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(1,num+1):\n            res += catalan_number(i-1)*catalan_number(num-i)\n        return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num > 0\n    x = num\n    a = 1\n    i = 0\n    while i < num:\n        a = a * (x-i) / i\n        x = x - 1\n        i = i + 1\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    if num == 1 or num == 2:\n        return 1\n    cat_num = 0\n    for i in range(1, num + 1):\n        cat_num += catalan_number(i - 1) * catalan_number(i - 2)\n    return cat_num\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Note: if the number goes beyond the limit, it should be handled.\n    catalan_numbers = []\n    catalan_number_dict = {}\n    for num in range(1, num + 1):\n        catalan_number_dict[num] = None\n    catalan_numbers.append(1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #TODO\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i)*catalan_number(num-i-1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return math.factorial(2*num) // (math.factorial(num) ** 2)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    y = [\"ing\", \"ly\"]\n    adverbs = []\n    i = 0\n    while True:\n        adverbs.append(text[i:i+4])\n        i+=4\n        if text[i:i+4] == \"ing\" and not any(x in text[i+4:i+6] for x in y):\n            return adverbs\n        elif not any(x in text[i:i+4] for x in y) and text[i:i+4] == \"ing\" and i+4 < len(text):\n            i+=4\n        elif not any(x in text[i:i+4] for x in y) and not any(x in text[i:i+4] for x in y) and i+4 < len(text):\n            return None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_set = set()\n    adverb_regex = r'(ly)$'\n    adverb_pattern = re.compile(adverb_regex)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return\n    \ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    return\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in text.split('.'):\n        for j in re.findall('\\bly\\b', i):\n            print(j)\n            print(text.split('.').index(i))\n            print(text.split('.')[text.split('.').index(i)])\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'ly(?:ly)+', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Your code here\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = str(text)\n    adverb = r'ly'\n    match = re.search(adverb, text)\n    if match:\n        if match.group() == adverb:\n            return match.span()\n    else:\n        return None\ndef find_noun_phrase(text):\n    '''\n    Write a function to find the first noun phrase ending with '.' and its positions in a given string.\n    '''\n    text = str(text)\n    noun_phrase = r'\\.\\s'\n    match = re.search(noun_phrase, text)\n    if match:\n        if match.group() == noun_phrase:\n            return match.span()\n    else:\n        return None\ndef find_noun_phrases(text):\n    '''\n    Write a function to find all noun phrases ending with '.' and their positions in a given string.\n    '''\n    text = str(text)\n    noun_phrase = r'\\.\\s'\n    matches = re.finditer(noun_phrase, text)\n    for match in matches:\n        if match.group() == noun_phrase:\n            yield match.span()\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    #find index of ly\n    index = text.find('ly')\n    #print(index)\n    #find index of 'L'\n    index_L = text.find('l')\n    #print(index_L)\n    if index > index_L:\n        #print(\"index > index_L\")\n        #check if index is in a string that ends with ly\n        if text[index:index+2] == \"ly\":\n            #print(\"text[index:index+2] == 'ly'\")\n            #print(text[index+1])\n            #print(text[index+2])\n            return text[index+1:]\n        else:\n            #print(\"index < index_L\")\n            return \"No match\"\n    else:\n        #print(\"index < index_L\")\n        #if index < index_L, remove ly\n        text = text.replace(\"ly\",\"\")\n        #print(text)\n        #now check if text is a string that ends with ly\n        if text[-2:] == \"ly\":\n            #print(\"text[-2:] == 'ly'\")\n            #print(text[-1])\n            #print(text[-2])\n            return text[:-2]\n        else:\n            #print(\"index < index_L\")\n            #print(text[-2:])\n            #print(text[-2:])\n            return \"No match\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return \"Yay!\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    found = False\n    adverb_regex = re.compile(r'\\s+[a-z]+\\bly$', re.I)\n    for index, word in enumerate(text.split(' ')):\n        if re.match(adverb_regex, word) is not None:\n            found = True\n            print(\"The first adverb ending with ly:\", word)\n            print(index)\n    if found == False:\n        print(\"No adverbs ending with ly\")\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True, key=lambda x: x[1])\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    n=5\n    h=[]\n    for item in items:\n        if len(h)<n:\n            heapq.heappush(h,(-item[1],item))\n        else:\n            if item[1]<h[0][0]:\n                heapq.heappushpop(h,(-item[1],item))\n    return [(item[1],item[0]) for item in h]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item, value in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(value,item))\n        else:\n            if heap[0][0] < value:\n                heapq.heappushpop(heap,(value,item))\n    return [(item, value) for value,item in heap]\nprint(expensive_items([('cpu', 100),('ram', 200),('ssd',300),('monitor',50),('hdmi',20)],3))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h=[]\n    for item in items:\n        heapq.heappush(h,(item[1],item[0]))\n    result=[]\n    for i in range(n):\n        result.append(heapq.heappop(h)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1], reverse=True)\n    i=0\n    j=0\n    result = []\n    while i<n and j<len(items):\n        if items[i][1]>items[j][1]:\n            result.append(items[i])\n            i+=1\n        else:\n            j+=1\n    return result\n    \ndef get_paths(graph, start, end):\n    '''\n    Finds all paths from start to end in graph\n    '''\n    paths = []\n    visited = set()\n    # mark current node as visited and store in path\n    stack = [(start, [start])]\n    # keeps looping until all possible paths have been found\n    while stack:\n        # pop a vertex from stack and add it to visited\n        vertex, path = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            path = path + [vertex]\n            # if current vertex in graph is reached\n            if vertex == end:\n                # add path to paths\n                paths.append(path)\n            # if current vertex not in graph, search for all adjacent vertices\n            # in graph and push them into the stack\n            for adj_vertex in graph[vertex]:\n                if adj_vertex not in visited:\n                    stack.append((adj_vertex, path))\n    return paths\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = []\n    min_heap = []\n    max_heap = []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    costs = []\n    for i in items:\n        if i[1] not in costs:\n            costs.append(i[1])\n    max_cost = max(costs)\n    result = []\n    for i in items:\n        if i[1] == max_cost:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    max_heap = []\n    result = []\n    for i in range(n):\n        item = items[i]\n        if item[0] < min_heap[0]:\n            heapq.heappush(min_heap,item[0])\n        elif item[0] > max_heap[0]:\n            heapq.heappush(max_heap,item[0])\n        else:\n            if item[1] > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap,item[0])\n            elif item[1] < max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap,item[0])\n            else:\n                if item[1] > item[0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap,item[0])\n                else:\n                    heapq.heappop(max_heap)\n                    heapq.heappush(max_heap,item[0])\n    while min_heap or max_heap:\n        if min_heap:\n            result.append(heapq.heappop(min_heap))\n        if max_heap:\n            result.append(heapq.heappop(max_heap))\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #using a min heap\n    #store the item, and its price\n    priceheap = []\n    for item in items:\n        if len(priceheap)<n:\n            heapq.heappush(priceheap,(item[1],item[0]))\n        elif item[1]<heapq.nlargest(n,priceheap)[0][0]:\n            heapq.heappop(priceheap)\n            heapq.heappush(priceheap,(item[1],item[0]))\n    return [(item[0],item[1]) for item in priceheap]\n    \ndef expensive_items_improved(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #using a min heap\n    #store the item, and its price\n    priceheap = []\n    for item in items:\n        if len(priceheap)<n:\n            heapq.heappush(priceheap,(item[1],item[0]))\n        elif item[1]<heapq.nlargest(n,priceheap)[0][0]:\n            heapq.heappop(priceheap)\n            heapq.heappush(priceheap,(item[1],item[0]))\n    return [(item[0],item[1]) for item in priceheap]\n    \ndef expensive_items_sort(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #using a min heap\n    #store the item, and its price\n    priceheap = []\n    for item in items:\n        if len(priceheap)<n:\n            heapq.heappush(priceheap,(item[1],item[0]))\n        elif item[1]<heapq.nlargest(n,priceheap)[0][0]:\n            heapq.heappop(priceheap)\n            heapq.heappush(priceheap,(item[1],item[0]))\n    return [(item[0],item[1]) for item in priceheap]\n    \ndef expensive_items_sort_improved(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #using a min heap\n    #store the item, and its price\n    priceheap = []\n    for item in items:\n        if len(priceheap)<n:\n            heapq.heappush(priceheap,(item[1],item[0]))\n        elif item[1]<heapq.nlargest(n,priceheap)[0][0]:\n            heapq.heappop(priceheap)\n            heapq.heappush(priceheap,(item[1],item[0]))\n    return [(item[0],item[1]) for item in priceheap]\n    \ndef expensive_items_sort_improved_long(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #using a min heap\n    #store the item, and its price\n    priceheap = []\n    for item in items:\n        if len(priceheap)<n:\n            heapq.heappush(priceheap,(item[1],item[0]))\n        elif item[1]<heapq.nlargest(n,priceheap)[0][0]:\n            heapq.heappop(priceheap)\n            heapq.heappush(priceheap,(item[1],item[0]))\n    return [(item[0],item[1]) for item in priceheap]\n    \ndef find_shortest_path(graph, start, end):\n    '''\n    Write a function that takes in a graph, and 2 nodes\n    in that graph, and returns a list of all the shortest paths\n    from start to end, in any order.\n    '''\n    #use DFS to find the shortest path\n    #store the node, and its parent node\n    shortestpath = []\n    visited = set()\n    pathqueue = [(start, [start])]\n    while pathqueue:\n        (curr,path) = pathqueue.pop()\n        if curr == end:\n            shortestpath.extend(path)\n        else:\n            for neighbor in graph.get(curr, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    pathqueue.append((neighbor, path + [neighbor]))\n    return shortestpath\n    \ndef find_shortest_path_improved(graph, start, end):\n    '''\n    Write a function that takes in a graph, and 2 nodes\n    in that graph, and returns a list of all the shortest paths\n    from start to end, in any order.\n    '''\n    #use DFS to find the shortest path\n    #store the node, and its parent node\n    shortestpath = []\n    visited = set()\n    pathqueue = [(start, [start])]\n    while pathqueue:\n        (curr,path) = pathqueue.pop()\n        if curr == end:\n            shortestpath.extend(path)\n        else:\n            for neighbor in graph.get(curr, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    pathqueue.append((neighbor, path + [neighbor]))\n    return shortestpath\n    \ndef find_shortest_path_improved_long(graph, start, end):\n    '''\n    Write a function that takes in a graph, and 2 nodes\n    in that graph, and returns a list of all the shortest paths\n    from start to end, in any order.\n    '''\n    #use DFS to find the shortest path\n    #store the node, and its parent node\n    shortestpath = []\n    visited = set()\n    pathqueue = [(start, [start])]\n    while pathqueue:\n        (curr,path) = pathqueue.pop()\n        if curr == end:\n            shortestpath.extend(path)\n        else:\n            for neighbor in graph.get(curr, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    pathqueue.append((neighbor, path + [neighbor]))\n    return shortestpath\n    \ndef find_shortest_path_improved_long_best(graph, start, end):\n    '''\n    Write a function that takes in a graph, and 2 nodes\n    in that graph, and returns a list of all the shortest paths\n    from start to end, in any order.\n    '''\n    #use DFS to find the shortest path\n    #store the node, and its parent node\n    shortestpath = []\n    visited = set()\n    pathqueue = [(start, [start])]\n    while pathqueue:\n        (curr,path) = heapq.heappop(pathqueue)\n        if curr == end:\n            shortestpath.extend(path)\n        else:\n            for neighbor in graph.get(curr, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    pathqueue.append((neighbor, path + [neighbor]))\n    return shortestpath\n    \ndef find_shortest_path_best(graph, start, end):\n    '''\n    Write a function that takes in a graph, and 2 nodes\n    in that graph, and returns a list of all the shortest paths\n    from start to end, in any order.\n    '''\n    #use DFS to find the shortest path\n    #store the node, and its parent node\n    shortestpath = []\n    visited = set()\n    pathqueue = [(start, [start])]\n    while pathqueue:\n        (curr,path) = pathqueue.pop()\n        if curr == end:\n            shortestpath.extend(path)\n        else:\n            for neighbor in graph.get(curr, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    pathqueue.append((neighbor, path + [neighbor]))\n    return shortestpath\n    \ndef find_shortes"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    result = items[:n]\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>=len(l):\n        return []\n    return l[0:n]+l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i=0\n    for item in l:\n        if i==n:\n            break\n        i+=1\n    return l[:i]+l[i+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = l[n:]\n    l_ = l[:n]\n    l_.extend(new_list)\n    return l_\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return l\n    else:\n        first_half = l[:n]\n        second_half = l[n:]\n        return first_half + second_half\n        \ndef insert_into_array(l,i,x):\n    '''\n    Write a python function to insert the value x into array in index i.\n    '''\n    if i == len(l):\n        return l + [x]\n    else:\n        return l[:i] +[x] +l[i:]\n        \ndef delete_from_array(l,i):\n    '''\n    Write a python function to delete the element in index i from array.\n    '''\n    if i == len(l):\n        return l[0:i-1]\n    else:\n        return l[:i] + l[i+1:]\n        \ndef bubbleSort(l):\n    '''\n    Write a python function to sort the array using bubble sort.\n    '''\n    for i in range(len(l)-1):\n        for j in range(len(l)-1):\n            if l[j] > l[j+1]:\n                temp = l[j]\n                l[j] = l[j+1]\n                l[j+1] = temp\n            else:\n                continue\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    c = b + a\n    return c\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    if len(l) == 1:\n        a = l\n    else:\n        for i in range(0, len(l)):\n            if i == n:\n                a = l[0:n]\n                b = l[n:]\n            else:\n                a = l[0:i]\n                b = l[i:]\n    return a,b\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        return l[:n] + l[n+1:]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # list_x = ['Sugar', 'Tea', 'Milk', 'Eggs']\n    # list_x = (1, 2, 3, 4)\n    # print(list_x)\n    return tuple(listx)\n    # return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1,2,3]))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # return tuple(listx)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1,2,3,4,5]))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup=()\n    for i in range(len(listx)):\n        tup=(tup+tup)\n        return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = 0\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    diff = largest - smallest\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # Get the list\n    l = nums\n    # Sort the list and get the largest and smallest value\n    l.sort()\n    # Get the difference\n    largest_value = l[-1] - l[0]\n    # Return the difference\n    return largest_value\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    diff = largest - smallest\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    i = 0\n    j = n - 1\n    curr = nums[i]\n    while j > i:\n        if nums[j] < curr:\n            curr = nums[j]\n            i += 1\n        else:\n            j -= 1\n    return curr - nums[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return abs(nums[0]-nums[-1])\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums_max = max(nums)\n    nums_min = min(nums)\n    return nums_max - nums_min\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==0:\n        return -1\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num-min_num\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b + 1):\n        if num ** 2 == num:\n            print(num)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if a > b:\n        x = a\n        a = b\n        b = x\n    for i in range(a, b + 1):\n        if i**2 == i:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return(set(range(a, b+1)) - set([i ** 2 for i in range(a, b+1) if i ** 2 <= b]))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x, y = int(a), int(b)\n    while x > 0:\n        x = x - 1\n        y = y - int(y**0.5)\n        if x == y:\n            print(x)\n            break\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(a,b+1)]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for x in range(a, b+1):\n        if x**2 == a:\n            print(a, end=' ')\n        if x**2 > a and x**2 <= b:\n            print(x, end=' ')\n        if x**2 > b:\n            break\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a**2, b**2) if a**2 == b**2 else perfect_squares(b, a)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    answer = []\n    for i in range(a,b+1):\n        if i == math.sqrt(i):\n            answer.append(i)\n    print(answer)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if i**2 == a:\n            print(i)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = ((x**2) + (y**2))**0.5\n    theta = cmath.acos(x/r)\n    return (r*cmath.cos(theta), r*cmath.sin(theta))\ndef get_two_d(func):\n    '''\n    Write a function that takes a function and returns the first and second inputs of the\n    function.\n    '''\n    def get_2d(t):\n        return func(t, t)\n    return get_2d\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = y\n    r_i = x\n    r_f = (x ** 2) + (y ** 2) - r_i\n    c_1 = r_f / r_i\n    c_2 = r_f ** 2 / r_i ** 2\n    r_a = (radius * c_1)\n    r_b = radius - r_a\n    x_a = r_a * c_1\n    x_b = r_b * c_1\n    y_a = r_a * c_2\n    y_b = r_b * c_2\n    print(x_a,x_b,y_a,y_b)\n    return x_a,x_b,y_a,y_b\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return ((x*180)/3.1415926535, y*180/3.1415926535)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    t = complex(x,y)\n    r = abs(t)\n    a = cmath.phase(t)\n    if r == 0:\n        print('zero')\n    elif r > 0:\n        print(((r*math.cos(a))/(math.pi/2)),((r*math.sin(a))/(math.pi/2)))\n    else:\n        print(((r*math.cos(a))/(math.pi/2)),((r*math.sin(a))/(math.pi/2)))\n    return\ndef complex_to_rect(r,a):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers.\n    '''\n    a = complex(r,a)\n    print('Complex:',a)\n    print('Polar:',a.real,a.imag)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef rect_to_euler(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,a)\n    print('Equation:',d)\n    return\ndef euler_to_rect(r,a,d):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers using the equation rcos(a) + rsin(a) = d.\n    '''\n    d = complex(r,"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        x=0\n        y=1\n    else:\n        x=x*cmath.sqrt(1+(y*1j)**2)\n        y=y*cmath.sqrt(1+(x*1j)**2)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.atan2(y,x)\n    x_r = r * math.cos(theta)\n    y_r = r * math.sin(theta)\n    return(x_r,y_r)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    r=(x**2+y**2)**0.5\n    theta=(cmath.acos(x/r))\n    \n    x_rect=(r*cmath.cos(theta))\n    y_rect=(r*cmath.sin(theta))\n    \n    return (x_rect,y_rect)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = abs(x)\n    y = abs(y)\n    angle = cmath.phase(x)\n    angle = angle / 2\n    return (y * cmath.exp(complex(0,angle)))\ndef polar_circle(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = abs(phi)\n    return (r * cmath.exp(complex(0,phi)))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x=complex(x,y)\n    # x_r=abs(x)\n    # y_r=abs(y)\n    # if x_r>y_r:\n    #     x_r,y_r=y_r,x_r\n    # x_i=y_i=0\n    # if x_r>y_r:\n    #     x_i=-cmath.polar(x)[0]\n    #     y_i=cmath.polar(x)[1]\n    # else:\n    #     y_i=cmath.polar(x)[1]\n    #     x_i=-cmath.polar(x)[0]\n    # return(x_r,y_r,x_i,y_i)\n    if x==0:\n        if y<0:\n            return(0,1,-1,-1)\n        elif y>0:\n            return(0,1,1,1)\n        else:\n            return(0,1,0,0)\n    else:\n        if y>0:\n            return(cmath.polar(x)[0],cmath.polar(x)[1],1,1)\n        elif y<0:\n            return(cmath.polar(x)[0],cmath.polar(x)[1],-1,-1)\n        else:\n            return(cmath.polar(x)[0],cmath.polar(x)[1],0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect():\n    assert polar_rect(2,3) == (5,1.7320508075688772935271415)\n    assert polar_rect(2,-1) == (5,-0.8284271247461903)\n    assert polar_rect(2,2) == (5,1)\n    \ndef sq_rect(a,b):\n    '''\n    Write a function to convert square coordinates to rectangular coordinates.\n    '''\n    c,s = polar_rect(a,b)\n    r = cmath.sqrt(c)\n    return r,s\n    \ndef test_sq_rect():\n    assert sq_rect(2,3) == (3,1.7320508075688772935271415)\n    assert sq_rect(2,-1) == (5,0.8284271247461903)\n    assert sq_rect(2,2) == (3,1)\n    \ndef rve_rect(r,a,b):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c,s = polar_rect(a,b)\n    r = cmath.sqrt(c)\n    return c,s\n    \ndef test_rve_rect():\n    assert rve_rect(5,2,3) == (1.7320508075688772935271415,1.7320508075688772935271415)\n    assert rve_rect(5,2,-1) == (1.7320508075688772935271415,0.8284271247461903)\n    assert rve_rect(5,2,2) == (1,1)\n    \ndef polar_rect_x_y(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_x_y():\n    assert polar_rect_x_y(2,3) == (5,1.7320508075688772935271415)\n    assert polar_rect_x_y(2,-1) == (5,-0.8284271247461903)\n    assert polar_rect_x_y(2,2) == (5,1)\n    \ndef polar_rect_x(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_x():\n    assert polar_rect_x(2,3) == (5,1.7320508075688772935271415)\n    assert polar_rect_x(-1,2) == (5,-0.8284271247461903)\n    assert polar_rect_x(2,2) == (5,1)\n    \ndef polar_rect_y(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_y():\n    assert polar_rect_y(2,3) == (5,1.7320508075688772935271415)\n    assert polar_rect_y(-1,2) == (5,-0.8284271247461903)\n    assert polar_rect_y(2,2) == (5,1)\n    \ndef polar_rect_r_s(r,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_r_s():\n    assert polar_rect_r_s(5,1) == (5,1.7320508075688772935271415)\n    assert polar_rect_r_s(5,-0.8284271247461903) == (5,-1.7320508075688772935271415)\n    assert polar_rect_r_s(5,1) == (5,1)\n    \ndef polar_rect_theta(r,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return theta,s\n    \ndef test_polar_rect_theta():\n    assert polar_rect_theta(5,1) == (1.7320508075688772935271415,1.7320508075688772935271415)\n    assert polar_rect_theta(5,-0.8284271247461903) == (0.8284271247461903,1.7320508075688772935271415)\n    assert polar_rect_theta(5,1) == (1,1)\n    \ndef polar_rect_r(r,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_r():\n    assert polar_rect_r(5,1) == (5,1.7320508075688772935271415)\n    assert polar_rect_r(-1,2) == (5,-0.8284271247461903)\n    assert polar_rect_r(2,2) == (5,1)\n    \ndef polar_rect_s(r,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s\n    \ndef test_polar_rect_s():\n    assert polar_rect_s(5,1) == (5,1.7320508075688772935271415)\n    assert polar_rect_s(-1,2) == (5,-0.8284271247461903)\n    assert polar_rect_s(2,2) == (5,1)\n    \ndef polar_rect_r_s_theta(r,s,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return r,s,theta\n    \ndef test_polar_rect_r_s_theta():\n    assert polar_rect_r_s_theta(5,1,1) == (5,1.7320508075688772935271415,1.7320508075688772935271415)\n    assert polar_rect_r_s_theta(5,-1,0.8284271247461903) == (5,-0.8284271247461903,1.7320508075688772935271415)\n    assert polar_rect_r_s_theta(5,1,1) == (5,1,1)\n    \ndef polar_rect_theta_s(r,s,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.sqrt(r)\n    s = r/(2*theta)\n    return theta,s\n    \ndef test_polar_rect_theta_s():\n    assert polar_rect_theta_s(5,1,1.73205080756887"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Swapping first and last element \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = list(newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef swap_string(list_string): \n    '''\n    Write a python function to swap the even and odd elements in a list of numbers.\n    '''\n    newList = list_string\n    for i in range(len(newList)):\n        if i % 2!= 0:\n            newList[i], newList[i-1] = newList[i-1], newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \nif __name__ == \"__main__\":\n    \n    newList = swap_List(List)\n    print(newList)\n    "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"The list {}\".format(newList))\n    i=len(newList)-1\n    newList[0],newList[i]=newList[i],newList[0]\n    print(\"The list after interchangement {}\".format(newList))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList.pop(0)\n    last = newList.pop()\n    newList.insert(0, last)\n    newList.insert(len(newList), first)\n    print(newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1] \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(newList)\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = []\n    for i in range(n + 1):\n        for j in range(i + 1):\n            binomial_coeff.append(factorial(i) // (factorial(j) * factorial(i - j)))\n    return sum(binomial_coeff)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if n==0 or k==0:\n        return 1\n    else:\n        binomial_Coeff_Sum = 1\n        for i in range(1,k+1):\n            binomial_Coeff_Sum += n*binomial_Coeff(n-1,i-1)\n    return binomial_Coeff_Sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeffs=[]\n    for i in range(n+1):\n        coeffs.append(1)\n    for i in range(2,n+1):\n        for j in range(1,i):\n            coeffs[i]+=coeffs[i-1]*j\n    return coeffs[n]\n    \ndef binomial_Coeff_using_function(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=1\n    for i in range(1,n+1):\n        result=result*i\n    return result\n    \ndef count_occurences(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function2(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function3(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function4(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function5(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function6(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function7(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function8(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function9(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function10(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function11(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function12(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function13(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function14(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function15(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function16(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function17(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef count_occurences_using_function18(text,substring):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given text.\n    '''\n    count=0\n    for i in range(len(text)-len(substring)+1):\n        i"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(n+1):\n        res *= (k+i)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a=fact(n)/(fact(k)*fact(n-k))\n    return a\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #code here\n    k = min(k,n)\n    sum = 1\n    for i in range(1,k+1):\n        sum = sum * (n - i + 1) / i\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 1\n    for i in range(1,n+1):\n        binomial_coeff = binomial_coeff * (i)\n    return binomial_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return k\n    return binomial_Coeff(n-1,k) + k*binomial_Coeff(n-1,k-1)\n    \ndef binomial_Evaluation(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return k\n    return binomial_Evaluation(n-1,k) + k*binomial_Evaluation(n-1,k-1)\n    \ndef chudnovsky(n):\n    '''\n    Write a python function to find the sum of the product of consecutive chudnovsky coefficients.\n    '''\n    if n<=0:\n        return 0\n    return n*chudnovsky(n-1) + 4.527197*(n**3)/((n**3)+(n**3+7.23289)**2)\n    \ndef lucas(n):\n    '''\n    Write a python function to find the sum of the product of consecutive lucas coefficients.\n    '''\n    if n<=0:\n        return 2\n    return lucas(n-1) + 3\n    \ndef sum_of_natural_numbers(n):\n    '''\n    Write a python function to find the sum of the product of consecutive natural numbers.\n    '''\n    if n<=0:\n        return 0\n    return n + sum_of_natural_numbers(n-1)\n    \ndef sum_of_square_of_naturals(n):\n    '''\n    Write a python function to find the sum of the square of the product of consecutive natural numbers.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + sum_of_square_of_naturals(n-1)\n    \ndef sum_of_odd_naturals(n):\n    '''\n    Write a python function to find the sum of the product of consecutive odd natural numbers.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + sum_of_odd_naturals(n-1)\n    \ndef sum_of_squares_of_odd_naturals(n):\n    '''\n    Write a python function to find the sum of the squares of the product of consecutive odd natural numbers.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + sum_of_odd_naturals(n-1) + n*(n+1)*(n+2)\n    \ndef sum_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + sum_of_all_pythagorean_triples(n-1)\n    \ndef sum_of_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + n*(n+1)*(2*n+1)\n    \ndef sum_of_all_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + (n*(n+1)*(2*n+1)) + n*(n+1)*(3*n+1)\n    \ndef sum_of_odd_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + (n*(n+1)*(2*n+1)) + (n*(n+1)*(3*n+1)) + n*(n+1)*(3*n+1)\n    \ndef sum_of_all_odd_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + (n*(n+1)*(2*n+1)) + (n*(n+1)*(3*n+1)) + n*(n+1)*(3*n+1)\n    \ndef sum_of_even_odd_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + (n*(n+1)*(2*n+1)) + n*(n+1)*(3*n+1) + n*(n+1)*(3*n+1)\n    \ndef sum_of_all_even_odd_square_of_all_pythagorean_triples(n):\n    '''\n    Write a python function to find the sum of the squares of all the pythagorean triples.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + (n*(n+1)*(2*n+1)) + n*(n+1)*(3*n+1) + n*(n+1)*(3*n+1)\n    \ndef sum_of_squares_of_all_triples_where_n_is_divisible_by_4(n):\n    '''\n    Write a python function to find the sum of the squares of all the triples where n is divisible by 4.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + n*(n+1)*(2*n+1)\n    \ndef sum_of_odd_square_of_all_triples_where_n_is_divisible_by_4(n):\n    '''\n    Write a python function to find the sum of the squares of all the triples where n is divisible by 4.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + (n*(3*n+1) + n*(n+1)) + n*(n+1)*(2*n+1)\n    \ndef sum_of_all_odd_square_of_all_triples_where_n_is_divisible_by_4(n):\n    '''\n    Write a python function to find the sum of the squares of all the triples where n is divisible by 4.\n    '''\n    if n<=0:\n        return 0\n    return n*(n+1) + n*(3*n+1) + "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n)//(factorial(k)*factorial(n-k)))\n    \ndef Recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    return n*Recursive_binomial(n-1)\n    \ndef odd_term_of_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of odd terms of binomial co-efficients.\n    '''\n    return factorial(n)//(factorial(n)//2)\n    \ndef non_zero_term_of_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of non-zero terms of binomial co-efficients.\n    '''\n    return factorial(n)//2\n    \ndef sum_of_first_n_terms_of_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of binomial co-efficients.\n    '''\n    return binomial_Coeff(n,0)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of non-zero term of binomial co-efficients.\n    '''\n    return non_zero_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of recursive binomial co-efficients.\n    '''\n    return Recursive_binomial(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_odd_term_of_binomial(n):\n    '''\n    Write a python function to find the sum of the product of first n terms of odd term of binomial co-efficients.\n    '''\n    return odd_term_of_binomial_Coeff(n)*((1)**0)\n    \ndef sum_of_first_n_terms_of_non_zero_term_o"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(2,n+1):\n        C = C*i\n        i += 1\n    return C\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip=[]\n    #ip = \"0.1.2.3\"\n    for i in ip:\n        if int(i)==0:\n            continue\n        else:\n            new_ip.append(i)\n    new_ip=\"\".join(new_ip)\n    #print new_ip\n    return new_ip\n    \ndef convert_ip_to_bin(ip):\n    '''\n    Write a function to convert a decimal ip address to binary.\n    '''\n    #print ip\n    ip_bin=[]\n    for i in ip:\n        octet=oct(int(i))[2:]\n        if len(octet)<8:\n            octet=octet.zfill(8)\n        ip_bin.append(octet)\n    ip_bin=\"\".join(ip_bin)\n    #print ip_bin\n    return ip_bin\n    \ndef convert_bin_to_ip(ip):\n    '''\n    Write a function to convert a binary ip address to decimal.\n    '''\n    #print ip\n    ip_dec=[]\n    for i in ip:\n        octet=int(i,2)\n        ip_dec.append(octet)\n    ip_dec=\".\".join(map(str,ip_dec))\n    #print ip_dec\n    return ip_dec\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    m = re.match(r'(?:(\\d{1,3}\\.){3})\\d{1,3}', ip)\n    if m is not None:\n        ip = m.group(0)\n    else:\n        ip = ''\n    return ip\n    \ndef removeport_ip(ip):\n    '''\n    Write a function to remove the port number from an ip address.\n    '''\n    m = re.match(r'(?:(\\d{1,3}\\.){3})\\d{1,3}:\\d{1,5}', ip)\n    if m is not None:\n        ip = m.group(0)\n    else:\n        ip = ''\n    return ip\n    \ndef remove_http(ip):\n    '''\n    Write a function to remove http:// or https:// from an ip address\n    '''\n    m = re.search(r'(?:http\\://|https\\://)(\\S+\\S+)', ip)\n    if m is not None:\n        ip = m.group(0)\n    else:\n        ip = ''\n    return ip\n    \ndef remove_slash(ip):\n    '''\n    Write a function to remove the slash(/) from an ip address.\n    '''\n    m = re.match(r'(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])', ip)\n    if m is not None:\n        ip = m.group(0)\n    else:\n        ip = ''\n    return ip\n    \ndef remove_spaces(ip):\n    '''\n    Write a function to remove spaces from an ip address.\n    '''\n    m = re.search(r'([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])', ip)\n    if m is not None:\n        ip = m.group(0)\n    else:\n        ip = ''\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    newip = re.findall(r'(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)',ip)\n    return newip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_address = ip.split('.')\n    ip_address = '.'.join([ip_address[0], ip_address[1], ip_address[2], ip_address[3].rstrip('0')])\n    return ip_address\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    \n    return ip.strip().lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    x = ip.split('.')\n    for i in range(0,len(x)):\n        x[i] = x[i].lstrip('0')\n    ip = '.'.join(x)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove the leading zeroes\n    while ip[0] == '0':\n        ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = \"\"\n    for i in range(0,len(ip_list)):\n        if int(ip_list[i]) == 0:\n            pass\n        else:\n            new_ip += ip_list[i]\n    return new_ip\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 2:\n        return -1\n    return abs(list1[0]-list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0]-list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        even_num = list1[0]\n        odd_num = list1[1]\n        list2 = list1.copy()\n        if even_num % 2 == 0:\n            list2.remove(even_num)\n        else:\n            list2.remove(odd_num)\n        return list2[0] - list2[1]\n    except:\n        return -1\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    i = 0\n    while i < len(list1):\n        if i == 0 and list1[i] % 2 == 0:\n            return list1[i+1] - list1[i]\n        elif i == 0 and list1[i] % 2!= 0:\n            return -1\n        elif i == len(list1) - 1 and list1[i] % 2 == 0:\n            return -1\n        elif i == len(list1) - 1 and list1[i] % 2!= 0:\n            return list1[i] - list1[i - 1]\n        else:\n            if list1[i] % 2!= 0:\n                return -1\n            else:\n                return list1[i+1] - list1[i]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    first_even = 0\n    first_odd = 0\n    if list1[0] % 2 == 0:\n        first_even = list1[0]\n    else:\n        first_odd = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n        else:\n            first_odd = list1[i]\n        if first_even!= 0 and first_odd!= 0:\n            return abs(first_even - first_odd)\n        elif first_even == 0 and first_odd == 0:\n            return 0\n        else:\n            first_even = first_odd = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in list1:\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even - count_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even_num = even_num + list1[i]\n        else:\n            odd_num = odd_num + list1[i]\n            \n    return abs(even_num-odd_num)\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(diff_even_odd([1,2,3,4,5,6]))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert diff_even_odd([1,2,3,4,5,6]) == 0\n    assert diff_even_odd([1,3,5]) == 2\n    assert diff_even_odd([6]) == 2\n    assert diff_even_odd([]) == 0\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        if list1[0] % 2 == 0:\n            return list1[0] - 2\n        else:\n            return list1[0] - 1\n    else:\n        if list1[0] % 2 == 0:\n            return list1[0] - 2\n        else:\n            return list1[0] - 1\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even,odd=0,0\n    for i in range(len(list1)):\n        if(i%2==0):\n            even+=list1[i]\n        else:\n            odd+=list1[i]\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[-1]\n    diff = abs(even_num - odd_num)\n    print(diff)\n    return(diff)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if (str1[i]!= str2[i]) : \n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def minSwaps(s1,s2):\n        # code here\n        n=len(s1)\n        arr1=[]\n        arr2=[]\n        for i in range(n):\n            if s1[i]=='0' or s1[i]=='1':\n                arr1.append(int(s1[i]))\n            elif s2[i]=='0' or s2[i]=='1':\n                arr2.append(int(s2[i]))\n        arr1.sort()\n        arr2.sort()\n        swaps=0\n        for i in range(n):\n            if arr1[i]!=arr2[i]:\n                swaps+=1\n                x=arr1[i]\n                arr1[i]=arr2[i]\n                arr2[i]=x\n        return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Convert the string to a list of characters\n    str_list = list(str1)\n    str_len = len(str_list)\n    #Build the hashmap\n    hash_map = {}\n    for i in range(str_len):\n        hash_map[str_list[i]] = i\n    #Convert the string to an integer\n    bin_int = 0\n    for i in range(str_len):\n        bin_int += int(str_list[i])*(2**(str_len-i-1))\n    #Build the solution\n    solution = 0\n    for i in range(str_len):\n        if str_list[i]!= str_list[hash_map[str_list[i]]]:\n            solution += 1\n    return solution\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps=0\n    for i in range(len(str1)) : \n        if str1[i]!=str2[i] : \n            tmp_str1=str1[i]\n            tmp_str2=str2[i]\n            for j in range(len(str1)) : \n                if tmp_str1==str1[j] : \n                    str1=str1[:j]+str1[j+1:]\n                    break\n            for k in range(len(str2)) : \n                if tmp_str2==str2[k] : \n                    str2=str2[:k]+str2[k+1:]\n                    break\n            swaps=swaps+1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    min_swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            x = str1[i]\n            str1 = str1[:i]+str2[i]+str2[i+1:]\n            str2 = str1[:i]+str1[i]+str1[i+1:]\n            min_swaps += 1\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    i = 0\n    j = n -1\n    count = 0\n    while i < j:\n        if str1[i]!= str2[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n            j -= 1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # print(f\"{str1} {str2}\")\n    # str1 = str1.replace(\"0\", \"0000\")\n    # str2 = str2.replace(\"1\", \"11\")\n    # print(f\"{str1} {str2}\")\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n    return c\n    \n    \ndef min_Swaps_opt(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_2(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_3(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_4(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_5(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_6(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_7(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_8(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_9(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            l+=1\n            i+=1\n        else:\n            c=c+abs(i-l)\n            l=l+1\n            i+=1\n            while i < len(str1) and str1[i] == '0':\n                i+=1\n            j=i\n            while j < len(str1) and str1[j] == '1':\n                j+=1\n            c=c+abs(i-j)\n    return c\n    \n    \ndef min_Swaps_opt_10(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    l=0\n    i=0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list_byte = []\n    for i in range(0, len(tuple_list)):\n        tuple_list_byte.append(sys.getsizeof(tuple_list[i]))\n    return tuple_list_byte\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list),)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in tuple_list:\n        result += sys.getsizeof(i)\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in range(len(tuple_list)):\n        count += len(tuple_list[i])\n    return count\ndef tuple_info(tuple_list):\n    '''\n    Write a function that returns the count of elements in a tuple, and the size in bytes of a given tuple.\n    '''\n    count = 0\n    for i in range(len(tuple_list)):\n        count += 1\n    return count, tuple_size(tuple_list)\ndef list_info(list_obj):\n    '''\n    Write a function that returns the count of elements in a list, and the size in bytes of a given list.\n    '''\n    count = 0\n    for i in range(len(list_obj)):\n        count += 1\n    return count, tuple_size(list_obj)\ndef tuple_str_info(tuple_obj):\n    '''\n    Write a function that returns the count of elements in a tuple, and the size in bytes of a given tuple.\n    '''\n    count = 0\n    for i in range(len(tuple_obj)):\n        count += 1\n    return count, tuple_size(tuple_obj)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    while len(arr1)!= len(arr2):\n        if len(arr1) > len(arr2):\n            arr1, arr2 = arr2, arr1\n        for i in range(len(arr1)):\n            if arr1[i] < arr2[i]:\n                arr1 = arr1[i+1:]\n            else:\n                arr2 = arr2[i+1:]\n            if len(arr1) == k:\n                return arr1[0]\n    return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size = len(arr1)\n    arr2_size = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # base case\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    size_arr1 = len(arr1)\n    size_arr2 = len(arr2)\n    if size_arr1 == 0:\n        return arr2[k-1]\n    if size_arr2 == 0:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    count = 0\n    first = arr1[0]\n    last = arr2[0]\n    while(count < k and first < last):\n        count += 1\n        if first < last:\n            first += 1\n        else:\n            last += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    def find_pivot(arr, lo, hi):\n        mid = (lo + hi) // 2\n        if arr[mid] > arr[mid+1]:\n            return mid+1\n        if arr[mid] < arr[mid-1]:\n            return mid\n        if arr[lo] > arr[mid]:\n            return find_pivot(arr, lo, mid-1)\n        if arr[hi] < arr[mid]:\n            return find_pivot(arr, mid+1, hi)\n        \n    def find_kth_recursive(arr1, arr2, lo1, hi1, lo2, hi2, k):\n        if lo1 > hi1:\n            return None\n        if lo2 > hi2:\n            return None\n        if lo1 == hi1:\n            return arr1[lo1]\n        if lo2 == hi2:\n            return arr2[lo2]\n        mid1 = find_pivot(arr1, lo1, hi1)\n        mid2 = find_pivot(arr2, lo2, hi2)\n        if mid1 == mid2:\n            if k == mid1:\n                return arr1[mid1]\n            if k < mid1:\n                return find_kth_recursive(arr1, arr2, lo1, mid1-1, lo2, hi2, k)\n            else:\n                return find_kth_recursive(arr1, arr2, mid1+1, hi1, lo2, hi2, k)\n        if mid1 < mid2:\n            return find_kth_recursive(arr1, arr2, lo1, mid1-1, lo2, hi2, k)\n        else:\n            return find_kth_recursive(arr1, arr2, lo1, hi1, mid2+1, hi2, k)\n    return find_kth_recursive(arr1, arr2, 0, len1, 0, len2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    ans = 0\n    while(i < len(arr1) and j < len(arr2)):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == len(arr1) and j < len(arr2):\n            ans = arr2[j]\n            break\n        if j == len(arr2) and i < len(arr1):\n            ans = arr1[i]\n            break\n    return ans\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    kth_num = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            kth_num = arr1[i]\n            i += 1\n        else:\n            kth_num = arr2[j]\n            j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    \n    lo, hi = 0, n1\n    while lo < hi:\n        mid = lo + (hi - lo)//2\n        if arr1[mid] < arr2[0]:\n            lo = mid + 1\n        else:\n            hi = mid\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    # We only need to compare each element with one other and not with all the elements\n    # Check if the element at i and j are same\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if i == k-1:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return -1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 1:\n        raise ValueError('The number must be positive')\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number = number // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    sum_num = 0\n    while number > 0:\n        digit = number % 10\n        sum_num += digit ** 3\n        number //= 10\n    if sum_num == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    number=str(number)\n    for i in number:\n        sum+=int(i)**len(number)\n    if(sum==int(number)):\n        print(number,\"is an armstrong number\")\n    else:\n        print(number,\"is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp>0:\n        rem = temp%10\n        sum = sum + rem**3\n        temp = temp//10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_number = number\n    sum_of_digit = 0\n    while temp_number:\n        sum_of_digit += pow(temp_number % 10, 3)\n        temp_number //= 10\n    return number == sum_of_digit\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number = str(number)\n    sum = 0\n    for char in str_number:\n        sum = sum + int(char) ** len(str_number)\n    if(sum == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    length = len(number)\n    for i in range(length):\n        sum += int(number[i])**length\n    return sum==int(number)\n    \n    \n    \n    \n    \n    \nprint(armstrong_number('213213'))\nprint(armstrong_number('2133'))"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result=0\n    for i in range(1,number+1):\n        result+=i**3\n    return result"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert given number to a string\n    num = str(number)\n    # initialize counter variable\n    sum = 0\n    # loop to calculate sum of numbers in the string\n    for i in range(len(num)):\n        sum += int(num[i])**len(num)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    assert type(number)==int, 'Please input a positive integer.'\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1)),sum(range(1,number+1))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number > 0:\n        total = 0\n        for i in range(1, number+1):\n            total += i\n        average = total/number\n        return total, average\n    else:\n        return 'Invalid!'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # total = 0\n    # for i in range(1, number + 1):\n    #     total += i\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    # YOUR CODE HERE\n    def _sum_average(number):\n        sum_n = 0\n        sum_n += number\n        return sum_n,sum_n/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input('Enter the number : '))\n    s = 0\n    for i in range(0, n):\n        s = s + i\n    av = s/n\n    print('Sum = ', s, 'Average = ', av)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    if number==1:\n        return 0\n    else:\n        for i in range(1,number+1):\n            sum+=i\n        average = sum/number\n        return average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n        average = sum / i\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum = sum + i\n        average = sum/i\n    return sum, average\n    \ndef sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1, number+1)), sum(range(1, number+1))/number\n    \ndef sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1, number+1)), sum(range(1, number+1))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    def sum_average_aux(number):\n        return (number+sum(range(number))) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # your code here\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(n, 'is even') \n    else : \n        print(n, 'is odd') \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"True\")\n    else : \n        print(\"False\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n == 0:\n        return False\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # Python program to check if the number is even or not \n    # Code here \n    if n%2==0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    return False \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        print(f'{n} is even')\n    else : \n        print(f'{n} is odd')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #Initializing variable to count for no. of times character appears\n    no_of_char = 0\n    #Initalizing variable to hold the first character\n    first_char = ''\n    #Iterating through the string\n    for i in str1:\n        #Incrementing variable to count for no. of times character appears\n        no_of_char = no_of_char + 1\n        #Checking if the variable first_char already exists and is not empty\n        if (first_char!= '') and (first_char == i):\n            #As the character already exists, break the loop and return the first_char\n            break\n        #If the first_char does not exist, then assign the first character to the first_char variable\n        else:\n            first_char = i\n    #Return the no. of times the character appears in the string\n    return no_of_char\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if str1.count(i)>1:\n            count+=1\n            break\n    if count==0:\n        print(\"There is no repeated char.\")\n    else:\n        print(\"First repeated character: \",i, \" occured \", str1.count(i),\" times\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict.keys():\n            return char\n        else:\n            char_dict[char] = 1\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    if len(str1)==0:\n        return -1\n    for i in range(0,len(str1)-1):\n        if str1[i]==str1[i+1]:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return -1\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if i!= j and str1[i] == str1[j]:\n                return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq_dict={}\n    for i in str1:\n        freq_dict[i]=0\n    for i in str1:\n        freq_dict[i]=freq_dict[i]+1\n    for i in freq_dict.values():\n        if i==2:\n            return i\n    return \"No first repeated character found\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if(str1[i] in str1[i+1:]):\n            print(\"First repeated character is:\",str1[i])\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for ch in str1:\n        d[ch] = d.get(ch, 0) + 1\n    for key, value in d.items():\n        if value > 1:\n            return key\n    return 'not found'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(num):\n        s = str(num)\n        if (s[0] == '7') and (s[1] == '1') and (s[2] == '7') and (s[3] == '1'):\n            return True\n        return False\n    \n    lower_bound = 2\n    upper_bound = n\n    ludic_numbers = []\n    while(lower_bound <= upper_bound):\n        if(is_ludic(lower_bound)):\n            ludic_numbers.append(lower_bound)\n        lower_bound += 1\n    \n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1,n) if is_ludic(x)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    for x in range(2, n):\n        if is_ludicrous(x):\n            print(x)\n            \n    "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    def f(num):\n        if num%5 == 0:\n            ludic.append(num)\n            return True\n        elif num%3 == 0:\n            ludic.append(num)\n            return True\n        else:\n            return False\n    for i in range(1,n+1):\n        f(i)\n    return ludic\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        x = sum([int(digit) for digit in str(i)])\n        if x < n:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1: return []\n    if n == 2: return [2,3]\n    res = get_ludic(n-1)\n    res.append(n)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(2,n+1):\n        if n % i == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n==1:\n        return [1]\n    lucids = []\n    for i in range(n):\n        a = i\n        b = i + 1\n        c = i + 2\n        if a**2 + b**2 == c**2:\n            lucids.append(i)\n        if i % 2 == 0:\n            for j in range(i//2):\n                d = i + 2*j + 1\n                e = i + 2*j + 2\n                if d**2 + e**2 == c**2:\n                    lucids.append(i)\n                    break\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = [4, 6, 8, 9, 5, 7, 1, 3, 2]\n    #ludics = [4, 6, 8, 9, 5, 7, 1, 3]\n    #ludics = [4, 6, 8, 9, 5, 7, 1, 3, 2, 11, 7, 8, 5, 6, 2, 1, 3]\n    #ludics = [4, 6, 8, 9, 5, 7, 1, 3, 2, 11, 7, 8, 5, 6, 2, 1, 3, 16, 11]\n    return get_ludics_list_sorted(n, ludics)\n    \ndef get_ludics_list_sorted(n, ludics):\n    ludics_list = []\n    while len(ludics) > 0:\n        #print('n =', n)\n        #print('ludics =', ludics)\n        current = ludics.pop()\n        while n > current:\n            n = n - current\n            ludics_list.append(current)\n        if n == 0:\n            return ludics_list\n    return ludics_list\n    \ndef get_ludic_list_sorted_list(n, ludics):\n    ludics_list = []\n    while len(ludics) > 0:\n        #print('n =', n)\n        #print('ludics =', ludics)\n        current = ludics.pop()\n        while n > current:\n            n = n - current\n            ludics_list.append(current)\n        if n == 0:\n            return ludics_list\n    return ludics_list\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    arr = s.split()\n    arr.reverse()\n    result =''.join(arr)\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #split in words\n    t = s.split()\n    #reverse each word\n    for i in range(len(t)-1, -1, -1):\n        #revese each word\n        t[i] = t[i][::-1]\n    #join words back\n    return ''.join(t)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string and reverse the words in reverse order \n    words = s.split()\n    return''.join(words[::-1])\n    \nreverse_words('i love programming')\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n    reverse = ''\n    i = 0\n    while i < len(s):\n        if s[i] =='':\n            i += 1\n        else:\n            reverse += s[i]\n            i += 1\n    return reverse\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(list(s.split(\" \")))[::-1]\n    \n    \ndef count_chars(string):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(string)\n    \n    \ndef count_unique_chars(s):\n    '''\n    Write a function to count the number of unique characters in a string.\n    '''\n    return len(set(s))\n    \n    \ndef count_digits(s):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return sum(c.isdigit() for c in s)\n    \n    \ndef count_words(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(s.split())\n    \n    \ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    return sum(c in vowels for c in s)\n    \n    \ndef count_letters(s):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return sum(c.isalpha() for c in s)\n    \n    \ndef count_special_chars(s):\n    '''\n    Write a function to count the number of special characters in a string.\n    '''\n    special_chars = '!@#$%^&*()_+{}|:;\"<>,.?/~`'\n    return len(set(special_chars) - set(s))\n    \n    \ndef count_spaces(s):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return sum(c == \" \" for c in s)\n    \n    \ndef count_upper_case_letters(s):\n    '''\n    Write a function to count the number of upper case letters in a string.\n    '''\n    return sum(c.isupper() for c in s)\n    \n    \ndef count_lower_case_letters(s):\n    '''\n    Write a function to count the number of lower case letters in a string.\n    '''\n    return sum(c.islower() for c in s)\n    \n    \ndef count_alphabets(s):\n    '''\n    Write a function to count the number of alphabets in a string.\n    '''\n    return sum(c.isalpha() for c in s)\n    \n    \ndef count_digits(s):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return sum(c.isdigit() for c in s)\n    \n    \ndef count_chars_in_string(s, ch):\n    '''\n    Write a function to count the number of times a character appears in a string.\n    '''\n    return s.count(ch)\n    \n    \ndef count_vowels_in_string(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return count_chars_in_string(s, \"aeiouAEIOU\")\n    \n    \ndef count_consonants_in_string(s):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return count_chars_in_string(s, \"aeiouAEIOU\")\n    \n    \ndef count_special_chars_in_string(s):\n    '''\n    Write a function to count the number of special characters in a string.\n    '''\n    return count_chars_in_string(s, \"!@#$%^&*()_+{}|:;\"<>,.?/~`\")\n    \n    \ndef count_spaces_in_string(s):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return count_chars_in_string(s, \" \")\n    \n    \ndef count_digits_in_string(s):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return count_chars_in_string(s, \"1\") + count_chars_in_string(s, \"2\") + count_chars_in_string(s, \"3\") + count_chars_in_string(s, \"4\") + count_chars_in_string(s, \"5\") + count_chars_in_string(s, \"6\") + count_chars_in_string(s, \"7\") + count_chars_in_string(s, \"8\") + count_chars_in_string(s, \"9\")\n    \n    \ndef count_vowels_in_string(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return count_chars_in_string(s, \"aeiouAEIOU\")\n    \n    \ndef count_consonants_in_string(s):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return count_chars_in_string(s, \"aeiouAEIOU\")\n    \n    \ndef count_special_chars_in_string(s):\n    '''\n    Write a function to count the number of special characters in a string.\n    '''\n    return count_chars_in_string(s, \"!@#$%^&*()_+{}|:;\"<>,.?/~`\")\n    \n    \ndef count_spaces_in_string(s):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return count_chars_in_string(s, \" \")\n    \n    \ndef count_digits_in_string(s):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return count_chars_in_string(s, \"1\") + count_chars_in_string(s, \"2\") + count_chars_in_string(s, \"3\") + count_chars_in_string(s, \"4\") + count_chars_in_string(s, \"5\") + count_chars_in_string(s, \"6\") + count_chars_in_string(s, \"7\") + count_chars_in_string(s, \"8\") + count_chars_in_string(s, \"9\")\n    \n    \ndef count_spaces_in_string(s):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return count_chars_in_string(s, \" \")\n    \n    \ndef count_special_chars_in_string(s):\n    '''\n    Write a function to count the number of special characters in a string.\n    '''\n    return count_chars_in_string(s, \"!@#$%^&*()_+{}|:;\"<>,.?/~`\")\n    \n    \ndef count_words_in_string(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(s.split())\n    \n    \ndef count_words_in_string(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(s.split())\n    \n    \ndef count_spaces_in_string(s):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return sum(c == \" \" for c in s)\n    \n    \ndef count_upper_case_letters(s):\n    '''\n    Write a function to count the number of upper case letters in a string.\n    '''\n    return sum(c.isupper() for c in s)\n    \n    \ndef count_lower_case_letters(s):\n    '''\n    Write a function to count the number of lower case letters in a string.\n    '''\n    return sum(c.islower() for c in s"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    # another way\n    return''.join(s[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split()\n    return \" \".join(s[::-1])\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n    # return s[::-1].replace(\" \", \"\")\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            prime = False\n            break\n    if prime == True:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num==0 or num==1:\n        return False\n    \n    if num==2 or num==3:\n        return True\n    if num%2==0:\n        return False\n    \n    prime=True\n    \n    for i in range(3,num,2):\n        if num%i==0:\n            prime=False\n            break\n    \n    if prime:\n        return True\n    else:\n        return False\n    \ndef prime_num2(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num<2:\n        return False\n    \n    if num==2:\n        return True\n    \n    for i in range(3,num):\n        if num%i==0:\n            return False\n            \n    return True\n    \ndef prime_num3(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num<2:\n        return False\n    \n    if num==2:\n        return True\n    \n    for i in range(3,num):\n        if num%i==0:\n            return False\n            \n    return True\n    \ndef prime_num4(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num<2:\n        return False\n    \n    for i in range(3,num):\n        if num%i==0:\n            return False\n            \n    return True\n    \nprint(prime_num(3))\nprint(prime_num2(3))\nprint(prime_num3(3))\nprint(prime_num4(3)"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==2:\n        return True\n    if num==1 or num==0:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\nprint(prime_num(13))\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 1:\n        print('Number is less than 1')\n    elif num == 1:\n        print('Number is 1')\n    else:\n        for i in range(2, num//2 + 1):\n            if (num % i) == 0:\n                print('Number is not prime')\n                break\n        else:\n            print('Number is prime')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #find out if the number is divisible by itself\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num > 2:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n    \nprint(prime_num(5))"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # list of all prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if num in prime_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts a radian angle and returns the equivalent angle in degrees.\n    '''\n    degrees = (angle_radians/math.pi)*180\n    return degrees\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts a radian angle and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees/180*math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians*180/math.pi\ndef convert_to_degrees(angle_radians):\n    '''\n    Write a function that accepts an angle in radians and returns the equivalent angle in degrees.\n    '''\n    return angle_radians/math.pi*180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians.\n    '''\n    return angle_degrees*math.pi/180\ndef convert_to_radians(angle_degrees):\n    '''\n    Write a function that accepts an angle in degrees and returns the equivalent angle in radians"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi/180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef angle_180(radian_degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian_degree * 180 / math.pi\ndef radian_degree_degree(degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree * math.pi / 180\ndef degree_degree_degree(radian_degree_degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian_degree_degree * 180 / math.pi\ndef radian_degree_radian(degree_radian):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_radian * (180 / math.pi)\ndef degree_degree_radian(radian_degree_radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian_degree_radian * 180 / math.pi\ndef radian_radian_radian(radian_radian):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    return radian_radian * (180 / math.pi)\ndef degree_radian_radian(radian_degree_radian):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return radian_degree_radian * (180 / math.pi)\ndef degree_radian_degree(radian_degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian_degree * (180 / math.pi)\ndef radian_degree_degree(degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree * (180 / math.pi)\ndef radian_degree_degree_degree(degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree * (180 / math.pi)\ndef radian_degree_degree_radian(degree_degree_radian):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_radian * (180 / math.pi)\ndef radian_degree_degree_radian_radian(degree_degree_radian_radian):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_radian_radian * (180 / math.pi)\ndef degree_degree_degree_degree(degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree(degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree(degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree_degree * (180 / math.pi)\ndef degree_degree_degree_degre"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # for degree in degree:\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    import re\n    start = -1\n    end = -1\n    result = re.search(pattern, text)\n    if result is not None:\n        start = result.start()\n        end = result.end()\n    return result.group(0), start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n    substring = regex_pattern.search(text)\n    if substring!= None:\n        start_index = substring.start()\n        end_index = substring.end()\n        return substring, start_index, end_index\n    else:\n        return None, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    import re\n    my_match = re.search(pattern, text)\n    return my_match.group(), my_match.start(), my_match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Compile the pattern.\n    p = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = r''+pattern\n    if re.search(regex,text):\n        return re.findall(regex,text)\n    else:\n        return []\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = []\n    for i, ch in enumerate(pattern):\n        if ch!= '\\w':\n            literals.append((ch, i, i+1))\n    if literals:\n        return (text[literals[0][2]:], literals[0])\n    else:\n        return ()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    matches = list(matches)\n    matches = sorted(matches, key=lambda m: m.start())\n    for match in matches:\n        print(match.start(), match.end(), match.group())\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    lit_sub = pattern.split('|')\n    lit_sub = '|'.join(map(lambda x: x.replace(' ',''), lit_sub))\n    lit_sub = lit_sub.replace('^','').replace('$','').replace('.','').replace('|','').replace('(','').replace(')','')\n    lit_sub = lit_sub.split(',')\n    lit_sub = map(lambda x: re.compile('^' + x + '$'), lit_sub)\n    for lit in lit_sub:\n        if lit.search(text):\n            return lit.search(text), lit.search(text).start(), lit.search(text).end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    return pattern.search(text)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bin_partition(n):\n        if n <= 1:\n            return n\n        else:\n            return bin_partition(n//2) + bin_partition(n//2 + 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # return n * (n+1)/2\n    return int((n*(n+1)*(2*n+1))/6)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    i = 1\n    while i <= n:\n        bell += 1\n        i = i + 1\n    return bell\n    \nprint(bell_Number(1))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # code here \n    n_bell_number = 1\n    for i in range(n):\n        n_bell_number *= 2\n    return n_bell_number\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        print(\"bell number n = 1\")\n        return 1\n    if n==1:\n        print(\"bell number n = 2\")\n        return 2\n    if n==2:\n        print(\"bell number n = 1\")\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + 1\nbell_Number(20)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= (i+1)\n    print(fact//2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i*(i+1)/2\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # X_n = n * (n+1) / 2\n    # X = X_n\n    # while True:\n    #     X_n = X * (X + 1) / 2\n    #     X = X_n\n    #     if X == n:\n    #         print(X)\n    #         break\n    # return X\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    for i in range(0,n):\n        bell_number = bell_number * (n - i) // i\n    return bell_number\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1_copy = list1[:]\n    list1_copy.remove(list1[L])\n    return list1_copy\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if(i!= L):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return list1\n    if len(list1) == 2:\n        if list1[0] == L:\n            return list1[1]\n        else:\n            return list1\n    if len(list1) > 2:\n        list1.pop(2)\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k]+list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1)==1:\n        return -1\n    if len(list1)==2:\n        if list1[0]==L:\n            return list1[1]\n        return list1[0]\n    if len(list1)==3:\n        if list1[0]==L and list1[1]==L:\n            return list1[2]\n        if list1[0]==L:\n            return list1[1]\n        if list1[1]==L:\n            return list1[0]\n    if len(list1)==4:\n        if list1[0]==L and list1[1]==L and list1[2]==L:\n            return list1[3]\n        if list1[0]==L:\n            return list1[1]\n        if list1[1]==L:\n            return list1[0]\n        if list1[2]==L:\n            return list1[0]\n        if list1[3]==L:\n            return list1[1]\n    if len(list1)>4:\n        return list1[0:len(list1)-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    k = L % len(list1)\n    list1.pop(k-1)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    \n    \n    \ndef list_sum(list1, list2):\n    '''\n    Write a python function which takes 2 lists and returns the sum of both lists.\n    '''\n    return sum(list1 + list2)\n    \n    \n    \ndef sum_of_list_elements(list1):\n    '''\n    Write a python function which takes a list and returns a list with the elements of the original list, but with the sum of the elements in the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + sum(list1)\n    return list1\n    \n    \n    \ndef square_list_elements(list1):\n    '''\n    Write a python function which takes a list and returns a list with the elements of the original list, but with the square of the elements in the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] * list1[i]\n    return list1\n    \n    \n    \ndef check_numbers_exist(list1, L):\n    '''\n    Write a python function which takes a list and returns a boolean value if there are at least L elements in the list. If there is at least one duplicate number in the list, return True. Otherwise, return False.\n    '''\n    for i in range(L):\n        if list1.count(list1[i]) > 1:\n            return True\n    return False\n    \n    \n    \ndef check_if_string_is_palindrome(str1):\n    '''\n    Write a python function which takes a string and returns True if the string is a palindrome, otherwise returns False.\n    '''\n    return str1 == str1[::-1]\n    \n    \n    \ndef sum_of_list_elements_greater_than_k(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the elements of the original list, but with the elements of the list, which are greater than k, summed up.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] > k:\n            sum1 += list1[i]\n    return sum1\n    \n    \n    \ndef remove_last_n_elements(list1, n):\n    '''\n    Write a python function which takes a list and returns a list with the last n elements of the list removed.\n    '''\n    return list1[:-n]\n    \n    \n    \ndef remove_first_occurence_of_element(list1, element):\n    '''\n    Write a python function which takes a list and returns a list with the first occurrence of the element removed.\n    '''\n    return list1.remove(element)\n    \n    \n    \ndef sum_of_list_elements_and_reversed_list(list1, list2):\n    '''\n    Write a python function which takes 2 lists and returns a list with the elements of the original lists, but the sum of the elements of the original lists, and the elements of the reversed lists.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] + list2[i])\n    return list3\n    \n    \n    \ndef sum_of_list_elements_and_reverse_list(list1, list2):\n    '''\n    Write a python function which takes 2 lists and returns a list with the elements of the original lists, but the sum of the elements of the original lists, and the elements of the reversed lists.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] + list2[i])\n    list3.reverse()\n    return list3\n    \n    \n    \ndef reverse_list(list1):\n    '''\n    Write a python function which takes a list and returns a list with the elements of the list reversed.\n    '''\n    return list1[::-1]\n    \n    \n    \ndef remove_occurence_of_element(list1, element):\n    '''\n    Write a python function which takes a list and returns a list with the element removed, if the element occurs more than once.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == element:\n            list1.remove(list1[i])\n            break\n    return list1\n    \n    \n    \ndef sum_of_all_n_elements_in_list(list1, n):\n    '''\n    Write a python function which takes a list and returns the sum of all elements in the list which occur more than n times.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1.count(list1[i]) > n:\n            sum1 += list1[i]\n    return sum1\n    \n    \n    \ndef sum_of_list_elements_with_given_sum(list1, sum1):\n    '''\n    Write a python function which takes a list and returns a list with the elements of the list, but the sum of the elements of the list, which is equal to sum1.\n    '''\n    sum2 = 0\n    for i in range(len(list1)):\n        if sum1 == sum2 + list1[i]:\n            sum2 += list1[i]\n    return sum2\n    \n    \n    \ndef sum_of_elements_greater_than_k(list1, k):\n    '''\n    Write a python function which takes a list and returns the sum of all elements in the list which are greater than k.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] > k:\n            sum1 += list1[i]\n    return sum1\n    \n    \n    \ndef sum_of_elements_greater_than_or_equal_k(list1, k):\n    '''\n    Write a python function which takes a list and returns the sum of all elements in the list which are greater than or equal to k.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] >= k:\n            sum1 += list1[i]\n    return sum1\n    \n    \n    \ndef average_of_list_elements(list1):\n    '''\n    Write a python function which takes a list and returns the average of all the elements in the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        sum1 += list1[i]\n    return sum1 / len(list1)\n    \n    \n    \ndef average_of_list_elements_with_given_sum(list1, sum1):\n    '''\n    Write a python function which takes a list and returns the average of all the elements in the list, which are greater than or equal to sum1.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] >= sum1:\n            sum1 += list1[i]\n    return sum1 / len(list1)\n    \n    \n    \ndef average_of_list_elements_with_given_range(list1, low, up):\n    '''\n    Write a python function which takes a list and returns the average of all the elements in the list which are greater than or equal to low and less than or equal to up.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if low <= list1[i] <= up:\n            sum1 += list1[i]\n    return sum1 / len(list1)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function which takes a list and returns a list with all duplicate elements removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    return new_list\n    \n    \n    \ndef su"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return -1\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i]))\n    return max(max_col[N-1:N+1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        raise Exception(\"N cannot be greater than the length of the matrix\")\n    \n    max_value = None\n    for i in range(len(test_list)):\n        if max_value == None or max_value < max(test_list[i]):\n            max_value = max(test_list[i])\n    \n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_element = -(float('inf'))\n    for i in range(len(test_list)):\n        if max_element < max(test_list[i]):\n            max_element = max(test_list[i])\n    \n    return max_element\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i] for i in range(N))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for row in test_list:\n        res.append(max(row[:N]))\n    return(res)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list = sorted(test_list, reverse=True)\n    return test_list[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # count = 1\n    # max_val = 0\n    # for i in range(len(test_list)):\n    #     for j in range(len(test_list[i])):\n    #         if j == N-1:\n    #             if test_list[i][j] > max_val:\n    #                 max_val = test_list[i][j]\n    #                 count = 1\n    #             elif test_list[i][j] == max_val:\n    #                 count += 1\n    #             else:\n    #                 count = 0\n    #                 break\n    #         else:\n    #             count += 1\n    # return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0 or N > len(test_list) - 1:\n        print(\"N should be between 0 and length of the matrix - 1\")\n        return\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return sorted(test_list, reverse = True)[N - 1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for item in test_list:\n        max_list.append(item[N - 1])\n    return max(max_list)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # list of lists to list of lists\n    lst = merge(lst)\n    # sublists\n    sublists = []\n    \n    # if sublists exist\n    if lst:\n        # for each sublist in the list of lists\n        for sublist in lst:\n            # save elements of the sublists\n            s = []\n            s.append(sublist[0])\n            s.append(sublist[1])\n            # add s to sublists\n            sublists.append(s)\n    # return sublists\n    return sublists\n    \nmerge([[1,2],[3,4]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in lst:\n        res.append([i[0], i[1]])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for x in range(len(lst)):\n        result.append([lst[x][0], lst[x][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append(lst[i][0])\n        merged_list.append(lst[i][1])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = []\n    y = []\n    for i in range(0, len(lst)):\n        x.append(lst[i][0])\n        y.append(lst[i][1])\n    return (x, y)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append(sublist[0])\n        merged_list.append(sublist[1])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_merge = []\n    for i in range(len(lst)):\n        lst_merge.append([lst[i][0],lst[i][1]])\n    return lst_merge\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #iterative solution\n    # for i in range(len(lst)-1):\n    #     for j in range(len(lst)-1):\n    #         if lst[i][1] > lst[j][1]:\n    #             lst[i], lst[j] = lst[j], lst[i]\n    # return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l=[]\n    for i in lst:\n        l.append(i[0])\n        l.append(i[1])\n    return l\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return 0\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list=[]\n    for i in range(0,len(test_list)-1):\n        new_list.append(test_list[i]+test_list[i+1])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for i in range(len(test_list)):\n        s += test_list[i]\n        # print(i,test_list[i],s)\n    return s\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    if len(test_list) < 2:\n        print(\"No need to perform operation.\")\n        return test_list\n    \n    else:\n        cumulative_sum = 0\n        for index in range(len(test_list)-1):\n            cumulative_sum += test_list[index]\n            test_list[index] = cumulative_sum\n    \n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = tuple(test_list)\n    list_values = []\n    list_values.append(test_list[0])\n    for i in range(len(test_list)-1):\n        list_values.append(list_values[i] + test_list[i+1])\n    return list_values\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i])\n        else:\n            result.append(test_list[i] + result[i-1])\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    from operator import add\n    \n    return map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, map(add, ma"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list=[]\n    for i in range(len(test_list)):\n        sum=0\n        for j in range(i+1):\n            sum=sum+test_list[j]\n        cummulative_sum_list.append(sum)\n    return cummulative_sum_list\nprint(cummulative_sum((1,2,3,4)))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new = []\n    for i in nums:\n        if type(i) == tuple:\n            new.append(sum(i)/len(i))\n    return new\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # nums = ([1, 2, 3], [4, 5, 6])\n    return [[nums[0][i]/nums[1][i] for i in range(len(nums[0]))],\n    [nums[0][i]/nums[1][i] for i in range(len(nums[0]))]]\n    # return ([1/2, 2/3, 3/4], [4/5, 5/6, 6/7])\n    # return ([nums[0][i]/nums[1][i] for i in range(len(nums[0]))],\n    #     [nums[0][i]/nums[1][i] for i in range(len(nums[0]))])\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (len(nums), sum(tuple(map(lambda x: x[0], nums)))/len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst_2d = []\n    for i in range(len(nums)):\n        lst_2d.append(sum(nums[i])/len(nums[i]))\n    return lst_2d\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_list = []\n    for tuple in nums:\n        sum_list.append(sum(tuple)/len(tuple))\n    return tuple(sum_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for x in range(len(nums)):\n        new_list.append(sum(nums[x])/len(nums[x]))\n    return tuple(new_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for tup in nums:\n        sum = 0\n        for elem in tup:\n            sum = sum + elem\n        average.append(sum / len(tup))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        total += i[1]\n        count += 1\n    return total / count\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #if the tuple is empty then we need to give an error\n    if len(nums) == 0:\n        return None\n    #if the tuple is not empty we need to return the average tuple\n    #we need to convert the tuple to a list\n    tuple_list = list(nums)\n    #we need to add up each element in the tuple\n    total = 0\n    for num in tuple_list:\n        total += num\n    #then we divide the total by the length of the tuple\n    avg = total / len(tuple_list)\n    #we return the average tuple\n    return tuple([avg])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            return tuple([i%j for i, j in zip(test_tup1, test_tup2)])\n        else:\n            print(\"Two tuples have different lengths\")\n    except:\n        print(\"Two tuples have different types\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The first tuple must have the same length as the second one!\")\n        return -1\n    else:\n        tup_modulo = []\n        for i in range(len(test_tup1)):\n            tup_modulo.append(test_tup1[i] % test_tup2[i])\n        return tup_modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo(tup1, tup2):\n        '''\n        Write a function which takes two tuples of the same length and performs the element wise modulo.\n        '''\n        return tuple((x % y) for x, y in zip(tup1, tup2))\n    return modulo(test_tup1, test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    a = tuple(map(lambda x,y : x % y, test_tup1, test_tup2))\n    return a\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup3 = tuple_modulo_test(test_tup1, test_tup2)\n    return test_tup3\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len!= tup2_len:\n        raise Exception('Tuples must be of equal length')\n    else:\n        #tuple_mod = []\n        for i in range(tup1_len):\n            #tuple_mod.append(test_tup1[i] % test_tup2[i])\n            test_tup1[i] % test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(a%b for a,b in zip(test_tup1, test_tup2))\n    \ndef tuple_intersect(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return any((a in test_tup2) for a in test_tup1)\n    \ndef tuple_union(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return any((a in test_tup1) for a in test_tup2)\n    \ndef tuple_difference(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(not(a in test_tup1) for a in test_tup2)\n    \ndef tuple_subset(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup2 for a in test_tup1)\n    \ndef tuple_contains(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return any(a in test_tup1 for a in test_tup2)\n    \ndef tuple_is_disjoint(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return not(tuple_intersect(test_tup1, test_tup2))\n    \ndef tuple_is_equal(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a==b for a,b in zip(test_tup1, test_tup2))\n    \ndef tuple_difference_update(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    test_tup1.difference_update(test_tup2)\n    \n    return test_tup1\n    \ndef tuple_issubset(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup2 for a in test_tup1)\n    \ndef tuple_issuperset(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup1 for a in test_tup2)\n    \ndef tuple_issuperset_update(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    test_tup1.update(test_tup2)\n    \n    return test_tup1\n    \ndef tuple_issuperset_all(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup2 for a in test_tup1)\n    \ndef tuple_union_update(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    test_tup1.update(test_tup2)\n    \n    return test_tup1\n    \ndef tuple_union_all(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup1 for a in test_tup2)\n    \ndef tuple_isdisjoint(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return not(tuple_intersect(test_tup1, test_tup2))\n    \ndef tuple_issubset_all(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a in test_tup2 for a in test_tup1)\n    \ndef tuple_isdisjoint_all(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    return all(a not in test_tup1 for a in test_tup2)\n    \ndef tuple_isdisjoint_update(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    test_tup1.difference_update(test_tup2)\n    \n    return test_tup1\n    \ndef tuple_isdisjoint_update_all(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and determines if there is a one to one\n    relationship between the sets.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    \n    test_tup1.difference_updat"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (tuple(map(lambda x, y: x % y, test_tup1, test_tup2)))\n    "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    global max_steps\n    if steps == 0 or max_steps == 0 or steps > max_steps:\n        return\n    if steps == 1:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 2:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 3:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 4:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 5:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 6:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 7:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 8:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 9:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 10:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 11:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 12:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 13:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 14:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 15:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 16:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 17:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 18:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 19:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 20:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 21:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 22:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 23:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 24:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 25:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 26:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 27:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 28:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 29:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 30:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 31:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 32:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 33:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 34:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 35:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 36:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 37:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 38:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 39:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 40:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 41:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 42:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 43:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 44:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 45:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 46:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 47:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 48:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 49:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 50:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 51:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 52:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 53:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 54:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 55:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 56:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 57:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 58:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 59:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 60:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 61:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 62:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 63:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 64:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 65:\n        if (0, d) in s:\n            return 1\n        else:\n            return 0\n    if steps == 66:\n        if (0, d) i"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    curr_x = 0\n    curr_y = 0\n    jumps = 0\n    while curr_x < (d + 1):\n        if curr_x == curr_y:\n            curr_x = curr_x + 1\n            curr_y = curr_y + 1\n        else:\n            curr_y = curr_y + 1\n            if curr_x == curr_y:\n                curr_x = curr_x + 1\n                curr_y = curr_y + 1\n            elif curr_x == (d + 1):\n                curr_x = curr_x + 1\n                curr_y = curr_y + 1\n                jumps = jumps + 1\n            else:\n                curr_x = curr_x + 1\n                curr_y = curr_y + 1\n                curr_x = curr_x + 1\n                curr_y = curr_y + 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # two cases\n    # either we are starting from the left side\n    # or we are at the right most cell\n    # it would be like a continous grid\n    # with the rightmost cell going up\n    # and leftmost cell going down\n    # so we can keep a counter and check the above condition\n    # \n    # # here we will count the number of jumps we can make\n    # # if count is equal to the number of steps to reach the rightmost cell, then it means we can reach the rightmost cell in a 2d plane\n    # # and it means we can reach the leftmost cell in a 2d plane\n    # # so here we will update the count\n    # if count == steps :\n    #     return count\n    # else :\n    #     count += 1\n    #     if count == steps:\n    #         return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    m = (1 << (steps+1)) - 1\n    table = [[-1] * (steps+1) for i in range(steps+1)]\n    table[0][0] = 0\n    for i in range(1, steps+1):\n        for j in range(i):\n            if (table[i-1][j]!= -1):\n                table[i][j] = table[i-1][j] + 1\n                if j + d <= i and table[i][j + d] == -1:\n                    table[i][j + d] = table[i][j] + 1\n                if j - d >= 0 and table[i][j - d] == -1:\n                    table[i][j - d] = table[i][j] + 1\n    return table[steps][0]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == 0: \n        return 0 \n    \n    n = len(steps) \n    jump = 0 \n    for i in range(n): \n        if steps[i] > d and (i == 0 or steps[i] > steps[i-1]): \n            jump += 1 \n    return jump \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    f = {}\n    def find(a, b):\n        if (a, b) not in f:\n            f[a, b] = find(f[a][-1], b)\n            \n        return f[a, b]\n    def l_t(steps):\n        return (steps + 1) * (steps + 1)\n    def l_l(steps):\n        return steps * (steps + 1)\n    def l_r(steps):\n        return steps * (steps + 1) * (steps + 1)\n    \n    def get_step(a, b):\n        if a < 0 or b < 0:\n            return -1\n        if (a, b) in f:\n            return f[a, b]\n        \n        if abs(a) + abs(b) == 1:\n            return l_t(abs(a))\n        elif abs(a) + abs(b) == 2:\n            return l_l(abs(a))\n        elif abs(a) + abs(b) == 3:\n            return l_r(abs(a))\n        \n        \n        f[a, b] = min(get_step(a - 2, b) + 1, get_step(a - 1, b) + 1, get_step(a, b - 2) + 1, get_step(a, b - 1) + 1)\n        return f[a, b]\n        \n    ans = get_step(d[0], d[1])\n    return ans\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n        \ndef min_Jumps_2(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_3(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_4(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_5(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_6(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_7(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_8(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_9(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    y = 0\n    moves = 0\n    \n    while True:\n        #d = -d\n        x_new = x + steps\n        y_new = y + steps\n        if y_new < 0:\n            break\n        if x_new == d or x_new == 0:\n            moves += 1\n            if x_new == d:\n                break\n            x = x_new\n            y = y_new\n            continue\n        if x_new == 0:\n            moves += 1\n            x = x_new\n            y = y_new\n            continue\n        x = x_new\n        y = y_new\n        moves += 1\n    return moves\n    \ndef min_Jumps_10(steps, d): \n    '''\n    Write a function to check fo"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    steps = steps + 1\n    for i in range(1, steps + 1):\n        #if not (i > 2 * d and i <= 3 * d and i % 2 == 0):\n        if not (i > 2 * d and i <= 3 * d and i % 2 == 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(1, steps + 1):\n        if (i == 1) or (i == steps):\n            count += 1\n        elif abs(d - i) > abs(d - i - 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    s = 1\n    n = 2\n    jumps = 0\n    while(s <= steps):\n        if(s+d <= steps and d <= n):\n            n = n + d\n            s = s + d\n            jumps = jumps + 1\n        else:\n            n = n + 1\n            s = s + 1\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    final = []\n    if nums1 == None or nums2 == None:\n        return None\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums3 = []\n    for i in range(len(nums1)):\n        nums3.append(nums1[i]/nums2[i])\n    return nums3\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1=list(nums1)\n    nums2=list(nums2)\n    result=[]\n    if len(nums1)==len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result\n    else:\n        raise ValueError('List should be same length!')\n    \ndef list_sum(list1,list2):\n    '''\n    Write a function to sum two lists element wise.\n    '''\n    list1=list(list1)\n    list2=list(list2)\n    if len(list1)==len(list2):\n        result=[]\n        for i in range(len(list1)):\n            result.append(list1[i]+list2[i])\n        return result\n    else:\n        raise ValueError('List should be same length!')\n        \ndef list_diff(list1,list2):\n    '''\n    Write a function to subtract list2 from list1 element wise.\n    '''\n    list1=list(list1)\n    list2=list(list2)\n    if len(list1)==len(list2):\n        result=[]\n        for i in range(len(list1)):\n            result.append(list1[i]-list2[i])\n        return result\n    else:\n        raise ValueError('List should be same length!')\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('ERROR: LENGTH MUST BE SAME')\n        return\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # div_list([10,20,30,40,50,60],[5,2,3,1]) ->[0,2,2.5,2.5,2.5,2.5]\n    # div_list([5,7,9,10,12],[3,4,6,7,9]) ->[2.75,3.5,3.75,3.5,3.75]\n    result = []\n    for i, j in zip(nums1, nums2):\n        result.append(i / j)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]=nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    \n    if len_nums1 == 0 or len_nums2 == 0:\n        raise Exception(\"Empty List\")\n    \n    return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    if n > m:\n        return [nums1[i] / nums2[i] for i in range(n)]\n    else:\n        return [nums1[i] / nums2[i] for i in range(m)]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str + test_str.replace(str(test_str), '')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    indexes = []\n    for i, value in enumerate(test_str):\n        if value.isdigit():\n            indexes.append(i)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_list = []\n    result_list = []\n    for char in test_str:\n        if char.isdigit():\n            char_list.append(char)\n        else:\n            result_list.append(char)\n    result_list.extend(char_list)\n    return \"\".join(result_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str[:].replace(test_str[:].split(' ')[0], '') + test_str[:].split(' ')[-1] +'' + test_str[:].split(' ')[1:-1] +'' + test_str[:].split(' ')[0]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([test_str[i] for i in range(len(test_str)) if not i==0]) + ''.join([test_str[i] for i in range(1,len(test_str))])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.join(test_str.split()[::-1])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_list.sort()\n    test_str = ''.join(num_list)\n    return test_str\n    \n    \n    \ndef move_num_fast(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_list.sort()\n    for i in range(len(num_list)):\n        if i == 0:\n            new_str.append(num_list[i])\n        elif i!= len(num_list) - 1:\n            new_str.append(num_list[i])\n    return ''.join(new_str)\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = test_str.replace('0','')\n    new_str = new_str.replace('1','')\n    new_str = new_str.replace('2','')\n    new_str = new_str.replace('3','')\n    new_str = new_str.replace('4','')\n    new_str = new_str.replace('5','')\n    new_str = new_str.replace('6','')\n    new_str = new_str.replace('7','')\n    new_str = new_str.replace('8','')\n    new_str = new_str.replace('9','')\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(test_str.split(' ')[::-1])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = list(test_str)\n    for i in range(len(lst)):\n        if lst[i].isdigit():\n            lst[i], lst[-1] = lst[-1], lst[i]\n            lst.pop()\n    return ''.join(lst)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    lst = list(a)\n    sorted_lst = sorted(lst)\n    max_subset = 0\n    while len(sorted_lst) > 0:\n        first = sorted_lst.pop()\n        subset = 0\n        for num in sorted_lst:\n            subset += min(first, num)\n        if subset > max_subset:\n            max_subset = subset\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # return largest_subset_rec(a, 0, len(a) - 1)\n    return largest_subset_memo(a, 0, len(a) - 1)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from itertools import combinations\n    a = sorted(a)\n    print(a)\n    # # a = sorted(a)\n    # print(a)\n    #\n    # l = combinations(a, 2)\n    # print(l)\n    #\n    # #\n    # # def count_divisors(n):\n    # #     i = 1\n    # #     while i < n:\n    # #         if n % i == 0:\n    # #             divisors.append(i)\n    # #         i += 1\n    # #\n    # #\n    # # a = []\n    # # i = 0\n    # # divisors = []\n    # #\n    # # while i < len(a):\n    # #     count_divisors(a[i])\n    # #     i += 1\n    #\n    #\n    # largest_set = set()\n    # largest_set.add(1)\n    # for n in a:\n    #     if n not in largest_set:\n    #         largest_set.add(n)\n    # return largest_set\n    # print(largest_set)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def _largest_subset(a):\n        l = len(a)\n        if l == 0:\n            return 0\n        if l == 1:\n            return 1\n        res = 0\n        def check(i,j):\n            return j%i == 0\n        dp = [[-1 for i in range(l)] for j in range(l)]\n        for i in range(l):\n            dp[i][i] = 1\n        for i in range(l-1,-1,-1):\n            for j in range(i+1,l):\n                for k in range(i,j):\n                    if check(k,j) and check(i,k):\n                        dp[i][j] = max(dp[i][j],dp[i][k]+dp[k+1][j])\n        for i in range(l):\n            res = max(res,dp[i][i])\n        return res\n    return _largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    1. Sort the list \n    2. If any element is multiple of any other element, don't add it to the subset\n    3. If the element is not multiple of any other element, add it to the subset. \n    4. Keep dividing the number by elements in the subset one by one. If the new divisible element is not divisible by any other elements, then add it to the subset.\n    5. Keep dividing the number by elements in the subset one by one and keep iterating until the number is not divisible by any of the elements.\n    6. Keep adding the largest subset to the final result\n    '''\n    '''\n    Sort the list \n    Iterate over the list \n    If any element is multiple of any other element, don't add it to the subset\n    If the element is not multiple of any other element, add it to the subset. \n    Keep dividing the number by elements in the subset one by one. If the new divisible element is not divisible by any other elements, then add it to the subset.\n    Keep dividing the number by elements in the subset one by one and keep iterating until the number is not divisible by any of the elements.\n    Keep adding the largest subset to the final result\n    '''\n    # Time Complexity: O(N*log(N))\n    # Space Complexity: O(N)\n    # Approach 1: Using sorting \n    # Approach 2: Using sorting and dp \n    # Approach 3: Using sorting and dp + sorting \n    # Approach 4: Using sorting and dp + sorting + sorting \n    # Approach 5: Using sorting and dp + sorting + sorting + sorting \n    # Approach 6: Using sorting and dp + sorting + sorting + sorting + sorting \n    # Approach 7: Using sorting and dp + sorting + sorting + sorting + sorting + sorting \n    # Approach 8: Using sorting and dp + sorting + sorting + sorting + sorting + sorting + sorting + sorting \n    # Approach 9: Using sorting and dp + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sorting + sortin"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #Key: find the largest subset of a list of numbers\n    #    largest_subset([1, 2, 3, 4, 5]) = 5\n    #    largest_subset([1, 2, 3, 4, 5, 6]) = 4\n    #    largest_subset([1, 2, 3, 4, 5, 6, 7]) = 3\n    #    largest_subset([1, 2, 3, 4, 5, 6, 7, 8]) = 2\n    #    largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) = 1\n    \n    #key idea: calculate the complement of each number and keep dividing with that complement\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #Sorting the list\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            a[i], a[j] = a[j], a[i]\n    \n    #Initialising a list of size n\n    n = len(a)\n    for i in range(n):\n        a[i] = a[i] * a[i]\n    \n    #Calling function\n    largest_subset_helper(a, n, 1)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # find all subsets with at least one element of each subset\n    # if the length of the subset is less than 2, then it's not a subset\n    \n    # can only make 2 subsets of length 2 if the first subset has length at least 2\n    # and the second subset has length at least 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # max_subset = a\n    # i = 0\n    # n = len(a)\n    # while i < n:\n    #     n_subset = (a[i])\n    #     i = i+1\n    #     for j in range(0,i):\n    #         if (a[j] % a[i] == 0):\n    #             n_subset = n_subset + a[j]\n    #     if (n_subset > max_subset):\n    #         max_subset = n_subset\n    # print (max_subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    a.reverse()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        if (arr1[0] <= arr2[0]):\n            return arr1[0]\n        else:\n            return arr2[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Edge cases\n    if (n == 0):\n        return None\n    elif (n == 1):\n        return (arr1[0] + arr2[0]) / 2\n    elif (n == 2):\n        return (arr1[0] + arr2[1]) / 2\n    # Recursion\n    else:\n        mid_of_arr1 = n // 2\n        mid_of_arr2 = (n - 1) // 2\n        # for first half\n        median_arr1 = get_median(arr1[:mid_of_arr1], arr2[:mid_of_arr2], mid_of_arr1)\n        # for second half\n        median_arr2 = get_median(arr1[mid_of_arr1 + 1:], arr2[mid_of_arr2 + 1:], n - mid_of_arr1 - 1)\n        # compare values\n        if (median_arr1 < median_arr2):\n            return median_arr2\n        else:\n            return median_arr1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(n == 0):\n        return -1\n    if(n == 1):\n        return arr1[0]\n    mid = n//2\n    if(n%2 == 1):\n        return _median(arr1, arr2, mid, n)\n    else:\n        return (arr1[mid-1] + arr1[mid])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    arr = arr1 + arr2\n    arr.sort()\n    \n    if n%2 == 0:\n        return (arr[n//2 - 1] + arr[n//2])/2\n    else:\n        return arr[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < n:\n        arr.append(arr1[i])\n        i += 1\n    while j < n:\n        arr.append(arr2[j])\n        j += 1\n    return arr\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(len(arr1) == 0):\n        return -1\n    elif(len(arr2) == 0):\n        return -1\n    if(len(arr1) == 1 or len(arr2) == 1):\n        if(len(arr1) == 1):\n            return arr1[0]\n        if(len(arr2) == 1):\n            return arr2[0]\n    if(len(arr1) == 2 and len(arr2) == 2):\n        return get_middle(arr1, arr2, n)\n    else:\n        return get_middle_of_two_median(arr1, arr2, n)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1 = sorted(arr1)\n    l = len(arr1)\n    if l%2!= 0:\n        return arr1[int(l/2)]\n    else:\n        return float((arr1[int(l/2)-1]+arr1[int(l/2)])/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return arr2[(n-1)//2]\n    if len(arr2) == 0:\n        return arr1[(n-1)//2]\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    i = (n-1)//2\n    j = n//2\n    return (min(get_median(arr1, arr2, i), get_median(arr1, arr2, j)) + max(get_median(arr1, arr2, i), get_median(arr1, arr2, j))) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    if n % 2 == 1:\n        return arr1[n//2]\n    else:\n        return (arr1[n//2] + arr1[n//2-1])/2\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return []\n    elif n==1:\n        return nums\n    elif n==2:\n        return [x**2 for x in nums]\n    elif n>2:\n        return nth_nums(nums,n-1) + nth_nums(nums,n-2)\n    else:\n        return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]**n\n        count += 1\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    a=[]\n    for i in nums:\n        a.append(i**n)\n    print(a)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    else:\n        if n == 1:\n            return nums\n        else:\n            n = n - 1\n            return sum([x ** n for x in nums])\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_copy = nums.copy()\n    len_nums_copy = len(nums_copy)\n    for i in range(len_nums_copy):\n        nums_copy[i] = nums_copy[i]**n\n    print('nth nums list:',nums_copy)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for i in nums:\n        results.append(i**n)\n    return results\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #applying the power rule\n    return map(lambda x:x**n,nums)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return True\n    else:\n        return string[0].isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    raise TypeError(\"Input must be a string\")\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \nprint(\"Pass\" if (\"UPPERCASE\" == is_upper(\"lowercase\")) else \"Fail\")\nprint(\"Pass\" if (\"UPPERCASE\" == is_upper(\"UPPERCASE\")) else \"Fail\")\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in string:\n        if char in upper:\n            count += 1\n    if count == 0:\n        return string\n    if count == len(string):\n        return string\n    return ''.join(sorted(string, reverse = True))\n    \ndef sum_odd_even(arr):\n    '''\n    Write a python function to return true if the sum of the numbers in an array is divisible by 3.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    if sum % 3 == 0:\n        return True\n    return False\n    \ndef sorted_array(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    arr.sort()\n    arr.reverse()\n    return arr\n    \ndef sorted_array_inplace(arr):\n    '''\n    Write a python function to sort an array inplace.\n    '''\n    arr.sort()\n    return arr\n    \ndef sort_string(string):\n    '''\n    Write a python function to sort the alphabets in a string.\n    '''\n    string = list(string)\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            count += 1\n    for i in range(count):\n        string.remove(string[0])\n    string.sort()\n    return ''.join(string)\n    \ndef string_change(string):\n    '''\n    Write a python function to replace all alphabets in a string with upper case.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].islower():\n            string[i] = string[i].upper()\n    return ''.join(string)\n    \ndef sort_array_in_place(arr):\n    '''\n    Write a python function to sort an array inplace.\n    '''\n    for i in range(len(arr)):\n        min = i\n        for j in range(i, len(arr)):\n            if arr[min] > arr[j]:\n                min = j\n        arr[i], arr[min] = arr[min], arr[i]\n    return arr\n    \ndef sort_array_by_index_inplace(arr):\n    '''\n    Write a python function to sort an array by the index of element inplace.\n    '''\n    arr = list(arr)\n    for i in range(len(arr)):\n        min = i\n        for j in range(i, len(arr)):\n            if arr[min] > arr[j]:\n                min = j\n        arr[i], arr[min] = arr[min], arr[i]\n    return arr\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates in an array inplace.\n    '''\n    arr = list(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                arr.remove(arr[j])\n    return arr\n    \ndef all_permutations(arr):\n    '''\n    Write a python function to find all permutations in an array inplace.\n    '''\n    arr = list(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n    \ndef check_permutation(string1, string2):\n    '''\n    Write a python function to check if two strings are permutations of each other inplace.\n    '''\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\n    \ndef count_occurence(string, char):\n    '''\n    Write a python function to count the number of occurrences of a char in an array inplace.\n    '''\n    count = 0\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n    \ndef count_occurence_in_place(string, char):\n    '''\n    Write a python function to count the number of occurrences of a char in an array inplace.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] == char:\n            string[i] = '#'\n    return ''.join(string)\n    \ndef reverse_array(arr):\n    '''\n    Write a python function to reverse an array inplace.\n    '''\n    arr.reverse()\n    return arr\n    \ndef reverse_array_recursive(arr):\n    '''\n    Write a python function to reverse an array inplace using recursive approach.\n    '''\n    def _reverse(arr, start, end):\n        if start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            _reverse(arr, start + 1, end - 1)\n    _reverse(arr, 0, len(arr) - 1)\n    return arr\n    \ndef rotate_array(arr, n):\n    '''\n    Write a python function to rotate an array by n inplace.\n    '''\n    for i in range(n):\n        temp = arr[0]\n        for j in range(len(arr) - 1):\n            arr[j] = arr[j + 1]\n        arr[len(arr) - 1] = temp\n    return arr\n    \ndef rotate_array_recursive(arr, n):\n    '''\n    Write a python function to rotate an array by n inplace using recursive approach.\n    '''\n    def _rotate_array(arr, start, end, n):\n        if start < end:\n            temp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = temp\n            _rotate_array(arr, start + 1, end - 1, n)\n    _rotate_array(arr, 0, len(arr) - 1, n)\n    return arr\n    \ndef main():\n    print(\"Given an array A of size N and an integer K, you need to find the number of continuous subarrays having a sum equal to K.\\n\")\n    print(\"Input 1 :\")\n    arr = [1,2,3,4,5]\n    K = 8\n    print(\"Input 2 :\")\n    arr = []\n    K = 0\n    print(\"Input 3 :\")\n    arr = [1,2]\n    K = 1\n    print(\"Input 4 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = 8\n    print(\"Input 5 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = -1\n    print(\"Input 6 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = 5\n    print(\"Input 7 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = -1\n    print(\"Input 8 :\")\n    arr = []\n    K = 0\n    print(\"Input 9 :\")\n    arr = [1,2,3]\n    K = 1\n    print(\"Input 10 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = 8\n    print(\"Input 11 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = -1\n    print(\"Input 12 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = 5\n    print(\"Input 13 :\")\n    arr = []\n    K = 0\n    print(\"Input 14 :\")\n    arr = [1,2,3,4,5,6,7]\n    K = 8\n    print(\"Input 15 :\")\n    arr = []"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_str = \"\"\n    for c in string:\n        if ord(c) >= 65 and ord(c) <= 90:\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        else:\n            new_string += i.upper()\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = str(string)\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[::-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    #using the slice function\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0, newList.pop(-1))\n    newList.insert(len(newList), newList.pop(0))\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\nprint(swap_List([10, 20, 30, 40, 50, 60])) #[10, 20, 50, 60, 30, 40]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0,newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list_len = len(newList)\n    new_list = newList[1:-1]\n    new_list.append(newList[0])\n    new_list.insert(0, newList[list_len -1])\n    return new_list\nprint(swap_List([1,2,3,4,5,6]))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList) \n  "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length < 2:\n        print('No need to swap')\n        return newList\n    #swap the elements of newList[0] and newList[-1]\n    newList[0], newList[-1] = newList[-1], newList[0]\n    #traverse the list and swap the elements at even index and odd index\n    for i in range(length):\n        if i%2 == 0:\n            newList[i], newList[i+1] = newList[i+1], newList[i]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    return (2*pi*r*r)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0 :\n        return 0\n    else :\n        return (1/2) * (r * r * math.sqrt(2 * r * r - 2 * r + 2))\n    \ndef print_n_times(string, n):\n    '''\n    Write a python function that prints a given string n times.\n    '''\n    print(string * n)\n    \ndef count_char(string, char):\n    '''\n    Write a python function that returns the count of the given character in a given string.\n    '''\n    if len(string) == 0 :\n        return 0\n    else :\n        return string.count(char)\n    \ndef find_longest_word(string):\n    '''\n    Write a python function that returns the length of the longest word in a given string.\n    '''\n    if len(string) == 0 :\n        return 0\n    else :\n        return max([len(word) for word in string.split()])\n    \ndef is_a_palindrome(string):\n    '''\n    Write a python function that returns true if a string is a palindrome, else false.\n    '''\n    if len(string) == 0 :\n        return True\n    elif len(string) == 1 :\n        return True\n    else :\n        return string[0] == string[-1] and is_a_palindrome(string[1:-1])\n    \ndef is_palindrome(string):\n    '''\n    Write a python function that returns true if a string is a palindrome, else false.\n    '''\n    if len(string) == 0 :\n        return True\n    elif len(string) == 1 :\n        return True\n    else :\n        if string[0]!= string[-1] :\n            return False\n        else :\n            return is_palindrome(string[1:-1])\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import sys\n    print('Area of a triangle can be found by:')\n    print('Area = 0.5*s*s*sin(a)')\n    print('Input a radius:')\n    r = float(input())\n    a = math.sqrt((r*r)+(2*r*(r+1)*math.sin((1/2)*math.pi)))\n    area = (0.5*r*r)*math.sin((1/2)*math.pi)\n    print(f'The area of the triangle inscribed in a semicircle with radius {r} is {area}.')\n    return area\n    \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    r = int(r)\n    if r <= 0 :\n        raise ValueError('r should be a positive number')\n    if r > 1 :\n        raise ValueError('r should be less than 1')\n    if r == 1:\n        raise ValueError('r should be greater than 1')\n    \n    # formula used to find the area of the triangle\n    area = math.sqrt(r**2 - (r-1)**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = float(r)\n    area = 3/2 * r * r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # writing the formula for the area of the triangle\n    area = (1.0/2.0) * (r**2)\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    area = pi * r * r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    pi = math.pi\n    area = pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = ( 1.0/2 ) * ( r**2 ) * math.sin( math.pi )\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return (math.sqrt(3)/2)*r*(r*r + 1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start == 0:\n        return start+1\n    mid = start + (end-start)//2\n    if arra"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end == 0:\n        return None\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Function Logic\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    else:\n        mid=start+end//2\n        if mid<=len(array) and array[mid]==mid+1:\n            return mid+1\n        elif mid<=len(array) and array[mid]==mid-1:\n            return mid-1\n        elif array[mid]==mid:\n            return mid\n        else:\n            return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end==None:\n        end=len(array)\n        \n    for i in range(start,end):\n        if i not in array:\n            return i\n            break\n        \n    return None\n    \n    \n    \ndef find_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end==None:\n        end=len(array)\n        \n    for i in range(start,end):\n        if i not in array:\n            return i\n            break\n            \n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    i=start\n    while i<=end:\n        if array[i]!=i+1 and array[i]!=i:\n            return i+1\n        i+=1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if array == None:\n        print(\"Enter a valid list\")\n        return None\n    if start > end or start < 0:\n        print(\"Enter a valid index\")\n        return None\n    if array[start]!= start+1:\n        return start+1\n    if array[end-1]!= end-1:\n        return end-1\n    if start < end and array[start+1] == start+1:\n        return find_First_Missing(array,start+1,end)\n    if start < end and array[end-1] == end-1:\n        return find_First_Missing(array,start,end-1)\n    if start > end and array[start-1] == start-1:\n        return find_First_Missing(array,start-1,end)\n    if start > end and array[end-1] == end-1:\n        return find_First_Missing(array,start,end-1)\n    if start < end:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if end-start == 0:\n        return start+1\n    if end -start == 1:\n        return start+2\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i!=array[i]:\n            return i\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # original_length = len(string)\n    # print(original_length)\n    # for i in range(original_length):\n        # if string[i] == \" \":\n            # string = string[:i] + \"0\" + string[i+1:]\n    # print(string)\n    # return string\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # return '%20'.join(string.split())\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    import re\n    return re.sub(\" \", \"%20\", string)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"*\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for n in list: \n        if n%2==0: \n            even_list.append(n) \n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [] \n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            even.append(list[i]) \n    return even \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_numbers = []\n    odd_numbers = []\n    \n    for num in list:\n        if num%2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n            \n    print('Even numbers are: {}\\nOdd numbers are: {}'.format(even_numbers,odd_numbers))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n    \nprint(Split([3,4,5,6,7,8,9])"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i%2==0:\n            even_num.append(i)\n    print(even_num)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = list(filter(lambda x:x%2==0,list))\n    return list1\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2==0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    a = [[-1,0], [1,0], [0,1], [0,-1], [-1,-1], [-1,1], [1,1], [1,-1]]\n    for i in a:\n        if ele[0] + i[0] >= 0 and ele[1] + i[1] >= 0 and ele[0] + i[0] < len(maze) and ele[1] + i[1] < len(maze):\n            if maze[ele[0] + i[0]][ele[1] + i[1]] =='':\n                sub.append([ele[0] + i[0], ele[1] + i[1]])\n    return sub\n    \ndef maze_solver(coordinates, maze, visited = []):\n    '''\n    This function will solve the maze based on the input coordinates, maze and visited list.\n    '''\n    # if the last element is the same, return True.\n    if coordinates[-1] == coordinates[-2]:\n        return True\n    \n    # if the last element is not in the maze, return False.\n    if coordinates[-1] not in maze:\n        return False\n    \n    # if the last element has been visited, return False.\n    if coordinates[-1] in visited:\n        return False\n    \n    # if the last element is not in the visited list, mark it.\n    visited.append(coordinates[-1])\n    \n    # search the adjacent coordinates of the last element.\n    adj = adjac(coordinates[-1])\n    \n    # if there are adjacent coordinates in the maze, call the function recursively.\n    if len(adj) > 0:\n        for i in adj:\n            if maze_solver(coordinates + [i], maze, visited):\n                return True\n    \n    # if the maze is not connected, return False.\n    return False\n    \ndef maze_solver_bfs(coordinates, maze):\n    '''\n    This function will solve the maze based on the input coordinates, maze and visited list.\n    It uses the Breadth-First Search (BFS) algorithm.\n    '''\n    # if the last element is the same, return True.\n    if coordinates[-1] == coordinates[-2]:\n        return True\n    \n    # if the last element is not in the maze, return False.\n    if coordinates[-1] not in maze:\n        return False\n    \n    # if the last element has been visited, return False.\n    if coordinates[-1] in visited:\n        return False\n    \n    # if the last element is not in the visited list, mark it.\n    visited.append(coordinates[-1])\n    \n    # search the adjacent coordinates of the last element.\n    adj = adjac(coordinates[-1])\n    \n    # if there are adjacent coordinates in the maze, call the function recursively.\n    if len(adj) > 0:\n        for i in adj:\n            if maze_solver_bfs(coordinates + [i], maze):\n                return True\n    \n    # if the maze is not connected, return False.\n    return False\n    \nif __name__ == '__main__':\n    '''\n    The program will ask for the filename of the maze and a list of coordinates to start\n    with in the maze.\n    '''\n    print(\"Enter the name of the file\")\n    filename = input()\n    print(\"Enter the coordinates to start the maze\")\n    coordinates = input().split()\n    coordinates = [int(x) for x in coordinates]\n    \n    '''\n    The program will read the file, and populate a 2D array.\n    '''\n    with open(filename, 'r') as f:\n        maze = []\n        for line in f:\n            line = line.strip()\n            maze.append([x for x in line])\n            \n    '''\n    The program will call the function to solve the maze and update the maze accordingly.\n    '''\n    for i in range(len(maze)):\n        maze[i] = [' '] + maze[i] + [' ']\n    \n    maze[coordinates[0]][coordinates[1]] = '#'\n    \n    visited = []\n    # The program will call the function to solve the maze.\n    print(\"The maze to be solved is : \\n\")\n    for i in range(len(maze)):\n        print(''.join(maze[i]))\n    \n    # The program will call the function to solve the maze.\n    print(\"\\nThe maze is solved using Breadth-First Search algorithm is : \\n\")\n    print(''.join(maze))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(a+ele[0], b+ele[1]) for a, b in product(range(4), range(4)) if not ((a==ele[0]) or (b==ele[1]) or (a+ele[0]==ele[0]) or (b+ele[1]==ele[1]))]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 1 and ele[1] == 2:\n        return (1,1), (1,1)\n    elif ele[0] == 2 and ele[1] == 3:\n        return (2,1), (2,1)\n    elif ele[0] == 3 and ele[1] == 4:\n        return (3,1), (3,1)\n    elif ele[0] == 1 and ele[1] == 3:\n        return (1,2), (1,2)\n    elif ele[0] == 2 and ele[1] == 2:\n        return (2,2), (2,2)\n    elif ele[0] == 3 and ele[1] == 2:\n        return (3,2), (3,2)\n    elif ele[0] == 1 and ele[1] == 4:\n        return (1,3), (1,3)\n    elif ele[0] == 2 and ele[1] == 3:\n        return (2,3), (2,3)\n    elif ele[0] == 3 and ele[1] == 4:\n        return (3,3), (3,3)\n    elif ele[0] == 4 and ele[1] == 3:\n        return (4,3), (4,3)\n    elif ele[0] == 2 and ele[1] == 4:\n        return (2,4), (2,4)\n    elif ele[0] == 3 and ele[1] == 2:\n        return (3,4), (3,4)\n    elif ele[0] == 4 and ele[1] == 2:\n        return (4,4), (4,4)\n    else:\n        return (1,1), (1,1)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if(ele in adj_list):\n        sub.append(ele)\n        return sub\n    else:\n        sub.append(ele)\n        for i in range(len(sub)):\n            if(sub[i] in adj_list):\n                sub.append(adj_list[sub[i]])\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        temp = list(ele)\n        if i+1 < len(ele):\n            temp[i] += 1\n            sub.append(tuple(temp))\n        if i-1 >= 0:\n            temp[i] -= 1\n            sub.append(tuple(temp))\n        if i+1 < len(ele) and i-1 >= 0:\n            temp[i] += 1\n            temp[i-1] -= 1\n            sub.append(tuple(temp))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        return sub\n    \n    adjacents = []\n    up, left, down, right = ele\n    if up!= 0: adjacents.append((up-1, left))\n    if down!= 0: adjacents.append((down-1, left))\n    if left!= 0: adjacents.append((up, left-1))\n    if right!= 0: adjacents.append((up, right-1))\n    \n    return adjacents\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in ['U', 'D', 'L', 'R']:\n        return [(ele, i) for i in range(-1, 2)]\n    else:\n        return [(ele, i) for i in range(-1, 2) if i!= 0]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 2:\n        sub.append(ele[0])\n        return sub\n    sub.append(ele[0])\n    return adjac(ele[1:], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    sub.append((x, y+1))\n    sub.append((x-1, y))\n    sub.append((x, y-1))\n    sub.append((x+1, y))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    if x+1 < len(board) and board[x+1][y]!= 0:\n        sub.append((x+1, y))\n    if x-1 >= 0 and board[x-1][y]!= 0:\n        sub.append((x-1, y))\n    if y+1 < len(board[0]) and board[x][y+1]!= 0:\n        sub.append((x, y+1))\n    if y-1 >= 0 and board[x][y-1]!= 0:\n        sub.append((x, y-1))\n    if x+1 < len(board) and y+1 < len(board[0]) and board[x+1][y+1]!= 0:\n        sub.append((x+1, y+1))\n    if x+1 < len(board) and y-1 >= 0 and board[x+1][y-1]!= 0:\n        sub.append((x+1, y-1))\n    if x-1 >= 0 and y+1 < len(board[0]) and board[x-1][y+1]!= 0:\n        sub.append((x-1, y+1))\n    if x-1 >= 0 and y-1 >= 0 and board[x-1][y-1]!= 0:\n        sub.append((x-1, y-1))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.strip().split()\n    return \" \".join(text).replace(\" \", \"_\").lower()\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    a = text.split()\n    print('The input String is {}'.format(text))\n    for i in a:\n        if i == i.strip():\n            print(i.replace(' ', '_').upper())\n        else:\n            print('The input String is {}'.format(text))\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split(\" \")\n    new_words = \"\"\n    for word in words:\n        new_words = new_words + word.replace(\" \", \"_\") + \" \"\n    return new_words\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    a=text.replace(\" \",\"_\")\n    print(a)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while 0 in num_list:\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while 0 in num_list:\n        num_list.remove(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos_zero = []\n    pos_zero2 = []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for i in range(len(num_list)-1,-1,-1):\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    i = 0\n    while i < length:\n        if num_list[i] == 0:\n            num_list.append(0)\n            num_list.pop(i)\n            i = i - 1\n        else:\n            i = i + 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # solution 1\n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list.remove(0)\n    #         num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_2 = num_list\n    for i in range(0, len(num_list_2)):\n        if num_list_2[i] == 0:\n            num_list_2.insert(i, 0)\n            num_list_2.pop(i + 1)\n    return num_list_2\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] == 0:\n                if num_list[j]!= 0:\n                    num_list[i] = num_list[j]\n                    num_list[j] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos = 0\n    while pos < len(num_list):\n        if num_list[pos]!= 0:\n            break\n        pos += 1\n    while pos < len(num_list):\n        if num_list[pos] == 0:\n            num_list.remove(0)\n        pos += 1\n    while 0 in num_list:\n        num_list.remove(0)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum = arr[i] ^ arr[j]\n    return sum\nprint(pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],10))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 1 : return 0\n    i = 0\n    xor_Sum = 0\n    while i < n :\n        j = i + 1\n        while j < n :\n            xor_Sum += arr[i] ^ arr[j]\n            j += 1\n        i += 1\n    return xor_Sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            res = res + arr[i] ^ arr[j]\n    print(res)\n    return res\n    \ndef pair_xor_Min(arr,n) : \n    '''\n    Write a python function to find the minimum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] < arr[j] :\n                res = res + arr[j] ^ arr[i]\n            else :\n                res = res + arr[i] ^ arr[j]\n    print(res)\n    return res\n    \ndef pair_xor_Max(arr,n) : \n    '''\n    Write a python function to find the maximum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j] :\n                res = res + arr[j] ^ arr[i]\n            else :\n                res = res + arr[i] ^ arr[j]\n    print(res)\n    return res\n    \ndef pair_xor_MinMax(arr,n) : \n    '''\n    Write a python function to find the minimum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] < arr[j] :\n                res = res + arr[j] ^ arr[i]\n            else :\n                res = res + arr[i] ^ arr[j]\n    print(res)\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j] :\n                res = res + arr[j] ^ arr[i]\n            else :\n                res = res + arr[i] ^ arr[j]\n    print(res)\n    return res\n    \ndef pair_xor_index(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    if key < arr[0] :\n        return -1\n    l = 0\n    r = n - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    if arr[l]!= key :\n        return -1\n    return l\n    \ndef pair_xor_index_v2(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    if arr[i]!= key :\n        return -1\n    return i\n    \ndef pair_xor_index_v3(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    if arr[i]!= key :\n        return -1\n    l = i + 1\n    r = j - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return -1\n    \ndef pair_xor_index_v4(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    l = i + 1\n    r = j - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return -1\n    \ndef pair_xor_index_v5(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    l = i + 1\n    r = j - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return -1\n    \ndef pair_xor_index_v6(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    l = i + 1\n    r = j - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return -1\n    \ndef pair_xor_index_v7(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            i = mid + 1\n        else :\n            j = mid - 1\n    l = i + 1\n    r = j - 1\n    while (l<r) :\n        mid = l + (r - l) // 2\n        if arr[mid] == key :\n            return mid\n        if arr[mid] < key :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return -1\n    \ndef pair_xor_index_v8(arr,n,key) : \n    '''\n    Write a python function to find the index of the next minimum element after the given element.\n    '''\n    i = 0\n    j = n - 1\n    while (i<j) :\n        mid = i + (j - i) // 2\n        if arr[mid] == key :\n            retur"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            xor_sum = xor_sum + (arr[i] ^ arr[j]) \n    return xor_sum\n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n    \nif __name__ == \"__main__\":\n    import random\n    #arr = random.sample(range(20), 10)\n    arr = [1,2,2,3,4,4,5,6,7,7]\n    n = len(arr)\n    sum = pair_xor_Sum(arr,n)\n    print(\"sum of xor of all pairs = \", sum)\n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum = sum^(arr[i]+arr[j])\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum += (arr[i] ^ arr[j])\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!=j:\n                sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pairs_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                pairs_sum += arr[i] ^ arr[j]\n    print(\"The sum of XOR of all pairs of numbers in the given list is : \",pairs_sum)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            Sum = Sum + arr[i] ^ arr[j]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # make a heap with iterable\n    sorted_iterable = iterable\n    # heapq.heapify(sorted_iterable)\n    hq.heapify(sorted_iterable)\n    while len(sorted_iterable) > 1:\n        # pop max and second max and swap\n        first_pop = hq.heappop(sorted_iterable)\n        second_pop = hq.heappop(sorted_iterable)\n        first_pop, second_pop = swap(first_pop, second_pop)\n        # add back to heap\n        hq.heappush(sorted_iterable, first_pop)\n        hq.heappush(sorted_iterable, second_pop)\n    return sorted_iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # first we need to make a min-heap\n    hq.heapify(iterable)\n    #then we need to make an array and transfer the element back\n    arr = []\n    while len(iterable) > 0:\n        arr.append(hq.heappop(iterable))\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    a = []\n    for e in iterable:\n        hq.heappush(a,e)\n    return [hq.heappop(a) for i in range(len(a))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    sorted = []\n    for i in iterable:\n        hq.heappush(h,i)\n    while h:\n        sorted.append(hq.heappop(h))\n    return sorted\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Your code here\n    # first make a min heap with min(x[i])\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    list = []\n    for i in range(len(iterable)):\n        list.append([iterable[i],i])\n    hq.heapify(list)\n    sorted_list = []\n    for i in range(len(list)):\n        sorted_list.append(list[i][0])\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def insertion_sort(lst):\n        for i in range(1, len(lst)):\n            j = i-1\n            key = lst[i]\n            while j >= 0 and lst[j] > key:\n                lst[j+1] = lst[j]\n                j -= 1\n            lst[j+1] = key\n        return lst\n    return insertion_sort(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for i in iterable:\n        hq.heappush(l,i)\n    return list(map(lambda x: x[0], l))\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = actual_cost[0]\n    sale_amount = sale_amount[0]\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n    # expected output: True\n    # actual output: False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_amount_profit = actual_cost - sale_amount\n    if total_amount_profit < 0:\n        print(\"No Profit\")\n    elif total_amount_profit > 0:\n        print(\"No Loss\")\n    else:\n        print(\"No Profit and Loss\")\n    return\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost-sale_amount >= 0:\n        return \"no loss\"\n    elif actual_cost-sale_amount <= 0:\n        return \"no profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = sale_amount - actual_cost\n    if total_cost == 0:\n        return \"profit\"\n    elif total_cost < 0:\n        return \"loss\"\n    else:\n        return \"no profit/loss\"\n    \nprint(noprofit_noloss(actual_cost = 2, sale_amount = 3)) #should be profit\nprint(noprofit_noloss(actual_cost = 1, sale_amount = 2)) #should be loss\nprint(noprofit_noloss(actual_cost = 2, sale_amount = 3)) #should be profit\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    if actual_cost < 0:\n        return False\n    if sale_amount < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    difference = actual_cost - sale_amount\n    if difference == 0:\n        print(\"Profit and Loss are zero\")\n    else:\n        print(\"Profit and Loss are not zero\")\n    \n    \n    "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v in km/h\n    #t in c\n    v2 = v ** 2\n    a = 35.74 + (0.6215 * t) - (35.75 * v2) + (0.4275 * t * v2)\n    return int(a)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = -42.379\n    B = 2.04901523\n    C = 10.14333127\n    D = 0.22475541\n    F = 1.83783\n    e = 1.0/1.8\n    g = 9.80665\n    wind = math.sqrt(v*v + 5.4*e*t)\n    wind = round(wind)\n    C1 = (A + (B*t) + (C*v*v))*wind*wind\n    C2 = (D + (F*t))*wind\n    \n    chill = ((C1*C1)/C2)\n    chill = round(chill)\n    \n    return chill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v/1.609\n    t = t + 273.15\n    \n    a = 35.74 + 0.6215*t - 35.75*math.pow(t,2) + 0.4275*math.pow(t,3)\n    b = 35.74 + 0.6215*t + 35.75*math.pow(t,2) - 0.4275*math.pow(t,3)\n    \n    if v >= a:\n        wci = t * math.pow(v,0.16) + math.pow(v,0.16)*(0.6215*t - 35.75)\n    elif v < a and v >= b:\n        wci = t * math.pow(v,0.16) + math.pow(v,0.16)*(0.6215*t - 35.75) - math.pow(v,0.16)*(35.75 - 0.6215*t)\n    else:\n        wci = t * math.pow(v,0.16) + math.pow(v,0.16)*(0.6215*t - 35.75) - math.pow(v,0.16)*(35.75 - 0.6215*t) - math.pow(v,0.16)*(35.75 - 0.6215*t)\n    \n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (35.74 + 0.6215*t + 35.75*v**0.16 + 0.4275*t*v**0.16)\n    return math.floor(c)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0.0 or t < -45.0:\n        return None\n    windchill = 17.27 + (1.2 * t) - (11.37 * (v ** 0.16)) + (1.2 * (v ** 0.16)) * (0.611 * t)\n    return round(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    tc = t + 459.67\n    wv = v * math.sqrt((0.5 * tc) + (15.67 * math.pow((tc - (0.0065 * tc)),2)))\n    if wv > 50:\n        wv = 50\n    if wv < 0:\n        wv = 0\n    return wv\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    windchill = 35.74 + (0.6215*t) - (35.75 * pow((v*0.6215), 0.16))\n    return int(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    c = t + 1.8*math.sqrt(v*v*0.62)\n    if c > 100:\n        c = c - 93\n    return c\nprint(wind_chill(2.23, 25.2))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v*math.sqrt(1.225*(273.15 + t))\n    wind_chill = (35.74 + 0.6215*t - 35.75*(math.pow(wind_speed, 0.16)))/0.4263\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=5.74\n    k=0.6215\n    x=0.0\n    y=0.0\n    z=0.0\n    if v<2:\n        v=2\n        \n    x=(v*(t+160))/18.4\n    y=math.exp(x)\n    z=(c*(v**0.16))/y\n    wind_chill=int(round(z,0))\n    return wind_chill\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for i in sample_names:\n        if not i.islower():\n            result += len(i)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_length(sample_names):\n        pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            names_sum += len(name)\n    return names_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Return total length of name list\n    def total_len(name_list):\n        return len(name_list)\n    #Remove the names that start with a lowercase letter\n    def clean_names(name_list):\n        return [name.lower() for name in name_list if name[0].isupper() == False]\n    #Return total length of cleaned name list\n    def total_cleaned_len(cleaned_name_list):\n        return len(cleaned_name_list)\n    return total_len(sample_names) - total_cleaned_len(clean_names(sample_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length = 0\n    for name in sample_names:\n        if name[0].islower():\n            length += len(name)\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split(' ')\n    result = 0\n    for name in sample_names:\n        if name.isupper() == True:\n            continue\n        result = result + len(name)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length=0\n    for i in sample_names:\n        if i[0].islower():\n            length+=len(i)\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam=0\n    for x in sample_names:\n        if x[0] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']:\n            continue\n        sum_nam+=len(x)\n    return sum_nam\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(items == None):\n        return None\n    parenthesis = ['(',')']\n    output = ''\n    for char in items:\n        if(char not in parenthesis):\n            output += char\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == '(':\n            items.remove(item)\n        if item == ')':\n            items.remove(item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items_list = []\n    for item in items:\n        if \"(\" in item:\n            items_list.append(item[:item.find(\"(\")])\n        if \")\" in item:\n            items_list.append(item[:item.find(\")\")])\n        else:\n            items_list.append(item)\n    return items_list\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        item = item.strip()\n        if item.find('(') > -1:\n            l = item.find('(')\n            item = item[:l]\n        if item.find(')') > -1:\n            r = item.find(')')\n            item = item[:r+1]\n        items.remove(item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = ''\n    for i in items:\n        if(i!= '('):\n            temp = temp + i\n    return temp\ndef remove_parenthesis2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = ''\n    for i in items:\n        if(i!= ')'):\n            temp = temp + i\n    return temp\ndef remove_parenthesis3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = ''\n    temp1 = ''\n    for i in items:\n        if(i!= ')'):\n            temp = temp + i\n    while(len(temp)!=0):\n        if(temp[0] == '('):\n            temp1 = temp.split(temp[0])\n            temp1 = temp1[1]\n            temp = temp1\n        else:\n            temp1 = temp.split(temp[0])\n            temp1 = temp1[1]\n            temp = temp1\n    return temp\ndef remove_parenthesis4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = ''\n    temp1 = ''\n    for i in items:\n        if(i!= ')'):\n            temp = temp + i\n    while(len(temp)!=0):\n        if(temp[0] == '('):\n            temp1 = temp.split(temp[0])\n            temp1 = temp1[1]\n            temp = temp1\n        else:\n            temp1 = temp.split(temp[0])\n            temp1 = temp1[1]\n            temp = temp1\n    return temp\ndef check_ip_address(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address1(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address2(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address3(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address4(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address5(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address6(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address7(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address8(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and not(i.isnumeric())):\n            return False\n    for i in temp:\n        if(len(i) == 3 and (int(i) < 0 or int(i) > 255)):\n            return False\n    return True\ndef check_ip_address9(items):\n    '''\n    Write a function to check whether a string is a valid IP address or not.\n    '''\n    temp = items.split('.')\n    if(len(temp)!= 4):\n        return False\n    for i in temp:\n        if(len(i) == 0 or len(i) > 3):\n            return False\n    for i in temp:\n        if(len(i) == 3 and no"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    clean_list = []\n    for item in items:\n        if \"(\" in item and \")\" in item:\n            item = item.replace(\"(\", \"\")\n            item = item.replace(\")\", \"\")\n        clean_list.append(item)\n    return clean_list\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s=items\n    items=s.replace(')',' ')\n    items=items.replace('(',' ')\n    return items\n    \ndef check_for_uppercase_letters(text):\n    '''\n    Write a function to check if the letters in a string are uppercase or not.\n    '''\n    if text.isupper():\n        return 'Yes'\n    else:\n        return 'No'\ndef check_for_lowercase_letters(text):\n    '''\n    Write a function to check if the letters in a string are lowercase or not.\n    '''\n    if text.islower():\n        return 'Yes'\n    else:\n        return 'No'\ndef check_for_numbers(text):\n    '''\n    Write a function to check if the letters in a string are numbers or not.\n    '''\n    if text.isnumeric():\n        return 'Yes'\n    else:\n        return 'No'\ndef check_for_special_characters(text):\n    '''\n    Write a function to check if the letters in a string are special characters or not.\n    '''\n    if text.isalpha() or text.isdigit() or text.isalnum():\n        return 'Yes'\n    else:\n        return 'No'\ndef check_for_symbols(text):\n    '''\n    Write a function to check if the letters in a string are symbols or not.\n    '''\n    if text.isalpha():\n        return 'Yes'\n    else:\n        return 'No'\ndef count_uppercase_letters(text):\n    '''\n    Write a function to count the uppercase letters in a string.\n    '''\n    return sum([1 for x in text if x.isupper()])\n    \ndef count_lowercase_letters(text):\n    '''\n    Write a function to count the lowercase letters in a string.\n    '''\n    return sum([1 for x in text if x.islower()])\n    \ndef count_numbers(text):\n    '''\n    Write a function to count the numbers in a string.\n    '''\n    return sum([1 for x in text if x.isnumeric()])\n    \ndef count_special_characters(text):\n    '''\n    Write a function to count the special characters in a string.\n    '''\n    return sum([1 for x in text if x.isalnum()])\n    \ndef count_symbols(text):\n    '''\n    Write a function to count the symbols in a string.\n    '''\n    return sum([1 for x in text if x.isalpha() or x.isdigit() or x.isalnum()])\n    \ndef count_all_symbols(text):\n    '''\n    Write a function to count all symbols in a string.\n    '''\n    return sum([1 for x in text])\n    \ndef count_all_symbols_in_words(words):\n    '''\n    Write a function to count the all symbols in a string.\n    '''\n    return sum([1 for x in words])\n    \ndef count_all_letters_in_words(words):\n    '''\n    Write a function to count the all letters in a string.\n    '''\n    return sum([len(x) for x in words])\n    \ndef count_letters_in_words(words):\n    '''\n    Write a function to count the letters in a string.\n    '''\n    return sum([len(x.split(' ')) for x in words])\n    \ndef count_words_in_a_sentence(sentence):\n    '''\n    Write a function to count the words in a sentence.\n    '''\n    return sum([1 for x in sentence.split(' ')])\n    \ndef count_words_in_sentence(sentence):\n    '''\n    Write a function to count the words in a sentence.\n    '''\n    return len(sentence.split(' '))\n    \ndef count_words_containing_letter(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in sentence.split(' ') if letter.lower() in x.lower()])\n    \ndef count_words_containing_letter_in_sentence(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in sentence.split(' ') if x.lower().find(letter.lower()) > -1])\n    \ndef count_words_containing_letter_in_sentence_using_regex(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '\\w+', sentence)])\n    \ndef count_words_containing_letter_using_regex(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '\\w+', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_2(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_3(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_4(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_5(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_6(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_7(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_8(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_9(sentence, letter):\n    '''\n    Write a function to count the words that contain a certain letter in a sentence.\n    '''\n    return sum([1 for x in re.findall(letter + '(\\w+)', sentence)])\n    \ndef count_words_containing_letter_in_sentence_using_regex_new_10(sentence, letter):\n    '''\n    Write a function to count th"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\(|\\)', '', items)\n    items = re.sub('\\s', '', items)\n    items = items.split(' ')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove() function remove the substring from starting index upto given index\n    items = items.strip()\n    if items.count('(') and items.count(')'):\n        index_of_1st_occurrence = items.index('(')\n        index_of_last_occurrence = items.rindex(')')\n        items = items[:index_of_1st_occurrence] + items[index_of_last_occurrence+1:]\n    elif items.count('(') and items.count(')'):\n        index_of_1st_occurrence = items.index('(')\n        items = items[:index_of_1st_occurrence]\n    elif items.count('(') and not items.count(')'):\n        index_of_1st_occurrence = items.index('(')\n        items = items[:index_of_1st_occurrence]\n    elif items.count(')') and not items.count('('):\n        index_of_last_occurrence = items.rindex(')')\n        items = items[:index_of_last_occurrence]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == '':\n        return ''\n    elif items == ')':\n        return ''\n    elif items == ')()':\n        return ''\n    elif items == '()()':\n        return ''\n    elif items == '(()':\n        return ''\n    else:\n        item1 = items[0]\n        item2 = items[-1]\n        if item1 == '(' and item2 == ')':\n            return items[1:-1]\n        elif item1 == '(' and item2 == '(':\n            return remove_parenthesis(items[1:-1])\n        elif item1 == ')' and item2 == ')':\n            return remove_parenthesis(items[:-1])\n        elif item1 == ')' and item2 == ')':\n            return remove_parenthesis(items[:-1])\n        else:\n            return items\ndef remove_spaces(items):\n    '''\n    Write a function to remove the spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '')\ndef remove_parenthesis_spaces(items):\n    '''\n    Write a function to remove the spaces from a string\n    '''\n    if items == '':\n        return ''\n    elif items == ')':\n        return ''\n    elif items == ')()':\n        return ''\n    elif items == '()()':\n        return ''\n    elif items == '(()':\n        return ''\n    else:\n        item1 = items[0]\n        item2 = items[-1]\n        if item1 == '(' and item2 == ')':\n            return remove_parenthesis_spaces(items[1:-1])\n        elif item1 == '(' and item2 == '(':\n            return remove_parenthesis_spaces(items[1:-1])\n        elif item1 == ')' and item2 == ')':\n            return remove_parenthesis_spaces(items[:-1])\n        elif item1 == ')' and item2 == ')':\n            return remove_parenthesis_spaces(items[:-1])\n        else:\n            return items\ndef remove_extra_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.strip()\ndef remove_extra_spaces_and_parenthesis(items):\n    '''\n    Write a function to remove the extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '')\ndef get_spaced_item(items):\n    '''\n    Write a function to return the string inbetween the spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '')\ndef get_parenthesis_item(items):\n    '''\n    Write a function to return the string inbetween the parenthesis from a string\n    '''\n    if items == '':\n        return ''\n    elif items == ')':\n        return ''\n    elif items == ')()':\n        return ''\n    elif items == '()()':\n        return ''\n    elif items == '(()':\n        return ''\n    else:\n        return items.replace('(', '').replace(')', '')\ndef get_extra_spaces_item(items):\n    '''\n    Write a function to return the string inbetween the extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '')\ndef get_extra_spaces_parenthesis_item(items):\n    '''\n    Write a function to return the string inbetween the extra spaces and parenthesis from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '')\ndef get_all_items(items):\n    '''\n    Write a function to return the items inbetween the spaces, parenthesis and extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '').replace('(', '').replace(')', '')\ndef get_all_items_spaced(items):\n    '''\n    Write a function to return the items inbetween the spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '')\ndef get_all_items_parenthesis(items):\n    '''\n    Write a function to return the items inbetween the parenthesis from a string\n    '''\n    if items == '':\n        return ''\n    elif items == ')':\n        return ''\n    elif items == ')()':\n        return ''\n    elif items == '()()':\n        return ''\n    elif items == '(()':\n        return ''\n    else:\n        return items.replace('(', '').replace(')', '')\ndef get_all_items_extra_spaces(items):\n    '''\n    Write a function to return the items inbetween the extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '').replace('(', '').replace(')', '')\ndef get_all_items_extra_spaces_parenthesis(items):\n    '''\n    Write a function to return the items inbetween the extra spaces and parenthesis from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '').replace('(', '').replace(')', '')\ndef get_all_items_spaced_and_parenthesis(items):\n    '''\n    Write a function to return the items inbetween the spaces, parenthesis and extra spaces from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '').replace('(', '').replace(')', '')\ndef get_all_items_extra_spaces_and_parenthesis(items):\n    '''\n    Write a function to return the items inbetween the extra spaces and parenthesis from a string\n    '''\n    if items == '':\n        return ''\n    else:\n        return items.replace(' ', '').replace('(', '').replace(')', '').replace('(', '').replace(')', '')\ndef get_spaced_item_count(items):\n    '''\n    Write a function to return the number of spaces in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count(' ')\ndef get_parenthesis_item_count(items):\n    '''\n    Write a function to return the number of parenthesis in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count('(')\ndef get_extra_spaces_item_count(items):\n    '''\n    Write a function to return the number of extra spaces in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count(' ')\ndef get_extra_spaces_parenthesis_item_count(items):\n    '''\n    Write a function to return the number of extra spaces and parenthesis in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count(' ')\ndef get_all_items_count(items):\n    '''\n    Write a function to return the number of items in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count(' ')\ndef get_all_items_spaced_count(items):\n    '''\n    Write a function to return the number of spaces in a string\n    '''\n    if items == '':\n        return 0\n    else:\n        return items.count(' ')\ndef get_al"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n+1)**2 + (n+1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n+1) * 2) + 1\n        \ndef replace_non_digits(s):\n    \"\"\"\n    Write a function replace_non_digits, which replaces all\n    non-digit characters with a space''\n    \"\"\"\n    for i in s:\n        if i.isdigit():\n            s = s.replace(i,'')\n    return s\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def non_diagonal(n):\n        return int(n*((n*(n-1))/2))\n    return non_diagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 3\n    if n == 2: return 5\n    if n == 3: return 7\n    return n * (n + 1) / 2 + n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # \n    if n<=1: \n        return 1 \n    else:\n        return n*(n-1)//2 \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n**(1/2) + 0.5)\n    \ndef non_diagonal(n): \n    '''\n    Write a function to find the nth nondiagonal number.\n    '''\n    return int(1 - (n**2 + 1)**(1/2))\n    \ndef n_spiral(n): \n    '''\n    Write a function to find the nth number in the sprial spiral.\n    '''\n    i = 1\n    for x in range(n):\n        for y in range(x):\n            print(i, end = \" \")\n            i += 1\n        print()\n        \n        for y in range(x-1, -1, -1):\n            print(i, end = \" \")\n            i += 1\n        print()\n    return\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if the given number is a palindrome or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 10 == 0:\n        return False\n    if n % 10!= 0 and n % 10 == 9:\n        return False\n    return is_palindrome(n//10)\n    \ndef n_to_num(n): \n    '''\n    Write a function to find the largest number from the list,\n    by adding the largest number to the smallest number.\n    '''\n    num_list = list(range(1,n+1))\n    num_list.sort(reverse = True)\n    \n    # print(num_list)\n    \n    # \n    # d = dict()\n    # for i in num_list:\n    #     d[i] = d.get(i, 0) + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     d[i] = d.get(i, 0) + 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # d = dict()\n    # for i in num_list:\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    d = {}\n    for i in num_list:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i in d:\n    #         d[i] = d[i] + 1\n    #     else:\n    #         d[i] = 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i in d:\n    #         d[i] = d[i] + 1\n    #     else:\n    #         d[i] = 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i in d:\n    #         d[i] = d[i] + 1\n    #     else:\n    #         d[i] = 1\n    # print(d)\n    \n    # d = dict()\n    # for i in range(1, n+1):\n    #     if i in d:\n    #         d[i] = d[i] + 1\n    #     else:\n    #         d[i] = 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i in d:\n    #         d[i] = d[i] + 1\n    #     else:\n    #         d[i] = 1\n    # print(d)\n    \n    # d = {}\n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n+1):\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] = d[i] + 1\n    # print(d)\n    \n    # for i in range(1, n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n\n    \n    \ndef two_shifted_grid_numbers(n):\n    '''\n    Write a function to find the nth shifted 2^n number.\n    '''\n    def get_shifted_number(x,i,t):\n        return (x + i*(1 << (t-1))) % (1 << t)\n    return get_shifted_number(n,0,5)\n    \n    \ndef nth_fibonacci(n):\n    '''\n    Write a function to find the nth number in the Fibonacci series.\n    '''\n    a,b = 0,1\n    while n > 0:\n        n -= 1\n        a, b = b, a + b\n    return a\n    \n    \ndef next_prime(n):\n    '''\n    Write a function to find the next prime number after n.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    if n == 1:\n        n += 1\n    while True:\n        n += 1\n        if is_prime(n):\n            break\n    return n\n    \n    \ndef next_prime2(n):\n    '''\n    Write a function to find the next prime number after n.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    if n == 1:\n        n += 1\n    x = True\n    i = 2\n    while x:\n        if is_prime(i):\n            x = False\n        i += 1\n    return i\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    x = True\n    i = 2\n    while i <= (n//2):\n        if n % i == 0:\n            x = False\n        i += 1\n    return x\n    \n    \ndef total_sum_of_odd_digits(n):\n    '''\n    Write a function to find the total sum of the digits in an integer after 5,7,9.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    if n <= 10:\n        return n\n    else:\n        return total_sum_of_odd_digits(n//10) + n%10\n    \n    \ndef is_prime_again(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    x = True\n    i = 2\n    while i <= (n//2):\n        if n % i == 0:\n            x = False\n        i += 1\n    return x\n    \n    \ndef is_prime_again2(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    x = True\n    i = 2\n    while i <= (n//2):\n        if n % i == 0:\n            x = False\n        i += 1\n    return x\n    \n    \ndef is_prime_again3(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    x = True\n    i = 2\n    while i <= (n//2):\n        if n % i == 0:\n            x = False\n        i += 1\n    return x\n    \n    \ndef is_prime_again4(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    x = True\n    i = 2\n    while i <= (n//2):\n        if n % i == 0:\n            x = False\n        i += 1\n    return x\n    \n    \ndef sum_of_primes(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again2(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again3(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again4(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again5(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again6(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a number greater than 1: '))\n    primes = []\n    for i in range(2,n):\n        x = True\n        for j in range(2,(i//2)+1):\n            if i%j == 0:\n                x = False\n                break\n        if x:\n            primes.append(i)\n    return sum(primes)\n    \n    \ndef sum_of_primes_again7(n):\n    '''\n    Write a function to find the sum of prime numbers upto a given number.\n    '''\n    while n <= 0:\n        n = int(input('enter a numbe"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i=1\n    while i<n:\n        i=i+1\n    return i*i+1"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = (n - 1) // 2\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    i = 0\n    while count < n:\n        count = count + 1\n        i = i + 1\n        if i == int(math.sqrt(n)) ** 2:\n            return i\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.split(\" \")\n    for i in range(len(text)):\n        if \"z\" in text[i]:\n            text[i] = text[i].replace(\"z\", \"\")\n            text[i] = \"z\" + text[i]\n    for i in range(len(text)):\n        if \"z\" in text[i]:\n            text[i] = text[i].replace(\"z\", \"\")\n            text[i] = \"z\" + text[i]\n    text = \" \".join(text)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_full(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_full_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_full_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_full_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_end_end_end_end_end_end_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z+|z+$',text)\n    return result\ndef text_match_wordz_start_end_end_end_en"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text.replace(text[0], \"\")\n    \n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text = text.replace(text[0], \"\")\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    if re.search(\"^z\", text):\n        return True\n    elif re.search(\"z$\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = re.findall('\\w+', text)\n    wordz = re.findall('z+', text)\n    if wordz:\n        if wordz[0]=='z' and wordz[-1]=='z' and len(wordz)==1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_case(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_padded_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only if the string has at least 3 characters.\n    '''\n    if len(text) >= 3:\n        if text.startswith(\"z\"):\n            return text\n    return \"\"\ndef text_match_wordz_middle_case(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n        else:\n            if i == \"z\" and len(new_split_string)!= 1:\n                new_split_string.append(\"z\")\n    new_text = \" \".join(new_split_string)\n    return new_text\ndef text_match_wordz_middle_case_start_end_end_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    split_string = text.split(\" \")\n    new_split_string = []\n    for i in split_string:\n        if i!= \"z\":\n            new_split_string.append(i)\n    "
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'\\bz\\b',text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    if re.search(r'^z\\b',text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(r'z$',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text.startswith(\"z\") or text.endswith(\"z\")):\n        return False\n    for i in range(0,len(text)-1):\n        if(text[i]==\"z\" and text[i+1]==\"z\"):\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r\"^[zZ]+[^zZ]+[zZ]\",text) and re.search(r\"[zZ]+[^zZ]+[zZ]$\",text):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' and text[-1] == 'z':\n        return False\n    else:\n        return True\n        \ndef text_match_wordz_beginning(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start of the word.\n    '''\n    if text[0] == 'z':\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the word.\n    '''\n    if text[-1] == 'z':\n        return True\n    else:\n        return False\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z' anywhere in the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_middle(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_middle_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_middle_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_middle_beginning_end(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_beginning_end(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_middle(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning_end(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning_beginning(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning_beginning_end(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning_end(text):\n    '''\n    Write a function that checks if the last word in a text is also the first word in the text.\n    '''\n    if text[-1] == text[0]:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_match_wordz_match_middle_match_beginning_beginning_end(text):\n    '''\n    Write a function that checks if the first word in a text is also the last word in the text.\n    '''\n    if text[0] == text[-1]:\n    "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = list(input)\n    print(arr)\n    arr.reverse()\n    print(arr)\n    return arr[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = []\n    i = 0\n    while(i < len(input)):\n        if(i == k):\n            break\n        l.append(input[i])\n        i+=1\n    return l\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Input Format : list of numbers\n    # Output Format : reverse array upto a given position\n    n = len(input) \n    if k >= n: \n        return input \n    for i in range(n-1, k-1, -1): \n        input[i], input[k] = input[k], input[i] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    left, right = 0, len(input)-1\n    while left <= right:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        temp = input[-1]\n        input.remove(temp)\n        input.append(temp)\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = []\n    n = len(input)\n    i = 0\n    while i<k:\n        l.append(input[n-1-i])\n        i+=1\n    while i<n:\n        l.append(input[i])\n        i+=1\n    return l\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        return\n    arr = input\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        while left <= right and arr[left] <= k:\n            left += 1\n        while left <= right and arr[right] > k:\n            right -= 1\n        if left > right:\n            break\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    res = []\n    for i in range(0,k):\n        res.append(input[i])\n    print(\"The reversed array is:\",res)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    # If k is smaller than n / 2, then k is smaller than the number of \n    # elements in the array.\n    if k < n // 2: \n        return input \n    else: \n        # If k is larger than n / 2, then reverse the first k positions and then reverse the rest of the array.\n        k = n - k \n        return (reverse_Array_Upto_K(input, k) + input[:k])[::-1] \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #returns a tuple\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_tup[6], test_tup[7], test_tup[8], test_tup[9], test_tup[10], test_tup[11], test_tup[12], test_tup[13], test_tup[14], test_tup[15], test_tup[16], test_tup[17], test_tup[18], test_tup[19], test_tup[20], test_tup[21], test_tup[22], test_tup[23], test_tup[24], test_tup[25], test_tup[26], test_tup[27], test_tup[28], test_tup[29], test_tup[30], test_tup[31], test_tup[32], test_tup[33], test_tup[34], test_tup[35], test_tup[36], test_tup[37], test_tup[38], test_tup[39], test_tup[40], test_tup[41], test_tup[42], test_tup[43], test_tup[44], test_tup[45], test_tup[46], test_tup[47], test_tup[48], test_tup[49], test_tup[50], test_tup[51], test_tup[52], test_tup[53], test_tup[54], test_tup[55], test_tup[56], test_tup[57], test_tup[58], test_tup[59], test_tup[60], test_tup[61], test_tup[62], test_tup[63], test_tup[64], test_tup[65], test_tup[66], test_tup[67], test_tup[68], test_tup[69], test_tup[70], test_tup[71], test_tup[72], test_tup[73], test_tup[74], test_tup[75], test_tup[76], test_tup[77], test_tup[78], test_tup[79], test_tup[80], test_tup[81], test_tup[82], test_tup[83], test_tup[84], test_tup[85], test_tup[86], test_tup[87], test_tup[88], test_tup[89], test_tup[90], test_tup[91], test_tup[92], test_tup[93], test_tup[94], test_tup[95], test_tup[96], test_tup[97], test_tup[98], test_tup[99], test_tup[100], test_tup[101], test_tup[102], test_tup[103], test_tup[104], test_tup[105], test_tup[106], test_tup[107], test_tup[108], test_tup[109], test_tup[110], test_tup[111], test_tup[112], test_tup[113], test_tup[114], test_tup[115], test_tup[116], test_tup[117], test_tup[118], test_tup[119], test_tup[120], test_tup[121], test_tup[122], test_tup[123], test_tup[124], test_tup[125], test_tup[126], test_tup[127], test_tup[128], test_tup[129], test_tup[130], test_tup[131], test_tup[132], test_tup[133], test_tup[134], test_tup[135], test_tup[136], test_tup[137], test_tup[138], test_tup[139], test_tup[140], test_tup[141], test_tup[142], test_tup[143], test_tup[144], test_tup[145], test_tup[146], test_tup[147], test_tup[148], test_tup[149], test_tup[150], test_tup[151], test_tup[152], test_tup[153], test_tup[154], test_tup[155], test_tup[156], test_tup[157], test_tup[158], test_tup[159], test_tup[160], test_tup[161], test_tup[162], test_tup[163], test_tup[164], test_tup[165], test_tup[166], test_tup[167], test_tup[168], test_tup[169], test_tup[170], test_tup[171], test_tup[172], test_tup[173], test_tup[174], test_tup[175], test_tup[176], test_tup[177], test_tup[178], test_tup[179], test_tup[180], test_tup[181], test_tup[182], test_tup[183], test_tup[184], test_tup[185], test_tup[186], test_tup[187], test_tup[188], test_tup[189], test_tup[190], test_tup[191], test_tup[192], test_tup[193], test_tup[194], test_tup[195], test_tup[196], test_tup[197], test_tup[198], test_tup[199], test_tup[200], test_tup[201], test_tup[202], test_tup[203], test_tup[204], test_tup[205], test_tup[206], test_tup[207], test_tup[208], test_tup[209], test_tup[210], test_tup[211], test_tup[212], test_tup[213], test_tup[214], test_tup[215], test_tup[216], test_tup[217], test_tup[218], test_tup[219], test_tup[220], test_tup[221], test_tup[222], test_tup[223], test_tup[224], test_tup[225], test_tup[226], test_tup[227], test_tup[228], test_tup[229], test_tup[230], test_tup[231], test_tup[232], test_tup[233], test_tup[234], test_tup[235], test_tup[236], test_tup[237], test_tup[238], test_tup[239], test_tup[240], test_tup[241], test_tup[242], test_tup[243], test_tup[244], test_tup[245], test_tup[246], test_tup[247], test_tup[248], test_tup[249], test_tup[250], test_tup[251], test_tup[252], test_tup[253], test_tup[254], test_tup[255], test_tup[256], test_tup[257], test_tup[258], test_tup[259], test_tup[260], test_tup[261], test_tup[262], test_tup[263], test_tup[264], test_tup[265], test_tup[266], test_tup[267], test_tup[268], test_tup[269], test_tup[270], test_tup[271], test_tup[272], test_tup[273], test_tup[274], test_tup[275], test_tup[276], test_tup[277], test_tup[278], test_tup[279], test_tup[280], test_tup[281], test_tup[282], test_tup[283], test"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.items()))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0],test_tup[1],test_tup[2],test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    final_tuple = test_tup + (test_dict, )\n    return final_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    temp_tup = ()\n    for item in test_tup:\n        temp_tup = temp_tup + (item, )\n    temp_tup = temp_tup + (test_dict, )\n    return temp_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    m = len(cost[0])\n    \n    # Calculate the maximum amount of average\n    # that can be achieved for the path\n    max_avg = -1\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                cost[i][j] += cost[i][j+1]\n            elif i == 0:\n                cost[i][j] += cost[i+1][j]\n            else:\n                cost[i][j] += max(cost[i-1][j], cost[i][j-1])\n            \n            max_avg = max(max_avg, cost[i][j])\n            \n    print(\"Maximum average possible is \" + str(max_avg))\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # the key idea here is to use a divide and conquer approach to find the optimal path\n    # first, sort the rows\n    for i in range(0,len(cost)):\n        cost[i].sort()\n    # we are going to recursively try all possible paths\n    # if we find a path that adds the rightmost row, we have a path\n    def max_average(rows,i,j,row,answer):\n        # if we reach the bottom of the matrix, we have a path\n        if i==rows-1 and j==rows-1:\n            # return the total cost of the path\n            return (answer[0]+cost[row][j])/len(answer)\n        # if we reach the end of one of the rows, we have a path\n        if i==rows-1:\n            return max_average(rows,i+1,j,row+1,answer+[cost[row][j]])\n        # if we reach the end of the column, we have a path\n        if j==rows-1:\n            return max_average(rows,i,j+1,row,answer+[cost[row][j]])\n        # otherwise, we have a path\n        return max(max_average(rows,i,j+1,row,answer+[cost[row][j]]),max_average(rows,i+1,j,row,answer+[cost[row][j]]))\n    # initialize the answer to the bottom right cell\n    ans=max_average(len(cost),0,0,0,[])\n    # return the answer\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i - 1][j - 1] + max(dp[i][j - 1], dp[i - 1][j])\n    return (sum(dp[-1]) / len(dp[-1]))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # create a max heap that stores the paths with their average\n    \n    # create a dp array that stores the number of cells that have been traversed in a path\n    dp = [[0 for i in range(N)] for i in range(N)]\n    \n    # Initialize the first element as -infinity so that later we can just do +infinity\n    dp[0][0] = -float('inf')\n    # We need to have the maximum value for the initial path, so initialize it to 0\n    maxVal = 0\n    \n    # We need to keep track of the previous cell and its value to get the cumulative average of the path\n    prevCell = [-1, -1]\n    \n    for i in range(N):\n        for j in range(N):\n            if (i == N-1 and j == N-1):\n                dp[i][j] = 0\n                continue\n            if (i == N-1):\n                dp[i][j] = -float('inf')\n                continue\n            if (j == N-1):\n                dp[i][j] = -float('inf')\n                continue\n            \n            # We can get the current cell value by adding the current cell and the prev cell values.\n            # We can also get the cumulative average by adding the current cell to the cumulative average and also adding the cost\n            # to the value of the cumulative average\n            dp[i][j] = dp[i][j] + cost[i][j]\n            \n            # First, find the maximum average across all paths\n            maxVal = max(maxVal, dp[i][j] / dp[prevCell[0]][prevCell[1]])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            # i.e., find the maximum average of the paths that start from the current cell and goes down.\n            \n            # First, find the minimum cost for a path going down, i.e., the minimum cost that we can go down without passing through the current cell\n            minCost = float('inf')\n            if i < N-1:\n                minCost = min(minCost, dp[i+1][j])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            maxVal = max(maxVal, (dp[i][j] - minCost) / dp[prevCell[0]][prevCell[1]])\n            \n            # We need to check if we are at the last cell in the matrix\n            if j == N-1:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i][j] - cost[i][j]\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            # i.e., find the maximum average of the paths that start from the current cell and goes right.\n            \n            # First, find the minimum cost for a path going right, i.e., the minimum cost that we can go right without passing through the current cell\n            minCost = float('inf')\n            if j < N-1:\n                minCost = min(minCost, dp[i][j+1])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            maxVal = max(maxVal, (dp[i][j] - minCost) / dp[prevCell[0]][prevCell[1]])\n            \n            # Now, if we are at the last cell in the matrix, we don't need to do anything here\n            # We can just skip the bottom right cell and continue with the next matrix\n            if i == N-1 and j == N-1:\n                continue\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            # i.e., find the maximum average of the paths that start from the current cell and goes right\n            \n            # First, find the minimum cost for a path going right, i.e., the minimum cost that we can go right without passing through the current cell\n            minCost = float('inf')\n            if j < N-1:\n                minCost = min(minCost, dp[i][j+1])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            maxVal = max(maxVal, (dp[i][j] - minCost) / dp[prevCell[0]][prevCell[1]])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            # i.e., find the maximum average of the paths that start from the current cell and goes left.\n            \n            # First, find the minimum cost for a path going left, i.e., the minimum cost that we can go left without passing through the current cell\n            minCost = float('inf')\n            if j > 0:\n                minCost = min(minCost, dp[i][j-1])\n            \n            # Now, find the maximum average among all paths with only change in the current cell\n            maxVal = max(maxVal, (dp[i][j] - minCost) / dp[prevCell[0]][prevCell[1]])\n            \n            prevCell = [i, j]\n    \n    # Check if we have any paths with the maximum average\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > 0:\n                maxVal = max(maxVal, (dp[i][j] - dp[prevCell[0]][prevCell[1]]) / dp[prevCell[0]][prevCell[1]])\n    \n    return maxVal\n    \nif __name__ == '__main__':\n    matrix = [\n            [ 1, 10, 20, -1, -1, -1],\n            [11, -1, -1, -1, 30, -1],\n            [12, -1, -1, 20, -1, -1],\n            [13, -1, -1, -1, 20, -1],\n            [14, -1, -1, -1, -1, 20],\n            [15, -1, -1, -1, -1, -1]\n        ]\n    print maxAverageOfPath(matrix)\n    \n    matrix = [\n            [1, 10, 20, -1, -1, -1],\n            [11, -1, -1, -1, 30, -1],\n            [12, -1, -1, 20, -1, -1],\n            [13, -1, -1, -1, 20, -1],\n            [14, -1, -1, -1, -1, 20],\n            [15, -1, -1, -1, -1, -1]\n        ]\n    print maxAverageOfPath(matrix)\n    \n    matrix = [\n            [1, 10, 20, -1, -1, -1],\n            [11, -1, -1, -1, 30, -1],\n            [12, -1, -1, 20, -1, -1],\n            [13, -1, -1, -1, 20, -1],\n            [14, -1, -1, -1, -1, 20],\n            [15, -1, -1, -1, -1, -1]\n        ]\n    print maxAverageOfPath(matrix)\n    \n    matrix = [\n            [1, 10, 20, -1, -1, -1],\n            [11, -1, -1, -1, 30, -1],\n            [12, -1, -1, 20, -1, -1],\n            [13, -1, -1, -1, 20, -1],\n            [14, -1, -1, -1, -1, 20],\n            [15, -1, -1, -1, -1, -1]\n        ]\n    print maxAverageOfPath(matrix)\n    \n    matrix = [\n            [1, -1, -1],\n            [2, -1, -1],\n            [3, -1, -1]\n        ]\n    print maxAverageOfPath(matrix)\n    \n    matrix "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    max_path = -1\n    n = len(cost)\n    # Initialize dictionary to store the sum of path\n    # along with their count\n    path_sum_count = {}\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                cost[i][j] += cost[i][j-1]\n            elif j == 0:\n                cost[i][j] += cost[i-1][j]\n            else:\n                cost[i][j] = cost[i][j] + max(cost[i-1][j], cost[i][j-1])\n    print(cost[m-1][n-1]/len(cost[0]))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost is None or cost == []:\n        return 0\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = cost[i][j]\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n    res = dp[n-1][n-1]\n    print(dp)\n    return res\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    ans = float('-inf')\n    \n    # Base case\n    if n == 0:\n        return 0\n    \n    # Initialize dp table\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # For cell (0, 0), only two paths exist.\n    # Path 1 : Down + Right\n    # Path 2 : Down + Left\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = cost[i][j]\n                continue\n            if i == 0:\n                # Left and Right paths\n                dp[i][j] = cost[i][j] + dp[i][j + 1] + dp[i + 1][j]\n            elif j == 0:\n                # Up and Down paths\n                dp[i][j] = cost[i][j] + dp[i - 1][j] + dp[i][j + 1]\n            else:\n                # Up and Left paths\n                dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n            \n    ans = max(ans, sum(dp[i]) / len(dp[i]))\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Logic: for every node, check if we have an existing path on the grid by checking if that node is in the 'visited' set. If yes, update the min_average and add the new node to the existing path. If no, create a new set with the current node as its only item and add it to the set.\n    # Time O(N^2) | Space O(N)\n    \n    visited = set()\n    min_average = 0\n    \n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            if (i, j) in visited:\n                min_average = max(min_average, cost[i][j] / (len(visited) + 1))\n            else:\n                visited.add((i, j))\n                min_average = max(min_average, cost[i][j] / len(visited))\n    \n    return min_average\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    if n==1: return cost[0][0]\n    paths = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        paths[i][i]=cost[i][i]\n    \n    for i in range(1,n):\n        for j in range(i,n):\n            paths[i][j] = costs[i][j] + min(paths[i-1][j], paths[i][j-1])\n    \n    return int(paths[-1][-1]/n)\n    \n    \n    \ndef findPath(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    path = [end]\n    i=j=0\n    \n    while i<n or j<n:\n        if i<n and j<n:\n            if cost[path[-1]][i]<cost[path[-1]][j]:\n                path.append(i)\n                i+=1\n            else:\n                path.append(j)\n                j+=1\n        else:\n            if i==n:\n                path.append(j)\n                j+=1\n            else:\n                path.append(i)\n                i+=1\n    \n    return int(sum(cost[path[i]][path[i+1]] for i in range(len(path)-1))/len(path))\n    \n    \n    \ndef findPathRecursive(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    path = [end]\n    i=j=0\n    \n    while i<n or j<n:\n        if i<n and j<n:\n            if cost[path[-1]][i]<cost[path[-1]][j]:\n                path.append(i)\n                i+=1\n            else:\n                path.append(j)\n                j+=1\n        else:\n            if i==n:\n                path.append(j)\n                j+=1\n            else:\n                path.append(i)\n                i+=1\n    \n    return int(sum(cost[path[i]][path[i+1]] for i in range(len(path)-1))/len(path))\n    \n    \n    \ndef findPathRecursive2(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    path = []\n    i=j=0\n    \n    while i<n or j<n:\n        if i<n and j<n:\n            if cost[path[-1]][i]<cost[path[-1]][j]:\n                path.append(i)\n                i+=1\n            else:\n                path.append(j)\n                j+=1\n        else:\n            if i==n:\n                path.append(j)\n                j+=1\n            else:\n                path.append(i)\n                i+=1\n    \n    return int(sum(cost[path[i]][path[i+1]] for i in range(len(path)-1))/len(path))\n    \n    \n    \ndef findPathRecursive3(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    path = []\n    i=j=0\n    \n    while i<n or j<n:\n        if i<n and j<n:\n            if cost[path[-1]][i]<cost[path[-1]][j]:\n                path.append(i)\n                i+=1\n            else:\n                path.append(j)\n                j+=1\n        else:\n            if i==n:\n                path.append(j)\n                j+=1\n            else:\n                path.append(i)\n                i+=1\n    \n    i=j=0\n    paths = [[0]*n for _ in range(n)]\n    while i<n:\n        paths[i][i]=cost[i][i]\n        j=i+1\n        while j<n:\n            paths[i][j] = costs[i][j] + min(paths[i-1][j], paths[i][j-1])\n            j+=1\n        i+=1\n    \n    return int(sum(cost[path[i]][path[i+1]] for i in range(len(path)-1))/len(path))\n    \n    \n    \ndef findPathRecursive4(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    path = []\n    i=j=0\n    \n    while i<n or j<n:\n        if i<n and j<n:\n            if cost[path[-1]][i]<cost[path[-1]][j]:\n                path.append(i)\n                i+=1\n            else:\n                path.append(j)\n                j+=1\n        else:\n            if i==n:\n                path.append(j)\n                j+=1\n            else:\n                path.append(i)\n                i+=1\n    \n    i=j=0\n    paths = [[0]*n for _ in range(n)]\n    while i<n:\n        paths[i][i]=cost[i][i]\n        j=i+1\n        while j<n:\n            paths[i][j] = costs[i][j] + min(paths[i-1][j], paths[i][j-1])\n            j+=1\n        i+=1\n    \n    i=j=0\n    while i<n:\n        paths[i][j] = costs[i][j] + min(paths[i-1][j], paths[i][j-1])\n        i+=1\n        j+=1\n    \n    return int(sum(cost[path[i]][path[i+1]] for i in range(len(path)-1))/len(path))\n    \n    \n    \ndef findPathRecursive5(cost, start, end):\n    '''\n    Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-lef"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #  loop over all the entries of the dictionary and check if the student_weight and student_height is greater than the min weight and height\n    # filter_dictionary = {}\n    # for name,student_info in students.items():\n    #     h,w = student_info[0], student_info[1]\n    #     if h >= h and w >= w:\n    #         filter_dictionary[name] = student_info\n    # return filter_dictionary\n    filtered_dictionary = {}\n    for name,student_info in students.items():\n        h,w = student_info[0], student_info[1]\n        if h >= h and w >= w:\n            filtered_dictionary[name] = student_info\n    return filtered_dictionary\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data_ = {}\n    for key, val in students.items():\n        if val[0]>h and val[1]>w:\n            filter_data_[key] = val\n    return filter_data_\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {name: value for name, value in students.items() if value[0] > h and value[1] > w}\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students=[]\n    for student in students:\n        if h>=student[0] and w>=student[1]:\n            new_students.append(student)\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dic = {}\n    for name in students:\n        new_dic[name] = (students[name][0], students[name][1])\n    new_dic2 = {}\n    for name in new_dic:\n        if new_dic[name][0] >= h and new_dic[name][1] >= w:\n            new_dic2[name] = new_dic[name]\n    return new_dic2\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student_name,(height,weight) in students.items():\n        if height<=h and weight<=w:\n            print(student_name,end=',')\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {name : (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    l=[]\n    for name,tup in students.items():\n        if(tup[0]>h and tup[1]>w):\n            l.append(name)\n    return l\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data_list = []\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            data_list.append(key)\n    return data_list"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filtering student with height and weight above the min height and weight \n    students_with_minimal_height_and_weight = {}\n    for name in students:\n        #print(students[name])\n        if students[name][0] > h and students[name][1] > w:\n            students_with_minimal_height_and_weight[name] = students[name]\n    #print(students_with_minimal_height_and_weight)\n    return students_with_minimal_height_and_weight\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return nums1.count(nums2[0]), nums2.count(nums1[0])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_map = {}\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] not in nums1_map:\n            nums1_map[nums1[i]] = 1\n        else:\n            nums1_map[nums1[i]] += 1\n    for i in range(len(nums2)):\n        if nums2[i] in nums1_map and nums2[i]!= nums1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    return sum([1 for i in range(len(nums1)) if nums1[i] == nums2[i]])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # '''\n    # The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Input List\n    # nums1 = list(map(int, input().strip().split()))\n    # nums2 = list(map(int, input().strip().split()))\n    nums1_indices = []\n    nums2_indices = []\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    print('testing 1')\n    count = 0\n    if len(nums1)!= len(nums2):\n        return count\n    else:\n        for x in range(len(nums1)):\n            if nums1[x] == nums2[x]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # return len([x for x in zip(nums1, nums2) if x[0] == x[1]])\n    res = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # loop through base\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=17\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=25\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=26\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=27\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=28\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=29\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=30\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=31\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=32\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=33\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=34\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=35\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=36\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=37\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=38\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=39\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=40\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=41\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=42\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=43\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=44\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=45\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=46\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=47\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=48\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=49\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=50\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=51\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=52\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=53\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=54\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=55\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=56\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=57\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=58\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=59\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=60\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=61\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=62\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=63\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=64\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=65\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=66\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=67\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=68\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=69\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=70\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=71\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=72\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=73\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=74\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=75\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=76\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=77\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=78\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=79\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=80\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=81\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=82\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=83\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=84\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=85\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=86\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=87\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=88\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=89\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=90\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=91\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=92\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=93\n    # power = 5\n    # base = 22\n    # add = 2+3+4+5+6=94\n    # power = 5\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    power = -power if power < 0 else power\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    digits = 0\n    \n    while True:\n        base = base * 10\n        digits += 1\n        \n        if digits == power:\n            result += base\n            break\n        \n        result += base % 10\n        base = base // 10\n        \n        if base == 0:\n            break\n    \n    return result\n    \n    \nprint(power_base_sum(1234, 2))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for i in range(power):\n        power_sum += base\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power == 0:\n        return 0\n    while power!= 0:\n        sum += (base % 10)\n        base //= 10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return \"ERROR: power < 0\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base*power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    i = 0\n    while (i < power):\n        result = result + base**i\n        i = i + 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(n) for n in str(base**power)])\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return text1[text1.index('\"')+1:text1.index('\"')+1+text1[text1.index('\"')+1:].index('\"')]\ndef extract_whitespace(text1):\n    '''\n    Write a function to extract values between whitespace characters.\n    '''\n    return text1[text1.index(' ')+1:text1.index(' ')+1+text1[text1.index(' ')+1:].index(' ')]\ndef extract_email(text1):\n    '''\n    Write a function to extract email addresses of the given text.\n    '''\n    res = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text1)\n    return res\ndef extract_url(text1):\n    '''\n    Write a function to extract URLs of the given text.\n    '''\n    res = re.findall(r'[a-z0-9]+://[^\\s]+', text1)\n    return res\ndef extract_IP_address(text1):\n    '''\n    Write a function to extract IP addresses of the given text.\n    '''\n    res = re.findall(r'[0-9]+(?:\\.[0-9]+){3}', text1)\n    return res\ndef extract_mac_address(text1):\n    '''\n    Write a function to extract MAC addresses of the given text.\n    '''\n    res = re.findall(r'[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}', text1)\n    return res\ndef extract_name(text1):\n    '''\n    Write a function to extract person's names of the given text.\n    '''\n    res = re.findall(r'[^ ]+', text1)\n    return res\ndef extract_phone_number(text1):\n    '''\n    Write a function to extract phone numbers of the given text.\n    '''\n    res = re.findall(r'[0-9]{3}-[0-9]{3}-[0-9]{4}', text1)\n    return res\ndef extract_emails_and_urls(text1):\n    '''\n    Write a function to extract emails and urls of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    return res\ndef extract_ip_addresses(text1):\n    '''\n    Write a function to extract IP addresses of the given text.\n    '''\n    res = re.findall(r'[0-9]+(?:\\.[0-9]+){3}', text1)\n    return res\ndef extract_mac_addresses(text1):\n    '''\n    Write a function to extract MAC addresses of the given text.\n    '''\n    res = re.findall(r'[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}', text1)\n    return res\ndef extract_emails_and_mac_addresses(text1):\n    '''\n    Write a function to extract emails and MAC addresses of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    res1 = re.findall(r'[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}', text1)\n    return res + res1\ndef extract_emails_and_names(text1):\n    '''\n    Write a function to extract emails and person's names of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    res1 = re.findall(r'[^ ]+', text1)\n    return res + res1\ndef extract_emails_and_urls(text1):\n    '''\n    Write a function to extract emails and urls of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    res1 = re.findall(r'[0-9]{3}-[0-9]{3}-[0-9]{4}', text1)\n    return res + res1\ndef extract_emails_and_urls_and_mac_addresses(text1):\n    '''\n    Write a function to extract emails and urls of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    res1 = re.findall(r'[0-9]{3}-[0-9]{3}-[0-9]{4}', text1)\n    res2 = re.findall(r'[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}', text1)\n    return res + res1 + res2\ndef extract_emails_and_urls_and_ip_addresses(text1):\n    '''\n    Write a function to extract emails and urls of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    res1 = re.findall(r'[0-9]{3}-[0-9]{3}-[0-9]{4}', text1)\n    res2 = re.findall(r'[0-9]+(?:\\.[0-9]+){3}', text1)\n    return res + res1 + res2\ndef extract_names(text1):\n    '''\n    Write a function to extract names of the given text.\n    '''\n    res = re.findall(r'[^ ]+', text1)\n    return res\ndef extract_emails(text1):\n    '''\n    Write a function to extract emails of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text1)\n    return res\ndef extract_URLs(text1):\n    '''\n    Write a function to extract URLs of the given text.\n    '''\n    res = re.findall(r'[a-zA-Z0-9_.+-]+://[^\\s]+', text1)\n    return res\ndef extract_IP_addresses(text1):\n    '''\n    Write a function to extract IP addresses of the given text.\n    '''\n    res = re.findall(r'[0-9]+(?:\\.[0-9]+){3}', text1)\n    return res\ndef extract_mac_addresses(text"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\\"\")\n    match = pattern.search(text1)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text1 = text1[start_quote:end_quote]\n        print(text1)\n        return text1\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_quotation_multiple(text2):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\\"\")\n    match = pattern.findall(text2)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text2 = text2[start_quote:end_quote]\n        print(text2)\n        return text2\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_numerical_value_list(text3):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\d\")\n    match = pattern.findall(text3)\n    if match:\n        print(match)\n        return match\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_numerical_value(text4):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\d\")\n    match = pattern.search(text4)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text4 = text4[start_quote:end_quote]\n        print(text4)\n        return text4\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_numerical_value_multiple(text5):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\d\")\n    match = pattern.findall(text5)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text5 = text5[start_quote:end_quote]\n        print(text5)\n        return text5\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_character_value(text6):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"[^\\w]\")\n    match = pattern.search(text6)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text6 = text6[start_quote:end_quote]\n        print(text6)\n        return text6\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_character_value_multiple(text7):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"[^\\w]\")\n    match = pattern.findall(text7)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text7 = text7[start_quote:end_quote]\n        print(text7)\n        return text7\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_single_quotation_character(text8):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\\"\")\n    match = pattern.search(text8)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text8 = text8[start_quote:end_quote]\n        print(text8)\n        return text8\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_single_quotation_character_multiple(text9):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\\"\")\n    match = pattern.findall(text9)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text9 = text9[start_quote:end_quote]\n        print(text9)\n        return text9\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_dot_character(text10):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\.\")\n    match = pattern.search(text10)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text10 = text10[start_quote:end_quote]\n        print(text10)\n        return text10\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_dot_character_multiple(text11):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"\\.\")\n    match = pattern.findall(text11)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text11 = text11[start_quote:end_quote]\n        print(text11)\n        return text11\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_hyphen_character(text12):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"-\")\n    match = pattern.search(text12)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text12 = text12[start_quote:end_quote]\n        print(text12)\n        return text12\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_hyphen_character_multiple(text13):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"-\")\n    match = pattern.findall(text13)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text13 = text13[start_quote:end_quote]\n        print(text13)\n        return text13\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_single_character(text14):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"'\")\n    match = pattern.search(text14)\n    if match:\n        start_quote = match.start()\n        end_quote = match.end()\n        text14 = text14[start_quote:end_quote]\n        print(text14)\n        return text14\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_single_character_multiple(text15):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"'\")\n    match = pattern.findall(text15)\n    if match:\n        start_quote = match[0]\n        end_quote = match[len(match)-1]\n        text15 = text15[start_quote:end_quote]\n        print(text15)\n        return text15\n    else:\n        print(\"No value in the string!\")\n        return None\ndef extract_single_quote_character(text16):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_check = re.findall(r'\\\"[^\"]*\\\"', text1)\n    if quotation_check:\n        for i in range(len(quotation_check)):\n            quotation_check[i] = quotation_check[i].replace('\\\"', '')\n        quotation_check = list(set(quotation_check))\n        return quotation_check\n    else:\n        return []\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(text1)\n    regex = re.compile('\"(.*)\"')\n    quotation_index = re.findall(regex, text1)\n    print(quotation_index)\n    for i in range(len(quotation_index)):\n        if quotation_index[i] == \"\":\n            print(i)\n            del quotation_index[i]\n        else:\n            if quotation_index[i-1] == \"\":\n                del quotation_index[i-1]\n    print(quotation_index)\n    return quotation_index\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex_string = r'\\\"(.*?)\\\"'\n    return re.findall(regex_string, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string = text1\n    output_list = re.findall('\"(.+?)\"', string)\n    return output_list\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks = re.findall(r\"\\\"(.*?)\\\"\", text1)\n    return quotation_marks\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.lower()\n    new_text = text.replace('\"','')\n    new_text = new_text.replace('.','')\n    text = new_text.split(' ')\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"[a-zA-Z ]*\"')\n    return pattern.findall(text1)\n    \n    \ndef extract_date(text1):\n    '''\n    Write a function to extract values between parentheses \"()\" of the given string.\n    '''\n    pattern = re.compile(r'\\([0-9 ]*\\)')\n    return pattern.findall(text1)\n    \n    \ndef extract_numbers(text1):\n    '''\n    Write a function to extract values between parentheses \"()\" of the given string.\n    '''\n    pattern = re.compile(r'\\([0-9 ]*\\)')\n    return pattern.findall(text1)\n    \n    \ndef extract_location(text1):\n    '''\n    Write a function to extract values between parentheses \"()\" of the given string.\n    '''\n    pattern = re.compile(r'\\([a-zA-Z ]*\\)')\n    return pattern.findall(text1)\n    \n    \ndef extract_location_coordinates(text1):\n    '''\n    Write a function to extract location coordinates from the given string. \n    '''\n    pattern = re.compile(r'\\((\\d+\\.?\\d*),\\s*(\\d+\\.?\\d*)\\)')\n    return pattern.findall(text1)\n    \n    \ndef extract_url(text1):\n    '''\n    Write a function to extract urls from the given string. \n    '''\n    pattern = re.compile(r'https?://[a-zA-Z]+.[a-zA-Z]+/')\n    return pattern.findall(text1)\n    \n    \ndef extract_html_elements(text1):\n    '''\n    Write a function to extract html elements from the given string.\n    '''\n    pattern = re.compile(r'<[a-zA-Z]+[^>]*>')\n    return pattern.findall(text1)\n    \n    \ndef extract_emails(text1):\n    '''\n    Write a function to extract emails from the given string.\n    '''\n    pattern = re.compile(r'[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+')\n    return pattern.findall(text1)\n    \n    \ndef extract_phone_numbers(text1):\n    '''\n    Write a function to extract phone numbers from the given string. \n    '''\n    pattern = re.compile(r'(?:(?:\\+?([1-9]|[0-9][0-9]|[0-9][0-9][0-9])\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([0-9][1-9]|[0-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?')\n    return pattern.findall(text1)\n    \n    \ndef extract_name_from_text(text1):\n    '''\n    Write a function to extract name from the given string. \n    '''\n    pattern = re.compile(r'(?<=\\n)(?=(?:[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_names(text1):\n    '''\n    Write a function to extract name from the given string. \n    '''\n    pattern = re.compile(r'(?<=\\n)(?=(?:[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_country_codes(text1):\n    '''\n    Write a function to extract country codes from the given string. \n    '''\n    pattern = re.compile(r'(?<=\\n)(?=(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_country_names(text1):\n    '''\n    Write a function to extract country names from the given string. \n    '''\n    pattern = re.compile(r'(?<=\\n)(?=(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_phone_numbers_country_code(text1):\n    '''\n    Write a function to extract phone numbers, country codes and country names from the given string.\n    '''\n    pattern = re.compile(r'(\\+?([1-9]|[0-9][0-9]|[0-9][0-9][0-9])\\s*(?:[.-]\\s*)?)(?=(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_phone_numbers_country_names(text1):\n    '''\n    Write a function to extract phone numbers, country codes and country names from the given string.\n    '''\n    pattern = re.compile(r'(\\+?([1-9]|[0-9][0-9]|[0-9][0-9][0-9])\\s*(?:[.-]\\s*)?)(?=(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z])|\\n|(?:[0-9]{2}[ ]*[a-z][a-z]+[ ]*[a-z][a-z]+[ ]*[a-z]\\s*))')\n    return pattern.findall(text1)\n    \n    \ndef extract_urls(text1):\n    '''\n    Write a function to extract urls from the given string. \n    '''\n    pattern = re.compile(r'(http[s]?://(?:[a-zA-Z]|[0-"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    a=[]\n    #print(text1)\n    for i in range(len(text1)):\n        #print(text1[i])\n        if text1[i]=='\"':\n            #print(text1[i+1:i+3])\n            a.append(text1[i+1:i+3])\n    \n    return a\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = tuple(i*(i+1) for i in range(len(test_tup)-1)) + (test_tup[-1],)\n    return a\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tuple = ()\n    for i in range(len(test_tup)-1):\n        mult_tuple += (test_tup[i] * test_tup[i+1], )\n    return mult_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code here\n    result = (t_1 * t_2 for t_1, t_2 in zip(test_tup, test_tup[1:]))\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple(t_i * (t_i + 1) for t_i in t)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(n * (n+1) for n in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup!= tuple:\n        print(\"The input must be a tuple!\")\n        return ()\n    if len(test_tup) < 2:\n        print(\"The tuple must be at least 2 elements long!\")\n        return ()\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * (i + 1))\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t+1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x*(x+1) for x in test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_of_list = []\n    sum_of_list = lst1 + lst2\n    print(sum_of_list)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return(lst1 + lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    l = []\n    for i in range(0,len(lst1)):\n        l.append(lst1[i] + lst2[i])\n    return l\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) > len(lst2):\n        return sum_list(lst2,lst1)\n    if len(lst2) > len(lst1):\n        return sum_list(lst1,lst2)\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    if lst1[0] == lst2[0]:\n        return [lst1[0] + lst2[0]] + sum_list(lst1[1:],lst2[1:])\n    else:\n        return sum_list(lst1[1:],lst2)\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result=[]\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #initialize empty list\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #res = []\n    #res = []\n    #res = []\n    #print(len(res))\n    #for i in range(len(nums)):\n    #    if i == len(nums)-1:\n    #        break\n    #    if nums[i] == nums[i+1]:\n    #        res.append(nums[i])\n    #        continue\n    #    else:\n    #        res.append(nums[i])\n    #print(len(res))\n    #print(res)\n    #print(len(res))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    mylist = list(nums)\n    for i, j in groupby(mylist):\n        mylist = [val for val in mylist if val not in j]\n    return mylist\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in range(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            pass\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for item, group in groupby(nums):\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # nums = [1, 1, 1]\n    # print(groupby(nums))\n    # print(list(groupby(nums)))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #concatenate and sort the list\n    sorted_list = sorted(nums)\n    #find the consecutive duplicates\n    for index, item in groupby(sorted_list):\n        #remove consecutive duplicates\n        if index:\n            # return the non-consecutive list\n            return sorted_list[index[0]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # O(n) time | O(n) space\n    return [min(x) for x in list(groupby(nums))]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(nums):\n        res.append(next(g))\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    for i in nums:\n        if i in s:\n            s.remove(i)\n        else:\n            s.add(i)\n    return list(s)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*(h/2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfaceArea = math.pi * r ** 2 * (h/2) ** 2\n    return surfaceArea\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=2*math.pi*r*h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #case 1\n    if h==0:\n        return r**2\n    #case 2\n    elif r==0:\n        return math.pi*h*2\n    #case 3\n    elif r>0 and h==0:\n        return math.pi*(r**2)\n    #case 4\n    elif r==0 and h>0:\n        return (r**2)*(h**2)\n    #case 5\n    else:\n        return math.pi*(r**2)+(math.pi/3)*(math.pi*r**2)-(math.pi/4)*(math.pi*(r**2)*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2*h)/3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.pi*r**2/2\n    area = 2*math.pi*r*h\n    print(area)\n    print(a)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #initialize\n    s = 2*math.pi*r*(r**2+h**2)\n    #s = r*h*math.pi\n    return s\ndef surfacearea(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given the sides a, b, and c.\n    '''\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef surfacearea_circuit(r):\n    '''\n    Write a function to find the surface area of a circular loop given the radius r.\n    '''\n    #initialize\n    s = math.pi*(r**2)\n    return s\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle given the radius r.\n    '''\n    #initialize\n    s = math.pi*r**2\n    return s\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length a and the width b.\n    '''\n    #initialize\n    s = 2*a*b\n    return s\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square given the length of the square.\n    '''\n    #initialize\n    s = 4*a\n    return s\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle given the length a and the width b.\n    '''\n    #initialize\n    s = 2*(a+b)\n    return s\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square given the length of the square.\n    '''\n    #initialize\n    s = 4*a\n    return s\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle given the radius r.\n    '''\n    #initialize\n    s = math.pi*2*r\n    return s\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_square_sides(a,b):\n    '''\n    Write a function to find the perimeter of a square given the length of the square and the length of one of its sides.\n    '''\n    #initialize\n    s = 2*(a+b)\n    return s\ndef perimeter_square_one_sides(a):\n    '''\n    Write a function to find the perimeter of a square given the length of the square and the length of one of its sides.\n    '''\n    #initialize\n    s = 4*a\n    return s\ndef square_sides(a,b):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the lengths of the two legs.\n    '''\n    #initialize\n    s = math.sqrt(a**2+b**2)\n    return s\ndef square_one_sides(a):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the length of one leg.\n    '''\n    #initialize\n    s = math.sqrt(a**2+b**2)\n    return s\ndef length_right_triangle(a,b):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the lengths of the two legs.\n    '''\n    #initialize\n    s = 0.5*a*b\n    return s\ndef length_right_triangle_one_leg(a):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the length of one leg.\n    '''\n    #initialize\n    s = 0.5*a\n    return s\ndef square_one_sides_sides(a,b):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the lengths of the two legs.\n    '''\n    #initialize\n    s = math.sqrt(a**2+b**2)\n    return s\ndef square_sides_sides(a,b):\n    '''\n    Write a function to find the length of the hypotenuse of a right-angled triangle given the lengths of the two legs.\n    '''\n    #initialize\n    s = math.sqrt(a**2+b**2)\n    return s\ndef perimeter_triangle_left(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_triangle_left_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_triangle_left_sides_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_triangle_right(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_triangle_right_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef perimeter_triangle_right_sides_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given the three sides a, b, and c.\n    '''\n    #initialize\n    s = 0.5*abs(a*b*c)*math.sqrt((a**2+b**2)+(b**2+c**2)+(c**2+a**2))\n    return s\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given the length a and the width b.\n    '''\n    #initialize\n    s = a*b\n    return s\ndef area_rectangle_sides(a,b):\n    '''\n    Writ"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    theta = (math.pi / 2) - (math.atan(h / r))\n    return (2 * math.pi * r * math.sin(theta))\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text == '':\n        return text\n    if'' in text:\n        text = text.replace(' ',':')\n    if ',' in text:\n        text = text.replace(',',':')\n    if '.' in text:\n        text = text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[,. ]', ':', text)\n    return text.replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\ndef replace_underscore(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a question mark.\n    '''\n    return text.replace(' ', '?')\ndef replace_space(text):\n    '''\n    Write a function to replace all occurrences of spaces with a plus sign.\n    '''\n    return text.replace(' ', '+')\ndef replace_minus(text):\n    '''\n    Write a function to replace all occurrences of minus sign with a question mark.\n    '''\n    return text.replace('-', '?')\ndef replace_dot(text):\n    '''\n    Write a function to replace all occurrences of dots with a period.\n    '''\n    return text.replace('.', '.')\ndef replace_dash(text):\n    '''\n    Write a function to replace all occurrences of dashes with a plus sign.\n    '''\n    return text.replace('-', '+')\ndef replace_colon(text):\n    '''\n    Write a function to replace all occurrences of colons with a question mark.\n    '''\n    return text.replace(':', '?')\ndef replace_all(text,patterns,replacement):\n    '''\n    Write a function to replace all the given patterns with the given replacement in the given text.\n    '''\n    return re.sub(patterns, replacement, text)\ndef remove_specialchar(text):\n    '''\n    Write a function to remove all the special characters from a string.\n    '''\n    return re.sub('[@#$%^&*()_+|\\{\\}[]:;<>?/.,\\n]', '', text)\ndef remove_space(text):\n    '''\n    Write a function to remove all the spaces from a string.\n    '''\n    return re.sub('\\s+','', text)\ndef remove_dot(text):\n    '''\n    Write a function to remove all the dots from a string.\n    '''\n    return re.sub('\\.+', '', text)\ndef remove_dash(text):\n    '''\n    Write a function to remove all the dashes from a string.\n    '''\n    return re.sub('\\-+', '', text)\ndef remove_colon(text):\n    '''\n    Write a function to remove all the colons from a string.\n    '''\n    return re.sub('\\:+', '', text)\ndef remove_all(text,patterns):\n    '''\n    Write a function to remove all the given patterns from a string.\n    '''\n    return re.sub(patterns, '', text)\ndef replace_html(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'<.*?>','', text)\ndef replace_nbsp(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&nbsp;','', text)\ndef replace_mdash(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&mdash;','', text)\ndef replace_amp(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quot;','', text)\ndef replace_br(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&br;','', text)\ndef replace_lt(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&lt;','', text)\ndef replace_gt(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&gt;','', text)\ndef replace_quote(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quote;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quote;','', text)\ndef replace_amp(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_apos(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&apos;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quot;','', text)\ndef replace_amp(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quot;','', text)\ndef replace_apos(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&apos;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quot;','', text)\ndef replace_apos(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&apos;','', text)\ndef replace_ampersand(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_quot(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&quot;','', text)\ndef replace_amp(text):\n    '''\n    Write a function to replace all occurences of the html tags with''\n    '''\n    return re.sub(r'&amp;','', text)\ndef replace_ampersand(text):"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n    \ndef read_file(file_path):\n    '''\n    Write a function to read a file.\n    '''\n    # file_path = 'text_files/text_sample.txt'\n    with open(file_path) as file:\n        data = file.read()\n    return data\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]+|[,\\.]+|[:;]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(\"[,. ]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.\\:]+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_special=text.replace(\" \",\":\")\n    return text_special\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    if A[lo] == x:\n        return lo\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search_right(arr, l, r, x):\n        if r >= l:\n            mid = l + (r - l) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] > x:\n                return binary_search_right(arr, l, mid-1, x)\n            else:\n                return binary_search_right(arr, mid+1, r, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if A[m] == x:\n            return m\n        elif A[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, x, 0, len(A)-1)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo if A[lo] == x else lo - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    def products(nums):\n        if len(nums)==0:\n            return None\n        if len(nums)==1:\n            return nums[0]\n        if len(nums)==2:\n            return nums[0]*nums[1]\n        if len(nums)==3:\n            return nums[0]*nums[1]*nums[2]\n        products = []\n        products.append(nums[0]*nums[1]*nums[2])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7]*nums[8])\n        products.append(nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7]*nums[8]*nums[9])\n        return max(products)\n        \n    def max_Prod_Sublist(arr):\n        if len(arr)==0:\n            return 0\n        if len(arr)==1:\n            return arr[0]\n        if len(arr)==2:\n            return arr[0]*arr[1]\n        return max(arr[0]*arr[1]*arr[2],arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5])\n        \n    if not arr:\n        return 0\n    prod = products(arr)\n    if prod is None:\n        return 0\n    subprod = max_Prod_Sublist(arr)\n    return subprod + prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod=1\n            for k in range(i,j+1):\n                prod*=arr[k]\n            sum+=prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                s = s + arr[i]*arr[j]*arr[k]\n    print(\"The sum of products is\",s)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # arr = [[1,2,3],[4,5,6],[7,8,9]]\n    # output = 1 * 1 * 2 * 3 + 1 * 1 * 4 * 5 + 1 * 1 * 7 * 8 + 1 * 4 * 5 * 6 + 1 * 7 * 8 * 9 = 336\n    # First solution\n    '''\n    arr = [[1,2,3],[4,5,6],[7,8,9]]\n    res = 1\n    for i in range(1,len(arr)):\n        prod = 1\n        for j in range(i):\n            prod *= arr[j][i-j]\n        res += prod\n    print(res)\n    '''\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = [2,3,1,4,5,7]\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            s += arr[i] * arr[j]\n    return s\nprint(sum_Of_Subarray_Prod(arr))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    length = len(arr)\n    sum_of_prods = 0\n    # iterate through each element\n    for i in range(0, length):\n        # iterate through each element\n        for j in range(i, length):\n            # increment sum of prod\n            sum_of_prods += arr[i] * arr[j]\n    return sum_of_prods\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a lookup table\n    table = [0] * (n+1)\n    # initialize table\n    for i in range(n):\n        table[i+1] = table[i]*arr[i]\n    # calculate sum\n    # print table\n    return sum(table[i]*table[i+1] for i in range(n))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    len_arr = len(arr)\n    curr_prod = 1\n    total = 0\n    for i in range(len_arr):\n        for j in range(i, len_arr):\n            curr_prod *= arr[j]\n            total += curr_prod\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    '''\n    Example 1:\n        Input: arr[] = {3,4,5,6,7}\n        Output:  30\n        Explanation: The sum of products is 30 = 5 * 6 * 7, which is 30\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            ans += arr[i] * arr[j]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if (n < 1 or n > 32):\n        print(\"Number should be in range 1 to 32\")\n        return False\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    n = (n & 0x55555555) << 1 \n    n = n | (n >> 1)\n    n = (n & 0x33333333) << 2 \n    n = n | (n >> 2)\n    n = (n & 0x0f0f0f0f) << 4 \n    n = n | (n >> 4)\n    n = (n & 0x00ff00ff) << 8 \n    n = n | (n >> 8)\n    n = (n & 0x0000ffff) << 16 \n    n = n | (n >> 16)\n    n = (n & 0x00000000ffffffff) << 32 \n    n = n | (n >> 32)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | 0xaaaaaaaa\n    n = n & 0x55555555\n    n = n & 0xaaaaaaaa\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | 1 << (n.bit_length() - 2)\n    n = n & ~(1 << (n.bit_length() - 2))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    n = ~n&(~0x5555555555555555)\n    print(\"Number after toggling bits: \" + str(n))\n    \n    return n\n    \ndef convert_to_binary(n):\n    '''\n    Write a python function to convert a decimal number to binary number. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-binary-number/\n    '''\n    \n    return int(n).to_bytes((int(n).bit_length()+7)//8, 'big').decode()\n    \ndef convert_to_octal(n):\n    '''\n    Write a python function to convert a decimal number to octal number. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-octal-number/\n    '''\n    \n    return int(n).to_bytes((int(n).bit_length()+7)//8, 'big').decode()\n    \ndef convert_to_hexadecimal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal number. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-hexadecimal-number/\n    '''\n    \n    return int(n).to_bytes((int(n).bit_length()+7)//8, 'big').decode()\n    \ndef convert_to_binary_with_base_2(n, base):\n    '''\n    Write a python function to convert a decimal number to binary number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-binary-number-with-given-base/\n    '''\n    \n    return bin(n)[2:]\n    \ndef convert_to_octal_with_base_2(n, base):\n    '''\n    Write a python function to convert a decimal number to octal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-octal-number-with-given-base/\n    '''\n    \n    return oct(n)[2:]\n    \ndef convert_to_hexadecimal_with_base_2(n, base):\n    '''\n    Write a python function to convert a decimal number to hexadecimal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-hexadecimal-number-with-given-base/\n    '''\n    \n    return hex(n)[2:]\n    \ndef base_10_to_binary_with_base_10(n, base):\n    '''\n    Write a python function to convert a decimal number to binary number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-binary-number-with-given-base/\n    '''\n    \n    return bin(n).zfill(int(n.bit_length()).bit_length())\n    \ndef base_10_to_octal_with_base_10(n, base):\n    '''\n    Write a python function to convert a decimal number to octal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-octal-number-with-given-base/\n    '''\n    \n    return oct(n).zfill(int(n.bit_length()).bit_length())\n    \ndef base_10_to_hexadecimal_with_base_10(n, base):\n    '''\n    Write a python function to convert a decimal number to hexadecimal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-hexadecimal-number-with-given-base/\n    '''\n    \n    return hex(n).zfill(int(n.bit_length()).bit_length())\n    \ndef binary_to_base_10(n, base):\n    '''\n    Write a python function to convert a binary number to decimal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-binary-number-with-given-base/\n    '''\n    \n    return int(n, 2)\n    \ndef octal_to_base_10(n, base):\n    '''\n    Write a python function to convert an octal number to decimal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-octal-number-with-given-base/\n    '''\n    \n    return int(n, 8)\n    \ndef hexadecimal_to_base_10(n, base):\n    '''\n    Write a python function to convert a hexadecimal number to decimal number with the given base. \n    https://www.geeksforgeeks.org/python-convert-decimal-number-hexadecimal-number-with-given-base/\n    '''\n    \n    return int(n, 16)\n    \ndef hamming_distance(n1, n2):\n    '''\n    Write a python function to find the hamming distance between two numbers. \n    https://www.geeksforgeeks.org/hamming-distance/\n    '''\n    \n    return bin(n1^n2).count('1')\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (1 << (len(bin(n))-2))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # your code here\n    n = n & (2**n.bit_length() -1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # define the number\n    n = 65\n    # define the number of bits to be flipped\n    k = 2\n    # return the number after flipping the bits\n    return ~(~0 << k | ~0 >> (len(bin(n)) - k - 1))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n\n    # Convert to binary\n    num_binary = bin(num)\n    # Reverse the binary\n    num_binary = num_binary[2:]\n    # lenght of binary\n    l = len(num_binary)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    num = n\n    res = 0\n    for i in range(32):\n        if i!= 0 and i!= 31:\n            res += (1<<i)\n            \n    return num^res\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a==[]:\n        return 0\n    else:\n        i=0\n        while i<len(a) and a[i]<x:\n            i+=1\n        if i==len(a):\n            return len(a)\n        else:\n            return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        a = []\n        return a.insert(0, x)\n    else:\n        return a.insert(bisect.bisect(a, x) - 1, x)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        a = []\n        return a.insert(-1, x)\n    else:\n        return a.insert(bisect.bisect(a, x) + 1, x)\ndef mid_insertion(a, x):\n    '''\n    Write a function to locate the middle insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        a = []\n        return a.insert(len(a)//2, x)\n    else:\n        return a.insert(bisect.bisect(a, x)//2 + 1, x)\ndef search_for_x(a, x):\n    '''\n    Write a function to find the index of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        return -1\n    else:\n        return a.index(x)\ndef binary_search_iter(a, x):\n    '''\n    Write a binary search function. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        middle = len(a)//2\n        if x == a[middle]:\n            return middle\n        elif x < a[middle]:\n            return binary_search_iter(a[:middle], x)\n        else:\n            return binary_search_iter(a[middle+1:], x)\ndef binary_search_recur(a, x, low, high):\n    '''\n    Write a recursive binary search function. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if high < low:\n        return -1\n    else:\n        middle = (high+low)//2\n        if x == a[middle]:\n            return middle\n        elif x < a[middle]:\n            return binary_search_recur(a, x, low, middle-1)\n        else:\n            return binary_search_recur(a, x, middle+1, high)\ndef get_middle_element(a):\n    '''\n    Write a function to get the middle element of a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        return a[(len(a))//2]\ndef insertion_sort(a):\n    '''\n    Write a function to sort a list using the insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        tmp = a[i]\n        j = i\n        while j > 0 and a[j-1] > tmp:\n            a[j] = a[j-1]\n            j -= 1\n        a[j] = tmp\ndef shell_sort(a):\n    '''\n    Write a function to sort a list using the shell sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a), 0, -1):\n        gap = i\n        while gap > 1:\n            for j in range(gap):\n                while j+gap < len(a) and a[j] > a[j+gap]:\n                    a[j], a[j+gap] = a[j+gap], a[j]\n                gap = int(gap/2)\n    return a\ndef merge_sort(a, low, high):\n    '''\n    Write a function to sort a list using the merge sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if high-low < 1:\n        return\n    mid = int(low + (high-low)/2)\n    merge_sort(a, low, mid)\n    merge_sort(a, mid+1, high)\n    merge_sorted(a, low, mid, high)\ndef merge_sorted(a, low, mid, high):\n    '''\n    Write a function to sort a list using the merge sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    tmp_arr = []\n    i = low\n    j = mid + 1\n    while i <= mid and j <= high:\n        if a[i] <= a[j]:\n            tmp_arr.append(a[i])\n            i += 1\n        else:\n            tmp_arr.append(a[j])\n            j += 1\n    while i <= mid:\n        tmp_arr.append(a[i])\n        i += 1\n    while j <= high:\n        tmp_arr.append(a[j])\n        j += 1\n    for i in range(len(tmp_arr)):\n        a[low+i] = tmp_arr[i]\ndef quick_sort(a, low, high):\n    '''\n    Write a function to sort a list using the quick sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if high - low < 1:\n        return\n    pivot = a[high]\n    i = low - 1\n    for j in range(low, high):\n        if a[j] <= pivot:\n            i += 1\n            tmp = a[i]\n            a[i] = a[j]\n            a[j] = tmp\n    tmp = a[i+1]\n    a[i+1] = a[high]\n    a[high] = tmp\n    i = low\n    j = i + 1\n    for j in range(i + 2, high + 1):\n        if a[j] < pivot:\n            i += 1\n            tmp = a[i]\n            a[i] = a[j]\n            a[j] = tmp\n    tmp = a[i+1]\n    a[i+1] = a[low]\n    a[low] = tmp\n    quick_sort(a, low, i-1)\n    quick_sort(a, i+2, high)\ndef bucket_sort(a):\n    '''\n    Write a function to sort a list using the bucket sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = max(a) + 1\n    buckets = [[] for i in range(n)]\n    for i in a:\n        buckets[int(i//(n//10))].append(i)"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n        elif a[i] > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == 0:\n        return idx\n    elif a[idx-1] <= x < a[idx]:\n        return idx\n    else:\n        return idx - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i:\n        return a[i-1]\n    return x\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x <= a[0]:\n        return 0\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == 0 or a[i-1]!= x:\n            return i\n        else:\n            return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    c_n = 0\n    for i in range(len(a)):\n        if x < a[i]:\n            c_n = i\n            break\n    if c_n == 0:\n        return c_n\n    else:\n        if x < a[c_n-1]:\n            return c_n\n        else:\n            return c_n-1\n    '''\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    return index - 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    return index + 1\ndef left_insertion_sorted(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    return index - 1\ndef right_insertion_sorted(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    return index + 1\ndef left_insertion_sorted_with_duplicates(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    if a[index - 1] == x:\n        return index\n    return index - 1\ndef right_insertion_sorted_with_duplicates(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    if a[index + 1] == x:\n        return index + 1\n    return index + 1\ndef left_insertion_sorted_with_duplicates(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    if a[index - 1] == x:\n        return index\n    return index - 1\ndef right_insertion_sorted_with_duplicates(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    if a[index + 1] == x:\n        return index + 1\n    return index + 1\ndef left_insertion_ranger(a, x, y):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    if a[index - 1] == x:\n        return index - 1\n    return index - 1\ndef right_insertion_ranger(a, x, y):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    if a[index + 1] == x:\n        return index + 1\n    return index + 1\ndef left_insertion_ranger_with_duplicates(a, x, y):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    if a[index - 1] == x:\n        return index - 1\n    return index - 1\ndef right_insertion_ranger_with_duplicates(a, x, y):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0:\n        return 0\n    if index == len(a) - 1:\n        return len(a) - 1\n    if a[index + 1] == x:\n        return index + 1\n    return index + 1\ndef left_insertion_ranger_with_duplicates(a, x, y):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    if index == len(a):\n        return len(a) - 1\n    if a[index - 1] == x:\n        return index - 1\n    return index - 1\ndef right_insertion_ranger_wit"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # if the value is smaller than the first item in the array, then its left insertion point is 0\n    if x < a[0]:\n        return 0\n    # if value is greater than the last item in the array, then its left insertion point is the length of the array minus 1\n    if x >= a[-1]:\n        return len(a) - 1\n    # otherwise, use binary search to find the index of the middle element\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\nprint(check_str('abc')) \nprint(check_str('Mohan')) \nprint(check_str('hahahahaha')) \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check = re.match(regex,string)\n    return bool(check)\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    check = re.match('[aeiouAEIOU]$',string)\n    return bool(check)\ndef check_str3(string): \n    '''\n    Write a function to check whether the given string is having vowels greater than 2 or not using regex.\n    '''\n    check = re.match('[aeiouAEIOU][aeiou][aeiou][aeiou]{2,}$',string)\n    return bool(check)\ndef check_str4(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str5(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str6(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str7(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str8(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str9(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str10(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str11(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str12(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str13(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str14(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str15(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str16(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str17(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str18(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str19(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str20(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str21(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str22(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str23(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str24(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str25(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str26(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str27(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str28(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str29(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)\ndef check_str30(string): \n    '''\n    Write a function to check whether the given string is having vowels of same frequency or not using regex.\n    '''\n    check = re.match('(.)\\1{1,}',string)\n    return bool(check)"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\nif __name__ == '__main__': \n    string = 'wef'\n    result = check_str(string) \n    print(result) \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if match:\n        print(\"String starts with a vowel\")\n    else:\n        print(\"String does not start with a vowel\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None: \n        print(True) \n    else: \n        print(False) \n  "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        print(\"True\")\n    else:\n        print(\"False\")\ncheck_str('Qwewt')\ncheck_str('ab')\ncheck_str('ab')"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex,string)\n    if(result is not None): \n        return \"String is starting with vowel\"\n    else: \n        return \"String is not starting with vowel\"\n    \ncheck_str(\"Awesome\")"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0: return 0\n    return n * (1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    return geometric_sum(n-1)*n\nprint(geometric_sum(5)"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n + 1) / 2\n    "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    num = 1\n    for i in range(n-1):\n        num = num*(n-i)//(i+1)\n    return num\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def sum_of_digits(x): \n        sum = 0\n        while x: \n            sum += x % 10\n            x = int(x / 10) \n        return sum\n     \n    # Compute minimum triangular number with n digits \n    i = 0\n    while True: \n        if (sum_of_digits(i) == n): \n            return i \n        i += 1\n    return -1\n    \n    \ndef get_tri_number_digits(n):\n    '''\n    Write a python function to get the n digits of the first triangular number. \n    Input: 1, Output
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n - 1\n    if n == 1:\n        return 0\n    i = int((math.sqrt(8*n + 1) - 1)/2)\n    return (i + 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triplets(n): \n        if n <= 1: \n            return 0\n        else: \n            return (triplets(n-1) + (n * (n-1))) // 2\n    return triplets(n) \ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triplets(n): \n        if n <= 1: \n            return 0\n        else: \n            return ((n * (n - 1)) // 2) \n    return triplets(n) \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import numpy as np\n    arr = np.array([])\n    l = 0\n    while l < n:\n        l = l + 1\n        arr = np.append(arr, l)\n    return arr.argmin()\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return find_Index(n-1) + 1\n    return 2*math.ceil(math.sqrt(n))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n): \n        for j in range(1, i+1): \n            if((n*(n-1))//2)==((n-1)*j): \n                print(\"index of smallest triangular number with\", n, \"digits is \", i+1) \n                break\n                \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    count = 0\n    while i < n:\n        count += i * (i + 1) // 2\n        i += 1\n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if n==40:\n        return 40\n    if n==41:\n        return 41\n    if n==42:\n        return 42\n    if n==43:\n        return 43\n    if n==44:\n        return 44\n    if n==45:\n        return 45\n    if n==46:\n        return 46\n    if n==47:\n        return 47\n    if n==48:\n        return 48\n    if n==49:\n        return 49\n    if n==50:\n        return 50\n    if n==51:\n        return 51\n    if n==52:\n        return 52\n    if n==53:\n        return 53\n    if n==54:\n        return 54\n    if n==55:\n        return 55\n    if n==56:\n        return 56\n    if n==57:\n        return 57\n    if n==58:\n        return 58\n    if n==59:\n        return 59\n    if n==60:\n        return 60\n    if n==61:\n        return 61\n    if n==62:\n        return 62\n    if n==63:\n        return 63\n    if n==64:\n        return 64\n    if n==65:\n        return 65\n    if n==66:\n        return 66\n    if n==67:\n        return 67\n    if n==68:\n        return 68\n    if n==69:\n        return 69\n    if n==70:\n        return 70\n    if n==71:\n        return 71\n    if n==72:\n        return 72\n    if n==73:\n        return 73\n    if n==74:\n        return 74\n    if n==75:\n        return 75\n    if n==76:\n        return 76\n    if n==77:\n        return 77\n    if n==78:\n        return 78\n    if n==79:\n        return 79\n    if n==80:\n        return 80\n    if n==81:\n        return 81\n    if n==82:\n        return 82\n    if n==83:\n        return 83\n    if n==84:\n        return 84\n    if n==85:\n        return 85\n    if n==86:\n        return 86\n    if n==87:\n        return 87\n    if n==88:\n        return 88\n    if n==89:\n        return 89\n    if n==90:\n        return 90\n    if n==91:\n        return 91\n    if n==92:\n        return 92\n    if n==93:\n        return 93\n    if n==94:\n        return 94\n    if n==95:\n        return 95\n    if n==96:\n        return 96\n    if n==97:\n        return 97\n    if n==98:\n        return 98\n    if n==99:\n        return 99\n    if n==100:\n        return 100\n    if n==101:\n        return 101\n    if n==102:\n        return 102\n    if n==103:\n        return 103\n    if n==104:\n        return 104\n    if n==105:\n        return 105\n    if n==106:\n        return 106\n    if n==107:\n        return 107\n    if n==108:\n        return 108\n    if n==109:\n        return 109\n    if n==110:\n        return 110\n    if n==111:\n        return 111\n    if n==112:\n        return 112\n    if n==113:\n        return 113\n    if n==114:\n        return 114\n    if n==115:\n        return 115\n    if n==116:\n        return 116\n    if n==117:\n        return 117\n    if n==118:\n        return 118\n    if n==119:\n        return 119\n    if n==120:\n        return 120\n    if n==121:\n        return 121\n    if n==122:\n        return 122\n    if n==123:\n        return 123\n    if n==124:\n        return 124\n    if n==125:\n        return 125\n    if n==126:\n        return 126\n    if n==127:\n        return 127\n    if n==128:\n        return 128\n    if n==129:\n        return 129\n    if n==130:\n        return 130\n    if n==131:\n        return 131\n    if n==132:\n        return 132\n    if n==133:\n        return 133\n    if n==134:\n        return 134\n    if n==135:\n        return 135\n    if n==136:\n        return 136\n    if n==137:\n        return 137\n    if n==138:\n        return 138\n    if n==139:\n        return 139\n    if n==140:\n        return 140\n    if n==141:\n        return 141\n    if n==142:\n        return 142\n    if n==143:\n        return 143\n    if n==144:\n        return 144\n    if n==145:\n        return 145\n    if n==146:\n        return 146\n    if n==147:\n        return 147\n    if n==148:\n        return 148\n    if n==149:\n        return 149\n    if n==150:\n        return 150\n    if n==151:\n        return 151\n    if n==152:\n        return 152\n    if n==153:\n        return 153\n    if n==154:\n        return 154\n    if n==155:\n        return 155\n    if n==156:\n        return 156\n    if n==157:\n        return 157\n    if n==158:\n        return 158\n    if n==159:\n        return 159\n    if n==160:\n        return 160\n    if n==161:\n        return 161\n    if n==162:\n        return 162\n    if n==163:\n        return 163\n    if n==164:\n        return 164\n    if n==165:\n        return 165\n    if n==166:\n        return 166\n    if n==167:\n        return 167\n    if n==168:\n        return 168\n    if n==169:\n        return 169\n    if n==170:\n        return 170\n    if n==171:\n        return 171\n    if n==172:\n        return 172\n    if n==173:\n        return 173\n    if n==174:\n        return 174\n    if n==175:\n        return 175\n    if n==176:\n        return 176\n    if n==177:\n        return 177\n    if n==178:\n        return 178\n    if n==179:\n        return 179\n    if n==180:\n        return 18"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    size = n\n    while True:\n        x = size\n        y = 1\n        z = 0\n        \n        while (x > 0): \n            z = z + (x % 10) * y \n            x = int(x / 10)\n            y = y * 10\n        if (z == 1): \n            return size \n        size = size - 1\n    \ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    size = n\n    while True:\n        x = size\n        y = 1\n        z = 0\n        \n        while (x > 0): \n            z = z + (x % 10) * y \n            x = int(x / 10)\n            y = y * 10\n        if (z == 1): \n            return size \n        size = size - 1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            dic[test_tup[i]] = test_tup[i + 1]\n        elif i == len(test_tup) - 1:\n            dic[test_tup[i - 1]] = test_tup[i]\n        else:\n            dic[test_tup[i - 1]] = test_tup[i]\n            dic[test_tup[i]] = test_tup[i + 1]\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_list = []\n    val_list = []\n    for tup in test_tup:\n        key_list.append(tup[0])\n        val_list.append(tup[1])\n    key_list.sort()\n    dict_object = dict(zip(key_list, val_list))\n    return dict_object\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {\n            tuple_to_dict.__code__.co_varnames[i]:(tuple_to_dict.__code__.co_varnames[i+1], tuple_to_dict.__code__.co_varnames[i+2])\n        for i in range(0, len(tuple_to_dict.__code__.co_varnames)-2, 3)\n    }\n    return key_val_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return_dict = {}\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            return_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            return_dict[test_tup[i]] = None\n    return return_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        d[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return d\n    \n    \ndef main():\n    test_tup = (1,2,3,4,5)\n    print(tuple_to_dict(test_tup))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    \n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            new_dict[test_tup[i]] = None\n        else:\n            new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    ret_dict = {}\n    if len(test_tup) == 0:\n        return ret_dict\n    if len(test_tup) == 1:\n        ret_dict[test_tup[0]] = test_tup[0]\n        return ret_dict\n    for i in range(0, len(test_tup) - 1):\n        ret_dict[(test_tup[i], test_tup[i + 1])] = test_tup[i]\n    return ret_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s.lower()\n    if len(set(c))==1 :\n        print('YES')\n    else :\n        print('NO')\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 1:\n        return False\n    if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    else :\n        return True if s.count(s[0]) == len(s) else False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) < 2\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    n = len(s)\n    for i in range(n-1) :\n        if s[i] == s[i+1] :\n            continue\n        else :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1 :\n        return True\n    else :\n        if s[0] == s[1] :\n            return all_Characters_Same(s[1:])\n        else :\n            return False\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a= side**2\n    return a/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = math.sqrt(6)\n    return a * a * (side**2) / 4\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * (radius**2) * height\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4 * math.pi * (radius**3) / 3\ndef cylinder_surface_area(height, radius):\n    '''\n    Write a function to caluclate the surface area of a cylinder.\n    '''\n    a = math.pi * radius * height\n    return 2 * a\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (2 * math.pi * radius**2) * height\ndef area_cone_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the surface area of a cone with the same height and radius as a hemisphere.\n    '''\n    a = math.pi * radius**2\n    return 2 * a\ndef volume_cylinder_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder with the same height and radius as a hemisphere.\n    '''\n    return (2 * math.pi * radius**2) * height\ndef height_volume(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius * radius * height\ndef area_sphere_hemisphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius.\n    '''\n    return 4 * math.pi * radius**2\ndef height_volume_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius * radius * height\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef height_volume_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius * radius * height\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3 * math.pi * radius**3\ndef volume_sphere_hemisphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius.\n    '''\n    return 4/3 * math.pi * radius**3\ndef area_sphere_hemisphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius.\n    '''\n    return 4 * math.pi * radius**2\ndef surface_area_sphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef volume_sphere_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius**2 * height\ndef volume_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius**3 * height\ndef volume_sphere_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return 4/3 * math.pi * radius**3 * height\ndef surface_area_sphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef radius_3d_sphere(height,radius):\n    '''\n    Write a function to caluclate the radius of the sphere based on the height and radius.\n    '''\n    return height / (math.pi * radius**2)\ndef volume_sphere_3d_sphere(height,radius):\n    '''\n    Write a function to caluclate the volume of a sphere based on the height and radius.\n    '''\n    return (4/3) * (math.pi * radius**2) * height\ndef radius_3d_sphere(height,volume):\n    '''\n    Write a function to caluclate the radius of the sphere based on the height and volume.\n    '''\n    return (volume/math.pi) / (height**2)\ndef volume_sphere_3d_sphere(height,volume):\n    '''\n    Write a function to caluclate the volume of a sphere based on the height and volume.\n    '''\n    return (4/3) * (math.pi * radius**2) * height\ndef sphere_surface_area(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    return 2 * math.pi * radius**2\ndef surface_area_sphere_3d_sphere(radius,volume):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius and volume.\n    '''\n    return 2 * math.pi * radius**2 * volume\ndef area_sphere_hemisphere(radius):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius.\n    '''\n    return 4 * math.pi * radius**2\ndef height_volume_sphere_hemisphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the height.\n    '''\n    return (4/3) * math.pi * radius**2 * height\ndef surface_area_sphere_3d_sphere(radius,volume):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius and volume.\n    '''\n    return 2 * math.pi * radius**2 * volume\ndef volume_sphere_3d_sphere(radius,volume):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and the volume.\n    '''\n    return (4/3) * math.pi * radius**3 * volume\ndef surface_area_sphere_3d_sphere(radius,volume):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius and volume.\n    '''\n    return 2 * math.pi * radius**2 * volume\ndef volume_sphere_3d_sphere(radius,height,volume):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and height and volume.\n    '''\n    return (4/3) * math.pi * radius**3 * height\ndef surface_area_sphere_3d_sphere(radius,height,volume):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius and height and volume.\n    '''\n    return 2 * math.pi * radius**2 * volume\ndef volume_sphere(radius,height,volume):\n    '''\n    Write a function to caluclate the volume of a sphere based on the radius and height and volume.\n    '''\n    return (4/3) * math.pi * radius**3 * height\ndef surface_area_sphere(radius,height,volume):\n    '''\n    Write a function to caluclate the surface area of a sphere based on the radius and height and volume.\n    '''\n    return 2 * math.pi * radius**2 * volume\ndef surface"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    return (a*a*a)/2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*(side**2)*math.sqrt((3-math.sqrt(2))/8)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return (1/2)*(side**2)\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return (1/4)*(side**2)\ndef area_parallelogram(side1, side2):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return (side1*side2)/2\ndef area_rectangle(length1, length2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length1*length2\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef area_trapezoid(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2+side3)*(side1-side2)/2\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_trapezoid_square(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return (side1+side2)*(side1-side2)/2\ndef area_triangle_square(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return (side1+side2)*(side1-side2)/2\ndef area_pyramid(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return side1*(side1+side2+side3)/2\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*radius*(radius+height)/2\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return math.pi*radius*radius*height/3\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4*math.pi*radius**2\ndef area_hexagonal(length1, length2):\n    '''\n    Write a function to caluclate the area of a hexagonal.\n    '''\n    return (1/2)*(length1**2+length2**2)/math.sqrt(3)\ndef area_parallelogram_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_rectangle_tetrahedron(length1, length2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return (length1*length2)/3\ndef area_trapezoid_rectangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_triangle_rectangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_trapezoid_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_rectangle_triangle(length1, length2, length3):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return (length1*length2)/2\ndef area_triangle_rectangle(length1, length2, length3):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return (length1*length2)/2\ndef area_trapezoid_rectangle_triangle(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_rectangle_triangle_trapezoid(length1, length2, length3, length4):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return (length1*length2)/2\ndef area_triangle_rectangle_trapezoid(length1, length2, length3, length4):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return (length1*length2)/2\ndef area_triangle_rectangle_trapezoid_rectangle(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return (length1*length2)/2\ndef area_rectangle_trapezoid_rectangle(side1, side2, side3, side4, side5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_triangle_trapezoid_rectangle(side1, side2, side3, side4, side5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_rectangle_trapezoid_triangle(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(length1*length2)/2\ndef area_trapezoid_trapezoid_rectangle(side1, side2, side3, side4, side5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(side1+side2)*(side1-side2)/2\ndef area_triangle_rectangle_trapezoid(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(length1*length2)/2\ndef area_rectangle_rectangle_trapezoid(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(length1*length2)/2\ndef area_rectangle_trapezoid_triangle(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*(length1*length2)/2\ndef area_triangle_rectangle_trapezoid_triangle(length1, length2, length3, length4, length5):\n    '''\n    Write a function to caluclate the area of "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    return side * side * side / 6.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sq = math.pow(side, 2)\n    s = side_sq/6\n    a = 4*(math.sqrt(3)/3)*s\n    return round(a, 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = 6 * side * side\n    return area\n    \ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    area = (1/2) * side * side * side\n    return area\n    \ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    area = 5 * side * side / 3\n    return area\n    \ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area\n    \ndef area_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    area = (1/2) * side1 * side2\n    return area\n    \ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = side * side\n    return area\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = math.pi * radius * radius * height\n    return volume\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = math.pi * (radius ** 2) * height\n    return volume\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n    \ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = base * height\n    return volume\n    \ndef volume_trapezoid(height1, width, height2):\n    '''\n    Write a function to caluclate the volume of a trapezoid.\n    '''\n    volume = 0.5 * height1 * width + height2 * width\n    return volume\n    \ndef volume_trapezoid(height1, width, height2):\n    '''\n    Write a function to caluclate the volume of a trapezoid.\n    '''\n    volume = 0.5 * height1 * width + height2 * width\n    return volume\n    \ndef volume_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    volume = length * width * height\n    return volume\n    \ndef volume_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    volume = length * width * height\n    return volume\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side ** 3\n    return volume\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side ** 3\n    return volume\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n    \ndef volume_tetrahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = (1/3) * side1 * side2 * side3\n    return volume\n    \ndef volume_dodecahedron(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    volume = (5/6) * side1 * side2 * side3 * side4\n    return volume\n    \ndef volume_icosahedron(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    volume = (1/3) * side1 * side2 * side3 * side4\n    return volume\n    \ndef volume_dodecaedron(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    volume = (5/6) * side1 * side2 * side3 * side4\n    return volume\n    \ndef volume_octahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    volume = (2/3) * side1 * side2 * side3\n    return volume\n    \ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = base * height\n    return volume\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = math.pi * radius * radius * height\n    return volume\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = (4/3) * math.pi * radius * radius * height\n    return volume\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n    \ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = base * height\n    return volume\n    \ndef volume_trapezoid(height1, width, height2):\n    '''\n    Write a function to caluclate the volume of a trapezoid.\n    '''\n    volume = (0.5) * height1 * width + height2 * width\n    return volume\n    \ndef volume_trapezoid(height1, width, height2):\n    '''\n    Write a function to caluclate the volume of a trapezoid.\n    '''\n    volume = (0.5) * height1 * width + height2 * width\n    return volume\n    \ndef volume_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    volume = length * width * height\n    return volume\n    \ndef volume_cuboid(length, width, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    volume = length * width * height\n    return volume\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side ** 3\n    return volume\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side ** 3\n    return volume\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n    \ndef volume_dodecahedron(side1"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n == 0:\n        return\n    if n == 1:\n        return list\n    # to rotate the list, we will move n items to the left of the list and put the left part to the right.\n    for i in range(n - m):\n        list.append(list[0])\n        del(list[0])\n    # the end of the rotation.\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list) - 1\n    index = 0\n    while index <= list_length:\n        temp = list[index]\n        list[index] = list[index + 1]\n        list[index + 1] = temp\n        index = index + 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #code here\n    \n    for i in range(m):\n        list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = len(list)-m\n    temp = list[-m:]\n    list[-m:] = list[:-m]\n    list[:m] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #last element in list\n    last = len(list) - 1\n    #initializing first element of the new list\n    first = 0\n    #reversing the list\n    while first <= last:\n        #swapping first and last elements\n        temp = list[first]\n        list[first] = list[last]\n        list[last] = temp\n        #incrementing last element by 1\n        last -= 1\n        #incrementing first element by 1\n        first += 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    count = 0\n    for i in range(len(list)):\n        if list[i] == None:\n            continue\n        count += 1\n    new_list = [None] * count\n    \n    n = 0\n    \n    for i in range(len(list)):\n        if list[i] == None:\n            continue\n        new_list[n] = list[i]\n        n += 1\n    for i in range(len(list), len(new_list)):\n        new_list[i] = None\n    \n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n <= m:\n        return list\n    else:\n        for i in range(m, n):\n            list[i], list[i - m] = list[i - m], list[i]\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = True\n    for value in test_tup:\n        if value == None:\n            result = False\n    return result\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not any(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert len(test_tup) > 0\n    for i in range(len(test_tup)):\n        assert test_tup[i]!= None\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([x % i == 0 for i in range(1, x)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return range(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda num:\n        (num,\n        reduce(lambda acc, num: int(num / acc) == 0, str(num), 1)),\n        range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum) if all(i%x==0 for x in [int(x) for x in str(i)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum + 1):\n        if i % int(len(str(i))) == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def isDivisible(num):\n        if (num % 10) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(x%i == 0 for i in map(int, str(x))), range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = list(filter(lambda x: all([x%int(i)==0 for i in str(x)]), range(startnum, endnum+1)))\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(num):\n        digits = []\n        while num > 0:\n            digits.append(num%10)\n            num = int(num/10)\n        for digit in digits:\n            if digit % 2!= 0:\n                return False\n        return True\n    return list(filter(divisible_by_digit, range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # below is the way to do it\n    # this function returns a list with every number divisible by every digit from startnum to endnum\n    # startnum, endnum = 10, 20\n    # for num in range(startnum, endnum):\n    #     if all(num % i == 0 for i in range(1, 10)):\n    #         print(num)\n    #     else:\n    #         continue\n    #     print(num)\n    # return [i for i in range(startnum, endnum) if all(i % j == 0 for j in range(1, 10))]\n    # above is the way to do it\n    # this is the other way to do it\n    # startnum, endnum = 10, 20\n    # for num in range(startnum, endnum):\n    #     if all(num % int(i) == 0 for i in range(1, 10)):\n    #         print(num)\n    #     else:\n    #         continue\n    #     print(num)\n    # return [i for i in range(startnum, endnum) if all(i % int(j) == 0 for j in range(1, 10))]\n    # below is the solution that was used in the problem\n    startnum, endnum = 10, 20\n    return [i for i in range(startnum, endnum) if all(j in str(i) for j in range(1, 10))]\n    # above is the solution that was used in the problem\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    else:\n        return math.pi*r*(r**2)*(a/180*math.sin(a/180*math.pi))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    else:\n        return pi*r*r*abs(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi * r * r * a/180\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    if a == 360:\n        return r*r*math.pi\n    r_2 = math.pi*r*r\n    angle_in_rad = math.radians(a)\n    area_of_sector = r_2*math.sin(angle_in_rad)\n    return area_of_sector\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 360:\n        return (r ** 2) * math.pi\n    else:\n        return (math.pi * r ** 2 * math.sin(math.radians(a)))\ndef sector_area_list(r,a):\n    '''\n    Write a function to find the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 360:\n        return (r ** 2) * math.pi\n    else:\n        return (math.pi * r ** 2 * math.sin(math.radians(a)))\ndef sector_area_two(r,a):\n    '''\n    Write a function to find the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 360:\n        return (r ** 2) * math.pi\n    else:\n        return (math.pi * r ** 2 * math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 0 or a < 0 or a > 360 or math.isinf(r) or math.isnan(r) or math.isinf(a) or math.isnan(a):\n        raise ValueError\n    else:\n        return r**2*math.sin(math.pi/180*a)*math.sin(math.pi/180*a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0:\n        return None\n    if a==360:\n        return math.pi*r**2\n    if a>360:\n        a=a-360\n    return math.pi*r**2*a/180\nprint(sector_area(1,90))\nprint(sector_area(1,0))\nprint(sector_area(1,360))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert to radians\n    theta = math.radians(a)\n    if (theta > math.pi/2):\n        return None\n    else:\n        return math.pi*r*r*theta/2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    \n    A = r * r * math.pi * math.sin(math.radians(a / 2))\n    return A\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi*r**2*a/360\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if X == Y == Z == \"\":\n    #     return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n    \n    # Create a table to store lengths of longest common subsequence for all \n    # different pairs of string. Note that we need to fill the entire table. \n    L = [[0 for x in range(k+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for l in range(k+1): \n                if i == 0 or j == 0 or l == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[l-1]: \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    \n    # L is passed by reference in the function so a new array has to be created \n    # to store lengths of LCS found in table. Note that index of this new array \n    # will be equal to index of the table \n    result = [] \n    \n    # length of the table is used in the following loop \n    while m > 0 and n > 0: \n        \n        # If current element of X or Y is same as previous \n        # element of table, then current element of table \n        # must be maximum of two previous elements. \n        # Also, we will not consider the sub-sequence in \n        # the table if the current sub-sequence is already present \n        if X[m-1] == Y[n-1] == Z[k-1]: \n            result.append(X[m-1]) \n            m -= 1\n            n -= 1\n            k -= 1\n        \n        # If current element of X and Y is not same, \n        # then current element of table must be maximum of \n        # two previous elements. \n        elif L[m][j-1] >= L[i-1][j]: \n            m -= 1\n        else: \n            n -= 1\n    \n    return result[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    \n    # Create a table to store lengths of lcs for \n    # different values of i, j and k \n    length_X = [0] * (n + 1) \n    length_Y = [0] * (m + 1) \n    length_Z = [0] * (o + 1) \n    \n    # Preprocess length array to store \n    # lengths of lcs for different values \n    # of i, j and k. That is, lcs[i][j][k] \n    # will contain length of LCS of X[0..i-1] \n    # and Y[0..j-1] and Z[0..k-1] \n    # after preprocessing \n    for i in range(n + 1): \n        for j in range(m + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    length_X[i] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    length_X[i] = length_X[i-1] + 1\n                else: \n                    length_X[i] = max(length_X[i], length_X[i-1]) \n                \n                if (j == 0 or i == 0 or k == 0): \n                    length_Y[j] = 0\n                elif (Y[j-1] == X[i-1] and Y[j-1] == Z[k-1]): \n                    length_Y[j] = length_Y[j-1] + 1\n                else: \n                    length_Y[j] = max(length_Y[j], length_Y[j-1]) \n                    \n                if (k == 0 or j == 0 or i == 0): \n                    length_Z[k] = 0\n                elif (Z[k-1] == X[i-1] and Z[k-1] == Y[j-1]): \n                    length_Z[k] = length_Z[k-1] + 1\n                else: \n                    length_Z[k] = max(length_Z[k], length_Z[k-1]) \n    \n    # Build the answer string and \n    # return\n    ans = \"\" \n    i, j, k = n, m, o\n    while (i > 0 and j > 0 and k > 0): \n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n            ans = X[i-1] + ans \n            i -= 1\n            j -= 1\n            k -= 1\n        \n        # If the previous character \n        # in X or Y or Z is not equal \n        # to the current character, \n        # then the previous character \n        # in lcs will not be part of the \n        # answer (Remove this character \n        # from the answer) \n        elif (length_X[i] > length_Y[j] and \n            length_X[i] > length_Z[k]): \n            ans = X[i-1] + ans \n            i -= 1\n        elif (length_Y[j] > length_X[i] and \n            length_Y[j] > length_Z[k]): \n            ans = Y[j-1] + ans \n            j -= 1\n        else: \n            ans = Z[k-1] + ans \n            k -= 1\n    \n    # Removing the extra characters \n    # at the end\n    while (i > 0): \n        ans = X[i-1] + ans \n        i -= 1\n    \n    while (j > 0): \n        ans = Y[j-1] + ans \n        j -= 1\n    \n    while (k > 0): \n        ans = Z[k-1] + ans \n        k -= 1\n    \n    return ans \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not (X and Y and Z) or len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    lcs_matrix = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][k] = lcs_matrix[i-1][k-1] + 1\n                else:\n                    lcs_matrix[i][k] = max(lcs_matrix[i][k-1], lcs_matrix[i-1][k])\n    return lcs_matrix[len(X)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not len(X) or not len(Y) or not len(Z):\n        return \"\"\n    dp = [[0 for i in range(len(Z) + 1)] for j in range(len(Y) + 1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # X,Y,Z=X[::-1],Y[::-1],Z[::-1]\n    N = len(X)\n    M = len(Y)\n    P = len(Z)\n    C = [[[0 for i in range(P+1)] for j in range(M+1)] for k in range(N+1)]\n    for i in range(N+1):\n        for j in range(M+1):\n            for k in range(P+1):\n                if i == 0 or j == 0 or k == 0:\n                    C[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    C[i][j][k] = C[i-1][j-1][k-1]+1\n                else:\n                    C[i][j][k] = max(C[i-1][j][k], C[i][j-1][k], C[i][j][k-1])\n    # print(C)\n    return C[-1][-1][-1]\n    # return print(C[-1][-1][-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_of_two(X, Y): \n        '''\n        Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n        '''\n        m = len(X)\n        n = len(Y)\n        \n        dp = [[0 for i in range(n+1)] for j in range(m+1)] \n        \n        for i in range(m+1): \n            for j in range(n+1): \n                if i == 0 or j == 0: \n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1]: \n                    dp[i][j] = dp[i-1][j-1] + 1\n                else: \n                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n        return dp[m][n] \n    \n    def lcs_of_two(X, Y): \n        '''\n        Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n        '''\n        m = len(X)\n        n = len(Y)\n        \n        dp = [[0 for i in range(n+1)] for j in range(m+1)] \n        \n        for i in range(m+1): \n            for j in range(n+1): \n                if i == 0 or j == 0: \n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1]: \n                    dp[i][j] = dp[i-1][j-1] + 1\n                else: \n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n        return dp[m][n] \n    \n    def lcs_of_three(X, Y, Z): \n        '''\n        Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n        '''\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        \n        dp = [[0 for i in range(n+1)] for j in range(m+1)] \n        \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        dp[i][j] = 0\n                    elif X[i-1] == Y[j-1] and Z[k-1] == \"*\": \n                        dp[i][j] = dp[i-1][j-1] + 1\n                    elif X[i-1] == Y[j-1] and Z[k-1] == \"?\": \n                        dp[i][j] = dp[i-1][j-1] + 1\n                    elif X[i-1] == \"*\" and Y[j-1] == Z[k-1] or X[i-1] == \"*\" and Z[k-1] == \"?\": \n                        dp[i][j] = dp[i-1][j] + 1\n                    else: \n                        dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n        return dp[m][n] \n        \n    return lcs_of_two(X,Y)\n    \n    # Complete the function below.\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    # table to store the dp values \n    L = [[0 for x in range(o+1)] for x in range(m+1)] \n    # initialize the table values \n    for i in range(m+1): \n        for j in range(o+1): \n            for k in range(n+1): \n                if (i==0 or j==0 or k==0): \n                    L[i][j] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_dp(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        l = [[0]*(n+1) for _ in range(m+1)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                for k in range(o):\n                    if X[i]==Y[j] and Y[j]==Z[k]:\n                        l[i][j] = l[i-1][j-1]+1\n                        res = max(res, l[i][j])\n                    else:\n                        l[i][j] = max(l[i-1][j], l[i][j-1])\n        return res\n    return lcs_dp(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    k = len(Z)\n    \n    # Creating a 3D Matrix with size of n+1 by m+1 by k+1\n    d = [[[0 for i in range(k+1)] for j in range(m+1)] for x in range(n+1)]\n    \n    # Base condition\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, k+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    d[i][j][k] = d[i-1][j-1][k-1] + 1\n                else:\n                    d[i][j][k] = max(d[i-1][j][k], d[i][j-1][k], d[i][j][k-1])\n    \n    # Printing the LCS\n    lcs = \"\"\n    x, y, z = n, m, k\n    while x!=0 and y!=0 and z!=0:\n        if d[x][y][z] == d[x-1][y][z]:\n            x = x-1\n        elif d[x][y][z] == d[x][y-1][z]:\n            y = y-1\n        else:\n            z = z-1\n        lcs = X[x-1]+lcs\n    print(lcs)\n    \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.title()\n    str3 = re.findall('[a-zA-Z]', str2)\n    res = re.sub('[a-zA-Z]','', str2)\n    res = re.sub(' ','', res)\n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'\\b[A-Z]+\\b', lambda x: f' {x.group()}', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string = str1.split(' ')\n    capital_letters = '^[A-Z]'\n    spaces = \" \"\n    pattern = re.compile(capital_letters)\n    words = pattern.split(string[0])\n    result = words[0] + spaces + words[1]\n    for i in range(1,len(string)):\n        words = pattern.split(string[i])\n        result = result + spaces + words[0]\n    return result\n    #return pattern.sub(words[0] + spaces + words[1],string)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_word = re.compile(r'\\b[A-Z]\\w+')\n    result = capital_word.findall(str1)\n    return ''.join(result)\n    \ndef capitalize_first_letter(str1):\n    '''\n    Write a function to convert the case of the first character in a given string to upper case.\n    '''\n    capital_first_word = re.compile(r'\\b[A-Z]\\w*\\b')\n    result = capital_first_word.findall(str1)\n    return ''.join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return \" \".join([word.title() for word in str1.split(\" \")])\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # code goes here\n    lst = re.findall(r\"\\w[A-Z][a-z]+\\w\",str1)\n    result = \" \".join(lst)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l = str1.split(' ')\n    x = ''\n    for i in l:\n        if i[0].isupper():\n            x += i +''\n    return x\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\s(?:(?=(\\w))|(?!\\w))','', str1)\n    return str1\n    \ndef cap_word(str1):\n    '''\n    Write a program to add two numbers without using string\n    '''\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    result = num1 + num2\n    print(result)\n    \ndef common_characters(str1):\n    '''\n    Write a Python function to count the number of common characters of two given strings\n    '''\n    common = 0\n    for c1 in str1:\n        for c2 in str1:\n            if c1 == c2 and c1!= \" \":\n                common += 1\n    return common\n    \ndef common_characters_1(str1, str2):\n    '''\n    Write a function to return the number of common characters between two given strings\n    '''\n    common = 0\n    for c1 in str1:\n        for c2 in str2:\n            if c1 == c2 and c1!= \" \":\n                common += 1\n    return common\n    \ndef common_characters_2(str1, str2):\n    '''\n    Write a Python function to return a dictionary where the key is a character and the value is the \n    number of occurrences of that character in the given string.\n    '''\n    dict_1 = {}\n    for c1 in str1:\n        if c1 in dict_1:\n            dict_1[c1] += 1\n        else:\n            dict_1[c1] = 1\n    for c2 in str2:\n        if c2 in dict_1:\n            dict_1[c2] += 1\n        else:\n            dict_1[c2] = 1\n    return dict_1\n    \ndef capital_letters(str1):\n    '''\n    Write a Python function to count the number of capital letters in a given string\n    '''\n    count = 0\n    for c in str1:\n        if c.isupper():\n            count += 1\n    return count\n    \ndef vowels(str1):\n    '''\n    Write a Python function to count the number of vowels in a given string\n    '''\n    vowel = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for c in str1:\n        if c in vowel:\n            count += 1\n    return count\n    \ndef vowel_count_1(str1):\n    '''\n    Write a function to count vowels and consonants in a given string\n    '''\n    vowel = 0\n    consonant = 0\n    for c in str1:\n        if c in vowel:\n            vowel += 1\n        else:\n            consonant += 1\n    return vowel, consonant\n    \ndef vowel_count_2(str1):\n    '''\n    Write a function to count vowels and consonants in a given string\n    '''\n    vowel = 0\n    consonant = 0\n    for c in str1:\n        if c in vowel:\n            vowel += 1\n        elif c in consonant:\n            consonant += 1\n    return vowel, consonant\n    \ndef palindrome(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrome_1(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 == str1[::-1]\n    \ndef palindrome_2(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 == \"\".join(reversed(str1))\n    \ndef sum_digits(str1):\n    '''\n    Write a Python function to find the sum of digits in a given string\n    '''\n    sum = 0\n    for c in str1:\n        if c.isdigit():\n            sum += int(c)\n    return sum\n    \ndef sum_digits_1(str1):\n    '''\n    Write a Python function to find the sum of digits in a given string\n    '''\n    sum = 0\n    for c in str1:\n        if c.isdigit():\n            sum += int(c)\n    return sum\n    \ndef palindrome_2(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 == \"\".join(reversed(str1))\n    \ndef palindrome_3(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1 == \"\":\n        return True\n    else:\n        if str1[0] == str1[-1]:\n            return palindrome_3(str1[1:-1])\n        else:\n            return False\n    \ndef palindrome_4(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1 == \"\":\n        return True\n    elif str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrome_5(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1 == \"\":\n        return True\n    elif str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrome_6(str1):\n    '''\n    Write a Python function to check if a string is palindrome or not\n    '''\n    str1 = str1.replace(\" \",\"\")\n    if str1 == \"\":\n        return True\n    elif str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef first_word_search_1(str1):\n    '''\n    Write a function to check if a string is a word or not.\n    '''\n    splitted_words = str1.split(\" \")\n    if len(splitted_words) == 0:\n        return False\n    else:\n        return True\n    \ndef first_word_search_2(str1):\n    '''\n    Write a function to check if a string is a word or not.\n    '''\n    splitted_words = str1.split(\" \")\n    if len(splitted_words) == 0:\n        return False\n    elif len(splitted_words) == 1:\n        return True\n    else:\n        return True\n    \ndef first_word_search_3(str1):\n    '''\n    Write a function to check if a string is a word or not.\n    '''\n    splitted_words = str1.split(\" \")\n    if len(splitted_words) == 0:\n        return False\n    elif len(splitted_words) == 1:\n        return True\n    else:\n        return True\n    \ndef first_word_search_4(str1):\n    '''\n    Write a function to check if a string is a word or not.\n    '''\n    splitted_words = str1.split(\" \")\n    if len(splitted_words) == 0:\n        return False\n    elif len(splitted_words) == 1:\n        return True\n    else:\n        return True\n    \ndef first_word_search_5(str1):\n    '''\n    Write a function to check if a string is a word or not.\n    '''\n    splitted_words = str1.split(\" \")\n    if len(sp"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    str1 = list(filter(lambda x: re.match(r'^[A-Z][a-z]*', x), str1))\n    str1 =''.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z][a-z]{2,})\\b', r' \\1', str1)\n    str1 = re.sub(r'\\b([A-Z][a-z]{2,})\\b', r' \\1', str1)\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Since str is a sequence, so we use enumerate\n    # This will give us the index and value at the same time\n    for index, value in enumerate(nums_str):\n        try:\n            nums_str[index] = float(value)\n        except:\n            nums_str[index] = 0\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    # https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    def sort_numbers(nums):\n        '''\n        Write a function to sort a list of strings of numbers numerically.\n        '''\n        pattern = re.compile(r'\\d+')\n        items = pattern.findall(nums)\n        items = list(map(int, items))\n        return sorted(items)\n    return sort_numbers(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Sort the list of strings of numbers numerically\n    nums_str.sort()\n    \n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not isinstance(nums_str, list):\n        return nums_str\n    \n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda s: int(s))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=str_to_int)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(float(nums_str[i]))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split(\" \")\n    nums = list(map(int, nums))\n    nums.sort()\n    nums = [\"{}\".format(i) for i in nums]\n    nums_str = \" \".join(nums)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup\n        test_list[i] = tuple(test_list[i])\n    return test_list\n    \ndef add_sequence(test_list, test_seq):\n    '''\n    Write a function to add the given sequence to the given list.\n    '''\n    return list(map(lambda x, y: x + y, test_list, test_seq))\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_tup[0] == test_list[i]:\n            test_list[i] = test_list[i] + test_tup[1]\n            return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] < 0 or arr[i] >= len(arr):\n        return False\n    left, right = 2 * i + 1, 2 * i + 2\n    if left <= len(arr) and arr[i] > arr[left]:\n        return False\n    if right <= len(arr) and arr[i] > arr[right]:\n        return False\n    if left <= len(arr) and right <= len(arr) and arr[left] > arr[i] and arr[right] > arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if(len(arr) == 0):\n        return False\n    if(i >= len(arr)):\n        return True\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    \ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\n    \ndef heap_sort(arr):\n    heap_sort_helper(arr, len(arr) - 1)\n    return arr\n    \ndef heap_sort_helper(arr, last_index):\n    if(last_index < 0):\n        return\n    \n    build_min_heap(arr, last_index)\n    \n    for i in range(len(arr) - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heap_size = i\n        heap_sort_helper(arr, heap_size - 1)\n        \ndef build_min_heap(arr, last_index):\n    temp_index = last_index // 2\n    while(temp_index >= 0):\n        heap_sort_helper(arr, temp_index)\n        temp_index -= 1\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If array is not empty\n    if (i >= 0):\n        # If left child is greater than parent\n        if (arr[i * 2] > arr[i]):\n            return False\n        if (i * 2 + 1 >= len(arr)):\n            return True\n        # If left child is not greater than its right child\n        if (arr[i * 2] > arr[i * 2 + 1]):\n            return False\n        # Recursive call to check min heap with left and right child\n        return (check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1))\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n    while i * 2 <= n:\n        if arr[i] < arr[i * 2] or arr[i] < arr[i * 2 + 1]:\n            return False\n        i = i * 2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if n%2 == 0:\n        return -1\n    else:\n        left = 2*i + 1\n        right = 2*i + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    size = len(arr)\n    \n    if size % 2!= 0:\n        return False\n    \n    if size == 2:\n        return True\n    \n    if arr[0] > arr[2]:\n        return False\n    \n    return all(arr[i] > arr[i+1] for i in range(size-2))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    if arr[i] > arr[i - 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if (i == len(arr)):\n        return True\n    # recurrence relation\n    if (arr[i] > arr[2 * i] and arr[i] > arr[2 * i + 1]):\n        return True\n    elif (arr[i] > arr[2 * i + 1]):\n        return check_min_heap_helper(arr, 2 * i + 1)\n    elif (arr[i] > arr[2 * i + 2]):\n        return check_min_heap_helper(arr, 2 * i + 2)\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i>=len(arr):\n        return True\n    return (\n            arr[i]>arr[2*i] and\n            check_min_heap_helper(arr, 2*i+1) and\n            check_min_heap_helper(arr, 2*i+2))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == -1:\n        return True\n    # Edge case:\n    if i > len(arr) - 1:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(2,n+1):\n            x = (a+b) % 10\n            y = (a*b) % 10\n            a = b\n            b = x\n        return a\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 9\n    if n == 8:\n        return 29\n    if n == 9:\n        return 61\n    if n == 10:\n        return 121\n    if n == 11:\n        return 364\n    if n == 12:\n        return 729\n    if n == 13:\n        return 1456\n    if n == 14:\n        return 3025\n    if n == 15:\n        return 6561\n    if n == 16:\n        return 13231\n    if n == 17:\n        return 37783\n    if n == 18:\n        return 74803\n    if n == 19:\n        return 156735\n    if n == 20:\n        return 387939\n    if n == 21:\n        return 8295943\n    if n == 22:\n        return 17183529\n    if n == 23:\n        return 438767557\n    if n == 24:\n        return 83947187\n    if n == 25:\n        return 1798923521\n    if n == 26:\n        return 4984272833\n    if n == 27:\n        return 121792311\n    if n == 28:\n        return 4890433967\n    if n == 29:\n        return 12627904433\n    if n == 30:\n        return 4900782577\n    if n == 31:\n        return 1253284007\n    if n == 32:\n        return 55448828251\n    if n == 33:\n        return 1313393567\n    if n == 34:\n        return 467195559\n    if n == 35:\n        return 1369649893\n    if n == 36:\n        return 49131218351\n    if n == 37:\n        return 13737141955\n    if n == 38:\n        return 45940228667\n    if n == 39:\n        return 13991664651\n    if n == 40:\n        return 47825405667\n    if n == 41:\n        return 15485325555\n    if n == 42:\n        return 49849078333\n    if n == 43:\n        return 15013760823\n    if n == 44:\n        return 50440603397\n    if n == 45:\n        return 15107672291\n    if n == 46:\n        return 51916724481\n    if n == 47:\n        return 15286787557\n    if n == 48:\n        return 53572355321\n    if n == 49:\n        return 15636785151\n    if n == 50:\n        return 53864010769\n    if n == 51:\n        return 15855069489\n    if n == 52:\n        return 57396007441\n    if n == 53:\n        return 15992769073\n    if n == 54:\n        return 58325108451\n    if n == 55:\n        return 16041294587\n    if n == 56:\n        return 58424400743\n    if n == 57:\n        return 16095139281\n    if n == 58:\n        return 58991393273\n    if n == 59:\n        return 16245122449\n    if n == 60:\n        return 59945139421\n    if n == 61:\n        return 16493103383\n    if n == 62:\n        return 60512273027\n    if n == 63:\n        return 61544153343\n    if n == 64:\n        return 61894341453\n    if n == 65:\n        return 62471430353\n    if n == 66:\n        return 62917486583\n    if n == 67:\n        return 63570709321\n    if n == 68:\n        return 63998530293\n    if n == 69:\n        return 64621237681\n    if n == 70:\n        return 64989984343\n    if n == 71:\n        return 65552419931\n    if n == 72:\n        return 65995470483\n    if n == 73:\n        return 66489389551\n    if n == 74:\n        return 67534641957\n    if n == 75:\n        return 67857399179\n    if n == 76:\n        return 68426339729\n    if n == 77:\n        return 68967307933\n    if n == 78:\n        return 69272285883\n    if n == 79:\n        return 69655320599\n    if n == 80:\n        return 70038299539\n    if n == 81:\n        return 70323451283\n    if n == 82:\n        return 70874464391\n    if n == 83:\n        return 71325040773\n    if n == 84:\n        return 71479773357\n    if n == 85:\n        return 71847136621\n    if n == 86:\n        return 72333158543\n    if n == 87:\n        return 72821915685\n    if n == 88:\n        return 73050109361\n    if n == 89:\n        return 73669766393\n    if n == 90:\n        return 73938563559\n    if n == 91:\n        return 74321012973\n    if n == 92:\n        return 74810095859\n    if n == 93:\n        return 75340921637\n    if n == 94:\n        return 75721842143\n    if n == 95:\n        return 76300169233\n    if n == 96:\n        return 76728967843\n    if n == 97:\n        return 77214453943\n    if n == 98:\n        return 77493982681\n    if n == 99:\n        return 77558333943\n    if n == 100:\n        return 78235599443\n    if n == 101:\n        return 78827886769\n    if n == 102:\n        return 79327372483\n    if n == 103:\n        return 79838003843\n    if n == 104:\n        return 80329649533\n    if n == 105:\n        return 80940848383\n    if n == 106:\n        return 81535349021\n    if n == 107:\n        return 82012798693\n    if n == 108:\n        return 82568783533\n    if n == 109:\n        return 82959639929\n    if n == 110:\n        return 83476642961\n    if n == 111:\n        return 83885407963\n    if n == 112:\n        return 84271584683\n    if n == 113:\n        return 84960821219\n    if n == 114:\n        return 85544091719\n    if n == 115:\n        return 86332075457\n    if n == 116:\n        return 86967217997\n    if n == 117:\n        return 87575471597\n    if n == 118:\n        return 88529445903\n    if n == 119:\n        return 89217006519\n    if n == 120:\n        return 89888051219\n    if n == 121:\n        return 90440676721\n    if n == 122:\n        return 90947133059\n    if n == 123:\n        return 91614559821\n    if n == 124:\n        return 92339702487\n    if n == 125:\n        return 92937084743\n    if n == 126:\n        return 93435557943\n    if n == 127:\n        return 94042973181\n    if n == 128:\n        return 94538290821\n    if n == 129:\n        return 95032094121\n    if n == 130:\n        return 95532328593\n    if n == 131:\n        return 96189812691\n    if n == 132:\n        return 968402"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #n = 2\n    n = 1\n    q = 1\n    b = 0\n    while(q!=n):\n        b = (q+1)*(q+1)/4\n        q = q+1\n    return int(b)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    def jacobsthal_number(n):\n        if n == 0:\n            return 1\n        return (3*jacobsthal_number(n-1) + 1) / 2\n    \n    return jacobsthal_number(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def fac(n):\n        if n == 0:\n            return 1\n        return n * fac(n-1)\n    def jacobsthal(n):\n        return fac(2*n) / (fac(n)**2 * fac(n+1))\n    def lucas(n):\n        return fac(2*n + 1) / (fac(n)**2 * fac(n+1))\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    return jacobsthal(n-1) + lucas(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n_1 = 0\n    n_2 = 1\n    count = 0\n    while count < n:\n        count += 1\n        n_1, n_2 = n_2, n_1 + n_2\n    return n_2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return jacobsthal_num(n-1) + (jacobsthal_num(n-1) + 1) * (n - 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n1 = 1\n    n2 = 1\n    for i in range(1,n):\n        n3 = n1 + n2\n        n2 = n1\n        n1 = n3\n    return n3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = abs(n)\n    lucas = 1\n    jacobsthal = 2\n    if n == 1:\n        return lucas\n    elif n == 2:\n        return jacobsthal\n    else:\n        for i in range(3, n + 1):\n            lucas = lucas + jacobsthal\n            jacobsthal = lucas - jacobsthal\n    return lucas\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    for i in range(1,n):\n        a, b = b, (a+b) % 10\n    return (a+b) % 10\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(0,len(test_list),K):\n        min_k = sorted(test_list[i:i+K])[0]\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # 1st approach\n    # for i in range(0, len(test_list), K):\n    #     print(min(test_list[i:i+K]))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in range(K):\n        temp = test_list[0]\n        for j in range(len(test_list)):\n            if temp > test_list[j]:\n                temp = test_list[j]\n        min_k.append(temp)\n        test_list.remove(temp)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    def bubbleSort(test_list):\n        '''\n        This function is used for sorting the input list and returns the sorted list\n        '''\n        for i in range(len(test_list)):\n            for j in range(len(test_list)-1):\n                if test_list[j] > test_list[j+1]:\n                    temp = test_list[j]\n                    test_list[j] = test_list[j+1]\n                    test_list[j+1] = temp\n        return test_list\n    \n    \n    \n    def binarySearch(test_list, val):\n        '''\n        binary search to find the first occurance of the val in the list\n        '''\n        low = 0\n        high = len(test_list)-1\n        \n        while low <= high:\n            mid = (low+high)//2\n            if test_list[mid] == val:\n                return mid\n            elif test_list[mid] < val:\n                low = mid+1\n            else:\n                high = mid-1\n        return -1\n    \n    \n    def selectionSort(test_list):\n        '''\n        this function is used for sorting the list by selecting the first occuance of each value in the list\n        '''\n        for i in range(len(test_list)):\n            min_pos = i\n            for j in range(i,len(test_list)):\n                if test_list[j] < test_list[min_pos]:\n                    min_pos = j\n            test_list[i], test_list[min_pos] = test_list[min_pos], test_list[i]\n        return test_list\n    \n    \n    \n    def insertSort(test_list):\n        '''\n        insert sort function to sort list\n        '''\n        for i in range(len(test_list)):\n            j = i\n            while j > 0 and test_list[j] < test_list[j-1]:\n                test_list[j], test_list[j-1] = test_list[j-1], test_list[j]\n                j -= 1\n        return test_list\n    \n    \n    def partition(test_list, low, high):\n        '''\n        this function takes a range of list and partitions the list\n        '''\n        i = low-1\n        pivot = test_list[high]\n        for j in range(low, high):\n            if test_list[j] <= pivot:\n                i += 1\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n        test_list[i+1], test_list[high] = test_list[high], test_list[i+1]\n        return (i+1)\n    \n    \n    \n    def quickSort(test_list, low, high):\n        '''\n        this function performs a quick sort\n        '''\n        if len(test_list) == 1:\n            return test_list\n        if low < high:\n            pi = partition(test_list, low, high)\n            quickSort(test_list, low, pi-1)\n            quickSort(test_list, pi+1, high)\n    \n    \n    \n    def mergeSort(test_list):\n        '''\n        this function is used to divide the list into smaller partitions\n        and perform merge sort\n        '''\n        if len(test_list) > 1:\n            mid = len(test_list) // 2\n            lft = test_list[:mid]\n            rgt = test_list[mid:]\n            mergeSort(lft)\n            mergeSort(rgt)\n            i = j = k = 0\n            while i < len(lft) and j < len(rgt):\n                if lft[i] < rgt[j]:\n                    test_list[k] = lft[i]\n                    i += 1\n                else:\n                    test_list[k] = rgt[j]\n                    j += 1\n                k += 1\n            while i < len(lft):\n                test_list[k] = lft[i]\n                i += 1\n                k += 1\n            while j < len(rgt):\n                test_list[k] = rgt[j]\n                j += 1\n                k += 1\n    \n    \n    \n    def heapify(test_list, n, i):\n        largest = i\n        l = 2*i+1\n        r = 2*i+2\n        if l < n and test_list[largest] < test_list[l]:\n            largest = l\n        if r < n and test_list[largest] < test_list[r]:\n            largest = r\n        if largest!= i:\n            test_list[i], test_list[largest] = test_list[largest], test_list[i]\n            heapify(test_list, n, largest)\n    \n    \n    def heapSort(test_list):\n        n = len(test_list)\n        for i in range(n//2 -1, -1, -1):\n            heapify(test_list, n, i)\n        for i in range(n-1, 0, -1):\n            test_list[i], test_list[0] = test_list[0], test_list[i]\n            heapify(test_list, i, 0)\n    \n    \n    \n    def merge(test_list, low, mid, high):\n        '''\n        this function merges the elements of the lists\n        '''\n        i = low\n        j = mid + 1\n        k = low\n        while i <= mid and j <= high:\n            if test_list[i] <= test_list[j]:\n                test_list[k] = test_list[i]\n                i += 1\n            else:\n                test_list[k] = test_list[j]\n                j += 1\n            k += 1\n        while i <= mid:\n            test_list[k] = test_list[i]\n            i += 1\n            k += 1\n        while j <= high:\n            test_list[k] = test_list[j]\n            j += 1\n            k += 1\n    \n    \n    \n    def mergeSort(test_list, low, high):\n        '''\n        this function is used to sort the list in the merge sort\n        '''\n        if low < high:\n            mid = (low+high)//2\n            mergeSort(test_list, low, mid)\n            mergeSort(test_list, mid+1, high)\n            merge(test_list, low, mid, high)\n    \n    \n    \n    def quickSort3(alist, low, high):\n        '''\n        this function is used to implement quick sort in python\n        '''\n        if low < high:\n            pi = partition3(alist, low, high)\n            quickSort3(alist, low, pi-1)\n            quickSort3(alist, pi+1, high)\n    \n    \n    def partition3(alist, low, high):\n        '''\n        this function is used to partition the list in the quick sort\n        '''\n        i = low - 1\n        pivot = alist[high]\n        for j in range(low, high):\n            if alist[j] <= pivot:\n                i += 1\n                alist[i], alist[j] = alist[j], alist[i]\n        alist[i+1], alist[high] = alist[high], alist[i+1]\n        return (i+1)\n    \n    \n    \n    def quickSort4(alist, low, high):\n        '''\n        this function is used to implement quick sort in python\n        '''\n        if low < high:\n            pi = partition4(alist, low, high)\n            quickSort4(alist, low, pi-1)\n            quickSort4(alist, pi+1, high)\n    \n    \n    def partition4(alist, low, high):\n        '''\n        this function is used to partition the list in the quick sort\n        '''\n        i = low - 1\n        pivot = alist[high]\n        for j in range(low, high):\n            i"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k_min = []\n    for i in range(K):\n        min_val = min(test_list, key=lambda x: x[i])\n        k_min.append(min_val)\n        test_list.remove(min_val)\n    return k_min\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # try:\n    #     assert isinstance(test_list, list)\n    #     assert isinstance(K, int)\n    #     assert K >= 0\n    # except AssertionError:\n    #     raise Exception(\"Error: Please enter a valid value for test_list and K\")\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda k: k[1])\n    print(test_list)\n    if test_list[0][1] == K:\n        return test_list[0]\n    for k in range(K):\n        if test_list[k][1] < test_list[k+1][1]:\n            return test_list[k]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    return min(test_list, key=lambda tup: tup[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list by value\n    test_list.sort()\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    result = ()\n    for i in range(K):\n        temp = min(test_list, key=lambda x: x[i])\n        result += (temp,)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] == l3[j]:\n                index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        if l1.count(l1[index]) == 3 and l2.count(l2[index]) == 3 and l3.count(l3[index]) == 3:\n            index_list.append(index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l1_index = {}\n    l2_index = {}\n    l3_index = {}\n    for i, j, k in zip(l1, l2, l3):\n        if i not in l1_index:\n            l1_index[i] = j\n        if j not in l2_index:\n            l2_index[j] = k\n        if k not in l3_index:\n            l3_index[k] = i\n    l1_index = list(l1_index.keys())\n    l2_index = list(l2_index.keys())\n    l3_index = list(l3_index.keys())\n    common_index = []\n    for i in range(0, len(l1)):\n        if l1_index[i] in l2_index:\n            if l1_index[i] in l3_index:\n                common_index.append(i)\n    return common_index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    index_list1 = []\n    index_list2 = []\n    index_list3 = []\n    for i in range(len(l1)):\n        index_list1.append(i)\n        index_list2.append(i)\n        index_list3.append(i)\n    for i in range(len(l2)):\n        if l1.count(l2[i]) > 0:\n            index_list.append(l1.index(l2[i]))\n    for i in range(len(l3)):\n        if l1.count(l3[i]) > 0:\n            index_list.append(l1.index(l3[i]))\n    index_list.sort()\n    return index_list\n    \nprint(extract_index_list(['blue','red', 'blue', 'green', 'white', 'yellow'], ['red', 'blue', 'white'], ['blue', 'yellow']))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    \ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[2]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    if len(numbers) == 0:\n        raise ValueError('List must not be empty')\n    elif len(numbers) == 1:\n        return numbers[0]\n    \n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    assert numbers, \"Input list is empty\"\n    assert (\n        all(isinstance(n, int) for n in numbers)\n        ), \"Only integer input types are accepted\"\n    assert all(numbers), \"Empty or None input types are accepted\"\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return sorted(numbers)[1]\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    min_index = 0\n    min_val = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] <= min_val:\n            min_index = i\n            min_val = numbers[i]\n    return min_val\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers,key=lambda x:numbers.count(x))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=numbers.count)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a{1,}b', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('a+b', text)\n    return match.span()[0]\n    \nprint(text_match_zero_one('ab'))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_one = re.search(r'a+b+',text)\n    match_zero = re.search(r'a+b',text)\n    if match_one:\n        return \"one\"\n    elif match_zero:\n        return \"zero\"\n    else:\n        return \"neither\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r'a(b)+',text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #result = re.match('a+b', text)\n    result = re.findall('a+b', text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return \"Match found: \"+pattern.search(text).group()\n    else:\n        return \"Not found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    string = re.search(pattern,text)\n    return string!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a(b)', text)\n    if match:\n        return match.group(0)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"ab\")\n    m = pattern.search(text)\n    if m:\n        return (True,m.span())\n    else:\n        return (False, None)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n    "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                continue\n            else:\n                if test_list[i] + test_list[j] == test_list[j] + test_list[i]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    list_set = set(test_list)\n    count = 0\n    for i in list_set:\n        for j in list_set:\n            if i == j:\n                break\n            else:\n                if i + j == j + i:\n                    count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort(key=lambda x: x[::-1])\n    print(test_list)\n    count = 0\n    for i in range(0,len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0,len(test_list)-1,1):\n        for j in range(i+1,len(test_list),1):\n            if test_list[i] == test_list[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # print(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Code here\n    s = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                s += 1\n    return s\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Python3 program to count number of\n    #  pairs of reverse strings in a\n    #  list of strings\n    # Returns the number of pairs of\n    #  reverse strings in the list\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_list = test_list[::-1]\n    result_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(rev_list)):\n            if test_list[i] == rev_list[j]:\n                result_list.append((test_list[i], rev_list[j]))\n                break\n    return len(result_list)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list(list1)\n    list3 = []\n    for i in range(len(list2)):\n        list3.append(tuple(list2[i]))\n    list4 = list(set(list3))\n    d = {}\n    for i in range(len(list4)):\n        d[list4[i]] = list2.count(list4[i])\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1[i]):list1.count(list1[i]) for i in range(len(list1))}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    x = {}\n    for i in range(len(list1)):\n        x[tuple(list1[i])] = 0\n    for i in range(len(list1)):\n        x[tuple(list1[i])] += 1\n    return x\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(list1)\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for l in list1:\n        if l not in dict1.keys():\n            dict1[tuple(l)] = 1\n        else:\n            dict1[tuple(l)] += 1\n    return dict1\n    \nprint(unique_sublists([1, 2, 2, 3, 4, 1, 2, 2, 2]))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_to_hash = {str(i): list1.count(i) for i in list1}\n    return list_to_hash\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l = []\n    for sublist in list1:\n        l.append(tuple(sublist))\n    print(set(l))\n    return {i: l.count(i) for i in l}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        d[l] = d.get(l,0)+1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # TIP:\n    # Decimal Numbers can be considered as binary numbers.\n    # Therefore, we can use binary operators to perform binary operations.\n    \n    # Example:\n    # is_decimal('0.1') -> True\n    # is_decimal('0.9') -> False\n    \n    try:\n        float(num)\n    except:\n        return False\n    \n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    isDecimal = False\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    if num == int(num):\n        isDecimal = True\n        return isDecimal\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str(num).replace(\".\",\"\").replace(\"-\",\"\").isdigit() and len(str(num).split(\".\")[1])==2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' in num:\n            return float(num)\n        return int(num)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = '0.' + str(num)\n    return float(n) == round(float(n),2)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num[-1] == '.':\n        num = num[:-1]\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num == float(num) and int(num) == round(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return num == float(num)\n    except:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(1,len(arr)):\n        if(arr[i]==arr[i-1]):\n            return False\n    return True\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for x in arr:\n        if x in seen:\n            return False\n        else:\n            seen.add(x)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a=[]\n    for i in range(len(arr)):\n        if arr[i] in a:\n            return False\n        else:\n            a.append(arr[i])\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_obj = set(arr)\n    if len(set_obj) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #For loop\n    unique_elements = []\n    for i in arr:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    c = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                c += 1\n    if c == 1:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 % 4 == 0 and monthnum3 % 100!= 0 ) or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n    months_30 = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    return months_30.get(monthnum3, 'Invalid month number')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 2:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            if monthnum3 == 2:\n                if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == '1' or monthnum3 == '2' or monthnum3 == '3' or monthnum3 == '4' or monthnum3 == '5' or monthnum3 == '6' or monthnum3 == '7' or monthnum3 == '8' or monthnum3 == '9' or monthnum3 == '10' or monthnum3 == '11' or monthnum3 == '12'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n    \ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef check_sum_of_numbers(number1, number2):\n    '''\n    Write a function to check whether the given two numbers add up to zero or not.\n    '''\n    if number1 + number2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"This month has 31 days.\")\n    else:\n        print(\"This month has 30 days.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # your code here\n    month_30days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in month_30days:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,3):\n        return 'No'\n    elif monthnum3 in range(3,6):\n        return 'Yes'\n    elif monthnum3 in range(6,9):\n        return 'Yes'\n    elif monthnum3 in range(9,12):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    result = sys.maxsize\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] < arr[j]:\n                result = min(result,arr[i]-arr[j])\n    return result\n    \n    \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, arr[i]-arr[j])\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return None\n    arr.sort()\n    return abs(arr[0]-arr[n-1])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    if n == 0:\n        return -1\n    arr.sort()\n    print(arr)\n    diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Pick first element and second element as minimum\n    # and initialize difference.\n    min_diff = float(\"inf\")\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        curr_min_diff = arr[i+1] - arr[i]\n        if curr_min_diff < min_diff:\n            min_diff = curr_min_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    #c=a[0]\n    min_diff = arr[1]-arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]+min_diff:\n            min_diff = arr[i]-arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[1]-arr[0])\n    for i in range(1,len(arr)-1):\n        \n        diff = abs(arr[i]-arr[i+1])\n        if(diff < min_diff):\n            min_diff = diff\n    return min_diff\n    \nif __name__ == \"__main__\":\n    \n    arr = [1,3,15,10,5]\n    n = len(arr)\n    print(find_min_diff(arr,n))"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\nprint(number_ctr('Hari is a good day'))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str1 = str.strip()\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] >= '0' and str1[i] <= '9':\n            count += 1\n    print(count)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    sum = 0\n    for ch in str:\n        if ch.isdigit():\n            sum += 1\n    return sum\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)-len(str.lstrip(' '))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr = 0\n    for i in str:\n        if i.isdigit():\n            num_ctr += 1\n    return num_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.strip())\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    else:\n        return 7\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def factorial(n): \n        if n == 1: \n            return 1\n        else: \n            return n * factorial(n - 1) \n    def binomialCoeff(n, k): \n        b = math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) \n        return b \n    def nth_polite_number(n): \n        k = 1\n        b = 0\n        while b!= n: \n            b = n * k + 1\n            k += 1\n        return k - 1\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 0:\n        return 0\n    \n    def is_prime(n):\n        # Check for prime numbers\n        if (n > 1):\n            # Iterate from 2 to n/2\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return False\n        return True\n    \n    def is_greater(a, b):\n        if a < b:\n            return True\n        return False\n    \n    if n % 2 == 1:\n        return False\n    \n    # n is even\n    for i in range(0, n, 2):\n        if is_prime(i) and is_prime(n - i):\n            if is_greater(n - i, i):\n                return n - i\n    return False\nprint(is_polite(5))"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    while True:\n        if is_polite_helper(num):\n            return num\n        num += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_factors = []\n    # Using list comprehension to find out prime factors of n\n    prime_factors = [i for i in range(1,n+1) if n % i == 0]\n    # print(\"Prime factors of n are: \",prime_factors)\n    if len(prime_factors) > 1:\n        return(prime_factors[-2]+1)\n    elif len(prime_factors) == 1:\n        return (prime_factors[0]+1)\n    else:\n        return 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n_array = [1, 2, 4]\n    i = 3\n    while True:\n        if n <= i:\n            return i\n        n_array.append(i)\n        i += 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2==0:\n        return n**2\n    else:\n        return n**2+1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    max_polite = 3 * (2 * n - 1)\n    return max_polite\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    if n == 1:\n        return 1\n    polite = [0]*n\n    polite[0] = 1\n    polite[1] = 2\n    for i in range(2, n):\n        polite[i] = polite[i-1] + polite[i-2]\n    return polite[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 176:\n        return 177\n    if n == 177:\n        return 178\n    if n == 178:\n        return 179\n    if n == 179:\n        return 180\n    if n == 180:\n        return 181\n    if n == 181:\n        return 182\n    if n == 182:"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            a = l1[i]\n            b = l1[i + 1]\n            l.append((a,b))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l1 = set(l1)\n    for i in range(len(l1)):\n        for j in range(i,len(l1)):\n            if l1[i]+1 == l1[j] and l1[i]!= l1[j]:\n                l2.append((l1[i],l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #l1 = [1, 3, 4, 5]\n    #l2 = []\n    #l3 = []\n    #l4 = []\n    #l5 = []\n    #l6 = []\n    #l7 = []\n    #l8 = []\n    #l9 = []\n    #l10 = []\n    #l11 = []\n    #l12 = []\n    #l13 = []\n    #l14 = []\n    #l15 = []\n    #l16 = []\n    #l17 = []\n    #l18 = []\n    #l19 = []\n    #l20 = []\n    #l21 = []\n    #l22 = []\n    #l23 = []\n    #l24 = []\n    #l25 = []\n    #l26 = []\n    #l27 = []\n    #l28 = []\n    #l29 = []\n    #l30 = []\n    #l31 = []\n    #l32 = []\n    #l33 = []\n    #l34 = []\n    #l35 = []\n    #l36 = []\n    #l37 = []\n    #l38 = []\n    #l39 = []\n    #l40 = []\n    #l41 = []\n    #l42 = []\n    #l43 = []\n    #l44 = []\n    #l45 = []\n    #l46 = []\n    #l47 = []\n    #l48 = []\n    #l49 = []\n    #l50 = []\n    #l51 = []\n    #l52 = []\n    #l53 = []\n    #l54 = []\n    #l55 = []\n    #l56 = []\n    #l57 = []\n    #l58 = []\n    #l59 = []\n    #l60 = []\n    #l61 = []\n    #l62 = []\n    #l63 = []\n    #l64 = []\n    #l65 = []\n    #l66 = []\n    #l67 = []\n    #l68 = []\n    #l69 = []\n    #l70 = []\n    #l71 = []\n    #l72 = []\n    #l73 = []\n    #l74 = []\n    #l75 = []\n    #l76 = []\n    #l77 = []\n    #l78 = []\n    #l79 = []\n    #l80 = []\n    #l81 = []\n    #l82 = []\n    #l83 = []\n    #l84 = []\n    #l85 = []\n    #l86 = []\n    #l87 = []\n    #l88 = []\n    #l89 = []\n    #l90 = []\n    #l91 = []\n    #l92 = []\n    #l93 = []\n    #l94 = []\n    #l95 = []\n    #l96 = []\n    #l97 = []\n    #l98 = []\n    #l99 = []\n    #l100 = []\n    #l101 = []\n    #l102 = []\n    #l103 = []\n    #l104 = []\n    #l105 = []\n    #l106 = []\n    #l107 = []\n    #l108 = []\n    #l109 = []\n    #l110 = []\n    #l111 = []\n    #l112 = []\n    #l113 = []\n    #l114 = []\n    #l115 = []\n    #l116 = []\n    #l117 = []\n    #l118 = []\n    #l119 = []\n    #l120 = []\n    #l121 = []\n    #l122 = []\n    #l123 = []\n    #l124 = []\n    #l125 = []\n    #l126 = []\n    #l127 = []\n    #l128 = []\n    #l129 = []\n    #l130 = []\n    #l131 = []\n    #l132 = []\n    #l133 = []\n    #l134 = []\n    #l135 = []\n    #l136 = []\n    #l137 = []\n    #l138 = []\n    #l139 = []\n    #l140 = []\n    #l141 = []\n    #l142 = []\n    #l143 = []\n    #l144 = []\n    #l145 = []\n    #l146 = []\n    #l147 = []\n    #l148 = []\n    #l149 = []\n    #l150 = []\n    #l151 = []\n    #l152 = []\n    #l153 = []\n    #l154 = []\n    #l155 = []\n    #l156 = []\n    #l157 = []\n    #l158 = []\n    #l159 = []\n    #l160 = []\n    #l161 = []\n    #l162 = []\n    #l163 = []\n    #l164 = []\n    #l165 = []\n    #l166 = []\n    #l167 = []\n    #l168 = []\n    #l169 = []\n    #l170 = []\n    #l171 = []\n    #l172 = []\n    #l173 = []\n    #l174 = []\n    #l175 = []\n    #l176 = []\n    #l177 = []\n    #l178 = []\n    #l179 = []\n    #l180 = []\n    #l181 = []\n    #l182 = []\n    #l183 = []\n    #l184 = []\n    #l185 = []\n    #l186 = []\n    #l187 = []\n    #l188 = []\n    #l189 = []\n    #l190 = []\n    #l191 = []\n    #l192 = []\n    #l193 = []\n    #l194 = []\n    #l195 = []\n    #l196 = []\n    #l197 = []\n    #l198 = []\n    #l199 = []\n    #l200 = []\n    #l201 = []\n    #l202 = []\n    #l203 = []\n    #l204 = []\n    #l205 = []\n    #l206 = []\n    #l207 = []\n    #l208 = []\n    #l209 = []\n    #l210 = []\n    #l211 = []\n    #l212 = []\n    #l213 = []\n    #l214 = []\n    #l215 = []\n    #l216 = []\n    #l217 = []\n    #l218 = []\n    #l219 = []\n    #l220 = []\n    #l221 = []\n    #l222 = []\n    #l223 = []\n    #l224 = []\n    #l225 = []\n    #l226 = []\n    #l227 = []\n    #l228 = []\n    #l229 = []\n    #l230 = []\n    #l231 = []\n    #l232 = []\n    #l233 = []\n    #l234 = []\n    #l235 = []\n    #l236 = []\n    #l237 = []\n    #l238 = []\n    #l239 = []\n    #l240 = []\n    #l241 = []\n    #l242 = []\n    #l243 = []\n    #l244 = []\n    #l245 = []\n    #l246 = []\n    #l247 = []\n    #l248 = []\n    #l249 = []\n    #l250 = []\n    #l251 = []\n    #l252 = []\n    #l253 = []\n    #l254 = []\n    #l255 = []\n    #l256 = []\n    #l257 = []\n    #l258 = []\n    #l259 = []\n    #l260 = []\n    #l261 = []\n    #l262 = []\n    #l263 = []\n    #l264 = []\n    #l265 = []\n    #l266 = []\n    #l267 = []\n    #l268 = []\n    #l269 = []\n    #l270 = []\n    #l271 = []\n    #l272 = []\n    #l273 = []\n    #l274 = []\n    #l275 = []\n    #l276 = []\n    #l277 = []\n    #l278 = []\n    #l279 = []\n    #l280 = []\n    #l281 = []\n    #l282 = []\n    #l283 = []\n    #l284 = []\n    #l285 = []\n    #l286 = []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = []\n    list1 = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        list1.append(l1[i])\n        list1.append(l1[i+1])\n    return list1\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    return [[x, y] for x in l1 for y in l1 if x < y]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    l2 = l1\n    for i in range(len(l2)-1):\n        result.append([l2[i],l2[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    for i in range(0,len(l1)):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    l = []\n    while i < len(l1)-1:\n        l.append([l1[i], l1[i+1]])\n        i += 2\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return l1\n    l1_copy = l1[:]\n    l1_copy.sort()\n    pairs = []\n    for i in range(len(l1_copy)):\n        pairs.append(l1_copy[i])\n        if i < len(l1_copy) - 1:\n            pairs.append(l1_copy[i+1])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pw = []\n    if not l1:\n        return pw\n    for i in range(len(l1) - 1):\n        pw.append((l1[i], l1[i+1]))\n    return pw\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    arr.sort()\n    start = 0\n    end = len(arr)-1\n    while (start < end):\n        if (arr[start] + arr[end] == sum):\n            pairs = pairs + 1\n            start = start + 1\n        elif (arr[start] + arr[end] < sum):\n            start = start + 1\n        elif (arr[start] + arr[end] > sum):\n            end = end - 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(arr[i]+arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #print(arr)\n    count=0\n    for i in range(len(arr)):\n        #print(i)\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count+=1\n                #print(arr[i], arr[j])\n                \n    return count\n        \n        \n        \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = list(li1)\n    for i in li2:\n        if i not in li:\n            li.append(i)\n    print(li)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    li = []\n    for i in li1:\n        if i not in li2:\n            li.append(i)\n    return li\n    \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=[]\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif_list = []\n    for i in li1:\n        if i not in li2:\n            dif_list.append(i)\n    return dif_list\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = set(li1)\n    li2 = set(li2)\n    li3 = li1 - li2\n    li4 = li2 - li1\n    li5 = li3.union(li4)\n    return list(li5)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    newList = []\n    for ele in li1:\n        if ele not in li2:\n            newList.append(ele)\n    for ele in li2:\n        if ele not in li1:\n            newList.append(ele)\n    return newList\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li=[]\n    for i in li1:\n        if i not in li2:\n            li.append(i)\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    for i in li2:\n        if i not in li1:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    li3=[]\n    for i in range(0,len(li1)):\n        if li1[i] not in li2:\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d=[]\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += (i**4)\n    return sum\n    \n    \ndef two_odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n,n+4):\n        if i%2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    if n%2==0 :\n        return 0\n    else :\n        sum = 0\n        for i in range(1,n+1,2) :\n            sum += i**2\n        return sum\n        \nprint(odd_num_sum(4))\nprint(odd_num_sum(7))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # function to find sum of fourth power of first n odd natural numbers\n    def odd_num_sum(n):\n        count = 0\n        sum_odd = 0\n        # this loop is for calculating sum\n        for i in range(1,n+1,2):\n            count = count+1\n            sum_odd = sum_odd + i**4\n        return sum_odd\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if(n<1): \n        return \"No input\"\n    else : \n        odd_numbers = [] \n        for i in range(1,n+1): \n            if i % 2!= 0 : \n                odd_numbers.append(i) \n        return sum(odd_numbers)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        if i%2!=0:\n            sum=sum+i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(i%2!= 0):\n            sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = list(filter(lambda num:num % 2 == 1, range(n)))\n    return sum([num ** 4 for num in odd_nums])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_num=0\n    for i in range(1,n+1) :\n        if i%2==1 :\n            sum_num+=i**4\n    return sum_num\nprint(\"Pass\" if (odd_num_sum(3) == 14) else \"Fail\")\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    map = {')': '(', ']': '[', '}': '{'}\n    for ch in exp:\n        if ch in map:\n            if stack:\n                top = stack.pop()\n                if map[ch]!= top:\n                    return False\n            else:\n                return False\n        else:\n            stack.append(ch)\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # push open brackets onto stack\n    s = deque()\n    for c in exp:\n        if c == '(':\n            s.append(c)\n        else:\n            if not s:\n                return False\n            s.pop()\n    return len(s) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # exp = '((((()()))(())'\n    # exp = '((((())()))()'\n    # exp = '((((()()))(()))(()))'\n    # exp = '((((((()()))(())()))(()))(()))(()))'\n    # exp = '(((((((()()))((())()))))(()))((()))'\n    # exp = '(((((((((()()))(((()()))(()))))(()))))(()))(((()))'\n    # exp = '(((((((((((()()))(((()()))(()))))(()))))(()))))((()))'\n    # exp = '(((((((((((((()()))(((()()))(((()))))(()))))(()))))(()))))(((()))'\n    # exp = '(((((((((((((((()()))(((()()))(()))))(()))))(()))))(()))(()))))(()))'\n    # exp = '(((((((((((((((()()))(((()()))((()))))(()))))(()))))(()))(())))))'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp_stack = []\n    exp_queue = deque()\n    exp_queue.append(\"(\" )\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(0, len(exp)):\n        if exp[i] == \"(\":\n            stack.append(i)\n        elif exp[i] == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '[' or ch == '{':\n            stack.append(ch)\n        else:\n            if len(stack) == 0:\n                return False\n            last = stack.pop()\n            if ((last == '(' and ch == ')') or (last == '[' and ch == ']') or (last == '{' and ch == '}')):\n                continue\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left = {'(': ')', '[': ']', '{': '}'}\n    right = {')': '(', ']': '[', '}': '{'}\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == left[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '}':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef check_open_parenthesis(exp):\n    stack = []\n    left = {'(': ')', '[': ']', '{': '}'}\n    right = {')': '(', ']': '[', '}': '{'}\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == left[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '}':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef is_postfix_equal(op,exp):\n    exp = deque(exp)\n    op = deque(op)\n    while len(op)!= 0 or len(exp)!= 0:\n        if len(op) == 0:\n            return False\n        elif len(exp) == 0:\n            return False\n        if op[0] == '*':\n            if exp[0] == '*':\n                op.popleft()\n                exp.popleft()\n            elif exp[0] == '+':\n                op.popleft()\n                exp.popleft()\n            else:\n                return False\n        elif op[0] == '+':\n            if exp[0] == '*':\n                op.popleft()\n                exp.popleft()\n            elif exp[0] == '+':\n                op.popleft()\n                exp.popleft()\n            else:\n                return False\n        elif op[0] == '*':\n            if exp[0] == '*':\n                op.popleft()\n                exp.popleft()\n            elif exp[0] == '+':\n                op.popleft()\n                exp.popleft()\n            else:\n                return False\n        else:\n            if exp[0] == '+':\n                op.popleft()\n                exp.popleft()\n            elif exp[0] == '*':\n                op.popleft()\n                exp.popleft()\n            else:\n                return False\n    return True\ndef convert_to_postfix(exp):\n    exp = deque(exp)\n    op_list = []\n    while len(exp)!= 0:\n        if len(exp) == 0:\n            return False\n        if exp[0] == '+' or exp[0] == '*':\n            op_list.append(exp.popleft())\n        elif exp[0] == ')':\n            op_list.append(exp.popleft())\n            while len(op_list)!= 0 and op_list[-1]!= '(':\n                op_list.append(exp.popleft())\n            op_list.pop()\n        elif exp[0] == '-':\n            op_list.append(exp.popleft())\n            if len(op_list)!= 0:\n                while len(op_list)!= 0 and op_list[-1]!= '-':\n                    op_list.append(exp.popleft())\n                op_list.pop()\n        else:\n            return False\n    if len(op_list)!= 0:\n        return False\n    return True\ndef check_doubly_parenthesis(exp):\n    stack = []\n    left = {'(': ')', '[': ']', '{': '}'}\n    right = {')': '(', ']': '[', '}': '{'}\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == left[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '}':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef is_equal_parenthesis(exp):\n    left = {'(': ')', '[': ']', '{': '}'}\n    right = {')': '(', ']': '[', '}': '{'}\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == left[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '}':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef convert_to_inorder(exp):\n    stack = []\n    left = {'(': ')', '[': ']', '{': '}'}\n    right = {')': '(', ']': '[', '}': '{'}\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == left[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == right[exp[i]]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] == '}':\n            if len(stack) == 0:\n                return Fals"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket_par = '({['\n    bracket_par = ')}]'\n    oper_par = ['+','-','*','/']\n    oper_par = ['+','*','-']\n    stack = []\n    # stack2 = []\n    for i in exp:\n        if i in bracket_par:\n            stack.append(i)\n        elif i in oper_par:\n            if len(stack)==0:\n                return False\n            op = stack.pop()\n            if op == '(':\n                if i == ')':\n                    continue\n                else:\n                    return False\n            elif op == ')':\n                if i == '(':\n                    continue\n                else:\n                    return False\n            elif op == '+':\n                if i == '*' or i == '/':\n                    continue\n                else:\n                    return False\n            elif op == '-':\n                if i == '*' or i == '/':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    # for i in stack:\n    #     stack2.append(i)\n    # return stack2 == []\n    return len(stack) == 0\n    '''\n    def recur(exp,s):\n        if len(exp) == 0:\n            return True\n        if exp[0] == '(':\n            if len(exp) == 1:\n                return False\n            else:\n                exp = exp[1:]\n        if exp[0] in oper_par:\n            if len(exp) == 1:\n                return False\n            else:\n                exp = exp[1:]\n            return recur(exp,s)\n        if exp[0] in oper_par:\n            if len(exp) == 1:\n                return False\n            else:\n                exp = exp[1:]\n            return recur(exp,s)\n        else:\n            s.append(exp[0])\n            exp = exp[1:]\n            return recur(exp,s)\n    s = []\n    return recur(exp,s)\n    '''"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    is_valid = True\n    stk = []\n    for i in range(len(exp)):\n        c = exp[i]\n        if(c == '(' or c == '[' or c == '{'):\n            stk.append(c)\n        elif(c == ')' or c == ']' or c == '}'):\n            if(len(stk) == 0):\n                is_valid = False\n                break\n            else:\n                top = stk.pop()\n                if((top == '(' and c == ')') or (top == '[' and c == ']') or (top == '{' and c == '}')):\n                    continue\n                else:\n                    is_valid = False\n                    break\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    word_list = list(dict.fromkeys(word_list))\n    #word_list = remove_duplicate(word_list)\n    return word_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    i = 0\n    for j in range(len(test_str)):\n        if j == test_str.index(' ',i):\n            test_str = test_str[:j] + test_str[j+1:]\n        if test_str[j] =='':\n            i = j+1\n            continue\n        if j > K-1:\n            break\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for i in test_str:\n        if len(i) == K:\n            res.append(i)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return ''.join(x for x in test_str if len(x)!= K)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return \"\"\n    \n    if K <= 0:\n        return \"\"\n    \n    split_str = test_str.split()\n    \n    temp_str = \"\"\n    for i in range(len(split_str)):\n        if len(split_str[i])!= K:\n            temp_str = temp_str + split_str[i] + \" \"\n    \n    return temp_str[0:-1]\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # create a stack to store the words\n    stack = []\n    # iterate through the string\n    for i in range(len(test_str)):\n        # check if the current character is a space\n        if test_str[i] =='':\n            # if it is a space, check if the current word length is k\n            if len(stack) == K:\n                # if so, pop the word off the stack and continue\n                stack.pop()\n                continue\n            # else, add the word to the stack\n            else:\n                continue\n        # add the word to the stack\n        stack.append(test_str[i])\n    # return the string with all words removed with length k\n    return''.join(stack)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    result = []\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp = \"\"\n    for i in range(0, len(test_str)):\n        if len(temp) < K:\n            temp += test_str[i]\n        else:\n            break\n    return test_str.replace(temp,\"\")\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # remove length of 1, length of 2, etc\n    for length in range(1,K+1):\n        for word in test_str.split():\n            if len(word)==length:\n                test_str = test_str.replace(word,\"\")\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in words:\n        if len(i) == K:\n            words.remove(i)\n    return words\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    occurrence = None\n    i = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            print(occurrence)\n            break\n        i += 1\n    return occurrence\n    \ndef count_substring(text,pattern):\n    '''\n    Write a function to count the occurrence of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    occ_count = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            occ_count += 1\n        i += 1\n    return occ_count\n    \ndef occurance_and_count_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    occurrence = None\n    i = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            break\n        i += 1\n    occ_count = None\n    if occurrence!= None:\n        occ_count = count_substring(text,pattern)\n    return occurrence, occ_count\n    \ndef word_occurance(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    occ_count = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            occ_count += 1\n        i += 1\n    return occ_count\n    \ndef occurance_and_count_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            break\n        i += 1\n    occ_count = None\n    if occurrence!= None:\n        occ_count = word_occurance(text,pattern)\n    return occurrence, occ_count\n    \ndef occurance_and_count_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    occ_count = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            occ_count += 1\n        i += 1\n    return occ_count\n    \ndef occurrences(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    occ_count = 0\n    while i < len(text):\n        if re.search(pattern, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            occ_count += 1\n        i += 1\n    return occ_count\n    \ndef match_word(word,text):\n    '''\n    Write a function to match the first occurence of the word within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    while i < len(text):\n        if re.search(word, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            break\n        i += 1\n    return occurrence\n    \ndef match_substring(substring,text):\n    '''\n    Write a function to match the first occurence of the substring within a string. Return None if there is no match.\n    '''\n    occurrence = None\n    i = 0\n    while i < len(text):\n        if re.search(substring, text[i:]):\n            occurrence = text[i:]\n            occurrence = text[i:]\n            break\n        i += 1\n    return occurrence\n    \ndef skip_white_space(text):\n    '''\n    Write a function to skip white space characters. Return the string in no specific order.\n    '''\n    pass\ndef skip_white_space(text):\n    '''\n    Write a function to skip white space characters. Return the string in no specific order.\n    '''\n    pass\n    \ndef skip_symbols(text):\n    '''\n    Write a function to skip symbols. Return the string in no specific order.\n    '''\n    pass\ndef skip_symbols(text):\n    '''\n    Write a function to skip symbols. Return the string in no specific order.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    list_occ=[]\n    list_position=[]\n    string=text.split(\" \")\n    pattern=pattern.split(\" \")\n    for i in range(0,len(string)):\n        for j in range(0,len(pattern)):\n            if string[i][0:len(pattern[j])]==pattern[j]:\n                list_occ.append(pattern[j])\n                list_position.append(i)\n    if len(list_occ)==0:\n        return None\n    else:\n        return list_occ,list_position\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text)\n    pattern_list=pattern.split(' ')\n    pattern_list = sorted(pattern_list,key=len,reverse=True)\n    print(pattern_list)\n    flag=0\n    count=0\n    pos=[]\n    # for i in range(0,len(text)-len(pattern)+1):\n    for i in range(0,len(text)):\n        if text[i:i+len(pattern)]==pattern:\n            count+=1\n            pos.append(i)\n        if count==len(pattern_list):\n            flag=1\n            break\n        if count>len(pattern_list):\n            flag=0\n            break\n    if flag==0:\n        return None\n    else:\n        return [pattern_list,pos]\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    pos = 0\n    for i in range(len(text)-len(pattern)+1):\n        if pattern == text[i:i+len(pattern)]:\n            count += 1\n            pos = i\n    if count > 0:\n        return count,pos\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = 'abc'\n    if re.search(pattern,text):\n        return re.search(pattern,text).span()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        for i in range(len(result)):\n            result[i] = result[i][0]\n    else:\n        result = None\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occ_dict = {}\n    for index,value in enumerate(text):\n        if value in pattern:\n            if value in occ_dict.keys():\n                occ_dict[value] = index\n            else:\n                occ_dict[value] = index\n    return occ_dict\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=0\n    text=text.lower()\n    pattern=pattern.lower()\n    print(text)\n    print(pattern)\n    if len(text)!=len(pattern):\n        return None\n    else:\n        while True:\n            if text[pos:pos+len(pattern)] == pattern:\n                return pos\n            else:\n                pos+=1\n                if pos == len(text):\n                    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s=re.finditer(pattern,text)\n    for i in s:\n        print(i.start(),i.end())\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd += 1\n    if odd == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index % 2!= 0:\n            if nums[index] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) < 1:\n        return False\n    if len(nums) == 1:\n        return True\n    if len(nums) == 2:\n        return nums[0]%2!= 0 and nums[1]%2!= 0\n    if len(nums) > 2:\n        return odd_position(nums[1:])\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_position = True\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            odd_position = False\n            break\n    return odd_position\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in range(0,len(nums),2):\n        if i == len(nums)-1:\n            break\n        else:\n            odd_list.append(nums[i])\n    return odd_list\n    \nodd_pos = odd_position([1,4,7,9,6,2,3])\nprint(odd_pos)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                count += 1\n        if test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i':\n            if test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = \"aeiou\"\n    # for i in test_str:\n    #     if i in vowels:\n    #         return test_str.count(i)\n    \n    # Tries\n    vowels = \"aeiou\"\n    result = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n    vowels = set('aeiou')\n    n = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            n += 1\n    return n\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                count += 1\n            elif i == len(test_str) - 1:\n                count += 1\n            elif test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n            else:\n                count += 0\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    import re\n    test_str = test_str.lower()\n    count = 0\n    test_str = re.sub('\\W', '', test_str)\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in \"aeiou\":\n            if test_str[i] == test_str[i+1]:\n                count = count+1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            count+=1\n            if i!=0:\n                if test_str[i-1] in 'aeiou':\n                    count-=1\n            if i!=len(test_str)-1:\n                if test_str[i+1] in 'aeiou':\n                    count-=1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len(get_vowels(test_str))\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for char in test_str if test_str.count(char) == 1])\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(1,len(test_str)-1):\n        if test_str[i] in \"aeiou\":\n            if test_str[i-1] not in \"aeiou\" and test_str[i+1] not in \"aeiou\":\n                count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for i in range(len(arr)): \n        if arr[i]!= 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # code here\n    return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            res += i\n    return res\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_of_numbers = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum_of_numbers += arr[i]\n    return sum_of_numbers\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            arr[i] = 0\n        sum += arr[i]\n    print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in set(arr):\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            continue\n        else:\n            seen.add(arr[i])\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    d = {}\n    result = []\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for k, g in groupby(sorted(d.keys())):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(list1):\n        li = []\n        for g, c in groupby(list1):\n            if len(c) == 1:\n                li.append(list(g))\n            else:\n                subli = []\n                for i in range(0, len(c), 1):\n                    subli.append(list(c)[i])\n                li.append(subli)\n        return li\n    return pack_duplicates(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Solution:\n    # This is a very simple solution that iterates through the list and creates a list of consecutive duplicates.\n    # In the end, we group the duplicates together and return a generator.\n    #\n    # Ex:\n    # 1 3 5 5 5 5\n    #\n    # 1 2 3 4 5 6\n    #\n    # 1 2 3 4 5 5 6\n    #\n    # 1 2 3 4 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 4 5 5 5 5 5 6\n    #\n    # 1 2 3 "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    s1 = set(list1)\n    for k, g in groupby(list1):\n        if k == 0:\n            res.append([g])\n        else:\n            res.append(list(g))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list=list(groupby(list1))\n    \n    return grouped_list[0][1]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    d = {}\n    result = []\n    for i in range(0,len(list1)):\n        if list1[i] not in d.keys():\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    for i in d:\n        if d[i]==2:\n            result.append([i,i])\n    return result\nlist1 = [4, 3, 2, 3, 3, 3, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]\nprint(pack_consecutive_duplicates(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # global list1\n    # global cnt\n    # list2 = []\n    # list3 = []\n    # list4 = []\n    # if list1 is None or len(list1) == 0:\n    #     return list1\n    # else:\n    #     list2 = list1.copy()\n    #     list3 = sorted(list1, reverse=True)\n    #     for i in range(len(list1)):\n    #         if i == 0:\n    #             pass\n    #         elif list1[i] == list2[i-1]:\n    #             pass\n    #         else:\n    #             list2.append(list1[i])\n    #     for i in range(len(list1)):\n    #         if list1[i] == list3[i]:\n    #             pass\n    #         else:\n    #             list4.append(list1[i])\n    #     list1 = list2\n    #     list1.extend(list4)\n    #     return list1\n    list1 = [1, 2, 3, 4, 5]\n    i = 0\n    j = 0\n    while(i < len(list1) and j < len(list1)):\n        if list1[i] == list1[i+1]:\n            list1.insert(i+1, list1[i])\n            i = i + 2\n        else:\n            i = i + 1\n    list1 = pack_consecutive_duplicates(list1)\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return list1\n    _group_duplicates = lambda group: list(zip(*group))[0]\n    groups = groupby(list1)\n    return [list(group[1]) for group in groups]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    arr = []\n    while i < len(list1)-1:\n        if list1[i] == list1[i+1]:\n            arr.append(list1[i])\n        i += 1\n    return arr\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # my implementation\n    # list1 = [1,1,2,3,4,4,5,5,6,6,7,7,7,8,8,8,8,9]\n    # print(list1)\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(list(groupby(list1)))\n    # print(lis"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize list_counter\n    list_counter = {}\n    \n    # Iterate over the lists and add them to the dictionary if they don't exist\n    for list_item in list1:\n        if list_item in list_counter.keys():\n            list_counter[list_item] = list_counter[list_item] + 1\n        else:\n            list_counter[list_item] = 1\n    \n    # Return the dictionary\n    return list_counter\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {k: list1.count(k) for k in set(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict(collections.Counter(tuple(list1)))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    counts = Counter(list1)\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(tuple(i))\n    unique_list = list(set(new_list))\n    unique_list.sort()\n    #print(unique_list)\n    list_counts = {}\n    for i in unique_list:\n        count = 0\n        for j in range(len(new_list)):\n            if i == new_list[j]:\n                count += 1\n        list_counts[i] = count\n    return list_counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if not result.get(sublist):\n            result[sublist] = 1\n        else:\n            result[sublist] += 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    my_dict = {}\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            my_dict[tuple(i)] = list1.count(i)\n            count += 1\n    \n    return my_dict, count\n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your Code Here\n    dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in dict:\n            dict[tuple(list1[i])] = 1\n        else:\n            dict[tuple(list1[i])] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    result[tuple(list1)] = 1\n    for sublist in list1:\n        if tuple(sublist) in result:\n            result[tuple(sublist)] += 1\n        else:\n            result[tuple(sublist)] = 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = []\n    count_dict = {}\n    for x in list1:\n        count_dict[x] = x.count(x)\n        for y in count_dict:\n            if count_dict[y] > 1:\n                if y not in new_list:\n                    new_list.append(y)\n    return new_list\nprint(unique_sublists([[10,20,30,40,50,20,40,10],['a','a','a','a','a','a','a']]))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = combinations(test_list, 2)\n    print(result)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get all combinations of the test_list\n    combinations_of_lists = list(combinations(test_list,2))\n    #print(combinations_of_lists)\n    # list comprehension to convert tuple into a sum\n    new_list = [[x1,x2] for x1,x2 in combinations_of_lists]\n    print(new_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list,3)\ndef main():\n    test_list = (1,2,3,4)\n    print(list(find_combinations(test_list)))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    combinations = list(combinations(test_list, 2))\n    return combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    combs = list(combinations(test_list,2))\n    for i in combs:\n        sum = i[0] + i[1]\n        result.append(sum)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for n in range(len(test_list)):\n        for i in combinations(test_list,n):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans=[]\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                temp = tuple(sorted([test_list[i],test_list[j]]))\n                ans.append(temp)\n    return ans\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = list(combinations(test_list, 2))\n    print(result)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for combination in combinations(test_list,3):\n        combinations_list.append(combination)\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = test_list\n    combinations_list = []\n    for i in range(1,len(test_list)+1):\n        combinations_list += combinations(test_list,i)\n    print(combinations_list)\n    combinations_list = [(i,j) for i,j in combinations_list if sum(i) == sum(j)]\n    print(combinations_list)\n    return combinations_list\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            count = count + 2\n    if (count % 2 == 0) :\n        return True\n    else :\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            divisors += 2\n    return divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n!= 1:\n        for i in range(1,n):\n            if n % i == 0:\n                count = count + 1\n        if count % 2 == 0:\n            print(n, \"is an even number.\")\n        else:\n            print(n, \"is an odd number.\")\n    else:\n        print(n, \"is a prime number.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(n/2)+1) : \n        if (n % i == 0) : \n            count += 2\n    if (count % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if (n%i==0):\n            divisors.append(i)\n    return len(divisors)\n    \ndef print_sorted(arr): \n    # Another method \n    return sorted(arr)\ndef count_divisors2(n): \n    # Using math library\n    count=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            count+=2\n        elif n%i==0:\n            count+=1\n    return count+1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count = count +1\n    if count == 2:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_list = [] \n    for i in range(1,n+1): \n        if n % i == 0: \n            divisors_list.append(i) \n    divisors_list.sort()\n    divisors_list.append(n)\n    return divisors_list \nprint(count_divisors(24))\ndef number_divisors(n) : \n    '''\n    Write a python function to calculate number of divisors of a number.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0: \n            divisors += 1\n    return divisors \nprint(number_divisors(24))\ndef next_prime(n): \n    '''\n    Write a python function to check whether the given number is the next prime number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n <= 0 : \n        print(\"Please enter a positive integer\") \n    else: \n        # Search for perfect numbers \n        if n == 1: \n            return False\n        n += 1\n        for i in range(2, n): \n            if n % i == 0: \n                break\n        else: \n            return True\ndef fizzbuzz(n): \n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else: \n            print(i)\nprint(fizzbuzz(16))\ndef fizzbuzz(n):\n    '''\n    Write a python function to print FizzBuzz for numbers which are divisible by 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    count = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            count += 1\n            divisors.append(i)\n    if count%2!= 0 : \n        print(\"{} is an odd number\".format(n))\n    else : \n        print(\"{} is an even number\".format(n))\n    print(divisors)\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            divisors += 1\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            odd_sum += arr[j]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    arr.insert(0,0)\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if j - i == 2:\n                sum += arr[j]\n    return sum\n    \nprint(odd_length_sum([1,2,3,4]))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-i):\n            if len(arr) > j+i:\n                sum += arr[j+i]\n            else:\n                break\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if (i%2 == 1):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if i%2!=0:\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #odd_sum = 0\n    #for i in range(1, len(arr)+1):\n    #    for j in range(0, len(arr), i):\n    #        odd_sum += arr[j:j+i]\n    #return odd_sum\n    odd_sum = sum(arr[i:i+1] for i in range(0, len(arr), 2))\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        # print(arr[i:i+2])\n        if arr[i] % 2 == 1:\n            res += sum(arr[i:i+2])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if j - i > 0 and j - i % 2!= 0:\n                sum += arr[i:j]\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if delta == 0:\n        h = 0\n        s = 0\n        v = 0\n    elif max_color == r:\n        h = ((g - b) / delta) % 6\n        s = delta / 2\n        v = max_color\n    elif max_color == g:\n        h = ((b - r) / delta) + 2\n        s = delta / 2\n        v = max_color\n    else:\n        h = ((r - g) / delta) + 4\n        s = delta / 2\n        v = max_color\n    if h < 0:\n        h += 6\n    if s < 0:\n        s += 1\n    if v < 0:\n        v += 1\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define a variable\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Step 1\n    # First divide by 255 to convert into the range [0,1]\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # Step 2\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    # Step 3\n    # hsv value\n    d = mx - mn\n    if d == 0:\n        h = 0\n    elif mx == r:\n        h = 60 * (((g - b)/d) % 6)\n    elif mx == g:\n        h = 60 * (((b - r)/d) + 2)\n    else:\n        h = 60 * (((r - g)/d) + 4)\n    # Step 4\n    s = mx\n    v = mx\n    # Step 5\n    # Convert hsv value to h, s, v\n    h = h/360\n    s = s/100\n    v = v/100\n    # Return the hsv value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r/255)\n    g = float(g/255)\n    b = float(b/255)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_rgb = min(r, g, b)\n    max_rgb = max(r, g, b)\n    diff_rgb = max_rgb - min_rgb\n    \n    if diff_rgb == 0:\n        return (0, 0, 0)\n    \n    saturation = 0\n    if diff_rgb > 0:\n        saturation = (max_rgb - min_rgb) / max_rgb\n    \n    hue = 0\n    if max_rgb == r:\n        if g >= b:\n            hue = (60 * (g - b) / diff_rgb) + 360\n        else:\n            hue = (60 * (g - b) / diff_rgb) + 180\n    elif max_rgb == g:\n        if r >= b:\n            hue = 120 + (60 * (b - r) / diff_rgb)\n        else:\n            hue = 120 + (60 * (r - b) / diff_rgb)\n    else:\n        if r >= g:\n            hue = 240 + (60 * (g - r) / diff_rgb)\n        else:\n            hue = 240 + (60 * (r - g) / diff_rgb)\n    \n    hsv = (hue, saturation, max_rgb)\n    return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r > g and r > b:\n        if g < b:\n            h = (60 * (b - r) / (g - b))\n        else:\n            h = (60 * (r - g) / (r - b)) + 360\n    elif g > r and g > b:\n        h = (60 * (r - g) / (r - b)) + 120\n    else:\n        h = (60 * (b - r) / (g - b)) + 240\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Code here\n    r = float(r / 255)\n    g = float(g / 255)\n    b = float(b / 255)\n    \n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    d = max_c - min_c\n    \n    if max_c == min_c:\n        h = 0\n        s = 0\n        v = max_c\n    elif max_c == r:\n        h = (60 * ((g - b) / d) + 360) % 360\n        s = d / max_c\n        v = max_c\n    elif max_c == g:\n        h = ((60 * ((b - r) / d) + 120) % 360)\n        s = d / max_c\n        v = max_c\n    else:\n        h = ((60 * ((r - g) / d) + 240) % 360)\n        s = d / max_c\n        v = max_c\n    \n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = 0.0, 0.0, 0.0\n    if r == g and g == b:\n        h = 0.0\n    elif r == g:\n        h = (60 * (g - b) / (r - g)) % 360\n    elif g == b:\n        h = (60 * (b - r) / (g - b)) + 120\n    elif r == b:\n        h = (60 * (r - g) / (b - g)) + 240\n    if r == 0.0:\n        s = 0.0\n    else:\n        s = (v * (1 - min(r, g, b)) / r) + (v * min(r, g, b) / (r + g + b))\n    if s == 0.0:\n        v = 0.0\n    else:\n        v = (min(r, g, b) - s) / (min(r, g, b) + s)\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    min = float(min(r, g, b))\n    max = float(max(r, g, b))\n    delta = max - min\n    if delta == 0:\n        h = 0\n    elif max == r:\n        h = ((g - b) / delta) % 6\n    elif max == g:\n        h = ((b - r) / delta) + 2\n    elif max == b:\n        h = ((r - g) / delta) + 4\n    if min == max:\n        s = 0\n    else:\n        s = delta / max\n    h *= 255\n    s *= 255\n    v *= 255\n    return (int(h), int(s), int(v))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = (0, 0, 0)\n    if r > g and g > b:\n        h = 60 * (g - r) / (g + r)\n        s = 60 * (b - g) / (g + b)\n        if h < 60:\n            v = max(r, g, b)\n        else:\n            v = min(r, g, b)\n    elif r > g:\n        h = 60 * (r - g) / (r + g)\n        s = 60 * (b - r) / (r + b)\n        if h < 60:\n            v = min(r, g, b)\n        else:\n            v = max(r, g, b)\n    else:\n        h = 60 * (b - g) / (b + g)\n        s = 60 * (g - b) / (g + b)\n        if h < 60:\n            v = min(r, g, b)\n        else:\n            v = max(r, g, b)\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    print(even)\n    print(odd)\n    prod_even_odd = 1\n    for i in even:\n        prod_even_odd = prod_even_odd * i\n    print(prod_even_odd)\n    prod_odd_even = 1\n    for i in odd:\n        prod_odd_even = prod_odd_even * i\n    print(prod_odd_even)\n    prod = prod_even_odd * prod_odd_even\n    print(prod)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_num = list1[0]\n    even_num = list1[1]\n    sum_even = even_num\n    sum_odd = odd_num\n    for i in range(2, len(list1)):\n        if i % 2 == 0:\n            sum_even = sum_even * list1[i]\n        else:\n            sum_odd = sum_odd * list1[i]\n    print(\"The product of even and odd numbers in the list is: \", sum_even, \" * \", sum_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even * odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num*odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 1\n    product = 1\n    while even_index < len(list1):\n        product *= list1[even_index]\n        even_index += 2\n    while odd_index < len(list1):\n        product *= list1[odd_index]\n        odd_index += 2\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even_num = 0\n    odd_num = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    if even_num!= 0:\n        product = even_num\n    if odd_num!= 0:\n        product = product * odd_num\n    \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if i%2 == 0:\n            even_prod *= i\n        else:\n            odd_prod *= i\n    print(f\"even prod: {even_prod}\")\n    print(f\"odd prod: {odd_prod}\")\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    print(f\"Product of first even and odd number is {even}\")\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_nums = []\n    odd_nums = []\n    for i in list1:\n        if i%2 == 0:\n            even_nums.append(i)\n        else:\n            odd_nums.append(i)\n    print(even_nums)\n    print(odd_nums)\n    print(sum(even_nums) * sum(odd_nums))\n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == []:\n        return 0\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if list1[i]%2!= 0:\n            odd.append(list1[i])\n        else:\n            even.append(list1[i])\n    return mul_even_odd(even) * mul_even_odd(odd)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Your code here\n    test_str = test_str[1:-1]\n    tmp_str = test_str.split(',')\n    \n    #print(tmp_str)\n    return tuple(int(i) for i in tmp_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str) or len(test_str) == 0:\n        return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #TODO: Write your solution here\n    return tuple(int(x) for x in test_str.split())\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    a = test_str\n    b = []\n    c = 0\n    for i in range(0, len(a)):\n        b.append(a[i])\n    for i in range(0, len(b)):\n        c += int(b[i])\n    return c\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for s in test_str:\n        try:\n            new_tuple.append(int(s))\n        except:\n            new_tuple.append(s)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(item) for item in test_str.split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return len(a) if i == 0 or a[i - 1]!= x else i\n    # Binary search\ndef right_insertion_v2(a, x):\n    i = bisect.bisect_right(a, x)\n    return len(a) if i == 0 or a[i - 1]!= x else i\n    # Binary search with closed bounds\ndef right_insertion_v3(a, x):\n    return len(a) if x > a[-1] or x < a[0] else a.index(x)\n    # Binary search with open bounds\ndef right_insertion_v4(a, x):\n    i = bisect.bisect_right(a, x)\n    return len(a) if i == 0 or a[i - 1]!= x else i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a)-1\n    while l<=r:\n        mid = (l+r)//2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a)-1\n    while l<=r:\n        mid = (l+r)//2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\ndef swap(a, i, j):\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted arrays of the same size into a single sorted array.\n    '''\n    # sorted_array = []\n    l = len(left)\n    r = len(right)\n    idx_i = idx_j = 0\n    result = []\n    while idx_i < l and idx_j < r:\n        if left[idx_i] <= right[idx_j]:\n            result.append(left[idx_i])\n            idx_i += 1\n        else:\n            result.append(right[idx_j])\n            idx_j += 1\n    result += left[idx_i:]\n    result += right[idx_j:]\n    return result\ndef mergesort(a):\n    '''\n    Write a function to sort a stack such that the smallest items are on the top.\n    '''\n    if len(a)==1:\n        return a\n    else:\n        mid = len(a)//2\n        left = mergesort(a[:mid])\n        right = mergesort(a[mid:])\n        return merge(left, right)\ndef largest_element(arr):\n    '''\n    Write a function that takes in an array of sorted numbers and returns the index of the largest element.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    return l-bisect.bisect_right(arr, arr[-1])-1\ndef smallest_element(arr):\n    '''\n    Write a function that takes in an array of sorted numbers and returns the index of the smallest element.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    return bisect.bisect_left(arr, arr[0])\ndef count_greater_than(arr, x):\n    '''\n    Write a function that takes in an array of sorted numbers and returns the number of elements in the array that are greater than x.\n    '''\n    l = len(arr)\n    if l == 0:\n        return 0\n    if arr[0]<=x:\n        return 1\n    count = 0\n    for i in range(1, l):\n        if arr[i]>=x:\n            count += 1\n    return count\ndef reverse_list(arr):\n    '''\n    Write a function that takes in an array and returns the reverse of the array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return []\n    return arr[::-1]\ndef find_duplicate(arr):\n    '''\n    Write a function that takes in an array and returns the first duplicate value.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return -1\n    if arr[0]!=arr[1]:\n        return -1\n    for i in range(1, l):\n        if arr[i]==arr[i-1]:\n            return arr[i]\n    return -1\ndef find_duplicate_no_extra_space(arr):\n    '''\n    Write a function that takes in an array and returns the first duplicate value.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return -1\n    if arr[0]!=arr[1]:\n        return -1\n    # initializing result\n    result = -1\n    # iterating the array from 0 to n-2\n    for i in range(0, l - 1):\n        # If current element is equal to previous then increment the result\n        if arr[i] == arr[i + 1]:\n            result = arr[i]\n            break\n    # If the result is -1 then no duplicate exists in the array\n    if result == -1:\n        return -1\n    # result is found\n    # iterating the element from 0 to n-2\n    for i in range(0, l - 1):\n        # If current element is equal to result then decrement the result\n        if arr[i] == result:\n            result -= 1\n        else:\n            break\n    return result\ndef find_duplicate_no_extra_space_using_hash_map(arr):\n    '''\n    Write a function that takes in an array and returns the first duplicate value.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return -1\n    if arr[0]!=arr[1]:\n        return -1\n    #initializing result\n    result = -1\n    #iterating the array from 0 to n-2\n    for i in range(0, l-1):\n        #If current element is equal to previous then increment the result\n        if arr[i] == arr[i+1]:\n            result = arr[i]\n            break\n    #If the result is -1 then no duplicate exists in the array\n    if result == -1:\n        return -1\n    #result is found\n    #iterating the element from 0 to n-2\n    for i in range(0, l-1):\n        #If current element is equal to result then decrement the result\n        if arr[i] == result:\n            result -= 1\n        else:\n            break\n    return result\ndef find_duplicate_no_extra_space_using_2_pointers(arr):\n    '''\n    Write a function that takes in an array and returns the first duplicate value.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return -1\n    if arr[0]!=arr[1]:\n        return -1\n    #initializing result\n    result = -1\n    #iterating the array from 0 to n-2\n    i = 0\n    j = 1\n    while j<l:\n        if arr[i] == arr[j]:\n            result = arr[i]\n            break\n        i += 1\n        j += 1\n    #If the result is -1 then no duplicate exists in the array\n    if result == -1:\n        return -1\n    #result is found\n    #iterating the element from 0 to n-2\n    i = 0\n    j = 1\n    while j<l:\n        if arr[i] == result:\n            i += 1\n        else:\n            i += 1\n            j += 1\n    return result\ndef find_first_k_greater(arr, k):\n    '''\n    Write a function that takes in an array of integers and returns the index of the first k values in the array that are greater than their immediate right neighbor\n    '''\n    if k<=0 or k>len(arr):\n        return -1\n    if k==0:\n        return -1\n    i = 0\n    j = k\n    while j<len(arr):\n        if arr[j-1]<=arr[j]:\n            j += 1\n        else:\n            return i\n        i += 1\n    return -1\ndef find_first_k_greater_no_extra_space(arr, k):\n    '''\n    Write a function that takes in an array of integers and returns the index of the first k values in the array that are greater than their immediate right neighbor\n    '''\n    if k<=0 or k>len(ar"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[-1] <= x:\n        return len(a)\n    else:\n        l = 0\n        r = len(a) - 1\n        while l <= r:\n            mid = l + (r-l) // 2\n            if a[mid] == x:\n                return mid\n            elif x < a[mid]:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if x < a[0]:\n            return 0\n        else:\n            return 1\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x == a[0]:\n        return 0\n    if x < a[0]:\n        return -1\n    \n    low = 0\n    high = len(a) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a):\n        return a.append(x)\n    elif a[pos]!= x:\n        return a.insert(pos, x)\n    else:\n        return a\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    if l!= len(a) and a[l] == x:\n        return l\n    if l!= 0 and a[l-1] == x:\n        return l-1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None or x <= a:\n        return None\n    else:\n        index = bisect.bisect(a, x)\n        return index\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return len(a)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    def search(arr, x):\n        #Find the index of the value\n        index = bisect.bisect_left(arr, x)\n        #If the index is less than 0, then insert the value at index 0\n        if index == 0:\n            return index\n        #Else, the value is in the list\n        elif arr[index-1] == x:\n            return index\n        #Else, move left so the value is inserted at the appropriate index\n        else:\n            return index - 1\n    if len(a) == 0:\n        return len(a)\n    #If the value is less than the smallest value in the list, return index 0\n    if a[0] < x:\n        return 0\n    #If the value is greater than the largest value in the list, return the size of the list\n    elif a[-1] < x:\n        return len(a)\n    #Else, find the correct index to insert the value\n    else:\n        return search(a, x)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pattern = r'ab{4}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = r'ab{5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    pattern = r'ab{6}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    pattern = r'ab{7}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    pattern = r'ab{8}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    pattern = r'ab{9}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    pattern = r'ab{10}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    pattern = r'ab{11}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    pattern = r'ab{12}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    pattern = r'ab{13}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    pattern = r'ab{14}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    pattern = r'ab{15}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b'.\n    '''\n    pattern = r'ab{16}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'b'.\n    '''\n    pattern = r'ab{17}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'b'.\n    '''\n    pattern = r'ab{18}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'b'.\n    '''\n    pattern = r'ab{19}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b'.\n    '''\n    pattern = r'ab{20}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty one 'b'.\n    '''\n    pattern = r'ab{21}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty two 'b'.\n    '''\n    pattern = r'ab{22}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty three 'b'.\n    '''\n    pattern = r'ab{23}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty four 'b'.\n    '''\n    pattern = r'ab{24}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty five 'b'.\n    '''\n    pattern = r'ab{25}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty six 'b'.\n    '''\n    pattern = r'ab{26}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty seven 'b'.\n    '''\n    pattern = r'ab{27}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty eight 'b'.\n    '''\n    pattern = r'ab{28}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty nine 'b'.\n    '''\n    pattern = r'ab{29}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    pass\ndef text_match_thirt"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match('^(.*a)*b*b*$',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(\"ab{3}\",text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search('ab*b', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly 3 'b'\n    '''\n    result = re.search('ab+b', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by exactly 2 'b'\n    '''\n    result = re.search('b+b', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a'\n    '''\n    result = re.search('a*a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'b'\n    '''\n    result = re.search('ab*', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'b', followed by\n    an 'a'\n    '''\n    result = re.search('ab+', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'b', followed by\n    an 'a', followed by an 'b'\n    '''\n    result = re.search('ab*', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'b', followed by\n    an 'a', followed by an 'b', followed by an 'a', followed by an 'b'\n    '''\n    result = re.search('ab+', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'b', followed by an 'a', followed by an 'b'\n    '''\n    result = re.search('aa+b', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a', followed by an 'a',\n    followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a', followed by an\n    'a', followed by an 'a', followed by an 'a'\n    '''\n    result = re.search('a+a+a+a+a', text)\n    if result:\n        print(f'\\n{result.group()}')\n    else:\n        print('No match')\ndef text_match_twentytwo(text):\n    ''"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab\\bbb',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab*b*')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab+', text)\n    return result is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.finditer(r'ab{3}',text)\n    return [match.group() for match in matches]\nprint(text_match_three(\"abbab\"))\nprint(text_match_three(\"abbababab\"))\nprint(text_match_three(\"abababa\"))\nprint(text_match_three(\"abbbbabbbb\"))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}b\"\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str.split())\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # YOUR CODE HERE\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    i = 0\n    for char in test_str:\n        if char =='':\n            new_tuple.append(test_list[i])\n            i += 1\n        else:\n            pass\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.append(test_str)\n    test_tuple = tuple(test_list)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n    \ndef fizz_buzz(num):\n    '''\n    Write a function that returns a number when a number is divisible by 3,\n    fizz when a number is divisible by 5, and fizzbuzz otherwise.\n    '''\n    return num % 3 == 0 and num % 5 == 0 and num % 15 == 0 or str(num)\n    \ndef str_to_dict(test_str):\n    '''\n    Write a function to convert a string to dictionary.\n    '''\n    return eval(test_str)\n    \ndef merge_lists(list_1, list_2):\n    '''\n    Write a function to merge two lists into one sorted list.\n    '''\n    return sorted(list_1 + list_2)\n    \ndef reverse_dict(dict_1):\n    '''\n    Write a function to convert a dictionary to a list of tuples.\n    '''\n    return dict_1.items()\n    \ndef dict_to_tuples(dict_1):\n    '''\n    Write a function to convert a dictionary to a list of tuples.\n    '''\n    return list(dict_1.items())\n    \ndef list_to_dict(list_1):\n    '''\n    Write a function to convert a list of tuples into a dictionary.\n    '''\n    return {i:list_1[i] for i in range(len(list_1))}\n    \ndef dict_to_list(dict_1):\n    '''\n    Write a function to convert a dictionary to a list of tuples.\n    '''\n    return list(dict_1.values())\n    \ndef find_duplicate(lst):\n    '''\n    Write a function to find duplicate numbers in a list.\n    '''\n    return [i for i in lst if lst.count(i) > 1]\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n    #test_tuple = ()\n    #return (test_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    new_list.append(test_str)\n    new_list += test_list\n    return tuple(new_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            if i%2==0:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even += 1\n    if even == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i<len(nums):\n        if nums[i]%2!=0:\n            return False\n        i+=2\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                result.append(True)\n            else:\n                result.append(False)\n        else:\n            result.append(False)\n    return result\n    \nprint(even_position([1,2,3,4,5,6,7,8]))\nprint(even_position([1,3,5,7,9,11,13,15]))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    flag = 1\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            flag = 0\n            break\n    return flag\n    \n    \n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    flag = 0\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            flag = 1\n            break\n    return flag\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0 and nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            print(i)\n        else:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for x in test_tup if x!= ())\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is not tuple:\n        return\n    else:\n        return (test_tup[0],)\n    # Write your code here\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = list(test_tup)\n    tup.remove(test_tup)\n    return tuple(tup)\n    \n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup=test_tup[0]\n    for i in range(1,len(test_tup)):\n        if test_tup[i]!=new_tup:\n            new_tup=tuple(set(new_tup+test_tup[i]))\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup1 = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            tup1 += i,\n        else:\n            tup1 += remove_nested(i),\n    return tup1\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = tuple(i for i in test_tup if not isinstance(i, tuple))\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (x for x in test_tup if x)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 2:\n        return test_tup[0], test_tup[1]\n    else:\n        return test_tup[0], remove_nested(test_tup[1])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                if type(j) == tuple:\n                    for k in j:\n                        test_tup.remove(i)\n        else:\n            test_tup.remove(i)\n    return test_tup\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    def count(input_list):\n        if type(input_list) == int:\n            return len(input_list)\n        else:\n            return len(input_list)+count(input_list[0])\n    return count(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = len(input_list)\n    count = 0\n    while length>0:\n        if type(input_list[0])==list:\n            count+=1\n            length-=1\n        else:\n            length-=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == type([]):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count_list += 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for i in input_list:\n        if type(i) == list:\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Your code here\n    return (input_list.count([]))\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    try:\n        if type(input_list) is not list:\n            return 0\n        else:\n            return 1 + count_list(input_list[1:])\n    except:\n        return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    l=0\n    h=n-1\n    while l<=h:\n        mid=(l+h)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            h=mid-1\n        else:\n            l=mid+1\n    return -1\ndef check(arr,x):\n    '''\n    Write a python function to check if the array is sorted or not.\n    '''\n    n=len(arr)\n    if n==0:\n        return False\n    if n==1:\n        return True\n    else:\n        l=0\n        h=n-1\n        while l<=h:\n            mid=(l+h)//2\n            if arr[mid]==x:\n                return True\n            elif arr[mid]>x:\n                h=mid-1\n            else:\n                l=mid+1\n        return False\ndef swap(arr,i,j):\n    '''\n    Write a python function to swap two elements in an array.\n    '''\n    temp=arr[i]\n    arr[i]=arr[j]\n    arr[j]=temp\ndef partition(arr,low,high):\n    '''\n    Write a python function to find the partition position of the given array.\n    '''\n    i=low-1\n    pivot=arr[high]\n    for j in range(low,high):\n        if arr[j]<=pivot:\n            i+=1\n            swap(arr,i,j)\n    swap(arr,i+1,high)\n    return (i+1)\ndef quickSort(arr,low,high):\n    '''\n    Write a python function to sort an array using QuickSort algorithm.\n    '''\n    if low<high:\n        pivot=partition(arr,low,high)\n        quickSort(arr,low,pivot-1)\n        quickSort(arr,pivot+1,high)\ndef mergeSort(arr):\n    '''\n    Write a python function to sort an array using merge sort algorithm.\n    '''\n    n=len(arr)\n    if n==1:\n        return arr\n    if n>1:\n        mid=n//2\n        lefthalf=mergeSort(arr[:mid])\n        righthalf=mergeSort(arr[mid:])\n        arr=merge(lefthalf,righthalf)\n    return arr\ndef merge(arr1,arr2):\n    '''\n    Write a python function to merge two sorted arrays into one sorted array.\n    '''\n    merge1=[]\n    i=0\n    j=0\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i]<=arr2[j]:\n            merge1.append(arr1[i])\n            i+=1\n        else:\n            merge1.append(arr2[j])\n            j+=1\n    merge1.extend(arr1[i:])\n    merge1.extend(arr2[j:])\n    return merge1\ndef binarySearch(arr,x,low,high):\n    '''\n    Write a python function to find the position of an element in a sorted array.\n    '''\n    if low>high:\n        return -1\n    mid=(low+high)//2\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]>x:\n        return binarySearch(arr,x,low,mid-1)\n    else:\n        return binarySearch(arr,x,mid+1,high)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci numbers.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\ndef countSwaps(arr):\n    '''\n    Write a python function to count number of swaps required to sort an array using insertion sort algorithm.\n    '''\n    n=len(arr)\n    if n==0:\n        return 0\n    count=0\n    for i in range(1,n):\n        if arr[i]<arr[i-1]:\n            count+=1\n            for j in range(i,0,-1):\n                if arr[j]<arr[j-1]:\n                    count+=1\n                    swap(arr,j,j-1)\n    return count\ndef countInversions(arr):\n    '''\n    Write a python function to count number of inversions in a given unsorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return 0\n    count=0\n    for i in range(0,n-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\ndef isMonotonic(arr):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(arr)\n    if n==0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return arr[0]<=arr[1] and arr[1]>=arr[0]\n    for i in range(1,n):\n        if arr[i]<arr[i-1]:\n            return False\n    return True\ndef printArray(arr):\n    '''\n    Write a python function to print the given array.\n    '''\n    print(*arr)\ndef printSortedArray(arr):\n    '''\n    Write a python function to print the sorted array.\n    '''\n    n=len(arr)\n    for i in range(0,n):\n        print(arr[i],end=\" \")\ndef printPermutation(n,k):\n    '''\n    Write a python function to print the permutations of a given array.\n    '''\n    arr=[i for i in range(1,n+1)]\n    k-=1\n    while k!=0:\n        i=0\n        while i<len(arr):\n            if k==0:\n                print(*arr[i:])\n                break\n            if i==len(arr)-1:\n                i=0\n            arr[i],arr[i+1]=arr[i+1],arr[i]\n            k-=1\ndef printKMerge(arr,n,k):\n    '''\n    Write a python function to print the k-merge sort algorithm.\n    '''\n    if n==0:\n        return\n    if k==1:\n        print(*arr)\n        return\n    i=0\n    j=0\n    while j<n:\n        k-=1\n        while k!=0:\n            print(arr[i],end=\"\")\n            k-=1\n        i+=1\n        while k!=0:\n            print(arr[j],end=\"\")\n            k-=1\n        j+=1\ndef printReverseKMerge(arr,n,k):\n    '''\n    Write a python function to print the reverse k-merge sort algorithm.\n    '''\n    if n==0:\n        return\n    if k==1:\n        print(*arr)\n        return\n    i=0\n    j=n-1\n    while j>=0:\n        k-=1\n        while k!=0:\n            print(arr[j],end=\"\")\n            k-=1\n        j-=1\n        while k!=0:\n            print(arr[i],end=\"\")\n            k-=1\n        i+=1\ndef printKWayMerge(arr,n,k):\n    '''\n    Write a python function to print the k-way merge sort algorithm.\n    '''\n    if n==0:\n        return\n    if k==1:\n        print(*arr)\n        return\n    i=0\n    j=0\n    while j<n:\n        k-=1\n        while k!=0:\n            print(arr[i],end=\"\")\n            k-=1\n    "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-(arr[::-1].index(x))-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low >= len(arr) or arr[low]!= x:\n        return -1\n    else:\n        return low\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return end\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        mid=(start+end)//2\n        if arr[mid]<x:\n            start=mid+1\n        else:\n            end=mid-1\n    if arr[start]==x:\n        return start\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if(n==0):\n        return -1\n    lo=0\n    hi=n-1\n    while lo<=hi:\n        mid=lo+(hi-lo)//2\n        if arr[mid]==x:\n            if mid==lo or arr[mid-1]!=x:\n                return mid\n            hi=mid-1\n        elif arr[mid]>x:\n            hi=mid-1\n        else:\n            lo=mid+1\n    return lo\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\nprint(text_starta_endb('acabaaacb'))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #Need to write a regular expression here for it to match properly.\n    #This should be a big boy that takes in a text string, and returns the start and end indices in the string that the pattern matches.\n    #Will probably need to write a loop in order to make this work, so maybe...\n    return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    reg_exp = re.compile(\"(a)*?b\")\n    result = reg_exp.findall(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a[a-z]*b\")\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_a = r'a.*b'\n    match = re.search(text_a, text)\n    if match:\n        return(True,match.group())\n    else:\n        return(False, None)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(re.match('a.*b', text).group())\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    try:\n        text = re.search(r'a.b',text)\n        if text is not None:\n            return True\n        else:\n            return False\n    except:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*)b'\n    #pattern = re.compile(r'a(.*)b')\n    #pattern = re.compile(r'a(.+)b')\n    print(re.findall(pattern, text))\n    #['a', 'ba']\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # return True if text matches pattern\n    pattern = r'^a.*b$'\n    return re.match(pattern, text)\nprint(text_starta_endb('ab')) #False\nprint(text_starta_endb('aa')) #False\nprint(text_starta_endb('abb')) #True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r\"(a)+b\")\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.start(), match.end()\n    else:\n        return -1\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for x in dict:\n        summ = summ + dict[x]\n    return summ\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) == 0:\n        return 0\n    else:\n        return dict[0] + return_sum(dict[1:])\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    x = 0\n    for i in dict.values():\n        x += i\n    return x\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    sum = 0\n    \n    for item in dict.values():\n        sum += item\n    \n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!=0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(1,n) if i % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower range: \"))\n    r = int(input(\"Enter upper range: \"))\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            odd_sum += i\n    print(odd_sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        print(\"Invalid input\")\n        return 0\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n+1)//2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    while n <= (r+1):\n        if n % 2 == 1:\n            sum += n\n        n += 1\n    return sum\nsum_odd(1)\nsum_odd(1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2!= 0:\n            s = s + i\n    print(\"The sum of all odd natural numbers within the range l and r is\",s)\n    \nsum_odd(10)\nsum_odd(20)\nsum_odd(30)\nsum_odd(40)\nsum_odd(50)\nsum_odd(60)\nsum_odd(70)\nsum_odd(80)\nsum_odd(90)\nsum_odd(100)\nsum_odd(110)\nsum_odd(120)\nsum_odd(130)\nsum_odd(140)\nsum_odd(150)\nsum_odd(160)\nsum_odd(170)\nsum_odd(180)\nsum_odd(190)\nsum_odd(200)\nsum_odd(210)\nsum_odd(220)\nsum_odd(230)\nsum_odd(240)\nsum_odd(250)\nsum_odd(260)\nsum_odd(270)\nsum_odd(280)\nsum_odd(290)\nsum_odd(300)\nsum_odd(310)\nsum_odd(320)\nsum_odd(330)\nsum_odd(340)\nsum_odd(350)\nsum_odd(360)\nsum_odd(370)\nsum_odd(380)\nsum_odd(390)\nsum_odd(400)\nsum_odd(410)\nsum_odd(420)\nsum_odd(430)\nsum_odd(440)\nsum_odd(450)\nsum_odd(460)\nsum_odd(470)\nsum_odd(480)\nsum_odd(490)\nsum_odd(500)\nsum_odd(510)\nsum_odd(520)\nsum_odd(530)\nsum_odd(540)\nsum_odd(550)\nsum_odd(560)\nsum_odd(570)\nsum_odd(580)\nsum_odd(590)\nsum_odd(600)\nsum_odd(610)\nsum_odd(620)\nsum_odd(630)\nsum_odd(640)\nsum_odd(650)\nsum_odd(660)\nsum_odd(670)\nsum_odd(680)\nsum_odd(690)\nsum_odd(700)\nsum_odd(710)\nsum_odd(720)\nsum_odd(730)\nsum_odd(740)\nsum_odd(750)\nsum_odd(760)\nsum_odd(780)\nsum_odd(790)\nsum_odd(800)\nsum_odd(810)\nsum_odd(820)\nsum_odd(830)\nsum_odd(840)\nsum_odd(850)\nsum_odd(860)\nsum_odd(870)\nsum_odd(880)\nsum_odd(900)\nsum_odd(910)\nsum_odd(920)\nsum_odd(930)\nsum_odd(940)\nsum_odd(950)\nsum_odd(960)\nsum_odd(970)\nsum_odd(980)\nsum_odd(990)\nsum_odd(1000)\nsum_odd(1010)\nsum_odd(1020)\nsum_odd(1030)\nsum_odd(1040)\nsum_odd(1050)\nsum_odd(1060)\nsum_odd(1070)\nsum_odd(1080)\nsum_odd(1100)\nsum_odd(1110)\nsum_odd(1120)\nsum_odd(1130)\nsum_odd(1140)\nsum_odd(1150)\nsum_odd(1160)\nsum_odd(1170)\nsum_odd(1180)\nsum_odd(1200)\nsum_odd(1210)\nsum_odd(1220)\nsum_odd(1230)\nsum_odd(1240)\nsum_odd(1250)\nsum_odd(1260)\nsum_odd(1270)\nsum_odd(1280)\nsum_odd(1300)\nsum_odd(1310)\nsum_odd(1320)\nsum_odd(1330)\nsum_odd(1340)\nsum_odd(1350)\nsum_odd(1360)\nsum_odd(1370)\nsum_odd(1380)\nsum_odd(1400)\nsum_odd(1410)\nsum_odd(1420)\nsum_odd(1430)\nsum_odd(1440)\nsum_odd(1450)\nsum_odd(1460)\nsum_odd(1470)\nsum_odd(1480)\nsum_odd(1500)\nsum_odd(1510)\nsum_odd(1520)\nsum_odd(1530)\nsum_odd(1540)\nsum_odd(1550)\nsum_odd(1560)\nsum_odd(1570)\nsum_odd(1580)\nsum_odd(1600)\nsum_odd(1610)\nsum_odd(1620)\nsum_odd(1630)\nsum_odd(1640)\nsum_odd(1650)\nsum_odd(1660)\nsum_odd(1670)\nsum_odd(1680)\nsum_odd(1700)\nsum_odd(1710)\nsum_odd(1720)\nsum_odd(1730)\nsum_odd(1740)\nsum_odd(1750)\nsum_odd(1760)\nsum_odd(1770)\nsum_odd(1780)\nsum_odd(1800)\nsum_odd(1810)\nsum_odd(1820)\nsum_odd(1830)\nsum_odd(1840)\nsum_odd(1850)\nsum_odd(1860)\nsum_odd(1870)\nsum_odd(1880)\nsum_odd(1900)\nsum_odd(1910)\nsum_odd(1920)\nsum_odd(1930)\nsum_odd(1940)\nsum_odd(1950)\nsum_odd(1960)\nsum_odd(1970)\nsum_odd(1980)\nsum_odd(2000)\nsum_odd(2010)\nsum_odd(2020)\nsum_odd(2030)\nsum_odd(2040)\nsum_odd(2050)\nsum_odd(2060)\nsum_odd(2070)\nsum_odd(2080)\nsum_odd(2100)\nsum_odd(2110)\nsum_odd(2120)\nsum_odd(2130)\nsum_odd(2140)\nsum_odd(2150)\nsum_odd(2160)\nsum_odd(2170)\nsum_odd(2180)\nsum_odd(2200)\nsum_odd(2210)\nsum_odd(2220)\nsum_odd(2230)\nsum_odd(2240)\nsum_odd(2250)\nsum_odd(2260)\nsum_odd(2270)\nsum_odd(2280)\nsum_odd(2300)\nsum_odd(2310)\nsum_odd(2320)\nsum_odd(2330)\nsum_odd(2340)\nsum_odd(2350)\nsum_odd(2360)\nsum_odd(2370)\nsum_odd(2380)\nsum_odd(2400)\nsum_odd(2410)\nsum_odd(2420)\nsum_odd(2430)\nsum_odd(2440)\nsum_odd(2450)\nsum_odd(2460)\nsum_odd(2470)\nsum_odd(2480)\nsum_odd(2500)\nsum_odd(2510)\nsum_odd(2520)\nsum_odd(2530)\nsum_odd(2540)\nsum_odd(2550)\nsum_odd(2560)\nsum_odd(2570)\nsum_odd(2580)\nsum_odd(2600)\nsum_odd(2610)\nsum_odd(2620)\nsum_odd(2630)\nsum_odd(2640)\nsum_odd(2650)\nsum_odd(2660)\nsum_odd(2670)\nsum_odd(2680)\nsum_odd(2700)\nsum_odd(2710)\nsum_odd(2720)\nsum_odd(2730)\nsum_odd(2740)\nsum_odd(2750)\nsum_odd(2760)\nsum_odd(2770)\nsum_odd(2780"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n): \n        if i % 2!= 0: \n            sum = sum + i\n    return sum\nprint(sum_odd(10))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr_sum = 0\n    for i in range(len(arr)):\n        arr_sum += arr[i]\n    return arr_sum\n        \n    \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for n in arr:\n        total += n\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0;\n    for i in range(0,len(arr)):\n        sum += arr[i];\n    return sum;\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for x in range(len(arr)):\n        s += arr[x]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = sorted(arr)\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s = bin(n)\n    ls = s[2:]\n    for i in range(d):\n        ls = ls[1:] + ls[0]\n    return int(ls, 2)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # convert the input in a binary number\n    binary_num = \"{0:b}\".format(n)\n    \n    # we check how many time we rotate (d)\n    rotation_times = d%32\n    \n    # if the number of rotation is not a multiple of 32 we add \"0\" to the beginning\n    if rotation_times!= 0:\n        for i in range(rotation_times):\n            binary_num = \"0\"+binary_num\n            \n    return int(binary_num, 2)\n    \ndef test_left_rotate():\n    print(\"Testing left_rotate function...\")\n    for n, d, expected in (\n        (0b10100110101, 3, 0b1110100011),\n        (0b10100110101, 5, 0b1110100011),\n        (0b10100110101, 15, 0b1110100011),\n        (0b10100110101, 23, 0b1110100011),\n        (0b10100110101, 30, 0b1110100011),\n        (0b10100110101, 31, 0b1110100011),\n        (0b10100110101, 32, 0b1110100011),\n        (0b10100110101, 33, 0b1110100011),\n        (0b10100110101, 34, 0b1110100011),\n        (0b10100110101, 35, 0b1110100011),\n        (0b10100110101, 36, 0b1110100011),\n        (0b10100110101, 37, 0b1110100011),\n        (0b10100110101, 38, 0b1110100011),\n        (0b10100110101, 39, 0b1110100011),\n        (0b10100110101, 40, 0b1110100011),\n        (0b10100110101, 41, 0b1110100011),\n        (0b10100110101, 42, 0b1110100011),\n        (0b10100110101, 43, 0b1110100011),\n        (0b10100110101, 44, 0b1110100011),\n        (0b10100110101, 45, 0b1110100011),\n        (0b10100110101, 46, 0b1110100011),\n        (0b10100110101, 47, 0b1110100011),\n        (0b10100110101, 48, 0b1110100011),\n        (0b10100110101, 49, 0b1110100011),\n        (0b10100110101, 50, 0b1110100011),\n        (0b10100110101, 51, 0b1110100011),\n        (0b10100110101, 52, 0b1110100011),\n        (0b10100110101, 53, 0b1110100011),\n        (0b10100110101, 54, 0b1110100011),\n        (0b10100110101, 55, 0b1110100011),\n        (0b10100110101, 56, 0b1110100011),\n        (0b10100110101, 57, 0b1110100011),\n        (0b10100110101, 58, 0b1110100011),\n        (0b10100110101, 59, 0b1110100011),\n        (0b10100110101, 60, 0b1110100011),\n        (0b10100110101, 61, 0b1110100011),\n        (0b10100110101, 62, 0b1110100011),\n        (0b10100110101, 63, 0b1110100011),\n        (0b10100110101, 64, 0b1110100011),\n        (0b10100110101, 65, 0b1110100011),\n        (0b10100110101, 66, 0b1110100011),\n        (0b10100110101, 67, 0b1110100011),\n        (0b10100110101, 68, 0b1110100011),\n        (0b10100110101, 69, 0b1110100011),\n        (0b10100110101, 70, 0b1110100011),\n        (0b10100110101, 71, 0b1110100011),\n        (0b10100110101, 72, 0b1110100011),\n        (0b10100110101, 73, 0b1110100011),\n        (0b10100110101, 74, 0b1110100011),\n        (0b10100110101, 75, 0b1110100011),\n        (0b10100110101, 76, 0b1110100011),\n        (0b10100110101, 77, 0b1110100011),\n        (0b10100110101, 78, 0b1110100011),\n        (0b10100110101, 79, 0b1110100011),\n        (0b10100110101, 80, 0b1110100011),\n        (0b10100110101, 81, 0b1110100011),\n        (0b10100110101, 82, 0b1110100011),\n        (0b10100110101, 83, 0b1110100011),\n        (0b10100110101, 84, 0b1110100011),\n        (0b10100110101, 85, 0b1110100011),\n        (0b10100110101, 86, 0b1110100011),\n        (0b10100110101, 87, 0b1110100011),\n        (0b10100110101, 88, 0b1110100011),\n        (0b10100110101, 89, 0b1110100011),\n        (0b10100110101, 90, 0b1110100011),\n        (0b10100110101, 91, 0b1110100011),\n        (0b10100110101, 92, 0b1110100011),\n        (0b10100110101, 93, 0b1110100011),\n        (0b10100110101, 94, 0b1110100011),\n        (0b10100110101, 95, 0b1110100011),\n        (0b10100110101, 96, 0b1110100011),\n        (0b10100110101, 97, 0b1110100011),\n        (0b10100110101, 98, 0b1110100011),\n        (0b10100110101, 99, 0b1110100011),\n        (0b10100110101, 100, 0b1110100011),\n        (0b10100110101, 101, 0b1110100011),\n        (0b10100110101, 102, 0b1110100011),\n        (0b10100110101, 103, 0b1110100011),\n        (0b10100110101, 104, 0b1110100011),\n        (0b10100110101, 105, 0b1110100011),\n        (0b10100110101, 106, 0b1110100011),\n        (0b10100110101, 107, 0b1110100011),\n        (0b10100110101, 108, 0b1110100011),\n        (0b10100110101, 109, 0b1110100011),\n        (0b10100110101, 110, 0b1110100011),\n        (0b10100110101, 111, 0b1110100011),\n        (0b10100110101, 112, 0b1110100011),\n        (0b10100110101, 113, 0b1110100011),\n        (0b10100110101, 114, 0b1110100011),\n        (0b10100110101, 115, 0b1110100011),\n        (0b10100110101, 116, 0b1110100011),\n        (0b10100110101, 117, 0b1110100011),\n        (0b10"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 0\n    elif(n==2):\n        return 0\n    else:\n        return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n    \ndef remove_all_non_alpha(text):\n    '''\n    Write a function to remove all non alphabetic characters from a string.\n    '''\n    return re.sub('[^A-Za-z]+', '', text)\n    \ndef remove_all_non_digit(text):\n    '''\n    Write a function to remove all non digits from a string.\n    '''\n    return re.sub('\\D', '', text)\n    \ndef remove_non_alpha_numeric_space(text):\n    '''\n    Write a function to remove all non alphabetic and non digits characters and spaces from a string.\n    '''\n    return re.sub('[^A-Za-z0-9 ]+', '', text)\n    \ndef remove_space_from_start_end(text):\n    '''\n    Write a function to remove all spaces from the start and end of a string.\n    '''\n    return text.strip()\n    \ndef count_words(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(text.split())\n    \ndef count_upper_case_words(text):\n    '''\n    Write a function to count the number of words in a string with all upper case letters.\n    '''\n    return sum(1 for c in text if c.isupper())\n    \ndef count_lower_case_words(text):\n    '''\n    Write a function to count the number of words in a string with all lower case letters.\n    '''\n    return sum(1 for c in text if c.islower())\n    \ndef count_digits_words(text):\n    '''\n    Write a function to count the number of words in a string with all digits.\n    '''\n    return sum(1 for c in text if c.isdigit())\n    \ndef count_words_with_length(text, length):\n    '''\n    Write a function to count the number of words of the specified length in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length)\n    \ndef count_words_with_length_only_uppercase(text, length):\n    '''\n    Write a function to count the number of words of the specified length in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.isupper())\n    \ndef count_words_with_length_only_lowercase(text, length):\n    '''\n    Write a function to count the number of words of the specified length in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.islower())\n    \ndef count_words_with_length_only_digits(text, length):\n    '''\n    Write a function to count the number of words of the specified length in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.isdigit())\n    \ndef count_words_with_length_only_numeric(text, length):\n    '''\n    Write a function to count the number of words of the specified length in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.isnumeric())\n    \ndef count_words_with_length_and_char(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1)\n    \ndef count_words_with_length_and_char_at_all_indices(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end_and_start(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1 and word.find(word[0])!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end_and_start_and_end(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1 and word.find(word[0])!= -1 and word.find(word[len(word)-1])!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end_and_start_and_end_and_start(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1 and word.find(word[0])!= -1 and word.find(word[len(word)-1])!= -1 and word.find(word[1])!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end_and_start_and_end_and_start_and_end(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1 and word.find(word[0])!= -1 and word.find(word[len(word)-1])!= -1 and word.find(word[1])!= -1 and word.find(word[2])!= -1)\n    \ndef count_words_with_length_and_char_at_all_indices_with_space_and_end_and_start_and_end_and_start_and_end_and_start(text, length, char):\n    '''\n    Write a function to count the number of words of the specified length and character in a string.\n    '''\n    return sum(1 for word in text.split() if len(word) == length and word.count(char) == 1 and word.find(' ')!= -1 and word.find('.')!= -1 and word.find(word[0])!= -1 and word.find(word[len(word)-1])!= -1 and word.find(word[1])!= -"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    space_pattern = re.compile(r'\\s')\n    return space_pattern.sub('', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y and x==z and y==z:\n        count+=1\n    else:\n        pass\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = int(x)\n    b = int(y)\n    c = int(z)\n    # Your code here\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,x+1):\n        if(x == i and y == i and z == i):\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    numbers = [x,y,z]\n    #x,y,z = numbers\n    count = 0\n    for i in range(3):\n        if numbers[i] == numbers[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z = int(x),int(y),int(z)\n    count=0\n    if x == y and x==z:\n        count=count+1\n    if y == z and y == x:\n        count=count+1\n    if z == x and z == y:\n        count=count+1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a,b,c = x,y,z\n    if (a == b) and (a == c) and (b == c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z = int(x),int(y),int(z)\n    if x==y and y==z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = abs(x)\n    y = abs(y)\n    z = abs(z)\n    if x == y and y == z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y + 1):\n        if x == y == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return sum(1 for x in arr[1:] for y in arr[:1:-1] if x > y)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    temp = arr[-1]\n    \n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] > temp:\n            arr[i+1], arr[0] = arr[0], arr[i+1]\n            temp = arr[i]\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    i = 0\n    while arr!= sorted(arr):\n        i+=1\n        arr = sorted(arr)\n    return i\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_len = len(arr)\n    count = 0\n    for i in range(arr_len):\n        if arr[i] < arr[i + 1]:\n            continue\n        else:\n            for j in range(i + 1, arr_len):\n                if arr[j] < arr[i]:\n                    continue\n                else:\n                    break\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    start = 0\n    end = size - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    while True:\n        if arr == sorted(arr):\n            break\n        rotations += 1\n        arr = [arr[i] for i in range(len(arr) - 1, -1, -1)]\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case: one number\n    if n == 1:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(sqrt(n))\n    if x * x == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If n is perfect square, return true, else return false\n    if (n <= 0) :\n        return False\n    if (n == 1) :\n        return True\n    x = n\n    while (x * x!= n) :\n        x = (x + 1) // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = int(n)\n    if n <= 0:\n        return False\n    else:\n        x = n\n        s = 0\n        while x > 0:\n            s = s + (x%10)**2\n            x = x//10\n        return s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq_root = int(math.sqrt(n))\n    if sq_root**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (int(n**0.5))**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # get the square root\n    sqrt_n = math.sqrt(n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    l = int(math.sqrt(n))\n    if(n == l*l):\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    x = math.sqrt(n)\n    return (x * x == n)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    if sum%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # create a product variable and set to 1\n    product = 1\n    # loop through the list of items\n    for i in arr:\n        # multiply product by each item in the list\n        product = product * i\n    # check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # [2, 4, 6] => True\n    # [2, 3, 4] => False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return False if (arr[0] * arr[1] * arr[2]) % 2 else True\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == None:\n        print(\"[ERROR]: Please provide a valid array\")\n        return False\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return False\n    else:\n        product = 1\n        for i in arr:\n            product *= i\n        return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    return is_product_even(arr[1:])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    result = arr[0]\n    for i in arr[1:]:\n        result *= i\n    return result % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not arr and arr and arr[0]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Base case - if the length of the list is 1 return the list (the only element)\n    if len(lists) == 1:\n        return lists[0]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n    k = 0\n    sum_list = []\n    for i in range(len(lists)):\n        if lists[i] >= max_sum:\n            max_sum = lists[i]\n    for i in range(len(lists)):\n        if lists[i] == max_sum:\n            sum_list.append(lists[i])\n    return sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # This is the main function.\n    # It checks to see if the list is empty.\n    if lists is None or len(lists) == 0:\n        return []\n    # This checks to see if the length of the lists are equal.\n    if len(lists) == 1:\n        return lists[0]\n    # This is the max_sum_list function.\n    # The function looks at each item in the list,\n    # then splits the list into two.\n    # The function then looks at each item in the second list,\n    # and sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # The function looks at each item in the first list,\n    # and then sums the items.\n    # This loop creates a list that is a copy of the first list.\n    # The loop then copies each item from the second list to the copied list.\n    # The loop then copies the item in the copied list to the max_sum_list.\n    # The function then splits the copied list and calls the max_sum_list function on the copied list.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    # This function looks at each item in the copied list,\n    # and then sums the items.\n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_list.append(lists[0])\n    max_list.append(lists[1])\n    max_list.append(lists[2])\n    for i in range(3, len(lists)):\n        if max(max_list) < max_list[i - 3] + max_list[i - 2] + max_list[i - 1]:\n            max_list[0] = lists[i - 3]\n            max_list[1] = lists[i - 2]\n            max_list[2] = lists[i - 1]\n        max_list.append(lists[i])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for num in lists:\n        if sum(num) > max_sum:\n            max_sum = sum(num)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def is_greater(a, b):\n        return a + b > b + a\n    return max(filter(is_greater, lists), key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # define max_sum as the first element in the list (tuple)\n    # that has the max sum\n    max_sum = lists[0]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            highest = max(highest, lists[i][j])\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_of_lists = [lists]\n    while True:\n        if len(list_of_lists[0]) == 1:\n            break\n        new_list = []\n        for i in range(len(list_of_lists[0])):\n            sum_list = 0\n            for j in range(len(list_of_lists)):\n                if i >= j:\n                    sum_list += list_of_lists[j][i]\n            new_list.append(sum_list)\n        list_of_lists.append(new_list)\n    return max(list_of_lists[-1])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #1st case\n    if len(lists)==1:\n        return lists\n    #2nd case\n    if len(lists)==2:\n        return lists[0] if lists[0][0]+lists[1][0]>lists[1][0]+lists[0][0] else lists[1]\n    #3rd case\n    if len(lists)>3:\n        return max_sum_list([max_sum_list(lists[1:3])]+[lists[0]])\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_count = 1\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    if count > max_count:\n        max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    prev_index = None\n    curr_index = 0\n    while curr_index < len(test_str):\n        if test_str[curr_index] >= 'A' and test_str[curr_index] <= 'Z':\n            if prev_index is None:\n                prev_index = curr_index\n            elif test_str[curr_index] > test_str[prev_index]:\n                max_len = max(max_len, curr_index - prev_index)\n                prev_index = curr_index\n        else:\n            if prev_index is None:\n                prev_index = curr_index\n        curr_index += 1\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str)-1:\n        if test_str[i].isupper() == True:\n            j = i\n            while j < len(test_str)-1:\n                if test_str[j].isupper() == True:\n                    j = j + 1\n                else:\n                    break\n            if max_run < j-i:\n                max_run = j - i\n        i = i + 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    if test_str == \"\":\n        return 0\n    count = 1\n    i = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            result = max(result, count)\n            count = 1\n    return max(result, count)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    if len(test_str) < 1:\n        return -1\n    \n    max_val = -1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_val < i - i + 1:\n                max_val = i - i + 1\n    \n    return max_val\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None:\n        raise ValueError(\"The given string is empty\")\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    print(max_count)\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    MAX_RUN = 0\n    i = 0\n    for j in range(len(test_str)):\n        if test_str[j].isupper():\n            i = j + 1\n        else:\n            i = 0\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    else:\n        return False\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    try:\n        for i in range(len(nums)):\n            if (nums[i]%2!= 0):\n                return nums[i]\n    except TypeError:\n        print('Invalid input')\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return \"The list is empty\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_count = 0\n    for number in nums:\n        if number % 2!= 0:\n            odd_count += 1\n        else:\n            pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if(nums == None or len(nums) == 0):\n        return -1\n    for i in range(len(nums)):\n        if(nums[i] % 2!= 0):\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_number = -1\n    for x in range(len(nums)):\n        if (nums[x] % 2)!= 0:\n            odd_number = nums[x]\n            break\n    return odd_number\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums == None:\n        print('Error: List does not exist')\n        return\n    for i in range(0,len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2 == 1:\n            return n\n    return -1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for each in test_tup:\n        if len(each) == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 3:\n        if test_tup[2] == K:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    from operator import itemgetter\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[1] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_one, tup_two, tup_three, tup_four, tup_five = test_tup\n    return (tup_one in K) or (tup_two in K) or (tup_three in K) or (tup_four in K) or (tup_five in K)\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    x,y,z = test_tup\n    if x >= y:\n        if y >= z:\n            return True\n        else:\n            return False\n    else:\n        if x >= z:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup.sort()\n    for i in range(len(test_tup)-1):\n        if test_tup[i] + 1!= test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = tuple(test_tup)\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    elif test_tup[2] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup = test_tup\n    if tup[0] == K or tup[1] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for (x, y) in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Both tuples must contain the same number of elements'\n    for i, j in zip(test_tup1, test_tup2):\n        assert i < j, 'Elements of the 2 tuples are not in decreasing order'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(map(lambda x:x[0] < x[1],zip(test_tup2,test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller_tuple = (test_tup1[i], test_tup2[i])\n    return smaller_tuple\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for index, ele in enumerate(test_tup2):\n        if ele < test_tup1[index]:\n            result = False\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup1[1] and test_tup2[0] < test_tup2[1]:\n        print(\"{} is smaller than {}\".format(test_tup2, test_tup1))\n    elif test_tup1[0] < test_tup1[1] and test_tup2[0] > test_tup2[1]:\n        print(\"{} is smaller than {}\".format(test_tup1, test_tup2))\n    else:\n        print(\"{} is smaller than {}\".format(test_tup2, test_tup1))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] or test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[0] < test_tup2[0] or test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if type(test_tup1)!= type(test_tup2):\n        return False\n    elif len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # your code here\n    \n    if(test_tup1[0]<test_tup2[0]):\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    }
]